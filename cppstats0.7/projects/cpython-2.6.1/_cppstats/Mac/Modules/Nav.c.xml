<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Mac/Modules/Nav.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pymactoolbox.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Carbon/Carbon.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ErrorObject</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>NavEventUPP</name></type> <name>my_eventProcUPP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>NavPreviewUPP</name></type> <name>my_previewProcUPP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>NavObjectFilterUPP</name></type> <name>my_filterProcUPP</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>pascal</name> <name>void</name></type>
<name>my_eventProc</name><parameter_list>(<param><decl><type><name>NavEventCallbackMessage</name></type> <name>callBackSelector</name></decl></param>,
<param><decl><type><name>NavCBRecPtr</name></type> <name>callBackParms</name></decl></param>,
<param><decl><type><name>NavCallBackUserData</name></type> <name>callbackUD</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name> <init>= <expr>(<name>PyObject</name> *)<name>callbackUD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pyfunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>dict</name></expr>)</condition><then> <return>return;</return></then></if>
<if>if <condition>( <expr>(<name>pyfunc</name> = <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr>"eventProc"</expr></argument>)</argument_list></call>) == <name>NULL</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>( <expr><name>pyfunc</name> == <name>Py_None</name></expr> )</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>pyfunc</name></expr></argument>, <argument><expr>"ls#"</expr></argument>, <argument><expr>(<name>long</name>)<name>callBackSelector</name></expr></argument>,
<argument><expr>(<name>void</name> *)<name>callBackParms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NavCBRec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>rv</name></expr> )</condition><then>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>PySys_WriteStderr</name><argument_list>(<argument><expr>"Nav: exception in eventProc callback\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>pascal</name> <name>Boolean</name></type>
<name>my_previewProc</name><parameter_list>(<param><decl><type><name>NavCBRecPtr</name></type> <name>callBackParms</name></decl></param>,
<param><decl><type><name>NavCallBackUserData</name></type> <name>callbackUD</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name> <init>= <expr>(<name>PyObject</name> *)<name>callbackUD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pyfunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>c_rv</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>dict</name></expr>)</condition><then> <return>return <expr><name>false</name></expr>;</return></then></if>
<if>if <condition>( <expr>(<name>pyfunc</name> = <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr>"previewProc"</expr></argument>)</argument_list></call>) == <name>NULL</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>pyfunc</name></expr></argument>, <argument><expr>"s#"</expr></argument>, <argument><expr>(<name>void</name> *)<name>callBackParms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NavCBRec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>rv</name></expr> )</condition><then> <block>{
<expr_stmt><expr><name>c_rv</name> = <call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PySys_WriteStderr</name><argument_list>(<argument><expr>"Nav: exception in previewProc callback\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>c_rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>pascal</name> <name>Boolean</name></type>
<name>my_filterProc</name><parameter_list>(<param><decl><type><name>AEDesc</name> *</type><name>theItem</name></decl></param>, <param><decl><type><name>void</name> *</type><name>info</name></decl></param>,
<param><decl><type><name>NavCallBackUserData</name></type> <name>callbackUD</name></decl></param>,
<param><decl><type><name>NavFilterModes</name></type> <name>filterMode</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name> <init>= <expr>(<name>PyObject</name> *)<name>callbackUD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pyfunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>c_rv</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>dict</name></expr>)</condition><then> <return>return <expr><name>false</name></expr>;</return></then></if>
<if>if <condition>( <expr>(<name>pyfunc</name> = <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr>"filterProc"</expr></argument>)</argument_list></call>) == <name>NULL</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>pyfunc</name></expr></argument>, <argument><expr>"O&amp;s#h"</expr></argument>,
<argument><expr><name>AEDesc_NewBorrowed</name></expr></argument>, <argument><expr><name>theItem</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NavFileOrFolderInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>(<name>short</name>)<name>filterMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>rv</name></expr> )</condition><then> <block>{
<expr_stmt><expr><name>c_rv</name> = <call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PySys_WriteStderr</name><argument_list>(<argument><expr>"Nav: exception in filterProc callback\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>c_rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>filldialogoptions</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>d</name></decl></param>,
<param><decl><type><name>AEDesc</name> **</type><name>defaultLocationP</name></decl></param>,
<param><decl><type><name>NavDialogOptions</name> *</type><name>opt</name></decl></param>,
<param><decl><type><name>NavEventUPP</name> *</type><name>eventProcP</name></decl></param>,
<param><decl><type><name>NavPreviewUPP</name> *</type><name>previewProcP</name></decl></param>,
<param><decl><type><name>NavObjectFilterUPP</name> *</type><name>filterProcP</name></decl></param>,
<param><decl><type><name>NavTypeListHandle</name> *</type><name>typeListP</name></decl></param>,
<param><decl><type><name>OSType</name> *</type><name>fileTypeP</name></decl></param>,
<param><decl><type><name>OSType</name> *</type><name>fileCreatorP</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>pos</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name></decl>, *<decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>keystr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AEDesc</name> *</type><name>defaultLocation_storage</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>NavGetDefaultDialogOptions</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>( <expr><call><name>PyDict_Next</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>&amp;<name>pos</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{
<if>if <condition>( <expr>!<name>key</name> || !<name>value</name> || !<call><name>PyString_Check</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>, <argument><expr>"DialogOption has non-string key"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>keystr</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr>"defaultLocation"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
<if>if <condition>( <expr>(<name>defaultLocation_storage</name> = <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>AEDesc</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>) == <name>NULL</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>( <expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>AEDesc_Convert</name></expr></argument>, <argument><expr><name>defaultLocation_storage</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>defaultLocation_storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>defaultLocationP</name> = <name>defaultLocation_storage</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr>"version"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
<if>if <condition>( <expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"H"</expr></argument>, <argument><expr>&amp;<name><name>opt</name>-&gt;<name>version</name></name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
}</block></then> <else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr>"dialogOptionFlags"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
<if>if <condition>( <expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"k"</expr></argument>, <argument><expr>&amp;<name><name>opt</name>-&gt;<name>dialogOptionFlags</name></name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
}</block></then> <else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr>"location"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
<if>if <condition>( <expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name><name>opt</name>-&gt;<name>location</name></name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
}</block></then> <else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr>"clientName"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
<if>if <condition>( <expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr>&amp;<name><name>opt</name>-&gt;<name>clientName</name></name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
}</block></then> <else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr>"windowTitle"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
<if>if <condition>( <expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr>&amp;<name><name>opt</name>-&gt;<name>windowTitle</name></name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
}</block></then> <else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr>"actionButtonLabel"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
<if>if <condition>( <expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr>&amp;<name><name>opt</name>-&gt;<name>actionButtonLabel</name></name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
}</block></then> <else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr>"cancelButtonLabel"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
<if>if <condition>( <expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr>&amp;<name><name>opt</name>-&gt;<name>cancelButtonLabel</name></name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
}</block></then> <else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr>"savedFileName"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
<if>if <condition>( <expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr>&amp;<name><name>opt</name>-&gt;<name>savedFileName</name></name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
}</block></then> <else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr>"message"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
<if>if <condition>( <expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr>&amp;<name><name>opt</name>-&gt;<name>message</name></name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
}</block></then> <else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr>"preferenceKey"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
<if>if <condition>( <expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name><name>opt</name>-&gt;<name>preferenceKey</name></name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></then> <else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr>"popupExtension"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
<if>if <condition>( <expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name><name>opt</name>-&gt;<name>popupExtension</name></name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then> <else>else <if>if<condition>( <expr><name>eventProcP</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr>"eventProc"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
<expr_stmt><expr>*<name>eventProcP</name> = <name>my_eventProcUPP</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if<condition>( <expr><name>previewProcP</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr>"previewProc"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
<expr_stmt><expr>*<name>previewProcP</name> = <name>my_previewProcUPP</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if<condition>( <expr><name>filterProcP</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr>"filterProc"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
<expr_stmt><expr>*<name>filterProcP</name> = <name>my_filterProcUPP</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></then> <else>else <if>if<condition>( <expr><name>typeListP</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr>"typeList"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
<if>if <condition>( <expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr><name>typeListP</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then> <else>else <if>if<condition>( <expr><name>fileTypeP</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr>"fileType"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
<if>if <condition>( <expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr><name>fileTypeP</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
}</block></then> <else>else <if>if<condition>( <expr><name>fileCreatorP</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr>"fileCreator"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
<if>if <condition>( <expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr><name>fileCreatorP</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>, <argument><expr>"Unknown DialogOption key: %s"</expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
}</block></while>
<return>return <expr>1</expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>NavReplyRecord</name></type> <name>itself</name></decl>;</decl_stmt>
}</block></struct></type> <name>navrrobject</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Navrrtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>nav_NavTranslateFile__doc__</name><index>[]</index></name> <init>=
<expr>"(NavTranslationOptions)-&gt;None"</expr></init></decl>
;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nav_NavTranslateFile</name><parameter_list>(<param><decl><type><name>navrrobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>NavTranslationOptions</name></type> <name>howToTranslate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"k"</expr></argument>, <argument><expr>&amp;<name>howToTranslate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>NavTranslateFile</name><argument_list>(<argument><expr>&amp;<name><name>self</name>-&gt;<name>itself</name></name></expr></argument>, <argument><expr><name>howToTranslate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>err</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>nav_NavCompleteSave__doc__</name><index>[]</index></name> <init>=
<expr>"(NavTranslationOptions)-&gt;None"</expr></init></decl>
;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nav_NavCompleteSave</name><parameter_list>(<param><decl><type><name>navrrobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>NavTranslationOptions</name></type> <name>howToTranslate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"k"</expr></argument>, <argument><expr>&amp;<name>howToTranslate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>NavCompleteSave</name><argument_list>(<argument><expr>&amp;<name><name>self</name>-&gt;<name>itself</name></name></expr></argument>, <argument><expr><name>howToTranslate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>err</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>navrr_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"NavTranslateFile"</expr>, <expr>(<name>PyCFunction</name>)<name>nav_NavTranslateFile</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>nav_NavTranslateFile__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"NavCompleteSave"</expr>, <expr>(<name>PyCFunction</name>)<name>nav_NavCompleteSave</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>nav_NavCompleteSave__doc__</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>navrrobject</name> *</type>
<name>newnavrrobject</name><parameter_list>(<param><decl><type><name>NavReplyRecord</name> *</type><name>itself</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>navrrobject</name> *</type><name>self</name></decl>;</decl_stmt>
<expr_stmt><expr><name>self</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>navrrobject</name></expr></argument>, <argument><expr>&amp;<name>Navrrtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>itself</name></name> = *<name>itself</name></expr>;</expr_stmt>
<return>return <expr><name>self</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>navrr_dealloc</name><parameter_list>(<param><decl><type><name>navrrobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>NavDisposeReply</name><argument_list>(<argument><expr>&amp;<name><name>self</name>-&gt;<name>itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_DEL</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>navrr_getattr</name><parameter_list>(<param><decl><type><name>navrrobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>FSRef</name></type> <name>fsr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>fss</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"__members__"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr>"ssssssssss"</expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<argument><expr>"ssssssssss"</expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr>"version"</expr></argument>, <argument><expr>"validRecord"</expr></argument>, <argument><expr>"replacing"</expr></argument>,
<argument><expr>"isStationery"</expr></argument>, <argument><expr>"translationNeeded"</expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr>"selection"</expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr>"selection_fsr"</expr></argument>,
<argument><expr>"fileTranslation"</expr></argument>, <argument><expr>"keyScript"</expr></argument>, <argument><expr>"saveFileName"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"version"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>itself</name>.<name>version</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"validRecord"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr>(<name>long</name>)<name><name>self</name>-&gt;<name>itself</name>.<name>validRecord</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"replacing"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr>(<name>long</name>)<name><name>self</name>-&gt;<name>itself</name>.<name>replacing</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"isStationery"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr>(<name>long</name>)<name><name>self</name>-&gt;<name>itself</name>.<name>isStationery</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"translationNeeded"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr>(<name>long</name>)<name><name>self</name>-&gt;<name>itself</name>.<name>translationNeeded</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"selection"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
<decl_stmt><decl><type><name>SInt32</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>, *<decl><type ref="prev"/><name>rvitem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AEDesc</name></type> <name>desc</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name>=<call><name>AECountItems</name><argument_list>(<argument><expr>&amp;<name><name>self</name>-&gt;<name>itself</name>.<name>selection</name></name></expr></argument>, <argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>( <expr>(<name>rv</name>=<call><name>PyList_New</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr> )</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>desc</name>.<name>dataHandle</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name>=<call><name>AEGetNthDesc</name><argument_list>(<argument><expr>&amp;<name><name>self</name>-&gt;<name>itself</name>.<name>selection</name></name></expr></argument>, <argument><expr><name>i</name>+1</expr></argument>, <argument><expr><name>typeFSS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>err</name>=<call><name>AEGetDescData</name><argument_list>(<argument><expr>&amp;<name>desc</name></expr></argument>, <argument><expr>&amp;<name>fss</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FSSpec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rvitem</name> = <call><name>PyMac_BuildFSSpec</name><argument_list>(<argument><expr>&amp;<name>fss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>rvitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AEDisposeDesc</name><argument_list>(<argument><expr>&amp;<name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"selection_fsr"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
<decl_stmt><decl><type><name>SInt32</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>, *<decl><type ref="prev"/><name>rvitem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AEDesc</name></type> <name>desc</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name>=<call><name>AECountItems</name><argument_list>(<argument><expr>&amp;<name><name>self</name>-&gt;<name>itself</name>.<name>selection</name></name></expr></argument>, <argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>( <expr>(<name>rv</name>=<call><name>PyList_New</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr> )</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>desc</name>.<name>dataHandle</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name>=<call><name>AEGetNthDesc</name><argument_list>(<argument><expr>&amp;<name><name>self</name>-&gt;<name>itself</name>.<name>selection</name></name></expr></argument>, <argument><expr><name>i</name>+1</expr></argument>, <argument><expr><name>typeFSRef</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>err</name>=<call><name>AEGetDescData</name><argument_list>(<argument><expr>&amp;<name>desc</name></expr></argument>, <argument><expr>&amp;<name>fsr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FSRef</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rvitem</name> = <call><name>PyMac_BuildFSRef</name><argument_list>(<argument><expr>&amp;<name>fsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>rvitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AEDisposeDesc</name><argument_list>(<argument><expr>&amp;<name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"fileTranslation"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then>
<return>return <expr><call><name>ResObj_New</name><argument_list>(<argument><expr>(<name>Handle</name>)<name><name>self</name>-&gt;<name>itself</name>.<name>fileTranslation</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"keyScript"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>, <argument><expr>(<name>short</name>)<name><name>self</name>-&gt;<name>itself</name>.<name>keyScript</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"saveFileName"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>CFStringRefObj_New</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>itself</name>.<name>saveFileName</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>navrr_methods</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>navrr_setattr</name><parameter_list>(<param><decl><type><name>navrrobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<return>return <expr>-1</expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>Navrrtype__doc__</name><index>[]</index></name> <init>=
<expr>"Record containing result of a Nav file selection call. Use dir() for member names."</expr></init></decl>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Navrrtype</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>)</argument_list></call>
0</expr>,
<expr>"Nav.NavReplyRecord"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>navrrobject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>navrr_dealloc</name></expr>,
<expr>(<name>printfunc</name>)0</expr>,
<expr>(<name>getattrfunc</name>)<name>navrr_getattr</name></expr>,
<expr>(<name>setattrfunc</name>)<name>navrr_setattr</name></expr>,
<expr>(<name>cmpfunc</name>)0</expr>,
<expr>(<name>reprfunc</name>)0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>hashfunc</name>)0</expr>,
<expr>(<name>ternaryfunc</name>)0</expr>,
<expr>(<name>reprfunc</name>)0</expr>,
<expr>0L</expr>,<expr>0L</expr>,<expr>0L</expr>,<expr>0L</expr>,
<expr><name>Navrrtype__doc__</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>nav_NavGetFile__doc__</name><index>[]</index></name> <init>=
<expr>"(DialogOptions dict or kwargs+defaultLocation,eventProc,previewProc,filterProc,typeList) -&gt; NavReplyRecord"</expr></init></decl>
;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nav_NavGetFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AEDesc</name> *</type><name>defaultLocation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavReplyRecord</name></type> <name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavDialogOptions</name></type> <name>dialogOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavEventUPP</name></type> <name>eventProc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavPreviewUPP</name></type> <name>previewProc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavObjectFilterUPP</name></type> <name>filterProc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavTypeListHandle</name></type> <name>typeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
<if>if <condition>( <expr><name>kw</name> &amp;&amp; <call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>";either keyword arguments or dictionary expected"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>dict</name> = <name>kw</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!"</expr></argument>, <argument><expr>&amp;<name>PyDict_Type</name></expr></argument>, <argument><expr>&amp;<name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if></else></if>
<if>if <condition>(<expr>!<call><name>filldialogoptions</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr>&amp;<name>defaultLocation</name></expr></argument>, <argument><expr>&amp;<name>dialogOptions</name></expr></argument>, <argument><expr>&amp;<name>eventProc</name></expr></argument>, <argument><expr>&amp;<name>previewProc</name></expr></argument>, <argument><expr>&amp;<name>filterProc</name></expr></argument>, <argument><expr>&amp;<name>typeList</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>NavGetFile</name><argument_list>(<argument><expr><name>defaultLocation</name></expr></argument>, <argument><expr>&amp;<name>reply</name></expr></argument>, <argument><expr>&amp;<name>dialogOptions</name></expr></argument>,
<argument><expr><name>eventProc</name></expr></argument>, <argument><expr><name>previewProc</name></expr></argument>, <argument><expr><name>filterProc</name></expr></argument>, <argument><expr><name>typeList</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>defaultLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>err</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<call><name>newnavrrobject</name><argument_list>(<argument><expr>&amp;<name>reply</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>nav_NavPutFile__doc__</name><index>[]</index></name> <init>=
<expr>"(DialogOptions dict or kwargs+defaultLocation,eventProc,fileCreator,fileType) -&gt; NavReplyRecord"</expr></init></decl>
;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nav_NavPutFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AEDesc</name> *</type><name>defaultLocation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavReplyRecord</name></type> <name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavDialogOptions</name></type> <name>dialogOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavEventUPP</name></type> <name>eventProc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>fileType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>fileCreator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
<if>if <condition>( <expr><name>kw</name> &amp;&amp; <call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>";either keyword arguments or dictionary expected"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>dict</name> = <name>kw</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!"</expr></argument>, <argument><expr>&amp;<name>PyDict_Type</name></expr></argument>, <argument><expr>&amp;<name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if></else></if>
<if>if <condition>(<expr>!<call><name>filldialogoptions</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr>&amp;<name>defaultLocation</name></expr></argument>, <argument><expr>&amp;<name>dialogOptions</name></expr></argument>, <argument><expr>&amp;<name>eventProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>fileType</name></expr></argument>, <argument><expr>&amp;<name>fileCreator</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>NavPutFile</name><argument_list>(<argument><expr><name>defaultLocation</name></expr></argument>, <argument><expr>&amp;<name>reply</name></expr></argument>, <argument><expr>&amp;<name>dialogOptions</name></expr></argument>,
<argument><expr><name>eventProc</name></expr></argument>, <argument><expr><name>fileType</name></expr></argument>, <argument><expr><name>fileCreator</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>defaultLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>err</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<call><name>newnavrrobject</name><argument_list>(<argument><expr>&amp;<name>reply</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>nav_NavAskSaveChanges__doc__</name><index>[]</index></name> <init>=
<expr>"(NavAskSaveChangesAction, DialogOptions dict or kwargs+eventProc) -&gt; NavAskSaveChangesResult"</expr></init></decl>
;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nav_NavAskSaveChanges</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavDialogOptions</name></type> <name>dialogOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavAskSaveChangesAction</name></type> <name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavAskSaveChangesResult</name></type> <name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavEventUPP</name></type> <name>eventProc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
<if>if <condition>( <expr><name>kw</name> &amp;&amp; <call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"k"</expr></argument>, <argument><expr>&amp;<name>action</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>dict</name> = <name>kw</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"lO!"</expr></argument>, <argument><expr>&amp;<name>action</name></expr></argument>, <argument><expr>&amp;<name>PyDict_Type</name></expr></argument>, <argument><expr>&amp;<name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if></else></if>
<if>if <condition>(<expr>!<call><name>filldialogoptions</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>dialogOptions</name></expr></argument>, <argument><expr>&amp;<name>eventProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>NavAskSaveChanges</name><argument_list>(<argument><expr>&amp;<name>dialogOptions</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr>&amp;<name>reply</name></expr></argument>, <argument><expr><name>eventProc</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>err</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr>(<name>long</name>)<name>reply</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>nav_NavCustomAskSaveChanges__doc__</name><index>[]</index></name> <init>=
<expr>"(DialogOptions dict or kwargs+eventProc) -&gt; NavAskSaveChangesResult"</expr></init></decl>
;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nav_NavCustomAskSaveChanges</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavDialogOptions</name></type> <name>dialogOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavAskSaveChangesResult</name></type> <name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavEventUPP</name></type> <name>eventProc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
<if>if <condition>( <expr><name>kw</name> &amp;&amp; <call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>";either keyword arguments or dictionary expected"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>dict</name> = <name>kw</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!"</expr></argument>, <argument><expr>&amp;<name>PyDict_Type</name></expr></argument>, <argument><expr>&amp;<name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if></else></if>
<if>if <condition>(<expr>!<call><name>filldialogoptions</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>dialogOptions</name></expr></argument>, <argument><expr>&amp;<name>eventProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>NavCustomAskSaveChanges</name><argument_list>(<argument><expr>&amp;<name>dialogOptions</name></expr></argument>, <argument><expr>&amp;<name>reply</name></expr></argument>, <argument><expr><name>eventProc</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>err</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr>(<name>long</name>)<name>reply</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>nav_NavAskDiscardChanges__doc__</name><index>[]</index></name> <init>=
<expr>"(DialogOptions dict or kwargs+eventProc) -&gt; NavAskSaveChangesResult"</expr></init></decl>
;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nav_NavAskDiscardChanges</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavDialogOptions</name></type> <name>dialogOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavAskSaveChangesResult</name></type> <name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavEventUPP</name></type> <name>eventProc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
<if>if <condition>( <expr><name>kw</name> &amp;&amp; <call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>";either keyword arguments or dictionary expected"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>dict</name> = <name>kw</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!"</expr></argument>, <argument><expr>&amp;<name>PyDict_Type</name></expr></argument>, <argument><expr>&amp;<name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if></else></if>
<if>if <condition>(<expr>!<call><name>filldialogoptions</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>dialogOptions</name></expr></argument>, <argument><expr>&amp;<name>eventProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>NavAskDiscardChanges</name><argument_list>(<argument><expr>&amp;<name>dialogOptions</name></expr></argument>, <argument><expr>&amp;<name>reply</name></expr></argument>, <argument><expr><name>eventProc</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>err</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr>(<name>long</name>)<name>reply</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>nav_NavChooseFile__doc__</name><index>[]</index></name> <init>=
<expr>"(DialogOptions dict or kwargs+defaultLocation,eventProc,previewProc,filterProc,typeList) -&gt; NavReplyRecord"</expr></init></decl>
;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nav_NavChooseFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AEDesc</name> *</type><name>defaultLocation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavReplyRecord</name></type> <name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavDialogOptions</name></type> <name>dialogOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavEventUPP</name></type> <name>eventProc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavPreviewUPP</name></type> <name>previewProc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavObjectFilterUPP</name></type> <name>filterProc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavTypeListHandle</name></type> <name>typeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
<if>if <condition>( <expr><name>kw</name> &amp;&amp; <call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>";either keyword arguments or dictionary expected"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>dict</name> = <name>kw</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!"</expr></argument>, <argument><expr>&amp;<name>PyDict_Type</name></expr></argument>, <argument><expr>&amp;<name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if></else></if>
<if>if <condition>(<expr>!<call><name>filldialogoptions</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr>&amp;<name>defaultLocation</name></expr></argument>, <argument><expr>&amp;<name>dialogOptions</name></expr></argument>, <argument><expr>&amp;<name>eventProc</name></expr></argument>, <argument><expr>&amp;<name>previewProc</name></expr></argument>, <argument><expr>&amp;<name>filterProc</name></expr></argument>, <argument><expr>&amp;<name>typeList</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>NavChooseFile</name><argument_list>(<argument><expr><name>defaultLocation</name></expr></argument>, <argument><expr>&amp;<name>reply</name></expr></argument>, <argument><expr>&amp;<name>dialogOptions</name></expr></argument>,
<argument><expr><name>eventProc</name></expr></argument>, <argument><expr><name>previewProc</name></expr></argument>, <argument><expr><name>filterProc</name></expr></argument>, <argument><expr><name>typeList</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>defaultLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>err</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<call><name>newnavrrobject</name><argument_list>(<argument><expr>&amp;<name>reply</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>nav_NavChooseFolder__doc__</name><index>[]</index></name> <init>=
<expr>"(DialogOptions dict or kwargs+defaultLocation,eventProc,filterProc) -&gt; NavReplyRecord"</expr></init></decl>
;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nav_NavChooseFolder</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AEDesc</name> *</type><name>defaultLocation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavReplyRecord</name></type> <name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavDialogOptions</name></type> <name>dialogOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavEventUPP</name></type> <name>eventProc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavObjectFilterUPP</name></type> <name>filterProc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
<if>if <condition>( <expr><name>kw</name> &amp;&amp; <call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>";either keyword arguments or dictionary expected"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>dict</name> = <name>kw</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!"</expr></argument>, <argument><expr>&amp;<name>PyDict_Type</name></expr></argument>, <argument><expr>&amp;<name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if></else></if>
<if>if <condition>(<expr>!<call><name>filldialogoptions</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr>&amp;<name>defaultLocation</name></expr></argument>, <argument><expr>&amp;<name>dialogOptions</name></expr></argument>, <argument><expr>&amp;<name>eventProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>filterProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>NavChooseFolder</name><argument_list>(<argument><expr><name>defaultLocation</name></expr></argument>, <argument><expr>&amp;<name>reply</name></expr></argument>, <argument><expr>&amp;<name>dialogOptions</name></expr></argument>,
<argument><expr><name>eventProc</name></expr></argument>, <argument><expr><name>filterProc</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>defaultLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>err</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<call><name>newnavrrobject</name><argument_list>(<argument><expr>&amp;<name>reply</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>nav_NavChooseVolume__doc__</name><index>[]</index></name> <init>=
<expr>"(DialogOptions dict or kwargs+defaultLocation,eventProc,filterProc) -&gt; NavReplyRecord"</expr></init></decl>
;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nav_NavChooseVolume</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AEDesc</name> *</type><name>defaultLocation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavReplyRecord</name></type> <name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavDialogOptions</name></type> <name>dialogOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavEventUPP</name></type> <name>eventProc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavObjectFilterUPP</name></type> <name>filterProc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
<if>if <condition>( <expr><name>kw</name> &amp;&amp; <call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>";either keyword arguments or dictionary expected"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>dict</name> = <name>kw</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!"</expr></argument>, <argument><expr>&amp;<name>PyDict_Type</name></expr></argument>, <argument><expr>&amp;<name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if></else></if>
<if>if <condition>(<expr>!<call><name>filldialogoptions</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr>&amp;<name>defaultLocation</name></expr></argument>, <argument><expr>&amp;<name>dialogOptions</name></expr></argument>, <argument><expr>&amp;<name>eventProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>filterProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>NavChooseVolume</name><argument_list>(<argument><expr><name>defaultLocation</name></expr></argument>, <argument><expr>&amp;<name>reply</name></expr></argument>, <argument><expr>&amp;<name>dialogOptions</name></expr></argument>,
<argument><expr><name>eventProc</name></expr></argument>, <argument><expr><name>filterProc</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>defaultLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>err</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<call><name>newnavrrobject</name><argument_list>(<argument><expr>&amp;<name>reply</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>nav_NavChooseObject__doc__</name><index>[]</index></name> <init>=
<expr>"(DialogOptions dict or kwargs+defaultLocation,eventProc,filterProc) -&gt; NavReplyRecord"</expr></init></decl>
;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nav_NavChooseObject</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AEDesc</name> *</type><name>defaultLocation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavReplyRecord</name></type> <name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavDialogOptions</name></type> <name>dialogOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavEventUPP</name></type> <name>eventProc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavObjectFilterUPP</name></type> <name>filterProc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
<if>if <condition>( <expr><name>kw</name> &amp;&amp; <call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>";either keyword arguments or dictionary expected"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>dict</name> = <name>kw</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!"</expr></argument>, <argument><expr>&amp;<name>PyDict_Type</name></expr></argument>, <argument><expr>&amp;<name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if></else></if>
<if>if <condition>(<expr>!<call><name>filldialogoptions</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr>&amp;<name>defaultLocation</name></expr></argument>, <argument><expr>&amp;<name>dialogOptions</name></expr></argument>, <argument><expr>&amp;<name>eventProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>filterProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>NavChooseObject</name><argument_list>(<argument><expr><name>defaultLocation</name></expr></argument>, <argument><expr>&amp;<name>reply</name></expr></argument>, <argument><expr>&amp;<name>dialogOptions</name></expr></argument>,
<argument><expr><name>eventProc</name></expr></argument>, <argument><expr><name>filterProc</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>defaultLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>err</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<call><name>newnavrrobject</name><argument_list>(<argument><expr>&amp;<name>reply</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>nav_NavNewFolder__doc__</name><index>[]</index></name> <init>=
<expr>"(DialogOptions dict or kwargs+defaultLocation,eventProc) -&gt; NavReplyRecord"</expr></init></decl>
;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nav_NavNewFolder</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AEDesc</name> *</type><name>defaultLocation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavReplyRecord</name></type> <name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavDialogOptions</name></type> <name>dialogOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NavEventUPP</name></type> <name>eventProc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
<if>if <condition>( <expr><name>kw</name> &amp;&amp; <call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>";either keyword arguments or dictionary expected"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>dict</name> = <name>kw</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!"</expr></argument>, <argument><expr>&amp;<name>PyDict_Type</name></expr></argument>, <argument><expr>&amp;<name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if></else></if>
<if>if <condition>(<expr>!<call><name>filldialogoptions</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr>&amp;<name>defaultLocation</name></expr></argument>, <argument><expr>&amp;<name>dialogOptions</name></expr></argument>, <argument><expr>&amp;<name>eventProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>NavNewFolder</name><argument_list>(<argument><expr><name>defaultLocation</name></expr></argument>, <argument><expr>&amp;<name>reply</name></expr></argument>, <argument><expr>&amp;<name>dialogOptions</name></expr></argument>, <argument><expr><name>eventProc</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>defaultLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>err</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<call><name>newnavrrobject</name><argument_list>(<argument><expr>&amp;<name>reply</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
static char nav_NavCustomControl__doc__[] =
""
;
static PyObject *
nav_NavCustomControl(PyObject *self, PyObject *args) {
if (!PyArg_ParseTuple(args, ""))
return NULL;
Py_INCREF(Py_None);
return Py_None;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>nav_NavServicesCanRun__doc__</name><index>[]</index></name> <init>=
<expr>"()-&gt;int"</expr></init></decl>
;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nav_NavServicesCanRun</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Boolean</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>NavServicesCanRun</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr>(<name>long</name>)<name>rv</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>nav_NavServicesAvailable__doc__</name><index>[]</index></name> <init>=
<expr>"()-&gt;int"</expr></init></decl>
;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nav_NavServicesAvailable</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Boolean</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>NavServicesAvailable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr>(<name>long</name>)<name>rv</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>nav_NavLoad__doc__</name><index>[]</index></name> <init>=
<expr>"()-&gt;None"</expr></init></decl>
;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nav_NavLoad</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>NavLoad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>nav_NavUnload__doc__</name><index>[]</index></name> <init>=
<expr>"()-&gt;None"</expr></init></decl>
;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nav_NavUnload</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>NavUnload</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>nav_NavLibraryVersion__doc__</name><index>[]</index></name> <init>=
<expr>"()-&gt;int"</expr></init></decl>
;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nav_NavLibraryVersion</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>UInt32</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>NavLibraryVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr>(<name>long</name>)<name>rv</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>nav_NavGetDefaultDialogOptions__doc__</name><index>[]</index></name> <init>=
<expr>"()-&gt;dict\nPass dict or keyword args with same names to other calls."</expr></init></decl>
;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nav_NavGetDefaultDialogOptions</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>NavDialogOptions</name></type> <name>dialogOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>NavGetDefaultDialogOptions</name><argument_list>(<argument><expr>&amp;<name>dialogOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>err</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr>"{s:h,s:l,s:O&amp;,s:O&amp;,s:O&amp;,s:O&amp;,s:O&amp;,s:O&amp;,s:O&amp;,s:O&amp;,s:O&amp;}"</expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<argument><expr>"{s:h,s:l,s:O&amp;,s:O&amp;,s:O&amp;,s:O&amp;,s:O&amp;,s:O&amp;,s:O&amp;,s:O&amp;}"</expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr>"version"</expr></argument>, <argument><expr><name><name>dialogOptions</name>.<name>version</name></name></expr></argument>,
<argument><expr>"dialogOptionFlags"</expr></argument>, <argument><expr><name><name>dialogOptions</name>.<name>dialogOptionFlags</name></name></expr></argument>,
<argument><expr>"location"</expr></argument>, <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name><name>dialogOptions</name>.<name>location</name></name></expr></argument>,
<argument><expr>"clientName"</expr></argument>, <argument><expr><name>PyMac_BuildStr255</name></expr></argument>, <argument><expr>&amp;<name><name>dialogOptions</name>.<name>clientName</name></name></expr></argument>,
<argument><expr>"windowTitle"</expr></argument>, <argument><expr><name>PyMac_BuildStr255</name></expr></argument>, <argument><expr>&amp;<name><name>dialogOptions</name>.<name>windowTitle</name></name></expr></argument>,
<argument><expr>"actionButtonLabel"</expr></argument>, <argument><expr><name>PyMac_BuildStr255</name></expr></argument>, <argument><expr>&amp;<name><name>dialogOptions</name>.<name>actionButtonLabel</name></name></expr></argument>,
<argument><expr>"cancelButtonLabel"</expr></argument>, <argument><expr><name>PyMac_BuildStr255</name></expr></argument>, <argument><expr>&amp;<name><name>dialogOptions</name>.<name>cancelButtonLabel</name></name></expr></argument>,
<argument><expr>"savedFileName"</expr></argument>, <argument><expr><name>PyMac_BuildStr255</name></expr></argument>, <argument><expr>&amp;<name><name>dialogOptions</name>.<name>savedFileName</name></name></expr></argument>,
<argument><expr>"message"</expr></argument>, <argument><expr><name>PyMac_BuildStr255</name></expr></argument>, <argument><expr>&amp;<name><name>dialogOptions</name>.<name>message</name></name></expr></argument>,
<argument><expr>"preferenceKey"</expr></argument>, <argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name><name>dialogOptions</name>.<name>preferenceKey</name></name></expr></argument>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
,<argument><expr>"popupExtension"</expr></argument>, <argument><expr><name>OptResObj_New</name></expr></argument>, <argument><expr><name><name>dialogOptions</name>.<name>popupExtension</name></name></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>nav_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"NavGetFile"</expr>, <expr>(<name>PyCFunction</name>)<name>nav_NavGetFile</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>, <expr><name>nav_NavGetFile__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"NavPutFile"</expr>, <expr>(<name>PyCFunction</name>)<name>nav_NavPutFile</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>, <expr><name>nav_NavPutFile__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"NavAskSaveChanges"</expr>, <expr>(<name>PyCFunction</name>)<name>nav_NavAskSaveChanges</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>, <expr><name>nav_NavAskSaveChanges__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"NavCustomAskSaveChanges"</expr>, <expr>(<name>PyCFunction</name>)<name>nav_NavCustomAskSaveChanges</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>, <expr><name>nav_NavCustomAskSaveChanges__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"NavAskDiscardChanges"</expr>, <expr>(<name>PyCFunction</name>)<name>nav_NavAskDiscardChanges</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>, <expr><name>nav_NavAskDiscardChanges__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"NavChooseFile"</expr>, <expr>(<name>PyCFunction</name>)<name>nav_NavChooseFile</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>, <expr><name>nav_NavChooseFile__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"NavChooseFolder"</expr>, <expr>(<name>PyCFunction</name>)<name>nav_NavChooseFolder</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>, <expr><name>nav_NavChooseFolder__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"NavChooseVolume"</expr>, <expr>(<name>PyCFunction</name>)<name>nav_NavChooseVolume</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>, <expr><name>nav_NavChooseVolume__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"NavChooseObject"</expr>, <expr>(<name>PyCFunction</name>)<name>nav_NavChooseObject</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>, <expr><name>nav_NavChooseObject__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"NavNewFolder"</expr>, <expr>(<name>PyCFunction</name>)<name>nav_NavNewFolder</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>, <expr><name>nav_NavNewFolder__doc__</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
{"NavCustomControl", (PyCFunction)nav_NavCustomControl, METH_VARARGS, nav_NavCustomControl__doc__},
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"NavServicesCanRun"</expr>, <expr>(<name>PyCFunction</name>)<name>nav_NavServicesCanRun</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>nav_NavServicesCanRun__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"NavServicesAvailable"</expr>, <expr>(<name>PyCFunction</name>)<name>nav_NavServicesAvailable</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>nav_NavServicesAvailable__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"NavLoad"</expr>, <expr>(<name>PyCFunction</name>)<name>nav_NavLoad</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>nav_NavLoad__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"NavUnload"</expr>, <expr>(<name>PyCFunction</name>)<name>nav_NavUnload</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>nav_NavUnload__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"NavLibraryVersion"</expr>, <expr>(<name>PyCFunction</name>)<name>nav_NavLibraryVersion</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>nav_NavLibraryVersion__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"NavGetDefaultDialogOptions"</expr>, <expr>(<name>PyCFunction</name>)<name>nav_NavGetDefaultDialogOptions</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>nav_NavGetDefaultDialogOptions__doc__</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr>(<name>PyCFunction</name>)<name>NULL</name></expr>, <expr>0</expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>Nav_module_documentation</name><index>[]</index></name> <init>=
<expr>"Interface to Navigation Services\n"
"Most calls accept a NavDialogOptions dictionary or keywords with the same names, pass {}\n"
"if you want the default options.\n"
"Use NavGetDefaultDialogOptions() to find out common option names.\n"
"See individual docstrings for additional keyword args/dictentries supported by each call.\n"
"Pass None as eventProc to get movable-modal dialogs that process updates through the standard Python mechanism."</expr></init></decl>
;</decl_stmt>
<function><type><name>void</name></type>
<name>initNav</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"In 3.x, Nav is removed."</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>( <expr>!<call><name>NavServicesAvailable</name><argument_list>()</argument_list></call></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ImportError</name></expr></argument>, <argument><expr>"Navigation Services not available"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule4</name><argument_list>(<argument><expr>"Nav"</expr></argument>, <argument><expr><name>nav_methods</name></expr></argument>,
<argument><expr><name>Nav_module_documentation</name></expr></argument>,
<argument><expr>(<name>PyObject</name>*)<name>NULL</name></expr></argument>,<argument><expr><name>PYTHON_API_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ErrorObject</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>"Nav.error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"error"</expr></argument>, <argument><expr><name>ErrorObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>my_eventProcUPP</name> = <call><name>NewNavEventUPP</name><argument_list>(<argument><expr><name>my_eventProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>my_previewProcUPP</name> = <call><name>NewNavPreviewUPP</name><argument_list>(<argument><expr><name>my_previewProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>my_filterProcUPP</name> = <call><name>NewNavObjectFilterUPP</name><argument_list>(<argument><expr><name>my_filterProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
