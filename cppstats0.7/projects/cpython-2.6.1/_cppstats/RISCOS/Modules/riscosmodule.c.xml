<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/RISCOS/Modules/riscosmodule.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oslib/osfscontrol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oslib/osgbpb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oslib/os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oslib/osfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unixstuff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structseq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>os_error</name> *</type><name>e</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>riscos_error</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_OSError</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>riscos_oserror</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>riscos_error</name><argument_list>(<argument><expr><name><name>e</name>-&gt;<name>errmess</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>riscos_remove</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>path1</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s:remove"</expr></argument>, <argument><expr>&amp;<name>path1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>remove</name><argument_list>(<argument><expr><name>path1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>PyExc_OSError</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>riscos_rename</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>path1</name></decl>, *<decl><type ref="prev"/><name>path2</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"ss:rename"</expr></argument>, <argument><expr>&amp;<name>path1</name></expr></argument>, <argument><expr>&amp;<name>path2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name>path1</name></expr></argument>,<argument><expr><name>path2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>PyExc_OSError</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>riscos_system</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>command</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s:system"</expr></argument>, <argument><expr>&amp;<name>command</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>system</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>riscos_chdir</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s:chdir"</expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>e</name>=<call><name>xosfscontrol_dir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><name>e</name></expr>)</condition><then> <return>return <expr><call><name>riscos_oserror</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>canon</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>path</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>e</name>=<call><name>xosfscontrol_canonicalise_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><name>e</name></expr>)</condition><then> <return>return <expr><call><name>riscos_oserror</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>obj</name>=<call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr>-<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><name>obj</name>==<name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>buf</name>=<call><name>PyString_AsString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name>=<call><name>xosfscontrol_canonicalise_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>1-<name>len</name></expr></argument>,<argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><name>len</name>!=1</expr>)</condition><then> <return>return <expr><call><name>riscos_error</name><argument_list>(<argument><expr>"Error expanding path"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if<condition>(<expr>!<name>e</name></expr>)</condition><then> <return>return <expr><name>obj</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>riscos_oserror</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>riscos_getcwd</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>canon</name><argument_list>(<argument><expr>"@"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>riscos_expand</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s:expand"</expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>canon</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>riscos_mkdir</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s|i:mkdir"</expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>e</name>=<call><name>xosfile_create_dir</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><name>e</name></expr>)</condition><then> <return>return <expr><call><name>riscos_oserror</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>riscos_listdir</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>,<decl><type ref="prev"/><name><name>buf</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>, *<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr>0</expr></init>,<name>count</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s:listdir"</expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>d</name>=<call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr>!<name>d</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<for>for(<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name>e</name>=<call><name>xosgbpb_dir_entries</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr>(<name>osgbpb_string_list</name>*)<name>buf</name></expr></argument>,
<argument><expr>1</expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr>256</expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>&amp;<name>count</name></expr></argument>,<argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><name>e</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>riscos_oserror</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<if>if<condition>(<expr><name>count</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>v</name>=<call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr>!<name>v</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if<condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if<condition>(<expr><name>c</name>==-1</expr>)</condition><then> <break>break;</break></then></if>
}</block></for>
<return>return <expr><name>d</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>stat_result__doc__</name></expr></argument>,
<argument><expr>"stat_result: Result from stat or lstat.\n\n\
This object may be accessed either as a tuple of\n\
(mode,ino,dev,nlink,uid,gid,size,atime,mtime,ctime)\n\
or via the attributes st_mode, st_ino, st_dev, st_nlink, st_uid, and so on.\n\
\n\
RiscOS: The fields st_ftype, st_attrs, and st_obtype are also available.\n\
\n\
See os.stat for more information."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyStructSequence_Field</name></type> <name><name>stat_result_fields</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"st_mode"</expr>, <expr>"protection bits"</expr> }</block></expr>,
<expr><block>{ <expr>"st_ino"</expr>, <expr>"inode"</expr> }</block></expr>,
<expr><block>{ <expr>"st_dev"</expr>, <expr>"device"</expr> }</block></expr>,
<expr><block>{ <expr>"st_nlink"</expr>, <expr>"number of hard links"</expr> }</block></expr>,
<expr><block>{ <expr>"st_uid"</expr>, <expr>"user ID of owner"</expr> }</block></expr>,
<expr><block>{ <expr>"st_gid"</expr>, <expr>"group ID of owner"</expr> }</block></expr>,
<expr><block>{ <expr>"st_size"</expr>, <expr>"total size, in bytes"</expr> }</block></expr>,
<expr><block>{ <expr>"st_atime"</expr>, <expr>"time of last access"</expr> }</block></expr>,
<expr><block>{ <expr>"st_mtime"</expr>, <expr>"time of last modification"</expr> }</block></expr>,
<expr><block>{ <expr>"st_ctime"</expr>, <expr>"time of last change"</expr> }</block></expr>,
<expr><block>{ <expr>"st_ftype"</expr>, <expr>"file type"</expr> }</block></expr>,
<expr><block>{ <expr>"st_attrs"</expr>, <expr>"attributes"</expr> }</block></expr>,
<expr><block>{ <expr>"st_obtype"</expr>, <expr>"object type"</expr> }</block></expr>,
<expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyStructSequence_Desc</name></type> <name>stat_result_desc</name> <init>= <expr><block>{
<expr>"riscos.stat_result"</expr>,
<expr><name>stat_result__doc__</name></expr>,
<expr><name>stat_result_fields</name></expr>,
<expr>13</expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>StatResultType</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>riscos_stat</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ob</name></decl>,<decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bits</name></type> <name>t</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bits</name></type> <name>ld</name></decl>,<decl><type ref="prev"/><name>ex</name></decl>,<decl><type ref="prev"/><name>at</name></decl>,<decl><type ref="prev"/><name>ft</name></decl>,<decl><type ref="prev"/><name>mode</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s:stat"</expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>e</name>=<call><name>xosfile_read_stamped_no_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr>&amp;<name>ob</name></expr></argument>,<argument><expr>&amp;<name>ld</name></expr></argument>,<argument><expr>&amp;<name>ex</name></expr></argument>,<argument><expr>&amp;<name>len</name></expr></argument>,<argument><expr>&amp;<name>at</name></expr></argument>,<argument><expr>&amp;<name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><name>e</name></expr>)</condition><then> <return>return <expr><call><name>riscos_oserror</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<switch>switch <condition>(<expr><name>ob</name></expr>)</condition> <block>{
<case>case <expr><name>osfile_IS_FILE</name></expr>:
<expr_stmt><expr><name>mode</name>=0100000</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>osfile_IS_DIR</name></expr>:
<expr_stmt><expr><name>mode</name>=040000</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>osfile_IS_IMAGE</name></expr>:
<expr_stmt><expr><name>mode</name>=0140000</expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<return>return <expr><call><name>riscos_error</name><argument_list>(<argument><expr>"Not found"</expr></argument>)</argument_list></call></expr>;</return>
</default>}</block></switch>
<if>if<condition>(<expr><name>ft</name>!=-1</expr>)</condition><then> <expr_stmt><expr><name>t</name>=<call><name>unixtime</name><argument_list>(<argument><expr><name>ld</name></expr></argument>,<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>mode</name>|=(<name>at</name>&amp;7)&lt;&lt;6</expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name>|=((<name>at</name>&amp;112)*9)&gt;&gt;4</expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> = <call><name>PyStructSequence_New</name><argument_list>(<argument><expr>&amp;<name>StatResultType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyStructSequence_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyStructSequence_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) 0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyStructSequence_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) 0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyStructSequence_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) 0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyStructSequence_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) 0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyStructSequence_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) 0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyStructSequence_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>6</expr></argument>,
<argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyStructSequence_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyStructSequence_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyStructSequence_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>9</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyStructSequence_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>10</expr></argument>,
<argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>ft</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyStructSequence_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>11</expr></argument>,
<argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>at</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyStructSequence_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>12</expr></argument>,
<argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>ob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>v</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>riscos_chmod</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>,<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bits</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bits</name></type> <name>attr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>attr</name>=(<name>mode</name>&amp;0x700)&gt;&gt;8</expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name>|=(<name>mode</name>&amp;7)&lt;&lt;4</expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"si:chmod"</expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>,<argument><expr>(<name>int</name>*)&amp;<name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>e</name>=<call><name>xosfile_write_attr</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><name>e</name></expr>)</condition><then> <return>return <expr><call><name>riscos_oserror</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>riscos_utime</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>atime</name></decl>, <decl><type ref="prev"/><name>mtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>arg</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"sO:utime"</expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>arg</name> == <name>Py_None</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>e</name><init>=<expr><call><name>xosfile_stamp</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if<condition>(<expr><name>e</name></expr>)</condition><then> <return>return <expr><call><name>riscos_oserror</name><argument_list>()</argument_list></call></expr>;</return></then></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"(ll)"</expr></argument>, <argument><expr>&amp;<name>atime</name></expr></argument>, <argument><expr>&amp;<name>mtime</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"utime() arg 2 must be a tuple (atime, mtime)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>fileswitch_object_type</name></type> <name>obj_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bits</name></type> <name>load_addr</name></decl>, <decl><type ref="prev"/><name>exec_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fileswitch_attr</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>e</name><init>=<expr><call><name>xosfile_read_no_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>obj_type</name></expr></argument>, <argument><expr>&amp;<name>load_addr</name></expr></argument>, <argument><expr>&amp;<name>exec_addr</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr>&amp;<name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if<condition>(<expr><name>e</name></expr>)</condition><then> <return>return <expr><call><name>riscos_oserror</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>( <expr>(<name>load_addr</name> &amp; 0xFFF00000U) != 0xFFF00000U</expr>)</condition><then>
<return>return <expr><call><name>riscos_error</name><argument_list>(<argument><expr>"can't set date for object with load and exec addresses"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if<condition>(<expr><call><name>acorntime</name><argument_list>(<argument><expr>&amp;<name>exec_addr</name></expr></argument>, <argument><expr>&amp;<name>load_addr</name></expr></argument>, <argument><expr>(<name>time_t</name>) <name>mtime</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>riscos_oserror</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>e</name> <init>= <expr><call><name>xosfile_write</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>load_addr</name></expr></argument>, <argument><expr><name>exec_addr</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if<condition>(<expr><name>e</name></expr>)</condition><then> <return>return <expr><call><name>riscos_oserror</name><argument_list>()</argument_list></call></expr>;</return></then></if>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>riscos_settype</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>,*<decl><type ref="prev"/><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"si:settype"</expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>,<argument><expr>&amp;<name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"ss:settype"</expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>,<argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>e</name>=<call><name>xosfscontrol_file_type_from_string</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr>(<name>bits</name>*)&amp;<name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><name>e</name></expr>)</condition><then> <return>return <expr><call><name>riscos_oserror</name><argument_list>()</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>e</name>=<call><name>xosfile_set_type</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><name>e</name></expr>)</condition><then> <return>return <expr><call><name>riscos_oserror</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>riscos_getenv</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>,*<decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"s:getenv"</expr></argument>,<argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>value</name>=<call><name>getenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><name>value</name></expr>)</condition><then> <return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>riscos_putenv</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>,*<decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>os_var_type</name></type> <name>type</name><init>=<expr><name>os_VARTYPE_LITERAL_STRING</name></expr></init></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ss|i:putenv"</expr></argument>,<argument><expr>&amp;<name>name</name></expr></argument>,<argument><expr>&amp;<name>value</name></expr></argument>,<argument><expr>&amp;<name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if<condition>(<expr><name>type</name>!=<name>os_VARTYPE_STRING</name>&amp;&amp;<name>type</name>!=<name>os_VARTYPE_MACRO</name>&amp;&amp;<name>type</name>!=<name>os_VARTYPE_EXPANDED</name>
&amp;&amp;<name>type</name>!=<name>os_VARTYPE_LITERAL_STRING</name></expr>)</condition><then>
<return>return <expr><call><name>riscos_error</name><argument_list>(<argument><expr>"Bad putenv type"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>len</name>=<call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><name>type</name>!=<name>os_VARTYPE_LITERAL_STRING</name></expr>)</condition><then> <expr_stmt><expr><name>len</name>++</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>e</name>=<call><name>xos_set_var_val</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr>(<name>byte</name>*)<name>value</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr>0</expr></argument>,<argument><expr><name>type</name></expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><name>e</name></expr>)</condition><then> <return>return <expr><call><name>riscos_oserror</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>riscos_delenv</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"s:delenv"</expr></argument>,<argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>e</name>=<call><name>xos_set_var_val</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr>-1</expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><name>e</name></expr>)</condition><then> <return>return <expr><call><name>riscos_oserror</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>riscos_getenvdict</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>value</name><index>[<expr>257</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>which</name><init>=<expr>"*"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>context</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"|s:getenvdict"</expr></argument>,<argument><expr>&amp;<name>which</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>dict</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>dict</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<while>while<condition>(<expr>!<call><name>xos_read_var_val</name><argument_list>(<argument><expr><name>which</name></expr></argument>,<argument><expr><name>value</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof>-1</expr></argument>,<argument><expr>(<name>int</name>)<name>context</name></expr></argument>,
<argument><expr><name>os_VARTYPE_EXPANDED</name></expr></argument>,<argument><expr>&amp;<name>size</name></expr></argument>,<argument><expr>(<name>int</name> *)&amp;<name>context</name></expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>value</name><index>[<expr><name>size</name></expr>]</index></name>='\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <continue>continue;</continue></then></if>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>dict</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>riscos_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"unlink"</expr>, <expr><name>riscos_remove</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"remove"</expr>, <expr><name>riscos_remove</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rename"</expr>, <expr><name>riscos_rename</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"system"</expr>, <expr><name>riscos_system</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rmdir"</expr>, <expr><name>riscos_remove</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"chdir"</expr>, <expr><name>riscos_chdir</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getcwd"</expr>, <expr><name>riscos_getcwd</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"expand"</expr>, <expr><name>riscos_expand</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"mkdir"</expr>, <expr><name>riscos_mkdir</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"listdir"</expr>, <expr><name>riscos_listdir</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"stat"</expr>, <expr><name>riscos_stat</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"lstat"</expr>, <expr><name>riscos_stat</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"chmod"</expr>, <expr><name>riscos_chmod</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"utime"</expr>, <expr><name>riscos_utime</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"settype"</expr>, <expr><name>riscos_settype</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getenv"</expr>, <expr><name>riscos_getenv</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"putenv"</expr>, <expr><name>riscos_putenv</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"delenv"</expr>, <expr><name>riscos_delenv</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getenvdict"</expr>, <expr><name>riscos_getenvdict</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>ins</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>module</name></decl></param>, <param><decl><type><name>char</name> *</type><name>symbol</name></decl></param>, <param><decl><type><name>long</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>all_ins</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>d</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>F_OK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"F_OK"</expr></argument>, <argument><expr>(<name>long</name>)<name>F_OK</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_OK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"R_OK"</expr></argument>, <argument><expr>(<name>long</name>)<name>R_OK</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>W_OK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"W_OK"</expr></argument>, <argument><expr>(<name>long</name>)<name>W_OK</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X_OK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"X_OK"</expr></argument>, <argument><expr>(<name>long</name>)<name>X_OK</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NGROUPS_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"NGROUPS_MAX"</expr></argument>, <argument><expr>(<name>long</name>)<name>NGROUPS_MAX</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TMP_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"TMP_MAX"</expr></argument>, <argument><expr>(<name>long</name>)<name>TMP_MAX</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WCONTINUED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"WCONTINUED"</expr></argument>, <argument><expr>(<name>long</name>)<name>WCONTINUED</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WNOHANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"WNOHANG"</expr></argument>, <argument><expr>(<name>long</name>)<name>WNOHANG</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WUNTRACED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"WUNTRACED"</expr></argument>, <argument><expr>(<name>long</name>)<name>WUNTRACED</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_RDONLY"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_WRONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_WRONLY"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_WRONLY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_RDWR"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_RDWR</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_NDELAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_NDELAY"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_NDELAY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_NONBLOCK"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_APPEND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_APPEND"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_APPEND</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_DSYNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_DSYNC"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_DSYNC</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_RSYNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_RSYNC"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_RSYNC</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_SYNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_SYNC"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_SYNC</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_NOCTTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_NOCTTY"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_NOCTTY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_CREAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_CREAT"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_CREAT</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_EXCL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_EXCL"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_EXCL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_TRUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_TRUNC"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_TRUNC</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_BINARY"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_BINARY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_TEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_TEXT"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_TEXT</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_LARGEFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_LARGEFILE"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_LARGEFILE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_NOINHERIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_NOINHERIT"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_NOINHERIT</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_O_SHORT_LIVED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_SHORT_LIVED"</expr></argument>, <argument><expr>(<name>long</name>)<name>_O_SHORT_LIVED</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_TEMPORARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_TEMPORARY"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_TEMPORARY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_RANDOM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_RANDOM"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_RANDOM</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_SEQUENTIAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_SEQUENTIAL"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_SEQUENTIAL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_DIRECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_DIRECT"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_DIRECT</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_DIRECTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_DIRECTORY"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_DIRECTORY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_NOFOLLOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"O_NOFOLLOW"</expr></argument>, <argument><expr>(<name>long</name>)<name>O_NOFOLLOW</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EX_OK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"EX_OK"</expr></argument>, <argument><expr>(<name>long</name>)<name>EX_OK</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EX_USAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"EX_USAGE"</expr></argument>, <argument><expr>(<name>long</name>)<name>EX_USAGE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EX_DATAERR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"EX_DATAERR"</expr></argument>, <argument><expr>(<name>long</name>)<name>EX_DATAERR</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EX_NOINPUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"EX_NOINPUT"</expr></argument>, <argument><expr>(<name>long</name>)<name>EX_NOINPUT</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EX_NOUSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"EX_NOUSER"</expr></argument>, <argument><expr>(<name>long</name>)<name>EX_NOUSER</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EX_NOHOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"EX_NOHOST"</expr></argument>, <argument><expr>(<name>long</name>)<name>EX_NOHOST</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EX_UNAVAILABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"EX_UNAVAILABLE"</expr></argument>, <argument><expr>(<name>long</name>)<name>EX_UNAVAILABLE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EX_SOFTWARE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"EX_SOFTWARE"</expr></argument>, <argument><expr>(<name>long</name>)<name>EX_SOFTWARE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EX_OSERR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"EX_OSERR"</expr></argument>, <argument><expr>(<name>long</name>)<name>EX_OSERR</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EX_OSFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"EX_OSFILE"</expr></argument>, <argument><expr>(<name>long</name>)<name>EX_OSFILE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EX_CANTCREAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"EX_CANTCREAT"</expr></argument>, <argument><expr>(<name>long</name>)<name>EX_CANTCREAT</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EX_IOERR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"EX_IOERR"</expr></argument>, <argument><expr>(<name>long</name>)<name>EX_IOERR</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EX_TEMPFAIL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"EX_TEMPFAIL"</expr></argument>, <argument><expr>(<name>long</name>)<name>EX_TEMPFAIL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EX_PROTOCOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"EX_PROTOCOL"</expr></argument>, <argument><expr>(<name>long</name>)<name>EX_PROTOCOL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EX_NOPERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"EX_NOPERM"</expr></argument>, <argument><expr>(<name>long</name>)<name>EX_NOPERM</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EX_CONFIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"EX_CONFIG"</expr></argument>, <argument><expr>(<name>long</name>)<name>EX_CONFIG</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EX_NOTFOUND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"EX_NOTFOUND"</expr></argument>, <argument><expr>(<name>long</name>)<name>EX_NOTFOUND</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>initriscos</name><parameter_list>()</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>, *<decl><type ref="prev"/><name>stat_m</name></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"riscos"</expr></argument>, <argument><expr><name>riscos_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>all_ins</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>PyExc_OSError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"error"</expr></argument>, <argument><expr><name>PyExc_OSError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyStructSequence_InitType</name><argument_list>(<argument><expr>&amp;<name>StatResultType</name></expr></argument>, <argument><expr>&amp;<name>stat_result_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"stat_result"</expr></argument>, <argument><expr>(<name>PyObject</name>*) &amp;<name>StatResultType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
