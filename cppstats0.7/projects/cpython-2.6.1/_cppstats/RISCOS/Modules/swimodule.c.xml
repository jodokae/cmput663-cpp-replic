<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/RISCOS/Modules/swimodule.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oslib/os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;kernel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBlock_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((op)-&gt;ob_type == &amp;PyBlockType)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>SwiError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ArgError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>os_error</name> *</type><name>e</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>swi_oserror</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>SwiError</name></expr></argument>,<argument><expr><name><name>e</name>-&gt;<name>errmess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"errnum"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>e</name>-&gt;<name>errnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>swi_error</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ArgError</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>void</name> *</type><name>block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>heap</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyBlockObject</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>PyBlockType</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>PyBlock_New</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>,<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyBlockObject</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>init</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i|O"</expr></argument>,<argument><expr>&amp;<name>size</name></expr></argument>,<argument><expr>&amp;<name>init</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if<condition>(<expr><name>size</name>&lt;1</expr>)</condition><then> <expr_stmt><expr><name>size</name>=1</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>b</name>=<call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>PyBlockObject</name></expr></argument>,<argument><expr>&amp;<name>PyBlockType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr>!<name>b</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>b</name>-&gt;<name>block</name></name>=<call><name>malloc</name><argument_list>(<argument><expr>4*<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr>!<name><name>b</name>-&gt;<name>block</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>b</name>-&gt;<name>length</name></name>=4*<name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>heap</name></name>=1</expr>;</expr_stmt>
<if>if<condition>(<expr><name>init</name></expr>)</condition><then> <block>{
<if>if<condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>init</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><call><name>PyString_Size</name><argument_list>(<argument><expr><name>init</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>n</name>&gt;4*<name>size</name></expr>)</condition><then> <expr_stmt><expr><name>n</name>=4*<name>size</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>block</name></name></expr></argument>,<argument><expr><call><name>PyString_AsString</name><argument_list>(<argument><expr><name>init</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>(<name>char</name>*)<name><name>b</name>-&gt;<name>block</name></name>+<name>n</name></expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>4*<name>size</name>-<name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> *</type><name>p</name><init>=<expr>(<name>long</name>*)<name><name>b</name>-&gt;<name>block</name></name></expr></init></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>init</name></expr></argument>)</argument_list></call></expr>)</condition><then> <goto>goto <name>fail</name>;</goto></then></if>
<expr_stmt><expr><name>n</name>=<call><name>PyList_Size</name><argument_list>(<argument><expr><name>init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name>&gt;<name>size</name></expr>)</condition><then> <expr_stmt><expr><name>n</name>=<name>size</name></expr>;</expr_stmt></then></if>
<for>for(<init><expr><name>k</name>=0</expr>;</init> <condition><expr><name>k</name>&lt;<name>n</name></expr>;</condition> <incr><expr><name>k</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>q</name><init>=<expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>init</name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyInt_Check</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>)</condition><then> <goto>goto <name>fail</name>;</goto></then></if>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>k</name></expr>]</index></name>=<call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<for>for(<init>;</init> <condition><expr><name>k</name>&lt;<name>size</name></expr>;</condition> <incr><expr><name>k</name>++</expr></incr>) <expr_stmt><expr><name><name>p</name><index>[<expr><name>k</name></expr>]</index></name>=0</expr>;</expr_stmt></for>
}</block></else></if>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<name>b</name></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"block initialiser must be string or list of integers"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>PyRegister</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>,<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>,<decl><type ref="prev"/><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyBlockObject</name> *</type><name>b</name></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ii"</expr></argument>,<argument><expr>&amp;<name>size</name></expr></argument>,<argument><expr>&amp;<name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if<condition>(<expr><name>size</name>&lt;1</expr>)</condition><then> <expr_stmt><expr><name>size</name>=1</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>b</name>=<call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>PyBlockObject</name></expr></argument>,<argument><expr>&amp;<name>PyBlockType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr>!<name>b</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>b</name>-&gt;<name>block</name></name>=(<name>void</name>*)<name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>length</name></name>=4*<name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>heap</name></name>=0</expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>b</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>PyBlock_ToString</name><parameter_list>(<param><decl><type><name>PyBlockObject</name> *</type><name>self</name></decl></param>,<param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>s</name><init>=<expr>0</expr></init>,<name>e</name><init>=<expr><name><name>self</name>-&gt;<name>length</name></name></expr></init></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>arg</name></expr></argument>,<argument><expr>"|ii"</expr></argument>,<argument><expr>&amp;<name>s</name></expr></argument>,<argument><expr>&amp;<name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if<condition>(<expr><name>s</name>&lt;0||<name>e</name>&gt;<name><name>self</name>-&gt;<name>length</name></name>||<name>s</name>&gt;<name>e</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>,<argument><expr>"block index out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name>*)<name><name>self</name>-&gt;<name>block</name></name>+<name>s</name></expr></argument>,<argument><expr><name>e</name>-<name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>PyBlock_NullString</name><parameter_list>(<param><decl><type><name>PyBlockObject</name> *</type><name>self</name></decl></param>,<param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>s</name><init>=<expr>0</expr></init>,<name>e</name><init>=<expr><name><name>self</name>-&gt;<name>length</name></name></expr></init>,<name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>p</name><init>=<expr>(<name>char</name>*)<name><name>self</name>-&gt;<name>block</name></name></expr></init></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>arg</name></expr></argument>,<argument><expr>"|ii"</expr></argument>,<argument><expr>&amp;<name>s</name></expr></argument>,<argument><expr>&amp;<name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if<condition>(<expr><name>s</name>&lt;0||<name>e</name>&gt;<name><name>self</name>-&gt;<name>length</name></name>||<name>s</name>&gt;<name>e</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>,<argument><expr>"block index out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<for>for(<init><expr><name>i</name>=<name>s</name></expr>;</init> <condition><expr><name>i</name>&lt;<name>e</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <if>if<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name>==0</expr>)</condition><then> <break>break;</break></then></if></for>
<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name>*)<name><name>self</name>-&gt;<name>block</name></name>+<name>s</name></expr></argument>,<argument><expr><name>i</name>-<name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>PyBlock_CtrlString</name><parameter_list>(<param><decl><type><name>PyBlockObject</name> *</type><name>self</name></decl></param>,<param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>s</name><init>=<expr>0</expr></init>,<name>e</name><init>=<expr><name><name>self</name>-&gt;<name>length</name></name></expr></init>,<name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>p</name><init>=<expr>(<name>char</name>*)<name><name>self</name>-&gt;<name>block</name></name></expr></init></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>arg</name></expr></argument>,<argument><expr>"|ii"</expr></argument>,<argument><expr>&amp;<name>s</name></expr></argument>,<argument><expr>&amp;<name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if<condition>(<expr><name>s</name>&lt;0||<name>e</name>&gt;<name><name>self</name>-&gt;<name>length</name></name>||<name>s</name>&gt;<name>e</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>,<argument><expr>"block index out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<for>for(<init><expr><name>i</name>=<name>s</name></expr>;</init> <condition><expr><name>i</name>&lt;<name>e</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <if>if<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name>&lt;32</expr>)</condition><then> <break>break;</break></then></if></for>
<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name>*)<name><name>self</name>-&gt;<name>block</name></name>+<name>s</name></expr></argument>,<argument><expr><name>i</name>-<name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>PyBlock_PadString</name><parameter_list>(<param><decl><type><name>PyBlockObject</name> *</type><name>self</name></decl></param>,<param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>s</name><init>=<expr>0</expr></init>,<name>e</name><init>=<expr><name><name>self</name>-&gt;<name>length</name></name></expr></init>,<name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>p</name><init>=<expr>(<name>char</name>*)<name><name>self</name>-&gt;<name>block</name></name></expr></init></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>arg</name></expr></argument>,<argument><expr>"s#c|ii"</expr></argument>,<argument><expr>&amp;<name>str</name></expr></argument>,<argument><expr>&amp;<name>n</name></expr></argument>,<argument><expr>&amp;<name>c</name></expr></argument>,<argument><expr>&amp;<name>s</name></expr></argument>,<argument><expr>&amp;<name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if<condition>(<expr><name>s</name>&lt;0||<name>e</name>&gt;<name><name>self</name>-&gt;<name>length</name></name>||<name>s</name>&gt;<name>e</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>,<argument><expr>"block index out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>m</name>=<name>e</name>-<name>s</name></expr>;</expr_stmt>
<if>if<condition>(<expr><name>n</name>&gt;<name>m</name></expr>)</condition><then> <expr_stmt><expr><name>n</name>=<name>m</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name>+<name>s</name></expr></argument>,<argument><expr><name>str</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name>+<name>s</name>+<name>n</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>m</name>-<name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>PyBlock_BitSet</name><parameter_list>(<param><decl><type><name>PyBlockObject</name> *</type><name>self</name></decl></param>,<param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> *</type><name>p</name><init>=<expr>(<name>int</name>*)<name><name>self</name>-&gt;<name>block</name></name></expr></init></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>arg</name></expr></argument>,<argument><expr>"iii"</expr></argument>,<argument><expr>&amp;<name>i</name></expr></argument>,<argument><expr>&amp;<name>x</name></expr></argument>,<argument><expr>&amp;<name>y</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if<condition>(<expr><name>i</name>&lt;0||<name>i</name>&gt;=<name><name>self</name>-&gt;<name>length</name></name>/4</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>,<argument><expr>"block index out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name>=(<name><name>p</name><index>[<expr><name>i</name></expr>]</index></name>&amp;<name>y</name>)^<name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>PyBlock_Resize</name><parameter_list>(<param><decl><type><name>PyBlockObject</name> *</type><name>self</name></decl></param>,<param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>arg</name></expr></argument>,<argument><expr>"i"</expr></argument>,<argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if<condition>(<expr><name>n</name>&lt;1</expr>)</condition><then> <expr_stmt><expr><name>n</name>=1</expr>;</expr_stmt></then></if>
<if>if<condition>(<expr><name><name>self</name>-&gt;<name>heap</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>v</name><init>=<expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>block</name></name></expr></argument>,<argument><expr>4*<name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>v</name></expr>)</condition><then> <return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>block</name></name>=<name>v</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>length</name></name>=4*<name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>PyBlock_ToFile</name><parameter_list>(<param><decl><type><name>PyBlockObject</name> *</type><name>self</name></decl></param>,<param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>s</name><init>=<expr>0</expr></init>,<name>e</name><init>=<expr><name><name>self</name>-&gt;<name>length</name></name>/4</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> *</type><name>fp</name></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>arg</name></expr></argument>,<argument><expr>"O|ii"</expr></argument>,<argument><expr>&amp;<name>f</name></expr></argument>,<argument><expr>&amp;<name>s</name></expr></argument>,<argument><expr>&amp;<name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>fp</name>=<call><name>PyFile_AsFile</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>fp</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"arg must be open file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><call>(<name>int</name>*)<argument_list>(<argument><expr><name><name>self</name>-&gt;<name>block</name></name></expr></argument>)</argument_list></call>+<name>s</name></expr></argument>,<argument><expr>4</expr></argument>,<argument><expr><name>e</name>-<name>s</name></expr></argument>,<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>PyBlock_Methods</name><index>[]</index></name><init>= <expr><block>{
<expr><block>{ <expr>"tostring"</expr>,<expr>(<name>PyCFunction</name>)<name>PyBlock_ToString</name></expr>,<expr>1</expr>}</block></expr>,
<expr><block>{ <expr>"padstring"</expr>,<expr>(<name>PyCFunction</name>)<name>PyBlock_PadString</name></expr>,<expr>1</expr>}</block></expr>,
<expr><block>{ <expr>"nullstring"</expr>,<expr>(<name>PyCFunction</name>)<name>PyBlock_NullString</name></expr>,<expr>1</expr>}</block></expr>,
<expr><block>{ <expr>"ctrlstring"</expr>,<expr>(<name>PyCFunction</name>)<name>PyBlock_CtrlString</name></expr>,<expr>1</expr>}</block></expr>,
<expr><block>{ <expr>"bitset"</expr>,<expr>(<name>PyCFunction</name>)<name>PyBlock_BitSet</name></expr>,<expr>1</expr>}</block></expr>,
<expr><block>{ <expr>"resize"</expr>,<expr>(<name>PyCFunction</name>)<name>PyBlock_Resize</name></expr>,<expr>1</expr>}</block></expr>,
<expr><block>{ <expr>"tofile"</expr>,<expr>(<name>PyCFunction</name>)<name>PyBlock_ToFile</name></expr>,<expr>1</expr>}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>,<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>block_len</name><parameter_list>(<param><decl><type><name>PyBlockObject</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>b</name>-&gt;<name>length</name></name>/4</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>block_concat</name><parameter_list>(<param><decl><type><name>PyBlockObject</name> *</type><name>b</name></decl></param>,<param><decl><type><name>PyBlockObject</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>,<argument><expr>"block concatenation not implemented"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>block_repeat</name><parameter_list>(<param><decl><type><name>PyBlockObject</name> *</type><name>b</name></decl></param>,<param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>,<argument><expr>"block repetition not implemented"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>block_item</name><parameter_list>(<param><decl><type><name>PyBlockObject</name> *</type><name>b</name></decl></param>,<param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
<if>if<condition>(<expr><name>i</name>&lt;0||4*<name>i</name>&gt;=<name><name>b</name>-&gt;<name>length</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>,<argument><expr>"block index out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<call>(<name>long</name>*)<argument_list>(<argument><expr><name><name>b</name>-&gt;<name>block</name></name></expr></argument>)</argument_list></call>)<index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>block_slice</name><parameter_list>(<param><decl><type><name>PyBlockObject</name> *</type><name>b</name></decl></param>,<param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>,<param><decl><type><name>Py_ssize_t</name></type> <name>j</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> *</type><name>p</name><init>=<expr><name><name>b</name>-&gt;<name>block</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<if>if<condition>(<expr><name>j</name>&gt;<name><name>b</name>-&gt;<name>length</name></name>/4</expr>)</condition><then> <expr_stmt><expr><name>j</name>=<name><name>b</name>-&gt;<name>length</name></name>/4</expr>;</expr_stmt></then></if>
<if>if<condition>(<expr><name>i</name>&lt;0||<name>i</name>&gt;<name>j</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>,<argument><expr>"block index out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>n</name>=<name>j</name>-<name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name>=<call><name>PyList_New</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for(<init><expr><name>k</name>=0</expr>;</init> <condition><expr><name>k</name>&lt;<name>n</name></expr>;</condition> <incr><expr><name>k</name>++</expr></incr>) <expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>result</name></expr></argument>,<argument><expr><name>k</name></expr></argument>,<argument><expr><call><name>PyInt_FromSsize_t</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name>+<name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>block_ass_item</name><parameter_list>(<param><decl><type><name>PyBlockObject</name> *</type><name>b</name></decl></param>,<param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>,<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<if>if<condition>(<expr><name>i</name>&lt;0||<name>i</name>&gt;=<name><name>b</name>-&gt;<name>length</name></name>/4</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>,<argument><expr>"block index out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if<condition>(<expr>!<call><name>PyInt_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,<argument><expr>"block item must be integer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr>(<call>(<name>long</name>*)<argument_list>(<argument><expr><name><name>b</name>-&gt;<name>block</name></name></expr></argument>)</argument_list></call>)<index>[<expr><name>i</name></expr>]</index>=<call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>block_ass_slice</name><parameter_list>(<param><decl><type><name>PyBlockObject</name> *</type><name>b</name></decl></param>,<param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>,<param><decl><type><name>Py_ssize_t</name></type> <name>j</name></decl></param>,<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> *</type><name>p</name><init>=<expr><name><name>b</name>-&gt;<name>block</name></name></expr></init></decl>;</decl_stmt>
<if>if<condition>(<expr><name>j</name>&gt;<name><name>b</name>-&gt;<name>length</name></name>/4</expr>)</condition><then> <expr_stmt><expr><name>j</name>=<name><name>b</name>-&gt;<name>length</name></name>/4</expr>;</expr_stmt></then></if>
<if>if<condition>(<expr><name>i</name>&lt;0||<name>i</name>&gt;<name>j</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>,<argument><expr>"block index out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if<condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <goto>goto <name>fail</name>;</goto></then></if>
<expr_stmt><expr><name>n</name>=<call><name>PyList_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><name>n</name>&gt;<name>j</name>-<name>i</name></expr>)</condition><then> <expr_stmt><expr><name>n</name>=<name>j</name>-<name>i</name></expr>;</expr_stmt></then></if>
<for>for(<init><expr><name>k</name>=0</expr>;</init> <condition><expr><name>k</name>&lt;<name>n</name></expr>;</condition> <incr><expr><name>k</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>q</name><init>=<expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyInt_Check</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>)</condition><then> <goto>goto <name>fail</name>;</goto></then></if>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name>+<name>k</name></expr>]</index></name>=<call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<for>for(<init>;</init> <condition><expr><name>k</name>&lt;<name>j</name>-<name>i</name></expr>;</condition> <incr><expr><name>k</name>++</expr></incr>) <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name>+<name>k</name></expr>]</index></name>=0</expr>;</expr_stmt></for>
<return>return <expr>0</expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,<argument><expr>"block slice must be integer list"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>block_as_sequence</name><init>= <expr><block>{
<expr>(<name>inquiry</name>)<name>block_len</name></expr>,
<expr>(<name>binaryfunc</name>)<name>block_concat</name></expr>,
<expr>(<name>ssizeargfunc</name>)<name>block_repeat</name></expr>,
<expr>(<name>ssizeargfunc</name>)<name>block_item</name></expr>,
<expr>(<name>ssizessizeargfunc</name>)<name>block_slice</name></expr>,
<expr>(<name>ssizeobjargproc</name>)<name>block_ass_item</name></expr>,
<expr>(<name>ssizessizeobjargproc</name>)<name>block_ass_slice</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>PyBlock_GetAttr</name><parameter_list>(<param><decl><type><name>PyBlockObject</name> *</type><name>s</name></decl></param>,<param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"length"</expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name><name>s</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"start"</expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name><name>s</name>-&gt;<name>block</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr>"end"</expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<call>(<name>long</name>)<argument_list>(<argument><expr><name><name>s</name>-&gt;<name>block</name></name></expr></argument>)</argument_list></call>+<name><name>s</name>-&gt;<name>length</name></name>)</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"__members__"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>list</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>list</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>PyString_FromString</name><argument_list>(<argument><expr>"length"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>PyString_FromString</name><argument_list>(<argument><expr>"start"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><call><name>PyString_FromString</name><argument_list>(<argument><expr>"end"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>list</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>list</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>PyBlock_Methods</name></expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>s</name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>PyBlock_Dealloc</name><parameter_list>(<param><decl><type><name>PyBlockObject</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<if>if<condition>(<expr><name><name>b</name>-&gt;<name>heap</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>heap</name></name></expr>)</condition><then>
<empty_stmt>;</empty_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>PyBlockType</name><init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>)</argument_list></call>
0</expr>,
<expr>"block"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyBlockObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>PyBlock_Dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)<name>PyBlock_GetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>&amp;<name>block_as_sequence</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>swi_swi</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>,<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>name</name></decl>,*<decl><type ref="prev"/><name>format</name></decl>,*<decl><type ref="prev"/><name>result</name></decl>,*<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>swino</name></decl>,<decl><type ref="prev"/><name>carry</name></decl>,<decl><type ref="prev"/><name>rno</name><init>=<expr>0</expr></init>,<name>j</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>swiname</name></decl>,*<decl><type ref="prev"/><name>fmt</name></decl>,*<decl><type ref="prev"/><name>outfmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_kernel_swi_regs</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyBlockObject</name> *</type><name>ao</name></decl>;</decl_stmt>
<if>if<condition>(<expr><name>args</name>==<name>NULL</name>||!<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call>||(<name>n</name>=<call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call>)&lt;2</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>name</name>=<call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr>"i"</expr></argument>,<argument><expr>&amp;<name>swino</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr>"s"</expr></argument>,<argument><expr>&amp;<name>swiname</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>e</name>=<call><name>xos_swi_number_from_string</name><argument_list>(<argument><expr><name>swiname</name></expr></argument>,<argument><expr>&amp;<name>swino</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><name>e</name></expr>)</condition><then> <return>return <expr><call><name>swi_oserror</name><argument_list>()</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>format</name>=<call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>format</name></expr></argument>,<argument><expr>"s"</expr></argument>,<argument><expr>&amp;<name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>j</name>=2</expr>;</expr_stmt>
<for>for(<init>;</init><condition>;</condition> <incr><expr><name>fmt</name>++</expr></incr>) <block>{
<switch>switch<condition>(<expr>*<name>fmt</name></expr>)</condition> <block>{
<case>case <expr>'.'</expr>:
<expr_stmt><expr><name>rno</name>++</expr>;</expr_stmt>
<continue>continue;</continue>
</case><case>case <expr>';'</expr>:
</case><case>case <expr>0</expr>:
<goto>goto <name>swicall</name>;</goto>
</case><case>case <expr>'0'</expr>:
</case><case>case <expr>'1'</expr>:
</case><case>case <expr>'2'</expr>:
</case><case>case <expr>'3'</expr>:
</case><case>case <expr>'4'</expr>:
</case><case>case <expr>'5'</expr>:
</case><case>case <expr>'6'</expr>:
</case><case>case <expr>'7'</expr>:
</case><case>case <expr>'8'</expr>:
</case><case>case <expr>'9'</expr>:
<expr_stmt><expr><name><name>r</name>.<name>r</name><index>[<expr><name>rno</name>++</expr>]</index></name>=*<name>fmt</name>-'0'</expr>;</expr_stmt>
<continue>continue;</continue>
</case><case>case <expr>'-'</expr>:
<expr_stmt><expr><name><name>r</name>.<name>r</name><index>[<expr><name>rno</name>++</expr>]</index></name>=-1</expr>;</expr_stmt>
<continue>continue;</continue>
</case>}</block></switch>
<if>if<condition>(<expr><name>j</name>&gt;=<name>n</name></expr>)</condition><then> <return>return <expr><call><name>swi_error</name><argument_list>(<argument><expr>"Too few arguments"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>v</name>=<call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr><name>j</name>++</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr>*<name>fmt</name></expr>)</condition> <block>{
<case>case <expr>'i'</expr>:
<if>if<condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr>"i"</expr></argument>,<argument><expr>&amp;<name><name>r</name>.<name>r</name><index>[<expr><name>rno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>'s'</expr>:
<if>if<condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr>"s"</expr></argument>,<argument><expr><call>(<name>char</name>**)<argument_list>(<argument><expr>&amp;<name><name>r</name>.<name>r</name><index>[<expr><name>rno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>'b'</expr>:
<if>if<condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr>"O"</expr></argument>,<argument><expr>(<name>PyObject</name>**)&amp;<name>ao</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if<condition>(<expr>!<call><name>PyBlock_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><call><name>swi_error</name><argument_list>(<argument><expr>"Not a block"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>r</name>.<name>r</name><index>[<expr><name>rno</name></expr>]</index></name>=<call>(<name>int</name>)<argument_list>(<argument><expr><name><name>ao</name>-&gt;<name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'e'</expr>:
<if>if<condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr>"O"</expr></argument>,<argument><expr>(<name>PyObject</name>**)&amp;<name>ao</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if<condition>(<expr>!<call><name>PyBlock_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><call><name>swi_error</name><argument_list>(<argument><expr>"Not a block"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>r</name>.<name>r</name><index>[<expr><name>rno</name></expr>]</index></name>=<call>(<name>int</name>)<argument_list>(<argument><expr><name><name>ao</name>-&gt;<name>block</name></name></expr></argument>)</argument_list></call>+<name><name>ao</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<return>return <expr><call><name>swi_error</name><argument_list>(<argument><expr>"Odd format character"</expr></argument>)</argument_list></call></expr>;</return>
</default>}</block></switch>
<expr_stmt><expr><name>rno</name>++</expr>;</expr_stmt>
}</block></for>
<label><name>swicall</name>:</label>
<expr_stmt><expr><name>e</name>=(<name>os_error</name>*)<call><name>_kernel_swi_c</name><argument_list>(<argument><expr><name>swino</name></expr></argument>,<argument><expr>&amp;<name>r</name></expr></argument>,<argument><expr>&amp;<name>r</name></expr></argument>,<argument><expr>&amp;<name>carry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><name>e</name></expr>)</condition><then> <return>return <expr><call><name>swi_oserror</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if<condition>(<expr>*<name>fmt</name>==0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>n</name>=0</expr>;</expr_stmt>
<for>for(<init><expr><name>outfmt</name>=++<name>fmt</name></expr>;</init> <condition><expr>*<name>outfmt</name></expr>;</condition> <incr><expr><name>outfmt</name>++</expr></incr>) <switch>switch<condition>(<expr>*<name>outfmt</name></expr>)</condition> <block>{
<case>case <expr>'i'</expr>:
</case><case>case <expr>'s'</expr>:
</case><case>case <expr>'*'</expr>:
<expr_stmt><expr><name>n</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'.'</expr>:
<break>break;</break>
</case><default>default:
<return>return <expr><call><name>swi_error</name><argument_list>(<argument><expr>"Odd format character"</expr></argument>)</argument_list></call></expr>;</return>
</default>}</block></switch></for>
<if>if<condition>(<expr><name>n</name>==0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></then></if>
<if>if<condition>(<expr><name>n</name>!=1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name>=<call><name>PyTuple_New</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr>!<name>result</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>rno</name>=0</expr>;</expr_stmt>
<expr_stmt><expr><name>j</name>=0</expr>;</expr_stmt>
<for>for(<init>;</init> <condition><expr>*<name>fmt</name></expr>;</condition> <incr><expr><name>fmt</name>++</expr></incr>) <block>{
<switch>switch<condition>(<expr>*<name>fmt</name></expr>)</condition> <block>{
<case>case <expr>'i'</expr>:
<expr_stmt><expr><name>v</name>=<call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name><name>r</name>.<name>r</name><index>[<expr><name>rno</name>++</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'s'</expr>:
<expr_stmt><expr><name>v</name>=<call><name>PyString_FromString</name><argument_list>(<argument><expr><call>(<name>char</name>*)<argument_list>(<argument><expr><name><name>r</name>.<name>r</name><index>[<expr><name>rno</name>++</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'.'</expr>:
<expr_stmt><expr><name>rno</name>++</expr>;</expr_stmt>
<continue>continue;</continue>
</case><case>case <expr>'*'</expr>:
<expr_stmt><expr><name>v</name>=<call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name>carry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
<if>if<condition>(<expr>!<name>v</name></expr>)</condition><then> <goto>goto <name>fail</name>;</goto></then></if>
<if>if<condition>(<expr><name>n</name>==1</expr>)</condition><then> <return>return <expr><name>v</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>result</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name>++</expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>result</name></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>swi_string</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr>-1</expr></init></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>arg</name></expr></argument>,<argument><expr>"i|i"</expr></argument>,<argument><expr>(<name>unsigned</name> <name>int</name> *)&amp;<name>s</name></expr></argument>, <argument><expr>&amp;<name>l</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>l</name>==-1</expr>)</condition><then>
<expr_stmt><expr><name>l</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name>*)<name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>swi_string__doc__</name><index>[]</index></name> <init>=
<expr>"string(address[, length]) -&gt; string\n\
Read a null terminated string from the given address."</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>swi_integer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name> *</type><name>i</name></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>arg</name></expr></argument>,<argument><expr>"i"</expr></argument>,<argument><expr>(<name>unsigned</name> <name>int</name> *)&amp;<name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>*<name>i</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>swi_integer__doc__</name><index>[]</index></name> <init>=
<expr>"integer(address) -&gt; string\n\
Read an integer from the given address."</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>swi_integers</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name> *</type><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>, *<decl><type ref="prev"/><name>result1</name></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>arg</name></expr></argument>,<argument><expr>"i|i"</expr></argument>,<argument><expr>(<name>unsigned</name> <name>int</name> *)&amp;<name>i</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name>=<call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name></expr>)</condition><then> <block>{
<while>while <condition>( <expr><name>c</name>&gt;0 || (<name>c</name>==-1 &amp;&amp; *<name>i</name>)</expr> )</condition> <block>{
<expr_stmt><expr><name>result1</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)*<name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>result1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>result1</name></expr></argument>)</argument_list></call>!=0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name>!=-1</expr>)</condition><then>
<expr_stmt><expr><name>c</name>--</expr>;</expr_stmt></then></if>
}</block></while>
}</block></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>swi_integers__doc__</name><index>[]</index></name> <init>=
<expr>"integers(address[, count]) -&gt; string\n\
Either read a null terminated list of integers or\n\
a list of given length from the given address."</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>swi_tuples</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr>-1</expr></init>, <name>l</name><init>=<expr>4</expr></init>, <name>j</name></decl>, <decl><type ref="prev"/><name>zero</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>, *<decl><type ref="prev"/><name>result1</name></decl>, *<decl><type ref="prev"/><name>result11</name></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>arg</name></expr></argument>,<argument><expr>"i|ii"</expr></argument>,<argument><expr>(<name>unsigned</name> <name>int</name> *)&amp;<name>i</name></expr></argument>, <argument><expr>&amp;<name>l</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name>=<call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name></expr>)</condition><then> <block>{
<while>while <condition>(<expr><name>c</name></expr>)</condition> <block>{
<expr_stmt><expr><name>result1</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>result1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>zero</name> = (<name>c</name>==-1)</expr>;</expr_stmt>
<for>for(<init><expr><name>j</name>=0</expr>;</init> <condition><expr><name>j</name>&lt;<name>l</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name>zero</name> &amp;&amp; *<name>i</name></expr>)</condition><then>
<expr_stmt><expr><name>zero</name> = 0</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>result11</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call>(<name>long</name>)<argument_list>(<argument><expr>*<name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>result11</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>result1</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>result11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>c</name>==-1 &amp;&amp; <name>zero</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = 0</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>result1</name></expr></argument>)</argument_list></call>!=0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>c</name>!=-1</expr>)</condition><then>
<expr_stmt><expr><name>c</name>--</expr>;</expr_stmt></then></if>
}</block></while>
}</block></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>swi_tuples__doc__</name><index>[]</index></name> <init>=
<expr>"tuples(address[, length=4[, count]]) -&gt; string\n\
Either read a null terminated list of byte tuples or\n\
a list of given length from the given address."</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>swi_tuple</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr>1</expr></init>, <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>, *<decl><type ref="prev"/><name>result1</name></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>arg</name></expr></argument>,<argument><expr>"i|i"</expr></argument>,<argument><expr>(<name>unsigned</name> <name>int</name> *)&amp;<name>i</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>result</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<for>for(<init><expr><name>j</name>=0</expr>;</init> <condition><expr><name>j</name>&lt;<name>c</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>result1</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call>(<name>long</name>)<argument_list>(<argument><expr><name><name>i</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>result1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>result1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>swi_tuple__doc__</name><index>[]</index></name> <init>=
<expr>"tuple(address[, count=1]]) -&gt; tuple\n\
Read count bytes from given address."</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>SwiMethods</name><index>[]</index></name><init>= <expr><block>{
<expr><block>{ <expr>"swi"</expr>, <expr><name>swi_swi</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{ <expr>"block"</expr>, <expr><name>PyBlock_New</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{ <expr>"register"</expr>, <expr><name>PyRegister</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{ <expr>"string"</expr>, <expr><name>swi_string</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>swi_string__doc__</name></expr>}</block></expr>,
<expr><block>{ <expr>"integer"</expr>, <expr><name>swi_integer</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>swi_integer__doc__</name></expr>}</block></expr>,
<expr><block>{ <expr>"integers"</expr>, <expr><name>swi_integers</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>swi_integers__doc__</name></expr>}</block></expr>,
<expr><block>{ <expr>"tuples"</expr>, <expr><name>swi_tuples</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>swi_tuples__doc__</name></expr>}</block></expr>,
<expr><block>{ <expr>"tuple"</expr>, <expr><name>swi_tuple</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>swi_tuple__doc__</name></expr>}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>,<expr><name>NULL</name></expr>,<expr>0</expr>,<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>initswi</name><parameter_list>()</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"swi"</expr></argument>, <argument><expr><name>SwiMethods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SwiError</name>=<call><name>PyErr_NewException</name><argument_list>(<argument><expr>"swi.error"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr>"error"</expr></argument>,<argument><expr><name>SwiError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ArgError</name>=<call><name>PyErr_NewException</name><argument_list>(<argument><expr>"swi.ArgError"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr>"ArgError"</expr></argument>,<argument><expr><name>ArgError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
