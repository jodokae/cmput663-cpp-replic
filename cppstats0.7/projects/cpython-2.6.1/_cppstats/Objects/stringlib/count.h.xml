<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Objects/stringlib/count.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STRINGLIB_COUNT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGLIB_COUNT_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STRINGLIB_FASTSEARCH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> must include "stringlib/fastsearch.h" before including this module</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>Py_LOCAL_INLINE</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro>
<macro><name>stringlib_count</name><argument_list>(<argument>const STRINGLIB_CHAR* str</argument>, <argument>Py_ssize_t str_len</argument>,
<argument>const STRINGLIB_CHAR* sub</argument>, <argument>Py_ssize_t sub_len</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>count</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>str_len</name> &lt; 0</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><name>sub_len</name> == 0</expr>)</condition><then>
<return>return <expr><name>str_len</name> + 1</expr>;</return></then></if>
<expr_stmt><expr><name>count</name> = <call><name>fastsearch</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>str_len</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>sub_len</name></expr></argument>, <argument><expr><name>FAST_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>count</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>count</name> = 0</expr>;</expr_stmt></then></if>
<return>return <expr><name>count</name></expr>;</return>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
