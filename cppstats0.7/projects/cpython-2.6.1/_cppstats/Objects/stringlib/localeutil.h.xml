<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Objects/stringlib/localeutil.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STRINGLIB_LOCALEUTIL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGLIB_LOCALEUTIL_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<function><type><name>int</name></type>
<name>_Py_InsertThousandsGrouping</name><parameter_list>(<param><decl><type><name>STRINGLIB_CHAR</name> *</type><name>buffer</name></decl></param>,
<param><decl><type><name>Py_ssize_t</name></type> <name>n_buffer</name></decl></param>,
<param><decl><type><name>Py_ssize_t</name></type> <name>n_digits</name></decl></param>,
<param><decl><type><name>Py_ssize_t</name></type> <name>buf_size</name></decl></param>,
<param><decl><type><name>Py_ssize_t</name> *</type><name>count</name></decl></param>,
<param><decl><type><name>int</name></type> <name>append_zero_char</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>lconv</name> *</type><name>locale_data</name> <init>= <expr><call><name>localeconv</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>grouping</name> <init>= <expr><name><name>locale_data</name>-&gt;<name>grouping</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>thousands_sep</name> <init>= <expr><name><name>locale_data</name>-&gt;<name>thousands_sep</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>thousands_sep_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>thousands_sep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>STRINGLIB_CHAR</name> *</type><name>pend</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>STRINGLIB_CHAR</name> *</type><name>pmax</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>current_grouping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>remaining</name> <init>= <expr><name>n_digits</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>count</name></expr>)</condition><then>
<expr_stmt><expr>*<name>count</name> = 0</expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>pend</name> = <name>buffer</name> + <name>n_buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pmax</name> = <name>buffer</name> + <name>buf_size</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>current_grouping</name> = *<name>grouping</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>current_grouping</name> == 0</expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<while>while <condition>(<expr><name>remaining</name> &gt; <name>current_grouping</name></expr>)</condition> <block>{
<expr_stmt><expr><name>remaining</name> -= <name>current_grouping</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>count</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>count</name> += <name>thousands_sep_len</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>STRINGLIB_CHAR</name> *</type><name>plast</name> <init>= <expr><name>buffer</name> + <name>remaining</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>pmax</name> - <name>pend</name> &lt; <name>thousands_sep_len</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>plast</name> + <name>thousands_sep_len</name></expr></argument>,
<argument><expr><name>plast</name></expr></argument>,
<argument><expr>(<name>pend</name> - <name>plast</name>) * <sizeof>sizeof<argument_list>(<argument><expr><name>STRINGLIB_CHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STRINGLIB_IS_UNICODE</name></expr></cpp:if>
<block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>thousands_sep_len</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
<expr_stmt><expr><name><name>plast</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>thousands_sep</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></for>
}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>plast</name></expr></argument>, <argument><expr><name>thousands_sep</name></expr></argument>, <argument><expr><name>thousands_sep_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></else></if>
<expr_stmt><expr><name>pend</name> += <name>thousands_sep_len</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>grouping</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>current_grouping</name> = *<name>grouping</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>current_grouping</name> == <name>CHAR_MAX</name></expr>)</condition><then>
<break>break;</break></then></if>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr><name>append_zero_char</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>pend</name> - (<name>buffer</name> + <name>remaining</name>) &lt; 1</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr>*<name>pend</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
