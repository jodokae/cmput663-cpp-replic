<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Objects/intobject.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>int_int</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>)</parameter_list>;</function_decl>
<function><type><name>long</name></type>
<name>PyInt_GetMax</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<return>return <expr><name>LONG_MAX</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_SIZE</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BHEAD_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_INTOBJECTS</name></cpp:macro> <cpp:value>((BLOCK_SIZE - BHEAD_SIZE) / sizeof(PyIntObject))</cpp:value></cpp:define>
<struct>struct <name>_intblock</name> <block>{
<decl_stmt><decl><type>struct <name>_intblock</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyIntObject</name></type> <name><name>objects</name><index>[<expr><name>N_INTOBJECTS</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type>struct <name>_intblock</name></type> <name>PyIntBlock</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyIntBlock</name> *</type><name>block_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyIntObject</name> *</type><name>free_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyIntObject</name> *</type>
<name>fill_free_list</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyIntObject</name> *</type><name>p</name></decl>, *<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> = (<name>PyIntObject</name> *) <call><name>PyMem_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyIntBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>(<name>PyIntObject</name> *) <call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr>((<name>PyIntBlock</name> *)<name>p</name>)-&gt;<name>next</name> = <name>block_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>block_list</name> = (<name>PyIntBlock</name> *)<name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = &amp;((<name>PyIntBlock</name> *)<name>p</name>)-&gt;<name><name>objects</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> = <name>p</name> + <name>N_INTOBJECTS</name></expr>;</expr_stmt>
<while>while <condition>(<expr>--<name>q</name> &gt; <name>p</name></expr>)</condition>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call> = (struct <name>_typeobject</name> *)(<name>q</name>-1)</expr>;</expr_stmt></while>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>p</name> + <name>N_INTOBJECTS</name> - 1</expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NSMALLPOSINTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSMALLPOSINTS</name></cpp:macro> <cpp:value>257</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NSMALLNEGINTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSMALLNEGINTS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NSMALLNEGINTS</name> + <name>NSMALLPOSINTS</name> &gt; 0</expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyIntObject</name> *</type><name><name>small_ints</name><index>[<expr><name>NSMALLNEGINTS</name> + <name>NSMALLPOSINTS</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COUNT_ALLOCS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>quick_int_allocs</name></decl>, <decl><type ref="prev"/><name>quick_neg_int_allocs</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>PyObject</name> *</type>
<name>PyInt_FromLong</name><parameter_list>(<param><decl><type><name>long</name></type> <name>ival</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>PyIntObject</name> *</type><name>v</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NSMALLNEGINTS</name> + <name>NSMALLPOSINTS</name> &gt; 0</expr></cpp:if>
<if>if <condition>(<expr>-<name>NSMALLNEGINTS</name> &lt;= <name>ival</name> &amp;&amp; <name>ival</name> &lt; <name>NSMALLPOSINTS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>v</name> = <name><name>small_ints</name><index>[<expr><name>ival</name> + <name>NSMALLNEGINTS</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COUNT_ALLOCS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>ival</name> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr><name>quick_int_allocs</name>++</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>quick_neg_int_allocs</name>++</expr>;</expr_stmt></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr>(<name>PyObject</name> *) <name>v</name></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>free_list</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>free_list</name> = <call><name>fill_free_list</name><argument_list>()</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>v</name> = <name>free_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>free_list</name> = (<name>PyIntObject</name> *)<call><name>Py_TYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_INIT</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>&amp;<name>PyInt_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name>-&gt;<name>ob_ival</name></name> = <name>ival</name></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *) <name>v</name></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyInt_FromSize_t</name><parameter_list>(<param><decl><type><name>size_t</name></type> <name>ival</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>ival</name> &lt;= <name>LONG_MAX</name></expr>)</condition><then>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name>ival</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>_PyLong_FromSize_t</name><argument_list>(<argument><expr><name>ival</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyInt_FromSsize_t</name><parameter_list>(<param><decl><type><name>Py_ssize_t</name></type> <name>ival</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>ival</name> &gt;= <name>LONG_MIN</name> &amp;&amp; <name>ival</name> &lt;= <name>LONG_MAX</name></expr>)</condition><then>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name>ival</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>_PyLong_FromSsize_t</name><argument_list>(<argument><expr><name>ival</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_dealloc</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>PyInt_CheckExact</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> = (struct <name>_typeobject</name> *)<name>free_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>free_list</name> = <name>v</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_free</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> = (struct <name>_typeobject</name> *)<name>free_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>free_list</name> = <name>v</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>long</name></type>
<name>PyInt_AsLong</name><parameter_list>(<param><decl><type><name>register</name> <name>PyObject</name> *</type><name>op</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyNumberMethods</name> *</type><name>nb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyIntObject</name> *</type><name>io</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>val</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>op</name> &amp;&amp; <call><name>PyInt_Check</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr>(<name>PyIntObject</name>*) <name>op</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>op</name> == <name>NULL</name> || (<name>nb</name> = <call><name>Py_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call>-&gt;<name>tp_as_number</name>) == <name>NULL</name> ||
<name><name>nb</name>-&gt;<name>nb_int</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"an integer is required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>io</name> = <call><call>(<name>PyIntObject</name>*) <argument_list>(<argument><expr>*<name><name>nb</name>-&gt;<name>nb_int</name></name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>io</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyInt_Check</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyLong_Check</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>val</name> = <call><name>PyLong_AsLong</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>val</name> == -1) &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><name>val</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"nb_int should return int object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>val</name> = <call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
}</block></function>
<function><type><name>Py_ssize_t</name></type>
<name>PyInt_AsSsize_t</name><parameter_list>(<param><decl><type><name>register</name> <name>PyObject</name> *</type><name>op</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> != <name>SIZEOF_LONG</name></expr></cpp:if>
<decl_stmt><decl><type><name>PyNumberMethods</name> *</type><name>nb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyIntObject</name> *</type><name>io</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>val</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>op</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"an integer is required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr>(<name>PyIntObject</name>*) <name>op</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyLong_Check</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>_PyLong_AsSsize_t</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> == <name>SIZEOF_LONG</name></expr></cpp:if>
<return>return <expr><call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr>(<name>nb</name> = <call><name>Py_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call>-&gt;<name>tp_as_number</name>) == <name>NULL</name> ||
(<name><name>nb</name>-&gt;<name>nb_int</name></name> == <name>NULL</name> &amp;&amp; <name><name>nb</name>-&gt;<name>nb_long</name></name> == 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"an integer is required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>nb</name>-&gt;<name>nb_long</name></name> != 0</expr>)</condition><then>
<expr_stmt><expr><name>io</name> = <call><call>(<name>PyIntObject</name>*) <argument_list>(<argument><expr>*<name><name>nb</name>-&gt;<name>nb_long</name></name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>io</name> = <call><call>(<name>PyIntObject</name>*) <argument_list>(<argument><expr>*<name><name>nb</name>-&gt;<name>nb_int</name></name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>io</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyInt_Check</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyLong_Check</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>val</name> = <call><name>_PyLong_AsSsize_t</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>val</name> == -1) &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><name>val</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"nb_int should return int object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>val</name> = <call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><name>unsigned</name> <name>long</name></type>
<name>PyInt_AsUnsignedLongMask</name><parameter_list>(<param><decl><type><name>register</name> <name>PyObject</name> *</type><name>op</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyNumberMethods</name> *</type><name>nb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyIntObject</name> *</type><name>io</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>op</name> &amp;&amp; <call><name>PyInt_Check</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr>(<name>PyIntObject</name>*) <name>op</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>op</name> &amp;&amp; <call><name>PyLong_Check</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>PyLong_AsUnsignedLongMask</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>op</name> == <name>NULL</name> || (<name>nb</name> = <call><name>Py_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call>-&gt;<name>tp_as_number</name>) == <name>NULL</name> ||
<name><name>nb</name>-&gt;<name>nb_int</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"an integer is required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>unsigned</name> <name>long</name>)-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>io</name> = <call><call>(<name>PyIntObject</name>*) <argument_list>(<argument><expr>*<name><name>nb</name>-&gt;<name>nb_int</name></name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>io</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>(<name>unsigned</name> <name>long</name>)-1</expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyInt_Check</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyLong_Check</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>val</name> = <call><name>PyLong_AsUnsignedLongMask</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>(<name>unsigned</name> <name>long</name>)-1</expr>;</return></then></if>
<return>return <expr><name>val</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"nb_int should return int object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>unsigned</name> <name>long</name>)-1</expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>val</name> = <call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>unsigned</name> <name>PY_LONG_LONG</name></type>
<name>PyInt_AsUnsignedLongLongMask</name><parameter_list>(<param><decl><type><name>register</name> <name>PyObject</name> *</type><name>op</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyNumberMethods</name> *</type><name>nb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyIntObject</name> *</type><name>io</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>PY_LONG_LONG</name></type> <name>val</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>op</name> &amp;&amp; <call><name>PyInt_Check</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr>(<name>PyIntObject</name>*) <name>op</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>op</name> &amp;&amp; <call><name>PyLong_Check</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>PyLong_AsUnsignedLongLongMask</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>op</name> == <name>NULL</name> || (<name>nb</name> = <call><name>Py_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call>-&gt;<name>tp_as_number</name>) == <name>NULL</name> ||
<name><name>nb</name>-&gt;<name>nb_int</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"an integer is required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>unsigned</name> <name>PY_LONG_LONG</name>)-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>io</name> = <call><call>(<name>PyIntObject</name>*) <argument_list>(<argument><expr>*<name><name>nb</name>-&gt;<name>nb_int</name></name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>io</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>(<name>unsigned</name> <name>PY_LONG_LONG</name>)-1</expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyInt_Check</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyLong_Check</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>val</name> = <call><name>PyLong_AsUnsignedLongLongMask</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>(<name>unsigned</name> <name>PY_LONG_LONG</name>)-1</expr>;</return></then></if>
<return>return <expr><name>val</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"nb_int should return int object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>unsigned</name> <name>PY_LONG_LONG</name>)-1</expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>val</name> = <call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>PyObject</name> *</type>
<name>PyInt_FromString</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>s</name></decl></param>, <param><decl><type><name>char</name> **</type><name>pend</name></decl></param>, <param><decl><type><name>int</name></type> <name>base</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>slen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>sobj</name></decl>, *<decl><type ref="prev"/><name>srepr</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>base</name> != 0 &amp;&amp; <name>base</name> &lt; 2) || <name>base</name> &gt; 36</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"int() base must be &gt;= 2 and &lt;= 36"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>*<name>s</name> &amp;&amp; <call><name>isspace</name><argument_list>(<argument><expr><call><name>Py_CHARMASK</name><argument_list>(<argument><expr>*<name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr><name>s</name>++</expr>;</expr_stmt></while>
<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>base</name> == 0 &amp;&amp; <name><name>s</name><index>[<expr>0</expr>]</index></name> == '0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>x</name> = (<name>long</name>) <call><name>PyOS_strtoul</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>&amp;<name>end</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> &lt; 0</expr>)</condition><then>
<return>return <expr><call><name>PyLong_FromString</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then> <else>else
<expr_stmt><expr><name>x</name> = <call><name>PyOS_strtol</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>&amp;<name>end</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>end</name> == <name>s</name> || !<call><name>isalnum</name><argument_list>(<argument><expr><call><name>Py_CHARMASK</name><argument_list>(<argument><expr><name><name>end</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
<goto>goto <name>bad</name>;</goto></then></if>
<while>while <condition>(<expr>*<name>end</name> &amp;&amp; <call><name>isspace</name><argument_list>(<argument><expr><call><name>Py_CHARMASK</name><argument_list>(<argument><expr>*<name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr><name>end</name>++</expr>;</expr_stmt></while>
<if>if <condition>(<expr>*<name>end</name> != '\0'</expr>)</condition><then> <block>{
<label><name>bad</name>:</label>
<expr_stmt><expr><name>slen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> &lt; 200 ? <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> : 200</expr>;</expr_stmt>
<expr_stmt><expr><name>sobj</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sobj</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>srepr</name> = <call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>sobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>sobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>srepr</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"invalid literal for int() with base %d: %s"</expr></argument>,
<argument><expr><name>base</name></expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>srepr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>srepr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>errno</name> != 0</expr>)</condition><then>
<return>return <expr><call><name>PyLong_FromString</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return></then></if></else></if>
<if>if <condition>(<expr><name>pend</name></expr>)</condition><then>
<expr_stmt><expr>*<name>pend</name> = <name>end</name></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>PyObject</name> *</type>
<name>PyInt_FromUnicode</name><parameter_list>(<param><decl><type><name>Py_UNICODE</name> *</type><name>s</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>length</name></decl></param>, <param><decl><type><name>int</name></type> <name>base</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buffer</name> <init>= <expr>(<name>char</name> *)<call><name>PyMem_MALLOC</name><argument_list>(<argument><expr><name>length</name>+1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>buffer</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyUnicode_EncodeDecimal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyMem_FREE</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyInt_FromString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_FREE</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT_TO_LONG</name><parameter_list>(<param><type><name>obj</name></type></param>, <param><type><name>lng</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if (PyInt_Check(obj)) { lng = PyInt_AS_LONG(obj); } else { Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>int_print</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>FILE</name> *</type><name>fp</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list>
<block>{
<decl_stmt><decl><type><name>long</name></type> <name>int_val</name> <init>= <expr><name><name>v</name>-&gt;<name>ob_ival</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name>int_val</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_repr</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>_PyInt_Format</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>int_compare</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>PyIntObject</name> *</type><name>w</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>long</name></type> <name>i</name> <init>= <expr><name><name>v</name>-&gt;<name>ob_ival</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>long</name></type> <name>j</name> <init>= <expr><name><name>w</name>-&gt;<name>ob_ival</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr>(<name>i</name> &lt; <name>j</name>) ? -1 : (<name>i</name> &gt; <name>j</name>) ? 1 : 0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>long</name></type>
<name>int_hash</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>x</name> <init>= <expr><name><name>v</name> -&gt; <name>ob_ival</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>x</name> == -1</expr>)</condition><then>
<expr_stmt><expr><name>x</name> = -2</expr>;</expr_stmt></then></if>
<return>return <expr><name>x</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_add</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>PyIntObject</name> *</type><name>w</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>long</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <name>a</name> + <name>b</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>x</name>^<name>a</name>) &gt;= 0 || (<name>x</name>^<name>b</name>) &gt;= 0</expr>)</condition><then>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name><name>PyLong_Type</name>.<name>tp_as_number</name>-&gt;<name>nb_add</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>v</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>w</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_sub</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>PyIntObject</name> *</type><name>w</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>long</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <name>a</name> - <name>b</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>x</name>^<name>a</name>) &gt;= 0 || (<name>x</name>^~<name>b</name>) &gt;= 0</expr>)</condition><then>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name><name>PyLong_Type</name>.<name>tp_as_number</name>-&gt;<name>nb_subtract</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>v</name></expr></argument>,
<argument><expr>(<name>PyObject</name> *)<name>w</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_mul</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>w</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>longprod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>doubled_longprod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>doubleprod</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>longprod</name> = <name>a</name> * <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>doubleprod</name> = (<name>double</name>)<macro><name>a</name></macro> * (<name>double</name>)<name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>doubled_longprod</name> = (<name>double</name>)<name>longprod</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>doubled_longprod</name> == <name>doubleprod</name></expr>)</condition><then>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>longprod</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>diff</name> <init>= <expr><name>doubled_longprod</name> - <name>doubleprod</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>absdiff</name> <init>= <expr><name>diff</name> &gt;= 0.0 ? <name>diff</name> : -<name>diff</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>absprod</name> <init>= <expr><name>doubleprod</name> &gt;= 0.0 ? <name>doubleprod</name> :
-<name>doubleprod</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>32.0 * <name>absdiff</name> &lt;= <name>absprod</name></expr>)</condition><then>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>longprod</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name><name>PyLong_Type</name>.<name>tp_as_number</name>-&gt;<name>nb_multiply</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNARY_NEG_WOULD_OVERFLOW</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x) &lt; 0 &amp;&amp; (unsigned long)(x) == 0-(unsigned long)(x))</cpp:value></cpp:define>
<enum>enum <name>divmod_result</name> <block>{
<decl><name>DIVMOD_OK</name></decl>,
<decl><name>DIVMOD_OVERFLOW</name></decl>,
<decl><name>DIVMOD_ERROR</name></decl>
}</block>;</enum>
<enum><specifier>static</specifier> enum <name>divmod_result</name>
<name>i_divmod</name><expr_stmt><expr>(<name>register</name> <name>long</name> <name>x</name>, <name>register</name> <name>long</name> <name>y</name>,
<name>long</name> *<name>p_xdivy</name>, <name>long</name> *<name>p_xmody</name>) <block>{
<expr><name>long</name> <name>xdivy</name></expr>, <expr><name>xmody</name></expr>;
<if>if <condition>(<expr><name>y</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ZeroDivisionError</name></expr></argument>,
<argument><expr>"integer division or modulo by zero"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DIVMOD_ERROR</name></expr>;</return>
<expr_stmt/></block></then></if>}</block></expr></expr_stmt></enum>
<if>if <condition>(<expr><name>y</name> == -1 &amp;&amp; <call><name>UNARY_NEG_WOULD_OVERFLOW</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>DIVMOD_OVERFLOW</name></expr>;</return></then></if>
<expr_stmt><expr><name>xdivy</name> = <name>x</name> / <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xmody</name> = <name>x</name> - <name>xdivy</name> * <name>y</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>xmody</name> &amp;&amp; ((<name>y</name> ^ <name>xmody</name>) &lt; 0)</expr> )</condition><then> <block>{
<expr_stmt><expr><name>xmody</name> += <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr>--<name>xdivy</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>xmody</name> &amp;&amp; ((<name>y</name> ^ <name>xmody</name>) &gt;= 0)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>p_xdivy</name> = <name>xdivy</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>p_xmody</name> = <name>xmody</name></expr>;</expr_stmt>
<return>return <expr><name>DIVMOD_OK</name></expr>;</return>
}
static <function><type><name>PyObject</name> *</type>
<name>int_div</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>x</name></decl></param>, <param><decl><type><name>PyIntObject</name> *</type><name>y</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>xi</name></decl>, <decl><type ref="prev"/><name>yi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>xi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>yi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>i_divmod</name><argument_list>(<argument><expr><name>xi</name></expr></argument>, <argument><expr><name>yi</name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>, <argument><expr>&amp;<name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr><name>DIVMOD_OK</name></expr>:
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>DIVMOD_OVERFLOW</name></expr>:
<return>return <expr><call><name><name>PyLong_Type</name>.<name>tp_as_number</name>-&gt;<name>nb_divide</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>x</name></expr></argument>,
<argument><expr>(<name>PyObject</name> *)<name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</case><default>default:
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_classic_div</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>x</name></decl></param>, <param><decl><type><name>PyIntObject</name> *</type><name>y</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>xi</name></decl>, <decl><type ref="prev"/><name>yi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>xi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>yi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>Py_DivisionWarningFlag</name> &amp;&amp;
<call><name>PyErr_Warn</name><argument_list>(<argument><expr><name>PyExc_DeprecationWarning</name></expr></argument>, <argument><expr>"classic int division"</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<switch>switch <condition>(<expr><call><name>i_divmod</name><argument_list>(<argument><expr><name>xi</name></expr></argument>, <argument><expr><name>yi</name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>, <argument><expr>&amp;<name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr><name>DIVMOD_OK</name></expr>:
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>DIVMOD_OVERFLOW</name></expr>:
<return>return <expr><call><name><name>PyLong_Type</name>.<name>tp_as_number</name>-&gt;<name>nb_divide</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>x</name></expr></argument>,
<argument><expr>(<name>PyObject</name> *)<name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</case><default>default:
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_true_divide</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>w</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>PyInt_Check</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name><name>PyFloat_Type</name>.<name>tp_as_number</name>-&gt;<name>nb_true_divide</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_NotImplemented</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_NotImplemented</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_mod</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>x</name></decl></param>, <param><decl><type><name>PyIntObject</name> *</type><name>y</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>xi</name></decl>, <decl><type ref="prev"/><name>yi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>xi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>yi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>i_divmod</name><argument_list>(<argument><expr><name>xi</name></expr></argument>, <argument><expr><name>yi</name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>, <argument><expr>&amp;<name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr><name>DIVMOD_OK</name></expr>:
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>DIVMOD_OVERFLOW</name></expr>:
<return>return <expr><call><name><name>PyLong_Type</name>.<name>tp_as_number</name>-&gt;<name>nb_remainder</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>x</name></expr></argument>,
<argument><expr>(<name>PyObject</name> *)<name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</case><default>default:
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_divmod</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>x</name></decl></param>, <param><decl><type><name>PyIntObject</name> *</type><name>y</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>xi</name></decl>, <decl><type ref="prev"/><name>yi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>xi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>yi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>i_divmod</name><argument_list>(<argument><expr><name>xi</name></expr></argument>, <argument><expr><name>yi</name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>, <argument><expr>&amp;<name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr><name>DIVMOD_OK</name></expr>:
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(ll)"</expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>DIVMOD_OVERFLOW</name></expr>:
<return>return <expr><call><name><name>PyLong_Type</name>.<name>tp_as_number</name>-&gt;<name>nb_divmod</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>x</name></expr></argument>,
<argument><expr>(<name>PyObject</name> *)<name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</case><default>default:
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_pow</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>PyIntObject</name> *</type><name>w</name></decl></param>, <param><decl><type><name>PyIntObject</name> *</type><name>z</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>long</name></type> <name>iv</name></decl>, <decl><type ref="prev"/><name>iw</name></decl>, <decl><type ref="prev"/><name>iz</name><init>=<expr>0</expr></init>, <name>ix</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>, <decl><type ref="prev"/><name>prev</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>iw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>iw</name> &lt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>PyObject</name> *)<name>z</name> != <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"pow() 2nd argument "
"cannot be negative when 3rd argument specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name><name>PyFloat_Type</name>.<name>tp_as_number</name>-&gt;<name>nb_power</name></name><argument_list>(
<argument><expr>(<name>PyObject</name> *)<name>v</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>w</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>z</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>PyObject</name> *)<name>z</name> != <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>iz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>iz</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"pow() 3rd argument cannot be 0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>temp</name> = <name>iv</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ix</name> = 1</expr>;</expr_stmt>
<while>while <condition>(<expr><name>iw</name> &gt; 0</expr>)</condition> <block>{
<expr_stmt><expr><name>prev</name> = <name>ix</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>iw</name> &amp; 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>ix</name> = <name>ix</name>*<name>temp</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>temp</name> == 0</expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr><name>ix</name> / <name>temp</name> != <name>prev</name></expr>)</condition><then> <block>{
<return>return <expr><call><name><name>PyLong_Type</name>.<name>tp_as_number</name>-&gt;<name>nb_power</name></name><argument_list>(
<argument><expr>(<name>PyObject</name> *)<name>v</name></expr></argument>,
<argument><expr>(<name>PyObject</name> *)<name>w</name></expr></argument>,
<argument><expr>(<name>PyObject</name> *)<name>z</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>iw</name> &gt;&gt;= 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>iw</name>==0</expr>)</condition><then> <break>break;</break></then></if>
<expr_stmt><expr><name>prev</name> = <name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> *= <name>temp</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>prev</name> != 0 &amp;&amp; <name>temp</name> / <name>prev</name> != <name>prev</name></expr>)</condition><then> <block>{
<return>return <expr><call><name><name>PyLong_Type</name>.<name>tp_as_number</name>-&gt;<name>nb_power</name></name><argument_list>(
<argument><expr>(<name>PyObject</name> *)<name>v</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>w</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>z</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>iz</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ix</name> = <name>ix</name> % <name>iz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> = <name>temp</name> % <name>iz</name></expr>;</expr_stmt>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr><name>iz</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>div</name></decl>, <decl><type ref="prev"/><name>mod</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>i_divmod</name><argument_list>(<argument><expr><name>ix</name></expr></argument>, <argument><expr><name>iz</name></expr></argument>, <argument><expr>&amp;<name>div</name></expr></argument>, <argument><expr>&amp;<name>mod</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr><name>DIVMOD_OK</name></expr>:
<expr_stmt><expr><name>ix</name> = <name>mod</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>DIVMOD_OVERFLOW</name></expr>:
<return>return <expr><call><name><name>PyLong_Type</name>.<name>tp_as_number</name>-&gt;<name>nb_power</name></name><argument_list>(
<argument><expr>(<name>PyObject</name> *)<name>v</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>w</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>z</name></expr></argument>)</argument_list></call></expr>;</return>
</case><default>default:
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
}</block></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>ix</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_neg</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>long</name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> = <name><name>v</name>-&gt;<name>ob_ival</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>UNARY_NEG_WOULD_OVERFLOW</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>o</name> <init>= <expr><call><name>PyLong_FromLong</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>o</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><call><name>PyNumber_Negative</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>-<name>a</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_abs</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>v</name>-&gt;<name>ob_ival</name></name> &gt;= 0</expr>)</condition><then>
<return>return <expr><call><name>int_int</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>int_neg</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>int_nonzero</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>v</name>-&gt;<name>ob_ival</name></name> != 0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_invert</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>~<name><name>v</name>-&gt;<name>ob_ival</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_lshift</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>PyIntObject</name> *</type><name>w</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>vv</name></decl>, *<decl><type ref="prev"/><name>ww</name></decl>, *<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>b</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"negative shift count"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>a</name> == 0 || <name>b</name> == 0</expr>)</condition><then>
<return>return <expr><call><name>int_int</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>b</name> &gt;= <name>LONG_BIT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>vv</name> = <call><name>PyLong_FromLong</name><argument_list>(<argument><expr><call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>vv</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>ww</name> = <call><name>PyLong_FromLong</name><argument_list>(<argument><expr><call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ww</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>vv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyNumber_Lshift</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name>ww</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>vv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ww</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>c</name> = <name>a</name> &lt;&lt; <name>b</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>a</name> != <call><name>Py_ARITHMETIC_RIGHT_SHIFT</name><argument_list>(<argument><expr><name>long</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>vv</name> = <call><name>PyLong_FromLong</name><argument_list>(<argument><expr><call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>vv</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>ww</name> = <call><name>PyLong_FromLong</name><argument_list>(<argument><expr><call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ww</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>vv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyNumber_Lshift</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name>ww</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>vv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ww</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_rshift</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>PyIntObject</name> *</type><name>w</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>long</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>b</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"negative shift count"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>a</name> == 0 || <name>b</name> == 0</expr>)</condition><then>
<return>return <expr><call><name>int_int</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>b</name> &gt;= <name>LONG_BIT</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>a</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>a</name> = -1</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>a</name> = 0</expr>;</expr_stmt></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>a</name> = <call><name>Py_ARITHMETIC_RIGHT_SHIFT</name><argument_list>(<argument><expr><name>long</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_and</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>PyIntObject</name> *</type><name>w</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>long</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>a</name> &amp; <name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_xor</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>PyIntObject</name> *</type><name>w</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>long</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>a</name> ^ <name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_or</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>PyIntObject</name> *</type><name>w</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>long</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_LONG</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>a</name> | <name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>int_coerce</name><parameter_list>(<param><decl><type><name>PyObject</name> **</type><name>pv</name></decl></param>, <param><decl><type><name>PyObject</name> **</type><name>pw</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr>*<name>pw</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>*<name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>*<name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_int</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>PyInt_CheckExact</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>v</name> = (<name>PyIntObject</name> *)<call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>v</name>-&gt;<name>ob_ival</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr>(<name>PyObject</name> *)<name>v</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_long</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyLong_FromLong</name><argument_list>(<argument><expr>(<name><name>v</name> -&gt; <name>ob_ival</name></name>)</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_float</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr><call>(<name>double</name>)<argument_list>(<argument><expr><name><name>v</name> -&gt; <name>ob_ival</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_oct</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>_PyInt_Format</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_hex</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>_PyInt_Format</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>16</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_subtype_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>x</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>base</name> <init>= <expr>-909</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr>"x"</expr>, <expr>"base"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>type</name> != &amp;<name>PyInt_Type</name></expr>)</condition><then>
<return>return <expr><call><name>int_subtype_new</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>, <argument><expr>"|Oi:int"</expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
<argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>base</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>x</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>0L</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>base</name> == -909</expr>)</condition><then>
<return>return <expr><call><name>PyNumber_Int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>string</name> <init>= <expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call> != <call><name>PyString_Size</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>srepr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>srepr</name> = <call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>srepr</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"invalid literal for int() with base %d: %s"</expr></argument>,
<argument><expr><name>base</name></expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>srepr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>srepr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyInt_FromString</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>PyInt_FromUnicode</name><argument_list>(<argument><expr><call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"int() can't convert non-string with explicit base"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_subtype_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tmp</name></decl>, *<decl><type ref="prev"/><name>newobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ival</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyType_IsSubtype</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>&amp;<name>PyInt_Type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>int_new</name><argument_list>(<argument><expr>&amp;<name>PyInt_Type</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyInt_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ival</name> = <call><name>PyLong_AsLong</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ival</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>ival</name> = ((<name>PyIntObject</name> *)<name>tmp</name>)-&gt;<name>ob_ival</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>newobj</name> = <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>newobj</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>((<name>PyIntObject</name> *)<name>newobj</name>)-&gt;<name>ob_ival</name> = <name>ival</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>newobj</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_getnewargs</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(l)"</expr></argument>, <argument><expr><name><name>v</name>-&gt;<name>ob_ival</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int_getN</name><parameter_list>(<param><decl><type><name>PyIntObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>context</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>Py_intptr_t</name>)<name>context</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro>
<macro><name>_PyInt_Format</name><argument_list>(<argument>PyIntObject *v</argument>, <argument>int base</argument>, <argument>int newstyle</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><name><name>v</name>-&gt;<name>ob_ival</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>negative</name> <init>= <expr><name>n</name> &lt; 0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_zero</name> <init>= <expr><name>n</name> == 0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof>*<name>CHAR_BIT</name>+6</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>p</name> <init>= <expr>&amp;<name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>base</name> &gt;= 2 &amp;&amp; <name>base</name> &lt;= 36</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<decl_stmt><decl><type><name>long</name></type> <name>div</name> <init>= <expr><name>n</name> / <name>base</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>mod</name> <init>= <expr><name>n</name> - <name>div</name> * <name>base</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>cdigit</name> <init>= <expr><call>(<name>char</name>)<argument_list>(<argument><expr><name>mod</name> &lt; 0 ? -<name>mod</name> : <name>mod</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cdigit</name> += (<name>cdigit</name> &lt; 10) ? '0' : 'a'-10</expr>;</expr_stmt>
<expr_stmt><expr>*--<name>p</name> = <name>cdigit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = <name>div</name></expr>;</expr_stmt>
}</block> while<condition>(<expr><name>n</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name>base</name> == 2</expr>)</condition><then> <block>{
<expr_stmt><expr>*--<name>p</name> = 'b'</expr>;</expr_stmt>
<expr_stmt><expr>*--<name>p</name> = '0'</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>base</name> == 8</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>newstyle</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*--<name>p</name> = 'o'</expr>;</expr_stmt>
<expr_stmt><expr>*--<name>p</name> = '0'</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name>is_zero</name></expr>)</condition><then>
<expr_stmt><expr>*--<name>p</name> = '0'</expr>;</expr_stmt></then></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name>base</name> == 16</expr>)</condition><then> <block>{
<expr_stmt><expr>*--<name>p</name> = 'x'</expr>;</expr_stmt>
<expr_stmt><expr>*--<name>p</name> = '0'</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>base</name> != 10</expr>)</condition><then> <block>{
<expr_stmt><expr>*--<name>p</name> = '#'</expr>;</expr_stmt>
<expr_stmt><expr>*--<name>p</name> = '0' + <name>base</name>%10</expr>;</expr_stmt>
<if>if <condition>(<expr><name>base</name> &gt; 10</expr>)</condition><then>
<expr_stmt><expr>*--<name>p</name> = '0' + <name>base</name>/10</expr>;</expr_stmt></then></if>
}</block></then></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name>negative</name></expr>)</condition><then>
<expr_stmt><expr>*--<name>p</name> = '-'</expr>;</expr_stmt></then></if>
<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> - <name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>int__format__</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>format_spec</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O:__format__"</expr></argument>, <argument><expr>&amp;<name>format_spec</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyBytes_Check</name><argument_list>(<argument><expr><name>format_spec</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>_PyInt_FormatAdvanced</name><argument_list>(<argument><expr><name>self</name></expr></argument>,
<argument><expr><call><name>PyBytes_AS_STRING</name><argument_list>(<argument><expr><name>format_spec</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>PyBytes_GET_SIZE</name><argument_list>(<argument><expr><name>format_spec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>format_spec</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>str_spec</name> <init>= <expr><call><name>PyObject_Str</name><argument_list>(<argument><expr><name>format_spec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>str_spec</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>_PyInt_FormatAdvanced</name><argument_list>(<argument><expr><name>self</name></expr></argument>,
<argument><expr><call><name>PyBytes_AS_STRING</name><argument_list>(<argument><expr><name>str_spec</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>PyBytes_GET_SIZE</name><argument_list>(<argument><expr><name>str_spec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>str_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"__format__ requires str or unicode"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
static PyObject *
int_is_finite(PyObject *v) {
Py_RETURN_TRUE;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>int_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"conjugate"</expr>, <expr>(<name>PyCFunction</name>)<name>int_int</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr>"Returns self, the complex conjugate of any int."</expr>
}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
{
"is_finite", (PyCFunction)int_is_finite, METH_NOARGS,
"Returns always True."
},
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{
<expr>"__trunc__"</expr>, <expr>(<name>PyCFunction</name>)<name>int_int</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr>"Truncating an Integral returns itself."</expr>
}</block></expr>,
<expr><block>{<expr>"__getnewargs__"</expr>, <expr>(<name>PyCFunction</name>)<name>int_getnewargs</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"__format__"</expr>, <expr>(<name>PyCFunction</name>)<name>int__format__</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>int_getset</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"real"</expr>,
<expr>(<name>getter</name>)<name>int_int</name></expr>, <expr>(<name>setter</name>)<name>NULL</name></expr>,
<expr>"the real part of a complex number"</expr>,
<expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{
<expr>"imag"</expr>,
<expr>(<name>getter</name>)<name>int_getN</name></expr>, <expr>(<name>setter</name>)<name>NULL</name></expr>,
<expr>"the imaginary part of a complex number"</expr>,
<expr>(<name>void</name>*)0</expr>
}</block></expr>,
<expr><block>{
<expr>"numerator"</expr>,
<expr>(<name>getter</name>)<name>int_int</name></expr>, <expr>(<name>setter</name>)<name>NULL</name></expr>,
<expr>"the numerator of a rational number in lowest terms"</expr>,
<expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{
<expr>"denominator"</expr>,
<expr>(<name>getter</name>)<name>int_getN</name></expr>, <expr>(<name>setter</name>)<name>NULL</name></expr>,
<expr>"the denominator of a rational number in lowest terms"</expr>,
<expr>(<name>void</name>*)1</expr>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>int_doc</name></expr></argument>,
<argument><expr>"int(x[, base]) -&gt; integer\n\
\n\
Convert a string or number to an integer, if possible. A floating point\n\
argument will be truncated towards zero (this does not include a string\n\
representation of a floating point number!) When converting a string, use\n\
the optional base. It is an error to supply a base when converting a\n\
non-string. If base is zero, the proper base is guessed based on the\n\
string content. If the argument is outside the integer range a\n\
long object will be returned instead."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyNumberMethods</name></type> <name>int_as_number</name> <init>= <expr><block>{
<expr>(<name>binaryfunc</name>)<name>int_add</name></expr>,
<expr>(<name>binaryfunc</name>)<name>int_sub</name></expr>,
<expr>(<name>binaryfunc</name>)<name>int_mul</name></expr>,
<expr>(<name>binaryfunc</name>)<name>int_classic_div</name></expr>,
<expr>(<name>binaryfunc</name>)<name>int_mod</name></expr>,
<expr>(<name>binaryfunc</name>)<name>int_divmod</name></expr>,
<expr>(<name>ternaryfunc</name>)<name>int_pow</name></expr>,
<expr>(<name>unaryfunc</name>)<name>int_neg</name></expr>,
<expr>(<name>unaryfunc</name>)<name>int_int</name></expr>,
<expr>(<name>unaryfunc</name>)<name>int_abs</name></expr>,
<expr>(<name>inquiry</name>)<name>int_nonzero</name></expr>,
<expr>(<name>unaryfunc</name>)<name>int_invert</name></expr>,
<expr>(<name>binaryfunc</name>)<name>int_lshift</name></expr>,
<expr>(<name>binaryfunc</name>)<name>int_rshift</name></expr>,
<expr>(<name>binaryfunc</name>)<name>int_and</name></expr>,
<expr>(<name>binaryfunc</name>)<name>int_xor</name></expr>,
<expr>(<name>binaryfunc</name>)<name>int_or</name></expr>,
<expr><name>int_coerce</name></expr>,
<expr>(<name>unaryfunc</name>)<name>int_int</name></expr>,
<expr>(<name>unaryfunc</name>)<name>int_long</name></expr>,
<expr>(<name>unaryfunc</name>)<name>int_float</name></expr>,
<expr>(<name>unaryfunc</name>)<name>int_oct</name></expr>,
<expr>(<name>unaryfunc</name>)<name>int_hex</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>binaryfunc</name>)<name>int_div</name></expr>,
<expr><name>int_true_divide</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>unaryfunc</name>)<name>int_int</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyInt_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"int"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyIntObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>int_dealloc</name></expr>,
<expr>(<name>printfunc</name>)<name>int_print</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>cmpfunc</name>)<name>int_compare</name></expr>,
<expr>(<name>reprfunc</name>)<name>int_repr</name></expr>,
<expr>&amp;<name>int_as_number</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>hashfunc</name>)<name>int_hash</name></expr>,
<expr>0</expr>,
<expr>(<name>reprfunc</name>)<name>int_repr</name></expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_CHECKTYPES</name> |
<name>Py_TPFLAGS_BASETYPE</name> | <name>Py_TPFLAGS_INT_SUBCLASS</name></expr>,
<expr><name>int_doc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>int_methods</name></expr>,
<expr>0</expr>,
<expr><name>int_getset</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>int_new</name></expr>,
<expr>(<name>freefunc</name>)<name>int_free</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type>
<name>_PyInt_Init</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyIntObject</name> *</type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ival</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NSMALLNEGINTS</name> + <name>NSMALLPOSINTS</name> &gt; 0</expr></cpp:if>
<for>for (<init><expr><name>ival</name> = -<name>NSMALLNEGINTS</name></expr>;</init> <condition><expr><name>ival</name> &lt; <name>NSMALLPOSINTS</name></expr>;</condition> <incr><expr><name>ival</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!<name>free_list</name> &amp;&amp; (<name>free_list</name> = <call><name>fill_free_list</name><argument_list>()</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>v</name> = <name>free_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>free_list</name> = (<name>PyIntObject</name> *)<call><name>Py_TYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_INIT</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>&amp;<name>PyInt_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name>-&gt;<name>ob_ival</name></name> = <name>ival</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>small_ints</name><index>[<expr><name>ival</name> + <name>NSMALLNEGINTS</name></expr>]</index></name> = <name>v</name></expr>;</expr_stmt>
}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyInt_ClearFreeList</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyIntObject</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyIntBlock</name> *</type><name>list</name></decl>, *<decl><type ref="prev"/><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>freelist_size</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>list</name> = <name>block_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>block_list</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>free_list</name> = <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>list</name> != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><name>u</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>p</name> = &amp;<name><name>list</name>-&gt;<name>objects</name><index>[<expr>0</expr>]</index></name></expr>;</init>
<condition><expr><name>i</name> &lt; <name>N_INTOBJECTS</name></expr>;</condition>
<incr><expr><name>i</name>++</expr>, <expr><name>p</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>PyInt_CheckExact</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> &amp;&amp; <name><name>p</name>-&gt;<name>ob_refcnt</name></name> != 0</expr>)</condition><then>
<expr_stmt><expr><name>u</name>++</expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><name>next</name> = <name><name>list</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>u</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>list</name>-&gt;<name>next</name></name> = <name>block_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>block_list</name> = <name>list</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>p</name> = &amp;<name><name>list</name>-&gt;<name>objects</name><index>[<expr>0</expr>]</index></name></expr>;</init>
<condition><expr><name>i</name> &lt; <name>N_INTOBJECTS</name></expr>;</condition>
<incr><expr><name>i</name>++</expr>, <expr><name>p</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>PyInt_CheckExact</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> ||
<name><name>p</name>-&gt;<name>ob_refcnt</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> = (struct <name>_typeobject</name> *)
<name>free_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>free_list</name> = <name>p</name></expr>;</expr_stmt>
}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NSMALLNEGINTS</name> + <name>NSMALLPOSINTS</name> &gt; 0</expr></cpp:if>
<else>else <if>if <condition>(<expr>-<name>NSMALLNEGINTS</name> &lt;= <name><name>p</name>-&gt;<name>ob_ival</name></name> &amp;&amp;
<name><name>p</name>-&gt;<name>ob_ival</name></name> &lt; <name>NSMALLPOSINTS</name> &amp;&amp;
<name><name>small_ints</name><index>[<expr><name><name>p</name>-&gt;<name>ob_ival</name></name> +
<name>NSMALLNEGINTS</name></expr>]</index></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>small_ints</name><index>[<expr><name><name>p</name>-&gt;<name>ob_ival</name></name> +
<name>NSMALLNEGINTS</name></expr>]</index></name> = <name>p</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></for>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyMem_FREE</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>freelist_size</name> += <name>u</name></expr>;</expr_stmt>
<expr_stmt><expr><name>list</name> = <name>next</name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>freelist_size</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>PyInt_Fini</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyIntObject</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyIntBlock</name> *</type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NSMALLNEGINTS</name> + <name>NSMALLPOSINTS</name> &gt; 0</expr></cpp:if>
<decl_stmt><decl><type><name>PyIntObject</name> **</type><name>q</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> = <name>NSMALLNEGINTS</name> + <name>NSMALLPOSINTS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> = <name>small_ints</name></expr>;</expr_stmt>
<while>while <condition>(<expr>--<name>i</name> &gt;= 0</expr>)</condition> <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr>*<name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>q</name>++ = <name>NULL</name></expr>;</expr_stmt>
}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>u</name> = <call><name>PyInt_ClearFreeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>Py_VerboseFlag</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"#cleanup ints"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>u</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>": %d unfreed int%s\n"</expr></argument>,
<argument><expr><name>u</name></expr></argument>, <argument><expr><name>u</name> == 1 ? "" : "s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>Py_VerboseFlag</name> &gt; 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>list</name> = <name>block_list</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>list</name> != <name>NULL</name></expr>)</condition> <block>{
<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>p</name> = &amp;<name><name>list</name>-&gt;<name>objects</name><index>[<expr>0</expr>]</index></name></expr>;</init>
<condition><expr><name>i</name> &lt; <name>N_INTOBJECTS</name></expr>;</condition>
<incr><expr><name>i</name>++</expr>, <expr><name>p</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>PyInt_CheckExact</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> &amp;&amp; <name><name>p</name>-&gt;<name>ob_refcnt</name></name> != 0</expr>)</condition><then>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>"#&lt;int at %p, refcnt=%ld, val=%ld&gt;\n"</expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr>(<name>long</name>)<name><name>p</name>-&gt;<name>ob_refcnt</name></name></expr></argument>,
<argument><expr><name><name>p</name>-&gt;<name>ob_ival</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><name>list</name> = <name><name>list</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
}</block></then></if>
}</block></function>
</unit>
