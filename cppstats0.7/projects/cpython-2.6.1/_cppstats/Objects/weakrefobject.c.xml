<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Objects/weakrefobject.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_WEAKREFS_LISTPTR</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((PyWeakReference **) PyObject_GET_WEAKREFS_LISTPTR(o))</cpp:value></cpp:define>
<function><type><name>Py_ssize_t</name></type>
<name>_PyWeakref_GetWeakrefCount</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>head</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>head</name> != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr>++<name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>head</name> = <name><name>head</name>-&gt;<name>wr_next</name></name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>count</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_weakref</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>ob</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>callback</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>hash</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>wr_object</name></name> = <name>ob</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>wr_callback</name></name> = <name>callback</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyWeakReference</name> *</type>
<name>new_weakref</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ob</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>callback</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyWeakReference</name> *</type><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> = <call><name>PyObject_GC_New</name><argument_list>(<argument><expr><name>PyWeakReference</name></expr></argument>, <argument><expr>&amp;<name>_PyWeakref_RefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>init_weakref</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>ob</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_GC_Track</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>clear_weakref</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>callback</name> <init>= <expr><name><name>self</name>-&gt;<name>wr_callback</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> != <name>Py_None</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyWeakReference</name> **</type><name>list</name> <init>= <expr><call><name>GET_WEAKREFS_LISTPTR</name><argument_list>(
<argument><expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>list</name> == <name>self</name></expr>)</condition><then>
<expr_stmt><expr>*<name>list</name> = <name><name>self</name>-&gt;<name>wr_next</name></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>wr_object</name></name> = <name>Py_None</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>wr_prev</name></name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>self</name>-&gt;<name>wr_prev</name>-&gt;<name>wr_next</name></name> = <name><name>self</name>-&gt;<name>wr_next</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>wr_next</name></name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>self</name>-&gt;<name>wr_next</name>-&gt;<name>wr_prev</name></name> = <name><name>self</name>-&gt;<name>wr_prev</name></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>wr_prev</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>wr_next</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>callback</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>wr_callback</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>void</name></type>
<name>_PyWeakref_ClearRef</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>callback</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>self</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyWeakref_Check</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>callback</name> = <name><name>self</name>-&gt;<name>wr_callback</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>wr_callback</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_weakref</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>wr_callback</name></name> = <name>callback</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>weakref_dealloc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_weakref</name><argument_list>(<argument><expr>(<name>PyWeakReference</name> *) <name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>gc_traverse</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>self</name></decl></param>, <param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>wr_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>gc_clear</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>clear_weakref</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>weakref_call</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>":__call__"</expr></argument>, <argument><expr><name>kwlist</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>object</name> <init>= <expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>object</name>)</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>long</name></type>
<name>weakref_hash</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>hash</name></name> != -1</expr>)</condition><then>
<return>return <expr><name><name>self</name>-&gt;<name>hash</name></name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> == <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"weak object has gone away"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>hash</name></name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>self</name>-&gt;<name>hash</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>weakref_repr</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> == <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"&lt;weakref at %p; dead&gt;"</expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>nameobj</name> <init>= <expr><call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"__name__"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>nameobj</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>nameobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>name</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>nameobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>name</name> ? "&lt;weakref at %p; to '%.50s' at %p (%s)&gt;"
: "&lt;weakref at %p; to '%.50s' at %p&gt;"</expr></argument>,
<argument><expr><name>self</name></expr></argument>,
<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>,
<argument><expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>nameobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>weakref_richcompare</name><parameter_list>(<param><decl><type><name>PyWeakReference</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyWeakReference</name>*</type> <name>other</name></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>op</name> != <name>Py_EQ</name> || <name><name>self</name>-&gt;<name>ob_type</name></name> != <name><name>other</name>-&gt;<name>ob_type</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_NotImplemented</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_NotImplemented</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> == <name>Py_None</name>
|| <call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call> == <name>Py_None</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name> <init>= <expr><name>self</name>==<name>other</name> ? <name>Py_True</name> : <name>Py_False</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyObject_RichCompare</name><argument_list>(<argument><expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_basic_refs</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>head</name></decl></param>,
<param><decl><type><name>PyWeakReference</name> **</type><name>refp</name></decl></param>, <param><decl><type><name>PyWeakReference</name> **</type><name>proxyp</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>refp</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>proxyp</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>head</name> != <name>NULL</name> &amp;&amp; <name><name>head</name>-&gt;<name>wr_callback</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyWeakref_CheckRefExact</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>refp</name> = <name>head</name></expr>;</expr_stmt>
<expr_stmt><expr><name>head</name> = <name><name>head</name>-&gt;<name>wr_next</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>head</name> != <name>NULL</name>
&amp;&amp; <name><name>head</name>-&gt;<name>wr_callback</name></name> == <name>NULL</name>
&amp;&amp; <call><name>PyWeakref_CheckProxy</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>proxyp</name> = <name>head</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>insert_after</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>newref</name></decl></param>, <param><decl><type><name>PyWeakReference</name> *</type><name>prev</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>newref</name>-&gt;<name>wr_prev</name></name> = <name>prev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newref</name>-&gt;<name>wr_next</name></name> = <name><name>prev</name>-&gt;<name>wr_next</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>prev</name>-&gt;<name>wr_next</name></name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>prev</name>-&gt;<name>wr_next</name>-&gt;<name>wr_prev</name></name> = <name>newref</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>prev</name>-&gt;<name>wr_next</name></name> = <name>newref</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>insert_head</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>newref</name></decl></param>, <param><decl><type><name>PyWeakReference</name> **</type><name>list</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyWeakReference</name> *</type><name>next</name> <init>= <expr>*<name>list</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>newref</name>-&gt;<name>wr_prev</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newref</name>-&gt;<name>wr_next</name></name> = <name>next</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>next</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>next</name>-&gt;<name>wr_prev</name></name> = <name>newref</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr>*<name>list</name> = <name>newref</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_weakref_init_args</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>funcname</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>,
<param><decl><type><name>PyObject</name> **</type><name>obp</name></decl></param>, <param><decl><type><name>PyObject</name> **</type><name>callbackp</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>obp</name></expr></argument>, <argument><expr><name>callbackp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>weakref___new__</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyWeakReference</name> *</type><name>self</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ob</name></decl>, *<decl><type ref="prev"/><name>callback</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>parse_weakref_init_args</name><argument_list>(<argument><expr>"__new__"</expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>&amp;<name>ob</name></expr></argument>, <argument><expr>&amp;<name>callback</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyWeakReference</name> *</type><name>ref</name></decl>, *<decl><type ref="prev"/><name>proxy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyWeakReference</name> **</type><name>list</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyType_SUPPORTS_WEAKREFS</name><argument_list>(<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"cannot create weak reference to '%s' object"</expr></argument>,
<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>callback</name> == <name>Py_None</name></expr>)</condition><then>
<expr_stmt><expr><name>callback</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>list</name> = <call><name>GET_WEAKREFS_LISTPTR</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_basic_refs</name><argument_list>(<argument><expr>*<name>list</name></expr></argument>, <argument><expr>&amp;<name>ref</name></expr></argument>, <argument><expr>&amp;<name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>callback</name> == <name>NULL</name> &amp;&amp; <name>type</name> == &amp;<name>_PyWeakref_RefType</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>ref</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>ref</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>self</name> = <call>(<name>PyWeakReference</name> *) <argument_list>(<argument><expr><call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>init_weakref</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ob</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>callback</name> == <name>NULL</name> &amp;&amp; <name>type</name> == &amp;<name>_PyWeakref_RefType</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>insert_head</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>PyWeakReference</name> *</type><name>prev</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_basic_refs</name><argument_list>(<argument><expr>*<name>list</name></expr></argument>, <argument><expr>&amp;<name>ref</name></expr></argument>, <argument><expr>&amp;<name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> = (<name>proxy</name> == <name>NULL</name>) ? <name>ref</name> : <name>proxy</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>prev</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>insert_head</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>insert_after</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></else></if>
}</block></then></if>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<name>self</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>weakref___init__</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tmp</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>parse_weakref_init_args</name><argument_list>(<argument><expr>"__init__"</expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>&amp;<name>tmp</name></expr></argument>, <argument><expr>&amp;<name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then>
<else>else
<return>return <expr>-1</expr>;</return></else></if>
}</block></function>
<decl_stmt><decl><type><name>PyTypeObject</name></type>
<name>_PyWeakref_RefType</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"weakref"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyWeakReference</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr><name>weakref_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>reprfunc</name>)<name>weakref_repr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>hashfunc</name>)<name>weakref_hash</name></expr>,
<expr>(<name>ternaryfunc</name>)<name>weakref_call</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name> | <name>Py_TPFLAGS_HAVE_RICHCOMPARE</name>
| <name>Py_TPFLAGS_BASETYPE</name></expr>,
<expr>0</expr>,
<expr>(<name>traverseproc</name>)<name>gc_traverse</name></expr>,
<expr>(<name>inquiry</name>)<name>gc_clear</name></expr>,
<expr>(<name>richcmpfunc</name>)<name>weakref_richcompare</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>weakref___init__</name></expr>,
<expr><name>PyType_GenericAlloc</name></expr>,
<expr><name>weakref___new__</name></expr>,
<expr><name>PyObject_GC_Del</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>proxy_checkref</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>proxy</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call> == <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ReferenceError</name></expr></argument>,
<argument><expr>"weakly-referenced object no longer exists"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNWRAP</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if (PyWeakref_CheckProxy(o)) { if (!proxy_checkref((PyWeakReference *)o)) return NULL; o = PyWeakref_GET_OBJECT(o); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNWRAP_I</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if (PyWeakref_CheckProxy(o)) { if (!proxy_checkref((PyWeakReference *)o)) return -1; o = PyWeakref_GET_OBJECT(o); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_UNARY</name><parameter_list>(<param><type><name>method</name></type></param>, <param><type><name>generic</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static PyObject * method(PyObject *proxy) { UNWRAP(proxy); return generic(proxy); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_BINARY</name><parameter_list>(<param><type><name>method</name></type></param>, <param><type><name>generic</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static PyObject * method(PyObject *x, PyObject *y) { UNWRAP(x); UNWRAP(y); return generic(x, y); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP_TERNARY</name><parameter_list>(<param><type><name>method</name></type></param>, <param><type><name>generic</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static PyObject * method(PyObject *proxy, PyObject *v, PyObject *w) { UNWRAP(proxy); UNWRAP(v); if (w != NULL) UNWRAP(w); return generic(proxy, v, w); }</cpp:value></cpp:define>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_getattr</argument>, <argument>PyObject_GetAttr</argument>)</argument_list></macro>
<macro><name>WRAP_UNARY</name><argument_list>(<argument>proxy_str</argument>, <argument>PyObject_Str</argument>)</argument_list></macro>
<macro><name>WRAP_TERNARY</name><argument_list>(<argument>proxy_call</argument>, <argument>PyEval_CallObjectWithKeywords</argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>proxy_repr</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>proxy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>160</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>"&lt;weakproxy at %p to %.100s at %p&gt;"</expr></argument>, <argument><expr><name>proxy</name></expr></argument>,
<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>,
<argument><expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>proxy_setattr</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>proxy</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>name</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>proxy_checkref</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><call><name>PyObject_SetAttr</name><argument_list>(<argument><expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>proxy_compare</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>proxy</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>UNWRAP_I</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNWRAP_I</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyObject_Compare</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_add</argument>, <argument>PyNumber_Add</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_sub</argument>, <argument>PyNumber_Subtract</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_mul</argument>, <argument>PyNumber_Multiply</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_div</argument>, <argument>PyNumber_Divide</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_floor_div</argument>, <argument>PyNumber_FloorDivide</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_true_div</argument>, <argument>PyNumber_TrueDivide</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_mod</argument>, <argument>PyNumber_Remainder</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_divmod</argument>, <argument>PyNumber_Divmod</argument>)</argument_list></macro>
<macro><name>WRAP_TERNARY</name><argument_list>(<argument>proxy_pow</argument>, <argument>PyNumber_Power</argument>)</argument_list></macro>
<macro><name>WRAP_UNARY</name><argument_list>(<argument>proxy_neg</argument>, <argument>PyNumber_Negative</argument>)</argument_list></macro>
<macro><name>WRAP_UNARY</name><argument_list>(<argument>proxy_pos</argument>, <argument>PyNumber_Positive</argument>)</argument_list></macro>
<macro><name>WRAP_UNARY</name><argument_list>(<argument>proxy_abs</argument>, <argument>PyNumber_Absolute</argument>)</argument_list></macro>
<macro><name>WRAP_UNARY</name><argument_list>(<argument>proxy_invert</argument>, <argument>PyNumber_Invert</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_lshift</argument>, <argument>PyNumber_Lshift</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_rshift</argument>, <argument>PyNumber_Rshift</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_and</argument>, <argument>PyNumber_And</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_xor</argument>, <argument>PyNumber_Xor</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_or</argument>, <argument>PyNumber_Or</argument>)</argument_list></macro>
<macro><name>WRAP_UNARY</name><argument_list>(<argument>proxy_int</argument>, <argument>PyNumber_Int</argument>)</argument_list></macro>
<macro><name>WRAP_UNARY</name><argument_list>(<argument>proxy_long</argument>, <argument>PyNumber_Long</argument>)</argument_list></macro>
<macro><name>WRAP_UNARY</name><argument_list>(<argument>proxy_float</argument>, <argument>PyNumber_Float</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_iadd</argument>, <argument>PyNumber_InPlaceAdd</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_isub</argument>, <argument>PyNumber_InPlaceSubtract</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_imul</argument>, <argument>PyNumber_InPlaceMultiply</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_idiv</argument>, <argument>PyNumber_InPlaceDivide</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_ifloor_div</argument>, <argument>PyNumber_InPlaceFloorDivide</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_itrue_div</argument>, <argument>PyNumber_InPlaceTrueDivide</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_imod</argument>, <argument>PyNumber_InPlaceRemainder</argument>)</argument_list></macro>
<macro><name>WRAP_TERNARY</name><argument_list>(<argument>proxy_ipow</argument>, <argument>PyNumber_InPlacePower</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_ilshift</argument>, <argument>PyNumber_InPlaceLshift</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_irshift</argument>, <argument>PyNumber_InPlaceRshift</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_iand</argument>, <argument>PyNumber_InPlaceAnd</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_ixor</argument>, <argument>PyNumber_InPlaceXor</argument>)</argument_list></macro>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_ior</argument>, <argument>PyNumber_InPlaceOr</argument>)</argument_list></macro>
<macro><name>WRAP_UNARY</name><argument_list>(<argument>proxy_index</argument>, <argument>PyNumber_Index</argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>proxy_nonzero</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>proxy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>o</name> <init>= <expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>proxy_checkref</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>proxy_dealloc</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>wr_callback</name></name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>clear_weakref</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_GC_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>proxy_slice</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>proxy</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>j</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>proxy_checkref</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PySequence_GetSlice</name><argument_list>(<argument><expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>proxy_ass_slice</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>proxy</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>j</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>proxy_checkref</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><call><name>PySequence_SetSlice</name><argument_list>(<argument><expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>proxy_contains</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>proxy</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>proxy_checkref</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><call><name>PySequence_Contains</name><argument_list>(<argument><expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>proxy_length</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>proxy</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>proxy_checkref</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><call><name>PyObject_Length</name><argument_list>(<argument><expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<macro><name>WRAP_BINARY</name><argument_list>(<argument>proxy_getitem</argument>, <argument>PyObject_GetItem</argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>proxy_setitem</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>proxy</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>proxy_checkref</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>value</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyObject_DelItem</name><argument_list>(<argument><expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>PyObject_SetItem</name><argument_list>(<argument><expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>proxy_iter</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>proxy</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>proxy_checkref</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyObject_GetIter</name><argument_list>(<argument><expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>proxy_iternext</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>proxy</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>proxy_checkref</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyIter_Next</name><argument_list>(<argument><expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyNumberMethods</name></type> <name>proxy_as_number</name> <init>= <expr><block>{
<expr><name>proxy_add</name></expr>,
<expr><name>proxy_sub</name></expr>,
<expr><name>proxy_mul</name></expr>,
<expr><name>proxy_div</name></expr>,
<expr><name>proxy_mod</name></expr>,
<expr><name>proxy_divmod</name></expr>,
<expr><name>proxy_pow</name></expr>,
<expr><name>proxy_neg</name></expr>,
<expr><name>proxy_pos</name></expr>,
<expr><name>proxy_abs</name></expr>,
<expr>(<name>inquiry</name>)<name>proxy_nonzero</name></expr>,
<expr><name>proxy_invert</name></expr>,
<expr><name>proxy_lshift</name></expr>,
<expr><name>proxy_rshift</name></expr>,
<expr><name>proxy_and</name></expr>,
<expr><name>proxy_xor</name></expr>,
<expr><name>proxy_or</name></expr>,
<expr>0</expr>,
<expr><name>proxy_int</name></expr>,
<expr><name>proxy_long</name></expr>,
<expr><name>proxy_float</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>proxy_iadd</name></expr>,
<expr><name>proxy_isub</name></expr>,
<expr><name>proxy_imul</name></expr>,
<expr><name>proxy_idiv</name></expr>,
<expr><name>proxy_imod</name></expr>,
<expr><name>proxy_ipow</name></expr>,
<expr><name>proxy_ilshift</name></expr>,
<expr><name>proxy_irshift</name></expr>,
<expr><name>proxy_iand</name></expr>,
<expr><name>proxy_ixor</name></expr>,
<expr><name>proxy_ior</name></expr>,
<expr><name>proxy_floor_div</name></expr>,
<expr><name>proxy_true_div</name></expr>,
<expr><name>proxy_ifloor_div</name></expr>,
<expr><name>proxy_itrue_div</name></expr>,
<expr><name>proxy_index</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>proxy_as_sequence</name> <init>= <expr><block>{
<expr>(<name>lenfunc</name>)<name>proxy_length</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>ssizessizeargfunc</name>)<name>proxy_slice</name></expr>,
<expr>0</expr>,
<expr>(<name>ssizessizeobjargproc</name>)<name>proxy_ass_slice</name></expr>,
<expr>(<name>objobjproc</name>)<name>proxy_contains</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMappingMethods</name></type> <name>proxy_as_mapping</name> <init>= <expr><block>{
<expr>(<name>lenfunc</name>)<name>proxy_length</name></expr>,
<expr><name>proxy_getitem</name></expr>,
<expr>(<name>objobjargproc</name>)<name>proxy_setitem</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name></type>
<name>_PyWeakref_ProxyType</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"weakproxy"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyWeakReference</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>proxy_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>proxy_compare</name></expr>,
<expr>(<name>reprfunc</name>)<name>proxy_repr</name></expr>,
<expr>&amp;<name>proxy_as_number</name></expr>,
<expr>&amp;<name>proxy_as_sequence</name></expr>,
<expr>&amp;<name>proxy_as_mapping</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>proxy_str</name></expr>,
<expr><name>proxy_getattr</name></expr>,
<expr>(<name>setattrofunc</name>)<name>proxy_setattr</name></expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name>
| <name>Py_TPFLAGS_CHECKTYPES</name></expr>,
<expr>0</expr>,
<expr>(<name>traverseproc</name>)<name>gc_traverse</name></expr>,
<expr>(<name>inquiry</name>)<name>gc_clear</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>getiterfunc</name>)<name>proxy_iter</name></expr>,
<expr>(<name>iternextfunc</name>)<name>proxy_iternext</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name></type>
<name>_PyWeakref_CallableProxyType</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"weakcallableproxy"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyWeakReference</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>proxy_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>proxy_compare</name></expr>,
<expr>(<name>unaryfunc</name>)<name>proxy_repr</name></expr>,
<expr>&amp;<name>proxy_as_number</name></expr>,
<expr>&amp;<name>proxy_as_sequence</name></expr>,
<expr>&amp;<name>proxy_as_mapping</name></expr>,
<expr>0</expr>,
<expr><name>proxy_call</name></expr>,
<expr><name>proxy_str</name></expr>,
<expr><name>proxy_getattr</name></expr>,
<expr>(<name>setattrofunc</name>)<name>proxy_setattr</name></expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name>
| <name>Py_TPFLAGS_CHECKTYPES</name></expr>,
<expr>0</expr>,
<expr>(<name>traverseproc</name>)<name>gc_traverse</name></expr>,
<expr>(<name>inquiry</name>)<name>gc_clear</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>getiterfunc</name>)<name>proxy_iter</name></expr>,
<expr>(<name>iternextfunc</name>)<name>proxy_iternext</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>PyObject</name> *</type>
<name>PyWeakref_NewRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ob</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>callback</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyWeakReference</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyWeakReference</name> **</type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyWeakReference</name> *</type><name>ref</name></decl>, *<decl><type ref="prev"/><name>proxy</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyType_SUPPORTS_WEAKREFS</name><argument_list>(<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"cannot create weak reference to '%s' object"</expr></argument>,
<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>list</name> = <call><name>GET_WEAKREFS_LISTPTR</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_basic_refs</name><argument_list>(<argument><expr>*<name>list</name></expr></argument>, <argument><expr>&amp;<name>ref</name></expr></argument>, <argument><expr>&amp;<name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>callback</name> == <name>Py_None</name></expr>)</condition><then>
<expr_stmt><expr><name>callback</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>callback</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <name>ref</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>result</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>result</name> = <call><name>new_weakref</name><argument_list>(<argument><expr><name>ob</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>get_basic_refs</name><argument_list>(<argument><expr>*<name>list</name></expr></argument>, <argument><expr>&amp;<name>ref</name></expr></argument>, <argument><expr>&amp;<name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>callback</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>ref</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>insert_head</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <name>ref</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>PyWeakReference</name> *</type><name>prev</name></decl>;</decl_stmt>
<expr_stmt><expr><name>prev</name> = (<name>proxy</name> == <name>NULL</name>) ? <name>ref</name> : <name>proxy</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>prev</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>insert_head</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>insert_after</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></else></if>
}</block></then></if>
}</block></else></if>
<return>return <expr>(<name>PyObject</name> *) <name>result</name></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyWeakref_NewProxy</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ob</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>callback</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyWeakReference</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyWeakReference</name> **</type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyWeakReference</name> *</type><name>ref</name></decl>, *<decl><type ref="prev"/><name>proxy</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyType_SUPPORTS_WEAKREFS</name><argument_list>(<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"cannot create weak reference to '%s' object"</expr></argument>,
<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>list</name> = <call><name>GET_WEAKREFS_LISTPTR</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_basic_refs</name><argument_list>(<argument><expr>*<name>list</name></expr></argument>, <argument><expr>&amp;<name>ref</name></expr></argument>, <argument><expr>&amp;<name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>callback</name> == <name>Py_None</name></expr>)</condition><then>
<expr_stmt><expr><name>callback</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>callback</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <name>proxy</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>result</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>result</name> = <call><name>new_weakref</name><argument_list>(<argument><expr><name>ob</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyWeakReference</name> *</type><name>prev</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyCallable_Check</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> = &amp;<name>_PyWeakref_CallableProxyType</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> = &amp;<name>_PyWeakref_ProxyType</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>get_basic_refs</name><argument_list>(<argument><expr>*<name>list</name></expr></argument>, <argument><expr>&amp;<name>ref</name></expr></argument>, <argument><expr>&amp;<name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>callback</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>proxy</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name> = <name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>skip_insert</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>prev</name> = <name>ref</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>prev</name> = (<name>proxy</name> == <name>NULL</name>) ? <name>ref</name> : <name>proxy</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>prev</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>insert_head</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>insert_after</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<label><name>skip_insert</name>:</label>
<empty_stmt>;</empty_stmt>
}</block></then></if>
}</block></else></if>
<return>return <expr>(<name>PyObject</name> *) <name>result</name></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyWeakref_GetObject</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ref</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>ref</name> == <name>NULL</name> || !<call><name>PyWeakref_Check</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyWeakref_GET_OBJECT</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>handle_callback</name><parameter_list>(<param><decl><type><name>PyWeakReference</name> *</type><name>ref</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>callback</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>cbresult</name> <init>= <expr><call><name>PyObject_CallFunctionObjArgs</name><argument_list>(<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>cbresult</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_WriteUnraisable</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>cbresult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></function>
<function><type><name>void</name></type>
<name>PyObject_ClearWeakRefs</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>object</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyWeakReference</name> **</type><name>list</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>object</name> == <name>NULL</name>
|| !<call><name>PyType_SUPPORTS_WEAKREFS</name><argument_list>(<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
|| <name><name>object</name>-&gt;<name>ob_refcnt</name></name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>list</name> = <call><name>GET_WEAKREFS_LISTPTR</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>list</name> != <name>NULL</name> &amp;&amp; <name>(*<name>list</name>)-&gt;<name>wr_callback</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>clear_weakref</name><argument_list>(<argument><expr>*<name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>list</name> != <name>NULL</name> &amp;&amp; <name>(*<name>list</name>)-&gt;<name>wr_callback</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>clear_weakref</name><argument_list>(<argument><expr>*<name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr>*<name>list</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyWeakReference</name> *</type><name>current</name> <init>= <expr>*<name>list</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>count</name> <init>= <expr><call><name>_PyWeakref_GetWeakrefCount</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>restore_error</name> <init>= <expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call> ? 1 : 0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>err_type</name></decl>, *<decl><type ref="prev"/><name>err_value</name></decl>, *<decl><type ref="prev"/><name>err_tb</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>restore_error</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Fetch</name><argument_list>(<argument><expr>&amp;<name>err_type</name></expr></argument>, <argument><expr>&amp;<name>err_value</name></expr></argument>, <argument><expr>&amp;<name>err_tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>count</name> == 1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>callback</name> <init>= <expr><name><name>current</name>-&gt;<name>wr_callback</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>current</name>-&gt;<name>wr_callback</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_weakref</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>callback</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>current</name>-&gt;<name>ob_refcnt</name></name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>handle_callback</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tuple</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tuple</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr><name>count</name> * 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tuple</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>restore_error</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Fetch</name><argument_list>(<argument><expr>&amp;<name>err_type</name></expr></argument>, <argument><expr>&amp;<name>err_value</name></expr></argument>, <argument><expr>&amp;<name>err_tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>PyWeakReference</name> *</type><name>next</name> <init>= <expr><name><name>current</name>-&gt;<name>wr_next</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>current</name>-&gt;<name>ob_refcnt</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>i</name> * 2</expr></argument>, <argument><expr>(<name>PyObject</name> *) <name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>i</name> * 2 + 1</expr></argument>, <argument><expr><name><name>current</name>-&gt;<name>wr_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>current</name>-&gt;<name>wr_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>current</name>-&gt;<name>wr_callback</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_weakref</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current</name> = <name>next</name></expr>;</expr_stmt>
}</block></for>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>callback</name> <init>= <expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>i</name> * 2 + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>callback</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>item</name> <init>= <expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>i</name> * 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>handle_callback</name><argument_list>(<argument><expr>(<name>PyWeakReference</name> *)<name>item</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>restore_error</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Restore</name><argument_list>(<argument><expr><name>err_type</name></expr></argument>, <argument><expr><name>err_value</name></expr></argument>, <argument><expr><name>err_tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
}</block></function>
</unit>
