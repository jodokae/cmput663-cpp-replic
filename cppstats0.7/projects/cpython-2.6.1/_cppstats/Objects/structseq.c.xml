<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Objects/structseq.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structseq.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>visible_length_key</name><index>[]</index></name> <init>= <expr>"n_sequence_fields"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>real_length_key</name><index>[]</index></name> <init>= <expr>"n_fields"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>unnamed_fields_key</name><index>[]</index></name> <init>= <expr>"n_unnamed_fields"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>PyStructSequence_UnnamedField</name> <init>= <expr>"unnamed field"</expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VISIBLE_SIZE</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>Py_SIZE(op)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VISIBLE_SIZE_TP</name><parameter_list>(<param><type><name>tp</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyInt_AsLong( PyDict_GetItemString((tp)-&gt;tp_dict, visible_length_key))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL_SIZE_TP</name><parameter_list>(<param><type><name>tp</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyInt_AsLong( PyDict_GetItemString((tp)-&gt;tp_dict, real_length_key))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL_SIZE</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>REAL_SIZE_TP(Py_TYPE(op))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNNAMED_FIELDS_TP</name><parameter_list>(<param><type><name>tp</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyInt_AsLong( PyDict_GetItemString((tp)-&gt;tp_dict, unnamed_fields_key))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNNAMED_FIELDS</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>UNNAMED_FIELDS_TP(Py_TYPE(op))</cpp:value></cpp:define>
<function><type><name>PyObject</name> *</type>
<name>PyStructSequence_New</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyStructSequence</name> *</type><name>obj</name></decl>;</decl_stmt>
<expr_stmt><expr><name>obj</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>PyStructSequence</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>obj</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> = <call><name>VISIBLE_SIZE_TP</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name>*) <name>obj</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>structseq_dealloc</name><parameter_list>(<param><decl><type><name>PyStructSequence</name> *</type><name>obj</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> = <call><name>REAL_SIZE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>obj</name>-&gt;<name>ob_item</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>structseq_length</name><parameter_list>(<param><decl><type><name>PyStructSequence</name> *</type><name>obj</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>VISIBLE_SIZE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>structseq_item</name><parameter_list>(<param><decl><type><name>PyStructSequence</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>i</name> &lt; 0 || <name>i</name> &gt;= <call><name>VISIBLE_SIZE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>, <argument><expr>"tuple index out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>obj</name>-&gt;<name>ob_item</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>obj</name>-&gt;<name>ob_item</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>structseq_slice</name><parameter_list>(<param><decl><type><name>PyStructSequence</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>low</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>high</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyTupleObject</name> *</type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>low</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>low</name> = 0</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>high</name> &gt; <call><name>VISIBLE_SIZE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>high</name> = <call><name>VISIBLE_SIZE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>high</name> &lt; <name>low</name></expr>)</condition><then>
<expr_stmt><expr><name>high</name> = <name>low</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>np</name> = (<name>PyTupleObject</name> *)<call><name>PyTuple_New</name><argument_list>(<argument><expr><name>high</name>-<name>low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>np</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<for>for(<init><expr><name>i</name> = <name>low</name></expr>;</init> <condition><expr><name>i</name> &lt; <name>high</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><name><name>obj</name>-&gt;<name>ob_item</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>np</name></expr></argument>, <argument><expr><name>i</name>-<name>low</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr>(<name>PyObject</name> *) <name>np</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>structseq_subscript</name><parameter_list>(<param><decl><type><name>PyStructSequence</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>item</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>PyIndex_Check</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name> <init>= <expr><call><name>PyNumber_AsSsize_t</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>PyExc_IndexError</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>i</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>i</name> += <call><name>VISIBLE_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>i</name> &lt; 0 || <name>i</name> &gt;= <call><name>VISIBLE_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>,
<argument><expr>"tuple index out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_item</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>self</name>-&gt;<name>ob_item</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PySlice_Check</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>stop</name></decl>, <decl><type ref="prev"/><name>step</name></decl>, <decl><type ref="prev"/><name>slicelen</name></decl>, <decl><type ref="prev"/><name>cur</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PySlice_GetIndicesEx</name><argument_list>(<argument><expr>(<name>PySliceObject</name> *)<name>item</name></expr></argument>,
<argument><expr><call><name>VISIBLE_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>start</name></expr></argument>, <argument><expr>&amp;<name>stop</name></expr></argument>,
<argument><expr>&amp;<name>step</name></expr></argument>, <argument><expr>&amp;<name>slicelen</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>slicelen</name> &lt;= 0</expr>)</condition><then>
<return>return <expr><call><name>PyTuple_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr><name>slicelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<for>for (<init><expr><name>cur</name> = <name>start</name></expr>, <expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>slicelen</name></expr>;</condition>
<incr><expr><name>cur</name> += <name>step</name></expr>, <expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><name><name>self</name>-&gt;<name>ob_item</name><index>[<expr><name>cur</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>result</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"structseq index must be integer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>structseq_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyStructSequence</name> *</type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>min_len</name></decl>, <decl><type ref="prev"/><name>max_len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>n_unnamed_fields</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr>"sequence"</expr>, <expr>"dict"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>, <argument><expr>"O|O:structseq"</expr></argument>,
<argument><expr><name>kwlist</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>, <argument><expr>&amp;<name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arg</name> = <call><name>PySequence_Fast</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"constructor requires a sequence"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>arg</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>dict</name> &amp;&amp; !<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"%.500s() takes a dict as second arg, if any"</expr></argument>,
<argument><expr><name><name>type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>len</name> = <call><name>PySequence_Fast_GET_SIZE</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>min_len</name> = <call><name>VISIBLE_SIZE_TP</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>max_len</name> = <call><name>REAL_SIZE_TP</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n_unnamed_fields</name> = <call><name>UNNAMED_FIELDS_TP</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>min_len</name> != <name>max_len</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>len</name> &lt; <name>min_len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"%.500s() takes an at least %zd-sequence (%zd-sequence given)"</expr></argument>,
<argument><expr><name><name>type</name>-&gt;<name>tp_name</name></name></expr></argument>, <argument><expr><name>min_len</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>len</name> &gt; <name>max_len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"%.500s() takes an at most %zd-sequence (%zd-sequence given)"</expr></argument>,
<argument><expr><name><name>type</name>-&gt;<name>tp_name</name></name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>len</name> != <name>min_len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"%.500s() takes a %zd-sequence (%zd-sequence given)"</expr></argument>,
<argument><expr><name><name>type</name>-&gt;<name>tp_name</name></name></expr></argument>, <argument><expr><name>min_len</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><name>res</name> = (<name>PyStructSequence</name>*) <call><name>PyStructSequence_New</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PySequence_Fast_GET_ITEM</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>ob_item</name><index>[<expr><name>i</name></expr>]</index></name> = <name>v</name></expr>;</expr_stmt>
}</block></for>
<for>for (<init>;</init> <condition><expr><name>i</name> &lt; <name>max_len</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr><name>dict</name> &amp;&amp; (<name>ob</name> = <call><name>PyDict_GetItemString</name><argument_list>(
<argument><expr><name>dict</name></expr></argument>, <argument><expr><name><name>type</name>-&gt;<name>tp_members</name><index>[<expr><name>i</name>-<name>n_unnamed_fields</name></expr>]</index></name>.<name>name</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
}</block></then> <else>else <block>{
<expr_stmt><expr><name>ob</name> = <name>Py_None</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>ob_item</name><index>[<expr><name>i</name></expr>]</index></name> = <name>ob</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name>*) <name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>make_tuple</name><parameter_list>(<param><decl><type><name>PyStructSequence</name> *</type><name>obj</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>structseq_slice</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>VISIBLE_SIZE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>structseq_repr</name><parameter_list>(<param><decl><type><name>PyStructSequence</name> *</type><name>obj</name></decl></param>)</parameter_list> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPR_BUFFER_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_MAXSIZE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name> *</type><name>typ</name> <init>= <expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>removelast</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>REPR_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>endofbuf</name></decl>, *<decl><type ref="prev"/><name>pbuf</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>endofbuf</name>= &amp;<name><name>buf</name><index>[<expr><name>REPR_BUFFER_SIZE</name>-5</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>tup</name> = <call><name>make_tuple</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>typ</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call> &gt; <name>TYPE_MAXSIZE</name> ? <name>TYPE_MAXSIZE</name> :
<call><name>strlen</name><argument_list>(<argument><expr><name><name>typ</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name><name>typ</name>-&gt;<name>tp_name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pbuf</name> += <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>pbuf</name>++ = '('</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>VISIBLE_SIZE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>val</name></decl>, *<decl><type ref="prev"/><name>repr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cname</name></decl>, *<decl><type ref="prev"/><name>crepr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cname</name> = <name><name>typ</name>-&gt;<name>tp_members</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> = <call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cname</name> == <name>NULL</name> || <name>val</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>repr</name> = <call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>repr</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>crepr</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>crepr</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></call> + <call><name>strlen</name><argument_list>(<argument><expr><name>crepr</name></expr></argument>)</argument_list></call> + 3</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>pbuf</name>+<name>len</name>) &lt;= <name>endofbuf</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pbuf</name> += <call><name>strlen</name><argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>pbuf</name>++ = '='</expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>crepr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pbuf</name> += <call><name>strlen</name><argument_list>(<argument><expr><name>crepr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>pbuf</name>++ = ','</expr>;</expr_stmt>
<expr_stmt><expr>*<name>pbuf</name>++ = ' '</expr>;</expr_stmt>
<expr_stmt><expr><name>removelast</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr>"..."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pbuf</name> += 3</expr>;</expr_stmt>
<expr_stmt><expr><name>removelast</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></else></if>
}</block></for>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>removelast</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>pbuf</name>-=2</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>pbuf</name>++ = ')'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>pbuf</name> = '\0'</expr>;</expr_stmt>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>structseq_concat</name><parameter_list>(<param><decl><type><name>PyStructSequence</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tup</name></decl>, *<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tup</name> = <call><name>make_tuple</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>PySequence_Concat</name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>structseq_repeat</name><parameter_list>(<param><decl><type><name>PyStructSequence</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tup</name></decl>, *<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tup</name> = <call><name>make_tuple</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>PySequence_Repeat</name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>structseq_contains</name><parameter_list>(<param><decl><type><name>PyStructSequence</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>o</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tup</name> = <call><name>make_tuple</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>tup</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PySequence_Contains</name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>long</name></type>
<name>structseq_hash</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tup</name> = <call><name>make_tuple</name><argument_list>(<argument><expr>(<name>PyStructSequence</name>*) <name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>tup</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>structseq_richcompare</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>o2</name></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tup</name></decl>, *<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tup</name> = <call><name>make_tuple</name><argument_list>(<argument><expr>(<name>PyStructSequence</name>*) <name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>PyObject_RichCompare</name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>structseq_reduce</name><parameter_list>(<param><decl><type><name>PyStructSequence</name>*</type> <name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>tup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>n_fields</name></decl>, <decl><type ref="prev"/><name>n_visible_fields</name></decl>, <decl><type ref="prev"/><name>n_unnamed_fields</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>n_fields</name> = <call><name>REAL_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n_visible_fields</name> = <call><name>VISIBLE_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n_unnamed_fields</name> = <call><name>UNNAMED_FIELDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tup</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr><name>n_visible_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>tup</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>dict</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>dict</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n_visible_fields</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_item</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_item</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<for>for (<init>;</init> <condition><expr><name>i</name> &lt; <name>n_fields</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>n</name> <init>= <expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<name><name>tp_members</name><index>[<expr><name>i</name>-<name>n_unnamed_fields</name></expr>]</index></name>.<name>name</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,
<argument><expr><name><name>self</name>-&gt;<name>ob_item</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>result</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(O(OO))"</expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>structseq_as_sequence</name> <init>= <expr><block>{
<expr>(<name>lenfunc</name>)<name>structseq_length</name></expr>,
<expr>(<name>binaryfunc</name>)<name>structseq_concat</name></expr>,
<expr>(<name>ssizeargfunc</name>)<name>structseq_repeat</name></expr>,
<expr>(<name>ssizeargfunc</name>)<name>structseq_item</name></expr>,
<expr>(<name>ssizessizeargfunc</name>)<name>structseq_slice</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>objobjproc</name>)<name>structseq_contains</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMappingMethods</name></type> <name>structseq_as_mapping</name> <init>= <expr><block>{
<expr>(<name>lenfunc</name>)<name>structseq_length</name></expr>,
<expr>(<name>binaryfunc</name>)<name>structseq_subscript</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>structseq_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"__reduce__"</expr>, <expr>(<name>PyCFunction</name>)<name>structseq_reduce</name></expr>,
<expr><name>METH_NOARGS</name></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>_struct_sequence_template</name> <init>= <expr><block>{
<macro><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument>&amp;PyType_Type</argument>, <argument>0</argument>)</argument_list></macro>
<expr><name>NULL</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>structseq_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>reprfunc</name>)<name>structseq_repr</name></expr>,
<expr>0</expr>,
<expr>&amp;<name>structseq_as_sequence</name></expr>,
<expr>&amp;<name>structseq_as_mapping</name></expr>,
<expr><name>structseq_hash</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name></expr>,
<expr><name>NULL</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>structseq_richcompare</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>structseq_methods</name></expr>,
<expr><name>NULL</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>structseq_new</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type>
<name>PyStructSequence_InitType</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyStructSequence_Desc</name> *</type><name>desc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyMemberDef</name>*</type> <name>members</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_members</name></decl>, <decl><type ref="prev"/><name>n_unnamed_members</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_TRACE_REFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>type</name>-&gt;<name>_ob_next</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>_Py_ForgetReference</name><argument_list>(<argument><expr>(<name>PyObject</name>*)<name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>n_unnamed_members</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>desc</name>-&gt;<name>fields</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name> != <name>NULL</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
<if>if <condition>(<expr><name><name>desc</name>-&gt;<name>fields</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name> == <name>PyStructSequence_UnnamedField</name></expr>)</condition><then>
<expr_stmt><expr><name>n_unnamed_members</name>++</expr>;</expr_stmt></then></if></for>
<expr_stmt><expr><name>n_members</name> = <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>&amp;<name>_struct_sequence_template</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyTypeObject</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>type</name>-&gt;<name>tp_name</name></name> = <name><name>desc</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>type</name>-&gt;<name>tp_doc</name></name> = <name><name>desc</name>-&gt;<name>doc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>type</name>-&gt;<name>tp_basicsize</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>PyStructSequence</name></expr></argument>)</argument_list></sizeof>+
<sizeof>sizeof<argument_list>(<argument><expr><name>PyObject</name>*</expr></argument>)</argument_list></sizeof>*(<name>n_members</name>-1)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>type</name>-&gt;<name>tp_itemsize</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>members</name> = <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>PyMemberDef</name></expr></argument>, <argument><expr><name>n_members</name>-<name>n_unnamed_members</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>members</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<for>for (<init><expr><name>i</name> = <name>k</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n_members</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>desc</name>-&gt;<name>fields</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name> == <name>PyStructSequence_UnnamedField</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name><name>members</name><index>[<expr><name>k</name></expr>]</index></name>.<name>name</name> = <name><name>desc</name>-&gt;<name>fields</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>members</name><index>[<expr><name>k</name></expr>]</index></name>.<name>type</name> = <name>T_OBJECT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>members</name><index>[<expr><name>k</name></expr>]</index></name>.<name>offset</name> = <call><name>offsetof</name><argument_list>(<argument><expr><name>PyStructSequence</name></expr></argument>, <argument><expr><name>ob_item</name></expr></argument>)</argument_list></call>
+ <name>i</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>PyObject</name>*</expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>members</name><index>[<expr><name>k</name></expr>]</index></name>.<name>flags</name> = <name>READONLY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>members</name><index>[<expr><name>k</name></expr>]</index></name>.<name>doc</name> = <name><name>desc</name>-&gt;<name>fields</name><index>[<expr><name>i</name></expr>]</index></name>.<name>doc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name>++</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>members</name><index>[<expr><name>k</name></expr>]</index></name>.<name>name</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>type</name>-&gt;<name>tp_members</name></name> = <name>members</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dict</name> = <name><name>type</name>-&gt;<name>tp_dict</name></name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_DICT_FROM_INT</name><parameter_list>(<param><type><name>key</name></type></param>, <param><type><name>value</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { PyObject *v = PyInt_FromLong((long) value); if (v != NULL) { PyDict_SetItemString(dict, key, v); Py_DECREF(v); } } while (0)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>SET_DICT_FROM_INT</name><argument_list>(<argument><expr><name>visible_length_key</name></expr></argument>, <argument><expr><name><name>desc</name>-&gt;<name>n_in_sequence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DICT_FROM_INT</name><argument_list>(<argument><expr><name>real_length_key</name></expr></argument>, <argument><expr><name>n_members</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DICT_FROM_INT</name><argument_list>(<argument><expr><name>unnamed_fields_key</name></expr></argument>, <argument><expr><name>n_unnamed_members</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
