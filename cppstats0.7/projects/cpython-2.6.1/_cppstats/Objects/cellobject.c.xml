<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Objects/cellobject.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<function><type><name>PyObject</name> *</type>
<name>PyCell_New</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyCellObject</name> *</type><name>op</name></decl>;</decl_stmt>
<expr_stmt><expr><name>op</name> = (<name>PyCellObject</name> *)<call><name>PyObject_GC_New</name><argument_list>(<argument><expr><name>PyCellObject</name></expr></argument>, <argument><expr>&amp;<name>PyCell_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>op</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>op</name>-&gt;<name>ob_ref</name></name> = <name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_PyObject_GC_TRACK</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>op</name></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyCell_Get</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>op</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>PyCell_Check</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr>((<name>PyCellObject</name>*)<name>op</name>)-&gt;<name>ob_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyCell_GET</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyCell_Set</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>op</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>oldobj</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyCell_Check</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>oldobj</name> = <call><name>PyCell_GET</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyCell_SET</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>oldobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cell_dealloc</name><parameter_list>(<param><decl><type><name>PyCellObject</name> *</type><name>op</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>_PyObject_GC_UNTRACK</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>op</name>-&gt;<name>ob_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_GC_Del</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>cell_compare</name><parameter_list>(<param><decl><type><name>PyCellObject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>PyCellObject</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"cell comparisons not supported in 3.x"</expr></argument>,
<argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>-2</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>a</name>-&gt;<name>ob_ref</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>ob_ref</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<return>return <expr>-1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>b</name>-&gt;<name>ob_ref</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if></else></if>
<return>return <expr><call><name>PyObject_Compare</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>ob_ref</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>ob_ref</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cell_repr</name><parameter_list>(<param><decl><type><name>PyCellObject</name> *</type><name>op</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>op</name>-&gt;<name>ob_ref</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr>"&lt;cell at %p: empty&gt;"</expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr>"&lt;cell at %p: %.80s object at %p&gt;"</expr></argument>,
<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>op</name>-&gt;<name>ob_ref</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>,
<argument><expr><name><name>op</name>-&gt;<name>ob_ref</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>cell_traverse</name><parameter_list>(<param><decl><type><name>PyCellObject</name> *</type><name>op</name></decl></param>, <param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>op</name>-&gt;<name>ob_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>cell_clear</name><parameter_list>(<param><decl><type><name>PyCellObject</name> *</type><name>op</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>op</name>-&gt;<name>ob_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cell_get_contents</name><parameter_list>(<param><decl><type><name>PyCellObject</name> *</type><name>op</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>op</name>-&gt;<name>ob_ref</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"Cell is empty"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>op</name>-&gt;<name>ob_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name>-&gt;<name>ob_ref</name></name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>cell_getsetlist</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"cell_contents"</expr>, <expr>(<name>getter</name>)<name>cell_get_contents</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyCell_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"cell"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyCellObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>cell_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>cmpfunc</name>)<name>cell_compare</name></expr>,
<expr>(<name>reprfunc</name>)<name>cell_repr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name></expr>,
<expr>0</expr>,
<expr>(<name>traverseproc</name>)<name>cell_traverse</name></expr>,
<expr>(<name>inquiry</name>)<name>cell_clear</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>cell_getsetlist</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
