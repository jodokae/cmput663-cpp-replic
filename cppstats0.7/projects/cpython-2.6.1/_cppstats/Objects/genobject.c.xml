<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Objects/genobject.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"frameobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"genobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ceval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opcode.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>gen_traverse</name><parameter_list>(<param><decl><type><name>PyGenObject</name> *</type><name>gen</name></decl></param>, <param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name><name>gen</name>-&gt;<name>gi_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>gen</name>-&gt;<name>gi_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>gen_dealloc</name><parameter_list>(<param><decl><type><name>PyGenObject</name> *</type><name>gen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name> <init>= <expr>(<name>PyObject</name> *) <name>gen</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_PyObject_GC_UNTRACK</name><argument_list>(<argument><expr><name>gen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>gen</name>-&gt;<name>gi_weakreflist</name></name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyObject_ClearWeakRefs</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>_PyObject_GC_TRACK</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>gen</name>-&gt;<name>gi_frame</name></name> != <name>NULL</name> &amp;&amp; <name><name>gen</name>-&gt;<name>gi_frame</name>-&gt;<name>f_stacktop</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>gen</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_refcnt</name></name> &gt; 0</expr>)</condition><then>
<return>return;</return></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>_PyObject_GC_UNTRACK</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>gen</name>-&gt;<name>gi_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>gen</name>-&gt;<name>gi_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_GC_Del</name><argument_list>(<argument><expr><name>gen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gen_send_ex</name><parameter_list>(<param><decl><type><name>PyGenObject</name> *</type><name>gen</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>, <param><decl><type><name>int</name></type> <name>exc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyThreadState</name> *</type><name>tstate</name> <init>= <expr><call><name>PyThreadState_GET</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyFrameObject</name> *</type><name>f</name> <init>= <expr><name><name>gen</name>-&gt;<name>gi_frame</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>gen</name>-&gt;<name>gi_running</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"generator already executing"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>f</name>==<name>NULL</name> || <name><name>f</name>-&gt;<name>f_stacktop</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>arg</name> &amp;&amp; !<name>exc</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetNone</name><argument_list>(<argument><expr><name>PyExc_StopIteration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>f</name>-&gt;<name>f_lasti</name></name> == -1</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>arg</name> &amp;&amp; <name>arg</name> != <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"can't send non-None value to a "
"just-started generator"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>result</name> = <name>arg</name> ? <name>arg</name> : <name>Py_None</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(<name><name>f</name>-&gt;<name>f_stacktop</name></name>++) = <name>result</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name><name>tstate</name>-&gt;<name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_back</name></name> == <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_back</name></name> = <name><name>tstate</name>-&gt;<name>frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gen</name>-&gt;<name>gi_running</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>PyEval_EvalFrameEx</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gen</name>-&gt;<name>gi_running</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_back</name></name> == <name><name>tstate</name>-&gt;<name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_back</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> == <name>Py_None</name> &amp;&amp; <name><name>f</name>-&gt;<name>f_stacktop</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>arg</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetNone</name><argument_list>(<argument><expr><name>PyExc_StopIteration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<name>result</name> || <name><name>f</name>-&gt;<name>f_stacktop</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gen</name>-&gt;<name>gi_frame</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>send_doc</name></expr></argument>,
<argument><expr>"send(arg) -&gt; send 'arg' into generator,\n\
return next yielded value or raise StopIteration."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gen_send</name><parameter_list>(<param><decl><type><name>PyGenObject</name> *</type><name>gen</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>gen_send_ex</name><argument_list>(<argument><expr><name>gen</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>close_doc</name></expr></argument>,
<argument><expr>"close(arg) -&gt; raise GeneratorExit inside generator."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gen_close</name><parameter_list>(<param><decl><type><name>PyGenObject</name> *</type><name>gen</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyErr_SetNone</name><argument_list>(<argument><expr><name>PyExc_GeneratorExit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>gen_send_ex</name><argument_list>(<argument><expr><name>gen</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retval</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"generator ignored GeneratorExit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyExc_StopIteration</name></expr></argument>)</argument_list></call>
|| <call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyExc_GeneratorExit</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>gen_del</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>error_type</name></decl>, *<decl><type ref="prev"/><name>error_value</name></decl>, *<decl><type ref="prev"/><name>error_traceback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyGenObject</name> *</type><name>gen</name> <init>= <expr>(<name>PyGenObject</name> *)<name>self</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>gen</name>-&gt;<name>gi_frame</name></name> == <name>NULL</name> || <name><name>gen</name>-&gt;<name>gi_frame</name>-&gt;<name>f_stacktop</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_refcnt</name></name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_refcnt</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_Fetch</name><argument_list>(<argument><expr>&amp;<name>error_type</name></expr></argument>, <argument><expr>&amp;<name>error_value</name></expr></argument>, <argument><expr>&amp;<name>error_traceback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <call><name>gen_close</name><argument_list>(<argument><expr><name>gen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_WriteUnraisable</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>PyErr_Restore</name><argument_list>(<argument><expr><name>error_type</name></expr></argument>, <argument><expr><name>error_value</name></expr></argument>, <argument><expr><name>error_traceback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_refcnt</name></name> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>--<name><name>self</name>-&gt;<name>ob_refcnt</name></name> == 0</expr>)</condition><then>
<return>return;</return></then></if>
<block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>refcnt</name> <init>= <expr><name><name>self</name>-&gt;<name>ob_refcnt</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_Py_NewReference</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_refcnt</name></name> = <name>refcnt</name></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyType_IS_GC</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_type</name></name></expr></argument>)</argument_list></call> &amp;&amp;
<call><name>_Py_AS_GC</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<name><name>gc</name>.<name>gc_refs</name></name> != <name>_PyGC_REFS_UNTRACKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_Py_DEC_REFTOTAL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COUNT_ALLOCS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr>--<name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_frees</name></name></expr>;</expr_stmt>
<expr_stmt><expr>--<name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_allocs</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>throw_doc</name></expr></argument>,
<argument><expr>"throw(typ[,val[,tb]]) -&gt; raise exception in generator,\n\
return next yielded value or raise StopIteration."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gen_throw</name><parameter_list>(<param><decl><type><name>PyGenObject</name> *</type><name>gen</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>typ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"throw"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>typ</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>, <argument><expr>&amp;<name>tb</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>tb</name> == <name>Py_None</name></expr>)</condition><then>
<expr_stmt><expr><name>tb</name> = <name>NULL</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>tb</name> != <name>NULL</name> &amp;&amp; !<call><name>PyTraceBack_Check</name><argument_list>(<argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"throw() third argument must be a traceback object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>typ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyExceptionClass_Check</name><argument_list>(<argument><expr><name>typ</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NormalizeException</name><argument_list>(<argument><expr>&amp;<name>typ</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>, <argument><expr>&amp;<name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr><call><name>PyExceptionInstance_Check</name><argument_list>(<argument><expr><name>typ</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>val</name> &amp;&amp; <name>val</name> != <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"instance exception may not have a separate value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed_throw</name>;</goto>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> = <name>typ</name></expr>;</expr_stmt>
<expr_stmt><expr><name>typ</name> = <call><name>PyExceptionInstance_Class</name><argument_list>(<argument><expr><name>typ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>typ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"exceptions must be classes, or instances, not %s"</expr></argument>,
<argument><expr><name><name>typ</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed_throw</name>;</goto>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>PyErr_Restore</name><argument_list>(<argument><expr><name>typ</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>gen_send_ex</name><argument_list>(<argument><expr><name>gen</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
<label><name>failed_throw</name>:</label>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>typ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gen_iternext</name><parameter_list>(<param><decl><type><name>PyGenObject</name> *</type><name>gen</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>gen_send_ex</name><argument_list>(<argument><expr><name>gen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gen_repr</name><parameter_list>(<param><decl><type><name>PyGenObject</name> *</type><name>gen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>code_name</name></decl>;</decl_stmt>
<expr_stmt><expr><name>code_name</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr>((<name>PyCodeObject</name> *)<name><name>gen</name>-&gt;<name>gi_code</name></name>)-&gt;<name>co_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>code_name</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr>"&lt;generator object %.200s at %p&gt;"</expr></argument>,
<argument><expr><name>code_name</name></expr></argument>, <argument><expr><name>gen</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gen_get_name</name><parameter_list>(<param><decl><type><name>PyGenObject</name> *</type><name>gen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>name</name> <init>= <expr>((<name>PyCodeObject</name> *)<name><name>gen</name>-&gt;<name>gi_code</name></name>)-&gt;<name>co_name</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>name</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>gen__name__doc__</name></expr></argument>,
<argument><expr>"Return the name of the generator's associated code object."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>gen_getsetlist</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"__name__"</expr>, <expr>(<name>getter</name>)<name>gen_get_name</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>gen__name__doc__</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>gen_memberlist</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"gi_frame"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyGenObject</name></expr></argument>, <argument><expr><name>gi_frame</name></expr></argument>)</argument_list></call></expr>, <expr><name>RO</name></expr>}</block></expr>,
<expr><block>{<expr>"gi_running"</expr>, <expr><name>T_INT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyGenObject</name></expr></argument>, <argument><expr><name>gi_running</name></expr></argument>)</argument_list></call></expr>, <expr><name>RO</name></expr>}</block></expr>,
<expr><block>{<expr>"gi_code"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyGenObject</name></expr></argument>, <argument><expr><name>gi_code</name></expr></argument>)</argument_list></call></expr>, <expr><name>RO</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>gen_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"send"</expr>,<expr>(<name>PyCFunction</name>)<name>gen_send</name></expr>, <expr><name>METH_O</name></expr>, <expr><name>send_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"throw"</expr>,<expr>(<name>PyCFunction</name>)<name>gen_throw</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>throw_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"close"</expr>,<expr>(<name>PyCFunction</name>)<name>gen_close</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>close_doc</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyGen_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"generator"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyGenObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>gen_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>reprfunc</name>)<name>gen_repr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name></expr>,
<expr>0</expr>,
<expr>(<name>traverseproc</name>)<name>gen_traverse</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyGenObject</name></expr></argument>, <argument><expr><name>gi_weakreflist</name></expr></argument>)</argument_list></call></expr>,
<expr><name>PyObject_SelfIter</name></expr>,
<expr>(<name>iternextfunc</name>)<name>gen_iternext</name></expr>,
<expr><name>gen_methods</name></expr>,
<expr><name>gen_memberlist</name></expr>,
<expr><name>gen_getsetlist</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>gen_del</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>PyObject</name> *</type>
<name>PyGen_New</name><parameter_list>(<param><decl><type><name>PyFrameObject</name> *</type><name>f</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyGenObject</name> *</type><name>gen</name> <init>= <expr><call><name>PyObject_GC_New</name><argument_list>(<argument><expr><name>PyGenObject</name></expr></argument>, <argument><expr>&amp;<name>PyGen_Type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>gen</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>gen</name>-&gt;<name>gi_frame</name></name> = <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gen</name>-&gt;<name>gi_code</name></name> = <call>(<name>PyObject</name> *)<argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gen</name>-&gt;<name>gi_running</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>gen</name>-&gt;<name>gi_weakreflist</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_PyObject_GC_TRACK</name><argument_list>(<argument><expr><name>gen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>gen</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyGen_NeedsFinalizing</name><parameter_list>(<param><decl><type><name>PyGenObject</name> *</type><name>gen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyFrameObject</name> *</type><name>f</name> <init>= <expr><name><name>gen</name>-&gt;<name>gi_frame</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>f</name> == <name>NULL</name> || <name><name>f</name>-&gt;<name>f_stacktop</name></name> == <name>NULL</name> || <name><name>f</name>-&gt;<name>f_iblock</name></name> &lt;= 0</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>i</name> = <name><name>f</name>-&gt;<name>f_iblock</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr>--<name>i</name> &gt;= 0</expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>f</name>-&gt;<name>f_blockstack</name><index>[<expr><name>i</name></expr>]</index></name>.<name>b_type</name> != <name>SETUP_LOOP</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block></function>
</unit>
