<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Objects/frameobject.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"code.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"frameobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opcode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MIN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<param><type><name>a</name></type></param>, <param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; (b) ? (a) : (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<param><type><name>a</name></type></param>, <param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; (b) ? (a) : (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>offsetof(PyFrameObject, x)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>frame_memberlist</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"f_back"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>f_back</name></expr></argument>)</argument_list></call></expr>, <expr><name>RO</name></expr>}</block></expr>,
<expr><block>{<expr>"f_code"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>f_code</name></expr></argument>)</argument_list></call></expr>, <expr><name>RO</name></expr>}</block></expr>,
<expr><block>{<expr>"f_builtins"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>f_builtins</name></expr></argument>)</argument_list></call></expr>,<expr><name>RO</name></expr>}</block></expr>,
<expr><block>{<expr>"f_globals"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>f_globals</name></expr></argument>)</argument_list></call></expr>, <expr><name>RO</name></expr>}</block></expr>,
<expr><block>{<expr>"f_lasti"</expr>, <expr><name>T_INT</name></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>f_lasti</name></expr></argument>)</argument_list></call></expr>, <expr><name>RO</name></expr>}</block></expr>,
<expr><block>{<expr>"f_exc_type"</expr>, <expr><name>T_OBJECT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>f_exc_type</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr>"f_exc_value"</expr>, <expr><name>T_OBJECT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>f_exc_value</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr>"f_exc_traceback"</expr>, <expr><name>T_OBJECT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>f_exc_traceback</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>frame_getlocals</name><parameter_list>(<param><decl><type><name>PyFrameObject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyFrame_FastToLocals</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_locals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>f</name>-&gt;<name>f_locals</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>frame_getlineno</name><parameter_list>(<param><decl><type><name>PyFrameObject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>lineno</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>f</name>-&gt;<name>f_trace</name></name></expr>)</condition><then>
<expr_stmt><expr><name>lineno</name> = <name><name>f</name>-&gt;<name>f_lineno</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>lineno</name> = <call><name>PyCode_Addr2Line</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_code</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>f_lasti</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>frame_setlineno</name><parameter_list>(<param><decl><type><name>PyFrameObject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>p_new_lineno</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>new_lineno</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_lasti</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_iblock</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>code</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>code_len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>lnotab</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>lnotab_len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>addr</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_addr</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_addr</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delta_iblock</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_delta_iblock</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_iblock</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_lasti_setup_addr</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_lasti_setup_addr</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>blockstack</name><index>[<expr><name>CO_MAXBLOCKS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>in_finally</name><index>[<expr><name>CO_MAXBLOCKS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blockstack_top</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>setup_op</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyInt_Check</name><argument_list>(<argument><expr><name>p_new_lineno</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"lineno must be an integer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>f</name>-&gt;<name>f_trace</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"f_lineno can only be set by a trace function"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>new_lineno</name> = (<name>int</name>) <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>p_new_lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>new_lineno</name> &lt; <name><name>f</name>-&gt;<name>f_code</name>-&gt;<name>co_firstlineno</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"line %d comes before the current code block"</expr></argument>,
<argument><expr><name>new_lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyString_AsStringAndSize</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_code</name>-&gt;<name>co_lnotab</name></name></expr></argument>, <argument><expr>&amp;<name>lnotab</name></expr></argument>, <argument><expr>&amp;<name>lnotab_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> = <name><name>f</name>-&gt;<name>f_code</name>-&gt;<name>co_firstlineno</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_lasti</name> = -1</expr>;</expr_stmt>
<for>for (<init><expr><name>offset</name> = 0</expr>;</init> <condition><expr><name>offset</name> &lt; <name>lnotab_len</name></expr>;</condition> <incr><expr><name>offset</name> += 2</expr></incr>) <block>{
<expr_stmt><expr><name>addr</name> += <name><name>lnotab</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> += <name><name>lnotab</name><index>[<expr><name>offset</name>+1</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>line</name> &gt;= <name>new_lineno</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>new_lasti</name> = <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_lineno</name> = <name>line</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>new_lasti</name> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"line %d comes after the current code block"</expr></argument>,
<argument><expr><name>new_lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyString_AsStringAndSize</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_code</name>-&gt;<name>co_code</name></name></expr></argument>, <argument><expr>(<name>char</name> **)&amp;<name>code</name></expr></argument>, <argument><expr>&amp;<name>code_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>min_addr</name> = <call><name>MIN</name><argument_list>(<argument><expr><name>new_lasti</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>f_lasti</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>max_addr</name> = <call><name>MAX</name><argument_list>(<argument><expr><name>new_lasti</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>f_lasti</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>code</name><index>[<expr><name>new_lasti</name></expr>]</index></name> == <name>DUP_TOP</name> || <name><name>code</name><index>[<expr><name>new_lasti</name></expr>]</index></name> == <name>POP_TOP</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"can't jump to 'except' line as there's no exception"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>f_lasti_setup_addr</name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name>new_lasti_setup_addr</name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>blockstack</name></expr></argument>, <argument><expr>'\0'</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>blockstack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>in_finally</name></expr></argument>, <argument><expr>'\0'</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>in_finally</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blockstack_top</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>addr</name> = 0</expr>;</init> <condition><expr><name>addr</name> &lt; <name>code_len</name></expr>;</condition> <incr><expr><name>addr</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>op</name> <init>= <expr><name><name>code</name><index>[<expr><name>addr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{
<case>case <expr><name>SETUP_LOOP</name></expr>:
</case><case>case <expr><name>SETUP_EXCEPT</name></expr>:
</case><case>case <expr><name>SETUP_FINALLY</name></expr>:
<expr_stmt><expr><name><name>blockstack</name><index>[<expr><name>blockstack_top</name>++</expr>]</index></name> = <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in_finally</name><index>[<expr><name>blockstack_top</name>-1</expr>]</index></name> = 0</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>POP_BLOCK</name></expr>:
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>blockstack_top</name> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>setup_op</name> = <name><name>code</name><index>[<expr><name><name>blockstack</name><index>[<expr><name>blockstack_top</name>-1</expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>setup_op</name> == <name>SETUP_FINALLY</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>in_finally</name><index>[<expr><name>blockstack_top</name>-1</expr>]</index></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>blockstack_top</name>--</expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>END_FINALLY</name></expr>:
<if>if <condition>(<expr><name>blockstack_top</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>setup_op</name> = <name><name>code</name><index>[<expr><name><name>blockstack</name><index>[<expr><name>blockstack_top</name>-1</expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>setup_op</name> == <name>SETUP_FINALLY</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>blockstack_top</name>--</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<break>break;</break>
</case>}</block></switch>
<if>if <condition>(<expr><name>addr</name> == <name>new_lasti</name> || <name>addr</name> == <name><name>f</name>-&gt;<name>f_lasti</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>setup_addr</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = <name>blockstack_top</name>-1</expr>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>in_finally</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>setup_addr</name> = <name><name>blockstack</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>setup_addr</name> != -1</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>addr</name> == <name>new_lasti</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>new_lasti_setup_addr</name> = <name>setup_addr</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>addr</name> == <name><name>f</name>-&gt;<name>f_lasti</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>f_lasti_setup_addr</name> = <name>setup_addr</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>op</name> &gt;= <name>HAVE_ARGUMENT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>addr</name> += 2</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>blockstack_top</name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>new_lasti_setup_addr</name> != <name>f_lasti_setup_addr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"can't jump into or out of a 'finally' block"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>delta_iblock</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>addr</name> = <name>min_addr</name></expr>;</init> <condition><expr><name>addr</name> &lt; <name>max_addr</name></expr>;</condition> <incr><expr><name>addr</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>op</name> <init>= <expr><name><name>code</name><index>[<expr><name>addr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{
<case>case <expr><name>SETUP_LOOP</name></expr>:
</case><case>case <expr><name>SETUP_EXCEPT</name></expr>:
</case><case>case <expr><name>SETUP_FINALLY</name></expr>:
<expr_stmt><expr><name>delta_iblock</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>POP_BLOCK</name></expr>:
<expr_stmt><expr><name>delta_iblock</name>--</expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
<expr_stmt><expr><name>min_delta_iblock</name> = <call><name>MIN</name><argument_list>(<argument><expr><name>min_delta_iblock</name></expr></argument>, <argument><expr><name>delta_iblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>op</name> &gt;= <name>HAVE_ARGUMENT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>addr</name> += 2</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name>min_iblock</name> = <name><name>f</name>-&gt;<name>f_iblock</name></name> + <name>min_delta_iblock</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>new_lasti</name> &gt; <name><name>f</name>-&gt;<name>f_lasti</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>new_iblock</name> = <name><name>f</name>-&gt;<name>f_iblock</name></name> + <name>delta_iblock</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>new_iblock</name> = <name><name>f</name>-&gt;<name>f_iblock</name></name> - <name>delta_iblock</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>new_iblock</name> &gt; <name>min_iblock</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"can't jump into the middle of a block"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><name><name>f</name>-&gt;<name>f_iblock</name></name> &gt; <name>new_iblock</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>PyTryBlock</name> *</type><name>b</name> <init>= <expr>&amp;<name><name>f</name>-&gt;<name>f_blockstack</name><index>[<expr>--<name><name>f</name>-&gt;<name>f_iblock</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>(<name><name>f</name>-&gt;<name>f_stacktop</name></name> - <name><name>f</name>-&gt;<name>f_valuestack</name></name>) &gt; <name><name>b</name>-&gt;<name>b_level</name></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr>(*--<name><name>f</name>-&gt;<name>f_stacktop</name></name>)</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></while>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_lineno</name></name> = <name>new_lineno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_lasti</name></name> = <name>new_lasti</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>frame_gettrace</name><parameter_list>(<param><decl><type><name>PyFrameObject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>trace</name> <init>= <expr><name><name>f</name>-&gt;<name>f_trace</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>trace</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>trace</name> = <name>Py_None</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>trace</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>frame_settrace</name><parameter_list>(<param><decl><type><name>PyFrameObject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>old_value</name> <init>= <expr><name><name>f</name>-&gt;<name>f_trace</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_trace</name></name> = <name>v</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_lineno</name></name> = <call><name>PyCode_Addr2Line</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_code</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>f_lasti</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>old_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>frame_getrestricted</name><parameter_list>(<param><decl><type><name>PyFrameObject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyBool_FromLong</name><argument_list>(<argument><expr><call><name>PyFrame_IsRestricted</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>frame_getsetlist</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"f_locals"</expr>, <expr>(<name>getter</name>)<name>frame_getlocals</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{
<expr>"f_lineno"</expr>, <expr>(<name>getter</name>)<name>frame_getlineno</name></expr>,
<expr>(<name>setter</name>)<name>frame_setlineno</name></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{<expr>"f_trace"</expr>, <expr>(<name>getter</name>)<name>frame_gettrace</name></expr>, <expr>(<name>setter</name>)<name>frame_settrace</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"f_restricted"</expr>,<expr>(<name>getter</name>)<name>frame_getrestricted</name></expr>,<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyFrameObject</name> *</type><name>free_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>numfree</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyFrame_MAXFREELIST</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>frame_dealloc</name><parameter_list>(<param><decl><type><name>PyFrameObject</name> *</type><name>f</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> **</type><name>p</name></decl>, **<decl><type ref="prev"/><name>valuestack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyCodeObject</name> *</type><name>co</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>Py_TRASHCAN_SAFE_BEGIN</name><argument_list>(<argument>f</argument>)</argument_list></macro>
<expr_stmt><expr><name>valuestack</name> = <name><name>f</name>-&gt;<name>f_valuestack</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>p</name> = <name><name>f</name>-&gt;<name>f_localsplus</name></name></expr>;</init> <condition><expr><name>p</name> &lt; <name>valuestack</name></expr>;</condition> <incr><expr><name>p</name>++</expr></incr>)
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<if>if <condition>(<expr><name><name>f</name>-&gt;<name>f_stacktop</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>p</name> = <name>valuestack</name></expr>;</init> <condition><expr><name>p</name> &lt; <name><name>f</name>-&gt;<name>f_stacktop</name></name></expr>;</condition> <incr><expr><name>p</name>++</expr></incr>)
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
}</block></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_back</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_builtins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_globals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_locals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_trace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_exc_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_exc_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_exc_traceback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>co</name> = <name><name>f</name>-&gt;<name>f_code</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>co</name>-&gt;<name>co_zombieframe</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>co</name>-&gt;<name>co_zombieframe</name></name> = <name>f</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>numfree</name> &lt; <name>PyFrame_MAXFREELIST</name></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>numfree</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_back</name></name> = <name>free_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>free_list</name> = <name>f</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><call><name>PyObject_GC_Del</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>Py_TRASHCAN_SAFE_END</name><argument_list>(<argument>f</argument>)</argument_list></macro>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>frame_traverse</name><parameter_list>(<param><decl><type><name>PyFrameObject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> **</type><name>fastlocals</name></decl>, **<decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>slots</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_back</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_builtins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_globals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_locals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_trace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_exc_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_exc_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_exc_traceback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slots</name> = <name><name>f</name>-&gt;<name>f_code</name>-&gt;<name>co_nlocals</name></name> + <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_code</name>-&gt;<name>co_cellvars</name></name></expr></argument>)</argument_list></call> + <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_code</name>-&gt;<name>co_freevars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fastlocals</name> = <name><name>f</name>-&gt;<name>f_localsplus</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = <name>slots</name></expr>;</init> <condition><expr>--<name>i</name> &gt;= 0</expr>;</condition> <incr><expr>++<name>fastlocals</name></expr></incr>)
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr>*<name>fastlocals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<if>if <condition>(<expr><name><name>f</name>-&gt;<name>f_stacktop</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>p</name> = <name><name>f</name>-&gt;<name>f_valuestack</name></name></expr>;</init> <condition><expr><name>p</name> &lt; <name><name>f</name>-&gt;<name>f_stacktop</name></name></expr>;</condition> <incr><expr><name>p</name>++</expr></incr>)
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>frame_clear</name><parameter_list>(<param><decl><type><name>PyFrameObject</name> *</type><name>f</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> **</type><name>fastlocals</name></decl>, **<decl><type ref="prev"/><name>p</name></decl>, **<decl><type ref="prev"/><name>oldtop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>slots</name></decl>;</decl_stmt>
<expr_stmt><expr><name>oldtop</name> = <name><name>f</name>-&gt;<name>f_stacktop</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_stacktop</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_exc_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_exc_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_exc_traceback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_trace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slots</name> = <name><name>f</name>-&gt;<name>f_code</name>-&gt;<name>co_nlocals</name></name> + <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_code</name>-&gt;<name>co_cellvars</name></name></expr></argument>)</argument_list></call> + <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_code</name>-&gt;<name>co_freevars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fastlocals</name> = <name><name>f</name>-&gt;<name>f_localsplus</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = <name>slots</name></expr>;</init> <condition><expr>--<name>i</name> &gt;= 0</expr>;</condition> <incr><expr>++<name>fastlocals</name></expr></incr>)
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr>*<name>fastlocals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<if>if <condition>(<expr><name>oldtop</name> != <name>NULL</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>p</name> = <name><name>f</name>-&gt;<name>f_valuestack</name></name></expr>;</init> <condition><expr><name>p</name> &lt; <name>oldtop</name></expr>;</condition> <incr><expr><name>p</name>++</expr></incr>)
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>frame_sizeof</name><parameter_list>(<param><decl><type><name>PyFrameObject</name> *</type><name>f</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>extras</name></decl>, <decl><type ref="prev"/><name>ncells</name></decl>, <decl><type ref="prev"/><name>nfrees</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ncells</name> = <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_code</name>-&gt;<name>co_cellvars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nfrees</name> = <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_code</name>-&gt;<name>co_freevars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extras</name> = <name><name>f</name>-&gt;<name>f_code</name>-&gt;<name>co_stacksize</name></name> + <name><name>f</name>-&gt;<name>f_code</name>-&gt;<name>co_nlocals</name></name> +
<name>ncells</name> + <name>nfrees</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>PyFrameObject</name></expr></argument>)</argument_list></sizeof> + (<name>extras</name>-1) * <sizeof>sizeof<argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<return>return <expr><call><name>PyInt_FromSsize_t</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>sizeof__doc__</name></expr></argument>,
<argument><expr>"F.__sizeof__() -&gt; size of F in memory, in bytes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>frame_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"__sizeof__"</expr>, <expr>(<name>PyCFunction</name>)<name>frame_sizeof</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr><name>sizeof__doc__</name></expr>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyFrame_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"frame"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyFrameObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></sizeof></expr>,
<expr>(<name>destructor</name>)<name>frame_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr><name>PyObject_GenericSetAttr</name></expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name></expr>,
<expr>0</expr>,
<expr>(<name>traverseproc</name>)<name>frame_traverse</name></expr>,
<expr>(<name>inquiry</name>)<name>frame_clear</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>frame_methods</name></expr>,
<expr><name>frame_memberlist</name></expr>,
<expr><name>frame_getsetlist</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>builtin_object</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>_PyFrame_Init</name><parameter_list>()</parameter_list> <block>{
<expr_stmt><expr><name>builtin_object</name> = <call><name>PyString_InternFromString</name><argument_list>(<argument><expr>"__builtins__"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>builtin_object</name> != <name>NULL</name>)</expr>;</return>
}</block></function>
<function><type><name>PyFrameObject</name> *</type>
<name>PyFrame_New</name><parameter_list>(<param><decl><type><name>PyThreadState</name> *</type><name>tstate</name></decl></param>, <param><decl><type><name>PyCodeObject</name> *</type><name>code</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>globals</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>locals</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyFrameObject</name> *</type><name>back</name> <init>= <expr><name><name>tstate</name>-&gt;<name>frame</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyFrameObject</name> *</type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>builtins</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>code</name> == <name>NULL</name> || <name>globals</name> == <name>NULL</name> || !<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>globals</name></expr></argument>)</argument_list></call> ||
(<name>locals</name> != <name>NULL</name> &amp;&amp; !<call><name>PyMapping_Check</name><argument_list>(<argument><expr><name>locals</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>back</name> == <name>NULL</name> || <name><name>back</name>-&gt;<name>f_globals</name></name> != <name>globals</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>builtins</name> = <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>globals</name></expr></argument>, <argument><expr><name>builtin_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>builtins</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyModule_Check</name><argument_list>(<argument><expr><name>builtins</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>builtins</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>builtins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>!<name>builtins</name> || <call><name>PyDict_Check</name><argument_list>(<argument><expr><name>builtins</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>builtins</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>builtins</name> = <name>NULL</name></expr>;</expr_stmt></then></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>builtins</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>builtins</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>builtins</name> == <name>NULL</name> ||
<call><name>PyDict_SetItemString</name><argument_list>(
<argument><expr><name>builtins</name></expr></argument>, <argument><expr>"None"</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then> <else>else
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>builtins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>builtins</name> = <name><name>back</name>-&gt;<name>f_builtins</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>builtins</name> != <name>NULL</name> &amp;&amp; <call><name>PyDict_Check</name><argument_list>(<argument><expr><name>builtins</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>builtins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>code</name>-&gt;<name>co_zombieframe</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>f</name> = <name><name>code</name>-&gt;<name>co_zombieframe</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>code</name>-&gt;<name>co_zombieframe</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_Py_NewReference</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_code</name></name> == <name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>extras</name></decl>, <decl><type ref="prev"/><name>ncells</name></decl>, <decl><type ref="prev"/><name>nfrees</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ncells</name> = <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name><name>code</name>-&gt;<name>co_cellvars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nfrees</name> = <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name><name>code</name>-&gt;<name>co_freevars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extras</name> = <name><name>code</name>-&gt;<name>co_stacksize</name></name> + <name><name>code</name>-&gt;<name>co_nlocals</name></name> + <name>ncells</name> +
<name>nfrees</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>free_list</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>f</name> = <call><name>PyObject_GC_NewVar</name><argument_list>(<argument><expr><name>PyFrameObject</name></expr></argument>, <argument><expr>&amp;<name>PyFrame_Type</name></expr></argument>,
<argument><expr><name>extras</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>f</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>builtins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>numfree</name> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>--<name>numfree</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> = <name>free_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>free_list</name> = <name><name>free_list</name>-&gt;<name>f_back</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> &lt; <name>extras</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>f</name> = <call><name>PyObject_GC_Resize</name><argument_list>(<argument><expr><name>PyFrameObject</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>extras</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>f</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>builtins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>_Py_NewReference</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_code</name></name> = <name>code</name></expr>;</expr_stmt>
<expr_stmt><expr><name>extras</name> = <name><name>code</name>-&gt;<name>co_nlocals</name></name> + <name>ncells</name> + <name>nfrees</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_valuestack</name></name> = <name><name>f</name>-&gt;<name>f_localsplus</name></name> + <name>extras</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>extras</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_localsplus</name><index>[<expr><name>i</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt></for>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_locals</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_trace</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_exc_type</name></name> = <name><name>f</name>-&gt;<name>f_exc_value</name></name> = <name><name>f</name>-&gt;<name>f_exc_traceback</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_stacktop</name></name> = <name><name>f</name>-&gt;<name>f_valuestack</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_builtins</name></name> = <name>builtins</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_back</name></name> = <name>back</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>globals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_globals</name></name> = <name>globals</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>code</name>-&gt;<name>co_flags</name></name> &amp; (<name>CO_NEWLOCALS</name> | <name>CO_OPTIMIZED</name>)) ==
(<name>CO_NEWLOCALS</name> | <name>CO_OPTIMIZED</name>)</expr>)</condition><then>
<empty_stmt>;</empty_stmt></then>
<else>else <if>if <condition>(<expr><name><name>code</name>-&gt;<name>co_flags</name></name> &amp; <name>CO_NEWLOCALS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>locals</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>locals</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_locals</name></name> = <name>locals</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>locals</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>locals</name> = <name>globals</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>locals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_locals</name></name> = <name>locals</name></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_tstate</name></name> = <name>tstate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_lasti</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_lineno</name></name> = <name><name>code</name>-&gt;<name>co_firstlineno</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>f_iblock</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>_PyObject_GC_TRACK</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>f</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>PyFrame_BlockSetup</name><parameter_list>(<param><decl><type><name>PyFrameObject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>int</name></type> <name>type</name></decl></param>, <param><decl><type><name>int</name></type> <name>handler</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyTryBlock</name> *</type><name>b</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>f</name>-&gt;<name>f_iblock</name></name> &gt;= <name>CO_MAXBLOCKS</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"XXX block stack overflow"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>b</name> = &amp;<name><name>f</name>-&gt;<name>f_blockstack</name><index>[<expr><name><name>f</name>-&gt;<name>f_iblock</name></name>++</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>b_type</name></name> = <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>b_level</name></name> = <name>level</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>b_handler</name></name> = <name>handler</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>PyTryBlock</name> *</type>
<name>PyFrame_BlockPop</name><parameter_list>(<param><decl><type><name>PyFrameObject</name> *</type><name>f</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyTryBlock</name> *</type><name>b</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>f</name>-&gt;<name>f_iblock</name></name> &lt;= 0</expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"XXX block stack underflow"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>b</name> = &amp;<name><name>f</name>-&gt;<name>f_blockstack</name><index>[<expr>--<name><name>f</name>-&gt;<name>f_iblock</name></name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>map_to_dict</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>map</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>nmap</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>dict</name></decl></param>, <param><decl><type><name>PyObject</name> **</type><name>values</name></decl></param>,
<param><decl><type><name>int</name></type> <name>deref</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyDict_Check</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call> &gt;= <name>nmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = <name>nmap</name></expr>;</init> <condition><expr>--<name>j</name> &gt;= 0</expr>;</condition> <incr/>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name> <init>= <expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>value</name> <init>= <expr><name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>deref</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyCell_Check</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <call><name>PyCell_GET</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>value</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyObject_DelItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>PyObject_SetItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dict_to_map</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>map</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>nmap</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>dict</name></decl></param>, <param><decl><type><name>PyObject</name> **</type><name>values</name></decl></param>,
<param><decl><type><name>int</name></type> <name>deref</name></decl></param>, <param><decl><type><name>int</name></type> <name>clear</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyDict_Check</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call> &gt;= <name>nmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = <name>nmap</name></expr>;</init> <condition><expr>--<name>j</name> &gt;= 0</expr>;</condition> <incr/>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name> <init>= <expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>value</name> <init>= <expr><call><name>PyObject_GetItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>value</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>clear</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>deref</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyCell_Check</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyCell_GET</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> != <name>value</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyCell_Set</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>values</name><index>[<expr><name>j</name></expr>]</index></name> != <name>value</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>values</name><index>[<expr><name>j</name></expr>]</index></name> = <name>value</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></function>
<function><type><name>void</name></type>
<name>PyFrame_FastToLocals</name><parameter_list>(<param><decl><type><name>PyFrameObject</name> *</type><name>f</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>locals</name></decl>, *<decl><type ref="prev"/><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> **</type><name>fast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>error_type</name></decl>, *<decl><type ref="prev"/><name>error_value</name></decl>, *<decl><type ref="prev"/><name>error_traceback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyCodeObject</name> *</type><name>co</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ncells</name></decl>, <decl><type ref="prev"/><name>nfreevars</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>f</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>locals</name> = <name><name>f</name>-&gt;<name>f_locals</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>locals</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>locals</name> = <name><name>f</name>-&gt;<name>f_locals</name></name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>locals</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>co</name> = <name><name>f</name>-&gt;<name>f_code</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>map</name> = <name><name>co</name>-&gt;<name>co_varnames</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>PyErr_Fetch</name><argument_list>(<argument><expr>&amp;<name>error_type</name></expr></argument>, <argument><expr>&amp;<name>error_value</name></expr></argument>, <argument><expr>&amp;<name>error_traceback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fast</name> = <name><name>f</name>-&gt;<name>f_localsplus</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> = <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>j</name> &gt; <name><name>co</name>-&gt;<name>co_nlocals</name></name></expr>)</condition><then>
<expr_stmt><expr><name>j</name> = <name><name>co</name>-&gt;<name>co_nlocals</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>co</name>-&gt;<name>co_nlocals</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>map_to_dict</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>locals</name></expr></argument>, <argument><expr><name>fast</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>ncells</name> = <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_cellvars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nfreevars</name> = <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_freevars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ncells</name> || <name>nfreevars</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>map_to_dict</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_cellvars</name></name></expr></argument>, <argument><expr><name>ncells</name></expr></argument>,
<argument><expr><name>locals</name></expr></argument>, <argument><expr><name>fast</name> + <name><name>co</name>-&gt;<name>co_nlocals</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>co</name>-&gt;<name>co_flags</name></name> &amp; <name>CO_OPTIMIZED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>map_to_dict</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_freevars</name></name></expr></argument>, <argument><expr><name>nfreevars</name></expr></argument>,
<argument><expr><name>locals</name></expr></argument>, <argument><expr><name>fast</name> + <name><name>co</name>-&gt;<name>co_nlocals</name></name> + <name>ncells</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>PyErr_Restore</name><argument_list>(<argument><expr><name>error_type</name></expr></argument>, <argument><expr><name>error_value</name></expr></argument>, <argument><expr><name>error_traceback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>PyFrame_LocalsToFast</name><parameter_list>(<param><decl><type><name>PyFrameObject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>int</name></type> <name>clear</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>locals</name></decl>, *<decl><type ref="prev"/><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> **</type><name>fast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>error_type</name></decl>, *<decl><type ref="prev"/><name>error_value</name></decl>, *<decl><type ref="prev"/><name>error_traceback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyCodeObject</name> *</type><name>co</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ncells</name></decl>, <decl><type ref="prev"/><name>nfreevars</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>f</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>locals</name> = <name><name>f</name>-&gt;<name>f_locals</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>co</name> = <name><name>f</name>-&gt;<name>f_code</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>map</name> = <name><name>co</name>-&gt;<name>co_varnames</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>locals</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>PyErr_Fetch</name><argument_list>(<argument><expr>&amp;<name>error_type</name></expr></argument>, <argument><expr>&amp;<name>error_value</name></expr></argument>, <argument><expr>&amp;<name>error_traceback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fast</name> = <name><name>f</name>-&gt;<name>f_localsplus</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> = <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>j</name> &gt; <name><name>co</name>-&gt;<name>co_nlocals</name></name></expr>)</condition><then>
<expr_stmt><expr><name>j</name> = <name><name>co</name>-&gt;<name>co_nlocals</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>co</name>-&gt;<name>co_nlocals</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>dict_to_map</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_varnames</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>locals</name></expr></argument>, <argument><expr><name>fast</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>ncells</name> = <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_cellvars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nfreevars</name> = <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_freevars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ncells</name> || <name>nfreevars</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dict_to_map</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_cellvars</name></name></expr></argument>, <argument><expr><name>ncells</name></expr></argument>,
<argument><expr><name>locals</name></expr></argument>, <argument><expr><name>fast</name> + <name><name>co</name>-&gt;<name>co_nlocals</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>co</name>-&gt;<name>co_flags</name></name> &amp; <name>CO_OPTIMIZED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dict_to_map</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_freevars</name></name></expr></argument>, <argument><expr><name>nfreevars</name></expr></argument>,
<argument><expr><name>locals</name></expr></argument>, <argument><expr><name>fast</name> + <name><name>co</name>-&gt;<name>co_nlocals</name></name> + <name>ncells</name></expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><name>clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>PyErr_Restore</name><argument_list>(<argument><expr><name>error_type</name></expr></argument>, <argument><expr><name>error_value</name></expr></argument>, <argument><expr><name>error_traceback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type>
<name>PyFrame_ClearFreeList</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>freelist_size</name> <init>= <expr><name>numfree</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>free_list</name> != <name>NULL</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>PyFrameObject</name> *</type><name>f</name> <init>= <expr><name>free_list</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>free_list</name> = <name><name>free_list</name>-&gt;<name>f_back</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_GC_Del</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>--<name>numfree</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>numfree</name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>freelist_size</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>PyFrame_Fini</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>(<name>void</name>)<call><name>PyFrame_ClearFreeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>builtin_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>builtin_object</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></function>
</unit>
