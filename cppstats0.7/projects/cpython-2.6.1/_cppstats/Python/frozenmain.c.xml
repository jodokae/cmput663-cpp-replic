<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Python/frozenmain.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>PyWinFreeze_ExeInit</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>PyWinFreeze_ExeTerm</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>PyInitFrozenExtensions</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name></type>
<name>Py_FrozenMain</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>sts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inspect</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>unbuffered</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Py_FrozenFlag</name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>p</name> = <call><name>Py_GETENV</name><argument_list>(<argument><expr>"PYTHONINSPECT"</expr></argument>)</argument_list></call>) &amp;&amp; *<name>p</name> != '\0'</expr>)</condition><then>
<expr_stmt><expr><name>inspect</name> = 1</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>p</name> = <call><name>Py_GETENV</name><argument_list>(<argument><expr>"PYTHONUNBUFFERED"</expr></argument>)</argument_list></call>) &amp;&amp; *<name>p</name> != '\0'</expr>)</condition><then>
<expr_stmt><expr><name>unbuffered</name> = 1</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>unbuffered</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>setbuf</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setbuf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setbuf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyInitFrozenExtensions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>Py_SetProgramName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_Initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyWinFreeze_ExeInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>Py_VerboseFlag</name></expr>)</condition><then>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Python %s\n%s\n"</expr></argument>,
<argument><expr><call><name>Py_GetVersion</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>Py_GetCopyright</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>PySys_SetArgv</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = <call><name>PyImport_ImportFrozenModule</name><argument_list>(<argument><expr>"__main__"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> == 0</expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"__main__ not frozen"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>n</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sts</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>sts</name> = 0</expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>inspect</name> &amp;&amp; <call><name>isatty</name><argument_list>(<argument><expr>(<name>int</name>)<call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>sts</name> = <call><name>PyRun_AnyFile</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>, <argument><expr>"&lt;stdin&gt;"</expr></argument>)</argument_list></call> != 0</expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyWinFreeze_ExeTerm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>Py_Finalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>sts</name></expr>;</return>
}</block></function>
</unit>
