<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Python/traceback.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"code.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"frameobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"osdefs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"traceback.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>offsetof(PyTracebackObject, x)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>memberlist</name></type> <name><name>tb_memberlist</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"tb_next"</expr>, <expr><name>T_OBJECT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>tb_next</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr>"tb_frame"</expr>, <expr><name>T_OBJECT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>tb_frame</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr>"tb_lasti"</expr>, <expr><name>T_INT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>tb_lasti</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr>"tb_lineno"</expr>, <expr><name>T_INT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>tb_lineno</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>tb_getattr</name><parameter_list>(<param><decl><type><name>PyTracebackObject</name> *</type><name>tb</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyMember_Get</name><argument_list>(<argument><expr>(<name>char</name> *)<name>tb</name></expr></argument>, <argument><expr><name>tb_memberlist</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tb_dealloc</name><parameter_list>(<param><decl><type><name>PyTracebackObject</name> *</type><name>tb</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>Py_TRASHCAN_SAFE_BEGIN</name><argument_list>(<argument>tb</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>tb</name>-&gt;<name>tb_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>tb</name>-&gt;<name>tb_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_GC_Del</name><argument_list>(<argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>Py_TRASHCAN_SAFE_END</name><argument_list>(<argument>tb</argument>)</argument_list></macro>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>tb_traverse</name><parameter_list>(<param><decl><type><name>PyTracebackObject</name> *</type><name>tb</name></decl></param>, <param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>tb</name>-&gt;<name>tb_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>tb</name>-&gt;<name>tb_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tb_clear</name><parameter_list>(<param><decl><type><name>PyTracebackObject</name> *</type><name>tb</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>tb</name>-&gt;<name>tb_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>tb</name>-&gt;<name>tb_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyTraceBack_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"traceback"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyTracebackObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>tb_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)<name>tb_getattr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name></expr>,
<expr>0</expr>,
<expr>(<name>traverseproc</name>)<name>tb_traverse</name></expr>,
<expr>(<name>inquiry</name>)<name>tb_clear</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyTracebackObject</name> *</type>
<name>newtracebackobject</name><parameter_list>(<param><decl><type><name>PyTracebackObject</name> *</type><name>next</name></decl></param>, <param><decl><type><name>PyFrameObject</name> *</type><name>frame</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyTracebackObject</name> *</type><name>tb</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>next</name> != <name>NULL</name> &amp;&amp; !<call><name>PyTraceBack_Check</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call>) ||
<name>frame</name> == <name>NULL</name> || !<call><name>PyFrame_Check</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>tb</name> = <call><name>PyObject_GC_New</name><argument_list>(<argument><expr><name>PyTracebackObject</name></expr></argument>, <argument><expr>&amp;<name>PyTraceBack_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tb</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name>-&gt;<name>tb_next</name></name> = <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name>-&gt;<name>tb_frame</name></name> = <name>frame</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name>-&gt;<name>tb_lasti</name></name> = <name><name>frame</name>-&gt;<name>f_lasti</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name>-&gt;<name>tb_lineno</name></name> = <call><name>PyCode_Addr2Line</name><argument_list>(<argument><expr><name><name>frame</name>-&gt;<name>f_code</name></name></expr></argument>,
<argument><expr><name><name>frame</name>-&gt;<name>f_lasti</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_GC_Track</name><argument_list>(<argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>tb</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyTraceBack_Here</name><parameter_list>(<param><decl><type><name>PyFrameObject</name> *</type><name>frame</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyThreadState</name> *</type><name>tstate</name> <init>= <expr><call><name>PyThreadState_GET</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTracebackObject</name> *</type><name>oldtb</name> <init>= <expr>(<name>PyTracebackObject</name> *) <name><name>tstate</name>-&gt;<name>curexc_traceback</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTracebackObject</name> *</type><name>tb</name> <init>= <expr><call><name>newtracebackobject</name><argument_list>(<argument><expr><name>oldtb</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>tb</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>curexc_traceback</name></name> = (<name>PyObject</name> *)<name>tb</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>oldtb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>_Py_DisplaySourceLine</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>f</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>indent</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> *</type><name>xfp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>linebuf</name><index>[<expr>2000</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>namebuf</name><index>[<expr><name>MAXPATHLEN</name>+1</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>filename</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT</name></cpp:macro> <cpp:value>" File \"%.500s\", line %d, in %.500s\n"</cpp:value></cpp:define>
<expr_stmt><expr><name>xfp</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr>"r" <name>PY_STDIOTEXTMODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>xfp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tail</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>SEP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>tail</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>tail</name> = <name>filename</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>tail</name>++</expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>path</name> = <call><name>PySys_GetObject</name><argument_list>(<argument><expr>"path"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>path</name> != <name>NULL</name> &amp;&amp; <call><name>PyList_Check</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>_npath</name> <init>= <expr><call><name>PyList_Size</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>npath</name> <init>= <expr><call><name>Py_SAFE_DOWNCAST</name><argument_list>(<argument><expr><name>_npath</name></expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>taillen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>npath</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> = <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> + 1 + <name>taillen</name> &gt;= <name>MAXPATHLEN</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>, <argument><expr><call><name>PyString_AsString</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>)</argument_list></call> != <name>len</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name>len</name> &gt; 0 &amp;&amp; <name><name>namebuf</name><index>[<expr><name>len</name>-1</expr>]</index></name> != <name>SEP</name></expr>)</condition><then>
<expr_stmt><expr><name><name>namebuf</name><index>[<expr><name>len</name>++</expr>]</index></name> = <name>SEP</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>namebuf</name>+<name>len</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xfp</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>, <argument><expr>"r" <name>PY_STDIOTEXTMODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>xfp</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>filename</name> = <name>namebuf</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></then></if>
}</block></for>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>xfp</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>err</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>xfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>lineno</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name>*</type> <name>pLastChar</name> <init>= <expr>&amp;<name><name>linebuf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>linebuf</name></expr></argument>)</argument_list></sizeof>-2</expr>]</index></name></expr></init></decl>;</decl_stmt>
<do>do <block>{
<expr_stmt><expr>*<name>pLastChar</name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>Py_UniversalNewlineFgets</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>, <argument><expr>sizeof <name>linebuf</name></expr></argument>, <argument><expr><name>xfp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then>
<break>break;</break></then></if>
}</block> while <condition>(<expr>*<name>pLastChar</name> != '\0' &amp;&amp; *<name>pLastChar</name> != '\n'</expr>)</condition>;</do>
}</block></for>
<if>if <condition>(<expr><name>i</name> == <name>lineno</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>11</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>p</name> <init>= <expr><name>linebuf</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>*<name>p</name> == ' ' || *<name>p</name> == '\t' || *<name>p</name> == '\014'</expr>)</condition>
<expr_stmt><expr><name>p</name>++</expr>;</expr_stmt></while>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> == 10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>indent</name> &gt; 0</expr>)</condition> <block>{
<if>if<condition>(<expr><name>indent</name> &lt; 10</expr>)</condition><then>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>indent</name></expr>]</index></name> = '\0'</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>err</name> = <call><name>PyFile_WriteString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != 0</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>indent</name> -= 10</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>err</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>PyFile_WriteString</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>err</name> == 0 &amp;&amp; <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>'\n'</expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>PyFile_WriteString</name><argument_list>(<argument><expr>"\n"</expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>xfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>tb_displayline</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>f</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>linebuf</name><index>[<expr>2000</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>filename</name> == <name>NULL</name> || <name>name</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT</name></cpp:macro> <cpp:value>" File \"%.500s\", line %d, in %.500s\n"</cpp:value></cpp:define>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>linebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>FMT</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>PyFile_WriteString</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != 0</expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<return>return <expr><call><name>_Py_DisplaySourceLine</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>tb_printinternal</name><parameter_list>(<param><decl><type><name>PyTracebackObject</name> *</type><name>tb</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>long</name></type> <name>limit</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>depth</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTracebackObject</name> *</type><name>tb1</name> <init>= <expr><name>tb</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>tb1</name> != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><name>depth</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>tb1</name> = <name><name>tb1</name>-&gt;<name>tb_next</name></name></expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr><name>tb</name> != <name>NULL</name> &amp;&amp; <name>err</name> == 0</expr>)</condition> <block>{
<if>if <condition>(<expr><name>depth</name> &lt;= <name>limit</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>tb_displayline</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
<argument><expr><call><name>PyString_AsString</name><argument_list>(
<argument><expr><name><name>tb</name>-&gt;<name>tb_frame</name>-&gt;<name>f_code</name>-&gt;<name>co_filename</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>tb</name>-&gt;<name>tb_lineno</name></name></expr></argument>,
<argument><expr><call><name>PyString_AsString</name><argument_list>(<argument><expr><name><name>tb</name>-&gt;<name>tb_frame</name>-&gt;<name>f_code</name>-&gt;<name>co_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>depth</name>--</expr>;</expr_stmt>
<expr_stmt><expr><name>tb</name> = <name><name>tb</name>-&gt;<name>tb_next</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>PyErr_CheckSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
}</block></while>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyTraceBack_Print</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>f</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>limitv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>limit</name> <init>= <expr>1000</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyTraceBack_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>limitv</name> = <call><name>PySys_GetObject</name><argument_list>(<argument><expr>"tracebacklimit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>limitv</name> &amp;&amp; <call><name>PyInt_Check</name><argument_list>(<argument><expr><name>limitv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>limit</name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>limitv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>limit</name> &lt;= 0</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>PyFile_WriteString</name><argument_list>(<argument><expr>"Traceback (most recent call last):\n"</expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>err</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>tb_printinternal</name><argument_list>(<argument><expr>(<name>PyTracebackObject</name> *)<name>v</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
</unit>
