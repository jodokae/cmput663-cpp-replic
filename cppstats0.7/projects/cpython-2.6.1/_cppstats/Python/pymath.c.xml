<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Python/pymath.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_HYPOT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>double</name></type> <name>hypot</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>, <param><decl><type><name>double</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>yx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> = <call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> = <call><name>fabs</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> &lt; <name>y</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>temp</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> = <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> = <name>temp</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>x</name> == 0.</expr>)</condition><then>
<return>return <expr>0.</expr>;</return></then>
<else>else <block>{
<expr_stmt><expr><name>yx</name> = <name>y</name>/<name>x</name></expr>;</expr_stmt>
<return>return <expr><name>x</name>*<call><name>sqrt</name><argument_list>(<argument><expr>1.+<name>yx</name>*<name>yx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_COPYSIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>double</name></type>
<name>copysign</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>, <param><decl><type><name>double</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>y</name> &gt; 0. || (<name>y</name> == 0. &amp;&amp; <call><name>atan2</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr>-1.</expr></argument>)</argument_list></call> &gt; 0.)</expr>)</condition><then> <block>{
<return>return <expr><call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr>-<call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOG1P</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<function><type><name>double</name></type>
<name>log1p</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>y</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; <name>DBL_EPSILON</name>/2.</expr>)</condition><then> <block>{
<return>return <expr><name>x</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>-0.5 &lt;= <name>x</name> &amp;&amp; <name>x</name> &lt;= 1.</expr>)</condition><then> <block>{
<expr_stmt><expr><name>y</name> = 1.+<name>x</name></expr>;</expr_stmt>
<return>return <expr><call><name>log</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call>-((<name>y</name>-1.)-<name>x</name>)/<name>y</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>log</name><argument_list>(<argument><expr>1.+<name>x</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>ln2</name> <init>= <expr>6.93147180559945286227E-01</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>two_pow_m28</name> <init>= <expr>3.7252902984619141E-09</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>two_pow_p28</name> <init>= <expr>268435456.0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>zero</name> <init>= <expr>0.0</expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ASINH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>double</name></type>
<name>asinh</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>absx</name> <init>= <expr><call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>Py_IS_NAN</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> || <call><name>Py_IS_INFINITY</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>x</name>+<name>x</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>absx</name> &lt; <name>two_pow_m28</name></expr>)</condition><then> <block>{
<return>return <expr><name>x</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>absx</name> &gt; <name>two_pow_p28</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>w</name> = <call><name>log</name><argument_list>(<argument><expr><name>absx</name></expr></argument>)</argument_list></call>+<name>ln2</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>absx</name> &gt; 2.0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>w</name> = <call><name>log</name><argument_list>(<argument><expr>2.0*<name>absx</name> + 1.0 / (<call><name>sqrt</name><argument_list>(<argument><expr><name>x</name>*<name>x</name> + 1.0</expr></argument>)</argument_list></call> + <name>absx</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><name>x</name>*<name>x</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>w</name> = <call><name>log1p</name><argument_list>(<argument><expr><name>absx</name> + <name>t</name> / (1.0 + <call><name>sqrt</name><argument_list>(<argument><expr>1.0 + <name>t</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<return>return <expr><call><name>copysign</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ACOSH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>double</name></type>
<name>acosh</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>Py_IS_NAN</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>x</name>+<name>x</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>x</name> &lt; 1.</expr>)</condition><then> <block>{
<expr_stmt><expr><name>errno</name> = <name>EDOM</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_NAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>Py_NAN</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr>(<name>x</name>-<name>x</name>)/(<name>x</name>-<name>x</name>)</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then> <else>else <if>if <condition>(<expr><name>x</name> &gt;= <name>two_pow_p28</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>Py_IS_INFINITY</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>x</name>+<name>x</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>log</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call>+<name>ln2</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name>x</name> == 1.</expr>)</condition><then> <block>{
<return>return <expr>0.0</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>x</name> &gt; 2.</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><name>x</name>*<name>x</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>log</name><argument_list>(<argument><expr>2.0*<name>x</name> - 1.0 / (<name>x</name> + <call><name>sqrt</name><argument_list>(<argument><expr><name>t</name> - 1.0</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><name>x</name> - 1.0</expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>log1p</name><argument_list>(<argument><expr><name>t</name> + <call><name>sqrt</name><argument_list>(<argument><expr>2.0*<name>t</name> + <name>t</name>*<name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if></else></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ATANH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>double</name></type>
<name>atanh</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>absx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>t</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>Py_IS_NAN</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>x</name>+<name>x</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>absx</name> = <call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>absx</name> &gt;= 1.</expr>)</condition><then> <block>{
<expr_stmt><expr><name>errno</name> = <name>EDOM</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_NAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>Py_NAN</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>x</name>/<name>zero</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
<if>if <condition>(<expr><name>absx</name> &lt; <name>two_pow_m28</name></expr>)</condition><then> <block>{
<return>return <expr><name>x</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>absx</name> &lt; 0.5</expr>)</condition><then> <block>{
<expr_stmt><expr><name>t</name> = <name>absx</name>+<name>absx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> = 0.5 * <call><name>log1p</name><argument_list>(<argument><expr><name>t</name> + <name>t</name>*<name>absx</name> / (1.0 - <name>absx</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>t</name> = 0.5 * <call><name>log1p</name><argument_list>(<argument><expr>(<name>absx</name> + <name>absx</name>) / (1.0 - <name>absx</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><call><name>copysign</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
