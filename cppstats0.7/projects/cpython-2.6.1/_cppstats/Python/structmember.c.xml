<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Python/structmember.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>listmembers</name><parameter_list>(<param><decl><type>struct <name>memberlist</name> *</type><name>mlist</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name><name>mlist</name><index>[<expr><name>n</name></expr>]</index></name>.<name>name</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>)
<empty_stmt>;</empty_stmt></for>
<expr_stmt><expr><name>v</name> = <call><name>PyList_New</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name> != <name>NULL</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name><name>mlist</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyList_Sort</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>v</name></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyMember_Get</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>addr</name></decl></param>, <param><decl><type>struct <name>memberlist</name> *</type><name>mlist</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>memberlist</name> *</type><name>l</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"__members__"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><call><name>listmembers</name><argument_list>(<argument><expr><name>mlist</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>l</name> = <name>mlist</name></expr>;</init> <condition><expr><name><name>l</name>-&gt;<name>name</name></name> != <name>NULL</name></expr>;</condition> <incr><expr><name>l</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>l</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyMemberDef</name></type> <name>copy</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>copy</name>.<name>name</name></name> = <name><name>l</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name>.<name>type</name></name> = <name><name>l</name>-&gt;<name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name>.<name>offset</name></name> = <name><name>l</name>-&gt;<name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name>.<name>flags</name></name> = <name><name>l</name>-&gt;<name>flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name>.<name>doc</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><call><name>PyMember_GetOne</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr>&amp;<name>copy</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyMember_GetOne</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>addr</name></decl></param>, <param><decl><type><name>PyMemberDef</name> *</type><name>l</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>l</name>-&gt;<name>flags</name></name> &amp; <name>READ_RESTRICTED</name>) &amp;&amp;
<call><name>PyEval_GetRestricted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>, <argument><expr>"restricted attribute"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>addr</name> += <name><name>l</name>-&gt;<name>offset</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>l</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>T_BOOL</name></expr>:
<expr_stmt><expr><name>v</name> = <call><name>PyBool_FromLong</name><argument_list>(<argument><expr>*(<name>char</name>*)<name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>T_BYTE</name></expr>:
<expr_stmt><expr><name>v</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>*(<name>char</name>*)<name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>T_UBYTE</name></expr>:
<expr_stmt><expr><name>v</name> = <call><name>PyLong_FromUnsignedLong</name><argument_list>(<argument><expr>*(<name>unsigned</name> <name>char</name>*)<name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>T_SHORT</name></expr>:
<expr_stmt><expr><name>v</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>*(<name>short</name>*)<name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>T_USHORT</name></expr>:
<expr_stmt><expr><name>v</name> = <call><name>PyLong_FromUnsignedLong</name><argument_list>(<argument><expr>*(<name>unsigned</name> <name>short</name>*)<name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>T_INT</name></expr>:
<expr_stmt><expr><name>v</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>*(<name>int</name>*)<name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>T_UINT</name></expr>:
<expr_stmt><expr><name>v</name> = <call><name>PyLong_FromUnsignedLong</name><argument_list>(<argument><expr>*(<name>unsigned</name> <name>int</name>*)<name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>T_LONG</name></expr>:
<expr_stmt><expr><name>v</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>*(<name>long</name>*)<name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>T_ULONG</name></expr>:
<expr_stmt><expr><name>v</name> = <call><name>PyLong_FromUnsignedLong</name><argument_list>(<argument><expr>*(<name>unsigned</name> <name>long</name>*)<name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>T_PYSSIZET</name></expr>:
<expr_stmt><expr><name>v</name> = <call><name>PyInt_FromSsize_t</name><argument_list>(<argument><expr>*(<name>Py_ssize_t</name>*)<name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>T_FLOAT</name></expr>:
<expr_stmt><expr><name>v</name> = <call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr>(<name>double</name>)*(<name>float</name>*)<name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>T_DOUBLE</name></expr>:
<expr_stmt><expr><name>v</name> = <call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr>*(<name>double</name>*)<name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>T_STRING</name></expr>:
<if>if <condition>(<expr>*(<name>char</name>**)<name>addr</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> = <name>Py_None</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>v</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>*(<name>char</name>**)<name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>T_STRING_INPLACE</name></expr>:
<expr_stmt><expr><name>v</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>(<name>char</name>*)<name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>T_CHAR</name></expr>:
<expr_stmt><expr><name>v</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name>*)<name>addr</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>T_OBJECT</name></expr>:
<expr_stmt><expr><name>v</name> = *(<name>PyObject</name> **)<name>addr</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>v</name> = <name>Py_None</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>T_OBJECT_EX</name></expr>:
<expr_stmt><expr><name>v</name> = *(<name>PyObject</name> **)<name>addr</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr><name><name>l</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
</case><case>case <expr><name>T_LONGLONG</name></expr>:
<expr_stmt><expr><name>v</name> = <call><name>PyLong_FromLongLong</name><argument_list>(<argument><expr>*(<name>PY_LONG_LONG</name> *)<name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>T_ULONGLONG</name></expr>:
<expr_stmt><expr><name>v</name> = <call><name>PyLong_FromUnsignedLongLong</name><argument_list>(<argument><expr>*(<name>unsigned</name> <name>PY_LONG_LONG</name> *)<name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_SystemError</name></expr></argument>, <argument><expr>"bad memberdescr type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> = <name>NULL</name></expr>;</expr_stmt>
</default>}</block></switch>
<return>return <expr><name>v</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyMember_Set</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>addr</name></decl></param>, <param><decl><type>struct <name>memberlist</name> *</type><name>mlist</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>memberlist</name> *</type><name>l</name></decl>;</decl_stmt>
<for>for (<init><expr><name>l</name> = <name>mlist</name></expr>;</init> <condition><expr><name><name>l</name>-&gt;<name>name</name></name> != <name>NULL</name></expr>;</condition> <incr><expr><name>l</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>l</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyMemberDef</name></type> <name>copy</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>copy</name>.<name>name</name></name> = <name><name>l</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name>.<name>type</name></name> = <name><name>l</name>-&gt;<name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name>.<name>offset</name></name> = <name><name>l</name>-&gt;<name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name>.<name>flags</name></name> = <name><name>l</name>-&gt;<name>flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name>.<name>doc</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><call><name>PyMember_SetOne</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr>&amp;<name>copy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WARN</name><parameter_list>(<param><type><name>msg</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { if (PyErr_Warn(PyExc_RuntimeWarning, msg) &lt; 0) return -1; } while (0)</cpp:value></cpp:define>
<function><type><name>int</name></type>
<name>PyMember_SetOne</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>addr</name></decl></param>, <param><decl><type><name>PyMemberDef</name> *</type><name>l</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>oldv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>l</name>-&gt;<name>flags</name></name> &amp; <name>READONLY</name>) || <name><name>l</name>-&gt;<name>type</name></name> == <name>T_STRING</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"readonly attribute"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>l</name>-&gt;<name>flags</name></name> &amp; <name>PY_WRITE_RESTRICTED</name>) &amp;&amp; <call><name>PyEval_GetRestricted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>, <argument><expr>"restricted attribute"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name> &amp;&amp; <name><name>l</name>-&gt;<name>type</name></name> != <name>T_OBJECT_EX</name> &amp;&amp; <name><name>l</name>-&gt;<name>type</name></name> != <name>T_OBJECT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"can't delete numeric/char attribute"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>addr</name> += <name><name>l</name>-&gt;<name>offset</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>l</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>T_BOOL</name></expr>: <block>{
<if>if <condition>(<expr>!<call><name>PyBool_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"attribute value type must be bool"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>v</name> == <name>Py_True</name></expr>)</condition><then>
<expr_stmt><expr>*(<name>char</name>*)<name>addr</name> = (<name>char</name>) 1</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*(<name>char</name>*)<name>addr</name> = (<name>char</name>) 0</expr>;</expr_stmt></else></if>
<break>break;</break>
}</block>
</case><case>case <expr><name>T_BYTE</name></expr>: <block>{
<decl_stmt><decl><type><name>long</name></type> <name>long_val</name> <init>= <expr><call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>long_val</name> == -1) &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr>*(<name>char</name>*)<name>addr</name> = (<name>char</name>)<name>long_val</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>long_val</name> &gt; <name>CHAR_MAX</name>) || (<name>long_val</name> &lt; <name>CHAR_MIN</name>)</expr>)</condition><then>
<expr_stmt><expr><call><name>WARN</name><argument_list>(<argument><expr>"Truncation of value to char"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
}</block>
</case><case>case <expr><name>T_UBYTE</name></expr>: <block>{
<decl_stmt><decl><type><name>long</name></type> <name>long_val</name> <init>= <expr><call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>long_val</name> == -1) &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr>*(<name>unsigned</name> <name>char</name>*)<name>addr</name> = (<name>unsigned</name> <name>char</name>)<name>long_val</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>long_val</name> &gt; <name>UCHAR_MAX</name>) || (<name>long_val</name> &lt; 0)</expr>)</condition><then>
<expr_stmt><expr><call><name>WARN</name><argument_list>(<argument><expr>"Truncation of value to unsigned char"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
}</block>
</case><case>case <expr><name>T_SHORT</name></expr>: <block>{
<decl_stmt><decl><type><name>long</name></type> <name>long_val</name> <init>= <expr><call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>long_val</name> == -1) &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr>*(<name>short</name>*)<name>addr</name> = (<name>short</name>)<name>long_val</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>long_val</name> &gt; <name>SHRT_MAX</name>) || (<name>long_val</name> &lt; <name>SHRT_MIN</name>)</expr>)</condition><then>
<expr_stmt><expr><call><name>WARN</name><argument_list>(<argument><expr>"Truncation of value to short"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
}</block>
</case><case>case <expr><name>T_USHORT</name></expr>: <block>{
<decl_stmt><decl><type><name>long</name></type> <name>long_val</name> <init>= <expr><call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>long_val</name> == -1) &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr>*(<name>unsigned</name> <name>short</name>*)<name>addr</name> = (<name>unsigned</name> <name>short</name>)<name>long_val</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>long_val</name> &gt; <name>USHRT_MAX</name>) || (<name>long_val</name> &lt; 0)</expr>)</condition><then>
<expr_stmt><expr><call><name>WARN</name><argument_list>(<argument><expr>"Truncation of value to unsigned short"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
}</block>
</case><case>case <expr><name>T_INT</name></expr>: <block>{
<decl_stmt><decl><type><name>long</name></type> <name>long_val</name> <init>= <expr><call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>long_val</name> == -1) &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr>*(<name>int</name> *)<name>addr</name> = (<name>int</name>)<name>long_val</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>long_val</name> &gt; <name>INT_MAX</name>) || (<name>long_val</name> &lt; <name>INT_MIN</name>)</expr>)</condition><then>
<expr_stmt><expr><call><name>WARN</name><argument_list>(<argument><expr>"Truncation of value to int"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
}</block>
</case><case>case <expr><name>T_UINT</name></expr>: <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ulong_val</name> <init>= <expr><call><name>PyLong_AsUnsignedLong</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>ulong_val</name> == (<name>unsigned</name> <name>int</name>)-1) &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ulong_val</name> = <call><name>PyLong_AsLong</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>ulong_val</name> == (<name>unsigned</name> <name>int</name>)-1) &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *)<name>addr</name> = (<name>unsigned</name> <name>int</name>)<name>ulong_val</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WARN</name><argument_list>(<argument><expr>"Writing negative value into unsigned field"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *)<name>addr</name> = (<name>unsigned</name> <name>int</name>)<name>ulong_val</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>ulong_val</name> &gt; <name>UINT_MAX</name></expr>)</condition><then>
<expr_stmt><expr><call><name>WARN</name><argument_list>(<argument><expr>"Truncation of value to unsigned int"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
}</block>
</case><case>case <expr><name>T_LONG</name></expr>: <block>{
<expr_stmt><expr>*(<name>long</name>*)<name>addr</name> = <call><name>PyLong_AsLong</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(*(<name>long</name>*)<name>addr</name> == -1) &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<break>break;</break>
}</block>
</case><case>case <expr><name>T_ULONG</name></expr>: <block>{
<expr_stmt><expr>*(<name>unsigned</name> <name>long</name>*)<name>addr</name> = <call><name>PyLong_AsUnsignedLong</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(*(<name>unsigned</name> <name>long</name>*)<name>addr</name> == (<name>unsigned</name> <name>long</name>)-1)
&amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>unsigned</name> <name>long</name>*)<name>addr</name> = <call><name>PyLong_AsLong</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(*(<name>unsigned</name> <name>long</name>*)<name>addr</name> == (<name>unsigned</name> <name>int</name>)-1)
&amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>WARN</name><argument_list>(<argument><expr>"Writing negative value into unsigned field"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
}</block>
</case><case>case <expr><name>T_PYSSIZET</name></expr>: <block>{
<expr_stmt><expr>*(<name>Py_ssize_t</name>*)<name>addr</name> = <call><name>PyInt_AsSsize_t</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(*(<name>Py_ssize_t</name>*)<name>addr</name> == (<name>Py_ssize_t</name>)-1)
&amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<break>break;</break>
}</block>
</case><case>case <expr><name>T_FLOAT</name></expr>: <block>{
<decl_stmt><decl><type><name>double</name></type> <name>double_val</name> <init>= <expr><call><name>PyFloat_AsDouble</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>double_val</name> == -1) &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr>*(<name>float</name>*)<name>addr</name> = (<name>float</name>)<name>double_val</name></expr>;</expr_stmt>
<break>break;</break>
}</block>
</case><case>case <expr><name>T_DOUBLE</name></expr>:
<expr_stmt><expr>*(<name>double</name>*)<name>addr</name> = <call><name>PyFloat_AsDouble</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(*(<name>double</name>*)<name>addr</name> == -1) &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr><name>T_OBJECT</name></expr>:
</case><case>case <expr><name>T_OBJECT_EX</name></expr>:
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>oldv</name> = *(<name>PyObject</name> **)<name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>PyObject</name> **)<name>addr</name> = <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>oldv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>T_CHAR</name></expr>:
<if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>PyString_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr>*(<name>char</name>*)<name>addr</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></else></if>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
</case><case>case <expr><name>T_LONGLONG</name></expr>: <block>{
<decl_stmt><decl><type><name>PY_LONG_LONG</name></type> <name>value</name></decl>;</decl_stmt>
<expr_stmt><expr>*(<name>PY_LONG_LONG</name>*)<name>addr</name> = <name>value</name> = <call><name>PyLong_AsLongLong</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>value</name> == -1) &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<break>break;</break>
}</block>
</case><case>case <expr><name>T_ULONGLONG</name></expr>: <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>PY_LONG_LONG</name></type> <name>value</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyLong_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>*(<name>unsigned</name> <name>PY_LONG_LONG</name>*)<name>addr</name> = <name>value</name> = <call><name>PyLong_AsUnsignedLongLong</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*(<name>unsigned</name> <name>PY_LONG_LONG</name>*)<name>addr</name> = <name>value</name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr>(<name>value</name> == (<name>unsigned</name> <name>PY_LONG_LONG</name>)-1) &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<break>break;</break>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_SystemError</name></expr></argument>,
<argument><expr>"bad memberdescr type for %s"</expr></argument>, <argument><expr><name><name>l</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
</default>}</block></switch>
<return>return <expr>0</expr>;</return>
}</block></function>
</unit>
