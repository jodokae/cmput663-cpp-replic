<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Python/thread_nt.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PROCESS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <name>NRMUTEX</name> <block>{
<decl_stmt><decl><type><name>LONG</name></type> <name>owned</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>thread_id</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hevent</name></decl> ;</decl_stmt>
}</block></struct></type> <name>NRMUTEX</name>, *<name>PNRMUTEX</name> ;</typedef>
<function><type><name>BOOL</name></type>
<name>InitializeNonRecursiveMutex</name><parameter_list>(<param><decl><type><name>PNRMUTEX</name></type> <name>mutex</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>mutex</name>-&gt;<name>owned</name></name> = -1</expr> ;</expr_stmt>
<expr_stmt><expr><name><name>mutex</name>-&gt;<name>thread_id</name></name> = 0</expr> ;</expr_stmt>
<expr_stmt><expr><name><name>mutex</name>-&gt;<name>hevent</name></name> = <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<return>return <expr><name><name>mutex</name>-&gt;<name>hevent</name></name> != <name>NULL</name></expr> ;</return>
}</block></function>
<function><type><name>VOID</name></type>
<name>DeleteNonRecursiveMutex</name><parameter_list>(<param><decl><type><name>PNRMUTEX</name></type> <name>mutex</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>mutex</name>-&gt;<name>hevent</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>mutex</name>-&gt;<name>hevent</name></name> = <name>NULL</name></expr> ;</expr_stmt>
}</block></function>
<function><type><name>DWORD</name></type>
<name>EnterNonRecursiveMutex</name><parameter_list>(<param><decl><type><name>PNRMUTEX</name></type> <name>mutex</name></decl></param>, <param><decl><type><name>BOOL</name></type> <name>wait</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>ret</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<name>wait</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>InterlockedCompareExchange</name><argument_list>(<argument><expr>&amp;<name><name>mutex</name>-&gt;<name>owned</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call> != -1</expr>)</condition><then>
<return>return <expr><name>WAIT_TIMEOUT</name></expr> ;</return></then></if>
<expr_stmt><expr><name>ret</name> = <name>WAIT_OBJECT_0</name></expr> ;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>ret</name> = <call><name>InterlockedIncrement</name><argument_list>(<argument><expr>&amp;<name><name>mutex</name>-&gt;<name>owned</name></name></expr></argument>)</argument_list></call> ?
<call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>mutex</name>-&gt;<name>hevent</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call> : <name>WAIT_OBJECT_0</name></expr> ;</expr_stmt></else></if>
<expr_stmt><expr><name><name>mutex</name>-&gt;<name>thread_id</name></name> = <call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr> ;</expr_stmt>
<return>return <expr><name>ret</name></expr> ;</return>
}</block></function>
<function><type><name>BOOL</name></type>
<name>LeaveNonRecursiveMutex</name><parameter_list>(<param><decl><type><name>PNRMUTEX</name></type> <name>mutex</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>mutex</name>-&gt;<name>thread_id</name></name> = 0</expr> ;</expr_stmt>
<return>return
<expr><call><name>InterlockedDecrement</name><argument_list>(<argument><expr>&amp;<name><name>mutex</name>-&gt;<name>owned</name></name></expr></argument>)</argument_list></call> &lt; 0 ||
<call><name>SetEvent</name><argument_list>(<argument><expr><name><name>mutex</name>-&gt;<name>hevent</name></name></expr></argument>)</argument_list></call></expr> ;</return>
}</block></function>
<function><type><name>PNRMUTEX</name></type>
<name>AllocNonRecursiveMutex</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PNRMUTEX</name></type> <name>mutex</name> <init>= <expr>(<name>PNRMUTEX</name>)<call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NRMUTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
<if>if <condition>(<expr><name>mutex</name> &amp;&amp; !<call><name>InitializeNonRecursiveMutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><name>mutex</name> = <name>NULL</name></expr> ;</expr_stmt>
}</block></then></if>
<return>return <expr><name>mutex</name></expr> ;</return>
}</block></function>
<function><type><name>void</name></type>
<name>FreeNonRecursiveMutex</name><parameter_list>(<param><decl><type><name>PNRMUTEX</name></type> <name>mutex</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>mutex</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>DeleteNonRecursiveMutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
}</block></then></if>
}</block></function>
<function_decl><type><name>long</name></type> <name>PyThread_get_thread_ident</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PyThread__init_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> *</type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>done</name></decl>;</decl_stmt>
}</block></struct></type> <name>callobj</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>bootstrap</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>call</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>callobj</name> *</type><name>obj</name> <init>= <expr>(<name>callobj</name>*)<name>call</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><call><name>void</name> <argument_list>(<argument><expr>*<name>func</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name>*</expr></argument>)</argument_list></call> = <name><name>obj</name>-&gt;<name>func</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>arg</name> <init>= <expr><name><name>obj</name>-&gt;<name>arg</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>obj</name>-&gt;<name>id</name></name> = <call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseSemaphore</name><argument_list>(<argument><expr><name><name>obj</name>-&gt;<name>done</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>long</name></type>
<name>PyThread_start_new_thread</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_uintptr_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callobj</name></type> <name>obj</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_start_new_thread called\n",
<call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyThread_init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>obj</name>.<name>id</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name>.<name>func</name></name> = <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name>.<name>arg</name></name> = <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name>.<name>done</name></name> = <call><name>CreateSemaphore</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>obj</name>.<name>done</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>_beginthread</name><argument_list>(<argument><expr><name>bootstrap</name></expr></argument>,
<argument><expr><call><name>Py_SAFE_DOWNCAST</name><argument_list>(<argument><expr><name>_pythread_stacksize</name></expr></argument>,
<argument><expr><name>Py_ssize_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>&amp;<name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == (<name>Py_uintptr_t</name>)-1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_start_new_thread failed: %p errno %d\n",
<call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>, (<name>void</name>*)<name>rv</name>, <name>errno</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name>.<name>id</name></name> = -1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_start_new_thread succeeded: %p\n",
<call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>, (<name>void</name>*)<name>rv</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>obj</name>.<name>done</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>obj</name>.<name>id</name></name> != -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr>(<name>HANDLE</name>)<name><name>obj</name>.<name>done</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>obj</name>.<name>id</name></name></expr>;</return>
}</block></function>
<function><type><name>long</name></type>
<name>PyThread_get_thread_ident</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyThread_init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_PyThread_exit_thread</name><parameter_list>(<param><decl><type><name>int</name></type> <name>no_cleanup</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_exit_thread called\n", <call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
<if>if <condition>(<expr><name>no_cleanup</name></expr>)</condition><then>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></then></if>
<expr_stmt><expr><call><name>_endthread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread_exit_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>do_PyThread_exit_thread</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread__exit_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>do_PyThread_exit_thread</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NO_EXIT_PROG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_PyThread_exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>, <param><decl><type><name>int</name></type> <name>no_cleanup</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_exit_prog(%d) called\n", <name>status</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
<if>if <condition>(<expr><name>no_cleanup</name></expr>)</condition><then>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></then></if>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread_exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>do_PyThread_exit_prog</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread__exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>do_PyThread_exit_prog</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>PyThread_type_lock</name></type>
<name>PyThread_allocate_lock</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PNRMUTEX</name></type> <name>aLock</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_allocate_lock called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyThread_init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>aLock</name> = <call><name>AllocNonRecursiveMutex</name><argument_list>()</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_allocate_lock() -&gt; %p\n", <call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>, <name>aLock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyThread_type_lock</name>) <name>aLock</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread_free_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>aLock</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_free_lock(%p) called\n", <call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>,<name>aLock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeNonRecursiveMutex</name><argument_list>(<argument><expr><name>aLock</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
}</block></function>
<function><type><name>int</name></type>
<name>PyThread_acquire_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>aLock</name></decl></param>, <param><decl><type><name>int</name></type> <name>waitflag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>success</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_acquire_lock(%p, %d) called\n", <call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>,<name>aLock</name>, <name>waitflag</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> = <name>aLock</name> &amp;&amp; <call><name>EnterNonRecursiveMutex</name><argument_list>(<argument><expr>(<name>PNRMUTEX</name>) <name>aLock</name></expr></argument>, <argument><expr>(<name>waitflag</name> ? <name>INFINITE</name> : 0)</expr></argument>)</argument_list></call> == <name>WAIT_OBJECT_0</name></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_acquire_lock(%p, %d) -&gt; %d\n", <call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>,<name>aLock</name>, <name>waitflag</name>, <name>success</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>success</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread_release_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>aLock</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_release_lock(%p) called\n", <call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>,<name>aLock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name>aLock</name> &amp;&amp; <call><name>LeaveNonRecursiveMutex</name><argument_list>(<argument><expr>(<name>PNRMUTEX</name>) <name>aLock</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: Could not PyThread_release_lock(%p) error: %ld\n", <call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>, <name>aLock</name>, <call><name>GetLastError</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_MIN_STACKSIZE</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_MAX_STACKSIZE</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>_pythread_nt_set_stacksize</name><parameter_list>(<param><decl><type><name>size_t</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>size</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>_pythread_stacksize</name> = 0</expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>size</name> &gt;= <name>THREAD_MIN_STACKSIZE</name> &amp;&amp; <name>size</name> &lt; <name>THREAD_MAX_STACKSIZE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>_pythread_stacksize</name> = <name>size</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<return>return <expr>-1</expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_SET_STACKSIZE</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_pythread_nt_set_stacksize(x)</cpp:value></cpp:define>
</unit>
