<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Python/pyarena.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pyarena.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_BLOCK_SIZE</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGNMENT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGNMENT_MASK</name></cpp:macro> <cpp:value>(ALIGNMENT - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUNDUP</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((x) + ALIGNMENT_MASK) &amp; ~ALIGNMENT_MASK)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>_block</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>ab_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ab_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>_block</name> *</type><name>ab_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>ab_mem</name></decl>;</decl_stmt>
}</block></struct></type> <name>block</name>;</typedef>
<struct>struct <name>_arena</name> <block>{
<decl_stmt><decl><type><name>block</name> *</type><name>a_head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block</name> *</type><name>a_cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>a_objects</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>total_allocs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>total_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>total_blocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>total_block_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>total_big_blocks</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>block</name> *</type>
<name>block_new</name><parameter_list>(<param><decl><type><name>size_t</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>block</name> *</type><name>b</name> <init>= <expr>(<name>block</name> *)<call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></sizeof> + <name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>b</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>b</name>-&gt;<name>ab_size</name></name> = <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>ab_mem</name></name> = <call>(<name>void</name> *)<argument_list>(<argument><expr><name>b</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>ab_next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>ab_offset</name></name> = <call><name>ROUNDUP</name><argument_list>(<argument><expr><call>(<name>Py_uintptr_t</name>)<argument_list>(<argument><expr><name><name>b</name>-&gt;<name>ab_mem</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> -
<call>(<name>Py_uintptr_t</name>)<argument_list>(<argument><expr><name><name>b</name>-&gt;<name>ab_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>block_free</name><parameter_list>(<param><decl><type><name>block</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<while>while <condition>(<expr><name>b</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>block</name> *</type><name>next</name> <init>= <expr><name><name>b</name>-&gt;<name>ab_next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <name>next</name></expr>;</expr_stmt>
}</block></while>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type>
<name>block_alloc</name><parameter_list>(<param><decl><type><name>block</name> *</type><name>b</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> = <call><name>ROUNDUP</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>ab_offset</name></name> + <name>size</name> &gt; <name><name>b</name>-&gt;<name>ab_size</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>block</name> *</type><name>newbl</name> <init>= <expr><call><name>block_new</name><argument_list>(
<argument><expr><name>size</name> &lt; <name>DEFAULT_BLOCK_SIZE</name> ?
<name>DEFAULT_BLOCK_SIZE</name> : <name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>newbl</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>!<name><name>b</name>-&gt;<name>ab_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>ab_next</name></name> = <name>newbl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <name>newbl</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>ab_offset</name></name> + <name>size</name> &lt;= <name><name>b</name>-&gt;<name>ab_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <call>(<name>void</name> *)<argument_list>(<argument><expr>((<name>char</name> *)<name><name>b</name>-&gt;<name>ab_mem</name></name>) + <name><name>b</name>-&gt;<name>ab_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>ab_offset</name></name> += <name>size</name></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
}</block></function>
<function><type><name>PyArena</name> *</type>
<name>PyArena_New</name><parameter_list>()</parameter_list> <block>{
<decl_stmt><decl><type><name>PyArena</name>*</type> <name>arena</name> <init>= <expr>(<name>PyArena</name> *)<call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyArena</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>arena</name></expr>)</condition><then>
<return>return <expr>(<name>PyArena</name>*)<call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>arena</name>-&gt;<name>a_head</name></name> = <call><name>block_new</name><argument_list>(<argument><expr><name>DEFAULT_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arena</name>-&gt;<name>a_cur</name></name> = <name><name>arena</name>-&gt;<name>a_head</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>arena</name>-&gt;<name>a_head</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr>(<name>void</name> *)<name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyArena</name>*)<call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>arena</name>-&gt;<name>a_objects</name></name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>arena</name>-&gt;<name>a_objects</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>block_free</name><argument_list>(<argument><expr><name><name>arena</name>-&gt;<name>a_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr>(<name>void</name> *)<name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyArena</name>*)<call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>arena</name>-&gt;<name>total_allocs</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>arena</name>-&gt;<name>total_size</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>arena</name>-&gt;<name>total_blocks</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>arena</name>-&gt;<name>total_block_size</name></name> = <name>DEFAULT_BLOCK_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arena</name>-&gt;<name>total_big_blocks</name></name> = 0</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>arena</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>PyArena_Free</name><parameter_list>(<param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>block_free</name><argument_list>(<argument><expr><name><name>arena</name>-&gt;<name>a_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call><name>PyList_SetSlice</name><argument_list>(<argument><expr><name><name>arena</name>-&gt;<name>a_objects</name></name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name><name>arena</name>-&gt;<name>a_objects</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name><name>arena</name>-&gt;<name>a_objects</name></name></expr></argument>)</argument_list></call> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>arena</name>-&gt;<name>a_objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name> *</type>
<name>PyArena_Malloc</name><parameter_list>(<param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>p</name> <init>= <expr><call><name>block_alloc</name><argument_list>(<argument><expr><name><name>arena</name>-&gt;<name>a_cur</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>arena</name>-&gt;<name>total_allocs</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>arena</name>-&gt;<name>total_size</name></name> += <name>size</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name><name>arena</name>-&gt;<name>a_cur</name>-&gt;<name>ab_next</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>arena</name>-&gt;<name>a_cur</name></name> = <name><name>arena</name>-&gt;<name>a_cur</name>-&gt;<name>ab_next</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>arena</name>-&gt;<name>total_blocks</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>arena</name>-&gt;<name>total_block_size</name></name> += <name><name>arena</name>-&gt;<name>a_cur</name>-&gt;<name>ab_size</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>arena</name>-&gt;<name>a_cur</name>-&gt;<name>ab_size</name></name> &gt; <name>DEFAULT_BLOCK_SIZE</name></expr>)</condition><then>
<expr_stmt><expr>++<name><name>arena</name>-&gt;<name>total_big_blocks</name></name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
<return>return <expr><name>p</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyArena_AddPyObject</name><parameter_list>(<param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name><name>arena</name>-&gt;<name>a_objects</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>r</name> &gt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>r</name></expr>;</return>
}</block></function>
</unit>
