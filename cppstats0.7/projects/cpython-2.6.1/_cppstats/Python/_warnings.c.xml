<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Python/_warnings.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"code.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"frameobject.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULE_NAME</name></cpp:macro> <cpp:value>"_warnings"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ACTION_NAME</name></cpp:macro> <cpp:value>"default_action"</cpp:value></cpp:define>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>warnings__doc__</name></expr></argument>,
<argument><expr><name>MODULE_NAME</name> " provides basic warning filtering support.\n"
"It is a helper module to speed up interpreter start-up."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>_filters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>_once_registry</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_matched</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>obj</name> == <name>Py_None</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"match"</expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_warnings_attr</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>attr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>warnings_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>all_modules</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>warnings_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>warnings_str</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>warnings_str</name> = <call><name>PyString_InternFromString</name><argument_list>(<argument><expr>"warnings"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>warnings_str</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>all_modules</name> = <call><name>PyImport_GetModuleDict</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>PyDict_Contains</name><argument_list>(<argument><expr><name>all_modules</name></expr></argument>, <argument><expr><name>warnings_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> == -1 || <name>result</name> == 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>warnings_module</name> = <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>all_modules</name></expr></argument>, <argument><expr><name>warnings_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>warnings_module</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>warnings_module</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_once_registry</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>registry</name></decl>;</decl_stmt>
<expr_stmt><expr><name>registry</name> = <call><name>get_warnings_attr</name><argument_list>(<argument><expr>"onceregistry"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>registry</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><name>_once_registry</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>_once_registry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_once_registry</name> = <name>registry</name></expr>;</expr_stmt>
<return>return <expr><name>registry</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>get_filter</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>category</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>text</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>lineno</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>module</name></decl></param>, <param><decl><type><name>PyObject</name> **</type><name>item</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>action</name></decl>, *<decl><type ref="prev"/><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>warnings_filters</name></decl>;</decl_stmt>
<expr_stmt><expr><name>warnings_filters</name> = <call><name>get_warnings_attr</name><argument_list>(<argument><expr>"filters"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>warnings_filters</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>_filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_filters</name> = <name>warnings_filters</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>_filters</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr><name>MODULE_NAME</name> ".filters must be a list"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>_filters</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tmp_item</name></decl>, *<decl><type ref="prev"/><name>action</name></decl>, *<decl><type ref="prev"/><name>msg</name></decl>, *<decl><type ref="prev"/><name>cat</name></decl>, *<decl><type ref="prev"/><name>mod</name></decl>, *<decl><type ref="prev"/><name>ln_obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_subclass</name></decl>, <decl><type ref="prev"/><name>good_msg</name></decl>, <decl><type ref="prev"/><name>good_mod</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp_item</name> = *<name>item</name> = <call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>_filters</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>tmp_item</name></expr></argument>)</argument_list></call> != 5</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr><name>MODULE_NAME</name> ".filters item %zd isn't a 5-tuple"</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>action</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>tmp_item</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>tmp_item</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cat</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>tmp_item</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mod</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>tmp_item</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ln_obj</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>tmp_item</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>good_msg</name> = <call><name>check_matched</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>good_mod</name> = <call><name>check_matched</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_subclass</name> = <call><name>PyObject_IsSubclass</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ln</name> = <call><name>PyInt_AsSsize_t</name><argument_list>(<argument><expr><name>ln_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>good_msg</name> == -1 || <name>good_mod</name> == -1 || <name>is_subclass</name> == -1 ||
(<name>ln</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call>)</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>good_msg</name> &amp;&amp; <name>is_subclass</name> &amp;&amp; <name>good_mod</name> &amp;&amp; (<name>ln</name> == 0 || <name>lineno</name> == <name>ln</name>)</expr>)</condition><then>
<return>return <expr><call><name>PyString_AsString</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
<expr_stmt><expr><name>m</name> = <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr><name>MODULE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>d</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>action</name> = <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEFAULT_ACTION_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>action</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyString_AsString</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr><name>MODULE_NAME</name> "." <name>DEFAULT_ACTION_NAME</name> " not found"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>already_warned</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>registry</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>, <param><decl><type><name>int</name></type> <name>should_set</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>already_warned</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>key</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>already_warned</name> = <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>already_warned</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>already_warned</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rc</name> != 0</expr>)</condition><then>
<return>return <expr><name>rc</name></expr>;</return></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>should_set</name></expr>)</condition><then>
<return>return <expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>Py_True</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>normalize_module</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>filename</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mod_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rc</name> == -1</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>rc</name> == 0</expr>)</condition><then>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr>"&lt;unknown&gt;"</expr></argument>)</argument_list></call></expr>;</return></then></if></else></if>
<expr_stmt><expr><name>mod_str</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mod_str</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>len</name> = <call><name>PyString_Size</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>len</name> &gt;= 3 &amp;&amp;
<call><name>strncmp</name><argument_list>(<argument><expr><name>mod_str</name> + (<name>len</name> - 3)</expr></argument>, <argument><expr>".py"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>module</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>mod_str</name></expr></argument>, <argument><expr><name>len</name>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>module</name> = <name>filename</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>module</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>update_registry</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>registry</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>text</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>category</name></decl></param>,
<param><decl><type><name>int</name></type> <name>add_zero</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>altkey</name></decl>, *<decl><type ref="prev"/><name>zero</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>add_zero</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>zero</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>zero</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>altkey</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>altkey</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>rc</name> = <call><name>already_warned</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>altkey</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>altkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_warning</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>filename</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>text</name></decl></param>, <param><decl><type><name>PyObject</name>
*</type><name>category</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>sourceline</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>f_stderr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>lineno_str</name><index>[<expr>128</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>lineno_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lineno_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>":%d: "</expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr>"__name__"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>name</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>f_stderr</name> = <call><name>PySys_GetObject</name><argument_list>(<argument><expr>"stderr"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>f_stderr</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"lost sys.stderr\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyFile_WriteObject</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>f_stderr</name></expr></argument>, <argument><expr><name>Py_PRINT_RAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyFile_WriteString</name><argument_list>(<argument><expr><name>lineno_str</name></expr></argument>, <argument><expr><name>f_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyFile_WriteObject</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>f_stderr</name></expr></argument>, <argument><expr><name>Py_PRINT_RAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyFile_WriteString</name><argument_list>(<argument><expr>": "</expr></argument>, <argument><expr><name>f_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyFile_WriteObject</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>f_stderr</name></expr></argument>, <argument><expr><name>Py_PRINT_RAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyFile_WriteString</name><argument_list>(<argument><expr>"\n"</expr></argument>, <argument><expr><name>f_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sourceline</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>source_line_str</name> <init>= <expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>sourceline</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>*<name>source_line_str</name> == ' ' || *<name>source_line_str</name> == '\t' ||
*<name>source_line_str</name> == '\014'</expr>)</condition>
<expr_stmt><expr><name>source_line_str</name>++</expr>;</expr_stmt></while>
<expr_stmt><expr><call><name>PyFile_WriteString</name><argument_list>(<argument><expr><name>source_line_str</name></expr></argument>, <argument><expr><name>f_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyFile_WriteString</name><argument_list>(<argument><expr>"\n"</expr></argument>, <argument><expr><name>f_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><call><name>_Py_DisplaySourceLine</name><argument_list>(<argument><expr><name>f_stderr</name></expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>lineno</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>warn_explicit</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>category</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>message</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>filename</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>module</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>registry</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>sourceline</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name> <init>= <expr><name>NULL</name></expr></init>, *<name>text</name> <init>= <expr><name>NULL</name></expr></init>, *<name>result</name> <init>= <expr><name>NULL</name></expr></init>, *<name>lineno_obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>item</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>registry</name> &amp;&amp; !<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>registry</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>registry</name> != <name>Py_None</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"'registry' must be a dict"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>module</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>module</name> = <call><name>normalize_module</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>module</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then> <else>else
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>PyExc_Warning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == -1</expr>)</condition><then> <block>{
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>text</name> = <call><name>PyObject_Str</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>category</name> = (<name>PyObject</name>*)<name><name>message</name>-&gt;<name>ob_type</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>text</name> = <name>message</name></expr>;</expr_stmt>
<expr_stmt><expr><name>message</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>message</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then></if>
}</block></else></if>
<expr_stmt><expr><name>lineno_obj</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lineno_obj</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then></if>
<expr_stmt><expr><name>key</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>lineno_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>key</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then></if>
<if>if <condition>(<expr>(<name>registry</name> != <name>NULL</name>) &amp;&amp; (<name>registry</name> != <name>Py_None</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>already_warned</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == -1</expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then>
<else>else <if>if <condition>(<expr><name>rc</name> == 1</expr>)</condition><then>
<goto>goto <name>return_none</name>;</goto></then></if></else></if>
}</block></then></if>
<expr_stmt><expr><name>action</name> = <call><name>get_filter</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>module</name></expr></argument>, <argument><expr>&amp;<name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>action</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"error"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"always"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>registry</name> != <name>NULL</name> &amp;&amp; <name>registry</name> != <name>Py_None</name> &amp;&amp;
<call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>Py_True</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"ignore"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<goto>goto <name>return_none</name>;</goto></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"once"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>registry</name> == <name>NULL</name> || <name>registry</name> == <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>registry</name> = <call><name>get_once_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>registry</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then></if>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>update_registry</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"module"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>registry</name> != <name>NULL</name> &amp;&amp; <name>registry</name> != <name>Py_None</name></expr>)</condition><then>
<expr_stmt><expr><name>rc</name> = <call><name>update_registry</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"default"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>to_str</name> <init>= <expr><call><name>PyObject_Str</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err_str</name> <init>= <expr>"???"</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>to_str</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>err_str</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>to_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"Unrecognized action (%s) in warnings.filters:\n %s"</expr></argument>,
<argument><expr><name>action</name></expr></argument>, <argument><expr><name>err_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>to_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if></else></if></else></if></else></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> == 1</expr>)</condition><then>
<goto>goto <name>return_none</name>;</goto></then></if>
<if>if <condition>(<expr><name>rc</name> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>show_fxn</name> <init>= <expr><call><name>get_warnings_attr</name><argument_list>(<argument><expr>"showwarning"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>show_fxn</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then></if>
<expr_stmt><expr><call><name>show_warning</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>sourceline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name> <init>= <expr>"functions overriding warnings.showwarning() "
"must support the 'line' argument"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_char</name> <init>= <expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>text_char</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>show_warning</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>sourceline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>check_fxn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>defaults</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyMethod_Check</name><argument_list>(<argument><expr><name>show_fxn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>check_fxn</name> = <call><name>PyMethod_Function</name><argument_list>(<argument><expr><name>show_fxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>PyFunction_Check</name><argument_list>(<argument><expr><name>show_fxn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>check_fxn</name> = <name>show_fxn</name></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"warnings.showwarning() must be set to a "
"function or method"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>show_fxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
}</block></else></if></else></if>
<expr_stmt><expr><name>defaults</name> = <call><name>PyFunction_GetDefaults</name><argument_list>(<argument><expr><name>check_fxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>defaults</name> == <name>NULL</name>) || (<call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>defaults</name></expr></argument>)</argument_list></call> &lt; 2)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyCodeObject</name> *</type><name>code</name> <init>= <expr>(<name>PyCodeObject</name> *)
<call><name>PyFunction_GetCode</name><argument_list>(<argument><expr><name>check_fxn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!(<name><name>code</name>-&gt;<name>co_flags</name></name> &amp; <name>CO_VARARGS</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyErr_WarnEx</name><argument_list>(<argument><expr><name>PyExc_DeprecationWarning</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt;
0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>show_fxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>res</name> = <call><name>PyObject_CallFunctionObjArgs</name><argument_list>(<argument><expr><name>show_fxn</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>category</name></expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno_obj</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>show_fxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then></if>
}</block></else></if>
}</block></else></if>
}</block></then> <else>else
<goto>goto <name>cleanup</name>;</goto></else></if>
<label><name>return_none</name>:</label>
<expr_stmt><expr><name>result</name> = <name>Py_None</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>lineno_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>setup_context</name><parameter_list>(<param><decl><type><name>Py_ssize_t</name></type> <name>stack_level</name></decl></param>, <param><decl><type><name>PyObject</name> **</type><name>filename</name></decl></param>, <param><decl><type><name>int</name> *</type><name>lineno</name></decl></param>,
<param><decl><type><name>PyObject</name> **</type><name>module</name></decl></param>, <param><decl><type><name>PyObject</name> **</type><name>registry</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>globals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyFrameObject</name> *</type><name>f</name> <init>= <expr><call><name>PyThreadState_GET</name><argument_list>()</argument_list></call>-&gt;<name>frame</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>--<name>stack_level</name> &gt; 0 &amp;&amp; <name>f</name> != <name>NULL</name></expr>)</condition>
<expr_stmt><expr><name>f</name> = <name><name>f</name>-&gt;<name>f_back</name></name></expr>;</expr_stmt></while>
<if>if <condition>(<expr><name>f</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>globals</name> = <call><name>PyThreadState_Get</name><argument_list>()</argument_list></call>-&gt;<name><name>interp</name>-&gt;<name>sysdict</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>lineno</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>globals</name> = <name><name>f</name>-&gt;<name>f_globals</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>lineno</name> = <call><name>PyCode_Addr2Line</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>f_code</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>f_lasti</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr>*<name>module</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>globals</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyDict_Check</name><argument_list>(<argument><expr><name>globals</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>registry</name> = <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>globals</name></expr></argument>, <argument><expr>"__warningregistry__"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>registry</name> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>registry</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>registry</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>globals</name></expr></argument>, <argument><expr>"__warningregistry__"</expr></argument>, <argument><expr>*<name>registry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> &lt; 0</expr>)</condition><then>
<goto>goto <name>handle_error</name>;</goto></then></if>
}</block></then> <else>else
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>*<name>registry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr>*<name>module</name> = <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>globals</name></expr></argument>, <argument><expr>"__name__"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>module</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>module</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>"&lt;string&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>module</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>handle_error</name>;</goto></then></if>
}</block></then> <else>else
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>*<name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr>*<name>filename</name> = <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>globals</name></expr></argument>, <argument><expr>"__file__"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>filename</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name> <init>= <expr><call><name>PyString_Size</name><argument_list>(<argument><expr>*<name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_str</name> <init>= <expr><call><name>PyString_AsString</name><argument_list>(<argument><expr>*<name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>file_str</name> == <name>NULL</name> || (<name>len</name> &lt; 0 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>handle_error</name>;</goto></then></if>
<if>if <condition>(<expr><name>len</name> &gt;= 4 &amp;&amp;
<name><name>file_str</name><index>[<expr><name>len</name>-4</expr>]</index></name> == '.' &amp;&amp;
<call><name>tolower</name><argument_list>(<argument><expr><name><name>file_str</name><index>[<expr><name>len</name>-3</expr>]</index></name></expr></argument>)</argument_list></call> == 'p' &amp;&amp;
<call><name>tolower</name><argument_list>(<argument><expr><name><name>file_str</name><index>[<expr><name>len</name>-2</expr>]</index></name></expr></argument>)</argument_list></call> == 'y' &amp;&amp;
(<call><name>tolower</name><argument_list>(<argument><expr><name><name>file_str</name><index>[<expr><name>len</name>-1</expr>]</index></name></expr></argument>)</argument_list></call> == 'c' ||
<call><name>tolower</name><argument_list>(<argument><expr><name><name>file_str</name><index>[<expr><name>len</name>-1</expr>]</index></name></expr></argument>)</argument_list></call> == 'o')</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>filename</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>file_str</name></expr></argument>, <argument><expr><name>len</name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>filename</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>handle_error</name>;</goto></then></if>
}</block></then> <else>else
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>*<name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>module_str</name> <init>= <expr><call><name>PyString_AsString</name><argument_list>(<argument><expr>*<name>module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>module_str</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>module_str</name></expr></argument>, <argument><expr>"__main__"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>argv</name> <init>= <expr><call><name>PySys_GetObject</name><argument_list>(<argument><expr>"argv"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>argv</name> != <name>NULL</name> &amp;&amp; <call><name>PyList_Size</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>is_true</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>filename</name> = <call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>*<name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_true</name> = <call><name>PyObject_IsTrue</name><argument_list>(<argument><expr>*<name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>is_true</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr>*<name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>handle_error</name>;</goto>
}</block></then> <else>else <if>if <condition>(<expr>!<name>is_true</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr>*<name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>filename</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>"__main__"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>filename</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>handle_error</name>;</goto></then></if>
}</block></then></if></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>filename</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>"__main__"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>filename</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>handle_error</name>;</goto></then></if>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr>*<name>filename</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>filename</name> = *<name>module</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>*<name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<return>return <expr>1</expr>;</return>
<label><name>handle_error</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr>*<name>registry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr>*<name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_category</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>message</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>category</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>PyExc_Warning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == -1</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>rc</name> == 1</expr>)</condition><then>
<expr_stmt><expr><name>category</name> = (<name>PyObject</name>*)<name><name>message</name>-&gt;<name>ob_type</name></name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>category</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>category</name> = <name>PyExc_UserWarning</name></expr>;</expr_stmt></then></if></else></if>
<expr_stmt><expr><name>rc</name> = <call><name>PyObject_IsSubclass</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>PyExc_Warning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == -1</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>rc</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"category is not a subclass of Warning"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>category</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>do_warn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>message</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>category</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>stack_level</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>filename</name></decl>, *<decl><type ref="prev"/><name>module</name></decl>, *<decl><type ref="prev"/><name>registry</name></decl>, *<decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lineno</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>setup_context</name><argument_list>(<argument><expr><name>stack_level</name></expr></argument>, <argument><expr>&amp;<name>filename</name></expr></argument>, <argument><expr>&amp;<name>lineno</name></expr></argument>, <argument><expr>&amp;<name>module</name></expr></argument>, <argument><expr>&amp;<name>registry</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>res</name> = <call><name>warn_explicit</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>module</name></expr></argument>, <argument><expr><name>registry</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>registry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>warnings_warn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kw_list</name><index>[]</index></name> <init>= <expr><block>{ <expr>"message"</expr>, <expr>"category"</expr>, <expr>"stacklevel"</expr>, <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>message</name></decl>, *<decl><type ref="prev"/><name>category</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>stack_level</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>, <argument><expr>"O|On:warn"</expr></argument>, <argument><expr><name>kw_list</name></expr></argument>,
<argument><expr>&amp;<name>message</name></expr></argument>, <argument><expr>&amp;<name>category</name></expr></argument>, <argument><expr>&amp;<name>stack_level</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>category</name> = <call><name>get_category</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>category</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>do_warn</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>stack_level</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>warnings_warn_explicit</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kwd_list</name><index>[]</index></name> <init>= <expr><block>{<expr>"message"</expr>, <expr>"category"</expr>, <expr>"filename"</expr>, <expr>"lineno"</expr>,
<expr>"module"</expr>, <expr>"registry"</expr>, <expr>"module_globals"</expr>, <expr>0</expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>category</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lineno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>module</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>registry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>module_globals</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>, <argument><expr>"OOOi|OOO:warn_explicit"</expr></argument>,
<argument><expr><name>kwd_list</name></expr></argument>, <argument><expr>&amp;<name>message</name></expr></argument>, <argument><expr>&amp;<name>category</name></expr></argument>, <argument><expr>&amp;<name>filename</name></expr></argument>, <argument><expr>&amp;<name>lineno</name></expr></argument>, <argument><expr>&amp;<name>module</name></expr></argument>,
<argument><expr>&amp;<name>registry</name></expr></argument>, <argument><expr>&amp;<name>module_globals</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>module_globals</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>get_source_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>splitlines_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>loader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>module_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>source_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>source_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>returned</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>get_source_name</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>get_source_name</name> = <call><name>PyString_InternFromString</name><argument_list>(<argument><expr>"get_source"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>get_source_name</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>splitlines_name</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>splitlines_name</name> = <call><name>PyString_InternFromString</name><argument_list>(<argument><expr>"splitlines"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>splitlines_name</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>loader</name> = <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>module_globals</name></expr></argument>, <argument><expr>"__loader__"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>module_name</name> = <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>module_globals</name></expr></argument>, <argument><expr>"__name__"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>loader</name> == <name>NULL</name> || <name>module_name</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>standard_call</name>;</goto></then></if>
<if>if <condition>(<expr>!<call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>loader</name></expr></argument>, <argument><expr>"get_source"</expr></argument>)</argument_list></call></expr>)</condition><then>
<goto>goto <name>standard_call</name>;</goto></then></if>
<expr_stmt><expr><name>source</name> = <call><name>PyObject_CallMethodObjArgs</name><argument_list>(<argument><expr><name>loader</name></expr></argument>, <argument><expr><name>get_source_name</name></expr></argument>,
<argument><expr><name>module_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>source</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>source</name> == <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>standard_call</name>;</goto>
}</block></then></if></else></if>
<expr_stmt><expr><name>source_list</name> = <call><name>PyObject_CallMethodObjArgs</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>splitlines_name</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>source_list</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>source_line</name> = <call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>source_list</name></expr></argument>, <argument><expr><name>lineno</name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>source_line</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>source_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>returned</name> = <call><name>warn_explicit</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>module</name></expr></argument>,
<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>source_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>source_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>returned</name></expr>;</return>
}</block></then></if>
<label><name>standard_call</name>:</label>
<return>return <expr><call><name>warn_explicit</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>module</name></expr></argument>,
<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyErr_WarnEx</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>category</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>stack_level</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>message</name> <init>= <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>message</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>category</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>category</name> = <name>PyExc_RuntimeWarning</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>res</name> = <call><name>do_warn</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>stack_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PyErr_Warn</name></cpp:undef>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>PyErr_Warn</name><argument_list>(<argument>PyObject *category</argument>, <argument>char *text</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>PyErr_WarnEx</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block>
<function><type><name>int</name></type>
<name>PyErr_WarnExplicit</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>category</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename_str</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>module_str</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>registry</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>message</name> <init>= <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>filename</name> <init>= <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>filename_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>module</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>message</name> == <name>NULL</name> || <name>filename</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>exit</name>;</goto></then></if>
<if>if <condition>(<expr><name>module_str</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>module</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>module_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>module</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>exit</name>;</goto></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>category</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>category</name> = <name>PyExc_RuntimeWarning</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>res</name> = <call><name>warn_explicit</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>module</name></expr></argument>, <argument><expr><name>registry</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>exit</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = 0</expr>;</expr_stmt>
<label><name>exit</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>warn_doc</name></expr></argument>,
<argument><expr>"Issue a warning, or maybe ignore it or raise an exception."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>warn_explicit_doc</name></expr></argument>,
<argument><expr>"Low-level inferface to warnings functionality."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>warnings_functions</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"warn"</expr>, <expr>(<name>PyCFunction</name>)<name>warnings_warn</name></expr>, <expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr>,
<expr><name>warn_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"warn_explicit"</expr>, <expr>(<name>PyCFunction</name>)<name>warnings_warn_explicit</name></expr>,
<expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr>, <expr><name>warn_explicit_doc</name></expr>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>create_filter</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>category</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>action</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ignore_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>error_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>default_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>action_obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>lineno</name></decl>, *<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"ignore"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>ignore_str</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ignore_str</name> = <call><name>PyString_InternFromString</name><argument_list>(<argument><expr>"ignore"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ignore_str</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>action_obj</name> = <name>ignore_str</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"error"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>error_str</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>error_str</name> = <call><name>PyString_InternFromString</name><argument_list>(<argument><expr>"error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error_str</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>action_obj</name> = <name>error_str</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"default"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>default_str</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>default_str</name> = <call><name>PyString_InternFromString</name><argument_list>(<argument><expr>"default"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>default_str</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>action_obj</name> = <name>default_str</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"unknown action"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><name>lineno</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lineno</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>5</expr></argument>, <argument><expr><name>action_obj</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>init_filters</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>filters</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bytes_action</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>filters</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>create_filter</name><argument_list>(<argument><expr><name>PyExc_PendingDeprecationWarning</name></expr></argument>, <argument><expr>"ignore"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>create_filter</name><argument_list>(<argument><expr><name>PyExc_ImportWarning</name></expr></argument>, <argument><expr>"ignore"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>Py_BytesWarningFlag</name> &gt; 1</expr>)</condition><then>
<expr_stmt><expr><name>bytes_action</name> = "error"</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>Py_BytesWarningFlag</name></expr>)</condition><then>
<expr_stmt><expr><name>bytes_action</name> = "default"</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>bytes_action</name> = "ignore"</expr>;</expr_stmt></else></if></else></if>
<expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><call><name>create_filter</name><argument_list>(<argument><expr><name>PyExc_BytesWarning</name></expr></argument>,
<argument><expr><name>bytes_action</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> == <name>NULL</name> ||
<call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> == <name>NULL</name> ||
<call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>filters</name></expr>;</return>
}</block></function>
<function><type><name>PyMODINIT_FUNC</name></type>
<name>_PyWarnings_Init</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>default_action</name></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule3</name><argument_list>(<argument><expr><name>MODULE_NAME</name></expr></argument>, <argument><expr><name>warnings_functions</name></expr></argument>, <argument><expr><name>warnings__doc__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>_filters</name> = <call><name>init_filters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_filters</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>_filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"filters"</expr></argument>, <argument><expr><name>_filters</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>_once_registry</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_once_registry</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>_once_registry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"once_registry"</expr></argument>, <argument><expr><name>_once_registry</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>default_action</name> = <call><name>PyString_InternFromString</name><argument_list>(<argument><expr>"default"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>default_action</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>DEFAULT_ACTION_NAME</name></expr></argument>, <argument><expr><name>default_action</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
}</block></function>
</unit>
