<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Python/thread.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PTHREAD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DONT_HAVE_STDIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sgi</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PTHREAD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_THREADS</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pythread.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sgi</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SGI_THREADS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_THREAD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOLARIS_THREADS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>sun</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>SOLARIS_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUN_LWP</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_SC_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_THREADS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>thread_debug</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dprintf</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(void)((thread_debug &amp; 1) &amp;&amp; printf args)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d2printf</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((thread_debug &amp; 8) &amp;&amp; printf args)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dprintf</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d2printf</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialized</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PyThread__init_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function><type><name>void</name></type>
<name>PyThread_init_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> *</type><name>p</name> <init>= <expr><call><name>Py_GETENV</name><argument_list>(<argument><expr>"PYTHONTHREADDEBUG"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>p</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>p</name></expr>)</condition><then>
<expr_stmt><expr><name>thread_debug</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>thread_debug</name> = 1</expr>;</expr_stmt></else></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>initialized</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>initialized</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_init_thread called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyThread__init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>_pythread_stacksize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SGI_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread_sgi.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOLARIS_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread_solaris.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUN_LWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread_lwp.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread_pth.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_THREADS</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread_pthread.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>C_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread_cthread.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NT_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread_nt.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS2_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread_os2.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BEOS_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread_beos.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINCE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread_wince.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLAN9_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread_plan9.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ATHEOS_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread_atheos.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>size_t</name></type>
<name>PyThread_get_stacksize</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<return>return <expr><name>_pythread_stacksize</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyThread_set_stacksize</name><parameter_list>(<param><decl><type><name>size_t</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>THREAD_SET_STACKSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>THREAD_SET_STACKSIZE</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr>-2</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_HAVE_NATIVE_TLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>key</name> <block>{
<decl_stmt><decl><type>struct <name>key</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>value</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>key</name> *</type><name>keyhead</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyThread_type_lock</name></type> <name>keymutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nkeys</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> struct <name>key</name> *</type>
<name>find_key</name><parameter_list>(<param><decl><type><name>int</name></type> <name>key</name></decl></param>, <param><decl><type><name>void</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>key</name> *</type><name>p</name></decl>, *<decl><type ref="prev"/><name>prev_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>id</name> <init>= <expr><call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>keymutex</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyThread_acquire_lock</name><argument_list>(<argument><expr><name>keymutex</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_p</name> = <name>NULL</name></expr>;</expr_stmt>
<for>for (<init><expr><name>p</name> = <name>keyhead</name></expr>;</init> <condition><expr><name>p</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> = <name><name>p</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>p</name>-&gt;<name>id</name></name> == <name>id</name> &amp;&amp; <name><name>p</name>-&gt;<name>key</name></name> == <name>key</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<if>if <condition>(<expr><name>p</name> == <name>prev_p</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"tls find_key: small circular list(!)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>prev_p</name> = <name>p</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>p</name>-&gt;<name>next</name></name> == <name>keyhead</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"tls find_key: circular list(!)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<if>if <condition>(<expr><name>value</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p</name> == <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Done</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>p</name> = (struct <name>key</name> *)<call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>p</name>-&gt;<name>id</name></name> = <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>key</name></name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>next</name></name> = <name>keyhead</name></expr>;</expr_stmt>
<expr_stmt><expr><name>keyhead</name> = <name>p</name></expr>;</expr_stmt>
}</block></then></if>
<label><name>Done</name>:</label>
<expr_stmt><expr><call><name>PyThread_release_lock</name><argument_list>(<argument><expr><name>keymutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyThread_create_key</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>keymutex</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>keymutex</name> = <call><name>PyThread_allocate_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr>++<name>nkeys</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread_delete_key</name><parameter_list>(<param><decl><type><name>int</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>key</name> *</type><name>p</name></decl>, **<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyThread_acquire_lock</name><argument_list>(<argument><expr><name>keymutex</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> = &amp;<name>keyhead</name></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>p</name> = *<name>q</name>) != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>p</name>-&gt;<name>key</name></name> == <name>key</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>q</name> = <name><name>p</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr>(<name>void</name> *)<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>q</name> = &amp;<name><name>p</name>-&gt;<name>next</name></name></expr>;</expr_stmt></else></if>
}</block></while>
<expr_stmt><expr><call><name>PyThread_release_lock</name><argument_list>(<argument><expr><name>keymutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type>
<name>PyThread_set_key_value</name><parameter_list>(<param><decl><type><name>int</name></type> <name>key</name></decl></param>, <param><decl><type><name>void</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>key</name> *</type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>value</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <call><name>find_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then>
<else>else
<return>return <expr>0</expr>;</return></else></if>
}</block></function>
<function><type><name>void</name> *</type>
<name>PyThread_get_key_value</name><parameter_list>(<param><decl><type><name>int</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>key</name> *</type><name>p</name> <init>= <expr><call><name>find_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then>
<else>else
<return>return <expr><name><name>p</name>-&gt;<name>value</name></name></expr>;</return></else></if>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread_delete_key_value</name><parameter_list>(<param><decl><type><name>int</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>id</name> <init>= <expr><call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>key</name> *</type><name>p</name></decl>, **<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyThread_acquire_lock</name><argument_list>(<argument><expr><name>keymutex</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> = &amp;<name>keyhead</name></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>p</name> = *<name>q</name>) != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>p</name>-&gt;<name>key</name></name> == <name>key</name> &amp;&amp; <name><name>p</name>-&gt;<name>id</name></name> == <name>id</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>q</name> = <name><name>p</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr>(<name>void</name> *)<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else
<expr_stmt><expr><name>q</name> = &amp;<name><name>p</name>-&gt;<name>next</name></name></expr>;</expr_stmt></else></if>
}</block></while>
<expr_stmt><expr><call><name>PyThread_release_lock</name><argument_list>(<argument><expr><name>keymutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread_ReInitTLS</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>id</name> <init>= <expr><call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>key</name> *</type><name>p</name></decl>, **<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>keymutex</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>keymutex</name> = <call><name>PyThread_allocate_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> = &amp;<name>keyhead</name></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>p</name> = *<name>q</name>) != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>p</name>-&gt;<name>id</name></name> != <name>id</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>q</name> = <name><name>p</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr>(<name>void</name> *)<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>q</name> = &amp;<name><name>p</name>-&gt;<name>next</name></name></expr>;</expr_stmt></else></if>
}</block></while>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
