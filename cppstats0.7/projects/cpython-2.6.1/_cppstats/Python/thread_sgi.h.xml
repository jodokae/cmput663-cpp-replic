<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Python/thread_sgi.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/prctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ulocks.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HDR_SIZE</name></cpp:macro> <cpp:value>2680</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXPROC</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>usptr_t</name> *</type><name>shared_arena</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ulock_t</name></type> <name>count_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ulock_t</name></type> <name>wait_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>waiting_for_threads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nthreads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>exit_status</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NO_EXIT_PROG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_exit</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>exiting</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pid_t</name></type> <name>my_pid</name></decl>;</decl_stmt>
<struct><specifier>static</specifier> struct <name>pidlist</name> <block>{
<decl_stmt><decl><type><name>pid_t</name></type> <name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>child</name></decl>;</decl_stmt>
}</block> <decl><name><name>pidlist</name><index>[<expr><name>MAXPROC</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>maxpidindex</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NO_EXIT_PROG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>exit_sig</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>d2printf</name><argument_list>(<argument><expr>("exit_sig called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>exiting</name> &amp;&amp; <call><name>getpid</name><argument_list>()</argument_list></call> == <name>my_pid</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>d2printf</name><argument_list>(<argument><expr>("already exiting\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><name>do_exit</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>d2printf</name><argument_list>(<argument><expr>("exiting in exit_sig\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>(<name>thread_debug</name> &amp; 8) == 0</expr>)</condition><then>
<expr_stmt><expr><name>thread_debug</name> &amp;= ~1</expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>PyThread_exit_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>maybe_exit</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("maybe_exit called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>exiting</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("already exiting\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyThread_exit_prog</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type> <name>PyThread__init_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NO_EXIT_PROG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type>struct <name>sigaction</name></type> <name>s</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>long</name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>(<name>size</name> = <call><name>usconfig</name><argument_list>(<argument><expr><name>CONF_INITSIZE</name></expr></argument>, <argument><expr>64*1024</expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"usconfig - CONF_INITSIZE (check)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>usconfig</name><argument_list>(<argument><expr><name>CONF_INITSIZE</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"usconfig - CONF_INITSIZE (reset)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>addr</name> = (<name>long</name>) <call><name>dl_getrange</name><argument_list>(<argument><expr><name>size</name> + <name>HDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("trying to use addr %p-%p for shared arena\n", <name>addr</name>, <name>addr</name>+<name>size</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>addr</name> = <call><name>usconfig</name><argument_list>(<argument><expr><name>CONF_ATTACHADDR</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call>) &lt; 0 &amp;&amp; <name>errno</name> != 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"usconfig - CONF_ATTACHADDR (set)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><call><name>usconfig</name><argument_list>(<argument><expr><name>CONF_INITUSERS</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"usconfig - CONF_INITUSERS"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>my_pid</name> = <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NO_EXIT_PROG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>maybe_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>.<name>sa_handler</name></name> = <name>exit_sig</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr>&amp;<name><name>s</name>.<name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>.<name>sa_flags</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>prctl</name><argument_list>(<argument><expr><name>PR_SETEXITSIG</name></expr></argument>, <argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"prctl - PR_SETEXITSIG"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><call><name>usconfig</name><argument_list>(<argument><expr><name>CONF_ARENATYPE</name></expr></argument>, <argument><expr><name>US_SHAREDONLY</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"usconfig - CONF_ARENATYPE"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>usconfig</name><argument_list>(<argument><expr><name>CONF_LOCKTYPE</name></expr></argument>, <argument><expr><name>US_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>thread_debug</name> &amp; 4</expr>)</condition><then>
<expr_stmt><expr><call><name>usconfig</name><argument_list>(<argument><expr><name>CONF_LOCKTYPE</name></expr></argument>, <argument><expr><name>US_DEBUGPLUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>thread_debug</name> &amp; 2</expr>)</condition><then>
<expr_stmt><expr><call><name>usconfig</name><argument_list>(<argument><expr><name>CONF_LOCKTYPE</name></expr></argument>, <argument><expr><name>US_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>(<name>shared_arena</name> = <call><name>usinit</name><argument_list>(<argument><expr><call><name>tmpnam</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"usinit"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>usconfig</name><argument_list>(<argument><expr><name>CONF_ATTACHADDR</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"usconfig - CONF_ATTACHADDR (reset)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>(<name>count_lock</name> = <call><name>usnewlock</name><argument_list>(<argument><expr><name>shared_arena</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"usnewlock (count_lock)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr>(<name>void</name>) <call><name>usinitlock</name><argument_list>(<argument><expr><name>count_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>wait_lock</name> = <call><name>usnewlock</name><argument_list>(<argument><expr><name>shared_arena</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"usnewlock (wait_lock)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("arena start: %p, arena size: %ld\n", <name>shared_arena</name>, (<name>long</name>) <call><name>usconfig</name><argument_list>(<argument><expr><name>CONF_GETSIZE</name></expr></argument>, <argument><expr><name>shared_arena</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>clean_threads</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>mypid</name></decl>, <decl><type ref="prev"/><name>pid</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mypid</name> = <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> &lt; <name>maxpidindex</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>pidlist</name><index>[<expr><name>i</name></expr>]</index></name>.<name>parent</name> == <name>mypid</name> &amp;&amp; (<name>pid</name> = <name><name>pidlist</name><index>[<expr><name>i</name></expr>]</index></name>.<name>child</name>) &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>pid</name> = <call><name>waitpid</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>WNOHANG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pid</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>pidlist</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>pidlist</name><index>[<expr>--<name>maxpidindex</name></expr>]</index></name></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>maxpidindex</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>)
<if>if <condition>(<expr><name><name>pidlist</name><index>[<expr><name>j</name></expr>]</index></name>.<name>parent</name> == <name>pid</name></expr>)</condition><then>
<expr_stmt><expr><name><name>pidlist</name><index>[<expr><name>j</name></expr>]</index></name>.<name>child</name> = -1</expr>;</expr_stmt></then></if></for>
<continue>continue;</continue>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> &lt; <name>maxpidindex</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>pidlist</name><index>[<expr><name>i</name></expr>]</index></name>.<name>child</name> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>pidlist</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>pidlist</name><index>[<expr>--<name>maxpidindex</name></expr>]</index></name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
}</block></while>
}</block></function>
<function><type><name>long</name></type> <name>PyThread_start_new_thread</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>long</name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>local_initialized</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>success</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_start_new_thread called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyThread_init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<switch>switch <condition>(<expr><call><name>ussetlock</name><argument_list>(<argument><expr><name>count_lock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>0</expr>:
<return>return <expr>0</expr>;</return>
</case><case>case <expr>-1</expr>:
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"ussetlock (count_lock)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
</case>}</block></switch>
<if>if <condition>(<expr><name>maxpidindex</name> &gt;= <name>MAXPROC</name></expr>)</condition><then>
<expr_stmt><expr><name>success</name> = -1</expr>;</expr_stmt></then>
<else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>!<name>local_initialized</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>size</name> = <call><name>usconfig</name><argument_list>(<argument><expr><name>CONF_INITSIZE</name></expr></argument>, <argument><expr>64*1024</expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"usconfig - CONF_INITSIZE (check)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>usconfig</name><argument_list>(<argument><expr><name>CONF_INITSIZE</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"usconfig - CONF_INITSIZE (reset)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>addr</name> = (<name>long</name>) <call><name>dl_getrange</name><argument_list>(<argument><expr><name>size</name> + <name>HDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("trying to use addr %p-%p for sproc\n",
<name>addr</name>, <name>addr</name>+<name>size</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>addr</name> = <call><name>usconfig</name><argument_list>(<argument><expr><name>CONF_ATTACHADDR</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call>) &lt; 0 &amp;&amp;
<name>errno</name> != 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"usconfig - CONF_ATTACHADDR (set)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>clean_threads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>success</name> = <call><name>sproc</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>PR_SALL</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"sproc"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>!<name>local_initialized</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>usconfig</name><argument_list>(<argument><expr><name>CONF_ATTACHADDR</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"usconfig - CONF_ATTACHADDR (reset)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>local_initialized</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>success</name> &gt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>nthreads</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>pidlist</name><index>[<expr><name>maxpidindex</name></expr>]</index></name>.<name>parent</name> = <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pidlist</name><index>[<expr><name>maxpidindex</name>++</expr>]</index></name>.<name>child</name> = <name>success</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("pidlist[%d] = %d\n",
<name>maxpidindex</name>-1, <name>success</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><call><name>usunsetlock</name><argument_list>(<argument><expr><name>count_lock</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"usunsetlock (count_lock)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>success</name></expr>;</return>
}</block></function>
<function><type><name>long</name></type> <name>PyThread_get_thread_ident</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_PyThread_exit_thread</name><parameter_list>(<param><decl><type><name>int</name></type> <name>no_cleanup</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_exit_thread called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
<if>if <condition>(<expr><name>no_cleanup</name></expr>)</condition><then>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></then></if>
<if>if <condition>(<expr><call><name>ussetlock</name><argument_list>(<argument><expr><name>count_lock</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"ussetlock (count_lock)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>nthreads</name>--</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>getpid</name><argument_list>()</argument_list></call> == <name>my_pid</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>exiting</name> = 1</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NO_EXIT_PROG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>do_exit</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>clean_threads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nthreads</name> &gt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("kill other threads\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>maxpidindex</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<if>if <condition>(<expr><name><name>pidlist</name><index>[<expr><name>i</name></expr>]</index></name>.<name>child</name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr>(<name>void</name>) <call><name>kill</name><argument_list>(<argument><expr><name><name>pidlist</name><index>[<expr><name>i</name></expr>]</index></name>.<name>child</name></expr></argument>,
<argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></for>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><name>exit_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>waiting_for_threads</name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ussetlock</name><argument_list>(<argument><expr><name>wait_lock</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"ussetlock (wait_lock)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<if>if <condition>(<expr><name>nthreads</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("really exit (%d)\n", <name>exit_status</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>no_cleanup</name></expr>)</condition><then>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><name>exit_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>exit_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>usunsetlock</name><argument_list>(<argument><expr><name>count_lock</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"usunsetlock (count_lock)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("waiting for other threads (%d)\n", <name>nthreads</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ussetlock</name><argument_list>(<argument><expr><name>wait_lock</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"ussetlock (wait_lock)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>ussetlock</name><argument_list>(<argument><expr><name>count_lock</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"ussetlock (count_lock)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr><name>waiting_for_threads</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("main thread is waiting\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>usunsetlock</name><argument_list>(<argument><expr><name>wait_lock</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"usunsetlock (wait_lock)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NO_EXIT_PROG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <if>if <condition>(<expr><name>do_exit</name></expr>)</condition><then>
<expr_stmt><expr>(<name>void</name>) <call><name>kill</name><argument_list>(<argument><expr><name>my_pid</name></expr></argument>, <argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><call><name>usunsetlock</name><argument_list>(<argument><expr><name>count_lock</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"usunsetlock (count_lock)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>PyThread_exit_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>do_PyThread_exit_thread</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>PyThread__exit_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>do_PyThread_exit_thread</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NO_EXIT_PROG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_PyThread_exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>, <param><decl><type><name>int</name></type> <name>no_cleanup</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_exit_prog(%d) called\n", <name>status</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
<if>if <condition>(<expr><name>no_cleanup</name></expr>)</condition><then>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></then></if>
<expr_stmt><expr><name>do_exit</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>exit_status</name> = <name>status</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_PyThread_exit_thread</name><argument_list>(<argument><expr><name>no_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>PyThread_exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>do_PyThread_exit_prog</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>PyThread__exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>do_PyThread_exit_prog</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>PyThread_type_lock</name></type> <name>PyThread_allocate_lock</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ulock_t</name></type> <name>lock</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_allocate_lock called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyThread_init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>lock</name> = <call><name>usnewlock</name><argument_list>(<argument><expr><name>shared_arena</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"usnewlock"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr>(<name>void</name>) <call><name>usinitlock</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_allocate_lock() -&gt; %p\n", <name>lock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyThread_type_lock</name>) <name>lock</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>PyThread_free_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>lock</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_free_lock(%p) called\n", <name>lock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usfreelock</name><argument_list>(<argument><expr>(<name>ulock_t</name>) <name>lock</name></expr></argument>, <argument><expr><name>shared_arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>PyThread_acquire_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>lock</name></decl></param>, <param><decl><type><name>int</name></type> <name>waitflag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>success</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_acquire_lock(%p, %d) called\n", <name>lock</name>, <name>waitflag</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>waitflag</name></expr>)</condition><then>
<expr_stmt><expr><name>success</name> = <call><name>ussetlock</name><argument_list>(<argument><expr>(<name>ulock_t</name>) <name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>success</name> = <call><name>uscsetlock</name><argument_list>(<argument><expr>(<name>ulock_t</name>) <name>lock</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>success</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>waitflag</name> ? "ussetlock" : "uscsetlock"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_acquire_lock(%p, %d) -&gt; %d\n", <name>lock</name>, <name>waitflag</name>, <name>success</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>success</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>PyThread_release_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>lock</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_release_lock(%p) called\n", <name>lock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>usunsetlock</name><argument_list>(<argument><expr>(<name>ulock_t</name>) <name>lock</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"usunsetlock"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
</unit>
