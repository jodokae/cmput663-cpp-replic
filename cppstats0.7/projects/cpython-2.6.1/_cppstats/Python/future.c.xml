<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Python/future.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python-ast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"token.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graminit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"code.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"symtable.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNDEFINED_FUTURE_FEATURE</name></cpp:macro> <cpp:value>"future feature %.100s is not defined"</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>future_check_features</name><parameter_list>(<param><decl><type><name>PyFutureFeatures</name> *</type><name>ff</name></decl></param>, <param><decl><type><name>stmt_ty</name></type> <name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>names</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>kind</name></name> == <name>ImportFrom_kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>names</name> = <name><name>s</name>-&gt;<name>v</name>.<name>ImportFrom</name>.<name>names</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>asdl_seq_LEN</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>alias_ty</name></type> <name>name</name> <init>= <expr>(<name>alias_ty</name>)<call><name>asdl_seq_GET</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>feature</name> <init>= <expr><call><name>PyString_AsString</name><argument_list>(<argument><expr><name><name>name</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>feature</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>feature</name></expr></argument>, <argument><expr><name>FUTURE_NESTED_SCOPES</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>feature</name></expr></argument>, <argument><expr><name>FUTURE_GENERATORS</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>feature</name></expr></argument>, <argument><expr><name>FUTURE_DIVISION</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ff</name>-&gt;<name>ff_features</name></name> |= <name>CO_FUTURE_DIVISION</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>feature</name></expr></argument>, <argument><expr><name>FUTURE_ABSOLUTE_IMPORT</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ff</name>-&gt;<name>ff_features</name></name> |= <name>CO_FUTURE_ABSOLUTE_IMPORT</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>feature</name></expr></argument>, <argument><expr><name>FUTURE_WITH_STATEMENT</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ff</name>-&gt;<name>ff_features</name></name> |= <name>CO_FUTURE_WITH_STATEMENT</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>feature</name></expr></argument>, <argument><expr><name>FUTURE_PRINT_FUNCTION</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ff</name>-&gt;<name>ff_features</name></name> |= <name>CO_FUTURE_PRINT_FUNCTION</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>feature</name></expr></argument>, <argument><expr><name>FUTURE_UNICODE_LITERALS</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ff</name>-&gt;<name>ff_features</name></name> |= <name>CO_FUTURE_UNICODE_LITERALS</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>feature</name></expr></argument>, <argument><expr>"braces"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_SyntaxError</name></expr></argument>,
<argument><expr>"not a chance"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SyntaxLocation</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_SyntaxError</name></expr></argument>,
<argument><expr><name>UNDEFINED_FUTURE_FEATURE</name></expr></argument>, <argument><expr><name>feature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SyntaxLocation</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
}</block></for>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>future_parse</name><parameter_list>(<param><decl><type><name>PyFutureFeatures</name> *</type><name>ff</name></decl></param>, <param><decl><type><name>mod_ty</name></type> <name>mod</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>found_docstring</name> <init>= <expr>0</expr></init>, <name>done</name> <init>= <expr>0</expr></init>, <name>prev_line</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>future</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>future</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>future</name> = <call><name>PyString_InternFromString</name><argument_list>(<argument><expr>"__future__"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>future</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
}</block></then></if>
<if>if <condition>(<expr>!(<name><name>mod</name>-&gt;<name>kind</name></name> == <name>Module_kind</name> || <name><name>mod</name>-&gt;<name>kind</name></name> == <name>Interactive_kind</name>)</expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>asdl_seq_LEN</name><argument_list>(<argument><expr><name><name>mod</name>-&gt;<name>v</name>.<name>Module</name>.<name>body</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>stmt_ty</name></type> <name>s</name> <init>= <expr>(<name>stmt_ty</name>)<call><name>asdl_seq_GET</name><argument_list>(<argument><expr><name><name>mod</name>-&gt;<name>v</name>.<name>Module</name>.<name>body</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>done</name> &amp;&amp; <name><name>s</name>-&gt;<name>lineno</name></name> &gt; <name>prev_line</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<expr_stmt><expr><name>prev_line</name> = <name><name>s</name>-&gt;<name>lineno</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>s</name>-&gt;<name>kind</name></name> == <name>ImportFrom_kind</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>s</name>-&gt;<name>v</name>.<name>ImportFrom</name>.<name>module</name></name> == <name>future</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>done</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_SyntaxError</name></expr></argument>,
<argument><expr><name>ERR_LATE_FUTURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SyntaxLocation</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,
<argument><expr><name><name>s</name>-&gt;<name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>future_check_features</name><argument_list>(<argument><expr><name>ff</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name><name>ff</name>-&gt;<name>ff_lineno</name></name> = <name><name>s</name>-&gt;<name>lineno</name></name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>done</name> = 1</expr>;</expr_stmt></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>s</name>-&gt;<name>kind</name></name> == <name>Expr_kind</name> &amp;&amp; !<name>found_docstring</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>e</name> <init>= <expr><name><name>s</name>-&gt;<name>v</name>.<name>Expr</name>.<name>value</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>e</name>-&gt;<name>kind</name></name> != <name>Str_kind</name></expr>)</condition><then>
<expr_stmt><expr><name>done</name> = 1</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>found_docstring</name> = 1</expr>;</expr_stmt></else></if>
}</block></then> <else>else
<expr_stmt><expr><name>done</name> = 1</expr>;</expr_stmt></else></if></else></if>
}</block></for>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><name>PyFutureFeatures</name> *</type>
<name>PyFuture_FromAST</name><parameter_list>(<param><decl><type><name>mod_ty</name></type> <name>mod</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyFutureFeatures</name> *</type><name>ff</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ff</name> = (<name>PyFutureFeatures</name> *)<call><name>PyObject_Malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyFutureFeatures</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ff</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ff</name>-&gt;<name>ff_features</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff</name>-&gt;<name>ff_lineno</name></name> = -1</expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>future_parse</name><argument_list>(<argument><expr><name>ff</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyObject_Free</name><argument_list>(<argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>ff</name></expr>;</return>
}</block></function>
</unit>
