<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Python/thread_pthread.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PTHREAD_DESTRUCTOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>destructor</name></cpp:macro> <cpp:value>xxdestructor</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PTHREAD_DESTRUCTOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>destructor</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_THREAD_ATTR_STACKSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>THREAD_STACK_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_STACK_SIZE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_STACK_MIN</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>THREAD_STACK_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> "THREAD_STACK_SIZE defined but _POSIX_THREAD_ATTR_STACKSIZE undefined"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_SEMAPHORES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>_POSIX_SEMAPHORES</name>+0) == -1</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_BROKEN_POSIX_SEMAPHORES</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;semaphore.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;osreldate.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__FreeBSD_version</name> &gt;= 500000 &amp;&amp; <name>__FreeBSD_version</name> &lt; 504101</expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PTHREAD_SYSTEM_SCHED_SUPPORTED</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>pthread_attr_default</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_attr_default</name></cpp:macro> <cpp:value>((pthread_attr_t *)NULL)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>pthread_mutexattr_default</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_mutexattr_default</name></cpp:macro> <cpp:value>((pthread_mutexattr_t *)NULL)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>pthread_condattr_default</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_condattr_default</name></cpp:macro> <cpp:value>((pthread_condattr_t *)NULL)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_SEMAPHORES</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BROKEN_POSIX_SEMAPHORES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_SEMAPHORES</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>USE_SEMAPHORES</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PTHREAD_SIGMASK</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BROKEN_PTHREAD_SIGMASK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_THREAD_SIGMASK</name></cpp:macro> <cpp:value>pthread_sigmask</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_THREAD_SIGMASK</name></cpp:macro> <cpp:value>sigprocmask</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name>locked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>lock_released</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mut</name></decl>;</decl_stmt>
}</block></struct></type> <name>pthread_lock</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_STATUS</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if (status != 0) { perror(name); error = 1; }</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_HAVE_BSDI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier>
<name>void</name></type> <name>_noop</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PyThread__init_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dummy</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread1</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr>&amp;<name>thread1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>void</name> *) <name>_noop</name></expr></argument>, <argument><expr>&amp;<name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>thread1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PyThread__init_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>pthread_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>long</name></type>
<name>PyThread_start_new_thread</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>pthread_t</name></type> <name>th</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>THREAD_STACK_SIZE</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>PTHREAD_SYSTEM_SCHED_SUPPORTED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>pthread_attr_t</name></type> <name>attrs</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>THREAD_STACK_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>tss</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_start_new_thread called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyThread_init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>THREAD_STACK_SIZE</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>PTHREAD_SYSTEM_SCHED_SUPPORTED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>pthread_attr_init</name><argument_list>(<argument><expr>&amp;<name>attrs</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>THREAD_STACK_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tss</name> = (<name>_pythread_stacksize</name> != 0) ? <name>_pythread_stacksize</name>
: <name>THREAD_STACK_SIZE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tss</name> != 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>pthread_attr_setstacksize</name><argument_list>(<argument><expr>&amp;<name>attrs</name></expr></argument>, <argument><expr><name>tss</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>pthread_attr_destroy</name><argument_list>(<argument><expr>&amp;<name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTHREAD_SYSTEM_SCHED_SUPPORTED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>pthread_attr_setscope</name><argument_list>(<argument><expr>&amp;<name>attrs</name></expr></argument>, <argument><expr><name>PTHREAD_SCOPE_SYSTEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>status</name> = <call><name>pthread_create</name><argument_list>(<argument><expr>&amp;<name>th</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>THREAD_STACK_SIZE</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>PTHREAD_SYSTEM_SCHED_SUPPORTED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr>&amp;<name>attrs</name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<argument><expr>(<name>pthread_attr_t</name>*)<name>NULL</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr>(<call><call><name>void</name>* <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></call>)<name>func</name></expr></argument>,
<argument><expr>(<name>void</name> *)<name>arg</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>THREAD_STACK_SIZE</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>PTHREAD_SYSTEM_SCHED_SUPPORTED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>pthread_attr_destroy</name><argument_list>(<argument><expr>&amp;<name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>status</name> != 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>pthread_detach</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_PTHREAD_T</name> &lt;= <name>SIZEOF_LONG</name></expr></cpp:if>
<return>return <expr>(<name>long</name>) <name>th</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr>(<name>long</name>) *(<name>long</name> *) &amp;<name>th</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><name>long</name></type>
<name>PyThread_get_thread_ident</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>volatile</specifier> <name>pthread_t</name></type> <name>threadid</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyThread_init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>threadid</name> = <call><name>pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_PTHREAD_T</name> &lt;= <name>SIZEOF_LONG</name></expr></cpp:if>
<return>return <expr>(<name>long</name>) <name>threadid</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr>(<name>long</name>) *(<name>long</name> *) &amp;<name>threadid</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_PyThread_exit_thread</name><parameter_list>(<param><decl><type><name>int</name></type> <name>no_cleanup</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_exit_thread called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>no_cleanup</name></expr>)</condition><then>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread_exit_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>do_PyThread_exit_thread</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread__exit_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>do_PyThread_exit_thread</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NO_EXIT_PROG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_PyThread_exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>, <param><decl><type><name>int</name></type> <name>no_cleanup</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_exit_prog(%d) called\n", <name>status</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
<if>if <condition>(<expr><name>no_cleanup</name></expr>)</condition><then>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></then></if>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread_exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>do_PyThread_exit_prog</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread__exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>do_PyThread_exit_prog</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SEMAPHORES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>PyThread_type_lock</name></type>
<name>PyThread_allocate_lock</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>sem_t</name> *</type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>, <decl><type ref="prev"/><name>error</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_allocate_lock called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyThread_init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>lock</name> = (<name>sem_t</name> *)<call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sem_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lock</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>sem_init</name><argument_list>(<argument><expr><name>lock</name></expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_STATUS</name><argument_list>(<argument><expr>"sem_init"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr>(<name>void</name> *)<name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lock</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_allocate_lock() -&gt; %p\n", <name>lock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyThread_type_lock</name>)<name>lock</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread_free_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>lock</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>sem_t</name> *</type><name>thelock</name> <init>= <expr>(<name>sem_t</name> *)<name>lock</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>, <decl><type ref="prev"/><name>error</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_free_lock(%p) called\n", <name>lock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>thelock</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>status</name> = <call><name>sem_destroy</name><argument_list>(<argument><expr><name>thelock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_STATUS</name><argument_list>(<argument><expr>"sem_destroy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr>(<name>void</name> *)<name>thelock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>fix_status</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<name>status</name> == -1) ? <name>errno</name> : <name>status</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyThread_acquire_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>lock</name></decl></param>, <param><decl><type><name>int</name></type> <name>waitflag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>success</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sem_t</name> *</type><name>thelock</name> <init>= <expr>(<name>sem_t</name> *)<name>lock</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>, <decl><type ref="prev"/><name>error</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_acquire_lock(%p, %d) called\n", <name>lock</name>, <name>waitflag</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<if>if <condition>(<expr><name>waitflag</name></expr>)</condition><then>
<expr_stmt><expr><name>status</name> = <call><name>fix_status</name><argument_list>(<argument><expr><call><name>sem_wait</name><argument_list>(<argument><expr><name>thelock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>status</name> = <call><name>fix_status</name><argument_list>(<argument><expr><call><name>sem_trywait</name><argument_list>(<argument><expr><name>thelock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block> while <condition>(<expr><name>status</name> == <name>EINTR</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name>waitflag</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CHECK_STATUS</name><argument_list>(<argument><expr>"sem_wait"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>status</name> != <name>EAGAIN</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CHECK_STATUS</name><argument_list>(<argument><expr>"sem_trywait"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><name>success</name> = (<name>status</name> == 0) ? 1 : 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_acquire_lock(%p, %d) -&gt; %d\n", <name>lock</name>, <name>waitflag</name>, <name>success</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>success</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread_release_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>lock</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>sem_t</name> *</type><name>thelock</name> <init>= <expr>(<name>sem_t</name> *)<name>lock</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>, <decl><type ref="prev"/><name>error</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_release_lock(%p) called\n", <name>lock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>sem_post</name><argument_list>(<argument><expr><name>thelock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_STATUS</name><argument_list>(<argument><expr>"sem_post"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>PyThread_type_lock</name></type>
<name>PyThread_allocate_lock</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>pthread_lock</name> *</type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>, <decl><type ref="prev"/><name>error</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_allocate_lock called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyThread_init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>lock</name> = (<name>pthread_lock</name> *) <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pthread_lock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lock</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>(<name>void</name> *)<name>lock</name></expr></argument>, <argument><expr>'\0'</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pthread_lock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lock</name>-&gt;<name>locked</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>pthread_mutex_init</name><argument_list>(<argument><expr>&amp;<name><name>lock</name>-&gt;<name>mut</name></name></expr></argument>,
<argument><expr><name>pthread_mutexattr_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_STATUS</name><argument_list>(<argument><expr>"pthread_mutex_init"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>pthread_cond_init</name><argument_list>(<argument><expr>&amp;<name><name>lock</name>-&gt;<name>lock_released</name></name></expr></argument>,
<argument><expr><name>pthread_condattr_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_STATUS</name><argument_list>(<argument><expr>"pthread_cond_init"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr>(<name>void</name> *)<name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lock</name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_allocate_lock() -&gt; %p\n", <name>lock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyThread_type_lock</name>) <name>lock</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread_free_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>lock</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>pthread_lock</name> *</type><name>thelock</name> <init>= <expr>(<name>pthread_lock</name> *)<name>lock</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>, <decl><type ref="prev"/><name>error</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_free_lock(%p) called\n", <name>lock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>pthread_mutex_destroy</name><argument_list>( <argument><expr>&amp;<name><name>thelock</name>-&gt;<name>mut</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_STATUS</name><argument_list>(<argument><expr>"pthread_mutex_destroy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>pthread_cond_destroy</name><argument_list>( <argument><expr>&amp;<name><name>thelock</name>-&gt;<name>lock_released</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_STATUS</name><argument_list>(<argument><expr>"pthread_cond_destroy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr>(<name>void</name> *)<name>thelock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type>
<name>PyThread_acquire_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>lock</name></decl></param>, <param><decl><type><name>int</name></type> <name>waitflag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>success</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_lock</name> *</type><name>thelock</name> <init>= <expr>(<name>pthread_lock</name> *)<name>lock</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>, <decl><type ref="prev"/><name>error</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_acquire_lock(%p, %d) called\n", <name>lock</name>, <name>waitflag</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>pthread_mutex_lock</name><argument_list>( <argument><expr>&amp;<name><name>thelock</name>-&gt;<name>mut</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_STATUS</name><argument_list>(<argument><expr>"pthread_mutex_lock[1]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> = <name><name>thelock</name>-&gt;<name>locked</name></name> == 0</expr>;</expr_stmt>
<if>if <condition>( <expr>!<name>success</name> &amp;&amp; <name>waitflag</name></expr> )</condition><then> <block>{
<while>while <condition>( <expr><name><name>thelock</name>-&gt;<name>locked</name></name></expr> )</condition> <block>{
<expr_stmt><expr><name>status</name> = <call><name>pthread_cond_wait</name><argument_list>(<argument><expr>&amp;<name><name>thelock</name>-&gt;<name>lock_released</name></name></expr></argument>,
<argument><expr>&amp;<name><name>thelock</name>-&gt;<name>mut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_STATUS</name><argument_list>(<argument><expr>"pthread_cond_wait"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>success</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>success</name></expr>)</condition><then> <expr_stmt><expr><name><name>thelock</name>-&gt;<name>locked</name></name> = 1</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>status</name> = <call><name>pthread_mutex_unlock</name><argument_list>( <argument><expr>&amp;<name><name>thelock</name>-&gt;<name>mut</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_STATUS</name><argument_list>(<argument><expr>"pthread_mutex_unlock[1]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <expr_stmt><expr><name>success</name> = 0</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_acquire_lock(%p, %d) -&gt; %d\n", <name>lock</name>, <name>waitflag</name>, <name>success</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>success</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread_release_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>lock</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>pthread_lock</name> *</type><name>thelock</name> <init>= <expr>(<name>pthread_lock</name> *)<name>lock</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>, <decl><type ref="prev"/><name>error</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_release_lock(%p) called\n", <name>lock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>pthread_mutex_lock</name><argument_list>( <argument><expr>&amp;<name><name>thelock</name>-&gt;<name>mut</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_STATUS</name><argument_list>(<argument><expr>"pthread_mutex_lock[3]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thelock</name>-&gt;<name>locked</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>pthread_mutex_unlock</name><argument_list>( <argument><expr>&amp;<name><name>thelock</name>-&gt;<name>mut</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_STATUS</name><argument_list>(<argument><expr>"pthread_mutex_unlock[3]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>pthread_cond_signal</name><argument_list>( <argument><expr>&amp;<name><name>thelock</name>-&gt;<name>lock_released</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_STATUS</name><argument_list>(<argument><expr>"pthread_cond_signal"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>_pythread_pthread_set_stacksize</name><parameter_list>(<param><decl><type><name>size_t</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>THREAD_STACK_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>pthread_attr_t</name></type> <name>attrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tss_min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>size</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>_pythread_stacksize</name> = 0</expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>THREAD_STACK_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTHREAD_STACK_MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tss_min</name> = <name>PTHREAD_STACK_MIN</name> &gt; <name>THREAD_STACK_MIN</name> ? <name>PTHREAD_STACK_MIN</name>
: <name>THREAD_STACK_MIN</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>tss_min</name> = <name>THREAD_STACK_MIN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>size</name> &gt;= <name>tss_min</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>pthread_attr_init</name><argument_list>(<argument><expr>&amp;<name>attrs</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>pthread_attr_setstacksize</name><argument_list>(<argument><expr>&amp;<name>attrs</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_attr_destroy</name><argument_list>(<argument><expr>&amp;<name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>_pythread_stacksize</name> = <name>size</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<return>return <expr>-1</expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr>-2</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_SET_STACKSIZE</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_pythread_pthread_set_stacksize(x)</cpp:value></cpp:define>
</unit>
