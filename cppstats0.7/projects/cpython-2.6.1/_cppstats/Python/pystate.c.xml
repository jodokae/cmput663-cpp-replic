<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Python/pystate.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLOPEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLFCN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>RTLD_LAZY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTLD_LAZY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pythread.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyThread_type_lock</name></type> <name>head_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEAD_INIT</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(void)(head_mutex || (head_mutex = PyThread_allocate_lock()))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEAD_LOCK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>PyThread_acquire_lock(head_mutex, WAIT_LOCK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEAD_UNLOCK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>PyThread_release_lock(head_mutex)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyInterpreterState</name> *</type><name>autoInterpreterState</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>autoTLSkey</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEAD_INIT</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEAD_LOCK</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEAD_UNLOCK</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyInterpreterState</name> *</type><name>interp_head</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyThreadState</name> *</type><name>_PyThreadState_Current</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyThreadFrameGetter</name></type> <name>_PyThreadState_GetFrame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_PyGILState_NoteThreadState</name><parameter_list>(<param><decl><type><name>PyThreadState</name>*</type> <name>tstate</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>PyInterpreterState</name> *</type>
<name>PyInterpreterState_New</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyInterpreterState</name> *</type><name>interp</name> <init>= <expr>(<name>PyInterpreterState</name> *)
<call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyInterpreterState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>interp</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>HEAD_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>head_mutex</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"Can't initialize threads for interpreter"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>interp</name>-&gt;<name>modules</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interp</name>-&gt;<name>modules_reloading</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interp</name>-&gt;<name>sysdict</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interp</name>-&gt;<name>builtins</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interp</name>-&gt;<name>tstate_head</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interp</name>-&gt;<name>codec_search_path</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interp</name>-&gt;<name>codec_search_cache</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interp</name>-&gt;<name>codec_error_registry</name></name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLOPEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RTLD_NOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>interp</name>-&gt;<name>dlopenflags</name></name> = <name>RTLD_NOW</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>interp</name>-&gt;<name>dlopenflags</name></name> = <name>RTLD_LAZY</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_TSC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>interp</name>-&gt;<name>tscdump</name></name> = 0</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>HEAD_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interp</name>-&gt;<name>next</name></name> = <name>interp_head</name></expr>;</expr_stmt>
<expr_stmt><expr><name>interp_head</name> = <name>interp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEAD_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>interp</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>PyInterpreterState_Clear</name><parameter_list>(<param><decl><type><name>PyInterpreterState</name> *</type><name>interp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyThreadState</name> *</type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>HEAD_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>p</name> = <name><name>interp</name>-&gt;<name>tstate_head</name></name></expr>;</init> <condition><expr><name>p</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> = <name><name>p</name>-&gt;<name>next</name></name></expr></incr>)
<expr_stmt><expr><call><name>PyThreadState_Clear</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<expr_stmt><expr><call><name>HEAD_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>interp</name>-&gt;<name>codec_search_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>interp</name>-&gt;<name>codec_search_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>interp</name>-&gt;<name>codec_error_registry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>interp</name>-&gt;<name>modules</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>interp</name>-&gt;<name>modules_reloading</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>interp</name>-&gt;<name>sysdict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>interp</name>-&gt;<name>builtins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>zapthreads</name><parameter_list>(<param><decl><type><name>PyInterpreterState</name> *</type><name>interp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyThreadState</name> *</type><name>p</name></decl>;</decl_stmt>
<while>while <condition>(<expr>(<name>p</name> = <name><name>interp</name>-&gt;<name>tstate_head</name></name>) != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>PyThreadState_Delete</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></function>
<function><type><name>void</name></type>
<name>PyInterpreterState_Delete</name><parameter_list>(<param><decl><type><name>PyInterpreterState</name> *</type><name>interp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyInterpreterState</name> **</type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>zapthreads</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEAD_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>p</name> = &amp;<name>interp_head</name></expr>;</init> <condition>;</condition> <incr><expr><name>p</name> = &amp;<name>(*<name>p</name>)-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr>*<name>p</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(
<argument><expr>"PyInterpreterState_Delete: invalid interp"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>*<name>p</name> == <name>interp</name></expr>)</condition><then>
<break>break;</break></then></if>
}</block></for>
<if>if <condition>(<expr><name><name>interp</name>-&gt;<name>tstate_head</name></name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"PyInterpreterState_Delete: remaining threads"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr>*<name>p</name> = <name><name>interp</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEAD_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> struct <name>_frame</name> *</type>
<name>threadstate_getframe</name><parameter_list>(<param><decl><type><name>PyThreadState</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>self</name>-&gt;<name>frame</name></name></expr>;</return>
}</block></function>
<function><type><name>PyThreadState</name> *</type>
<name>PyThreadState_New</name><parameter_list>(<param><decl><type><name>PyInterpreterState</name> *</type><name>interp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyThreadState</name> *</type><name>tstate</name> <init>= <expr>(<name>PyThreadState</name> *)<call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyThreadState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>_PyThreadState_GetFrame</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>_PyThreadState_GetFrame</name> = <name>threadstate_getframe</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>tstate</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>interp</name></name> = <name>interp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>frame</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>recursion_depth</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>tracing</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>use_tracing</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>tick_counter</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>gilstate_counter</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>async_exc</name></name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>thread_id</name></name> = <call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>thread_id</name></name> = 0</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>dict</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>curexc_type</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>curexc_value</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>curexc_traceback</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>exc_type</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>exc_value</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>exc_traceback</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>c_profilefunc</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>c_tracefunc</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>c_profileobj</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>c_traceobj</name></name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_PyGILState_NoteThreadState</name><argument_list>(<argument><expr><name>tstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>HEAD_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>next</name></name> = <name><name>interp</name>-&gt;<name>tstate_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interp</name>-&gt;<name>tstate_head</name></name> = <name>tstate</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEAD_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>tstate</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>PyThreadState_Clear</name><parameter_list>(<param><decl><type><name>PyThreadState</name> *</type><name>tstate</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>Py_VerboseFlag</name> &amp;&amp; <name><name>tstate</name>-&gt;<name>frame</name></name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>"PyThreadState_Clear: warning: thread still has a frame\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>tstate</name>-&gt;<name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>tstate</name>-&gt;<name>dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>tstate</name>-&gt;<name>async_exc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>tstate</name>-&gt;<name>curexc_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>tstate</name>-&gt;<name>curexc_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>tstate</name>-&gt;<name>curexc_traceback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>tstate</name>-&gt;<name>exc_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>tstate</name>-&gt;<name>exc_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>tstate</name>-&gt;<name>exc_traceback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>c_profilefunc</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>c_tracefunc</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>tstate</name>-&gt;<name>c_profileobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>tstate</name>-&gt;<name>c_traceobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tstate_delete_common</name><parameter_list>(<param><decl><type><name>PyThreadState</name> *</type><name>tstate</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyInterpreterState</name> *</type><name>interp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyThreadState</name> **</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyThreadState</name> *</type><name>prev_p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>tstate</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"PyThreadState_Delete: NULL tstate"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>interp</name> = <name><name>tstate</name>-&gt;<name>interp</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>interp</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"PyThreadState_Delete: NULL interp"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>HEAD_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>p</name> = &amp;<name><name>interp</name>-&gt;<name>tstate_head</name></name></expr>;</init> <condition>;</condition> <incr><expr><name>p</name> = &amp;<name>(*<name>p</name>)-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr>*<name>p</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(
<argument><expr>"PyThreadState_Delete: invalid tstate"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>*<name>p</name> == <name>tstate</name></expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr>*<name>p</name> == <name>prev_p</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(
<argument><expr>"PyThreadState_Delete: small circular list(!)"
" and tstate not found."</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>prev_p</name> = *<name>p</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>(*<name>p</name>)-&gt;<name>next</name></name> == <name><name>interp</name>-&gt;<name>tstate_head</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(
<argument><expr>"PyThreadState_Delete: circular list(!) and"
" tstate not found."</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr>*<name>p</name> = <name><name>tstate</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEAD_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>PyThreadState_Delete</name><parameter_list>(<param><decl><type><name>PyThreadState</name> *</type><name>tstate</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>tstate</name> == <name>_PyThreadState_Current</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"PyThreadState_Delete: tstate is still current"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>tstate_delete_common</name><argument_list>(<argument><expr><name>tstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>autoTLSkey</name> &amp;&amp; <call><name>PyThread_get_key_value</name><argument_list>(<argument><expr><name>autoTLSkey</name></expr></argument>)</argument_list></call> == <name>tstate</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyThread_delete_key_value</name><argument_list>(<argument><expr><name>autoTLSkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>PyThreadState_DeleteCurrent</name><parameter_list>()</parameter_list> <block>{
<decl_stmt><decl><type><name>PyThreadState</name> *</type><name>tstate</name> <init>= <expr><name>_PyThreadState_Current</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>tstate</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(
<argument><expr>"PyThreadState_DeleteCurrent: no current tstate"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>_PyThreadState_Current</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tstate_delete_common</name><argument_list>(<argument><expr><name>tstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>autoTLSkey</name> &amp;&amp; <call><name>PyThread_get_key_value</name><argument_list>(<argument><expr><name>autoTLSkey</name></expr></argument>)</argument_list></call> == <name>tstate</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyThread_delete_key_value</name><argument_list>(<argument><expr><name>autoTLSkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>PyEval_ReleaseLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>PyThreadState</name> *</type>
<name>PyThreadState_Get</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>_PyThreadState_Current</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"PyThreadState_Get: no current thread"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>_PyThreadState_Current</name></expr>;</return>
}</block></function>
<function><type><name>PyThreadState</name> *</type>
<name>PyThreadState_Swap</name><parameter_list>(<param><decl><type><name>PyThreadState</name> *</type><name>newts</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyThreadState</name> *</type><name>oldts</name> <init>= <expr><name>_PyThreadState_Current</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>_PyThreadState_Current</name> = <name>newts</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>newts</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyThreadState</name> *</type><name>check</name> <init>= <expr><call><name>PyGILState_GetThisThreadState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>check</name> &amp;&amp; <name><name>check</name>-&gt;<name>interp</name></name> == <name><name>newts</name>-&gt;<name>interp</name></name> &amp;&amp; <name>check</name> != <name>newts</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"Invalid thread state for this thread"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>errno</name> = <name>err</name></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>oldts</name></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyThreadState_GetDict</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>_PyThreadState_Current</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>_PyThreadState_Current</name>-&gt;<name>dict</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>_PyThreadState_Current</name>-&gt;<name>dict</name></name> = <name>d</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>d</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<return>return <expr><name><name>_PyThreadState_Current</name>-&gt;<name>dict</name></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyThreadState_SetAsyncExc</name><parameter_list>(<param><decl><type><name>long</name></type> <name>id</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyThreadState</name> *</type><name>tstate</name> <init>= <expr><call><name>PyThreadState_GET</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyInterpreterState</name> *</type><name>interp</name> <init>= <expr><name><name>tstate</name>-&gt;<name>interp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyThreadState</name> *</type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>HEAD_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>p</name> = <name><name>interp</name>-&gt;<name>tstate_head</name></name></expr>;</init> <condition><expr><name>p</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> = <name><name>p</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>p</name>-&gt;<name>thread_id</name></name> == <name>id</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>old_exc</name> <init>= <expr><name><name>p</name>-&gt;<name>async_exc</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>async_exc</name></name> = <name>exc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEAD_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>old_exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>HEAD_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>PyInterpreterState</name> *</type>
<name>PyInterpreterState_Head</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<return>return <expr><name>interp_head</name></expr>;</return>
}</block></function>
<function><type><name>PyInterpreterState</name> *</type>
<name>PyInterpreterState_Next</name><parameter_list>(<param><decl><type><name>PyInterpreterState</name> *</type><name>interp</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>interp</name>-&gt;<name>next</name></name></expr>;</return>
}</block></function>
<function><type><name>PyThreadState</name> *</type>
<name>PyInterpreterState_ThreadHead</name><parameter_list>(<param><decl><type><name>PyInterpreterState</name> *</type><name>interp</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>interp</name>-&gt;<name>tstate_head</name></name></expr>;</return>
}</block></function>
<function><type><name>PyThreadState</name> *</type>
<name>PyThreadState_Next</name><parameter_list>(<param><decl><type><name>PyThreadState</name> *</type><name>tstate</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>tstate</name>-&gt;<name>next</name></name></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>_PyThread_CurrentFrames</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyInterpreterState</name> *</type><name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>HEAD_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = <name>interp_head</name></expr>;</init> <condition><expr><name>i</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>i</name> = <name><name>i</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>PyThreadState</name> *</type><name>t</name></decl>;</decl_stmt>
<for>for (<init><expr><name>t</name> = <name><name>i</name>-&gt;<name>tstate_head</name></name></expr>;</init> <condition><expr><name>t</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>t</name> = <name><name>t</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>_frame</name> *</type><name>frame</name> <init>= <expr><name><name>t</name>-&gt;<name>frame</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>frame</name> == <name>NULL</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>id</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>t</name>-&gt;<name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>id</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Fail</name>;</goto></then></if>
<expr_stmt><expr><name>stat</name> = <call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>stat</name> &lt; 0</expr>)</condition><then>
<goto>goto <name>Fail</name>;</goto></then></if>
}</block></for>
}</block></for>
<expr_stmt><expr><call><name>HEAD_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
<label><name>Fail</name>:</label>
<expr_stmt><expr><call><name>HEAD_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>PyThreadState_IsCurrent</name><parameter_list>(<param><decl><type><name>PyThreadState</name> *</type><name>tstate</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyGILState_GetThisThreadState</name><argument_list>()</argument_list></call>==<name>tstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tstate</name> == <name>_PyThreadState_Current</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>_PyGILState_Init</name><parameter_list>(<param><decl><type><name>PyInterpreterState</name> *</type><name>i</name></decl></param>, <param><decl><type><name>PyThreadState</name> *</type><name>t</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> &amp;&amp; <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>autoTLSkey</name> = <call><name>PyThread_create_key</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>autoInterpreterState</name> = <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyThread_get_key_value</name><argument_list>(<argument><expr><name>autoTLSkey</name></expr></argument>)</argument_list></call> == <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name>-&gt;<name>gilstate_counter</name></name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_PyGILState_NoteThreadState</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>_PyGILState_Fini</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyThread_delete_key</name><argument_list>(<argument><expr><name>autoTLSkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>autoTLSkey</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>autoInterpreterState</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_PyGILState_NoteThreadState</name><parameter_list>(<param><decl><type><name>PyThreadState</name>*</type> <name>tstate</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name>autoTLSkey</name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><call><name>PyThread_set_key_value</name><argument_list>(<argument><expr><name>autoTLSkey</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>tstate</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"Couldn't create autoTLSkey mapping"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>tstate</name>-&gt;<name>gilstate_counter</name></name> = 1</expr>;</expr_stmt>
}</block></function>
<function><type><name>PyThreadState</name> *</type>
<name>PyGILState_GetThisThreadState</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>autoInterpreterState</name> == <name>NULL</name> || <name>autoTLSkey</name> == 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr>(<name>PyThreadState</name> *)<call><name>PyThread_get_key_value</name><argument_list>(<argument><expr><name>autoTLSkey</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>PyGILState_STATE</name></type>
<name>PyGILState_Ensure</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyThreadState</name> *</type><name>tcur</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>autoInterpreterState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tcur</name> = (<name>PyThreadState</name> *)<call><name>PyThread_get_key_value</name><argument_list>(<argument><expr><name>autoTLSkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tcur</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>tcur</name> = <call><name>PyThreadState_New</name><argument_list>(<argument><expr><name>autoInterpreterState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tcur</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"Couldn't create thread-state for new thread"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>tcur</name>-&gt;<name>gilstate_counter</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>current</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>current</name> = <call><name>PyThreadState_IsCurrent</name><argument_list>(<argument><expr><name>tcur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>current</name> == 0</expr>)</condition><then>
<expr_stmt><expr><call><name>PyEval_RestoreThread</name><argument_list>(<argument><expr><name>tcur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr>++<name><name>tcur</name>-&gt;<name>gilstate_counter</name></name></expr>;</expr_stmt>
<return>return <expr><name>current</name> ? <name>PyGILState_LOCKED</name> : <name>PyGILState_UNLOCKED</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>PyGILState_Release</name><parameter_list>(<param><decl><type><name>PyGILState_STATE</name></type> <name>oldstate</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyThreadState</name> *</type><name>tcur</name> <init>= <expr>(<name>PyThreadState</name> *)<call><name>PyThread_get_key_value</name><argument_list>(
<argument><expr><name>autoTLSkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>tcur</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"auto-releasing thread-state, "
"but no thread-state for this thread"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <call><name>PyThreadState_IsCurrent</name><argument_list>(<argument><expr><name>tcur</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"This thread state must be current when releasing"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyThreadState_IsCurrent</name><argument_list>(<argument><expr><name>tcur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>--<name><name>tcur</name>-&gt;<name>gilstate_counter</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tcur</name>-&gt;<name>gilstate_counter</name></name> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>tcur</name>-&gt;<name>gilstate_counter</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>oldstate</name> == <name>PyGILState_UNLOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyThreadState_Clear</name><argument_list>(<argument><expr><name>tcur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyThreadState_DeleteCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr><name>oldstate</name> == <name>PyGILState_UNLOCKED</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyEval_SaveThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if></else></if>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
