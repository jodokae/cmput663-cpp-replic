<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Python/thread_os2.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCL_DOSPROCESS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCL_DOSSEMAPHORES</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"limits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"process.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PYCC_GCC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/builtin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/fmutex.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>long</name></type> <name>PyThread_get_thread_ident</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>THREAD_STACK_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_STACK_SIZE</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS2_STACKSIZE</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(x ? x : THREAD_STACK_SIZE)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PyThread__init_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
}</block></function>
<function><type><name>long</name></type>
<name>PyThread_start_new_thread</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>thread_id</name></decl>;</decl_stmt>
<expr_stmt><expr><name>thread_id</name> = <call><name>_beginthread</name><argument_list>(<argument><expr><name>func</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>OS2_STACKSIZE</name><argument_list>(<argument><expr><name>_pythread_stacksize</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>thread_id</name> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("_beginthread failed. return %ld\n", <name>errno</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>thread_id</name></expr>;</return>
}</block></function>
<function><type><name>long</name></type>
<name>PyThread_get_thread_ident</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PYCC_GCC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PPIB</name></type> <name>pib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PTIB</name></type> <name>tib</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyThread_init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PYCC_GCC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_gettid</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>DosGetInfoBlocks</name><argument_list>(<argument><expr>&amp;<name>tib</name></expr></argument>, <argument><expr>&amp;<name>pib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>tib</name>-&gt;<name>tib_ptib2</name>-&gt;<name>tib2_ultid</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_PyThread_exit_thread</name><parameter_list>(<param><decl><type><name>int</name></type> <name>no_cleanup</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_exit_thread called\n",
<call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
<if>if <condition>(<expr><name>no_cleanup</name></expr>)</condition><then>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></then></if>
<expr_stmt><expr><call><name>_endthread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread_exit_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>do_PyThread_exit_thread</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread__exit_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>do_PyThread_exit_thread</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NO_EXIT_PROG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_PyThread_exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>, <param><decl><type><name>int</name></type> <name>no_cleanup</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_exit_prog(%d) called\n", <name>status</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
<if>if <condition>(<expr><name>no_cleanup</name></expr>)</condition><then>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></then></if>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread_exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>do_PyThread_exit_prog</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread__exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>do_PyThread_exit_prog</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <name>os2_lock_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>is_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HEV</name></type> <name>changed</name></decl>;</decl_stmt>
}</block></struct></type> *<name>type_os2_lock</name>;</typedef>
<function><type><name>PyThread_type_lock</name></type>
<name>PyThread_allocate_lock</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PYCC_GCC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>_fmutex</name> *</type><name>sem</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_fmutex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyThread_init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_allocate_lock() -&gt; %lx\n",
<call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>,
(<name>long</name>)<name>sem</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>_fmutex_create</name><argument_list>(<argument><expr><name>sem</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sem</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>(<name>PyThread_type_lock</name>)<name>sem</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>APIRET</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>type_os2_lock</name></type> <name>lock</name> <init>= <expr>(<name>type_os2_lock</name>)<call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>os2_lock_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_allocate_lock called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyThread_init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>lock</name>-&gt;<name>is_set</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>DosCreateEventSem</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name><name>lock</name>-&gt;<name>changed</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_allocate_lock() -&gt; %p\n",
<call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>,
<name><name>lock</name>-&gt;<name>changed</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyThread_type_lock</name>)<name>lock</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread_free_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>aLock</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PYCC_GCC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>type_os2_lock</name></type> <name>lock</name> <init>= <expr>(<name>type_os2_lock</name>)<name>aLock</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_free_lock(%p) called\n",
<call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>,<name>aLock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PYCC_GCC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>aLock</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>_fmutex_close</name><argument_list>(<argument><expr>(<name>_fmutex</name> *)<name>aLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr>(<name>_fmutex</name> *)<name>aLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>DosCloseEventSem</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>changed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>aLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><name>int</name></type>
<name>PyThread_acquire_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>aLock</name></decl></param>, <param><decl><type><name>int</name></type> <name>waitflag</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PYCC_GCC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PID</name></type> <name>pid</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TID</name></type> <name>tid</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>type_os2_lock</name></type> <name>lock</name> <init>= <expr>(<name>type_os2_lock</name>)<name>aLock</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_acquire_lock(%p, %d) called\n",
<call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>,
<name>aLock</name>,
<name>waitflag</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PYCC_GCC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>aLock</name> &amp;&amp;
<call><name>_fmutex_request</name><argument_list>(<argument><expr>(<name>_fmutex</name> *)<name>aLock</name></expr></argument>, <argument><expr><name>waitflag</name> ? 0 : <name>_FMR_NOWAIT</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr>!<name>done</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>lock</name>-&gt;<name>is_set</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>waitflag</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><call><name>DosWaitEventSem</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>changed</name></name></expr></argument>, <argument><expr><name>SEM_INDEFINITE_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>DosEnterCritSec</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr>!<name><name>lock</name>-&gt;<name>is_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>lock</name>-&gt;<name>is_set</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>DosResetEventSem</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>changed</name></name></expr></argument>, <argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>DosExitCritSec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>PyThread_release_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>aLock</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PYCC_GCC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>type_os2_lock</name></type> <name>lock</name> <init>= <expr>(<name>type_os2_lock</name>)<name>aLock</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_release_lock(%p) called\n",
<call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>,
<name>aLock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PYCC_GCC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>aLock</name></expr>)</condition><then>
<expr_stmt><expr><call><name>_fmutex_release</name><argument_list>(<argument><expr>(<name>_fmutex</name> *)<name>aLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr>!<name><name>lock</name>-&gt;<name>is_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: Could not PyThread_release_lock(%p) error: %l\n",
<call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>,
<name>aLock</name>,
<call><name>GetLastError</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>DosEnterCritSec</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: Could not PyThread_release_lock(%p) error: %l\n",
<call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>,
<name>aLock</name>,
<call><name>GetLastError</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name><name>lock</name>-&gt;<name>is_set</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>DosPostEventSem</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>changed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DosExitCritSec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_MIN_STACKSIZE</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_MAX_STACKSIZE</name></cpp:macro> <cpp:value>0x2000000</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>_pythread_os2_set_stacksize</name><parameter_list>(<param><decl><type><name>size_t</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>size</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>_pythread_stacksize</name> = 0</expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>size</name> &gt;= <name>THREAD_MIN_STACKSIZE</name> &amp;&amp; <name>size</name> &lt; <name>THREAD_MAX_STACKSIZE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>_pythread_stacksize</name> = <name>size</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<return>return <expr>-1</expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_SET_STACKSIZE</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_pythread_os2_set_stacksize(x)</cpp:value></cpp:define>
</unit>
