<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Python/getopt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>_PyOS_opterr</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>_PyOS_optind</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>_PyOS_optarg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>_PyOS_GetOpt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>, <param><decl><type><name>char</name> *</type><name>optstring</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>opt_ptr</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>option</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>opt_ptr</name> == '\0'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>_PyOS_optind</name> &gt;= <name>argc</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>_PyOS_optind</name></expr>]</index></name></expr></argument>, <argument><expr>"/?"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>_PyOS_optind</name></expr>;</expr_stmt>
<return>return <expr>'h'</expr>;</return>
}</block></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else <if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>_PyOS_optind</name></expr>]</index><index>[<expr>0</expr>]</index></name> != '-' ||
<name><name>argv</name><index>[<expr><name>_PyOS_optind</name></expr>]</index><index>[<expr>1</expr>]</index></name> == '\0'</expr> )</condition><then>
<return>return <expr>-1</expr>;</return></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>_PyOS_optind</name></expr>]</index></name></expr></argument>, <argument><expr>"--"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>_PyOS_optind</name></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>_PyOS_optind</name></expr>]</index></name></expr></argument>, <argument><expr>"--help"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>_PyOS_optind</name></expr>;</expr_stmt>
<return>return <expr>'h'</expr>;</return>
}</block></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>_PyOS_optind</name></expr>]</index></name></expr></argument>, <argument><expr>"--version"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>_PyOS_optind</name></expr>;</expr_stmt>
<return>return <expr>'V'</expr>;</return>
}</block></then></if></else></if></else></if></else></if></else></if></else></if>
<expr_stmt><expr><name>opt_ptr</name> = &amp;<name><name>argv</name><index>[<expr><name>_PyOS_optind</name>++</expr>]</index><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>( <expr>(<name>option</name> = *<name>opt_ptr</name>++) == '\0'</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>option</name> == 'J'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"-J is reserved for Jython\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>'_'</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>option</name> == 'X'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>"-X is reserved for implementation-specific arguments\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>'_'</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>ptr</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>optstring</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>_PyOS_opterr</name></expr>)</condition><then>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Unknown option: -%c\n"</expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr>'_'</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>*(<name>ptr</name> + 1) == ':'</expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>opt_ptr</name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>_PyOS_optarg</name> = <name>opt_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>opt_ptr</name> = ""</expr>;</expr_stmt>
}</block></then>
<else>else <block>{
<if>if <condition>(<expr><name>_PyOS_optind</name> &gt;= <name>argc</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>_PyOS_opterr</name></expr>)</condition><then>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>"Argument expected for the -%c option\n"</expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr>'_'</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>_PyOS_optarg</name> = <name><name>argv</name><index>[<expr><name>_PyOS_optind</name>++</expr>]</index></name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>option</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
