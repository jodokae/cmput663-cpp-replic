<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="PC/_winreg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"malloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"windows.h"</cpp:file></cpp:include>
<function_decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>PyHKEY_AsHKEY</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ob</name></decl></param>, <param><decl><type><name>HKEY</name> *</type><name>pRes</name></decl></param>, <param><decl><type><name>BOOL</name></type> <name>bNoneOK</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>PyHKEY_FromHKEY</name><parameter_list>(<param><decl><type><name>HKEY</name></type> <name>h</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>PyHKEY_Close</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>obHandle</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>errNotAHandle</name><index>[]</index></name> <init>= <expr>"Object is not a handle"</expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_SetFromWindowsErrWithFunction</name><parameter_list>(<param><type><name>rc</name></type></param>, <param><type><name>fnname</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyErr_SetFromWindowsErr(rc)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>module_doc</name></expr></argument>,
<argument><expr>"This module provides access to the Windows registry API.\n"
"\n"
"Functions:\n"
"\n"
"CloseKey() - Closes a registry key.\n"
"ConnectRegistry() - Establishes a connection to a predefined registry handle\n"
" on another computer.\n"
"CreateKey() - Creates the specified key, or opens it if it already exists.\n"
"DeleteKey() - Deletes the specified key.\n"
"DeleteValue() - Removes a named value from the specified registry key.\n"
"EnumKey() - Enumerates subkeys of the specified open registry key.\n"
"EnumValue() - Enumerates values of the specified open registry key.\n"
"ExpandEnvironmentStrings() - Expand the env strings in a REG_EXPAND_SZ string.\n"
"FlushKey() - Writes all the attributes of the specified key to the registry.\n"
"LoadKey() - Creates a subkey under HKEY_USER or HKEY_LOCAL_MACHINE and stores\n"
" registration information from a specified file into that subkey.\n"
"OpenKey() - Alias for &lt;om win32api.RegOpenKeyEx&gt;\n"
"OpenKeyEx() - Opens the specified key.\n"
"QueryValue() - Retrieves the value associated with the unnamed value for a\n"
" specified key in the registry.\n"
"QueryValueEx() - Retrieves the type and data for a specified value name\n"
" associated with an open registry key.\n"
"QueryInfoKey() - Returns information about the specified key.\n"
"SaveKey() - Saves the specified key, and all its subkeys a file.\n"
"SetValue() - Associates a value with a specified key.\n"
"SetValueEx() - Stores data in the value field of an open registry key.\n"
"\n"
"Special objects:\n"
"\n"
"HKEYType -- type object for HKEY objects\n"
"error -- exception raised for Win32 errors\n"
"\n"
"Integer constants:\n"
"Many constants are defined - see the documentation for each function\n"
"to see what constants are used, and where."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>CloseKey_doc</name></expr></argument>,
<argument><expr>"CloseKey(hkey) - Closes a previously opened registry key.\n"
"\n"
"The hkey argument specifies a previously opened key.\n"
"\n"
"Note that if the key is not closed using this method, it will be\n"
"closed when the hkey object is destroyed by Python."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>ConnectRegistry_doc</name></expr></argument>,
<argument><expr>"key = ConnectRegistry(computer_name, key) - "
"Establishes a connection to a predefined registry handle on another computer.\n"
"\n"
"computer_name is the name of the remote computer, of the form \\\\computername.\n"
" If None, the local computer is used.\n"
"key is the predefined handle to connect to.\n"
"\n"
"The return value is the handle of the opened key.\n"
"If the function fails, an EnvironmentError exception is raised."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>CreateKey_doc</name></expr></argument>,
<argument><expr>"key = CreateKey(key, sub_key) - Creates or opens the specified key.\n"
"\n"
"key is an already open key, or one of the predefined HKEY_* constants\n"
"sub_key is a string that names the key this method opens or creates.\n"
" If key is one of the predefined keys, sub_key may be None. In that case,\n"
" the handle returned is the same key handle passed in to the function.\n"
"\n"
"If the key already exists, this function opens the existing key\n"
"\n"
"The return value is the handle of the opened key.\n"
"If the function fails, an exception is raised."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>DeleteKey_doc</name></expr></argument>,
<argument><expr>"DeleteKey(key, sub_key) - Deletes the specified key.\n"
"\n"
"key is an already open key, or any one of the predefined HKEY_* constants.\n"
"sub_key is a string that must be a subkey of the key identified by the key parameter.\n"
" This value must not be None, and the key may not have subkeys.\n"
"\n"
"This method can not delete keys with subkeys.\n"
"\n"
"If the method succeeds, the entire key, including all of its values,\n"
"is removed. If the method fails, an EnvironmentError exception is raised."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>DeleteValue_doc</name></expr></argument>,
<argument><expr>"DeleteValue(key, value) - Removes a named value from a registry key.\n"
"\n"
"key is an already open key, or any one of the predefined HKEY_* constants.\n"
"value is a string that identifies the value to remove."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>EnumKey_doc</name></expr></argument>,
<argument><expr>"string = EnumKey(key, index) - Enumerates subkeys of an open registry key.\n"
"\n"
"key is an already open key, or any one of the predefined HKEY_* constants.\n"
"index is an integer that identifies the index of the key to retrieve.\n"
"\n"
"The function retrieves the name of one subkey each time it is called.\n"
"It is typically called repeatedly until an EnvironmentError exception is\n"
"raised, indicating no more values are available."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>EnumValue_doc</name></expr></argument>,
<argument><expr>"tuple = EnumValue(key, index) - Enumerates values of an open registry key.\n"
"key is an already open key, or any one of the predefined HKEY_* constants.\n"
"index is an integer that identifies the index of the value to retrieve.\n"
"\n"
"The function retrieves the name of one subkey each time it is called.\n"
"It is typically called repeatedly, until an EnvironmentError exception\n"
"is raised, indicating no more values.\n"
"\n"
"The result is a tuple of 3 items:\n"
"value_name is a string that identifies the value.\n"
"value_data is an object that holds the value data, and whose type depends\n"
" on the underlying registry type.\n"
"data_type is an integer that identifies the type of the value data."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>ExpandEnvironmentStrings_doc</name></expr></argument>,
<argument><expr>"string = ExpandEnvironmentStrings(string) - Expand environment vars.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>FlushKey_doc</name></expr></argument>,
<argument><expr>"FlushKey(key) - Writes all the attributes of a key to the registry.\n"
"\n"
"key is an already open key, or any one of the predefined HKEY_* constants.\n"
"\n"
"It is not necessary to call RegFlushKey to change a key.\n"
"Registry changes are flushed to disk by the registry using its lazy flusher.\n"
"Registry changes are also flushed to disk at system shutdown.\n"
"Unlike CloseKey(), the FlushKey() method returns only when all the data has\n"
"been written to the registry.\n"
"An application should only call FlushKey() if it requires absolute certainty that registry changes are on disk.\n"
"If you don't know whether a FlushKey() call is required, it probably isn't."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>LoadKey_doc</name></expr></argument>,
<argument><expr>"LoadKey(key, sub_key, file_name) - Creates a subkey under the specified key\n"
"and stores registration information from a specified file into that subkey.\n"
"\n"
"key is an already open key, or any one of the predefined HKEY_* constants.\n"
"sub_key is a string that identifies the sub_key to load\n"
"file_name is the name of the file to load registry data from.\n"
" This file must have been created with the SaveKey() function.\n"
" Under the file allocation table (FAT) file system, the filename may not\n"
"have an extension.\n"
"\n"
"A call to LoadKey() fails if the calling process does not have the\n"
"SE_RESTORE_PRIVILEGE privilege.\n"
"\n"
"If key is a handle returned by ConnectRegistry(), then the path specified\n"
"in fileName is relative to the remote computer.\n"
"\n"
"The docs imply key must be in the HKEY_USER or HKEY_LOCAL_MACHINE tree"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>OpenKey_doc</name></expr></argument>,
<argument><expr>"key = OpenKey(key, sub_key, res = 0, sam = KEY_READ) - Opens the specified key.\n"
"\n"
"key is an already open key, or any one of the predefined HKEY_* constants.\n"
"sub_key is a string that identifies the sub_key to open\n"
"res is a reserved integer, and must be zero. Default is zero.\n"
"sam is an integer that specifies an access mask that describes the desired\n"
" security access for the key. Default is KEY_READ\n"
"\n"
"The result is a new handle to the specified key\n"
"If the function fails, an EnvironmentError exception is raised."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>OpenKeyEx_doc</name></expr></argument>, <argument><expr>"See OpenKey()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>QueryInfoKey_doc</name></expr></argument>,
<argument><expr>"tuple = QueryInfoKey(key) - Returns information about a key.\n"
"\n"
"key is an already open key, or any one of the predefined HKEY_* constants.\n"
"\n"
"The result is a tuple of 3 items:"
"An integer that identifies the number of sub keys this key has.\n"
"An integer that identifies the number of values this key has.\n"
"A long integer that identifies when the key was last modified (if available)\n"
" as 100's of nanoseconds since Jan 1, 1600."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>QueryValue_doc</name></expr></argument>,
<argument><expr>"string = QueryValue(key, sub_key) - retrieves the unnamed value for a key.\n"
"\n"
"key is an already open key, or any one of the predefined HKEY_* constants.\n"
"sub_key is a string that holds the name of the subkey with which the value\n"
" is associated. If this parameter is None or empty, the function retrieves\n"
" the value set by the SetValue() method for the key identified by key."
"\n"
"Values in the registry have name, type, and data components. This method\n"
"retrieves the data for a key's first value that has a NULL name.\n"
"But the underlying API call doesn't return the type, Lame Lame Lame, DONT USE THIS!!!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>QueryValueEx_doc</name></expr></argument>,
<argument><expr>"value,type_id = QueryValueEx(key, value_name) - Retrieves the type and data for a specified value name associated with an open registry key.\n"
"\n"
"key is an already open key, or any one of the predefined HKEY_* constants.\n"
"value_name is a string indicating the value to query"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>SaveKey_doc</name></expr></argument>,
<argument><expr>"SaveKey(key, file_name) - Saves the specified key, and all its subkeys to the specified file.\n"
"\n"
"key is an already open key, or any one of the predefined HKEY_* constants.\n"
"file_name is the name of the file to save registry data to.\n"
" This file cannot already exist. If this filename includes an extension,\n"
" it cannot be used on file allocation table (FAT) file systems by the\n"
" LoadKey(), ReplaceKey() or RestoreKey() methods.\n"
"\n"
"If key represents a key on a remote computer, the path described by\n"
"file_name is relative to the remote computer.\n"
"The caller of this method must possess the SeBackupPrivilege security privilege.\n"
"This function passes NULL for security_attributes to the API."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>SetValue_doc</name></expr></argument>,
<argument><expr>"SetValue(key, sub_key, type, value) - Associates a value with a specified key.\n"
"\n"
"key is an already open key, or any one of the predefined HKEY_* constants.\n"
"sub_key is a string that names the subkey with which the value is associated.\n"
"type is an integer that specifies the type of the data. Currently this\n"
" must be REG_SZ, meaning only strings are supported.\n"
"value is a string that specifies the new value.\n"
"\n"
"If the key specified by the sub_key parameter does not exist, the SetValue\n"
"function creates it.\n"
"\n"
"Value lengths are limited by available memory. Long values (more than\n"
"2048 bytes) should be stored as files with the filenames stored in \n"
"the configuration registry. This helps the registry perform efficiently.\n"
"\n"
"The key identified by the key parameter must have been opened with\n"
"KEY_SET_VALUE access."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>SetValueEx_doc</name></expr></argument>,
<argument><expr>"SetValueEx(key, value_name, reserved, type, value) - Stores data in the value field of an open registry key.\n"
"\n"
"key is an already open key, or any one of the predefined HKEY_* constants.\n"
"value_name is a string containing the name of the value to set, or None\n"
"type is an integer that specifies the type of the data. This should be one of:\n"
" REG_BINARY -- Binary data in any form.\n"
" REG_DWORD -- A 32-bit number.\n"
" REG_DWORD_LITTLE_ENDIAN -- A 32-bit number in little-endian format.\n"
" REG_DWORD_BIG_ENDIAN -- A 32-bit number in big-endian format.\n"
" REG_EXPAND_SZ -- A null-terminated string that contains unexpanded references\n"
" to environment variables (for example, %PATH%).\n"
" REG_LINK -- A Unicode symbolic link.\n"
" REG_MULTI_SZ -- An sequence of null-terminated strings, terminated by\n"
" two null characters. Note that Python handles this\n"
" termination automatically.\n"
" REG_NONE -- No defined value type.\n"
" REG_RESOURCE_LIST -- A device-driver resource list.\n"
" REG_SZ -- A null-terminated string.\n"
"reserved can be anything - zero is always passed to the API.\n"
"value is a string that specifies the new value.\n"
"\n"
"This method can also set additional value and type information for the\n"
"specified key. The key identified by the key parameter must have been\n"
"opened with KEY_SET_VALUE access.\n"
"\n"
"To open the key, use the CreateKeyEx() or OpenKeyEx() methods.\n"
"\n"
"Value lengths are limited by available memory. Long values (more than\n"
"2048 bytes) should be stored as files with the filenames stored in \n"
"the configuration registry. This helps the registry perform efficiently."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>DisableReflectionKey_doc</name></expr></argument>,
<argument><expr>"Disables registry reflection for 32-bit processes running on a 64-bit\n"
"Operating System. Will generally raise NotImplemented if executed on\n"
"a 32-bit Operating System.\n"
"If the key is not on the reflection list, the function succeeds but has no effect.\n"
"Disabling reflection for a key does not affect reflection of any subkeys."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>EnableReflectionKey_doc</name></expr></argument>,
<argument><expr>"Restores registry reflection for the specified disabled key.\n"
"Will generally raise NotImplemented if executed on a 32-bit Operating System.\n"
"Restoring reflection for a key does not affect reflection of any subkeys."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>QueryReflectionKey_doc</name></expr></argument>,
<argument><expr>"bool = QueryReflectionKey(hkey) - Determines the reflection state for the specified key.\n"
"Will generally raise NotImplemented if executed on a 32-bit Operating System.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>PyHKEY_doc</name></expr></argument>,
<argument><expr>"PyHKEY Object - A Python object, representing a win32 registry key.\n"
"\n"
"This object wraps a Windows HKEY object, automatically closing it when\n"
"the object is destroyed. To guarantee cleanup, you can call either\n"
"the Close() method on the PyHKEY, or the CloseKey() method.\n"
"\n"
"All functions which accept a handle object also accept an integer - \n"
"however, use of the handle object is encouraged.\n"
"\n"
"Functions:\n"
"Close() - Closes the underlying handle.\n"
"Detach() - Returns the integer Win32 handle, detaching it from the object\n"
"\n"
"Properties:\n"
"handle - The integer Win32 handle.\n"
"\n"
"Operations:\n"
"__nonzero__ - Handles with an open object return true, otherwise false.\n"
"__int__ - Converting a handle to an integer returns the Win32 handle.\n"
"__cmp__ - Handle objects are compared using the handle value."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>PyHKEY_Close_doc</name></expr></argument>,
<argument><expr>"key.Close() - Closes the underlying Windows handle.\n"
"\n"
"If the handle is already closed, no error is raised."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>PyHKEY_Detach_doc</name></expr></argument>,
<argument><expr>"int = key.Detach() - Detaches the Windows handle from the handle object.\n"
"\n"
"The result is the value of the handle before it is detached. If the\n"
"handle is already detached, this will return zero.\n"
"\n"
"After calling this function, the handle is effectively invalidated,\n"
"but the handle is not closed. You would call this function when you\n"
"need the underlying win32 handle to exist beyond the lifetime of the\n"
"handle object.\n"
"On 64 bit windows, the result of this function is a long integer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_VAR_HEAD</name>
<name>HKEY</name></type> <name>hkey</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyHKEYObject</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyHKEY_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((op)-&gt;ob_type == &amp;PyHKEY_Type)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>failMsg</name> <init>= <expr>"bad operand type"</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyHKEY_unaryFailureFunc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ob</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr><name>failMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyHKEY_binaryFailureFunc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ob1</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>ob2</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr><name>failMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyHKEY_ternaryFailureFunc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ob1</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>ob2</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>ob3</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr><name>failMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PyHKEY_deallocFunc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ob</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyHKEYObject</name> *</type><name>obkey</name> <init>= <expr>(<name>PyHKEYObject</name> *)<name>ob</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>obkey</name>-&gt;<name>hkey</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr>(<name>HKEY</name>)<name><name>obkey</name>-&gt;<name>hkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>PyObject_DEL</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>PyHKEY_nonzeroFunc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ob</name></decl></param>)</parameter_list> <block>{
<return>return <expr>((<name>PyHKEYObject</name> *)<name>ob</name>)-&gt;<name>hkey</name> != 0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyHKEY_intFunc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ob</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyHKEYObject</name> *</type><name>pyhkey</name> <init>= <expr>(<name>PyHKEYObject</name> *)<name>ob</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>PyLong_FromVoidPtr</name><argument_list>(<argument><expr><name><name>pyhkey</name>-&gt;<name>hkey</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>PyHKEY_printFunc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ob</name></decl></param>, <param><decl><type><name>FILE</name> *</type><name>fp</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyHKEYObject</name> *</type><name>pyhkey</name> <init>= <expr>(<name>PyHKEYObject</name> *)<name>ob</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>resBuf</name><index>[<expr>160</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>resBuf</name></expr></argument>, <argument><expr>"&lt;PyHKEY at %p (%p)&gt;"</expr></argument>,
<argument><expr><name>ob</name></expr></argument>, <argument><expr><name><name>pyhkey</name>-&gt;<name>hkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>resBuf</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyHKEY_strFunc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ob</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyHKEYObject</name> *</type><name>pyhkey</name> <init>= <expr>(<name>PyHKEYObject</name> *)<name>ob</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>resBuf</name><index>[<expr>160</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>resBuf</name></expr></argument>, <argument><expr>"&lt;PyHKEY:%p&gt;"</expr></argument>, <argument><expr><name><name>pyhkey</name>-&gt;<name>hkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>resBuf</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>PyHKEY_compareFunc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ob1</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>ob2</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyHKEYObject</name> *</type><name>pyhkey1</name> <init>= <expr>(<name>PyHKEYObject</name> *)<name>ob1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyHKEYObject</name> *</type><name>pyhkey2</name> <init>= <expr>(<name>PyHKEYObject</name> *)<name>ob2</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>pyhkey1</name> == <name>pyhkey2</name> ? 0 :
(<name>pyhkey1</name> &lt; <name>pyhkey2</name> ? -1 : 1)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>long</name></type>
<name>PyHKEY_hashFunc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ob</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>_Py_HashPointer</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyNumberMethods</name></type> <name>PyHKEY_NumberMethods</name> <init>= <expr><block>{
<expr><name>PyHKEY_binaryFailureFunc</name></expr>,
<expr><name>PyHKEY_binaryFailureFunc</name></expr>,
<expr><name>PyHKEY_binaryFailureFunc</name></expr>,
<expr><name>PyHKEY_binaryFailureFunc</name></expr>,
<expr><name>PyHKEY_binaryFailureFunc</name></expr>,
<expr><name>PyHKEY_binaryFailureFunc</name></expr>,
<expr><name>PyHKEY_ternaryFailureFunc</name></expr>,
<expr><name>PyHKEY_unaryFailureFunc</name></expr>,
<expr><name>PyHKEY_unaryFailureFunc</name></expr>,
<expr><name>PyHKEY_unaryFailureFunc</name></expr>,
<expr><name>PyHKEY_nonzeroFunc</name></expr>,
<expr><name>PyHKEY_unaryFailureFunc</name></expr>,
<expr><name>PyHKEY_binaryFailureFunc</name></expr>,
<expr><name>PyHKEY_binaryFailureFunc</name></expr>,
<expr><name>PyHKEY_binaryFailureFunc</name></expr>,
<expr><name>PyHKEY_binaryFailureFunc</name></expr>,
<expr><name>PyHKEY_binaryFailureFunc</name></expr>,
<expr>0</expr>,
<expr><name>PyHKEY_intFunc</name></expr>,
<expr><name>PyHKEY_unaryFailureFunc</name></expr>,
<expr><name>PyHKEY_unaryFailureFunc</name></expr>,
<expr><name>PyHKEY_unaryFailureFunc</name></expr>,
<expr><name>PyHKEY_unaryFailureFunc</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>PyHKEY_getattr</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyHKEY_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"PyHKEY"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyHKEYObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr><name>PyHKEY_deallocFunc</name></expr>,
<expr><name>PyHKEY_printFunc</name></expr>,
<expr><name>PyHKEY_getattr</name></expr>,
<expr>0</expr>,
<expr><name>PyHKEY_compareFunc</name></expr>,
<expr>0</expr>,
<expr>&amp;<name>PyHKEY_NumberMethods</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyHKEY_hashFunc</name></expr>,
<expr>0</expr>,
<expr><name>PyHKEY_strFunc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyHKEY_doc</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name><parameter_list>(<param><type><name>e</name></type></param>)</parameter_list></cpp:macro> <cpp:value>offsetof(PyHKEYObject, e)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>memberlist</name></type> <name><name>PyHKEY_memberlist</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"handle"</expr>, <expr><name>T_INT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>hkey</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyHKEY_CloseMethod</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":Close"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyHKEY_Close</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyHKEY_DetachMethod</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name>*</type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyHKEYObject</name> *</type><name>pThis</name> <init>= <expr>(<name>PyHKEYObject</name> *)<name>self</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":Detach"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>ret</name> = (<name>void</name>*)<name><name>pThis</name>-&gt;<name>hkey</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pThis</name>-&gt;<name>hkey</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><call><name>PyLong_FromVoidPtr</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyHKEY_Enter</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>self</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyHKEY_Exit</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>PyHKEY_Close</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>PyHKEY_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"Close"</expr>, <expr><name>PyHKEY_CloseMethod</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>PyHKEY_Close_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"Detach"</expr>, <expr><name>PyHKEY_DetachMethod</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>PyHKEY_Detach_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"__enter__"</expr>, <expr>(<name>PyCFunction</name>)<name>PyHKEY_Enter</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"__exit__"</expr>, <expr><name>PyHKEY_Exit</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>PyObject</name> *</type>
<name>PyHKEY_getattr</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> = <call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>PyHKEY_methods</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>res</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"handle"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><call><name>PyLong_FromVoidPtr</name><argument_list>(<argument><expr>((<name>PyHKEYObject</name> *)<name>self</name>)-&gt;<name>hkey</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>PyMember_Get</name><argument_list>(<argument><expr>(<name>char</name> *)<name>self</name></expr></argument>, <argument><expr><name>PyHKEY_memberlist</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyHKEY_New</name><parameter_list>(<param><decl><type><name>HKEY</name></type> <name>hInit</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyHKEYObject</name> *</type><name>key</name> <init>= <expr><call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>PyHKEYObject</name></expr></argument>, <argument><expr>&amp;<name>PyHKEY_Type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>key</name></expr>)</condition><then>
<expr_stmt><expr><name><name>key</name>-&gt;<name>hkey</name></name> = <name>hInit</name></expr>;</expr_stmt></then></if>
<return>return <expr>(<name>PyObject</name> *)<name>key</name></expr>;</return>
}</block></function>
<function><type><name>BOOL</name></type>
<name>PyHKEY_Close</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ob_handle</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>LONG</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyHKEYObject</name> *</type><name>key</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyHKEY_Check</name><argument_list>(<argument><expr><name>ob_handle</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"bad operand type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>key</name> = (<name>PyHKEYObject</name> *)<name>ob_handle</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <name><name>key</name>-&gt;<name>hkey</name></name> ? <call><name>RegCloseKey</name><argument_list>(<argument><expr>(<name>HKEY</name>)<name><name>key</name>-&gt;<name>hkey</name></name></expr></argument>)</argument_list></call> : <name>ERROR_SUCCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name>-&gt;<name>hkey</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr>"RegCloseKey"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>rc</name> == <name>ERROR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>BOOL</name></type>
<name>PyHKEY_AsHKEY</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ob</name></decl></param>, <param><decl><type><name>HKEY</name> *</type><name>pHANDLE</name></decl></param>, <param><decl><type><name>BOOL</name></type> <name>bNoneOK</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>ob</name> == <name>Py_None</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>bNoneOK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"None is not a valid HKEY in this context"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>pHANDLE</name> = (<name>HKEY</name>)0</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyHKEY_Check</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyHKEYObject</name> *</type><name>pH</name> <init>= <expr>(<name>PyHKEYObject</name> *)<name>ob</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>pHANDLE</name> = <name><name>pH</name>-&gt;<name>hkey</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call> || <call><name>PyLong_Check</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>pHANDLE</name> = (<name>HKEY</name>)<call><name>PyLong_AsVoidPtr</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"The object is not a PyHKEY object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyHKEY_FromHKEY</name><parameter_list>(<param><decl><type><name>HKEY</name></type> <name>h</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyHKEYObject</name> *</type><name>op</name></decl>;</decl_stmt>
<expr_stmt><expr><name>op</name> = (<name>PyHKEYObject</name> *) <call><name>PyObject_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyHKEYObject</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>op</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyObject_INIT</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr>&amp;<name>PyHKEY_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name>-&gt;<name>hkey</name></name> = <name>h</name></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>op</name></expr>;</return>
}</block></function>
<function><type><name>BOOL</name></type>
<name>PyWinObject_CloseHKEY</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>obHandle</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>BOOL</name></type> <name>ok</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyHKEY_Check</name><argument_list>(<argument><expr><name>obHandle</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ok</name> = <call><name>PyHKEY_Close</name><argument_list>(<argument><expr><name>obHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_LONG</name> &gt;= <name>SIZEOF_HKEY</name></expr></cpp:if>
<else>else <if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>obHandle</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>rc</name> <init>= <expr><call><name>RegCloseKey</name><argument_list>(<argument><expr>(<name>HKEY</name>)<call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>obHandle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ok</name> = (<name>rc</name> == <name>ERROR_SUCCESS</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr>"RegCloseKey"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<else>else <if>if <condition>(<expr><call><name>PyLong_Check</name><argument_list>(<argument><expr><name>obHandle</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>rc</name> <init>= <expr><call><name>RegCloseKey</name><argument_list>(<argument><expr>(<name>HKEY</name>)<call><name>PyLong_AsVoidPtr</name><argument_list>(<argument><expr><name>obHandle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ok</name> = (<name>rc</name> == <name>ERROR_SUCCESS</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr>"RegCloseKey"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"A handle must be a HKEY object or an integer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><name>ok</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fixupMultiSZ</name><parameter_list>(<param><decl><type><name>char</name> **</type><name>str</name></decl></param>, <param><decl><type><name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>P</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>Q</name></decl>;</decl_stmt>
<expr_stmt><expr><name>Q</name> = <name>data</name> + <name>len</name></expr>;</expr_stmt>
<for>for (<init><expr><name>P</name> = <name>data</name></expr>, <expr><name>i</name> = 0</expr>;</init> <condition><expr><name>P</name> &lt; <name>Q</name> &amp;&amp; *<name>P</name> != '\0'</expr>;</condition> <incr><expr><name>P</name>++</expr>, <expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> = <name>P</name></expr>;</expr_stmt>
<for>for(<init>;</init> <condition><expr>*<name>P</name> != '\0'</expr>;</condition> <incr><expr><name>P</name>++</expr></incr>)
<empty_stmt>;</empty_stmt></for>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>countStrings</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>strings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>P</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>Q</name> <init>= <expr><name>data</name> + <name>len</name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>P</name> = <name>data</name></expr>, <expr><name>strings</name> = 0</expr>;</init> <condition><expr><name>P</name> &lt; <name>Q</name> &amp;&amp; *<name>P</name> != '\0'</expr>;</condition> <incr><expr><name>P</name>++</expr>, <expr><name>strings</name>++</expr></incr>)
<for>for (<init>;</init> <condition><expr><name>P</name> &lt; <name>Q</name> &amp;&amp; *<name>P</name> != '\0'</expr>;</condition> <incr><expr><name>P</name>++</expr></incr>)
<empty_stmt>;</empty_stmt></for></for>
<return>return <expr><name>strings</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>BOOL</name></type>
<name>Py2Reg</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>value</name></decl></param>, <param><decl><type><name>DWORD</name></type> <name>typ</name></decl></param>, <param><decl><type><name>BYTE</name> **</type><name>retDataBuf</name></decl></param>, <param><decl><type><name>DWORD</name> *</type><name>retDataSize</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>typ</name></expr>)</condition> <block>{
<case>case <expr><name>REG_DWORD</name></expr>:
<if>if <condition>(<expr><name>value</name> != <name>Py_None</name> &amp;&amp; !<call><name>PyInt_Check</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<expr_stmt><expr>*<name>retDataBuf</name> = (<name>BYTE</name> *)<call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>DWORD</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>retDataBuf</name>==<name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>retDataSize</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>DWORD</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if>if <condition>(<expr><name>value</name> == <name>Py_None</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>zero</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>*<name>retDataBuf</name></expr></argument>, <argument><expr>&amp;<name>zero</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DWORD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>*<name>retDataBuf</name></expr></argument>,
<argument><expr>&amp;<call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr>(<name>PyIntObject</name> *)<name>value</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DWORD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>REG_SZ</name></expr>:
</case><case>case <expr><name>REG_EXPAND_SZ</name></expr>: <block>{
<decl_stmt><decl><type><name>int</name></type> <name>need_decref</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>value</name> == <name>Py_None</name></expr>)</condition><then>
<expr_stmt><expr>*<name>retDataSize</name> = 1</expr>;</expr_stmt></then>
<else>else <block>{
<if>if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>value</name> = <call><name>PyUnicode_AsEncodedString</name><argument_list>(
<argument><expr><name>value</name></expr></argument>,
<argument><expr>"mbcs"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>value</name>==<name>NULL</name></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<expr_stmt><expr><name>need_decref</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyString_Check</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<expr_stmt><expr>*<name>retDataSize</name> = 1 + <call><name>strlen</name><argument_list>(
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(
<argument><expr>(<name>PyStringObject</name> *)<name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr>*<name>retDataBuf</name> = (<name>BYTE</name> *)<call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>DWORD</name></expr></argument>, <argument><expr>*<name>retDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>retDataBuf</name>==<name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>value</name> == <name>Py_None</name></expr>)</condition><then>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr>(<name>char</name> *)*<name>retDataBuf</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr>(<name>char</name> *)*<name>retDataBuf</name></expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(
<argument><expr>(<name>PyStringObject</name> *)<name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>need_decref</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
}</block>
</case><case>case <expr><name>REG_MULTI_SZ</name></expr>: <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>size</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>P</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> **</type><name>obs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>value</name> == <name>Py_None</name></expr>)</condition><then>
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt></then>
<else>else <block>{
<if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<expr_stmt><expr><name>i</name> = <call><name>PyList_Size</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>obs</name> = <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></sizeof> * <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>obs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></sizeof> * <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>i</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><name>t</name> = <call><name>PyList_GET_ITEM</name><argument_list>(
<argument><expr>(<name>PyListObject</name> *)<name>value</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>obs</name><index>[<expr><name>j</name></expr>]</index></name> = <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>obs</name><index>[<expr><name>j</name></expr>]</index></name> = <call><name>PyUnicode_AsEncodedString</name><argument_list>(
<argument><expr><name>t</name></expr></argument>,
<argument><expr>"mbcs"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>obs</name><index>[<expr><name>j</name></expr>]</index></name>==<name>NULL</name></expr>)</condition><then>
<goto>goto <name>reg_multi_fail</name>;</goto></then></if>
}</block></then> <else>else
<goto>goto <name>reg_multi_fail</name>;</goto></else></if></else></if>
<expr_stmt><expr><name>size</name> += 1 + <call><name>strlen</name><argument_list>(
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(
<argument><expr>(<name>PyStringObject</name> *)<name><name>obs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr>*<name>retDataSize</name> = <name>size</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr>*<name>retDataBuf</name> = (<name>BYTE</name> *)<call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>char</name></expr></argument>,
<argument><expr>*<name>retDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>retDataBuf</name>==<name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>reg_multi_fail</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>P</name> = (<name>char</name> *)*<name>retDataBuf</name></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>i</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><name>t</name> = <name><name>obs</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>P</name></expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(
<argument><expr>(<name>PyStringObject</name> *)<name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>P</name> += 1 + <call><name>strlen</name><argument_list>(
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(
<argument><expr>(<name>PyStringObject</name> *)<name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>obs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr>*<name>P</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>obs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<label><name>reg_multi_fail</name>:</label>
<if>if <condition>(<expr><name>obs</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>i</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>)
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>obs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>obs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block>
</case><case>case <expr><name>REG_BINARY</name></expr>:
</case><default>default:
<if>if <condition>(<expr><name>value</name> == <name>Py_None</name></expr>)</condition><then>
<expr_stmt><expr>*<name>retDataSize</name> = 0</expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>src_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyBufferProcs</name> *</type><name>pb</name> <init>= <expr><name><name>value</name>-&gt;<name>ob_type</name>-&gt;<name>tp_as_buffer</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>pb</name>==<name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"Objects of type '%s' can not "
"be used as binary registry values"</expr></argument>,
<argument><expr><name><name>value</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>retDataSize</name> = <call>(*<name><name>pb</name>-&gt;<name>bf_getreadbuffer</name></name>)<argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>src_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>retDataBuf</name> = (<name>BYTE</name> *)<call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>char</name></expr></argument>,
<argument><expr>*<name>retDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>retDataBuf</name>==<name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>*<name>retDataBuf</name></expr></argument>, <argument><expr><name>src_buf</name></expr></argument>, <argument><expr>*<name>retDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</default>}</block></switch>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>Reg2Py</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>retDataBuf</name></decl></param>, <param><decl><type><name>DWORD</name></type> <name>retDataSize</name></decl></param>, <param><decl><type><name>DWORD</name></type> <name>typ</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obData</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>typ</name></expr>)</condition> <block>{
<case>case <expr><name>REG_DWORD</name></expr>:
<if>if <condition>(<expr><name>retDataSize</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name>obData</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>obData</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>,
<argument><expr>*(<name>int</name> *)<name>retDataBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>REG_SZ</name></expr>:
</case><case>case <expr><name>REG_EXPAND_SZ</name></expr>:
<if>if <condition>(<expr><name>retDataSize</name> &amp;&amp; <name><name>retDataBuf</name><index>[<expr><name>retDataSize</name>-1</expr>]</index></name> == '\0'</expr>)</condition><then>
<expr_stmt><expr>--<name>retDataSize</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>retDataSize</name> ==0</expr>)</condition><then>
<expr_stmt><expr><name>retDataBuf</name> = ""</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>obData</name> = <call><name>PyUnicode_DecodeMBCS</name><argument_list>(<argument><expr><name>retDataBuf</name></expr></argument>,
<argument><expr><name>retDataSize</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>REG_MULTI_SZ</name></expr>:
<if>if <condition>(<expr><name>retDataSize</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name>obData</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name>countStrings</name><argument_list>(<argument><expr><name>retDataBuf</name></expr></argument>, <argument><expr><name>retDataSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>str</name> <init>= <expr>(<name>char</name> **)<call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof>*<name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>str</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>fixupMultiSZ</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>retDataBuf</name></expr></argument>, <argument><expr><name>retDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>obData</name> = <call><name>PyList_New</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>obData</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<for>for (<init><expr><name>index</name> = 0</expr>;</init> <condition><expr><name>index</name> &lt; <name>s</name></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>_mbstrlen</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>len</name> &gt; <name>INT_MAX</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_OverflowError</name></expr></argument>,
<argument><expr>"registry string is too long for a Python string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>obData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>obData</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>,
<argument><expr><call><name>PyUnicode_DecodeMBCS</name><argument_list>(
<argument><expr>(const <name>char</name> *)<name><name>str</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>,
<argument><expr>(<name>int</name>)<name>len</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></else></if>
</case><case>case <expr><name>REG_BINARY</name></expr>:
</case><default>default:
<if>if <condition>(<expr><name>retDataSize</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>obData</name> = <name>Py_None</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>obData</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"s#"</expr></argument>,
<argument><expr>(<name>char</name> *)<name>retDataBuf</name></expr></argument>,
<argument><expr><name>retDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<break>break;</break>
</default>}</block></switch>
<if>if <condition>(<expr><name>obData</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then>
<else>else
<return>return <expr><name>obData</name></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCloseKey</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obKey</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O:CloseKey"</expr></argument>, <argument><expr>&amp;<name>obKey</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyHKEY_Close</name><argument_list>(<argument><expr><name>obKey</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyConnectRegistry</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>szCompName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HKEY</name></type> <name>retKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"zO:ConnectRegistry"</expr></argument>, <argument><expr>&amp;<name>szCompName</name></expr></argument>, <argument><expr>&amp;<name>obKey</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyHKEY_AsHKEY</name><argument_list>(<argument><expr><name>obKey</name></expr></argument>, <argument><expr>&amp;<name>hKey</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rc</name> <init>= <expr><call><name>RegConnectRegistry</name><argument_list>(<argument><expr><name>szCompName</name></expr></argument>, <argument><expr><name>hKey</name></expr></argument>, <argument><expr>&amp;<name>retKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>,
<argument><expr>"ConnectRegistry"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>PyHKEY_FromHKEY</name><argument_list>(<argument><expr><name>retKey</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCreateKey</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>subKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HKEY</name></type> <name>retKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"Oz:CreateKey"</expr></argument>, <argument><expr>&amp;<name>obKey</name></expr></argument>, <argument><expr>&amp;<name>subKey</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyHKEY_AsHKEY</name><argument_list>(<argument><expr><name>obKey</name></expr></argument>, <argument><expr>&amp;<name>hKey</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>RegCreateKey</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>subKey</name></expr></argument>, <argument><expr>&amp;<name>retKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr>"CreateKey"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>PyHKEY_FromHKEY</name><argument_list>(<argument><expr><name>retKey</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyDeleteKey</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>subKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"Os:DeleteKey"</expr></argument>, <argument><expr>&amp;<name>obKey</name></expr></argument>, <argument><expr>&amp;<name>subKey</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyHKEY_AsHKEY</name><argument_list>(<argument><expr><name>obKey</name></expr></argument>, <argument><expr>&amp;<name>hKey</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>RegDeleteKey</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>subKey</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr>"RegDeleteKey"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyDeleteValue</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>subKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"Oz:DeleteValue"</expr></argument>, <argument><expr>&amp;<name>obKey</name></expr></argument>, <argument><expr>&amp;<name>subKey</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyHKEY_AsHKEY</name><argument_list>(<argument><expr><name>obKey</name></expr></argument>, <argument><expr>&amp;<name>hKey</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rc</name> <init>= <expr><call><name>RegDeleteValue</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>subKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name>rc</name> !=<name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>,
<argument><expr>"RegDeleteValue"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyEnumKey</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>retStr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmpbuf</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"Oi:EnumKey"</expr></argument>, <argument><expr>&amp;<name>obKey</name></expr></argument>, <argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyHKEY_AsHKEY</name><argument_list>(<argument><expr><name>obKey</name></expr></argument>, <argument><expr>&amp;<name>hKey</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rc</name> <init>= <expr><call><name>RegEnumKeyEx</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr>"RegEnumKeyEx"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>retStr</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retStr</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyEnumValue</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>retValueBuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>retDataBuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>retValueSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>retDataSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>typ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>retVal</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"Oi:EnumValue"</expr></argument>, <argument><expr>&amp;<name>obKey</name></expr></argument>, <argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyHKEY_AsHKEY</name><argument_list>(<argument><expr><name>obKey</name></expr></argument>, <argument><expr>&amp;<name>hKey</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>rc</name> = <call><name>RegQueryInfoKey</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;<name>retValueSize</name></expr></argument>, <argument><expr>&amp;<name>retDataSize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)
!= <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>,
<argument><expr>"RegQueryInfoKey"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr>++<name>retValueSize</name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>retDataSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>retValueBuf</name> = (<name>char</name> *)<call><name>PyMem_Malloc</name><argument_list>(<argument><expr><name>retValueSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retValueBuf</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>retDataBuf</name> = (<name>char</name> *)<call><name>PyMem_Malloc</name><argument_list>(<argument><expr><name>retDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retDataBuf</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>retValueBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rc</name> <init>= <expr><call><name>RegEnumValue</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>,
<argument><expr><name>retValueBuf</name></expr></argument>,
<argument><expr>&amp;<name>retValueSize</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;<name>typ</name></expr></argument>,
<argument><expr>(<name>BYTE</name> *)<name>retDataBuf</name></expr></argument>,
<argument><expr>&amp;<name>retDataSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>retVal</name> = <call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>,
<argument><expr>"PyRegEnumValue"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>obData</name> = <call><name>Reg2Py</name><argument_list>(<argument><expr><name>retDataBuf</name></expr></argument>, <argument><expr><name>retDataSize</name></expr></argument>, <argument><expr><name>typ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>obData</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>retVal</name> = <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>retVal</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"sOi"</expr></argument>, <argument><expr><name>retValueBuf</name></expr></argument>, <argument><expr><name>obData</name></expr></argument>, <argument><expr><name>typ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>obData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>retValueBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>retDataBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retVal</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyExpandEnvironmentStrings</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_UNICODE</name> *</type><name>retValue</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_UNICODE</name> *</type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>retValueSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>o</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"u:ExpandEnvironmentStrings"</expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>retValueSize</name> = <call><name>ExpandEnvironmentStringsW</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>retValue</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retValueSize</name> == 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>retValueSize</name></expr></argument>,
<argument><expr>"ExpandEnvironmentStrings"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>retValue</name> = (<name>Py_UNICODE</name> *)<call><name>PyMem_Malloc</name><argument_list>(<argument><expr><name>retValueSize</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>Py_UNICODE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retValue</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>ExpandEnvironmentStringsW</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>retValue</name></expr></argument>, <argument><expr><name>retValueSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>retValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>retValueSize</name></expr></argument>,
<argument><expr>"ExpandEnvironmentStrings"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>o</name> = <call><name>PyUnicode_FromUnicode</name><argument_list>(<argument><expr><name>retValue</name></expr></argument>, <argument><expr><call><name>wcslen</name><argument_list>(<argument><expr><name>retValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>retValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>o</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyFlushKey</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O:FlushKey"</expr></argument>, <argument><expr>&amp;<name>obKey</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyHKEY_AsHKEY</name><argument_list>(<argument><expr><name>obKey</name></expr></argument>, <argument><expr>&amp;<name>hKey</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rc</name> <init>= <expr><call><name>RegFlushKey</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr>"RegFlushKey"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyLoadKey</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>subKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>fileName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"Oss:LoadKey"</expr></argument>, <argument><expr>&amp;<name>obKey</name></expr></argument>, <argument><expr>&amp;<name>subKey</name></expr></argument>, <argument><expr>&amp;<name>fileName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyHKEY_AsHKEY</name><argument_list>(<argument><expr><name>obKey</name></expr></argument>, <argument><expr>&amp;<name>hKey</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rc</name> <init>= <expr><call><name>RegLoadKey</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>subKey</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr>"RegLoadKey"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyOpenKey</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>subKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HKEY</name></type> <name>retKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REGSAM</name></type> <name>sam</name> <init>= <expr><name>KEY_READ</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"Oz|ii:OpenKey"</expr></argument>, <argument><expr>&amp;<name>obKey</name></expr></argument>, <argument><expr>&amp;<name>subKey</name></expr></argument>,
<argument><expr>&amp;<name>res</name></expr></argument>, <argument><expr>&amp;<name>sam</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyHKEY_AsHKEY</name><argument_list>(<argument><expr><name>obKey</name></expr></argument>, <argument><expr>&amp;<name>hKey</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rc</name> <init>= <expr><call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>subKey</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr>&amp;<name>retKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr>"RegOpenKeyEx"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>PyHKEY_FromHKEY</name><argument_list>(<argument><expr><name>retKey</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyQueryInfoKey</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>nSubKeys</name></decl>, <decl><type ref="prev"/><name>nValues</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILETIME</name></type> <name>ft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ret</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O:QueryInfoKey"</expr></argument>, <argument><expr>&amp;<name>obKey</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyHKEY_AsHKEY</name><argument_list>(<argument><expr><name>obKey</name></expr></argument>, <argument><expr>&amp;<name>hKey</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>rc</name> = <call><name>RegQueryInfoKey</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>nSubKeys</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;<name>nValues</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>ft</name></expr></argument>)</argument_list></call>)
!= <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr>"RegQueryInfoKey"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>li</name>.<name>LowPart</name></name> = <name><name>ft</name>.<name>dwLowDateTime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name>.<name>HighPart</name></name> = <name><name>ft</name>.<name>dwHighDateTime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> = <call><name>PyLong_FromLongLong</name><argument_list>(<argument><expr><name><name>li</name>.<name>QuadPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>l</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>ret</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"iiO"</expr></argument>, <argument><expr><name>nSubKeys</name></expr></argument>, <argument><expr><name>nValues</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyQueryValue</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>subKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>retStr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>retBuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bufSize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"Oz:QueryValue"</expr></argument>, <argument><expr>&amp;<name>obKey</name></expr></argument>, <argument><expr>&amp;<name>subKey</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyHKEY_AsHKEY</name><argument_list>(<argument><expr><name>obKey</name></expr></argument>, <argument><expr>&amp;<name>hKey</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>rc</name> = <call><name>RegQueryValue</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>subKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>bufSize</name></expr></argument>)</argument_list></call>)
!= <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>,
<argument><expr>"RegQueryValue"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>retStr</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retStr</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>retBuf</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>retStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rc</name> = <call><name>RegQueryValue</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>subKey</name></expr></argument>, <argument><expr><name>retBuf</name></expr></argument>, <argument><expr>&amp;<name>bufSize</name></expr></argument>)</argument_list></call>)
!= <name>ERROR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>retStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>,
<argument><expr>"RegQueryValue"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>_PyString_Resize</name><argument_list>(<argument><expr>&amp;<name>retStr</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>retBuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retStr</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyQueryValueEx</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>valueName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>retBuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>bufSize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>typ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"Oz:QueryValueEx"</expr></argument>, <argument><expr>&amp;<name>obKey</name></expr></argument>, <argument><expr>&amp;<name>valueName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyHKEY_AsHKEY</name><argument_list>(<argument><expr><name>obKey</name></expr></argument>, <argument><expr>&amp;<name>hKey</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>rc</name> = <call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>valueName</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;<name>bufSize</name></expr></argument>)</argument_list></call>)
!= <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>,
<argument><expr>"RegQueryValueEx"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>retBuf</name> = (<name>char</name> *)<call><name>PyMem_Malloc</name><argument_list>(<argument><expr><name>bufSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retBuf</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>rc</name> = <call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>valueName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;<name>typ</name></expr></argument>, <argument><expr>(<name>BYTE</name> *)<name>retBuf</name></expr></argument>, <argument><expr>&amp;<name>bufSize</name></expr></argument>)</argument_list></call>)
!= <name>ERROR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>retBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>,
<argument><expr>"RegQueryValueEx"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>obData</name> = <call><name>Reg2Py</name><argument_list>(<argument><expr><name>retBuf</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>, <argument><expr><name>typ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr>(<name>void</name> *)<name>retBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>obData</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"Oi"</expr></argument>, <argument><expr><name>obData</name></expr></argument>, <argument><expr><name>typ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>obData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PySaveKey</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>fileName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPSECURITY_ATTRIBUTES</name></type> <name>pSA</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"Os:SaveKey"</expr></argument>, <argument><expr>&amp;<name>obKey</name></expr></argument>, <argument><expr>&amp;<name>fileName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyHKEY_AsHKEY</name><argument_list>(<argument><expr><name>obKey</name></expr></argument>, <argument><expr>&amp;<name>hKey</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rc</name> <init>= <expr><call><name>RegSaveKey</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>pSA</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr>"RegSaveKey"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PySetValue</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>subKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>typ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obStrVal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obSubKey</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"OOiO:SetValue"</expr></argument>,
<argument><expr>&amp;<name>obKey</name></expr></argument>,
<argument><expr>&amp;<name>obSubKey</name></expr></argument>,
<argument><expr>&amp;<name>typ</name></expr></argument>,
<argument><expr>&amp;<name>obStrVal</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyHKEY_AsHKEY</name><argument_list>(<argument><expr><name>obKey</name></expr></argument>, <argument><expr>&amp;<name>hKey</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>typ</name> != <name>REG_SZ</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"Type must be _winreg.REG_SZ"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>str</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>obStrVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>str</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>len</name> = <call><name>PyString_Size</name><argument_list>(<argument><expr><name>obStrVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>obSubKey</name> == <name>Py_None</name></expr>)</condition><then>
<expr_stmt><expr><name>subKey</name> = <name>NULL</name></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>subKey</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>obSubKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>subKey</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></else></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rc</name> <init>= <expr><call><name>RegSetValue</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>subKey</name></expr></argument>, <argument><expr><name>REG_SZ</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name>+1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr>"RegSetValue"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PySetValueEx</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>valueName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obRes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>typ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LONG</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"OzOiO:SetValueEx"</expr></argument>,
<argument><expr>&amp;<name>obKey</name></expr></argument>,
<argument><expr>&amp;<name>valueName</name></expr></argument>,
<argument><expr>&amp;<name>obRes</name></expr></argument>,
<argument><expr>&amp;<name>typ</name></expr></argument>,
<argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyHKEY_AsHKEY</name><argument_list>(<argument><expr><name>obKey</name></expr></argument>, <argument><expr>&amp;<name>hKey</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>Py2Reg</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>typ</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"Could not convert the data to the specified type."</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rc</name> <init>= <expr><call><name>RegSetValueEx</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>valueName</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>typ</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<function_decl><type><name>Py_END_ALLOW_THREADS</name></type>
<name>PyMem_DEL</name><parameter_list>(<param><decl><type><name>data</name></type></decl></param>)</parameter_list>;</function_decl>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>,
<argument><expr>"RegSetValueEx"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyDisableReflectionKey</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>hMod</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>LONG</name></type> (<name>WINAPI</name> *<name>RDRKFunc</name>)<parameter_list>(<param><decl><type><name>HKEY</name></type></decl></param>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>RDRKFunc</name></type> <name>pfn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LONG</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O:DisableReflectionKey"</expr></argument>, <argument><expr>&amp;<name>obKey</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyHKEY_AsHKEY</name><argument_list>(<argument><expr><name>obKey</name></expr></argument>, <argument><expr>&amp;<name>hKey</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>hMod</name> = <call><name>GetModuleHandle</name><argument_list>(<argument><expr>"advapi32.dll"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hMod</name></expr>)</condition><then>
<expr_stmt><expr><name>pfn</name> = (<name>RDRKFunc</name>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hMod</name></expr></argument>,
<argument><expr>"RegDisableReflectionKey"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<name>pfn</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_NotImplementedError</name></expr></argument>,
<argument><expr>"not implemented on this platform"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rc</name> <init>= <expr><call>(*<name>pfn</name>)<argument_list>(<argument><expr><name>hKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>,
<argument><expr>"RegDisableReflectionKey"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyEnableReflectionKey</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>hMod</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>LONG</name></type> (<name>WINAPI</name> *<name>RERKFunc</name>)<parameter_list>(<param><decl><type><name>HKEY</name></type></decl></param>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>RERKFunc</name></type> <name>pfn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LONG</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O:EnableReflectionKey"</expr></argument>, <argument><expr>&amp;<name>obKey</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyHKEY_AsHKEY</name><argument_list>(<argument><expr><name>obKey</name></expr></argument>, <argument><expr>&amp;<name>hKey</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>hMod</name> = <call><name>GetModuleHandle</name><argument_list>(<argument><expr>"advapi32.dll"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hMod</name></expr>)</condition><then>
<expr_stmt><expr><name>pfn</name> = (<name>RERKFunc</name>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hMod</name></expr></argument>,
<argument><expr>"RegEnableReflectionKey"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<name>pfn</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_NotImplementedError</name></expr></argument>,
<argument><expr>"not implemented on this platform"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rc</name> <init>= <expr><call>(*<name>pfn</name>)<argument_list>(<argument><expr><name>hKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>,
<argument><expr>"RegEnableReflectionKey"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyQueryReflectionKey</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>hMod</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>LONG</name></type> (<name>WINAPI</name> *<name>RQRKFunc</name>)<parameter_list>(<param><decl><type><name>HKEY</name></type></decl></param>, <param><decl><type><name>BOOL</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>RQRKFunc</name></type> <name>pfn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LONG</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O:QueryReflectionKey"</expr></argument>, <argument><expr>&amp;<name>obKey</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyHKEY_AsHKEY</name><argument_list>(<argument><expr><name>obKey</name></expr></argument>, <argument><expr>&amp;<name>hKey</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>hMod</name> = <call><name>GetModuleHandle</name><argument_list>(<argument><expr>"advapi32.dll"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hMod</name></expr>)</condition><then>
<expr_stmt><expr><name>pfn</name> = (<name>RQRKFunc</name>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hMod</name></expr></argument>,
<argument><expr>"RegQueryReflectionKey"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<name>pfn</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_NotImplementedError</name></expr></argument>,
<argument><expr>"not implemented on this platform"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rc</name> <init>= <expr><call>(*<name>pfn</name>)<argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErrWithFunction</name><argument_list>(<argument><expr><name>rc</name></expr></argument>,
<argument><expr>"RegQueryReflectionKey"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>PyBool_FromLong</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>winreg_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"CloseKey"</expr>, <expr><name>PyCloseKey</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>CloseKey_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"ConnectRegistry"</expr>, <expr><name>PyConnectRegistry</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>ConnectRegistry_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"CreateKey"</expr>, <expr><name>PyCreateKey</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>CreateKey_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"DeleteKey"</expr>, <expr><name>PyDeleteKey</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>DeleteKey_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"DeleteValue"</expr>, <expr><name>PyDeleteValue</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>DeleteValue_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"DisableReflectionKey"</expr>, <expr><name>PyDisableReflectionKey</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>DisableReflectionKey_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"EnableReflectionKey"</expr>, <expr><name>PyEnableReflectionKey</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>EnableReflectionKey_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"EnumKey"</expr>, <expr><name>PyEnumKey</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>EnumKey_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"EnumValue"</expr>, <expr><name>PyEnumValue</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>EnumValue_doc</name></expr>}</block></expr>,
<expr><block>{
<expr>"ExpandEnvironmentStrings"</expr>, <expr><name>PyExpandEnvironmentStrings</name></expr>, <expr><name>METH_VARARGS</name></expr>,
<expr><name>ExpandEnvironmentStrings_doc</name></expr>
}</block></expr>,
<expr><block>{<expr>"FlushKey"</expr>, <expr><name>PyFlushKey</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>FlushKey_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"LoadKey"</expr>, <expr><name>PyLoadKey</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>LoadKey_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"OpenKey"</expr>, <expr><name>PyOpenKey</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>OpenKey_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"OpenKeyEx"</expr>, <expr><name>PyOpenKey</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>OpenKeyEx_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"QueryValue"</expr>, <expr><name>PyQueryValue</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>QueryValue_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"QueryValueEx"</expr>, <expr><name>PyQueryValueEx</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>QueryValueEx_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"QueryInfoKey"</expr>, <expr><name>PyQueryInfoKey</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>QueryInfoKey_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"QueryReflectionKey"</expr>,<expr><name>PyQueryReflectionKey</name></expr>,<expr><name>METH_VARARGS</name></expr>, <expr><name>QueryReflectionKey_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"SaveKey"</expr>, <expr><name>PySaveKey</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>SaveKey_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"SetValue"</expr>, <expr><name>PySetValue</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>SetValue_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"SetValueEx"</expr>, <expr><name>PySetValueEx</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>SetValueEx_doc</name></expr>}</block></expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>insint</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type> <name>d</name></decl></param>, <param><decl><type><name>char</name> *</type> <name>name</name></decl></param>, <param><decl><type><name>long</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>v</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_INT</name><parameter_list>(<param><type><name>val</name></type></param>)</parameter_list></cpp:macro> <cpp:value>insint(d, #val, val)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>inskey</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type> <name>d</name></decl></param>, <param><decl><type><name>char</name> *</type> <name>name</name></decl></param>, <param><decl><type><name>HKEY</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyLong_FromVoidPtr</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>v</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_KEY</name><parameter_list>(<param><type><name>val</name></type></param>)</parameter_list></cpp:macro> <cpp:value>inskey(d, #val, val)</cpp:value></cpp:define>
<function><type><name>PyMODINIT_FUNC</name></type> <name>init_winreg</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule3</name><argument_list>(<argument><expr>"_winreg"</expr></argument>, <argument><expr><name>winreg_methods</name></expr></argument>, <argument><expr><name>module_doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>PyHKEY_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>PyHKEY_Type</name>.<name>tp_doc</name></name> = <name>PyHKEY_doc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>PyHKEY_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"HKEYType"</expr></argument>,
<argument><expr>(<name>PyObject</name> *)&amp;<name>PyHKEY_Type</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>PyExc_WindowsError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"error"</expr></argument>,
<argument><expr><name>PyExc_WindowsError</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>ADD_KEY</name><argument_list>(<argument><expr><name>HKEY_CLASSES_ROOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_KEY</name><argument_list>(<argument><expr><name>HKEY_CURRENT_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_KEY</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_KEY</name><argument_list>(<argument><expr><name>HKEY_USERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_KEY</name><argument_list>(<argument><expr><name>HKEY_PERFORMANCE_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HKEY_CURRENT_CONFIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ADD_KEY</name><argument_list>(<argument><expr><name>HKEY_CURRENT_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HKEY_DYN_DATA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ADD_KEY</name><argument_list>(<argument><expr><name>HKEY_DYN_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>KEY_QUERY_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>KEY_SET_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>KEY_CREATE_SUB_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>KEY_ENUMERATE_SUB_KEYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>KEY_NOTIFY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>KEY_CREATE_LINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>KEY_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>KEY_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>KEY_EXECUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>KEY_ALL_ACCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_WOW64_64KEY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>KEY_WOW64_64KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_WOW64_32KEY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>KEY_WOW64_32KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_OPTION_RESERVED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_OPTION_NON_VOLATILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_OPTION_VOLATILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_OPTION_CREATE_LINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_OPTION_BACKUP_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_OPTION_OPEN_LINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_LEGAL_OPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_CREATED_NEW_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_OPENED_EXISTING_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_WHOLE_HIVE_VOLATILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_REFRESH_HIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_NO_LAZY_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_NOTIFY_CHANGE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_NOTIFY_CHANGE_ATTRIBUTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_NOTIFY_CHANGE_LAST_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_NOTIFY_CHANGE_SECURITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_LEGAL_CHANGE_FILTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_EXPAND_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_DWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_DWORD_LITTLE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_DWORD_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_LINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_MULTI_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_RESOURCE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_FULL_RESOURCE_DESCRIPTOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>REG_RESOURCE_REQUIREMENTS_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
