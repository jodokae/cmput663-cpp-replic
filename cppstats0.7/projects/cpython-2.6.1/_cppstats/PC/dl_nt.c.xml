<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="PC/dl_nt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"windows.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_ENABLE_SHARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>dllVersionBuffer</name><index>[<expr>16</expr>]</index></name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>PyWin_DLLhModule</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>PyWin_DLLVersionString</name> <init>= <expr><name>dllVersionBuffer</name></expr></init></decl>;</decl_stmt>
<function><type><name>BOOL</name> <name>WINAPI</name></type> <name>DllMain</name> <parameter_list>(<param><decl><type><name>HANDLE</name></type> <name>hInst</name></decl></param>,
<param><decl><type><name>ULONG</name></type> <name>ul_reason_for_call</name></decl></param>,
<param><decl><type><name>LPVOID</name></type> <name>lpReserved</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>ul_reason_for_call</name></expr>)</condition> <block>{
<case>case <expr><name>DLL_PROCESS_ATTACH</name></expr>:
<expr_stmt><expr><name>PyWin_DLLhModule</name> = <name>hInst</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LoadString</name><argument_list>(<argument><expr><name>hInst</name></expr></argument>, <argument><expr>1000</expr></argument>, <argument><expr><name>dllVersionBuffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dllVersionBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>DLL_PROCESS_DETACH</name></expr>:
<break>break;</break>
</case>}</block></switch>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
