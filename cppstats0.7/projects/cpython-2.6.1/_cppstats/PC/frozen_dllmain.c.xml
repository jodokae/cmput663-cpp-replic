<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="PC/frozen_dllmain.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"windows.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>possibleModules</name><index>[]</index></name> <init>= <expr><block>{
<expr>"pywintypes"</expr>,
<expr>"pythoncom"</expr>,
<expr>"win32ui"</expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function_decl><type><name>BOOL</name></type> <name>CallModuleDllMain</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>modName</name></decl></param>, <param><decl><type><name>DWORD</name></type> <name>dwReason</name></decl></param>)</parameter_list>;</function_decl>
<function><type><name>void</name></type> <name>PyWinFreeze_ExeInit</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>modName</name></decl>;</decl_stmt>
<for>for (<init><expr><name>modName</name> = <name>possibleModules</name></expr>;</init> <condition><expr>*<name>modName</name></expr>;</condition> <incr><expr>*<name>modName</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>CallModuleDllMain</name><argument_list>(<argument><expr>*<name>modName</name></expr></argument>, <argument><expr><name>DLL_PROCESS_ATTACH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></function>
<function><type><name>void</name></type> <name>PyWinFreeze_ExeTerm</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>modName</name></decl>;</decl_stmt>
<for>for (<init><expr><name>modName</name> = <name>possibleModules</name>+(<sizeof>sizeof<argument_list>(<argument><expr><name>possibleModules</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof>)-2</expr>;</init>
<condition><expr><name>modName</name> &gt;= <name>possibleModules</name></expr>;</condition>
<incr><expr>*<name>modName</name>--</expr></incr>) <block>{
<expr_stmt><expr><call><name>CallModuleDllMain</name><argument_list>(<argument><expr>*<name>modName</name></expr></argument>, <argument><expr><name>DLL_PROCESS_DETACH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></function>
<function><type><name>BOOL</name> <name>WINAPI</name></type> <name>DllMain</name><parameter_list>(<param><decl><type><name>HINSTANCE</name></type> <name>hInstance</name></decl></param>, <param><decl><type><name>DWORD</name></type> <name>dwReason</name></decl></param>, <param><decl><type><name>LPVOID</name></type> <name>lpReserved</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>BOOL</name></type> <name>ret</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>dwReason</name></expr>)</condition> <block>{
<case>case <expr><name>DLL_PROCESS_ATTACH</name></expr>: <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>modName</name></decl>;</decl_stmt>
<for>for (<init><expr><name>modName</name> = <name>possibleModules</name></expr>;</init> <condition><expr>*<name>modName</name></expr>;</condition> <incr><expr>*<name>modName</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>BOOL</name></type> <name>ok</name> <init>= <expr><call><name>CallModuleDllMain</name><argument_list>(<argument><expr>*<name>modName</name></expr></argument>, <argument><expr><name>dwReason</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
<expr_stmt><expr><name>ret</name> = <name>FALSE</name></expr>;</expr_stmt></then></if>
}</block></for>
<break>break;</break>
}</block>
</case><case>case <expr><name>DLL_PROCESS_DETACH</name></expr>: <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>modName</name></decl>;</decl_stmt>
<for>for (<init><expr><name>modName</name> = <name>possibleModules</name>+(<sizeof>sizeof<argument_list>(<argument><expr><name>possibleModules</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof>)-2</expr>;</init>
<condition><expr><name>modName</name> &gt;= <name>possibleModules</name></expr>;</condition>
<incr><expr>*<name>modName</name>--</expr></incr>)
<expr_stmt><expr><call><name>CallModuleDllMain</name><argument_list>(<argument><expr>*<name>modName</name></expr></argument>, <argument><expr><name>DLL_PROCESS_DETACH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<break>break;</break>
}</block>
</case>}</block></switch>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><name>BOOL</name></type> <name>CallModuleDllMain</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>modName</name></decl></param>, <param><decl><type><name>DWORD</name></type> <name>dwReason</name></decl></param>)</parameter_list> <block>{
<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> * <name>pfndllmain</name>)<parameter_list>(<param><decl><type><name>HINSTANCE</name></type></decl></param>, <param><decl><type><name>DWORD</name></type></decl></param>, <param><decl><type><name>LPVOID</name></type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>char</name></type> <name><name>funcName</name><index>[<expr>255</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>hmod</name> <init>= <expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>funcName</name></expr></argument>, <argument><expr>"_DllMain"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>funcName</name></expr></argument>, <argument><expr><name>modName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>funcName</name></expr></argument>, <argument><expr>"@12"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pfndllmain</name> = (<call><call><name>BOOL</name> <argument_list>(<argument><expr><name>WINAPI</name> *</expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>HINSTANCE</name></expr></argument>, <argument><expr><name>DWORD</name></expr></argument>, <argument><expr><name>LPVOID</name></expr></argument>)</argument_list></call>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hmod</name></expr></argument>, <argument><expr><name>funcName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pfndllmain</name>==<name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></then></if>
<return>return <expr><call>(*<name>pfndllmain</name>)<argument_list>(<argument><expr><name>hmod</name></expr></argument>, <argument><expr><name>dwReason</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
