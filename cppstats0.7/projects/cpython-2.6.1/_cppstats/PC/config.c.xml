<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/PC/config.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initarray</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MS_WINI64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initaudioop</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initbinascii</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initcmath</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initerrno</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initfuture_builtins</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initgc</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MS_WINI64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initimageop</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initmath</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_md5</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initnt</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initoperator</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initsignal</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_sha</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_sha256</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_sha512</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initstrop</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>inittime</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initthread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initcStringIO</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initcPickle</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initmsvcrt</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_locale</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_codecs</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_weakref</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_hotshot</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initxxsubtype</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initzipimport</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_random</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>inititertools</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_collections</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_heapq</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_bisect</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_symtable</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initmmap</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_csv</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_sre</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initparser</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_winreg</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_struct</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initdatetime</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_fileio</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_bytesio</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_functools</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_json</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initzlib</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_multibytecodec</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_codecs_cn</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_codecs_hk</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_codecs_iso2022</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_codecs_jp</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_codecs_kr</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_codecs_tw</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_subprocess</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_lsprof</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_ast</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_PyWarnings_Init</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>PyMarshal_Init</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initimp</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type>struct <name>_inittab</name></type> <name><name>_PyImport_Inittab</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"array"</expr>, <expr><name>initarray</name></expr>}</block></expr>,
<expr><block>{<expr>"_ast"</expr>, <expr><name>init_ast</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MS_WINI64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"audioop"</expr>, <expr><name>initaudioop</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"binascii"</expr>, <expr><name>initbinascii</name></expr>}</block></expr>,
<expr><block>{<expr>"cmath"</expr>, <expr><name>initcmath</name></expr>}</block></expr>,
<expr><block>{<expr>"errno"</expr>, <expr><name>initerrno</name></expr>}</block></expr>,
<expr><block>{<expr>"future_builtins"</expr>, <expr><name>initfuture_builtins</name></expr>}</block></expr>,
<expr><block>{<expr>"gc"</expr>, <expr><name>initgc</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MS_WINI64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"imageop"</expr>, <expr><name>initimageop</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"math"</expr>, <expr><name>initmath</name></expr>}</block></expr>,
<expr><block>{<expr>"_md5"</expr>, <expr><name>init_md5</name></expr>}</block></expr>,
<expr><block>{<expr>"nt"</expr>, <expr><name>initnt</name></expr>}</block></expr>,
<expr><block>{<expr>"operator"</expr>, <expr><name>initoperator</name></expr>}</block></expr>,
<expr><block>{<expr>"signal"</expr>, <expr><name>initsignal</name></expr>}</block></expr>,
<expr><block>{<expr>"_sha"</expr>, <expr><name>init_sha</name></expr>}</block></expr>,
<expr><block>{<expr>"_sha256"</expr>, <expr><name>init_sha256</name></expr>}</block></expr>,
<expr><block>{<expr>"_sha512"</expr>, <expr><name>init_sha512</name></expr>}</block></expr>,
<expr><block>{<expr>"strop"</expr>, <expr><name>initstrop</name></expr>}</block></expr>,
<expr><block>{<expr>"time"</expr>, <expr><name>inittime</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"thread"</expr>, <expr><name>initthread</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"cStringIO"</expr>, <expr><name>initcStringIO</name></expr>}</block></expr>,
<expr><block>{<expr>"cPickle"</expr>, <expr><name>initcPickle</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"msvcrt"</expr>, <expr><name>initmsvcrt</name></expr>}</block></expr>,
<expr><block>{<expr>"_locale"</expr>, <expr><name>init_locale</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"_subprocess"</expr>, <expr><name>init_subprocess</name></expr>}</block></expr>,
<expr><block>{<expr>"_codecs"</expr>, <expr><name>init_codecs</name></expr>}</block></expr>,
<expr><block>{<expr>"_weakref"</expr>, <expr><name>init_weakref</name></expr>}</block></expr>,
<expr><block>{<expr>"_hotshot"</expr>, <expr><name>init_hotshot</name></expr>}</block></expr>,
<expr><block>{<expr>"_random"</expr>, <expr><name>init_random</name></expr>}</block></expr>,
<expr><block>{<expr>"_bisect"</expr>, <expr><name>init_bisect</name></expr>}</block></expr>,
<expr><block>{<expr>"_heapq"</expr>, <expr><name>init_heapq</name></expr>}</block></expr>,
<expr><block>{<expr>"_lsprof"</expr>, <expr><name>init_lsprof</name></expr>}</block></expr>,
<expr><block>{<expr>"itertools"</expr>, <expr><name>inititertools</name></expr>}</block></expr>,
<expr><block>{<expr>"_collections"</expr>, <expr><name>init_collections</name></expr>}</block></expr>,
<expr><block>{<expr>"_symtable"</expr>, <expr><name>init_symtable</name></expr>}</block></expr>,
<expr><block>{<expr>"mmap"</expr>, <expr><name>initmmap</name></expr>}</block></expr>,
<expr><block>{<expr>"_csv"</expr>, <expr><name>init_csv</name></expr>}</block></expr>,
<expr><block>{<expr>"_sre"</expr>, <expr><name>init_sre</name></expr>}</block></expr>,
<expr><block>{<expr>"parser"</expr>, <expr><name>initparser</name></expr>}</block></expr>,
<expr><block>{<expr>"_winreg"</expr>, <expr><name>init_winreg</name></expr>}</block></expr>,
<expr><block>{<expr>"_struct"</expr>, <expr><name>init_struct</name></expr>}</block></expr>,
<expr><block>{<expr>"datetime"</expr>, <expr><name>initdatetime</name></expr>}</block></expr>,
<expr><block>{<expr>"_fileio"</expr>, <expr><name>init_fileio</name></expr>}</block></expr>,
<expr><block>{<expr>"_bytesio"</expr>, <expr><name>init_bytesio</name></expr>}</block></expr>,
<expr><block>{<expr>"_functools"</expr>, <expr><name>init_functools</name></expr>}</block></expr>,
<expr><block>{<expr>"_json"</expr>, <expr><name>init_json</name></expr>}</block></expr>,
<expr><block>{<expr>"xxsubtype"</expr>, <expr><name>initxxsubtype</name></expr>}</block></expr>,
<expr><block>{<expr>"zipimport"</expr>, <expr><name>initzipimport</name></expr>}</block></expr>,
<expr><block>{<expr>"zlib"</expr>, <expr><name>initzlib</name></expr>}</block></expr>,
<expr><block>{<expr>"_multibytecodec"</expr>, <expr><name>init_multibytecodec</name></expr>}</block></expr>,
<expr><block>{<expr>"_codecs_cn"</expr>, <expr><name>init_codecs_cn</name></expr>}</block></expr>,
<expr><block>{<expr>"_codecs_hk"</expr>, <expr><name>init_codecs_hk</name></expr>}</block></expr>,
<expr><block>{<expr>"_codecs_iso2022"</expr>, <expr><name>init_codecs_iso2022</name></expr>}</block></expr>,
<expr><block>{<expr>"_codecs_jp"</expr>, <expr><name>init_codecs_jp</name></expr>}</block></expr>,
<expr><block>{<expr>"_codecs_kr"</expr>, <expr><name>init_codecs_kr</name></expr>}</block></expr>,
<expr><block>{<expr>"_codecs_tw"</expr>, <expr><name>init_codecs_tw</name></expr>}</block></expr>,
<expr><block>{<expr>"marshal"</expr>, <expr><name>PyMarshal_Init</name></expr>}</block></expr>,
<expr><block>{<expr>"imp"</expr>, <expr><name>initimp</name></expr>}</block></expr>,
<expr><block>{<expr>"__main__"</expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"__builtin__"</expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"sys"</expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"exceptions"</expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"_warnings"</expr>, <expr><name>_PyWarnings_Init</name></expr>}</block></expr>,
<expr><block>{<expr>0</expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
