<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="PC/os2emx/dllentry.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF</name><parameter_list>(<param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>extern void s(); void *____ref_##s = &amp;s;</cpp:value></cpp:define>
<expr_stmt><expr><call><name>REF</name><argument_list>(<argument><expr><name>Py_Main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_CRT_init</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_CRT_term</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>__ctordtorInit</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>__ctordtorTerm</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function><type><name>unsigned</name> <name>long</name></type> <name>_DLL_InitTerm</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>long</name></type> <name>mod_handle</name></decl></param>, <param><decl><type><name>unsigned</name> <name>long</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>flag</name></expr>)</condition> <block>{
<case>case <expr>0</expr>:
<if>if <condition>(<expr><call><name>_CRT_init</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><call><name>__ctordtorInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGSEGV</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGFPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
</case><case>case <expr>1</expr>:
<expr_stmt><expr><call><name>__ctordtorTerm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_CRT_term</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
</case><default>default:
<return>return <expr>0</expr>;</return>
</default>}</block></switch>
}</block></function>
</unit>
