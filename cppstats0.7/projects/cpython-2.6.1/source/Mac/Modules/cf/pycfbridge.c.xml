<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Mac/Modules/cf/pycfbridge.c"><comment type="block">/*
** Convert objects from Python to CoreFoundation and vice-versa.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreServices/CoreServices.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pymactoolbox.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pycfbridge.h"</cpp:file></cpp:include>


<comment type="block">/* ---------------------------------------- */</comment>
<comment type="block">/* CoreFoundation objects to Python objects */</comment>
<comment type="block">/* ---------------------------------------- */</comment>

<function><type><name>PyObject</name> *</type>
<name>PyCF_CF2Python</name><parameter_list>(<param><decl><type><name>CFTypeRef</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>CFTypeID</name></type> <name>typeid</name></decl>;</decl_stmt>
	
	<if>if<condition>( <expr><name>src</name> == <name>NULL</name></expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>Py_None</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>typeid</name> = <call><name>CFGetTypeID</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>typeid</name> == <call><name>CFArrayGetTypeID</name><argument_list>()</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>PyCF_CF2Python_sequence</name><argument_list>(<argument><expr>(<name>CFArrayRef</name>)<name>src</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<if>if <condition>(<expr><name>typeid</name> == <call><name>CFDictionaryGetTypeID</name><argument_list>()</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>PyCF_CF2Python_mapping</name><argument_list>(<argument><expr>(<name>CFDictionaryRef</name>)<name>src</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<return>return <expr><call><name>PyCF_CF2Python_simple</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PyObject</name> *</type>
<name>PyCF_CF2Python_sequence</name><parameter_list>(<param><decl><type><name>CFArrayRef</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>CFArrayGetCount</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFTypeRef</name></type> <name>item_cf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>item_py</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	
	<if>if <condition>( <expr>(<name>rv</name>=<call><name>PyList_New</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr> )</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
		<expr_stmt><expr><name>item_cf</name> = <call><name>CFArrayGetValueAtIndex</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>item_cf</name> == <name>NULL</name></expr> )</condition><then> <goto>goto <name>err</name>;</goto></then></if>
		<expr_stmt><expr><name>item_py</name> = <call><name>PyCF_CF2Python</name><argument_list>(<argument><expr><name>item_cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>item_py</name> == <name>NULL</name></expr> )</condition><then> <goto>goto <name>err</name>;</goto></then></if>
		<if>if <condition>(<expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>item_py</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <goto>goto <name>err</name>;</goto></then></if>
		<expr_stmt><expr><name>item_py</name> = <name>NULL</name></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><name>rv</name></expr>;</return>
<label><name>err</name>:</label>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>item_py</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name> *</type>
<name>PyCF_CF2Python_mapping</name><parameter_list>(<param><decl><type><name>CFTypeRef</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>CFDictionaryGetCount</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFTypeRef</name> *</type><name>allkeys</name> <init>= <expr><name>NULL</name></expr></init>, *<name>allvalues</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFTypeRef</name></type> <name>key_cf</name></decl>, <decl><type ref="prev"/><name>value_cf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>key_py</name> <init>= <expr><name>NULL</name></expr></init>, *<name>value_py</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>allkeys</name> = <call><name>malloc</name><argument_list>(<argument><expr><name>size</name>*<sizeof>sizeof<argument_list>(<argument><expr><name>CFTypeRef</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>allkeys</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>err</name>;</goto>
	}</block></then></if>
	<expr_stmt><expr><name>allvalues</name> = <call><name>malloc</name><argument_list>(<argument><expr><name>size</name>*<sizeof>sizeof<argument_list>(<argument><expr><name>CFTypeRef</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>allvalues</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>err</name>;</goto>
	}</block></then></if>
	<if>if <condition>( <expr>(<name>rv</name>=<call><name>PyDict_New</name><argument_list>()</argument_list></call>) == <name>NULL</name></expr> )</condition><then> <goto>goto <name>err</name>;</goto></then></if>
	<expr_stmt><expr><call><name>CFDictionaryGetKeysAndValues</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>allkeys</name></expr></argument>, <argument><expr><name>allvalues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
		<expr_stmt><expr><name>key_cf</name> = <name><name>allkeys</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>value_cf</name> = <name><name>allvalues</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>key_py</name> = <call><name>PyCF_CF2Python</name><argument_list>(<argument><expr><name>key_cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>key_py</name> == <name>NULL</name></expr> )</condition><then> <goto>goto <name>err</name>;</goto></then></if>
		<expr_stmt><expr><name>value_py</name> = <call><name>PyCF_CF2Python</name><argument_list>(<argument><expr><name>value_cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>value_py</name> == <name>NULL</name></expr> )</condition><then> <goto>goto <name>err</name>;</goto></then></if>
		<if>if <condition>(<expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>key_py</name></expr></argument>, <argument><expr><name>value_py</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <goto>goto <name>err</name>;</goto></then></if>
		<expr_stmt><expr><name>key_py</name> = <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>value_py</name> = <name>NULL</name></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><name>rv</name></expr>;</return>
<label><name>err</name>:</label>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>key_py</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value_py</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>allkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>allvalues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name> *</type>
<name>PyCF_CF2Python_simple</name><parameter_list>(<param><decl><type><name>CFTypeRef</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>CFTypeID</name></type> <name>typeid</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>typeid</name> = <call><name>CFGetTypeID</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>typeid</name> == <call><name>CFStringGetTypeID</name><argument_list>()</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>PyCF_CF2Python_string</name><argument_list>(<argument><expr>(<name>CFStringRef</name>)<name>src</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<if>if <condition>(<expr><name>typeid</name> == <call><name>CFBooleanGetTypeID</name><argument_list>()</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>PyBool_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<call><name>CFBooleanGetValue</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<if>if <condition>(<expr><name>typeid</name> == <call><name>CFNumberGetTypeID</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><call><name>CFNumberIsFloatType</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>CFNumberGetValue</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>kCFNumberDoubleType</name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name>long</name></type> <name>l</name></decl>;</decl_stmt>
			<if>if <condition>(<expr>!<call><name>CFNumberGetValue</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>kCFNumberLongType</name></expr></argument>, <argument><expr>&amp;<name>l</name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<comment type="block">/* XXXX Out of range! */</comment><empty_stmt>;</empty_stmt></then></if>
			<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></else></if>
	}</block></then></if>
	<comment type="block">/* XXXX Should return as CFTypeRef, really... */</comment>
	<expr_stmt><expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>resNotFound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<comment type="block">/* Unsure - Return unicode or 8 bit strings? */</comment>
<function><type><name>PyObject</name> *</type>
<name>PyCF_CF2Python_string</name><parameter_list>(<param><decl><type><name>CFStringRef</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>CFStringGetLength</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call>+1</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Py_UNICODE</name> *</type><name>data</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name>*<sizeof>sizeof<argument_list>(<argument><expr><name>Py_UNICODE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFRange</name></type> <name>range</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>range</name>.<name>location</name></name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name><name>range</name>.<name>length</name></name> = <name>size</name></expr>;</expr_stmt>
	<if>if<condition>( <expr><name>data</name> == <name>NULL</name></expr> )</condition><then> <return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>CFStringGetCharacters</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> = (<name>PyObject</name> *)<call><name>PyUnicode_FromUnicode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<comment type="block">/* ---------------------------------------- */</comment>
<comment type="block">/* Python objects to CoreFoundation objects */</comment>
<comment type="block">/* ---------------------------------------- */</comment>

<function><type><name>int</name></type>
<name>PyCF_Python2CF</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>src</name></decl></param>, <param><decl><type><name>CFTypeRef</name> *</type><name>dst</name></decl></param>)</parameter_list> <block>{

	<if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> || <call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>PyCF_Python2CF_simple</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<if>if <condition>(<expr><call><name>PySequence_Check</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>PyCF_Python2CF_sequence</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr>(<name>CFArrayRef</name> *)<name>dst</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<if>if <condition>(<expr><call><name>PyMapping_Check</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>PyCF_Python2CF_mapping</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr>(<name>CFDictionaryRef</name> *)<name>dst</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<return>return <expr><call><name>PyCF_Python2CF_simple</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>PyCF_Python2CF_sequence</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>src</name></decl></param>, <param><decl><type><name>CFArrayRef</name> *</type><name>dst</name></decl></param>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>CFMutableArrayRef</name></type> <name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFTypeRef</name></type> <name>item_cf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>item_py</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	
	<if>if<condition>( <expr>!<call><name>PySequence_Check</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
			<argument><expr>"Cannot convert %.500s objects to CFArray"</expr></argument>,
			<argument><expr><name><name>src</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>0</expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>size</name> = <call><name>PySequence_Size</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> = <call><name>CFArrayCreateMutable</name><argument_list>(<argument><expr>(<name>CFAllocatorRef</name>)<name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr>&amp;<name>kCFTypeArrayCallBacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>rv</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>resNotFound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		<goto>goto <name>err</name>;</goto>
	}</block></then></if>

	<for>for( <init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
		<expr_stmt><expr><name>item_py</name> = <call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>item_py</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>err</name>;</goto></then></if>
		<if>if <condition>( <expr>!<call><name>PyCF_Python2CF</name><argument_list>(<argument><expr><name>item_py</name></expr></argument>, <argument><expr>&amp;<name>item_cf</name></expr></argument>)</argument_list></call></expr>)</condition><then> <goto>goto <name>err</name>;</goto></then></if>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item_py</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CFArraySetValueAtIndex</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>item_cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>item_cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>item_cf</name> = <name>NULL</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr>*<name>dst</name> = <name>rv</name></expr>;</expr_stmt>
	<return>return <expr>1</expr>;</return>
<label><name>err</name>:</label>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>item_py</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if>if <condition>(<expr><name>item_cf</name></expr>)</condition><then> <expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>item_cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<return>return <expr>0</expr>;</return>		
}</block></function>

<function><type><name>int</name></type>
<name>PyCF_Python2CF_mapping</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>src</name></decl></param>, <param><decl><type><name>CFDictionaryRef</name> *</type><name>dst</name></decl></param>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>aslist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFTypeRef</name></type> <name>key_cf</name> <init>= <expr><name>NULL</name></expr></init>, <name>value_cf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>item_py</name> <init>= <expr><name>NULL</name></expr></init>, *<name>key_py</name> <init>= <expr><name>NULL</name></expr></init>, *<name>value_py</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	
	<if>if<condition>( <expr>!<call><name>PyMapping_Check</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
			<argument><expr>"Cannot convert %.500s objects to CFDictionary"</expr></argument>,
			<argument><expr><name><name>src</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>0</expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>size</name> = <call><name>PyMapping_Size</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> = <call><name>CFDictionaryCreateMutable</name><argument_list>(<argument><expr>(<name>CFAllocatorRef</name>)<name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
					<argument><expr>&amp;<name>kCFTypeDictionaryKeyCallBacks</name></expr></argument>,
	                                <argument><expr>&amp;<name>kCFTypeDictionaryValueCallBacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>rv</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>resNotFound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		<goto>goto <name>err</name>;</goto>
	}</block></then></if>
	<if>if <condition>( <expr>(<name>aslist</name> = <call><name>PyMapping_Items</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr> )</condition><then> <goto>goto <name>err</name>;</goto></then></if>

	<for>for( <init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
		<expr_stmt><expr><name>item_py</name> = <call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>aslist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>item_py</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>err</name>;</goto></then></if>
		<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>item_py</name></expr></argument>, <argument><expr>"OO"</expr></argument>, <argument><expr>&amp;<name>key_py</name></expr></argument>, <argument><expr>&amp;<name>value_py</name></expr></argument>)</argument_list></call></expr>)</condition><then> <goto>goto <name>err</name>;</goto></then></if>
		<if>if <condition>( <expr>!<call><name>PyCF_Python2CF</name><argument_list>(<argument><expr><name>key_py</name></expr></argument>, <argument><expr>&amp;<name>key_cf</name></expr></argument>)</argument_list></call></expr> )</condition><then> <goto>goto <name>err</name>;</goto></then></if>
		<if>if <condition>( <expr>!<call><name>PyCF_Python2CF</name><argument_list>(<argument><expr><name>value_py</name></expr></argument>, <argument><expr>&amp;<name>value_cf</name></expr></argument>)</argument_list></call></expr> )</condition><then> <goto>goto <name>err</name>;</goto></then></if>
		<expr_stmt><expr><call><name>CFDictionaryAddValue</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>key_cf</name></expr></argument>, <argument><expr><name>value_cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>key_cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>key_cf</name> = <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>value_cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>value_cf</name> = <name>NULL</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr>*<name>dst</name> = <name>rv</name></expr>;</expr_stmt>
	<return>return <expr>1</expr>;</return>
<label><name>err</name>:</label>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>item_py</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>aslist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if>if <condition>(<expr><name>key_cf</name></expr>)</condition><then> <expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>key_cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if>if <condition>(<expr><name>value_cf</name></expr>)</condition><then> <expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>value_cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<return>return <expr>0</expr>;</return>		
}</block></function>

<function><type><name>int</name></type>
<name>PyCF_Python2CF_simple</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>src</name></decl></param>, <param><decl><type><name>CFTypeRef</name> *</type><name>dst</name></decl></param>)</parameter_list> <block>{
	
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
	if (PyObject_HasAttrString(src, "CFType")) {
		*dst = PyObject_CallMethod(src, "CFType", "");
		return (*dst != NULL);
	}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> || <call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><then> 
		<return>return <expr><call><name>PyCF_Python2CF_string</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr>(<name>CFStringRef</name> *)<name>dst</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<if>if <condition>(<expr><call><name>PyBool_Check</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name>src</name> == <name>Py_True</name></expr>)</condition><then>
			<expr_stmt><expr>*<name>dst</name> = <name>kCFBooleanTrue</name></expr>;</expr_stmt></then>
		<else>else
			<expr_stmt><expr>*<name>dst</name> = <name>kCFBooleanFalse</name></expr>;</expr_stmt></else></if>
		<return>return <expr>1</expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>long</name></type> <name>v</name> <init>= <expr><call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr>*<name>dst</name> = <call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kCFNumberLongType</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>1</expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr><call><name>PyFloat_Check</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><call><name>PyFloat_AsDouble</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr>*<name>dst</name> = <call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kCFNumberDoubleType</name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>1</expr>;</return>
	}</block></then></if>
			
	<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
		  <argument><expr>"Cannot convert %.500s objects to CFType"</expr></argument>,
				     <argument><expr><name><name>src</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>PyCF_Python2CF_string</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>src</name></decl></param>, <param><decl><type><name>CFStringRef</name> *</type><name>dst</name></decl></param>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>chars</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFIndex</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniChar</name> *</type><name>unichars</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr>"es"</expr></argument>, <argument><expr>"ascii"</expr></argument>, <argument><expr>&amp;<name>chars</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<return>return <expr>0</expr>;</return></then></if> <comment type="block">/* This error is more descriptive than the general one below */</comment>
		<expr_stmt><expr>*<name>dst</name> = <call><name>CFStringCreateWithCString</name><argument_list>(<argument><expr>(<name>CFAllocatorRef</name>)<name>NULL</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>kCFStringEncodingASCII</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>1</expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<comment type="block">/* We use the CF types here, if Python was configured differently that will give an error */</comment>
		<expr_stmt><expr><name>size</name> = <call><name>PyUnicode_GetSize</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr>(<name>unichars</name> = <call><name>PyUnicode_AsUnicode</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr> )</condition><then> <goto>goto <name>err</name>;</goto></then></if>
		<expr_stmt><expr>*<name>dst</name> = <call><name>CFStringCreateWithCharacters</name><argument_list>(<argument><expr>(<name>CFAllocatorRef</name>)<name>NULL</name></expr></argument>, <argument><expr><name>unichars</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>1</expr>;</return>
	}</block></then></if>
<label><name>err</name>:</label>
	<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
		  <argument><expr>"Cannot convert %.500s objects to CFString"</expr></argument>,
				     <argument><expr><name><name>src</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>0</expr>;</return>
}</block></function>
</unit>
