<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Mac/Modules/snd/_Sndihooks.c"><comment type="block">/***********************************************************
Copyright 1991-1995 by Stichting Mathematisch Centrum, Amsterdam,
The Netherlands.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the names of Stichting Mathematisch
Centrum or CWI or Corporation for National Research Initiatives or
CNRI not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior
permission.

While CWI is the initial source for this software, a modified version
is made available by the Corporation for National Research Initiatives
(CNRI) at the Internet address ftp://ftp.python.org.

STICHTING MATHEMATISCH CENTRUM AND CNRI DISCLAIM ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL STICHTING MATHEMATISCH
CENTRUM OR CNRI BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.

******************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pymactoolbox.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Sound.h&gt;</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> options align=mac68k</cpp:pragma>
<struct>struct <name>SampleRateAvailable_arg</name> <block>{
	<decl_stmt><decl><type><name>short</name></type>	<name>numrates</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type>	<name>rates</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>SampleSizeAvailable_arg</name> <block>{
	<decl_stmt><decl><type><name>short</name></type>	<name>numsizes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type>	<name>sizes</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> options align=reset</cpp:pragma>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ErrorObject</name></decl>;</decl_stmt>


<comment type="block">/* Convert Python object to unsigned Fixed */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>PyMac_GetUFixed</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>Fixed</name> *</type><name>f</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>uns</name></decl>;</decl_stmt>
	
	<if>if<condition>( <expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"d"</expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr>0</expr>;</return></then></if>
	<expr_stmt><expr><name>uns</name> = <call>(<name>unsigned</name> <name>long</name>)<argument_list>(<argument><expr><name>d</name> * 0x10000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr>*<name>f</name> = (<name>Fixed</name>)<name>uns</name></expr>;</expr_stmt>
	<return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/* Convert a Point to a Python object */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyMac_BuildUFixed</name><parameter_list>(<param><decl><type><name>Fixed</name></type> <name>f</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>funs</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>funs</name> = (<name>unsigned</name> <name>long</name>)<name>f</name></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>d</name> = <name>funs</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> = <name>d</name> / 0x10000</expr>;</expr_stmt>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"d"</expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* ----------------------------------------------------- */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sndih_getChannelAvailable__doc__</name><index>[]</index></name> <init>=
<expr>""</expr></init></decl>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sndih_getChannelAvailable</name><parameter_list>(<param><decl><type><name>self</name></type></decl></param>, <param><decl><type><name>args</name></type></decl></param>)</parameter_list>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>	<comment type="block">/* Not used */</comment>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>nchannel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name>inRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<if>if<condition>( <expr>(<name>err</name>=<call><name>SPBGetDeviceInfo</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>, <argument><expr><name>siChannelAvailable</name></expr></argument>, <argument><expr>(<name>Ptr</name>)&amp;<name>nchannel</name></expr></argument>)</argument_list></call>) != <name>noErr</name></expr> )</condition><then>
		<return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>, <argument><expr><name>nchannel</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sndih_getNumberChannels__doc__</name><index>[]</index></name> <init>=
<expr>""</expr></init></decl>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sndih_getNumberChannels</name><parameter_list>(<param><decl><type><name>self</name></type></decl></param>, <param><decl><type><name>args</name></type></decl></param>)</parameter_list>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>	<comment type="block">/* Not used */</comment>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>nchannel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name>inRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<if>if<condition>( <expr>(<name>err</name>=<call><name>SPBGetDeviceInfo</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>, <argument><expr><name>siNumberChannels</name></expr></argument>, <argument><expr>(<name>Ptr</name>)&amp;<name>nchannel</name></expr></argument>)</argument_list></call>) != <name>noErr</name></expr> )</condition><then>
		<return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>, <argument><expr><name>nchannel</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sndih_setNumberChannels__doc__</name><index>[]</index></name> <init>=
<expr>""</expr></init></decl>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sndih_setNumberChannels</name><parameter_list>(<param><decl><type><name>self</name></type></decl></param>, <param><decl><type><name>args</name></type></decl></param>)</parameter_list>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>	<comment type="block">/* Not used */</comment>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>nchannel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"lh"</expr></argument>, <argument><expr>&amp;<name>inRefNum</name></expr></argument>, <argument><expr>&amp;<name>nchannel</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<if>if<condition>( <expr>(<name>err</name>=<call><name>SPBSetDeviceInfo</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>, <argument><expr><name>siNumberChannels</name></expr></argument>, <argument><expr>(<name>Ptr</name>)&amp;<name>nchannel</name></expr></argument>)</argument_list></call>) != <name>noErr</name></expr> )</condition><then>
		<return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sndih_getContinuous__doc__</name><index>[]</index></name> <init>=
<expr>""</expr></init></decl>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sndih_getContinuous</name><parameter_list>(<param><decl><type><name>self</name></type></decl></param>, <param><decl><type><name>args</name></type></decl></param>)</parameter_list>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>	<comment type="block">/* Not used */</comment>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>onoff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name>inRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<if>if<condition>( <expr>(<name>err</name>=<call><name>SPBGetDeviceInfo</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>, <argument><expr><name>siContinuous</name></expr></argument>, <argument><expr>(<name>Ptr</name>)&amp;<name>onoff</name></expr></argument>)</argument_list></call>) != <name>noErr</name></expr> )</condition><then>
		<return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>, <argument><expr><name>onoff</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sndih_setContinuous__doc__</name><index>[]</index></name> <init>=
<expr>""</expr></init></decl>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sndih_setContinuous</name><parameter_list>(<param><decl><type><name>self</name></type></decl></param>, <param><decl><type><name>args</name></type></decl></param>)</parameter_list>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>	<comment type="block">/* Not used */</comment>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>onoff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"lh"</expr></argument>, <argument><expr>&amp;<name>inRefNum</name></expr></argument>, <argument><expr>&amp;<name>onoff</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<if>if<condition>( <expr>(<name>err</name>=<call><name>SPBSetDeviceInfo</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>, <argument><expr><name>siContinuous</name></expr></argument>, <argument><expr>(<name>Ptr</name>)&amp;<name>onoff</name></expr></argument>)</argument_list></call>) != <name>noErr</name></expr> )</condition><then>
		<return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sndih_getInputSourceNames__doc__</name><index>[]</index></name> <init>=
<expr>""</expr></init></decl>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sndih_getInputSourceNames</name><parameter_list>(<param><decl><type><name>self</name></type></decl></param>, <param><decl><type><name>args</name></type></decl></param>)</parameter_list>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>	<comment type="block">/* Not used */</comment>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>names</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name>inRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<if>if<condition>( <expr>(<name>err</name>=<call><name>SPBGetDeviceInfo</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>, <argument><expr><name>siInputSourceNames</name></expr></argument>, <argument><expr>(<name>Ptr</name>)&amp;<name>names</name></expr></argument>)</argument_list></call>) != <name>noErr</name></expr> )</condition><then>
		<return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sndih_getInputSource__doc__</name><index>[]</index></name> <init>=
<expr>""</expr></init></decl>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sndih_getInputSource</name><parameter_list>(<param><decl><type><name>self</name></type></decl></param>, <param><decl><type><name>args</name></type></decl></param>)</parameter_list>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>	<comment type="block">/* Not used */</comment>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>source</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name>inRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<if>if<condition>( <expr>(<name>err</name>=<call><name>SPBGetDeviceInfo</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>, <argument><expr><name>siInputSource</name></expr></argument>, <argument><expr>(<name>Ptr</name>)&amp;<name>source</name></expr></argument>)</argument_list></call>) != <name>noErr</name></expr> )</condition><then>
		<return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sndih_setInputSource__doc__</name><index>[]</index></name> <init>=
<expr>""</expr></init></decl>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sndih_setInputSource</name><parameter_list>(<param><decl><type><name>self</name></type></decl></param>, <param><decl><type><name>args</name></type></decl></param>)</parameter_list>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>	<comment type="block">/* Not used */</comment>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>source</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"lh"</expr></argument>, <argument><expr>&amp;<name>inRefNum</name></expr></argument>, <argument><expr>&amp;<name>source</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<if>if<condition>( <expr>(<name>err</name>=<call><name>SPBSetDeviceInfo</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>, <argument><expr><name>siInputSource</name></expr></argument>, <argument><expr>(<name>Ptr</name>)&amp;<name>source</name></expr></argument>)</argument_list></call>) != <name>noErr</name></expr> )</condition><then>
		<return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sndih_getPlayThruOnOff__doc__</name><index>[]</index></name> <init>=
<expr>""</expr></init></decl>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sndih_getPlayThruOnOff</name><parameter_list>(<param><decl><type><name>self</name></type></decl></param>, <param><decl><type><name>args</name></type></decl></param>)</parameter_list>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>	<comment type="block">/* Not used */</comment>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>onoff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name>inRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<if>if<condition>( <expr>(<name>err</name>=<call><name>SPBGetDeviceInfo</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>, <argument><expr><name>siPlayThruOnOff</name></expr></argument>, <argument><expr>(<name>Ptr</name>)&amp;<name>onoff</name></expr></argument>)</argument_list></call>) != <name>noErr</name></expr> )</condition><then>
		<return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>, <argument><expr><name>onoff</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sndih_setPlayThruOnOff__doc__</name><index>[]</index></name> <init>=
<expr>""</expr></init></decl>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sndih_setPlayThruOnOff</name><parameter_list>(<param><decl><type><name>self</name></type></decl></param>, <param><decl><type><name>args</name></type></decl></param>)</parameter_list>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>	<comment type="block">/* Not used */</comment>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>onoff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"lh"</expr></argument>, <argument><expr>&amp;<name>inRefNum</name></expr></argument>, <argument><expr>&amp;<name>onoff</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<if>if<condition>( <expr>(<name>err</name>=<call><name>SPBSetDeviceInfo</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>, <argument><expr><name>siPlayThruOnOff</name></expr></argument>, <argument><expr>(<name>Ptr</name>)&amp;<name>onoff</name></expr></argument>)</argument_list></call>) != <name>noErr</name></expr> )</condition><then>
		<return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sndih_getSampleRate__doc__</name><index>[]</index></name> <init>=
<expr>""</expr></init></decl>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sndih_getSampleRate</name><parameter_list>(<param><decl><type><name>self</name></type></decl></param>, <param><decl><type><name>args</name></type></decl></param>)</parameter_list>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>	<comment type="block">/* Not used */</comment>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Fixed</name></type> <name>sample_rate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name>inRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<if>if<condition>( <expr>(<name>err</name>=<call><name>SPBGetDeviceInfo</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>, <argument><expr><name>siSampleRate</name></expr></argument>, <argument><expr>(<name>Ptr</name>)&amp;<name>sample_rate</name></expr></argument>)</argument_list></call>) != <name>noErr</name></expr> )</condition><then>
		<return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_BuildUFixed</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sndih_setSampleRate__doc__</name><index>[]</index></name> <init>=
<expr>""</expr></init></decl>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sndih_setSampleRate</name><parameter_list>(<param><decl><type><name>self</name></type></decl></param>, <param><decl><type><name>args</name></type></decl></param>)</parameter_list>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>	<comment type="block">/* Not used */</comment>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Fixed</name></type> <name>sample_rate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"lO&amp;"</expr></argument>, <argument><expr>&amp;<name>inRefNum</name></expr></argument>, <argument><expr><name>PyMac_GetUFixed</name></expr></argument>, <argument><expr>&amp;<name>sample_rate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<if>if<condition>( <expr>(<name>err</name>=<call><name>SPBSetDeviceInfo</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>, <argument><expr><name>siSampleRate</name></expr></argument>, <argument><expr>(<name>Ptr</name>)&amp;<name>sample_rate</name></expr></argument>)</argument_list></call>) != <name>noErr</name></expr> )</condition><then>
		<return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sndih_getSampleSize__doc__</name><index>[]</index></name> <init>=
<expr>""</expr></init></decl>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sndih_getSampleSize</name><parameter_list>(<param><decl><type><name>self</name></type></decl></param>, <param><decl><type><name>args</name></type></decl></param>)</parameter_list>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>	<comment type="block">/* Not used */</comment>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>bits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name>inRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<if>if<condition>( <expr>(<name>err</name>=<call><name>SPBGetDeviceInfo</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>, <argument><expr><name>siSampleSize</name></expr></argument>, <argument><expr>(<name>Ptr</name>)&amp;<name>bits</name></expr></argument>)</argument_list></call>) != <name>noErr</name></expr> )</condition><then>
		<return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sndih_setSampleSize__doc__</name><index>[]</index></name> <init>=
<expr>""</expr></init></decl>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sndih_setSampleSize</name><parameter_list>(<param><decl><type><name>self</name></type></decl></param>, <param><decl><type><name>args</name></type></decl></param>)</parameter_list>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>	<comment type="block">/* Not used */</comment>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"lh"</expr></argument>, <argument><expr>&amp;<name>inRefNum</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<if>if<condition>( <expr>(<name>err</name>=<call><name>SPBSetDeviceInfo</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>, <argument><expr><name>siSampleSize</name></expr></argument>, <argument><expr>(<name>Ptr</name>)&amp;<name>size</name></expr></argument>)</argument_list></call>) != <name>noErr</name></expr> )</condition><then>
		<return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sndih_getSampleSizeAvailable__doc__</name><index>[]</index></name> <init>=
<expr>""</expr></init></decl>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sndih_getSampleSizeAvailable</name><parameter_list>(<param><decl><type><name>self</name></type></decl></param>, <param><decl><type><name>args</name></type></decl></param>)</parameter_list>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>	<comment type="block">/* Not used */</comment>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type>struct <name>SampleSizeAvailable_arg</name></type> <name>arg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>rsizes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name> *</type><name>fsizes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>arg</name>.<name>sizes</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rsizes</name> = <name>NULL</name></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name>inRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<if>if<condition>( <expr>(<name>err</name>=<call><name>SPBGetDeviceInfo</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>, <argument><expr><name>siSampleSizeAvailable</name></expr></argument>, <argument><expr>(<name>Ptr</name>)&amp;<name>arg</name></expr></argument>)</argument_list></call>) != <name>noErr</name></expr> )</condition><then> <block>{
		<return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>fsizes</name> = (<name>short</name> *)*(<name><name>arg</name>.<name>sizes</name></name>)</expr>;</expr_stmt>
	<comment type="block">/* Handle contains a list of rates */</comment>
	<if>if<condition>( <expr>(<name>rsizes</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr><name><name>arg</name>.<name>numsizes</name></name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<for>for( <init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name><name>arg</name>.<name>numsizes</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )
		<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>rsizes</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name><name>fsizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
	<return>return <expr><name>rsizes</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sndih_getSampleRateAvailable__doc__</name><index>[]</index></name> <init>=
<expr>""</expr></init></decl>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sndih_getSampleRateAvailable</name><parameter_list>(<param><decl><type><name>self</name></type></decl></param>, <param><decl><type><name>args</name></type></decl></param>)</parameter_list>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>	<comment type="block">/* Not used */</comment>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type>struct <name>SampleRateAvailable_arg</name></type> <name>arg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>rrates</name></decl>, *<decl><type ref="prev"/><name>obj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Fixed</name> *</type><name>frates</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>arg</name>.<name>rates</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rrates</name> = <name>NULL</name></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name>inRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<if>if<condition>( <expr>(<name>err</name>=<call><name>SPBGetDeviceInfo</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>, <argument><expr><name>siSampleRateAvailable</name></expr></argument>, <argument><expr>(<name>Ptr</name>)&amp;<name>arg</name></expr></argument>)</argument_list></call>) != <name>noErr</name></expr> )</condition><then> <block>{
		<return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>frates</name> = (<name>Fixed</name> *)*(<name><name>arg</name>.<name>rates</name></name>)</expr>;</expr_stmt>
	<if>if<condition>( <expr><name><name>arg</name>.<name>numrates</name></name> == 0</expr> )</condition><then> <block>{
		<comment type="block">/* The handle contains upper and lowerbound */</comment>
		<expr_stmt><expr><name>rrates</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>, <argument><expr><name><name>frates</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>frates</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>rrates</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	}</block></then> <else>else <block>{
		<comment type="block">/* Handle contains a list of rates */</comment>
		<if>if<condition>( <expr>(<name>rrates</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr><name><name>arg</name>.<name>numrates</name></name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
			<return>return <expr><name>NULL</name></expr>;</return></then></if>
		<for>for( <init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name><name>arg</name>.<name>numrates</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> ) <block>{
			<if>if<condition>( <expr>(<name>obj</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_BuildUFixed</name></expr></argument>, <argument><expr><name><name>frates</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>)==<name>NULL</name></expr>)</condition><then>
				<goto>goto <name>out</name>;</goto></then></if>
			<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>rrates</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></else></if>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"hO"</expr></argument>, <argument><expr><name><name>arg</name>.<name>numrates</name></name></expr></argument>, <argument><expr><name>rrates</name></expr></argument>)</argument_list></call></expr>;</return>
<label><name>out</name>:</label>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>rrates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<comment type="block">/* List of methods defined in the module */</comment>

<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>sndih_methods</name><index>[]</index></name> <init>= <expr><block>{
 <expr><block>{<expr>"getChannelAvailable"</expr>,	<expr>(<name>PyCFunction</name>)<name>sndih_getChannelAvailable</name></expr>,	<expr><name>METH_VARARGS</name></expr>,	<expr><name>sndih_getChannelAvailable__doc__</name></expr>}</block></expr>,
 <expr><block>{<expr>"getNumberChannels"</expr>,	<expr>(<name>PyCFunction</name>)<name>sndih_getNumberChannels</name></expr>,	<expr><name>METH_VARARGS</name></expr>,	<expr><name>sndih_getNumberChannels__doc__</name></expr>}</block></expr>,
 <expr><block>{<expr>"setNumberChannels"</expr>,	<expr>(<name>PyCFunction</name>)<name>sndih_setNumberChannels</name></expr>,	<expr><name>METH_VARARGS</name></expr>,	<expr><name>sndih_setNumberChannels__doc__</name></expr>}</block></expr>,
 <expr><block>{<expr>"getContinuous"</expr>,	<expr>(<name>PyCFunction</name>)<name>sndih_getContinuous</name></expr>,	<expr><name>METH_VARARGS</name></expr>,	<expr><name>sndih_getContinuous__doc__</name></expr>}</block></expr>,
 <expr><block>{<expr>"setContinuous"</expr>,	<expr>(<name>PyCFunction</name>)<name>sndih_setContinuous</name></expr>,	<expr><name>METH_VARARGS</name></expr>,	<expr><name>sndih_setContinuous__doc__</name></expr>}</block></expr>,
 <expr><block>{<expr>"getInputSourceNames"</expr>,	<expr>(<name>PyCFunction</name>)<name>sndih_getInputSourceNames</name></expr>,	<expr><name>METH_VARARGS</name></expr>,	<expr><name>sndih_getInputSourceNames__doc__</name></expr>}</block></expr>,
 <expr><block>{<expr>"getInputSource"</expr>,	<expr>(<name>PyCFunction</name>)<name>sndih_getInputSource</name></expr>,	<expr><name>METH_VARARGS</name></expr>,	<expr><name>sndih_getInputSource__doc__</name></expr>}</block></expr>,
 <expr><block>{<expr>"setInputSource"</expr>,	<expr>(<name>PyCFunction</name>)<name>sndih_setInputSource</name></expr>,	<expr><name>METH_VARARGS</name></expr>,	<expr><name>sndih_setInputSource__doc__</name></expr>}</block></expr>,
 <expr><block>{<expr>"getPlayThruOnOff"</expr>,	<expr>(<name>PyCFunction</name>)<name>sndih_getPlayThruOnOff</name></expr>,	<expr><name>METH_VARARGS</name></expr>,	<expr><name>sndih_getPlayThruOnOff__doc__</name></expr>}</block></expr>,
 <expr><block>{<expr>"setPlayThruOnOff"</expr>,	<expr>(<name>PyCFunction</name>)<name>sndih_setPlayThruOnOff</name></expr>,	<expr><name>METH_VARARGS</name></expr>,	<expr><name>sndih_setPlayThruOnOff__doc__</name></expr>}</block></expr>,
 <expr><block>{<expr>"getSampleRate"</expr>,	<expr>(<name>PyCFunction</name>)<name>sndih_getSampleRate</name></expr>,	<expr><name>METH_VARARGS</name></expr>,	<expr><name>sndih_getSampleRate__doc__</name></expr>}</block></expr>,
 <expr><block>{<expr>"setSampleRate"</expr>,	<expr>(<name>PyCFunction</name>)<name>sndih_setSampleRate</name></expr>,	<expr><name>METH_VARARGS</name></expr>,	<expr><name>sndih_setSampleRate__doc__</name></expr>}</block></expr>,
 <expr><block>{<expr>"getSampleSize"</expr>,	<expr>(<name>PyCFunction</name>)<name>sndih_getSampleSize</name></expr>,	<expr><name>METH_VARARGS</name></expr>,	<expr><name>sndih_getSampleSize__doc__</name></expr>}</block></expr>,
 <expr><block>{<expr>"setSampleSize"</expr>,	<expr>(<name>PyCFunction</name>)<name>sndih_setSampleSize</name></expr>,	<expr><name>METH_VARARGS</name></expr>,	<expr><name>sndih_setSampleSize__doc__</name></expr>}</block></expr>,
 <expr><block>{<expr>"getSampleSizeAvailable"</expr>,	<expr>(<name>PyCFunction</name>)<name>sndih_getSampleSizeAvailable</name></expr>,	<expr><name>METH_VARARGS</name></expr>,	<expr><name>sndih_getSampleSizeAvailable__doc__</name></expr>}</block></expr>,
 <expr><block>{<expr>"getSampleRateAvailable"</expr>,	<expr>(<name>PyCFunction</name>)<name>sndih_getSampleRateAvailable</name></expr>,	<expr><name>METH_VARARGS</name></expr>,	<expr><name>sndih_getSampleRateAvailable__doc__</name></expr>}</block></expr>,
 
	<expr><block>{<expr><name>NULL</name></expr>,	 <expr>(<name>PyCFunction</name>)<name>NULL</name></expr>, <expr>0</expr>, <expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* Initialization function for the module (*must* be called initSndihooks) */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>Sndihooks_module_documentation</name><index>[]</index></name> <init>= 
<expr>""</expr></init></decl>
;</decl_stmt>

<function><type><name>void</name></type>
<name>init_Sndihooks</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

	<comment type="block">/* Create the module and add the functions */</comment>
	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule4</name><argument_list>(<argument><expr>"_Sndihooks"</expr></argument>, <argument><expr><name>sndih_methods</name></expr></argument>,
		<argument><expr><name>Sndihooks_module_documentation</name></expr></argument>,
		<argument><expr>(<name>PyObject</name>*)<name>NULL</name></expr></argument>,<argument><expr><name>PYTHON_API_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Add some symbolic constants to the module */</comment>
	<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ErrorObject</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>"Sndihooks.error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"error"</expr></argument>, <argument><expr><name>ErrorObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* XXXX Add constants here */</comment>
	
	<comment type="block">/* Check for errors */</comment>
	<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
		<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"can't initialize module Sndihooks"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

</unit>
