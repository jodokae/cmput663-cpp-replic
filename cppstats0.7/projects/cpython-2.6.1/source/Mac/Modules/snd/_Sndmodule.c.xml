<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Mac/Modules/snd/_Sndmodule.c">
<comment type="block">/* ========================== Module _Snd =========================== */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pymactoolbox.h"</cpp:file></cpp:include>

<comment type="block">/* Macro to test whether a weak-loaded CFM function exists */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMac_PRECHECK</name><parameter_list>(<param><type><name>rtn</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { if ( &amp;rtn == NULL )  {\
        PyErr_SetString(PyExc_NotImplementedError, \
        "Not available in this shared library/OS version"); \
        return NULL; \
    }} while(0)</cpp:value></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Carbon/Carbon.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Convert a SndCommand argument */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>SndCmd_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>SndCommand</name> *</type><name>pc</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pc</name>-&gt;<name>param1</name></name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pc</name>-&gt;<name>param2</name></name> = 0</expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"h|hl"</expr></argument>, <argument><expr>&amp;<name><name>pc</name>-&gt;<name>cmd</name></name></expr></argument>, <argument><expr>&amp;<name><name>pc</name>-&gt;<name>param1</name></name></expr></argument>, <argument><expr>&amp;<name><name>pc</name>-&gt;<name>param2</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <return>return <expr>1</expr>;</return></then></if>
                <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"Hhs#"</expr></argument>, <argument><expr>&amp;<name><name>pc</name>-&gt;<name>cmd</name></name></expr></argument>, <argument><expr>&amp;<name><name>pc</name>-&gt;<name>param1</name></name></expr></argument>, <argument><expr>&amp;<name><name>pc</name>-&gt;<name>param2</name></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"H"</expr></argument>, <argument><expr>&amp;<name><name>pc</name>-&gt;<name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function_decl><type><specifier>static</specifier> <name>pascal</name> <name>void</name></type> <name>SndCh_UserRoutine</name><parameter_list>(<param><decl><type><name>SndChannelPtr</name></type> <name>chan</name></decl></param>, <param><decl><type><name>SndCommand</name> *</type><name>cmd</name></decl></param>)</parameter_list>;</function_decl> <comment type="block">/* Forward */</comment>
<function_decl><type><specifier>static</specifier> <name>pascal</name> <name>void</name></type> <name>SPB_completion</name><parameter_list>(<param><decl><type><name>SPBPtr</name></type> <name>my_spb</name></decl></param>)</parameter_list>;</function_decl> <comment type="block">/* Forward */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_Error</name></decl>;</decl_stmt>

<comment type="block">/* --------------------- Object type SndChannel --------------------- */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>SndChannel_Type</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SndCh_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;SndChannel_Type || PyObject_TypeCheck((x), &amp;SndChannel_Type))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>SndChannelObject</name> <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>SndChannelPtr</name></type> <name>ob_itself</name></decl>;</decl_stmt>
	<comment type="block">/* Members used to implement callbacks: */</comment>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>ob_callback</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>ob_A5</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SndCommand</name></type> <name>ob_cmd</name></decl>;</decl_stmt>
}</block></struct></type> <name>SndChannelObject</name>;</typedef>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>SndCh_New</name><parameter_list>(<param><decl><type><name>SndChannelPtr</name></type> <name>itself</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>SndChannelObject</name> *</type><name>it</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>SndChannelObject</name></expr></argument>, <argument><expr>&amp;<name>SndChannel_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_itself</name></name> = <name>itself</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_callback</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_A5</name></name> = <call><name>SetCurrentA5</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SndCh_dealloc</name><parameter_list>(<param><decl><type><name>SndChannelObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>SndDisposeChannel</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyObject_Free</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>SndCh_SndDoCommand</name><parameter_list>(<param><decl><type><name>SndChannelObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SndCommand</name></type> <name>cmd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>noWait</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
	                      <argument><expr><name>SndCmd_Convert</name></expr></argument>, <argument><expr>&amp;<name>cmd</name></expr></argument>,
	                      <argument><expr>&amp;<name>noWait</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SndDoCommand</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                    <argument><expr>&amp;<name>cmd</name></expr></argument>,
	                    <argument><expr><name>noWait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>SndCh_SndDoImmediate</name><parameter_list>(<param><decl><type><name>SndChannelObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SndCommand</name></type> <name>cmd</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>SndCmd_Convert</name></expr></argument>, <argument><expr>&amp;<name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SndDoImmediate</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                      <argument><expr>&amp;<name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>SndCh_SndPlay</name><parameter_list>(<param><decl><type><name>SndChannelObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SndListHandle</name></type> <name>sndHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>async</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sndHandle</name></expr></argument>,
	                      <argument><expr>&amp;<name>async</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SndPlay</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	               <argument><expr><name>sndHandle</name></expr></argument>,
	               <argument><expr><name>async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>SndCh_SndChannelStatus</name><parameter_list>(<param><decl><type><name>SndChannelObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>theLength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SCStatus</name></type> <name>theStatus__out__</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>theLength</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SndChannelStatus</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                        <argument><expr><name>theLength</name></expr></argument>,
	                        <argument><expr>&amp;<name>theStatus__out__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"s#"</expr></argument>,
	                     <argument><expr>(<name>char</name> *)&amp;<name>theStatus__out__</name></expr></argument>, <argument><expr>(<name>int</name>)<sizeof>sizeof<argument_list>(<argument><expr><name>SCStatus</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>SndCh_SndGetInfo</name><parameter_list>(<param><decl><type><name>SndChannelObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>selector</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> *</type> <name>infoPtr</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;w"</expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>selector</name></expr></argument>,
	                      <argument><expr>&amp;<name>infoPtr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SndGetInfo</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                  <argument><expr><name>selector</name></expr></argument>,
	                  <argument><expr><name>infoPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>SndCh_SndSetInfo</name><parameter_list>(<param><decl><type><name>SndChannelObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>selector</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> *</type> <name>infoPtr</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;w"</expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>selector</name></expr></argument>,
	                      <argument><expr>&amp;<name>infoPtr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SndSetInfo</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                  <argument><expr><name>selector</name></expr></argument>,
	                  <argument><expr><name>infoPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>SndCh_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"SndDoCommand"</expr>, <expr>(<name>PyCFunction</name>)<name>SndCh_SndDoCommand</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SndCommand cmd, Boolean noWait) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SndDoImmediate"</expr>, <expr>(<name>PyCFunction</name>)<name>SndCh_SndDoImmediate</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SndCommand cmd) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SndPlay"</expr>, <expr>(<name>PyCFunction</name>)<name>SndCh_SndPlay</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SndListHandle sndHandle, Boolean async) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SndChannelStatus"</expr>, <expr>(<name>PyCFunction</name>)<name>SndCh_SndChannelStatus</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short theLength) -&gt; (SCStatus theStatus)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SndGetInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>SndCh_SndGetInfo</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType selector, void * infoPtr) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SndSetInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>SndCh_SndSetInfo</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType selector, void * infoPtr) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SndCh_getsetlist</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SndCh_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SndCh_repr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SndCh_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>SndChannel_Type</name> <init>= <expr><block>{
	<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
	0</expr>, <comment type="block">/*ob_size*/</comment>
	<expr>"_Snd.SndChannel"</expr>, <comment type="block">/*tp_name*/</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>SndChannelObject</name></expr></argument>)</argument_list></sizeof></expr>, <comment type="block">/*tp_basicsize*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>) <name>SndCh_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_print*/</comment>
	<expr>(<name>getattrfunc</name>)0</expr>, <comment type="block">/*tp_getattr*/</comment>
	<expr>(<name>setattrfunc</name>)0</expr>, <comment type="block">/*tp_setattr*/</comment>
	<expr>(<name>cmpfunc</name>) <name>SndCh_compare</name></expr>, <comment type="block">/*tp_compare*/</comment>
	<expr>(<name>reprfunc</name>) <name>SndCh_repr</name></expr>, <comment type="block">/*tp_repr*/</comment>
	<expr>(<name>PyNumberMethods</name> *)0</expr>, <comment type="block">/* tp_as_number */</comment>
	<expr>(<name>PySequenceMethods</name> *)0</expr>, <comment type="block">/* tp_as_sequence */</comment>
	<expr>(<name>PyMappingMethods</name> *)0</expr>, <comment type="block">/* tp_as_mapping */</comment>
	<expr>(<name>hashfunc</name>) <name>SndCh_hash</name></expr>, <comment type="block">/*tp_hash*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_call*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_str*/</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>, <comment type="block">/*tp_getattro*/</comment>
	<expr><name>PyObject_GenericSetAttr</name></expr>, <comment type="block">/*tp_setattro */</comment>
	<expr>0</expr>, <comment type="block">/*tp_as_buffer*/</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name></expr>, <comment type="block">/* tp_flags */</comment>
	<expr>0</expr>, <comment type="block">/*tp_doc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_traverse*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_clear*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_richcompare*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_weaklistoffset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iter*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iternext*/</comment>
	<expr><name>SndCh_methods</name></expr>, <comment type="block">/* tp_methods */</comment>
	<expr>0</expr>, <comment type="block">/*tp_members*/</comment>
	<expr><name>SndCh_getsetlist</name></expr>, <comment type="block">/*tp_getset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_base*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dict*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_get*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_set*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dictoffset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_init*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_alloc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_new*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_free*/</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* ------------------- End object type SndChannel ------------------- */</comment>


<comment type="block">/* ------------------------ Object type SPB ------------------------- */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>SPB_Type</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPBObj_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;SPB_Type || PyObject_TypeCheck((x), &amp;SPB_Type))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>SPBObject</name> <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<comment type="block">/* Members used to implement callbacks: */</comment>
	<name>PyObject</name> *</type><name>ob_completion</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>ob_interrupt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>ob_thiscallback</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>ob_A5</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SPB</name></type> <name>ob_spb</name></decl>;</decl_stmt>
}</block></struct></type> <name>SPBObject</name>;</typedef>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>SPBObj_New</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>SPBObject</name> *</type><name>it</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>SPBObject</name></expr></argument>, <argument><expr>&amp;<name>SPB_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_completion</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_interrupt</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_thiscallback</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_A5</name></name> = <call><name>SetCurrentA5</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>(<name>char</name> *)&amp;<name><name>it</name>-&gt;<name>ob_spb</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>it</name>-&gt;<name>ob_spb</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_spb</name>.<name>userLong</name></name> = (<name>long</name>)<name>it</name></expr>;</expr_stmt>
	<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>SPBObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>SPBPtr</name> *</type><name>p_itself</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr>!<call><name>SPBObj_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"SPB required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>0</expr>;</return>
	}</block></then></if>
	<expr_stmt><expr>*<name>p_itself</name> = &amp;((<name>SPBObject</name> *)<name>v</name>)-&gt;<name>ob_spb</name></expr>;</expr_stmt>
	<return>return <expr>1</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SPBObj_dealloc</name><parameter_list>(<param><decl><type><name>SPBObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<comment type="block">/* Cleanup of self-&gt;ob_itself goes here */</comment>
	<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_spb</name>.<name>userLong</name></name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_thiscallback</name></name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_completion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_interrupt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyObject_Free</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>SPBObj_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>SPBObj_get_inRefNum</name><parameter_list>(<param><decl><type><name>SPBObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_spb</name>.<name>inRefNum</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SPBObj_set_inRefNum</name><parameter_list>(<param><decl><type><name>SPBObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr>-1 + <call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_spb</name>.<name>inRefNum</name></name></expr></argument>)</argument_list></call></expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>SPBObj_get_count</name><parameter_list>(<param><decl><type><name>SPBObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_spb</name>.<name>count</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SPBObj_set_count</name><parameter_list>(<param><decl><type><name>SPBObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr>-1 + <call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_spb</name>.<name>count</name></name></expr></argument>)</argument_list></call></expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>SPBObj_get_milliseconds</name><parameter_list>(<param><decl><type><name>SPBObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_spb</name>.<name>milliseconds</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SPBObj_set_milliseconds</name><parameter_list>(<param><decl><type><name>SPBObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr>-1 + <call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_spb</name>.<name>milliseconds</name></name></expr></argument>)</argument_list></call></expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>SPBObj_get_error</name><parameter_list>(<param><decl><type><name>SPBObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_spb</name>.<name>error</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPBObj_set_error</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPBObj_get_completionRoutine</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SPBObj_set_completionRoutine</name><parameter_list>(<param><decl><type><name>SPBObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_spb</name>.<name>completionRoutine</name></name> = <call><name>NewSICompletionUPP</name><argument_list>(<argument><expr><name>SPB_completion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><name><name>self</name>-&gt;<name>ob_completion</name></name> = <name>v</name></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <return>return <expr>0</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>SPBObj_getsetlist</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"inRefNum"</expr>, <expr>(<name>getter</name>)<name>SPBObj_get_inRefNum</name></expr>, <expr>(<name>setter</name>)<name>SPBObj_set_inRefNum</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"count"</expr>, <expr>(<name>getter</name>)<name>SPBObj_get_count</name></expr>, <expr>(<name>setter</name>)<name>SPBObj_set_count</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"milliseconds"</expr>, <expr>(<name>getter</name>)<name>SPBObj_get_milliseconds</name></expr>, <expr>(<name>setter</name>)<name>SPBObj_set_milliseconds</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"error"</expr>, <expr>(<name>getter</name>)<name>SPBObj_get_error</name></expr>, <expr>(<name>setter</name>)<name>SPBObj_set_error</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"completionRoutine"</expr>, <expr>(<name>getter</name>)<name>SPBObj_get_completionRoutine</name></expr>, <expr>(<name>setter</name>)<name>SPBObj_set_completionRoutine</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPBObj_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPBObj_repr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPBObj_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>SPB_Type</name> <init>= <expr><block>{
	<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
	0</expr>, <comment type="block">/*ob_size*/</comment>
	<expr>"_Snd.SPB"</expr>, <comment type="block">/*tp_name*/</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>SPBObject</name></expr></argument>)</argument_list></sizeof></expr>, <comment type="block">/*tp_basicsize*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>) <name>SPBObj_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_print*/</comment>
	<expr>(<name>getattrfunc</name>)0</expr>, <comment type="block">/*tp_getattr*/</comment>
	<expr>(<name>setattrfunc</name>)0</expr>, <comment type="block">/*tp_setattr*/</comment>
	<expr>(<name>cmpfunc</name>) <name>SPBObj_compare</name></expr>, <comment type="block">/*tp_compare*/</comment>
	<expr>(<name>reprfunc</name>) <name>SPBObj_repr</name></expr>, <comment type="block">/*tp_repr*/</comment>
	<expr>(<name>PyNumberMethods</name> *)0</expr>, <comment type="block">/* tp_as_number */</comment>
	<expr>(<name>PySequenceMethods</name> *)0</expr>, <comment type="block">/* tp_as_sequence */</comment>
	<expr>(<name>PyMappingMethods</name> *)0</expr>, <comment type="block">/* tp_as_mapping */</comment>
	<expr>(<name>hashfunc</name>) <name>SPBObj_hash</name></expr>, <comment type="block">/*tp_hash*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_call*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_str*/</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>, <comment type="block">/*tp_getattro*/</comment>
	<expr><name>PyObject_GenericSetAttr</name></expr>, <comment type="block">/*tp_setattro */</comment>
	<expr>0</expr>, <comment type="block">/*tp_as_buffer*/</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name></expr>, <comment type="block">/* tp_flags */</comment>
	<expr>0</expr>, <comment type="block">/*tp_doc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_traverse*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_clear*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_richcompare*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_weaklistoffset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iter*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iternext*/</comment>
	<expr><name>SPBObj_methods</name></expr>, <comment type="block">/* tp_methods */</comment>
	<expr>0</expr>, <comment type="block">/*tp_members*/</comment>
	<expr><name>SPBObj_getsetlist</name></expr>, <comment type="block">/*tp_getset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_base*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dict*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_get*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_set*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dictoffset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_init*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_alloc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_new*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_free*/</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* ---------------------- End object type SPB ----------------------- */</comment>


<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SPB</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>SPBObj_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SysBeep</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>duration</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SysBeep</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SndNewChannel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SndChannelPtr</name></type> <name>chan</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>synth</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>init</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>*</type> <name>userRoutine</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hlO"</expr></argument>,
	                      <argument><expr>&amp;<name>synth</name></expr></argument>,
	                      <argument><expr>&amp;<name>init</name></expr></argument>,
	                      <argument><expr>&amp;<name>userRoutine</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr><name>userRoutine</name> != <name>Py_None</name> &amp;&amp; !<call><name>PyCallable_Check</name><argument_list>(<argument><expr><name>userRoutine</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"callback must be callable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>userRoutine__error__</name>;</goto>
	}</block></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SndNewChannel</name><argument_list>(<argument><expr>&amp;<name>chan</name></expr></argument>,
	                     <argument><expr><name>synth</name></expr></argument>,
	                     <argument><expr><name>init</name></expr></argument>,
	                     <argument><expr><call><name>NewSndCallBackUPP</name><argument_list>(<argument><expr><name>SndCh_UserRoutine</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>SndCh_New</name></expr></argument>, <argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_res</name> != <name>NULL</name> &amp;&amp; <name>userRoutine</name> != <name>Py_None</name></expr>)</condition><then>
	<block>{
		<decl_stmt><decl><type><name>SndChannelObject</name> *</type><name>p</name> <init>= <expr>(<name>SndChannelObject</name> *)<name>_res</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>p</name>-&gt;<name>ob_itself</name>-&gt;<name>userInfo</name></name> = (<name>long</name>)<name>p</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>userRoutine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>p</name>-&gt;<name>ob_callback</name></name> = <name>userRoutine</name></expr>;</expr_stmt>
	}</block></then></if>
 <label><name>userRoutine__error__</name>:</label> <empty_stmt>;</empty_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SndSoundManagerVersion</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NumVersion</name></type> <name>_rv</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>SndSoundManagerVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildNumVersion</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SndManagerStatus</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>theLength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SMStatus</name></type> <name>theStatus__out__</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>theLength</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SndManagerStatus</name><argument_list>(<argument><expr><name>theLength</name></expr></argument>,
	                        <argument><expr>&amp;<name>theStatus__out__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"s#"</expr></argument>,
	                     <argument><expr>(<name>char</name> *)&amp;<name>theStatus__out__</name></expr></argument>, <argument><expr>(<name>int</name>)<sizeof>sizeof<argument_list>(<argument><expr><name>SMStatus</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SndGetSysBeepState</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>sysBeepState</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SndGetSysBeepState</name><argument_list>(<argument><expr>&amp;<name>sysBeepState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>sysBeepState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SndSetSysBeepState</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>sysBeepState</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>sysBeepState</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SndSetSysBeepState</name><argument_list>(<argument><expr><name>sysBeepState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_GetSysBeepVolume</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>level</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetSysBeepVolume</name><argument_list>(<argument><expr>&amp;<name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SetSysBeepVolume</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>level</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>level</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetSysBeepVolume</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_GetDefaultOutputVolume</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>level</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetDefaultOutputVolume</name><argument_list>(<argument><expr>&amp;<name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SetDefaultOutputVolume</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>level</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>level</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetDefaultOutputVolume</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_GetSoundHeaderOffset</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SndListHandle</name></type> <name>sndHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>offset</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sndHandle</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetSoundHeaderOffset</name><argument_list>(<argument><expr><name>sndHandle</name></expr></argument>,
	                            <argument><expr>&amp;<name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_GetCompressionInfo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>compressionID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>format</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>numChannels</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>sampleSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CompressionInfo</name></type> <name>cp__out__</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hO&amp;hh"</expr></argument>,
	                      <argument><expr>&amp;<name>compressionID</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>format</name></expr></argument>,
	                      <argument><expr>&amp;<name>numChannels</name></expr></argument>,
	                      <argument><expr>&amp;<name>sampleSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetCompressionInfo</name><argument_list>(<argument><expr><name>compressionID</name></expr></argument>,
	                          <argument><expr><name>format</name></expr></argument>,
	                          <argument><expr><name>numChannels</name></expr></argument>,
	                          <argument><expr><name>sampleSize</name></expr></argument>,
	                          <argument><expr>&amp;<name>cp__out__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"s#"</expr></argument>,
	                     <argument><expr>(<name>char</name> *)&amp;<name>cp__out__</name></expr></argument>, <argument><expr>(<name>int</name>)<sizeof>sizeof<argument_list>(<argument><expr><name>CompressionInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SetSoundPreference</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>theType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>settings</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>theType</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>settings</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetSoundPreference</name><argument_list>(<argument><expr><name>theType</name></expr></argument>,
	                          <argument><expr><name>name</name></expr></argument>,
	                          <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildStr255</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_GetSoundPreference</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>theType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>settings</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>theType</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>settings</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetSoundPreference</name><argument_list>(<argument><expr><name>theType</name></expr></argument>,
	                          <argument><expr><name>name</name></expr></argument>,
	                          <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildStr255</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_GetCompressionName</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>compressionType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>compressionName</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>compressionType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetCompressionName</name><argument_list>(<argument><expr><name>compressionType</name></expr></argument>,
	                          <argument><expr><name>compressionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildStr255</name></expr></argument>, <argument><expr><name>compressionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SPBVersion</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NumVersion</name></type> <name>_rv</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>SPBVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildNumVersion</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SndRecord</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>corner</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>quality</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SndListHandle</name></type> <name>sndHandle</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>corner</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>quality</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SndRecord</name><argument_list>(<argument><expr>(<name>ModalFilterUPP</name>)0</expr></argument>,
	                 <argument><expr><name>corner</name></expr></argument>,
	                 <argument><expr><name>quality</name></expr></argument>,
	                 <argument><expr>&amp;<name>sndHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>sndHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SPBSignInDevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>deviceRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>deviceName</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>deviceRefNum</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>deviceName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SPBSignInDevice</name><argument_list>(<argument><expr><name>deviceRefNum</name></expr></argument>,
	                       <argument><expr><name>deviceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SPBSignOutDevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>deviceRefNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>deviceRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SPBSignOutDevice</name><argument_list>(<argument><expr><name>deviceRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SPBGetIndexedDevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>deviceName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>deviceIconHandle</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SPBGetIndexedDevice</name><argument_list>(<argument><expr><name>count</name></expr></argument>,
	                           <argument><expr><name>deviceName</name></expr></argument>,
	                           <argument><expr>&amp;<name>deviceIconHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildStr255</name></expr></argument>, <argument><expr><name>deviceName</name></expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>deviceIconHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SPBOpenDevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>deviceName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>permission</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>deviceName</name></expr></argument>,
	                      <argument><expr>&amp;<name>permission</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SPBOpenDevice</name><argument_list>(<argument><expr><name>deviceName</name></expr></argument>,
	                     <argument><expr><name>permission</name></expr></argument>,
	                     <argument><expr>&amp;<name>inRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>inRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SPBCloseDevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>inRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SPBCloseDevice</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SPBRecord</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SPBPtr</name></type> <name>inParamPtr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>asynchFlag</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
	                      <argument><expr><name>SPBObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inParamPtr</name></expr></argument>,
	                      <argument><expr>&amp;<name>asynchFlag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SPBRecord</name><argument_list>(<argument><expr><name>inParamPtr</name></expr></argument>,
	                 <argument><expr><name>asynchFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SPBPauseRecording</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>inRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SPBPauseRecording</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SPBResumeRecording</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>inRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SPBResumeRecording</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SPBStopRecording</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>inRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SPBStopRecording</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SPBGetRecordingStatus</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>recordingStatus</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>meterLevel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>totalSamplesToRecord</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>numberOfSamplesRecorded</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>totalMsecsToRecord</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>numberOfMsecsRecorded</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>inRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SPBGetRecordingStatus</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>,
	                             <argument><expr>&amp;<name>recordingStatus</name></expr></argument>,
	                             <argument><expr>&amp;<name>meterLevel</name></expr></argument>,
	                             <argument><expr>&amp;<name>totalSamplesToRecord</name></expr></argument>,
	                             <argument><expr>&amp;<name>numberOfSamplesRecorded</name></expr></argument>,
	                             <argument><expr>&amp;<name>totalMsecsToRecord</name></expr></argument>,
	                             <argument><expr>&amp;<name>numberOfMsecsRecorded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"hhllll"</expr></argument>,
	                     <argument><expr><name>recordingStatus</name></expr></argument>,
	                     <argument><expr><name>meterLevel</name></expr></argument>,
	                     <argument><expr><name>totalSamplesToRecord</name></expr></argument>,
	                     <argument><expr><name>numberOfSamplesRecorded</name></expr></argument>,
	                     <argument><expr><name>totalMsecsToRecord</name></expr></argument>,
	                     <argument><expr><name>numberOfMsecsRecorded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SPBGetDeviceInfo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>infoType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> *</type> <name>infoData</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;w"</expr></argument>,
	                      <argument><expr>&amp;<name>inRefNum</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>infoType</name></expr></argument>,
	                      <argument><expr>&amp;<name>infoData</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SPBGetDeviceInfo</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>,
	                        <argument><expr><name>infoType</name></expr></argument>,
	                        <argument><expr><name>infoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SPBSetDeviceInfo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>infoType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> *</type> <name>infoData</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;w"</expr></argument>,
	                      <argument><expr>&amp;<name>inRefNum</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>infoType</name></expr></argument>,
	                      <argument><expr>&amp;<name>infoData</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SPBSetDeviceInfo</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>,
	                        <argument><expr><name>infoType</name></expr></argument>,
	                        <argument><expr><name>infoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SPBMillisecondsToBytes</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>milliseconds</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>inRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SPBMillisecondsToBytes</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>,
	                              <argument><expr>&amp;<name>milliseconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>milliseconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Snd_SPBBytesToMilliseconds</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>inRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>byteCount</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>inRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SPBBytesToMilliseconds</name><argument_list>(<argument><expr><name>inRefNum</name></expr></argument>,
	                              <argument><expr>&amp;<name>byteCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>byteCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>Snd_methods</name><index>[]</index></name> <init>= <expr><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<expr><block>{<expr>"SPB"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SPB</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>NULL</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SysBeep"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SysBeep</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short duration) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SndNewChannel"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SndNewChannel</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short synth, long init, PyObject* userRoutine) -&gt; (SndChannelPtr chan)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SndSoundManagerVersion"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SndSoundManagerVersion</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (NumVersion _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SndManagerStatus"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SndManagerStatus</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short theLength) -&gt; (SMStatus theStatus)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SndGetSysBeepState"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SndGetSysBeepState</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (short sysBeepState)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SndSetSysBeepState"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SndSetSysBeepState</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short sysBeepState) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetSysBeepVolume"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_GetSysBeepVolume</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (long level)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetSysBeepVolume"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SetSysBeepVolume</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(long level) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetDefaultOutputVolume"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_GetDefaultOutputVolume</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (long level)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetDefaultOutputVolume"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SetDefaultOutputVolume</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(long level) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetSoundHeaderOffset"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_GetSoundHeaderOffset</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SndListHandle sndHandle) -&gt; (long offset)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetCompressionInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_GetCompressionInfo</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short compressionID, OSType format, short numChannels, short sampleSize) -&gt; (CompressionInfo cp)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetSoundPreference"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SetSoundPreference</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType theType, Handle settings) -&gt; (Str255 name)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetSoundPreference"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_GetSoundPreference</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType theType, Handle settings) -&gt; (Str255 name)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetCompressionName"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_GetCompressionName</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType compressionType) -&gt; (Str255 compressionName)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SPBVersion"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SPBVersion</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (NumVersion _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SndRecord"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SndRecord</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point corner, OSType quality) -&gt; (SndListHandle sndHandle)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SPBSignInDevice"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SPBSignInDevice</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short deviceRefNum, Str255 deviceName) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SPBSignOutDevice"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SPBSignOutDevice</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short deviceRefNum) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SPBGetIndexedDevice"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SPBGetIndexedDevice</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short count) -&gt; (Str255 deviceName, Handle deviceIconHandle)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SPBOpenDevice"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SPBOpenDevice</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Str255 deviceName, short permission) -&gt; (long inRefNum)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SPBCloseDevice"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SPBCloseDevice</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(long inRefNum) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SPBRecord"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SPBRecord</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SPBPtr inParamPtr, Boolean asynchFlag) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SPBPauseRecording"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SPBPauseRecording</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(long inRefNum) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SPBResumeRecording"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SPBResumeRecording</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(long inRefNum) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SPBStopRecording"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SPBStopRecording</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(long inRefNum) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SPBGetRecordingStatus"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SPBGetRecordingStatus</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(long inRefNum) -&gt; (short recordingStatus, short meterLevel, unsigned long totalSamplesToRecord, unsigned long numberOfSamplesRecorded, unsigned long totalMsecsToRecord, unsigned long numberOfMsecsRecorded)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SPBGetDeviceInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SPBGetDeviceInfo</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(long inRefNum, OSType infoType, void * infoData) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SPBSetDeviceInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SPBSetDeviceInfo</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(long inRefNum, OSType infoType, void * infoData) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SPBMillisecondsToBytes"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SPBMillisecondsToBytes</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(long inRefNum) -&gt; (long milliseconds)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SPBBytesToMilliseconds"</expr>, <expr>(<name>PyCFunction</name>)<name>Snd_SPBBytesToMilliseconds</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(long inRefNum) -&gt; (long byteCount)"</argument>)</argument_list></macro>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>

<comment type="block">/* Routine passed to Py_AddPendingCall -- call the Python callback */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>SndCh_CallCallBack</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>SndChannelObject</name> *</type><name>p</name> <init>= <expr>(<name>SndChannelObject</name> *)<name>arg</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>args</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(O(hhl))"</expr></argument>,
                             <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>ob_cmd</name>.<name>cmd</name></name></expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>ob_cmd</name>.<name>param1</name></name></expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>ob_cmd</name>.<name>param2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>res</name> = <call><name>PyEval_CallObject</name><argument_list>(<argument><expr><name><name>p</name>-&gt;<name>ob_callback</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>res</name> == <name>NULL</name></expr>)</condition><then>
                <return>return <expr>-1</expr>;</return></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/* Routine passed to NewSndChannel -- schedule a call to SndCh_CallCallBack */</comment>
<function><type><specifier>static</specifier> <name>pascal</name> <name>void</name></type>
<name>SndCh_UserRoutine</name><parameter_list>(<param><decl><type><name>SndChannelPtr</name></type> <name>chan</name></decl></param>, <param><decl><type><name>SndCommand</name> *</type><name>cmd</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>SndChannelObject</name> *</type><name>p</name> <init>= <expr><call>(<name>SndChannelObject</name> *)<argument_list>(<argument><expr><name><name>chan</name>-&gt;<name>userInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>p</name>-&gt;<name>ob_callback</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>long</name></type> <name>A5</name> <init>= <expr><call><name>SetA5</name><argument_list>(<argument><expr><name><name>p</name>-&gt;<name>ob_A5</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>p</name>-&gt;<name>ob_cmd</name></name> = *<name>cmd</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_AddPendingCall</name><argument_list>(<argument><expr><name>SndCh_CallCallBack</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SetA5</name><argument_list>(<argument><expr><name>A5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
}</block></function>

<comment type="block">/* SPB callbacks - Schedule callbacks to Python */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>SPB_CallCallBack</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>SPBObject</name> *</type><name>p</name> <init>= <expr>(<name>SPBObject</name> *)<name>arg</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name></decl>;</decl_stmt>

        <if>if <condition>( <expr><name><name>p</name>-&gt;<name>ob_thiscallback</name></name> == 0</expr> )</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>args</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(O)"</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>res</name> = <call><name>PyEval_CallObject</name><argument_list>(<argument><expr><name><name>p</name>-&gt;<name>ob_thiscallback</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>ob_thiscallback</name></name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>res</name> == <name>NULL</name></expr>)</condition><then>
                <return>return <expr>-1</expr>;</return></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>pascal</name> <name>void</name></type>
<name>SPB_completion</name><parameter_list>(<param><decl><type><name>SPBPtr</name></type> <name>my_spb</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>SPBObject</name> *</type><name>p</name> <init>= <expr><call>(<name>SPBObject</name> *)<argument_list>(<argument><expr><name><name>my_spb</name>-&gt;<name>userLong</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>p</name> &amp;&amp; <name><name>p</name>-&gt;<name>ob_completion</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>long</name></type> <name>A5</name> <init>= <expr><call><name>SetA5</name><argument_list>(<argument><expr><name><name>p</name>-&gt;<name>ob_A5</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>p</name>-&gt;<name>ob_thiscallback</name></name> = <name><name>p</name>-&gt;<name>ob_completion</name></name></expr>;</expr_stmt>  <comment type="block">/* Hope we cannot get two at the same time */</comment>
                <expr_stmt><expr><call><name>Py_AddPendingCall</name><argument_list>(<argument><expr><name>SPB_CallCallBack</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SetA5</name><argument_list>(<argument><expr><name>A5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>



<function><type><name>void</name></type> <name>init_Snd</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>





	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_Snd"</expr></argument>, <argument><expr><name>Snd_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>Snd_Error</name> = <call><name>PyMac_GetOSErrException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>Snd_Error</name> == <name>NULL</name> ||
	    <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Error"</expr></argument>, <argument><expr><name>Snd_Error</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><name><name>SndChannel_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>SndChannel_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>SndChannel_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"SndChannel"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>SndChannel_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Backward-compatible name */</comment>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>SndChannel_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"SndChannelType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>SndChannel_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>SPB_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>SPB_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>SPB_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"SPB"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>SPB_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Backward-compatible name */</comment>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>SPB_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"SPBType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>SPB_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>
}</block></function>

<comment type="block">/* ======================== End module _Snd ========================= */</comment>

</unit>
