<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Mac/Modules/file/_Filemodule.c">
<comment type="block">/* ========================== Module _File ========================== */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pymactoolbox.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_OSX105_SDK</name></cpp:ifndef>
<typedef>typedef <type><name>SInt16</name></type>	<name>FSIORefNum</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Macro to test whether a weak-loaded CFM function exists */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMac_PRECHECK</name><parameter_list>(<param><type><name>rtn</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { if ( &amp;rtn == NULL )  {\
        PyErr_SetString(PyExc_NotImplementedError, \
        "Not available in this shared library/OS version"); \
        return NULL; \
    }} while(0)</cpp:value></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Carbon/Carbon.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TOOLBOX_OBJECT_GLUE</name></cpp:ifdef>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_PyMac_GetFSSpec</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>FSSpec</name> *</type><name>spec</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>_PyMac_BuildFSSpec</name><parameter_list>(<param><decl><type><name>FSSpec</name> *</type><name>spec</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMac_BuildFSSpec</name></cpp:macro> <cpp:value>_PyMac_BuildFSSpec</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__*/</comment>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_PyMac_GetFSRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>FSRef</name> *</type><name>fsr</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>_PyMac_BuildFSRef</name><parameter_list>(<param><decl><type><name>FSRef</name> *</type><name>spec</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMac_BuildFSRef</name></cpp:macro> <cpp:value>_PyMac_BuildFSRef</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMac_GetFSSpec</name></cpp:macro> <cpp:value>_PyMac_GetFSSpec</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMac_GetFSRef</name></cpp:macro> <cpp:value>_PyMac_GetFSRef</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>	<comment type="block">/* !USE_TOOLBOX_OBJECT_GLUE */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>PyMac_GetFSSpec</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>FSSpec</name> *</type><name>spec</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>PyMac_BuildFSSpec</name><parameter_list>(<param><decl><type><name>FSSpec</name> *</type><name>spec</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__*/</comment>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>PyMac_GetFSRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>FSRef</name> *</type><name>fsr</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>PyMac_BuildFSRef</name><parameter_list>(<param><decl><type><name>FSRef</name> *</type><name>spec</name></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	<comment type="block">/* !USE_TOOLBOX_OBJECT_GLUE */</comment>

<comment type="block">/* Forward declarations */</comment>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_New</name><parameter_list>(<param><decl><type><name>FSRef</name> *</type><name>itself</name></decl></param>)</parameter_list>;</function_decl>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FInfo_New</name><parameter_list>(<param><decl><type><name>FInfo</name> *</type><name>itself</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSSpec_New</name><parameter_list>(<param><decl><type><name>FSSpec</name> *</type><name>itself</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSSpec_Convert</name></cpp:macro> <cpp:value>PyMac_GetFSSpec</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Alias_New</name><parameter_list>(<param><decl><type><name>AliasHandle</name></type> <name>itself</name></decl></param>)</parameter_list>;</function_decl>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>FInfo_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>FInfo</name> *</type><name>p_itself</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSRef_Convert</name></cpp:macro> <cpp:value>PyMac_GetFSRef</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Alias_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>AliasHandle</name> *</type><name>p_itself</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
** UTCDateTime records
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>UTCDateTime_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>UTCDateTime</name> *</type><name>ptr</name></decl></param>)</parameter_list>
<block>{
        <return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"(HlH)"</expr></argument>, <argument><expr>&amp;<name><name>ptr</name>-&gt;<name>highSeconds</name></name></expr></argument>, <argument><expr>&amp;<name><name>ptr</name>-&gt;<name>lowSeconds</name></name></expr></argument>, <argument><expr>&amp;<name><name>ptr</name>-&gt;<name>fraction</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>UTCDateTime_New</name><parameter_list>(<param><decl><type><name>UTCDateTime</name> *</type><name>ptr</name></decl></param>)</parameter_list>
<block>{
        <return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(HlH)"</expr></argument>, <argument><expr><name><name>ptr</name>-&gt;<name>highSeconds</name></name></expr></argument>, <argument><expr><name><name>ptr</name>-&gt;<name>lowSeconds</name></name></expr></argument>, <argument><expr><name><name>ptr</name>-&gt;<name>fraction</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Optional fsspec and fsref pointers. None will pass NULL
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>myPyMac_GetOptFSSpecPtr</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>FSSpec</name> **</type><name>spec</name></decl></param>)</parameter_list>
<block>{
        <if>if <condition>(<expr><name>v</name> == <name>Py_None</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>spec</name> = <name>NULL</name></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>PyMac_GetFSSpec</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>*<name>spec</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>myPyMac_GetOptFSRefPtr</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>FSRef</name> **</type><name>ref</name></decl></param>)</parameter_list>
<block>{
        <if>if <condition>(<expr><name>v</name> == <name>Py_None</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>ref</name> = <name>NULL</name></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>PyMac_GetFSRef</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>*<name>ref</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Parse/generate objsect
*/</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyMac_BuildHFSUniStr255</name><parameter_list>(<param><decl><type><name>HFSUniStr255</name> *</type><name>itself</name></decl></param>)</parameter_list>
<block>{

        <return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"u#"</expr></argument>, <argument><expr><name><name>itself</name>-&gt;<name>unicode</name></name></expr></argument>, <argument><expr><name><name>itself</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>OSErr</name></type>
<name>_PyMac_GetFullPathname</name><parameter_list>(<param><decl><type><name>FSSpec</name> *</type><name>fss</name></decl></param>, <param><decl><type><name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>FSRef</name></type> <name>fsr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>

	<expr_stmt><expr>*<name>path</name> = '\0'</expr>;</expr_stmt>
	<expr_stmt><expr><name>err</name> = <call><name>FSpMakeFSRef</name><argument_list>(<argument><expr><name>fss</name></expr></argument>, <argument><expr>&amp;<name>fsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>err</name> == <name>fnfErr</name></expr>)</condition><then> <block>{
		<comment type="block">/* FSSpecs can point to non-existing files, fsrefs can't. */</comment>
		<decl_stmt><decl><type><name>FSSpec</name></type> <name>fss2</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>tocopy</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>err</name> = <call><name>FSMakeFSSpec</name><argument_list>(<argument><expr><name><name>fss</name>-&gt;<name>vRefNum</name></name></expr></argument>, <argument><expr><name><name>fss</name>-&gt;<name>parID</name></name></expr></argument>,
				   <argument><expr>(<name>unsigned</name> <name>char</name>*)""</expr></argument>, <argument><expr>&amp;<name>fss2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
			<return>return <expr><name>err</name></expr>;</return></then></if>
		<expr_stmt><expr><name>err</name> = <call><name>FSpMakeFSRef</name><argument_list>(<argument><expr>&amp;<name>fss2</name></expr></argument>, <argument><expr>&amp;<name>fsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
			<return>return <expr><name>err</name></expr>;</return></then></if>
		<expr_stmt><expr><name>err</name> = (<name>OSErr</name>)<call><name>FSRefMakePath</name><argument_list>(<argument><expr>&amp;<name>fsr</name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>char</name>*)<name>path</name></expr></argument>, <argument><expr><name>len</name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
			<return>return <expr><name>err</name></expr>;</return></then></if>
		<comment type="block">/* This part is not 100% safe: we append the filename part, but
		** I'm not sure that we don't run afoul of the various 8bit
		** encodings here. Will have to look this up at some point...
		*/</comment>
		<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tocopy</name> = <name><name>fss</name>-&gt;<name>name</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
		<if>if <condition>(<expr>(<call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> + <name>tocopy</name>) &gt;= <name>len</name></expr>)</condition><then>
			<expr_stmt><expr><name>tocopy</name> = <name>len</name> - <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> - 1</expr>;</expr_stmt></then></if>
		<if>if <condition>(<expr><name>tocopy</name> &gt; 0</expr>)</condition><then>
			<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>(<name>char</name>*)<name><name>fss</name>-&gt;<name>name</name></name>+1</expr></argument>, <argument><expr><name>tocopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></then>
	<else>else <block>{
		<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
			<return>return <expr><name>err</name></expr>;</return></then></if>
		<expr_stmt><expr><name>err</name> = (<name>OSErr</name>)<call><name>FSRefMakePath</name><argument_list>(<argument><expr>&amp;<name>fsr</name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>char</name>*)<name>path</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
			<return>return <expr><name>err</name></expr>;</return></then></if>
	}</block></else></if>
	<return>return <expr>0</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_Error</name></decl>;</decl_stmt>

<comment type="block">/* ------------------- Object type FSCatalogInfo -------------------- */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>FSCatalogInfo_Type</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSCatalogInfo_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;FSCatalogInfo_Type || PyObject_TypeCheck((x), &amp;FSCatalogInfo_Type))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>FSCatalogInfoObject</name> <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>FSCatalogInfo</name></type> <name>ob_itself</name></decl>;</decl_stmt>
}</block></struct></type> <name>FSCatalogInfoObject</name>;</typedef>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSCatalogInfo_New</name><parameter_list>(<param><decl><type><name>FSCatalogInfo</name> *</type><name>itself</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>FSCatalogInfoObject</name> *</type><name>it</name></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>itself</name> == <name>NULL</name></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>Py_None</name></expr>;</return> }</block></then></if>
	<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>FSCatalogInfoObject</name></expr></argument>, <argument><expr>&amp;<name>FSCatalogInfo_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_itself</name></name> = *<name>itself</name></expr>;</expr_stmt>
	<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FSCatalogInfo_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>FSCatalogInfo</name> *</type><name>p_itself</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr>!<call><name>FSCatalogInfo_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"FSCatalogInfo required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>0</expr>;</return>
	}</block></then></if>
	<expr_stmt><expr>*<name>p_itself</name> = ((<name>FSCatalogInfoObject</name> *)<name>v</name>)-&gt;<name>ob_itself</name></expr>;</expr_stmt>
	<return>return <expr>1</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FSCatalogInfo_dealloc</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<comment type="block">/* Cleanup of self-&gt;ob_itself goes here */</comment>
	<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>FSCatalogInfo_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSCatalogInfo_get_nodeFlags</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"H"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_itself</name>.<name>nodeFlags</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FSCatalogInfo_set_nodeFlags</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"H"</expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>nodeFlags</name></name></expr></argument>)</argument_list></call>-1</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSCatalogInfo_get_volume</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_itself</name>.<name>volume</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FSCatalogInfo_set_volume</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"h"</expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>volume</name></name></expr></argument>)</argument_list></call>-1</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSCatalogInfo_get_parentDirID</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_itself</name>.<name>parentDirID</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FSCatalogInfo_set_parentDirID</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>parentDirID</name></name></expr></argument>)</argument_list></call>-1</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSCatalogInfo_get_nodeID</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_itself</name>.<name>nodeID</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FSCatalogInfo_set_nodeID</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>nodeID</name></name></expr></argument>)</argument_list></call>-1</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSCatalogInfo_get_createDate</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>UTCDateTime_New</name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>createDate</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FSCatalogInfo_set_createDate</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>UTCDateTime_Convert</name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>createDate</name></name></expr></argument>)</argument_list></call>-1</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSCatalogInfo_get_contentModDate</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>UTCDateTime_New</name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>contentModDate</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FSCatalogInfo_set_contentModDate</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>UTCDateTime_Convert</name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>contentModDate</name></name></expr></argument>)</argument_list></call>-1</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSCatalogInfo_get_attributeModDate</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>UTCDateTime_New</name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>attributeModDate</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FSCatalogInfo_set_attributeModDate</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>UTCDateTime_Convert</name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>attributeModDate</name></name></expr></argument>)</argument_list></call>-1</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSCatalogInfo_get_accessDate</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>UTCDateTime_New</name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>accessDate</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FSCatalogInfo_set_accessDate</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>UTCDateTime_Convert</name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>accessDate</name></name></expr></argument>)</argument_list></call>-1</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSCatalogInfo_get_backupDate</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>UTCDateTime_New</name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>backupDate</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FSCatalogInfo_set_backupDate</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>UTCDateTime_Convert</name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>backupDate</name></name></expr></argument>)</argument_list></call>-1</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSCatalogInfo_get_permissions</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>FSPermissionInfo</name>*</type> <name>info</name> <init>= <expr>(<name>FSPermissionInfo</name>*)&amp;(<name><name>self</name>-&gt;<name>ob_itself</name>.<name>permissions</name></name>)</expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(llll)"</expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>userID</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>groupID</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>userAccess</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>mode</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FSCatalogInfo_set_permissions</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>userID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>groupID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>userAccess</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>mode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>FSPermissionInfo</name>*</type> <name>info</name> <init>= <expr>(<name>FSPermissionInfo</name>*)&amp;(<name><name>self</name>-&gt;<name>ob_itself</name>.<name>permissions</name></name>)</expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>r</name> = <call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"(llll)"</expr></argument>, <argument><expr>&amp;<name>userID</name></expr></argument>, <argument><expr>&amp;<name>groupID</name></expr></argument>, <argument><expr>&amp;<name>userAccess</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>r</name></expr>)</condition><then> <block>{
		<return>return <expr>-1</expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name><name>info</name>-&gt;<name>userID</name></name> = <name>userID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name>-&gt;<name>groupID</name></name> = <name>groupID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name>-&gt;<name>userAccess</name></name> = <name>userAccess</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name>-&gt;<name>mode</name></name> = <name>mode</name></expr>;</expr_stmt>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSCatalogInfo_get_valence</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_itself</name>.<name>valence</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FSCatalogInfo_set_valence</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>valence</name></name></expr></argument>)</argument_list></call>-1</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSCatalogInfo_get_dataLogicalSize</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_itself</name>.<name>dataLogicalSize</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FSCatalogInfo_set_dataLogicalSize</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>dataLogicalSize</name></name></expr></argument>)</argument_list></call>-1</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSCatalogInfo_get_dataPhysicalSize</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_itself</name>.<name>dataPhysicalSize</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FSCatalogInfo_set_dataPhysicalSize</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>dataPhysicalSize</name></name></expr></argument>)</argument_list></call>-1</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSCatalogInfo_get_rsrcLogicalSize</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_itself</name>.<name>rsrcLogicalSize</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FSCatalogInfo_set_rsrcLogicalSize</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>rsrcLogicalSize</name></name></expr></argument>)</argument_list></call>-1</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSCatalogInfo_get_rsrcPhysicalSize</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_itself</name>.<name>rsrcPhysicalSize</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FSCatalogInfo_set_rsrcPhysicalSize</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>rsrcPhysicalSize</name></name></expr></argument>)</argument_list></call>-1</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSCatalogInfo_get_sharingFlags</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_itself</name>.<name>sharingFlags</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FSCatalogInfo_set_sharingFlags</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>sharingFlags</name></name></expr></argument>)</argument_list></call>-1</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSCatalogInfo_get_userPrivileges</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_itself</name>.<name>userPrivileges</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FSCatalogInfo_set_userPrivileges</name><parameter_list>(<param><decl><type><name>FSCatalogInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"b"</expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>userPrivileges</name></name></expr></argument>)</argument_list></call>-1</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>FSCatalogInfo_getsetlist</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"nodeFlags"</expr>, <expr>(<name>getter</name>)<name>FSCatalogInfo_get_nodeFlags</name></expr>, <expr>(<name>setter</name>)<name>FSCatalogInfo_set_nodeFlags</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"volume"</expr>, <expr>(<name>getter</name>)<name>FSCatalogInfo_get_volume</name></expr>, <expr>(<name>setter</name>)<name>FSCatalogInfo_set_volume</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"parentDirID"</expr>, <expr>(<name>getter</name>)<name>FSCatalogInfo_get_parentDirID</name></expr>, <expr>(<name>setter</name>)<name>FSCatalogInfo_set_parentDirID</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"nodeID"</expr>, <expr>(<name>getter</name>)<name>FSCatalogInfo_get_nodeID</name></expr>, <expr>(<name>setter</name>)<name>FSCatalogInfo_set_nodeID</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"createDate"</expr>, <expr>(<name>getter</name>)<name>FSCatalogInfo_get_createDate</name></expr>, <expr>(<name>setter</name>)<name>FSCatalogInfo_set_createDate</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"contentModDate"</expr>, <expr>(<name>getter</name>)<name>FSCatalogInfo_get_contentModDate</name></expr>, <expr>(<name>setter</name>)<name>FSCatalogInfo_set_contentModDate</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"attributeModDate"</expr>, <expr>(<name>getter</name>)<name>FSCatalogInfo_get_attributeModDate</name></expr>, <expr>(<name>setter</name>)<name>FSCatalogInfo_set_attributeModDate</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"accessDate"</expr>, <expr>(<name>getter</name>)<name>FSCatalogInfo_get_accessDate</name></expr>, <expr>(<name>setter</name>)<name>FSCatalogInfo_set_accessDate</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"backupDate"</expr>, <expr>(<name>getter</name>)<name>FSCatalogInfo_get_backupDate</name></expr>, <expr>(<name>setter</name>)<name>FSCatalogInfo_set_backupDate</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"permissions"</expr>, <expr>(<name>getter</name>)<name>FSCatalogInfo_get_permissions</name></expr>, <expr>(<name>setter</name>)<name>FSCatalogInfo_set_permissions</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"valence"</expr>, <expr>(<name>getter</name>)<name>FSCatalogInfo_get_valence</name></expr>, <expr>(<name>setter</name>)<name>FSCatalogInfo_set_valence</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"dataLogicalSize"</expr>, <expr>(<name>getter</name>)<name>FSCatalogInfo_get_dataLogicalSize</name></expr>, <expr>(<name>setter</name>)<name>FSCatalogInfo_set_dataLogicalSize</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"dataPhysicalSize"</expr>, <expr>(<name>getter</name>)<name>FSCatalogInfo_get_dataPhysicalSize</name></expr>, <expr>(<name>setter</name>)<name>FSCatalogInfo_set_dataPhysicalSize</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"rsrcLogicalSize"</expr>, <expr>(<name>getter</name>)<name>FSCatalogInfo_get_rsrcLogicalSize</name></expr>, <expr>(<name>setter</name>)<name>FSCatalogInfo_set_rsrcLogicalSize</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"rsrcPhysicalSize"</expr>, <expr>(<name>getter</name>)<name>FSCatalogInfo_get_rsrcPhysicalSize</name></expr>, <expr>(<name>setter</name>)<name>FSCatalogInfo_set_rsrcPhysicalSize</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"sharingFlags"</expr>, <expr>(<name>getter</name>)<name>FSCatalogInfo_get_sharingFlags</name></expr>, <expr>(<name>setter</name>)<name>FSCatalogInfo_set_sharingFlags</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"userPrivileges"</expr>, <expr>(<name>getter</name>)<name>FSCatalogInfo_get_userPrivileges</name></expr>, <expr>(<name>setter</name>)<name>FSCatalogInfo_set_userPrivileges</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSCatalogInfo_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSCatalogInfo_repr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSCatalogInfo_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>FSCatalogInfo_tp_init</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kw</name><index>[]</index></name> <init>= <expr><block>{
	            <expr>"nodeFlags"</expr>,
	            <expr>"volume"</expr>,
	            <expr>"parentDirID"</expr>,
	            <expr>"nodeID"</expr>,
	            <expr>"createDate"</expr>,
	            <expr>"contentModDate"</expr>,
	            <expr>"atributeModDate"</expr>,
	            <expr>"accessDate"</expr>,
	            <expr>"backupDate"</expr>,
	            <expr>"valence"</expr>,
	            <expr>"dataLogicalSize"</expr>,
	            <expr>"dataPhysicalSize"</expr>,
	            <expr>"rsrcLogicalSize"</expr>,
	            <expr>"rsrcPhysicalSize"</expr>,
	            <expr>"sharingFlags"</expr>,
	            <expr>"userPrivileges"</expr>
	            , <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr><name>_kwds</name></expr></argument>, <argument><expr>"|HhllO&amp;O&amp;O&amp;O&amp;O&amp;llllllb"</expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>&amp;((<name>FSCatalogInfoObject</name> *)<name>_self</name>)-&gt;<name><name>ob_itself</name>.<name>nodeFlags</name></name></expr></argument>,
	            <argument><expr>&amp;((<name>FSCatalogInfoObject</name> *)<name>_self</name>)-&gt;<name><name>ob_itself</name>.<name>volume</name></name></expr></argument>,
	            <argument><expr>&amp;((<name>FSCatalogInfoObject</name> *)<name>_self</name>)-&gt;<name><name>ob_itself</name>.<name>parentDirID</name></name></expr></argument>,
	            <argument><expr>&amp;((<name>FSCatalogInfoObject</name> *)<name>_self</name>)-&gt;<name><name>ob_itself</name>.<name>nodeID</name></name></expr></argument>,
	            <argument><expr><name>UTCDateTime_Convert</name></expr></argument>, <argument><expr>&amp;((<name>FSCatalogInfoObject</name> *)<name>_self</name>)-&gt;<name><name>ob_itself</name>.<name>createDate</name></name></expr></argument>,
	            <argument><expr><name>UTCDateTime_Convert</name></expr></argument>, <argument><expr>&amp;((<name>FSCatalogInfoObject</name> *)<name>_self</name>)-&gt;<name><name>ob_itself</name>.<name>contentModDate</name></name></expr></argument>,
	            <argument><expr><name>UTCDateTime_Convert</name></expr></argument>, <argument><expr>&amp;((<name>FSCatalogInfoObject</name> *)<name>_self</name>)-&gt;<name><name>ob_itself</name>.<name>attributeModDate</name></name></expr></argument>,
	            <argument><expr><name>UTCDateTime_Convert</name></expr></argument>, <argument><expr>&amp;((<name>FSCatalogInfoObject</name> *)<name>_self</name>)-&gt;<name><name>ob_itself</name>.<name>accessDate</name></name></expr></argument>,
	            <argument><expr><name>UTCDateTime_Convert</name></expr></argument>, <argument><expr>&amp;((<name>FSCatalogInfoObject</name> *)<name>_self</name>)-&gt;<name><name>ob_itself</name>.<name>backupDate</name></name></expr></argument>,
	            <argument><expr>&amp;((<name>FSCatalogInfoObject</name> *)<name>_self</name>)-&gt;<name><name>ob_itself</name>.<name>valence</name></name></expr></argument>,
	            <argument><expr>&amp;((<name>FSCatalogInfoObject</name> *)<name>_self</name>)-&gt;<name><name>ob_itself</name>.<name>dataLogicalSize</name></name></expr></argument>,
	            <argument><expr>&amp;((<name>FSCatalogInfoObject</name> *)<name>_self</name>)-&gt;<name><name>ob_itself</name>.<name>dataPhysicalSize</name></name></expr></argument>,
	            <argument><expr>&amp;((<name>FSCatalogInfoObject</name> *)<name>_self</name>)-&gt;<name><name>ob_itself</name>.<name>rsrcLogicalSize</name></name></expr></argument>,
	            <argument><expr>&amp;((<name>FSCatalogInfoObject</name> *)<name>_self</name>)-&gt;<name><name>ob_itself</name>.<name>rsrcPhysicalSize</name></name></expr></argument>,
	            <argument><expr>&amp;((<name>FSCatalogInfoObject</name> *)<name>_self</name>)-&gt;<name><name>ob_itself</name>.<name>sharingFlags</name></name></expr></argument>,
	            <argument><expr>&amp;((<name>FSCatalogInfoObject</name> *)<name>_self</name>)-&gt;<name><name>ob_itself</name>.<name>userPrivileges</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<block>{
		<return>return <expr>-1</expr>;</return>
	}</block></then></if>
	<return>return <expr>0</expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSCatalogInfo_tp_alloc</name></cpp:macro> <cpp:value>PyType_GenericAlloc</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSCatalogInfo_tp_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>(<name>self</name> = <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;((<name>FSCatalogInfoObject</name> *)<name>self</name>)-&gt;<name>ob_itself</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FSCatalogInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>self</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSCatalogInfo_tp_free</name></cpp:macro> <cpp:value>PyObject_Del</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>FSCatalogInfo_Type</name> <init>= <expr><block>{
	<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
	0</expr>, <comment type="block">/*ob_size*/</comment>
	<expr>"Carbon.File.FSCatalogInfo"</expr>, <comment type="block">/*tp_name*/</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>FSCatalogInfoObject</name></expr></argument>)</argument_list></sizeof></expr>, <comment type="block">/*tp_basicsize*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>) <name>FSCatalogInfo_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_print*/</comment>
	<expr>(<name>getattrfunc</name>)0</expr>, <comment type="block">/*tp_getattr*/</comment>
	<expr>(<name>setattrfunc</name>)0</expr>, <comment type="block">/*tp_setattr*/</comment>
	<expr>(<name>cmpfunc</name>) <name>FSCatalogInfo_compare</name></expr>, <comment type="block">/*tp_compare*/</comment>
	<expr>(<name>reprfunc</name>) <name>FSCatalogInfo_repr</name></expr>, <comment type="block">/*tp_repr*/</comment>
	<expr>(<name>PyNumberMethods</name> *)0</expr>, <comment type="block">/* tp_as_number */</comment>
	<expr>(<name>PySequenceMethods</name> *)0</expr>, <comment type="block">/* tp_as_sequence */</comment>
	<expr>(<name>PyMappingMethods</name> *)0</expr>, <comment type="block">/* tp_as_mapping */</comment>
	<expr>(<name>hashfunc</name>) <name>FSCatalogInfo_hash</name></expr>, <comment type="block">/*tp_hash*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_call*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_str*/</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>, <comment type="block">/*tp_getattro*/</comment>
	<expr><name>PyObject_GenericSetAttr</name></expr>, <comment type="block">/*tp_setattro */</comment>
	<expr>0</expr>, <comment type="block">/*tp_as_buffer*/</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/* tp_flags */</comment>
	<expr>0</expr>, <comment type="block">/*tp_doc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_traverse*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_clear*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_richcompare*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_weaklistoffset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iter*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iternext*/</comment>
	<expr><name>FSCatalogInfo_methods</name></expr>, <comment type="block">/* tp_methods */</comment>
	<expr>0</expr>, <comment type="block">/*tp_members*/</comment>
	<expr><name>FSCatalogInfo_getsetlist</name></expr>, <comment type="block">/*tp_getset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_base*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dict*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_get*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_set*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dictoffset*/</comment>
	<expr><name>FSCatalogInfo_tp_init</name></expr>, <comment type="block">/* tp_init */</comment>
	<expr><name>FSCatalogInfo_tp_alloc</name></expr>, <comment type="block">/* tp_alloc */</comment>
	<expr><name>FSCatalogInfo_tp_new</name></expr>, <comment type="block">/* tp_new */</comment>
	<expr><name>FSCatalogInfo_tp_free</name></expr>, <comment type="block">/* tp_free */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* ----------------- End object type FSCatalogInfo ------------------ */</comment>


<comment type="block">/* ----------------------- Object type FInfo ------------------------ */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>FInfo_Type</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FInfo_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;FInfo_Type || PyObject_TypeCheck((x), &amp;FInfo_Type))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>FInfoObject</name> <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>FInfo</name></type> <name>ob_itself</name></decl>;</decl_stmt>
}</block></struct></type> <name>FInfoObject</name>;</typedef>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FInfo_New</name><parameter_list>(<param><decl><type><name>FInfo</name> *</type><name>itself</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>FInfoObject</name> *</type><name>it</name></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>itself</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>resNotFound</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>FInfoObject</name></expr></argument>, <argument><expr>&amp;<name>FInfo_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_itself</name></name> = *<name>itself</name></expr>;</expr_stmt>
	<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FInfo_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>FInfo</name> *</type><name>p_itself</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr>!<call><name>FInfo_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"FInfo required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>0</expr>;</return>
	}</block></then></if>
	<expr_stmt><expr>*<name>p_itself</name> = ((<name>FInfoObject</name> *)<name>v</name>)-&gt;<name>ob_itself</name></expr>;</expr_stmt>
	<return>return <expr>1</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FInfo_dealloc</name><parameter_list>(<param><decl><type><name>FInfoObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<comment type="block">/* Cleanup of self-&gt;ob_itself goes here */</comment>
	<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>FInfo_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FInfo_get_Type</name><parameter_list>(<param><decl><type><name>FInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_itself</name>.<name>fdType</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FInfo_set_Type</name><parameter_list>(<param><decl><type><name>FInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>fdType</name></name></expr></argument>)</argument_list></call>-1</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FInfo_get_Creator</name><parameter_list>(<param><decl><type><name>FInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_itself</name>.<name>fdCreator</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FInfo_set_Creator</name><parameter_list>(<param><decl><type><name>FInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>fdCreator</name></name></expr></argument>)</argument_list></call>-1</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FInfo_get_Flags</name><parameter_list>(<param><decl><type><name>FInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"H"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_itself</name>.<name>fdFlags</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FInfo_set_Flags</name><parameter_list>(<param><decl><type><name>FInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"H"</expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>fdFlags</name></name></expr></argument>)</argument_list></call>-1</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FInfo_get_Location</name><parameter_list>(<param><decl><type><name>FInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_itself</name>.<name>fdLocation</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FInfo_set_Location</name><parameter_list>(<param><decl><type><name>FInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>fdLocation</name></name></expr></argument>)</argument_list></call>-1</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FInfo_get_Fldr</name><parameter_list>(<param><decl><type><name>FInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_itself</name>.<name>fdFldr</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FInfo_set_Fldr</name><parameter_list>(<param><decl><type><name>FInfoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"h"</expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>.<name>fdFldr</name></name></expr></argument>)</argument_list></call>-1</expr>;</return>
	<return>return <expr>0</expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>FInfo_getsetlist</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"Type"</expr>, <expr>(<name>getter</name>)<name>FInfo_get_Type</name></expr>, <expr>(<name>setter</name>)<name>FInfo_set_Type</name></expr>, <expr>"4-char file type"</expr>}</block></expr>,
	<expr><block>{<expr>"Creator"</expr>, <expr>(<name>getter</name>)<name>FInfo_get_Creator</name></expr>, <expr>(<name>setter</name>)<name>FInfo_set_Creator</name></expr>, <expr>"4-char file creator"</expr>}</block></expr>,
	<expr><block>{<expr>"Flags"</expr>, <expr>(<name>getter</name>)<name>FInfo_get_Flags</name></expr>, <expr>(<name>setter</name>)<name>FInfo_set_Flags</name></expr>, <expr>"Finder flag bits"</expr>}</block></expr>,
	<expr><block>{<expr>"Location"</expr>, <expr>(<name>getter</name>)<name>FInfo_get_Location</name></expr>, <expr>(<name>setter</name>)<name>FInfo_set_Location</name></expr>, <expr>"(x, y) location of the file's icon in its parent finder window"</expr>}</block></expr>,
	<expr><block>{<expr>"Fldr"</expr>, <expr>(<name>getter</name>)<name>FInfo_get_Fldr</name></expr>, <expr>(<name>setter</name>)<name>FInfo_set_Fldr</name></expr>, <expr>"Original folder, for 'put away'"</expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FInfo_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FInfo_repr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FInfo_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>FInfo_tp_init</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>FInfo</name> *</type><name>itself</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kw</name><index>[]</index></name> <init>= <expr><block>{<expr>"itself"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr><name>_kwds</name></expr></argument>, <argument><expr>"|O&amp;"</expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>FInfo_Convert</name></expr></argument>, <argument><expr>&amp;<name>itself</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<block>{
		<if>if <condition>(<expr><name>itself</name></expr>)</condition><then> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;((<name>FInfoObject</name> *)<name>_self</name>)-&gt;<name>ob_itself</name></expr></argument>, <argument><expr><name>itself</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<return>return <expr>0</expr>;</return>
	}</block></then></if>
	<return>return <expr>-1</expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FInfo_tp_alloc</name></cpp:macro> <cpp:value>PyType_GenericAlloc</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FInfo_tp_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>(<name>self</name> = <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;((<name>FInfoObject</name> *)<name>self</name>)-&gt;<name>ob_itself</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>self</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FInfo_tp_free</name></cpp:macro> <cpp:value>PyObject_Del</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>FInfo_Type</name> <init>= <expr><block>{
	<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
	0</expr>, <comment type="block">/*ob_size*/</comment>
	<expr>"Carbon.File.FInfo"</expr>, <comment type="block">/*tp_name*/</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>FInfoObject</name></expr></argument>)</argument_list></sizeof></expr>, <comment type="block">/*tp_basicsize*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>) <name>FInfo_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_print*/</comment>
	<expr>(<name>getattrfunc</name>)0</expr>, <comment type="block">/*tp_getattr*/</comment>
	<expr>(<name>setattrfunc</name>)0</expr>, <comment type="block">/*tp_setattr*/</comment>
	<expr>(<name>cmpfunc</name>) <name>FInfo_compare</name></expr>, <comment type="block">/*tp_compare*/</comment>
	<expr>(<name>reprfunc</name>) <name>FInfo_repr</name></expr>, <comment type="block">/*tp_repr*/</comment>
	<expr>(<name>PyNumberMethods</name> *)0</expr>, <comment type="block">/* tp_as_number */</comment>
	<expr>(<name>PySequenceMethods</name> *)0</expr>, <comment type="block">/* tp_as_sequence */</comment>
	<expr>(<name>PyMappingMethods</name> *)0</expr>, <comment type="block">/* tp_as_mapping */</comment>
	<expr>(<name>hashfunc</name>) <name>FInfo_hash</name></expr>, <comment type="block">/*tp_hash*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_call*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_str*/</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>, <comment type="block">/*tp_getattro*/</comment>
	<expr><name>PyObject_GenericSetAttr</name></expr>, <comment type="block">/*tp_setattro */</comment>
	<expr>0</expr>, <comment type="block">/*tp_as_buffer*/</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/* tp_flags */</comment>
	<expr>0</expr>, <comment type="block">/*tp_doc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_traverse*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_clear*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_richcompare*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_weaklistoffset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iter*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iternext*/</comment>
	<expr><name>FInfo_methods</name></expr>, <comment type="block">/* tp_methods */</comment>
	<expr>0</expr>, <comment type="block">/*tp_members*/</comment>
	<expr><name>FInfo_getsetlist</name></expr>, <comment type="block">/*tp_getset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_base*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dict*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_get*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_set*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dictoffset*/</comment>
	<expr><name>FInfo_tp_init</name></expr>, <comment type="block">/* tp_init */</comment>
	<expr><name>FInfo_tp_alloc</name></expr>, <comment type="block">/* tp_alloc */</comment>
	<expr><name>FInfo_tp_new</name></expr>, <comment type="block">/* tp_new */</comment>
	<expr><name>FInfo_tp_free</name></expr>, <comment type="block">/* tp_free */</comment>
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>
<comment type="block">/* --------------------- End object type FInfo ---------------------- */</comment>


<comment type="block">/* ----------------------- Object type Alias ------------------------ */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Alias_Type</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Alias_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;Alias_Type || PyObject_TypeCheck((x), &amp;Alias_Type))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>AliasObject</name> <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>AliasHandle</name></type> <name>ob_itself</name></decl>;</decl_stmt>
	<function_decl><type><name>void</name></type> (*<name>ob_freeit</name>)<parameter_list>(<param><decl><type><name>AliasHandle</name></type> <name>ptr</name></decl></param>)</parameter_list>;</function_decl>
}</block></struct></type> <name>AliasObject</name>;</typedef>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Alias_New</name><parameter_list>(<param><decl><type><name>AliasHandle</name></type> <name>itself</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>AliasObject</name> *</type><name>it</name></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>itself</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>resNotFound</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>AliasObject</name></expr></argument>, <argument><expr>&amp;<name>Alias_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_itself</name></name> = <name>itself</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_freeit</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Alias_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>AliasHandle</name> *</type><name>p_itself</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr>!<call><name>Alias_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Alias required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>0</expr>;</return>
	}</block></then></if>
	<expr_stmt><expr>*<name>p_itself</name> = ((<name>AliasObject</name> *)<name>v</name>)-&gt;<name>ob_itself</name></expr>;</expr_stmt>
	<return>return <expr>1</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Alias_dealloc</name><parameter_list>(<param><decl><type><name>AliasObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_freeit</name></name> &amp;&amp; <name><name>self</name>-&gt;<name>ob_itself</name></name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_freeit</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_itself</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Alias_ResolveAlias</name><parameter_list>(<param><decl><type><name>AliasObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>fromFile__buf__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name> *</type><name>fromFile</name> <init>= <expr>&amp;<name>fromFile__buf__</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>target</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>wasChanged</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>myPyMac_GetOptFSSpecPtr</name></expr></argument>, <argument><expr>&amp;<name>fromFile</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>ResolveAlias</name><argument_list>(<argument><expr><name>fromFile</name></expr></argument>,
	                    <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                    <argument><expr>&amp;<name>target</name></expr></argument>,
	                    <argument><expr>&amp;<name>wasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;b"</expr></argument>,
	                     <argument><expr><name>FSSpec_New</name></expr></argument>, <argument><expr>&amp;<name>target</name></expr></argument>,
	                     <argument><expr><name>wasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Alias_GetAliasInfo</name><parameter_list>(<param><decl><type><name>AliasObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AliasInfoType</name></type> <name>index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str63</name></type> <name>theString</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetAliasInfo</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                    <argument><expr><name>index</name></expr></argument>,
	                    <argument><expr><name>theString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildStr255</name></expr></argument>, <argument><expr><name>theString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Alias_ResolveAliasWithMountFlags</name><parameter_list>(<param><decl><type><name>AliasObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>fromFile__buf__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name> *</type><name>fromFile</name> <init>= <expr>&amp;<name>fromFile__buf__</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>target</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>wasChanged</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mountFlags</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
	                      <argument><expr><name>myPyMac_GetOptFSSpecPtr</name></expr></argument>, <argument><expr>&amp;<name>fromFile</name></expr></argument>,
	                      <argument><expr>&amp;<name>mountFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>ResolveAliasWithMountFlags</name><argument_list>(<argument><expr><name>fromFile</name></expr></argument>,
	                                  <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                  <argument><expr>&amp;<name>target</name></expr></argument>,
	                                  <argument><expr>&amp;<name>wasChanged</name></expr></argument>,
	                                  <argument><expr><name>mountFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;b"</expr></argument>,
	                     <argument><expr><name>FSSpec_New</name></expr></argument>, <argument><expr>&amp;<name>target</name></expr></argument>,
	                     <argument><expr><name>wasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Alias_FollowFinderAlias</name><parameter_list>(<param><decl><type><name>AliasObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>fromFile__buf__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name> *</type><name>fromFile</name> <init>= <expr>&amp;<name>fromFile__buf__</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>logon</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>target</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>wasChanged</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
	                      <argument><expr><name>myPyMac_GetOptFSSpecPtr</name></expr></argument>, <argument><expr>&amp;<name>fromFile</name></expr></argument>,
	                      <argument><expr>&amp;<name>logon</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FollowFinderAlias</name><argument_list>(<argument><expr><name>fromFile</name></expr></argument>,
	                         <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                         <argument><expr><name>logon</name></expr></argument>,
	                         <argument><expr>&amp;<name>target</name></expr></argument>,
	                         <argument><expr>&amp;<name>wasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;b"</expr></argument>,
	                     <argument><expr><name>FSSpec_New</name></expr></argument>, <argument><expr>&amp;<name>target</name></expr></argument>,
	                     <argument><expr><name>wasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Alias_FSResolveAliasWithMountFlags</name><parameter_list>(<param><decl><type><name>AliasObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>fromFile__buf__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name> *</type><name>fromFile</name> <init>= <expr>&amp;<name>fromFile__buf__</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>target</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>wasChanged</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mountFlags</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
	                      <argument><expr><name>myPyMac_GetOptFSRefPtr</name></expr></argument>, <argument><expr>&amp;<name>fromFile</name></expr></argument>,
	                      <argument><expr>&amp;<name>mountFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSResolveAliasWithMountFlags</name><argument_list>(<argument><expr><name>fromFile</name></expr></argument>,
	                                    <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                    <argument><expr>&amp;<name>target</name></expr></argument>,
	                                    <argument><expr>&amp;<name>wasChanged</name></expr></argument>,
	                                    <argument><expr><name>mountFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;b"</expr></argument>,
	                     <argument><expr><name>FSRef_New</name></expr></argument>, <argument><expr>&amp;<name>target</name></expr></argument>,
	                     <argument><expr><name>wasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Alias_FSResolveAlias</name><parameter_list>(<param><decl><type><name>AliasObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>fromFile__buf__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name> *</type><name>fromFile</name> <init>= <expr>&amp;<name>fromFile__buf__</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>target</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>wasChanged</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>myPyMac_GetOptFSRefPtr</name></expr></argument>, <argument><expr>&amp;<name>fromFile</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSResolveAlias</name><argument_list>(<argument><expr><name>fromFile</name></expr></argument>,
	                      <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                      <argument><expr>&amp;<name>target</name></expr></argument>,
	                      <argument><expr>&amp;<name>wasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;b"</expr></argument>,
	                     <argument><expr><name>FSRef_New</name></expr></argument>, <argument><expr>&amp;<name>target</name></expr></argument>,
	                     <argument><expr><name>wasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Alias_FSFollowFinderAlias</name><parameter_list>(<param><decl><type><name>AliasObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>fromFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>logon</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>target</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>wasChanged</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"b"</expr></argument>,
	                      <argument><expr>&amp;<name>logon</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSFollowFinderAlias</name><argument_list>(<argument><expr>&amp;<name>fromFile</name></expr></argument>,
	                           <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                           <argument><expr><name>logon</name></expr></argument>,
	                           <argument><expr>&amp;<name>target</name></expr></argument>,
	                           <argument><expr>&amp;<name>wasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;b"</expr></argument>,
	                     <argument><expr><name>FSRef_New</name></expr></argument>, <argument><expr>&amp;<name>fromFile</name></expr></argument>,
	                     <argument><expr><name>FSRef_New</name></expr></argument>, <argument><expr>&amp;<name>target</name></expr></argument>,
	                     <argument><expr><name>wasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>Alias_methods</name><index>[]</index></name> <init>= <expr><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<expr><block>{<expr>"ResolveAlias"</expr>, <expr>(<name>PyCFunction</name>)<name>Alias_ResolveAlias</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSSpec fromFile) -&gt; (FSSpec target, Boolean wasChanged)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetAliasInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>Alias_GetAliasInfo</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(AliasInfoType index) -&gt; (Str63 theString)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ResolveAliasWithMountFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Alias_ResolveAliasWithMountFlags</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSSpec fromFile, unsigned long mountFlags) -&gt; (FSSpec target, Boolean wasChanged)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FollowFinderAlias"</expr>, <expr>(<name>PyCFunction</name>)<name>Alias_FollowFinderAlias</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSSpec fromFile, Boolean logon) -&gt; (FSSpec target, Boolean wasChanged)"</argument>)</argument_list></macro>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>
	<expr><block>{<expr>"FSResolveAliasWithMountFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Alias_FSResolveAliasWithMountFlags</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSRef fromFile, unsigned long mountFlags) -&gt; (FSRef target, Boolean wasChanged)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSResolveAlias"</expr>, <expr>(<name>PyCFunction</name>)<name>Alias_FSResolveAlias</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSRef fromFile) -&gt; (FSRef target, Boolean wasChanged)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSFollowFinderAlias"</expr>, <expr>(<name>PyCFunction</name>)<name>Alias_FSFollowFinderAlias</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Boolean logon) -&gt; (FSRef fromFile, FSRef target, Boolean wasChanged)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Alias_get_data</name><parameter_list>(<param><decl><type><name>AliasObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
	                    <decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>

	                    <expr_stmt><expr><name>size</name> = <call><name>GetHandleSize</name><argument_list>(<argument><expr>(<name>Handle</name>)<name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                    <expr_stmt><expr><call><name>HLock</name><argument_list>(<argument><expr>(<name>Handle</name>)<name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                    <expr_stmt><expr><name>rv</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>*(<name>Handle</name>)<name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                    <expr_stmt><expr><call><name>HUnlock</name><argument_list>(<argument><expr>(<name>Handle</name>)<name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                    <return>return <expr><name>rv</name></expr>;</return>
	            
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Alias_set_data</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>Alias_getsetlist</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"data"</expr>, <expr>(<name>getter</name>)<name>Alias_get_data</name></expr>, <expr>(<name>setter</name>)<name>Alias_set_data</name></expr>, <expr>"Raw data of the alias object"</expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Alias_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Alias_repr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Alias_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>Alias_tp_init</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>AliasHandle</name></type> <name>itself</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>rawdata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rawdatalen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kw</name><index>[]</index></name> <init>= <expr><block>{<expr>"itself"</expr>, <expr>"rawdata"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr><name>_kwds</name></expr></argument>, <argument><expr>"|O&amp;s#"</expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>Alias_Convert</name></expr></argument>, <argument><expr>&amp;<name>itself</name></expr></argument>, <argument><expr>&amp;<name>rawdata</name></expr></argument>, <argument><expr>&amp;<name>rawdatalen</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<return>return <expr>-1</expr>;</return></then></if>
	<if>if <condition>(<expr><name>itself</name> &amp;&amp; <name>rawdata</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Only one of itself or rawdata may be specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>-1</expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr>!<name>itself</name> &amp;&amp; !<name>rawdata</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"One of itself or rawdata must be specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>-1</expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr><name>rawdata</name></expr>)</condition><then>
	<block>{
		<if>if <condition>(<expr>(<name>h</name> = <call><name>NewHandle</name><argument_list>(<argument><expr><name>rawdatalen</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>-1</expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><call><name>HLock</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>(<name>char</name> *)*<name>h</name></expr></argument>, <argument><expr><name>rawdata</name></expr></argument>, <argument><expr><name>rawdatalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>HUnlock</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr>((<name>AliasObject</name> *)<name>_self</name>)-&gt;<name>ob_itself</name> = (<name>AliasHandle</name>)<name>h</name></expr>;</expr_stmt>
		<return>return <expr>0</expr>;</return>
	}</block></then></if>
	<expr_stmt><expr>((<name>AliasObject</name> *)<name>_self</name>)-&gt;<name>ob_itself</name> = <name>itself</name></expr>;</expr_stmt>
	<return>return <expr>0</expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Alias_tp_alloc</name></cpp:macro> <cpp:value>PyType_GenericAlloc</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Alias_tp_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>(<name>self</name> = <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr>((<name>AliasObject</name> *)<name>self</name>)-&gt;<name>ob_itself</name> = <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><name>self</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Alias_tp_free</name></cpp:macro> <cpp:value>PyObject_Del</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Alias_Type</name> <init>= <expr><block>{
	<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
	0</expr>, <comment type="block">/*ob_size*/</comment>
	<expr>"Carbon.File.Alias"</expr>, <comment type="block">/*tp_name*/</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>AliasObject</name></expr></argument>)</argument_list></sizeof></expr>, <comment type="block">/*tp_basicsize*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>) <name>Alias_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_print*/</comment>
	<expr>(<name>getattrfunc</name>)0</expr>, <comment type="block">/*tp_getattr*/</comment>
	<expr>(<name>setattrfunc</name>)0</expr>, <comment type="block">/*tp_setattr*/</comment>
	<expr>(<name>cmpfunc</name>) <name>Alias_compare</name></expr>, <comment type="block">/*tp_compare*/</comment>
	<expr>(<name>reprfunc</name>) <name>Alias_repr</name></expr>, <comment type="block">/*tp_repr*/</comment>
	<expr>(<name>PyNumberMethods</name> *)0</expr>, <comment type="block">/* tp_as_number */</comment>
	<expr>(<name>PySequenceMethods</name> *)0</expr>, <comment type="block">/* tp_as_sequence */</comment>
	<expr>(<name>PyMappingMethods</name> *)0</expr>, <comment type="block">/* tp_as_mapping */</comment>
	<expr>(<name>hashfunc</name>) <name>Alias_hash</name></expr>, <comment type="block">/*tp_hash*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_call*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_str*/</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>, <comment type="block">/*tp_getattro*/</comment>
	<expr><name>PyObject_GenericSetAttr</name></expr>, <comment type="block">/*tp_setattro */</comment>
	<expr>0</expr>, <comment type="block">/*tp_as_buffer*/</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/* tp_flags */</comment>
	<expr>0</expr>, <comment type="block">/*tp_doc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_traverse*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_clear*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_richcompare*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_weaklistoffset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iter*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iternext*/</comment>
	<expr><name>Alias_methods</name></expr>, <comment type="block">/* tp_methods */</comment>
	<expr>0</expr>, <comment type="block">/*tp_members*/</comment>
	<expr><name>Alias_getsetlist</name></expr>, <comment type="block">/*tp_getset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_base*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dict*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_get*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_set*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dictoffset*/</comment>
	<expr><name>Alias_tp_init</name></expr>, <comment type="block">/* tp_init */</comment>
	<expr><name>Alias_tp_alloc</name></expr>, <comment type="block">/* tp_alloc */</comment>
	<expr><name>Alias_tp_new</name></expr>, <comment type="block">/* tp_new */</comment>
	<expr><name>Alias_tp_free</name></expr>, <comment type="block">/* tp_free */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* --------------------- End object type Alias ---------------------- */</comment>


<comment type="block">/* ----------------------- Object type FSSpec ----------------------- */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>FSSpec_Type</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSSpec_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;FSSpec_Type || PyObject_TypeCheck((x), &amp;FSSpec_Type))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>FSSpecObject</name> <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>FSSpec</name></type> <name>ob_itself</name></decl>;</decl_stmt>
}</block></struct></type> <name>FSSpecObject</name>;</typedef>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSSpec_New</name><parameter_list>(<param><decl><type><name>FSSpec</name> *</type><name>itself</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>FSSpecObject</name> *</type><name>it</name></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>itself</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>resNotFound</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>FSSpecObject</name></expr></argument>, <argument><expr>&amp;<name>FSSpec_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_itself</name></name> = *<name>itself</name></expr>;</expr_stmt>
	<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FSSpec_dealloc</name><parameter_list>(<param><decl><type><name>FSSpecObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<comment type="block">/* Cleanup of self-&gt;ob_itself goes here */</comment>
	<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSSpec_FSpOpenDF</name><parameter_list>(<param><decl><type><name>FSSpecObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt8</name></type> <name>permission</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>refNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"b"</expr></argument>,
	                      <argument><expr>&amp;<name>permission</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSpOpenDF</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                 <argument><expr><name>permission</name></expr></argument>,
	                 <argument><expr>&amp;<name>refNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>refNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSSpec_FSpOpenRF</name><parameter_list>(<param><decl><type><name>FSSpecObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt8</name></type> <name>permission</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>refNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"b"</expr></argument>,
	                      <argument><expr>&amp;<name>permission</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSpOpenRF</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                 <argument><expr><name>permission</name></expr></argument>,
	                 <argument><expr>&amp;<name>refNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>refNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSSpec_FSpCreate</name><parameter_list>(<param><decl><type><name>FSSpecObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>creator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>fileType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScriptCode</name></type> <name>scriptTag</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;h"</expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>creator</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>fileType</name></expr></argument>,
	                      <argument><expr>&amp;<name>scriptTag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSpCreate</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                 <argument><expr><name>creator</name></expr></argument>,
	                 <argument><expr><name>fileType</name></expr></argument>,
	                 <argument><expr><name>scriptTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSSpec_FSpDirCreate</name><parameter_list>(<param><decl><type><name>FSSpecObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScriptCode</name></type> <name>scriptTag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>createdDirID</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>scriptTag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSpDirCreate</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                    <argument><expr><name>scriptTag</name></expr></argument>,
	                    <argument><expr>&amp;<name>createdDirID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>createdDirID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSSpec_FSpDelete</name><parameter_list>(<param><decl><type><name>FSSpecObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSpDelete</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSSpec_FSpGetFInfo</name><parameter_list>(<param><decl><type><name>FSSpecObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FInfo</name></type> <name>fndrInfo</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSpGetFInfo</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                   <argument><expr>&amp;<name>fndrInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>FInfo_New</name></expr></argument>, <argument><expr>&amp;<name>fndrInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSSpec_FSpSetFInfo</name><parameter_list>(<param><decl><type><name>FSSpecObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FInfo</name></type> <name>fndrInfo</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>FInfo_Convert</name></expr></argument>, <argument><expr>&amp;<name>fndrInfo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSpSetFInfo</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                   <argument><expr>&amp;<name>fndrInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSSpec_FSpSetFLock</name><parameter_list>(<param><decl><type><name>FSSpecObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSpSetFLock</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSSpec_FSpRstFLock</name><parameter_list>(<param><decl><type><name>FSSpecObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSpRstFLock</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSSpec_FSpRename</name><parameter_list>(<param><decl><type><name>FSSpecObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>newName</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSpRename</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                 <argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSSpec_FSpCatMove</name><parameter_list>(<param><decl><type><name>FSSpecObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>dest</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>FSSpec_Convert</name></expr></argument>, <argument><expr>&amp;<name>dest</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSpCatMove</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                  <argument><expr>&amp;<name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSSpec_FSpExchangeFiles</name><parameter_list>(<param><decl><type><name>FSSpecObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>dest</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>FSSpec_Convert</name></expr></argument>, <argument><expr>&amp;<name>dest</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSpExchangeFiles</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                        <argument><expr>&amp;<name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSSpec_FSpMakeFSRef</name><parameter_list>(<param><decl><type><name>FSSpecObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>newRef</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSpMakeFSRef</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                    <argument><expr>&amp;<name>newRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>FSRef_New</name></expr></argument>, <argument><expr>&amp;<name>newRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSSpec_NewAliasMinimal</name><parameter_list>(<param><decl><type><name>FSSpecObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AliasHandle</name></type> <name>alias</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>NewAliasMinimal</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                       <argument><expr>&amp;<name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>Alias_New</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSSpec_IsAliasFile</name><parameter_list>(<param><decl><type><name>FSSpecObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>aliasFileFlag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>folderFlag</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>IsAliasFile</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                   <argument><expr>&amp;<name>aliasFileFlag</name></expr></argument>,
	                   <argument><expr>&amp;<name>folderFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"bb"</expr></argument>,
	                     <argument><expr><name>aliasFileFlag</name></expr></argument>,
	                     <argument><expr><name>folderFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSSpec_as_pathname</name><parameter_list>(<param><decl><type><name>FSSpecObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name></type> <name><name>strbuf</name><index>[<expr>1024</expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
	        <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>err</name> = <call><name>_PyMac_GetFullPathname</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>, <argument><expr><name>strbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>( <expr><name>err</name></expr> )</condition><then> <block>{
	        <expr_stmt><expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>

}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSSpec_as_tuple</name><parameter_list>(<param><decl><type><name>FSSpecObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
	        <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(iis#)"</expr></argument>, <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name>.<name>vRefNum</name></name></expr></argument>, <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name>.<name>parID</name></name></expr></argument>,
	                                        <argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name>.<name>name</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name>.<name>name</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>

}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>FSSpec_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"FSpOpenDF"</expr>, <expr>(<name>PyCFunction</name>)<name>FSSpec_FSpOpenDF</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt8 permission) -&gt; (short refNum)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSpOpenRF"</expr>, <expr>(<name>PyCFunction</name>)<name>FSSpec_FSpOpenRF</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt8 permission) -&gt; (short refNum)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSpCreate"</expr>, <expr>(<name>PyCFunction</name>)<name>FSSpec_FSpCreate</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType creator, OSType fileType, ScriptCode scriptTag) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSpDirCreate"</expr>, <expr>(<name>PyCFunction</name>)<name>FSSpec_FSpDirCreate</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(ScriptCode scriptTag) -&gt; (long createdDirID)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSpDelete"</expr>, <expr>(<name>PyCFunction</name>)<name>FSSpec_FSpDelete</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSpGetFInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>FSSpec_FSpGetFInfo</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (FInfo fndrInfo)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSpSetFInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>FSSpec_FSpSetFInfo</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FInfo fndrInfo) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSpSetFLock"</expr>, <expr>(<name>PyCFunction</name>)<name>FSSpec_FSpSetFLock</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSpRstFLock"</expr>, <expr>(<name>PyCFunction</name>)<name>FSSpec_FSpRstFLock</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSpRename"</expr>, <expr>(<name>PyCFunction</name>)<name>FSSpec_FSpRename</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Str255 newName) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSpCatMove"</expr>, <expr>(<name>PyCFunction</name>)<name>FSSpec_FSpCatMove</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSSpec dest) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSpExchangeFiles"</expr>, <expr>(<name>PyCFunction</name>)<name>FSSpec_FSpExchangeFiles</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSSpec dest) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSpMakeFSRef"</expr>, <expr>(<name>PyCFunction</name>)<name>FSSpec_FSpMakeFSRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (FSRef newRef)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"NewAliasMinimal"</expr>, <expr>(<name>PyCFunction</name>)<name>FSSpec_NewAliasMinimal</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (AliasHandle alias)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsAliasFile"</expr>, <expr>(<name>PyCFunction</name>)<name>FSSpec_IsAliasFile</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean aliasFileFlag, Boolean folderFlag)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"as_pathname"</expr>, <expr>(<name>PyCFunction</name>)<name>FSSpec_as_pathname</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; string"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"as_tuple"</expr>, <expr>(<name>PyCFunction</name>)<name>FSSpec_as_tuple</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (vRefNum, dirID, name)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSSpec_get_data</name><parameter_list>(<param><decl><type><name>FSSpecObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)&amp;<name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSSpec_set_data</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>FSSpec_getsetlist</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"data"</expr>, <expr>(<name>getter</name>)<name>FSSpec_get_data</name></expr>, <expr>(<name>setter</name>)<name>FSSpec_set_data</name></expr>, <expr>"Raw data of the FSSpec object"</expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSSpec_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type> <name>FSSpec_repr</name><parameter_list>(<param><decl><type><name>FSSpecObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>512</expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%s((%d, %ld, '%.*s'))"</expr></argument>,
	        <argument><expr><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>,
	        <argument><expr><name><name>self</name>-&gt;<name>ob_itself</name>.<name>vRefNum</name></name></expr></argument>,
	        <argument><expr><name><name>self</name>-&gt;<name>ob_itself</name>.<name>parID</name></name></expr></argument>,
	        <argument><expr><name><name>self</name>-&gt;<name>ob_itself</name>.<name>name</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_itself</name>.<name>name</name></name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSSpec_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>FSSpec_tp_init</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>rawdata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rawdatalen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kw</name><index>[]</index></name> <init>= <expr><block>{<expr>"itself"</expr>, <expr>"rawdata"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr><name>_kwds</name></expr></argument>, <argument><expr>"|Os#"</expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>, <argument><expr>&amp;<name>rawdata</name></expr></argument>, <argument><expr>&amp;<name>rawdatalen</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<return>return <expr>-1</expr>;</return></then></if>
	<if>if <condition>(<expr><name>v</name> &amp;&amp; <name>rawdata</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Only one of itself or rawdata may be specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>-1</expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr>!<name>v</name> &amp;&amp; !<name>rawdata</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"One of itself or rawdata must be specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>-1</expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr><name>rawdata</name></expr>)</condition><then>
	<block>{
		<if>if <condition>(<expr><name>rawdatalen</name> != <sizeof>sizeof<argument_list>(<argument><expr><name>FSSpec</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"FSSpec rawdata incorrect size"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>-1</expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;((<name>FSSpecObject</name> *)<name>_self</name>)-&gt;<name>ob_itself</name></expr></argument>, <argument><expr><name>rawdata</name></expr></argument>, <argument><expr><name>rawdatalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>0</expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr><call><name>PyMac_GetFSSpec</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>&amp;((<name>FSSpecObject</name> *)<name>_self</name>)-&gt;<name>ob_itself</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
	<return>return <expr>-1</expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSSpec_tp_alloc</name></cpp:macro> <cpp:value>PyType_GenericAlloc</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSSpec_tp_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>(<name>self</name> = <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;((<name>FSSpecObject</name> *)<name>self</name>)-&gt;<name>ob_itself</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FSSpec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>self</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSSpec_tp_free</name></cpp:macro> <cpp:value>PyObject_Del</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>FSSpec_Type</name> <init>= <expr><block>{
	<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
	0</expr>, <comment type="block">/*ob_size*/</comment>
	<expr>"Carbon.File.FSSpec"</expr>, <comment type="block">/*tp_name*/</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>FSSpecObject</name></expr></argument>)</argument_list></sizeof></expr>, <comment type="block">/*tp_basicsize*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>) <name>FSSpec_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_print*/</comment>
	<expr>(<name>getattrfunc</name>)0</expr>, <comment type="block">/*tp_getattr*/</comment>
	<expr>(<name>setattrfunc</name>)0</expr>, <comment type="block">/*tp_setattr*/</comment>
	<expr>(<name>cmpfunc</name>) <name>FSSpec_compare</name></expr>, <comment type="block">/*tp_compare*/</comment>
	<expr>(<name>reprfunc</name>) <name>FSSpec_repr</name></expr>, <comment type="block">/*tp_repr*/</comment>
	<expr>(<name>PyNumberMethods</name> *)0</expr>, <comment type="block">/* tp_as_number */</comment>
	<expr>(<name>PySequenceMethods</name> *)0</expr>, <comment type="block">/* tp_as_sequence */</comment>
	<expr>(<name>PyMappingMethods</name> *)0</expr>, <comment type="block">/* tp_as_mapping */</comment>
	<expr>(<name>hashfunc</name>) <name>FSSpec_hash</name></expr>, <comment type="block">/*tp_hash*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_call*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_str*/</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>, <comment type="block">/*tp_getattro*/</comment>
	<expr><name>PyObject_GenericSetAttr</name></expr>, <comment type="block">/*tp_setattro */</comment>
	<expr>0</expr>, <comment type="block">/*tp_as_buffer*/</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/* tp_flags */</comment>
	<expr>0</expr>, <comment type="block">/*tp_doc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_traverse*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_clear*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_richcompare*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_weaklistoffset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iter*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iternext*/</comment>
	<expr><name>FSSpec_methods</name></expr>, <comment type="block">/* tp_methods */</comment>
	<expr>0</expr>, <comment type="block">/*tp_members*/</comment>
	<expr><name>FSSpec_getsetlist</name></expr>, <comment type="block">/*tp_getset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_base*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dict*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_get*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_set*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dictoffset*/</comment>
	<expr><name>FSSpec_tp_init</name></expr>, <comment type="block">/* tp_init */</comment>
	<expr><name>FSSpec_tp_alloc</name></expr>, <comment type="block">/* tp_alloc */</comment>
	<expr><name>FSSpec_tp_new</name></expr>, <comment type="block">/* tp_new */</comment>
	<expr><name>FSSpec_tp_free</name></expr>, <comment type="block">/* tp_free */</comment>
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>
<comment type="block">/* --------------------- End object type FSSpec --------------------- */</comment>


<comment type="block">/* ----------------------- Object type FSRef ------------------------ */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>FSRef_Type</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSRef_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;FSRef_Type || PyObject_TypeCheck((x), &amp;FSRef_Type))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>FSRefObject</name> <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>FSRef</name></type> <name>ob_itself</name></decl>;</decl_stmt>
}</block></struct></type> <name>FSRefObject</name>;</typedef>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_New</name><parameter_list>(<param><decl><type><name>FSRef</name> *</type><name>itself</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>FSRefObject</name> *</type><name>it</name></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>itself</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>resNotFound</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>FSRefObject</name></expr></argument>, <argument><expr>&amp;<name>FSRef_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_itself</name></name> = *<name>itself</name></expr>;</expr_stmt>
	<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FSRef_dealloc</name><parameter_list>(<param><decl><type><name>FSRefObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<comment type="block">/* Cleanup of self-&gt;ob_itself goes here */</comment>
	<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_FSMakeFSRefUnicode</name><parameter_list>(<param><decl><type><name>FSRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniChar</name> *</type><name>nameLength__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniCharCount</name></type> <name>nameLength__len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nameLength__in_len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TextEncoding</name></type> <name>textEncodingHint</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>newRef</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"u#l"</expr></argument>,
	                      <argument><expr>&amp;<name>nameLength__in__</name></expr></argument>, <argument><expr>&amp;<name>nameLength__in_len__</name></expr></argument>,
	                      <argument><expr>&amp;<name>textEncodingHint</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>nameLength__len__</name> = <name>nameLength__in_len__</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_err</name> = <call><name>FSMakeFSRefUnicode</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                          <argument><expr><name>nameLength__len__</name></expr></argument>, <argument><expr><name>nameLength__in__</name></expr></argument>,
	                          <argument><expr><name>textEncodingHint</name></expr></argument>,
	                          <argument><expr>&amp;<name>newRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>FSRef_New</name></expr></argument>, <argument><expr>&amp;<name>newRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_FSCompareFSRefs</name><parameter_list>(<param><decl><type><name>FSRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>ref2</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>FSRef_Convert</name></expr></argument>, <argument><expr>&amp;<name>ref2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSCompareFSRefs</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                       <argument><expr>&amp;<name>ref2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_FSCreateFileUnicode</name><parameter_list>(<param><decl><type><name>FSRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniChar</name> *</type><name>nameLength__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniCharCount</name></type> <name>nameLength__len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nameLength__in_len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSCatalogInfoBitmap</name></type> <name>whichInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSCatalogInfo</name></type> <name>catalogInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>newRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>newSpec</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"u#lO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>nameLength__in__</name></expr></argument>, <argument><expr>&amp;<name>nameLength__in_len__</name></expr></argument>,
	                      <argument><expr>&amp;<name>whichInfo</name></expr></argument>,
	                      <argument><expr><name>FSCatalogInfo_Convert</name></expr></argument>, <argument><expr>&amp;<name>catalogInfo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>nameLength__len__</name> = <name>nameLength__in_len__</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_err</name> = <call><name>FSCreateFileUnicode</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                           <argument><expr><name>nameLength__len__</name></expr></argument>, <argument><expr><name>nameLength__in__</name></expr></argument>,
	                           <argument><expr><name>whichInfo</name></expr></argument>,
	                           <argument><expr>&amp;<name>catalogInfo</name></expr></argument>,
	                           <argument><expr>&amp;<name>newRef</name></expr></argument>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	                           <argument><expr>&amp;<name>newSpec</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>	<comment type="block">/* __LP64__ */</comment>
				   <name>NULL</name></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__*/</comment>
				  )</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>,
	                     <argument><expr><name>FSRef_New</name></expr></argument>, <argument><expr>&amp;<name>newRef</name></expr></argument>,
	                     <argument><expr><name>FSSpec_New</name></expr></argument>, <argument><expr>&amp;<name>newSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* __LP64__ */</comment>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O"</expr></argument>, <argument><expr><name>FSRef_New</name></expr></argument>, <argument><expr>&amp;<name>newRef</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>

	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_FSCreateDirectoryUnicode</name><parameter_list>(<param><decl><type><name>FSRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniChar</name> *</type><name>nameLength__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniCharCount</name></type> <name>nameLength__len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nameLength__in_len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSCatalogInfoBitmap</name></type> <name>whichInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSCatalogInfo</name></type> <name>catalogInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>newRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>newSpec</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>
	<decl_stmt><decl><type><name>UInt32</name></type> <name>newDirID</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"u#lO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>nameLength__in__</name></expr></argument>, <argument><expr>&amp;<name>nameLength__in_len__</name></expr></argument>,
	                      <argument><expr>&amp;<name>whichInfo</name></expr></argument>,
	                      <argument><expr><name>FSCatalogInfo_Convert</name></expr></argument>, <argument><expr>&amp;<name>catalogInfo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>nameLength__len__</name> = <name>nameLength__in_len__</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_err</name> = <call><name>FSCreateDirectoryUnicode</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                <argument><expr><name>nameLength__len__</name></expr></argument>, <argument><expr><name>nameLength__in__</name></expr></argument>,
	                                <argument><expr><name>whichInfo</name></expr></argument>,
	                                <argument><expr>&amp;<name>catalogInfo</name></expr></argument>,
	                                <argument><expr>&amp;<name>newRef</name></expr></argument>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	                                <argument><expr>&amp;<name>newSpec</name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !__LP64__ */</comment>
					<argument><expr><name>NULL</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>
	                                <argument><expr>&amp;<name>newDirID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;l"</expr></argument>,
	                     <argument><expr><name>FSRef_New</name></expr></argument>, <argument><expr>&amp;<name>newRef</name></expr></argument>,
	                     <argument><expr><name>FSSpec_New</name></expr></argument>, <argument><expr>&amp;<name>newSpec</name></expr></argument>,
	                     <argument><expr><name>newDirID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>	<comment type="block">/* __LP64__ */</comment>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;Ol"</expr></argument>,
	                     <argument><expr><name>FSRef_New</name></expr></argument>, <argument><expr>&amp;<name>newRef</name></expr></argument>,
	                     <argument><expr><name>Py_None</name></expr></argument>,
	                     <argument><expr><name>newDirID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_FSDeleteObject</name><parameter_list>(<param><decl><type><name>FSRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSDeleteObject</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_FSMoveObject</name><parameter_list>(<param><decl><type><name>FSRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>destDirectory</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>newRef</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>FSRef_Convert</name></expr></argument>, <argument><expr>&amp;<name>destDirectory</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSMoveObject</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                    <argument><expr>&amp;<name>destDirectory</name></expr></argument>,
	                    <argument><expr>&amp;<name>newRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>FSRef_New</name></expr></argument>, <argument><expr>&amp;<name>newRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_FSExchangeObjects</name><parameter_list>(<param><decl><type><name>FSRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>destRef</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>FSRef_Convert</name></expr></argument>, <argument><expr>&amp;<name>destRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSExchangeObjects</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                         <argument><expr>&amp;<name>destRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_FSRenameUnicode</name><parameter_list>(<param><decl><type><name>FSRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniChar</name> *</type><name>nameLength__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniCharCount</name></type> <name>nameLength__len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nameLength__in_len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TextEncoding</name></type> <name>textEncodingHint</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>newRef</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"u#l"</expr></argument>,
	                      <argument><expr>&amp;<name>nameLength__in__</name></expr></argument>, <argument><expr>&amp;<name>nameLength__in_len__</name></expr></argument>,
	                      <argument><expr>&amp;<name>textEncodingHint</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>nameLength__len__</name> = <name>nameLength__in_len__</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_err</name> = <call><name>FSRenameUnicode</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                       <argument><expr><name>nameLength__len__</name></expr></argument>, <argument><expr><name>nameLength__in__</name></expr></argument>,
	                       <argument><expr><name>textEncodingHint</name></expr></argument>,
	                       <argument><expr>&amp;<name>newRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>FSRef_New</name></expr></argument>, <argument><expr>&amp;<name>newRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_FSGetCatalogInfo</name><parameter_list>(<param><decl><type><name>FSRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSCatalogInfoBitmap</name></type> <name>whichInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSCatalogInfo</name></type> <name>catalogInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HFSUniStr255</name></type> <name>outName</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>fsSpec</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>parentRef</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>whichInfo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSGetCatalogInfo</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                        <argument><expr><name>whichInfo</name></expr></argument>,
	                        <argument><expr>&amp;<name>catalogInfo</name></expr></argument>,
	                        <argument><expr>&amp;<name>outName</name></expr></argument>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	                        <argument><expr>&amp;<name>fsSpec</name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>	<comment type="block">/* __LP64__ */</comment>
				<argument><expr><name>NULL</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>
	                        <argument><expr>&amp;<name>parentRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;O&amp;O&amp;"</expr></argument>,
	                     <argument><expr><name>FSCatalogInfo_New</name></expr></argument>, <argument><expr>&amp;<name>catalogInfo</name></expr></argument>,
	                     <argument><expr><name>PyMac_BuildHFSUniStr255</name></expr></argument>, <argument><expr>&amp;<name>outName</name></expr></argument>,
	                     <argument><expr><name>FSSpec_New</name></expr></argument>, <argument><expr>&amp;<name>fsSpec</name></expr></argument>,
	                     <argument><expr><name>FSRef_New</name></expr></argument>, <argument><expr>&amp;<name>parentRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>	<comment type="block">/* __LP64__ */</comment>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;OO&amp;"</expr></argument>,
	                     <argument><expr><name>FSCatalogInfo_New</name></expr></argument>, <argument><expr>&amp;<name>catalogInfo</name></expr></argument>,
	                     <argument><expr><name>PyMac_BuildHFSUniStr255</name></expr></argument>, <argument><expr>&amp;<name>outName</name></expr></argument>,
	                     <argument><expr><name>Py_None</name></expr></argument>,
	                     <argument><expr><name>FSRef_New</name></expr></argument>, <argument><expr>&amp;<name>parentRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_FSSetCatalogInfo</name><parameter_list>(<param><decl><type><name>FSRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSCatalogInfoBitmap</name></type> <name>whichInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSCatalogInfo</name></type> <name>catalogInfo</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>whichInfo</name></expr></argument>,
	                      <argument><expr><name>FSCatalogInfo_Convert</name></expr></argument>, <argument><expr>&amp;<name>catalogInfo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSSetCatalogInfo</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                        <argument><expr><name>whichInfo</name></expr></argument>,
	                        <argument><expr>&amp;<name>catalogInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_FSCreateFork</name><parameter_list>(<param><decl><type><name>FSRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniChar</name> *</type><name>forkNameLength__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniCharCount</name></type> <name>forkNameLength__len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>forkNameLength__in_len__</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"u#"</expr></argument>,
	                      <argument><expr>&amp;<name>forkNameLength__in__</name></expr></argument>, <argument><expr>&amp;<name>forkNameLength__in_len__</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>forkNameLength__len__</name> = <name>forkNameLength__in_len__</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_err</name> = <call><name>FSCreateFork</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                    <argument><expr><name>forkNameLength__len__</name></expr></argument>, <argument><expr><name>forkNameLength__in__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_FSDeleteFork</name><parameter_list>(<param><decl><type><name>FSRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniChar</name> *</type><name>forkNameLength__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniCharCount</name></type> <name>forkNameLength__len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>forkNameLength__in_len__</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"u#"</expr></argument>,
	                      <argument><expr>&amp;<name>forkNameLength__in__</name></expr></argument>, <argument><expr>&amp;<name>forkNameLength__in_len__</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>forkNameLength__len__</name> = <name>forkNameLength__in_len__</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_err</name> = <call><name>FSDeleteFork</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                    <argument><expr><name>forkNameLength__len__</name></expr></argument>, <argument><expr><name>forkNameLength__in__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_FSOpenFork</name><parameter_list>(<param><decl><type><name>FSRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniChar</name> *</type><name>forkNameLength__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniCharCount</name></type> <name>forkNameLength__len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>forkNameLength__in_len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt8</name></type> <name>permissions</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSIORefNum</name></type> <name>forkRefNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"u#b"</expr></argument>,
	                      <argument><expr>&amp;<name>forkNameLength__in__</name></expr></argument>, <argument><expr>&amp;<name>forkNameLength__in_len__</name></expr></argument>,
	                      <argument><expr>&amp;<name>permissions</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>forkNameLength__len__</name> = <name>forkNameLength__in_len__</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_err</name> = <call><name>FSOpenFork</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                  <argument><expr><name>forkNameLength__len__</name></expr></argument>, <argument><expr><name>forkNameLength__in__</name></expr></argument>,
	                  <argument><expr><name>permissions</name></expr></argument>,
	                  <argument><expr>&amp;<name>forkRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>forkRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_FNNotify</name><parameter_list>(<param><decl><type><name>FSRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FNMessage</name></type> <name>message</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OptionBits</name></type> <name>flags</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
	                      <argument><expr>&amp;<name>message</name></expr></argument>,
	                      <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FNNotify</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                <argument><expr><name>message</name></expr></argument>,
	                <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_FSNewAliasMinimal</name><parameter_list>(<param><decl><type><name>FSRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AliasHandle</name></type> <name>inAlias</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSNewAliasMinimal</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                         <argument><expr>&amp;<name>inAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>Alias_New</name></expr></argument>, <argument><expr><name>inAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_FSIsAliasFile</name><parameter_list>(<param><decl><type><name>FSRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>aliasFileFlag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>folderFlag</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSIsAliasFile</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                     <argument><expr>&amp;<name>aliasFileFlag</name></expr></argument>,
	                     <argument><expr>&amp;<name>folderFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"bb"</expr></argument>,
	                     <argument><expr><name>aliasFileFlag</name></expr></argument>,
	                     <argument><expr><name>folderFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_FSRefMakePath</name><parameter_list>(<param><decl><type><name>FSRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXPATHNAME</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>UInt8</name></type> <name><name>path</name><index>[<expr><name>MAXPATHNAME</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt32</name></type> <name>maxPathSize</name> <init>= <expr><name>MAXPATHNAME</name></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
	        <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSRefMakePath</name><argument_list>(<argument><expr>&amp;<name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                         <argument><expr><name>path</name></expr></argument>,
	                                         <argument><expr><name>maxPathSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"s"</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>

}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_as_pathname</name><parameter_list>(<param><decl><type><name>FSRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
	        <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>FSRef_FSRefMakePath</name><argument_list>(<argument><expr><name>_self</name></expr></argument>, <argument><expr><name>_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>

}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>FSRef_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"FSMakeFSRefUnicode"</expr>, <expr>(<name>PyCFunction</name>)<name>FSRef_FSMakeFSRefUnicode</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Buffer nameLength, TextEncoding textEncodingHint) -&gt; (FSRef newRef)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSCompareFSRefs"</expr>, <expr>(<name>PyCFunction</name>)<name>FSRef_FSCompareFSRefs</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSRef ref2) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSCreateFileUnicode"</expr>, <expr>(<name>PyCFunction</name>)<name>FSRef_FSCreateFileUnicode</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Buffer nameLength, FSCatalogInfoBitmap whichInfo, FSCatalogInfo catalogInfo) -&gt; (FSRef newRef, FSSpec newSpec)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSCreateDirectoryUnicode"</expr>, <expr>(<name>PyCFunction</name>)<name>FSRef_FSCreateDirectoryUnicode</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Buffer nameLength, FSCatalogInfoBitmap whichInfo, FSCatalogInfo catalogInfo) -&gt; (FSRef newRef, FSSpec newSpec, UInt32 newDirID)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSDeleteObject"</expr>, <expr>(<name>PyCFunction</name>)<name>FSRef_FSDeleteObject</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSMoveObject"</expr>, <expr>(<name>PyCFunction</name>)<name>FSRef_FSMoveObject</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSRef destDirectory) -&gt; (FSRef newRef)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSExchangeObjects"</expr>, <expr>(<name>PyCFunction</name>)<name>FSRef_FSExchangeObjects</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSRef destRef) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSRenameUnicode"</expr>, <expr>(<name>PyCFunction</name>)<name>FSRef_FSRenameUnicode</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Buffer nameLength, TextEncoding textEncodingHint) -&gt; (FSRef newRef)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSGetCatalogInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>FSRef_FSGetCatalogInfo</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSCatalogInfoBitmap whichInfo) -&gt; (FSCatalogInfo catalogInfo, HFSUniStr255 outName, FSSpec fsSpec, FSRef parentRef)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSSetCatalogInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>FSRef_FSSetCatalogInfo</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSCatalogInfoBitmap whichInfo, FSCatalogInfo catalogInfo) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSCreateFork"</expr>, <expr>(<name>PyCFunction</name>)<name>FSRef_FSCreateFork</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Buffer forkNameLength) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSDeleteFork"</expr>, <expr>(<name>PyCFunction</name>)<name>FSRef_FSDeleteFork</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Buffer forkNameLength) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSOpenFork"</expr>, <expr>(<name>PyCFunction</name>)<name>FSRef_FSOpenFork</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Buffer forkNameLength, SInt8 permissions) -&gt; (SInt16 forkRefNum)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FNNotify"</expr>, <expr>(<name>PyCFunction</name>)<name>FSRef_FNNotify</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FNMessage message, OptionBits flags) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSNewAliasMinimal"</expr>, <expr>(<name>PyCFunction</name>)<name>FSRef_FSNewAliasMinimal</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (AliasHandle inAlias)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSIsAliasFile"</expr>, <expr>(<name>PyCFunction</name>)<name>FSRef_FSIsAliasFile</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean aliasFileFlag, Boolean folderFlag)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSRefMakePath"</expr>, <expr>(<name>PyCFunction</name>)<name>FSRef_FSRefMakePath</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; string"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"as_pathname"</expr>, <expr>(<name>PyCFunction</name>)<name>FSRef_as_pathname</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; string"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_get_data</name><parameter_list>(<param><decl><type><name>FSRefObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)&amp;<name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSRef_set_data</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>FSRef_getsetlist</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"data"</expr>, <expr>(<name>getter</name>)<name>FSRef_get_data</name></expr>, <expr>(<name>setter</name>)<name>FSRef_set_data</name></expr>, <expr>"Raw data of the FSRef object"</expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSRef_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSRef_repr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSRef_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>FSRef_tp_init</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>rawdata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rawdatalen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kw</name><index>[]</index></name> <init>= <expr><block>{<expr>"itself"</expr>, <expr>"rawdata"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr><name>_kwds</name></expr></argument>, <argument><expr>"|Os#"</expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>, <argument><expr>&amp;<name>rawdata</name></expr></argument>, <argument><expr>&amp;<name>rawdatalen</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<return>return <expr>-1</expr>;</return></then></if>
	<if>if <condition>(<expr><name>v</name> &amp;&amp; <name>rawdata</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Only one of itself or rawdata may be specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>-1</expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr>!<name>v</name> &amp;&amp; !<name>rawdata</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"One of itself or rawdata must be specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>-1</expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr><name>rawdata</name></expr>)</condition><then>
	<block>{
		<if>if <condition>(<expr><name>rawdatalen</name> != <sizeof>sizeof<argument_list>(<argument><expr><name>FSRef</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"FSRef rawdata incorrect size"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>-1</expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;((<name>FSRefObject</name> *)<name>_self</name>)-&gt;<name>ob_itself</name></expr></argument>, <argument><expr><name>rawdata</name></expr></argument>, <argument><expr><name>rawdatalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>0</expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr><call><name>PyMac_GetFSRef</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>&amp;((<name>FSRefObject</name> *)<name>_self</name>)-&gt;<name>ob_itself</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
	<return>return <expr>-1</expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSRef_tp_alloc</name></cpp:macro> <cpp:value>PyType_GenericAlloc</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FSRef_tp_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>(<name>self</name> = <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;((<name>FSRefObject</name> *)<name>self</name>)-&gt;<name>ob_itself</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FSRef</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>self</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSRef_tp_free</name></cpp:macro> <cpp:value>PyObject_Del</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>FSRef_Type</name> <init>= <expr><block>{
	<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
	0</expr>, <comment type="block">/*ob_size*/</comment>
	<expr>"Carbon.File.FSRef"</expr>, <comment type="block">/*tp_name*/</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>FSRefObject</name></expr></argument>)</argument_list></sizeof></expr>, <comment type="block">/*tp_basicsize*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>) <name>FSRef_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_print*/</comment>
	<expr>(<name>getattrfunc</name>)0</expr>, <comment type="block">/*tp_getattr*/</comment>
	<expr>(<name>setattrfunc</name>)0</expr>, <comment type="block">/*tp_setattr*/</comment>
	<expr>(<name>cmpfunc</name>) <name>FSRef_compare</name></expr>, <comment type="block">/*tp_compare*/</comment>
	<expr>(<name>reprfunc</name>) <name>FSRef_repr</name></expr>, <comment type="block">/*tp_repr*/</comment>
	<expr>(<name>PyNumberMethods</name> *)0</expr>, <comment type="block">/* tp_as_number */</comment>
	<expr>(<name>PySequenceMethods</name> *)0</expr>, <comment type="block">/* tp_as_sequence */</comment>
	<expr>(<name>PyMappingMethods</name> *)0</expr>, <comment type="block">/* tp_as_mapping */</comment>
	<expr>(<name>hashfunc</name>) <name>FSRef_hash</name></expr>, <comment type="block">/*tp_hash*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_call*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_str*/</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>, <comment type="block">/*tp_getattro*/</comment>
	<expr><name>PyObject_GenericSetAttr</name></expr>, <comment type="block">/*tp_setattro */</comment>
	<expr>0</expr>, <comment type="block">/*tp_as_buffer*/</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/* tp_flags */</comment>
	<expr>0</expr>, <comment type="block">/*tp_doc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_traverse*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_clear*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_richcompare*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_weaklistoffset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iter*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iternext*/</comment>
	<expr><name>FSRef_methods</name></expr>, <comment type="block">/* tp_methods */</comment>
	<expr>0</expr>, <comment type="block">/*tp_members*/</comment>
	<expr><name>FSRef_getsetlist</name></expr>, <comment type="block">/*tp_getset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_base*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dict*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_get*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_set*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dictoffset*/</comment>
	<expr><name>FSRef_tp_init</name></expr>, <comment type="block">/* tp_init */</comment>
	<expr><name>FSRef_tp_alloc</name></expr>, <comment type="block">/* tp_alloc */</comment>
	<expr><name>FSRef_tp_new</name></expr>, <comment type="block">/* tp_new */</comment>
	<expr><name>FSRef_tp_free</name></expr>, <comment type="block">/* tp_free */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* --------------------- End object type FSRef ---------------------- */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_UnmountVol</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str63</name></type> <name>volName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>volName</name></expr></argument>,
	                      <argument><expr>&amp;<name>vRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>UnmountVol</name><argument_list>(<argument><expr><name>volName</name></expr></argument>,
	                  <argument><expr><name>vRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_FlushVol</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str63</name></type> <name>volName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>volName</name></expr></argument>,
	                      <argument><expr>&amp;<name>vRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FlushVol</name><argument_list>(<argument><expr><name>volName</name></expr></argument>,
	                <argument><expr><name>vRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_HSetVol</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str63</name></type> <name>volName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>dirID</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hl"</expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>volName</name></expr></argument>,
	                      <argument><expr>&amp;<name>vRefNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>dirID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>HSetVol</name><argument_list>(<argument><expr><name>volName</name></expr></argument>,
	               <argument><expr><name>vRefNum</name></expr></argument>,
	               <argument><expr><name>dirID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_FSClose</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>refNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>refNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSClose</name><argument_list>(<argument><expr><name>refNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_Allocate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>refNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>refNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>Allocate</name><argument_list>(<argument><expr><name>refNum</name></expr></argument>,
	                <argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_GetEOF</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>refNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>logEOF</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>refNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetEOF</name><argument_list>(<argument><expr><name>refNum</name></expr></argument>,
	              <argument><expr>&amp;<name>logEOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>logEOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_SetEOF</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>refNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>logEOF</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hl"</expr></argument>,
	                      <argument><expr>&amp;<name>refNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>logEOF</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetEOF</name><argument_list>(<argument><expr><name>refNum</name></expr></argument>,
	              <argument><expr><name>logEOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_GetFPos</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>refNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>filePos</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>refNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetFPos</name><argument_list>(<argument><expr><name>refNum</name></expr></argument>,
	               <argument><expr>&amp;<name>filePos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>filePos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_SetFPos</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>refNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>posMode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>posOff</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hhl"</expr></argument>,
	                      <argument><expr>&amp;<name>refNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>posMode</name></expr></argument>,
	                      <argument><expr>&amp;<name>posOff</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetFPos</name><argument_list>(<argument><expr><name>refNum</name></expr></argument>,
	               <argument><expr><name>posMode</name></expr></argument>,
	               <argument><expr><name>posOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_GetVRefNum</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>fileRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>fileRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetVRefNum</name><argument_list>(<argument><expr><name>fileRefNum</name></expr></argument>,
	                  <argument><expr>&amp;<name>vRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>vRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_HGetVol</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringPtr</name></type> <name>volName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>dirID</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr>&amp;<name>volName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>HGetVol</name><argument_list>(<argument><expr><name>volName</name></expr></argument>,
	               <argument><expr>&amp;<name>vRefNum</name></expr></argument>,
	               <argument><expr>&amp;<name>dirID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"hl"</expr></argument>,
	                     <argument><expr><name>vRefNum</name></expr></argument>,
	                     <argument><expr><name>dirID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_HOpen</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>dirID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>fileName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt8</name></type> <name>permission</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>refNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hlO&amp;b"</expr></argument>,
	                      <argument><expr>&amp;<name>vRefNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>dirID</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>,
	                      <argument><expr>&amp;<name>permission</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>HOpen</name><argument_list>(<argument><expr><name>vRefNum</name></expr></argument>,
	             <argument><expr><name>dirID</name></expr></argument>,
	             <argument><expr><name>fileName</name></expr></argument>,
	             <argument><expr><name>permission</name></expr></argument>,
	             <argument><expr>&amp;<name>refNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>refNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_HOpenDF</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>dirID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>fileName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt8</name></type> <name>permission</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>refNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hlO&amp;b"</expr></argument>,
	                      <argument><expr>&amp;<name>vRefNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>dirID</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>,
	                      <argument><expr>&amp;<name>permission</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>HOpenDF</name><argument_list>(<argument><expr><name>vRefNum</name></expr></argument>,
	               <argument><expr><name>dirID</name></expr></argument>,
	               <argument><expr><name>fileName</name></expr></argument>,
	               <argument><expr><name>permission</name></expr></argument>,
	               <argument><expr>&amp;<name>refNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>refNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_HOpenRF</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>dirID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>fileName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt8</name></type> <name>permission</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>refNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hlO&amp;b"</expr></argument>,
	                      <argument><expr>&amp;<name>vRefNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>dirID</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>,
	                      <argument><expr>&amp;<name>permission</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>HOpenRF</name><argument_list>(<argument><expr><name>vRefNum</name></expr></argument>,
	               <argument><expr><name>dirID</name></expr></argument>,
	               <argument><expr><name>fileName</name></expr></argument>,
	               <argument><expr><name>permission</name></expr></argument>,
	               <argument><expr>&amp;<name>refNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>refNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_AllocContig</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>refNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>refNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>AllocContig</name><argument_list>(<argument><expr><name>refNum</name></expr></argument>,
	                   <argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_HCreate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>dirID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>fileName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>creator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>fileType</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hlO&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>vRefNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>dirID</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>creator</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>fileType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>HCreate</name><argument_list>(<argument><expr><name>vRefNum</name></expr></argument>,
	               <argument><expr><name>dirID</name></expr></argument>,
	               <argument><expr><name>fileName</name></expr></argument>,
	               <argument><expr><name>creator</name></expr></argument>,
	               <argument><expr><name>fileType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_DirCreate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>parentDirID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>directoryName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>createdDirID</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hlO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>vRefNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>parentDirID</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>directoryName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>DirCreate</name><argument_list>(<argument><expr><name>vRefNum</name></expr></argument>,
	                 <argument><expr><name>parentDirID</name></expr></argument>,
	                 <argument><expr><name>directoryName</name></expr></argument>,
	                 <argument><expr>&amp;<name>createdDirID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>createdDirID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_HDelete</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>dirID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>fileName</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hlO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>vRefNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>dirID</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>HDelete</name><argument_list>(<argument><expr><name>vRefNum</name></expr></argument>,
	               <argument><expr><name>dirID</name></expr></argument>,
	               <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_HGetFInfo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>dirID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>fileName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FInfo</name></type> <name>fndrInfo</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hlO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>vRefNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>dirID</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>HGetFInfo</name><argument_list>(<argument><expr><name>vRefNum</name></expr></argument>,
	                 <argument><expr><name>dirID</name></expr></argument>,
	                 <argument><expr><name>fileName</name></expr></argument>,
	                 <argument><expr>&amp;<name>fndrInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>FInfo_New</name></expr></argument>, <argument><expr>&amp;<name>fndrInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_HSetFInfo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>dirID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>fileName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FInfo</name></type> <name>fndrInfo</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hlO&amp;O&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>vRefNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>dirID</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>,
	                      <argument><expr><name>FInfo_Convert</name></expr></argument>, <argument><expr>&amp;<name>fndrInfo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>HSetFInfo</name><argument_list>(<argument><expr><name>vRefNum</name></expr></argument>,
	                 <argument><expr><name>dirID</name></expr></argument>,
	                 <argument><expr><name>fileName</name></expr></argument>,
	                 <argument><expr>&amp;<name>fndrInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_HSetFLock</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>dirID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>fileName</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hlO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>vRefNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>dirID</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>HSetFLock</name><argument_list>(<argument><expr><name>vRefNum</name></expr></argument>,
	                 <argument><expr><name>dirID</name></expr></argument>,
	                 <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_HRstFLock</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>dirID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>fileName</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hlO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>vRefNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>dirID</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>HRstFLock</name><argument_list>(<argument><expr><name>vRefNum</name></expr></argument>,
	                 <argument><expr><name>dirID</name></expr></argument>,
	                 <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_HRename</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>dirID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>oldName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>newName</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hlO&amp;O&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>vRefNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>dirID</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>oldName</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>HRename</name><argument_list>(<argument><expr><name>vRefNum</name></expr></argument>,
	               <argument><expr><name>dirID</name></expr></argument>,
	               <argument><expr><name>oldName</name></expr></argument>,
	               <argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_CatMove</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>dirID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>oldName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>newDirID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>newName</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hlO&amp;lO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>vRefNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>dirID</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>oldName</name></expr></argument>,
	                      <argument><expr>&amp;<name>newDirID</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>CatMove</name><argument_list>(<argument><expr><name>vRefNum</name></expr></argument>,
	               <argument><expr><name>dirID</name></expr></argument>,
	               <argument><expr><name>oldName</name></expr></argument>,
	               <argument><expr><name>newDirID</name></expr></argument>,
	               <argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_FSMakeFSSpec</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>dirID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>fileName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>spec</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hlO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>vRefNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>dirID</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSMakeFSSpec</name><argument_list>(<argument><expr><name>vRefNum</name></expr></argument>,
	                    <argument><expr><name>dirID</name></expr></argument>,
	                    <argument><expr><name>fileName</name></expr></argument>,
	                    <argument><expr>&amp;<name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>FSSpec_New</name></expr></argument>, <argument><expr>&amp;<name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_FSGetForkPosition</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>forkRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt64</name></type> <name>position</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>forkRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSGetForkPosition</name><argument_list>(<argument><expr><name>forkRefNum</name></expr></argument>,
	                         <argument><expr>&amp;<name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"L"</expr></argument>,
	                     <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_FSSetForkPosition</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>forkRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt16</name></type> <name>positionMode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt64</name></type> <name>positionOffset</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hHL"</expr></argument>,
	                      <argument><expr>&amp;<name>forkRefNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>positionMode</name></expr></argument>,
	                      <argument><expr>&amp;<name>positionOffset</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSSetForkPosition</name><argument_list>(<argument><expr><name>forkRefNum</name></expr></argument>,
	                         <argument><expr><name>positionMode</name></expr></argument>,
	                         <argument><expr><name>positionOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_FSGetForkSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>forkRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt64</name></type> <name>forkSize</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>forkRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSGetForkSize</name><argument_list>(<argument><expr><name>forkRefNum</name></expr></argument>,
	                     <argument><expr>&amp;<name>forkSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"L"</expr></argument>,
	                     <argument><expr><name>forkSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_FSSetForkSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>forkRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt16</name></type> <name>positionMode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt64</name></type> <name>positionOffset</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hHL"</expr></argument>,
	                      <argument><expr>&amp;<name>forkRefNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>positionMode</name></expr></argument>,
	                      <argument><expr>&amp;<name>positionOffset</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSSetForkSize</name><argument_list>(<argument><expr><name>forkRefNum</name></expr></argument>,
	                     <argument><expr><name>positionMode</name></expr></argument>,
	                     <argument><expr><name>positionOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_FSAllocateFork</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>forkRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSAllocationFlags</name></type> <name>flags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt16</name></type> <name>positionMode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt64</name></type> <name>positionOffset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt64</name></type> <name>requestCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt64</name></type> <name>actualCount</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hHHLL"</expr></argument>,
	                      <argument><expr>&amp;<name>forkRefNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>flags</name></expr></argument>,
	                      <argument><expr>&amp;<name>positionMode</name></expr></argument>,
	                      <argument><expr>&amp;<name>positionOffset</name></expr></argument>,
	                      <argument><expr>&amp;<name>requestCount</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSAllocateFork</name><argument_list>(<argument><expr><name>forkRefNum</name></expr></argument>,
	                      <argument><expr><name>flags</name></expr></argument>,
	                      <argument><expr><name>positionMode</name></expr></argument>,
	                      <argument><expr><name>positionOffset</name></expr></argument>,
	                      <argument><expr><name>requestCount</name></expr></argument>,
	                      <argument><expr>&amp;<name>actualCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"L"</expr></argument>,
	                     <argument><expr><name>actualCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_FSFlushFork</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>forkRefNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>forkRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSFlushFork</name><argument_list>(<argument><expr><name>forkRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_FSCloseFork</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>forkRefNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>forkRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSCloseFork</name><argument_list>(<argument><expr><name>forkRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_FSGetDataForkName</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HFSUniStr255</name></type> <name>dataForkName</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSGetDataForkName</name><argument_list>(<argument><expr>&amp;<name>dataForkName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildHFSUniStr255</name></expr></argument>, <argument><expr>&amp;<name>dataForkName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_FSGetResourceForkName</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HFSUniStr255</name></type> <name>resourceForkName</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSGetResourceForkName</name><argument_list>(<argument><expr>&amp;<name>resourceForkName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildHFSUniStr255</name></expr></argument>, <argument><expr>&amp;<name>resourceForkName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_FSPathMakeRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt8</name> *</type> <name>path</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>ref</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>isDirectory</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"s"</expr></argument>,
	                      <argument><expr>&amp;<name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSPathMakeRef</name><argument_list>(<argument><expr><name>path</name></expr></argument>,
	                     <argument><expr>&amp;<name>ref</name></expr></argument>,
	                     <argument><expr>&amp;<name>isDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;b"</expr></argument>,
	                     <argument><expr><name>FSRef_New</name></expr></argument>, <argument><expr>&amp;<name>ref</name></expr></argument>,
	                     <argument><expr><name>isDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_FNNotifyByPath</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt8</name> *</type> <name>path</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FNMessage</name></type> <name>message</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OptionBits</name></type> <name>flags</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"sll"</expr></argument>,
	                      <argument><expr>&amp;<name>path</name></expr></argument>,
	                      <argument><expr>&amp;<name>message</name></expr></argument>,
	                      <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FNNotifyByPath</name><argument_list>(<argument><expr><name>path</name></expr></argument>,
	                      <argument><expr><name>message</name></expr></argument>,
	                      <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_FNNotifyAll</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FNMessage</name></type> <name>message</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OptionBits</name></type> <name>flags</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
	                      <argument><expr>&amp;<name>message</name></expr></argument>,
	                      <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FNNotifyAll</name><argument_list>(<argument><expr><name>message</name></expr></argument>,
	                   <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_NewAlias</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>fromFile__buf__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name> *</type><name>fromFile</name> <init>= <expr>&amp;<name>fromFile__buf__</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>target</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AliasHandle</name></type> <name>alias</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>myPyMac_GetOptFSSpecPtr</name></expr></argument>, <argument><expr>&amp;<name>fromFile</name></expr></argument>,
	                      <argument><expr><name>FSSpec_Convert</name></expr></argument>, <argument><expr>&amp;<name>target</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>NewAlias</name><argument_list>(<argument><expr><name>fromFile</name></expr></argument>,
	                <argument><expr>&amp;<name>target</name></expr></argument>,
	                <argument><expr>&amp;<name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>Alias_New</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_NewAliasMinimalFromFullPath</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>fullPath__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fullPath__len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fullPath__in_len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str32</name></type> <name>zoneName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str31</name></type> <name>serverName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AliasHandle</name></type> <name>alias</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"s#O&amp;O&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>fullPath__in__</name></expr></argument>, <argument><expr>&amp;<name>fullPath__in_len__</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>zoneName</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>serverName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>fullPath__len__</name> = <name>fullPath__in_len__</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_err</name> = <call><name>NewAliasMinimalFromFullPath</name><argument_list>(<argument><expr><name>fullPath__len__</name></expr></argument>, <argument><expr><name>fullPath__in__</name></expr></argument>,
	                                   <argument><expr><name>zoneName</name></expr></argument>,
	                                   <argument><expr><name>serverName</name></expr></argument>,
	                                   <argument><expr>&amp;<name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>Alias_New</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_ResolveAliasFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>theSpec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>resolveAliasChains</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>targetIsFolder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>wasAliased</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
	                      <argument><expr><name>FSSpec_Convert</name></expr></argument>, <argument><expr>&amp;<name>theSpec</name></expr></argument>,
	                      <argument><expr>&amp;<name>resolveAliasChains</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>ResolveAliasFile</name><argument_list>(<argument><expr>&amp;<name>theSpec</name></expr></argument>,
	                        <argument><expr><name>resolveAliasChains</name></expr></argument>,
	                        <argument><expr>&amp;<name>targetIsFolder</name></expr></argument>,
	                        <argument><expr>&amp;<name>wasAliased</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;bb"</expr></argument>,
	                     <argument><expr><name>FSSpec_New</name></expr></argument>, <argument><expr>&amp;<name>theSpec</name></expr></argument>,
	                     <argument><expr><name>targetIsFolder</name></expr></argument>,
	                     <argument><expr><name>wasAliased</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_ResolveAliasFileWithMountFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>theSpec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>resolveAliasChains</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>targetIsFolder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>wasAliased</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mountFlags</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;bl"</expr></argument>,
	                      <argument><expr><name>FSSpec_Convert</name></expr></argument>, <argument><expr>&amp;<name>theSpec</name></expr></argument>,
	                      <argument><expr>&amp;<name>resolveAliasChains</name></expr></argument>,
	                      <argument><expr>&amp;<name>mountFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>ResolveAliasFileWithMountFlags</name><argument_list>(<argument><expr>&amp;<name>theSpec</name></expr></argument>,
	                                      <argument><expr><name>resolveAliasChains</name></expr></argument>,
	                                      <argument><expr>&amp;<name>targetIsFolder</name></expr></argument>,
	                                      <argument><expr>&amp;<name>wasAliased</name></expr></argument>,
	                                      <argument><expr><name>mountFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;bb"</expr></argument>,
	                     <argument><expr><name>FSSpec_New</name></expr></argument>, <argument><expr>&amp;<name>theSpec</name></expr></argument>,
	                     <argument><expr><name>targetIsFolder</name></expr></argument>,
	                     <argument><expr><name>wasAliased</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_UpdateAlias</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>fromFile__buf__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name> *</type><name>fromFile</name> <init>= <expr>&amp;<name>fromFile__buf__</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>target</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AliasHandle</name></type> <name>alias</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>wasChanged</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>myPyMac_GetOptFSSpecPtr</name></expr></argument>, <argument><expr>&amp;<name>fromFile</name></expr></argument>,
	                      <argument><expr><name>FSSpec_Convert</name></expr></argument>, <argument><expr>&amp;<name>target</name></expr></argument>,
	                      <argument><expr><name>Alias_Convert</name></expr></argument>, <argument><expr>&amp;<name>alias</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>UpdateAlias</name><argument_list>(<argument><expr><name>fromFile</name></expr></argument>,
	                   <argument><expr>&amp;<name>target</name></expr></argument>,
	                   <argument><expr><name>alias</name></expr></argument>,
	                   <argument><expr>&amp;<name>wasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>wasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_ResolveAliasFileWithMountFlagsNoUI</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>theSpec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>resolveAliasChains</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>targetIsFolder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>wasAliased</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mountFlags</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;bl"</expr></argument>,
	                      <argument><expr><name>FSSpec_Convert</name></expr></argument>, <argument><expr>&amp;<name>theSpec</name></expr></argument>,
	                      <argument><expr>&amp;<name>resolveAliasChains</name></expr></argument>,
	                      <argument><expr>&amp;<name>mountFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>ResolveAliasFileWithMountFlagsNoUI</name><argument_list>(<argument><expr>&amp;<name>theSpec</name></expr></argument>,
	                                          <argument><expr><name>resolveAliasChains</name></expr></argument>,
	                                          <argument><expr>&amp;<name>targetIsFolder</name></expr></argument>,
	                                          <argument><expr>&amp;<name>wasAliased</name></expr></argument>,
	                                          <argument><expr><name>mountFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;bb"</expr></argument>,
	                     <argument><expr><name>FSSpec_New</name></expr></argument>, <argument><expr>&amp;<name>theSpec</name></expr></argument>,
	                     <argument><expr><name>targetIsFolder</name></expr></argument>,
	                     <argument><expr><name>wasAliased</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_FSNewAlias</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>fromFile__buf__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name> *</type><name>fromFile</name> <init>= <expr>&amp;<name>fromFile__buf__</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>target</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AliasHandle</name></type> <name>inAlias</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>myPyMac_GetOptFSRefPtr</name></expr></argument>, <argument><expr>&amp;<name>fromFile</name></expr></argument>,
	                      <argument><expr><name>FSRef_Convert</name></expr></argument>, <argument><expr>&amp;<name>target</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSNewAlias</name><argument_list>(<argument><expr><name>fromFile</name></expr></argument>,
	                  <argument><expr>&amp;<name>target</name></expr></argument>,
	                  <argument><expr>&amp;<name>inAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>Alias_New</name></expr></argument>, <argument><expr><name>inAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_FSResolveAliasFileWithMountFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>theRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>resolveAliasChains</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>targetIsFolder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>wasAliased</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mountFlags</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;bl"</expr></argument>,
	                      <argument><expr><name>FSRef_Convert</name></expr></argument>, <argument><expr>&amp;<name>theRef</name></expr></argument>,
	                      <argument><expr>&amp;<name>resolveAliasChains</name></expr></argument>,
	                      <argument><expr>&amp;<name>mountFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSResolveAliasFileWithMountFlags</name><argument_list>(<argument><expr>&amp;<name>theRef</name></expr></argument>,
	                                        <argument><expr><name>resolveAliasChains</name></expr></argument>,
	                                        <argument><expr>&amp;<name>targetIsFolder</name></expr></argument>,
	                                        <argument><expr>&amp;<name>wasAliased</name></expr></argument>,
	                                        <argument><expr><name>mountFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;bb"</expr></argument>,
	                     <argument><expr><name>FSRef_New</name></expr></argument>, <argument><expr>&amp;<name>theRef</name></expr></argument>,
	                     <argument><expr><name>targetIsFolder</name></expr></argument>,
	                     <argument><expr><name>wasAliased</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_FSResolveAliasFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>theRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>resolveAliasChains</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>targetIsFolder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>wasAliased</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
	                      <argument><expr><name>FSRef_Convert</name></expr></argument>, <argument><expr>&amp;<name>theRef</name></expr></argument>,
	                      <argument><expr>&amp;<name>resolveAliasChains</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSResolveAliasFile</name><argument_list>(<argument><expr>&amp;<name>theRef</name></expr></argument>,
	                          <argument><expr><name>resolveAliasChains</name></expr></argument>,
	                          <argument><expr>&amp;<name>targetIsFolder</name></expr></argument>,
	                          <argument><expr>&amp;<name>wasAliased</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;bb"</expr></argument>,
	                     <argument><expr><name>FSRef_New</name></expr></argument>, <argument><expr>&amp;<name>theRef</name></expr></argument>,
	                     <argument><expr><name>targetIsFolder</name></expr></argument>,
	                     <argument><expr><name>wasAliased</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_FSUpdateAlias</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>fromFile__buf__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name> *</type><name>fromFile</name> <init>= <expr>&amp;<name>fromFile__buf__</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>target</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AliasHandle</name></type> <name>alias</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>wasChanged</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>myPyMac_GetOptFSRefPtr</name></expr></argument>, <argument><expr>&amp;<name>fromFile</name></expr></argument>,
	                      <argument><expr><name>FSRef_Convert</name></expr></argument>, <argument><expr>&amp;<name>target</name></expr></argument>,
	                      <argument><expr><name>Alias_Convert</name></expr></argument>, <argument><expr>&amp;<name>alias</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FSUpdateAlias</name><argument_list>(<argument><expr><name>fromFile</name></expr></argument>,
	                     <argument><expr>&amp;<name>target</name></expr></argument>,
	                     <argument><expr><name>alias</name></expr></argument>,
	                     <argument><expr>&amp;<name>wasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>wasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>File_pathname</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>PyObject</name> *</type><name>obj</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr>&amp;<name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	        <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <return>return <expr><name>obj</name></expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	        <return>return <expr><call><name>PyUnicode_AsEncodedString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"utf8"</expr></argument>, <argument><expr>"strict"</expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"as_pathname"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>

}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>File_methods</name><index>[]</index></name> <init>= <expr><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<expr><block>{<expr>"UnmountVol"</expr>, <expr>(<name>PyCFunction</name>)<name>File_UnmountVol</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Str63 volName, short vRefNum) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FlushVol"</expr>, <expr>(<name>PyCFunction</name>)<name>File_FlushVol</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Str63 volName, short vRefNum) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"HSetVol"</expr>, <expr>(<name>PyCFunction</name>)<name>File_HSetVol</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Str63 volName, short vRefNum, long dirID) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSClose"</expr>, <expr>(<name>PyCFunction</name>)<name>File_FSClose</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short refNum) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"Allocate"</expr>, <expr>(<name>PyCFunction</name>)<name>File_Allocate</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short refNum) -&gt; (long count)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetEOF"</expr>, <expr>(<name>PyCFunction</name>)<name>File_GetEOF</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short refNum) -&gt; (long logEOF)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetEOF"</expr>, <expr>(<name>PyCFunction</name>)<name>File_SetEOF</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short refNum, long logEOF) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetFPos"</expr>, <expr>(<name>PyCFunction</name>)<name>File_GetFPos</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short refNum) -&gt; (long filePos)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetFPos"</expr>, <expr>(<name>PyCFunction</name>)<name>File_SetFPos</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short refNum, short posMode, long posOff) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetVRefNum"</expr>, <expr>(<name>PyCFunction</name>)<name>File_GetVRefNum</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short fileRefNum) -&gt; (short vRefNum)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"HGetVol"</expr>, <expr>(<name>PyCFunction</name>)<name>File_HGetVol</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(StringPtr volName) -&gt; (short vRefNum, long dirID)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"HOpen"</expr>, <expr>(<name>PyCFunction</name>)<name>File_HOpen</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short vRefNum, long dirID, Str255 fileName, SInt8 permission) -&gt; (short refNum)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"HOpenDF"</expr>, <expr>(<name>PyCFunction</name>)<name>File_HOpenDF</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short vRefNum, long dirID, Str255 fileName, SInt8 permission) -&gt; (short refNum)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"HOpenRF"</expr>, <expr>(<name>PyCFunction</name>)<name>File_HOpenRF</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short vRefNum, long dirID, Str255 fileName, SInt8 permission) -&gt; (short refNum)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"AllocContig"</expr>, <expr>(<name>PyCFunction</name>)<name>File_AllocContig</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short refNum) -&gt; (long count)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"HCreate"</expr>, <expr>(<name>PyCFunction</name>)<name>File_HCreate</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short vRefNum, long dirID, Str255 fileName, OSType creator, OSType fileType) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DirCreate"</expr>, <expr>(<name>PyCFunction</name>)<name>File_DirCreate</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short vRefNum, long parentDirID, Str255 directoryName) -&gt; (long createdDirID)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"HDelete"</expr>, <expr>(<name>PyCFunction</name>)<name>File_HDelete</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short vRefNum, long dirID, Str255 fileName) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"HGetFInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>File_HGetFInfo</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short vRefNum, long dirID, Str255 fileName) -&gt; (FInfo fndrInfo)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"HSetFInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>File_HSetFInfo</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short vRefNum, long dirID, Str255 fileName, FInfo fndrInfo) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"HSetFLock"</expr>, <expr>(<name>PyCFunction</name>)<name>File_HSetFLock</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short vRefNum, long dirID, Str255 fileName) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"HRstFLock"</expr>, <expr>(<name>PyCFunction</name>)<name>File_HRstFLock</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short vRefNum, long dirID, Str255 fileName) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"HRename"</expr>, <expr>(<name>PyCFunction</name>)<name>File_HRename</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short vRefNum, long dirID, Str255 oldName, Str255 newName) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CatMove"</expr>, <expr>(<name>PyCFunction</name>)<name>File_CatMove</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short vRefNum, long dirID, Str255 oldName, long newDirID, Str255 newName) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSMakeFSSpec"</expr>, <expr>(<name>PyCFunction</name>)<name>File_FSMakeFSSpec</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short vRefNum, long dirID, Str255 fileName) -&gt; (FSSpec spec)"</argument>)</argument_list></macro>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__*/</comment>
	<expr><block>{<expr>"FSGetForkPosition"</expr>, <expr>(<name>PyCFunction</name>)<name>File_FSGetForkPosition</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 forkRefNum) -&gt; (SInt64 position)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSSetForkPosition"</expr>, <expr>(<name>PyCFunction</name>)<name>File_FSSetForkPosition</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 forkRefNum, UInt16 positionMode, SInt64 positionOffset) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSGetForkSize"</expr>, <expr>(<name>PyCFunction</name>)<name>File_FSGetForkSize</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 forkRefNum) -&gt; (SInt64 forkSize)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSSetForkSize"</expr>, <expr>(<name>PyCFunction</name>)<name>File_FSSetForkSize</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 forkRefNum, UInt16 positionMode, SInt64 positionOffset) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSAllocateFork"</expr>, <expr>(<name>PyCFunction</name>)<name>File_FSAllocateFork</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 forkRefNum, FSAllocationFlags flags, UInt16 positionMode, SInt64 positionOffset, UInt64 requestCount) -&gt; (UInt64 actualCount)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSFlushFork"</expr>, <expr>(<name>PyCFunction</name>)<name>File_FSFlushFork</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 forkRefNum) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSCloseFork"</expr>, <expr>(<name>PyCFunction</name>)<name>File_FSCloseFork</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 forkRefNum) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSGetDataForkName"</expr>, <expr>(<name>PyCFunction</name>)<name>File_FSGetDataForkName</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (HFSUniStr255 dataForkName)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSGetResourceForkName"</expr>, <expr>(<name>PyCFunction</name>)<name>File_FSGetResourceForkName</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (HFSUniStr255 resourceForkName)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSPathMakeRef"</expr>, <expr>(<name>PyCFunction</name>)<name>File_FSPathMakeRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(UInt8 * path) -&gt; (FSRef ref, Boolean isDirectory)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FNNotifyByPath"</expr>, <expr>(<name>PyCFunction</name>)<name>File_FNNotifyByPath</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(UInt8 * path, FNMessage message, OptionBits flags) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FNNotifyAll"</expr>, <expr>(<name>PyCFunction</name>)<name>File_FNNotifyAll</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FNMessage message, OptionBits flags) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive>  <name>__LP64__</name></cpp:ifndef>
	<expr><block>{<expr>"NewAlias"</expr>, <expr>(<name>PyCFunction</name>)<name>File_NewAlias</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSSpec fromFile, FSSpec target) -&gt; (AliasHandle alias)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"NewAliasMinimalFromFullPath"</expr>, <expr>(<name>PyCFunction</name>)<name>File_NewAliasMinimalFromFullPath</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Buffer fullPath, Str32 zoneName, Str31 serverName) -&gt; (AliasHandle alias)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ResolveAliasFile"</expr>, <expr>(<name>PyCFunction</name>)<name>File_ResolveAliasFile</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSSpec theSpec, Boolean resolveAliasChains) -&gt; (FSSpec theSpec, Boolean targetIsFolder, Boolean wasAliased)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ResolveAliasFileWithMountFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>File_ResolveAliasFileWithMountFlags</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSSpec theSpec, Boolean resolveAliasChains, unsigned long mountFlags) -&gt; (FSSpec theSpec, Boolean targetIsFolder, Boolean wasAliased)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"UpdateAlias"</expr>, <expr>(<name>PyCFunction</name>)<name>File_UpdateAlias</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSSpec fromFile, FSSpec target, AliasHandle alias) -&gt; (Boolean wasChanged)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ResolveAliasFileWithMountFlagsNoUI"</expr>, <expr>(<name>PyCFunction</name>)<name>File_ResolveAliasFileWithMountFlagsNoUI</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSSpec theSpec, Boolean resolveAliasChains, unsigned long mountFlags) -&gt; (FSSpec theSpec, Boolean targetIsFolder, Boolean wasAliased)"</argument>)</argument_list></macro>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>
	<expr><block>{<expr>"FSNewAlias"</expr>, <expr>(<name>PyCFunction</name>)<name>File_FSNewAlias</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSRef fromFile, FSRef target) -&gt; (AliasHandle inAlias)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSResolveAliasFileWithMountFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>File_FSResolveAliasFileWithMountFlags</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSRef theRef, Boolean resolveAliasChains, unsigned long mountFlags) -&gt; (FSRef theRef, Boolean targetIsFolder, Boolean wasAliased)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSResolveAliasFile"</expr>, <expr>(<name>PyCFunction</name>)<name>File_FSResolveAliasFile</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSRef theRef, Boolean resolveAliasChains) -&gt; (FSRef theRef, Boolean targetIsFolder, Boolean wasAliased)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FSUpdateAlias"</expr>, <expr>(<name>PyCFunction</name>)<name>File_FSUpdateAlias</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSRef fromFile, FSRef target, AliasHandle alias) -&gt; (Boolean wasChanged)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"pathname"</expr>, <expr>(<name>PyCFunction</name>)<name>File_pathname</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(str|unicode|FSSpec|FSref) -&gt; pathname"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function><type><name>int</name></type>
<name>PyMac_GetFSSpec</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>FSSpec</name> *</type><name>spec</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>Str255</name></type> <name>path</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>short</name></type> <name>refnum</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>parid</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FSRef</name></type> <name>fsr</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>FSSpec_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>spec</name> = ((<name>FSSpecObject</name> *)<name>v</name>)-&gt;<name>ob_itself</name></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"(hlO&amp;)"</expr></argument>,
                                                <argument><expr>&amp;<name>refnum</name></expr></argument>, <argument><expr>&amp;<name>parid</name></expr></argument>, <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>err</name> = <call><name>FSMakeFSSpec</name><argument_list>(<argument><expr><name>refnum</name></expr></argument>, <argument><expr><name>parid</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>( <expr><name>err</name> &amp;&amp; <name>err</name> != <name>fnfErr</name></expr> )</condition><then> <block>{
                        <expr_stmt><expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>0</expr>;</return>
                }</block></then></if>
                <return>return <expr>1</expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Otherwise we try to go via an FSRef. On OSX we go all the way,
        ** on OS9 we accept only a real FSRef object
        */</comment>
        <if>if <condition>( <expr><call><name>PyMac_GetFSRef</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>&amp;<name>fsr</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
                <expr_stmt><expr><name>err</name> = <call><name>FSGetCatalogInfo</name><argument_list>(<argument><expr>&amp;<name>fsr</name></expr></argument>, <argument><expr><name>kFSCatInfoNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>err</name> != <name>noErr</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>0</expr>;</return>
                }</block></then></if>
                <return>return <expr>1</expr>;</return>
        }</block></then></if>
        <return>return <expr>0</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

<function><type><name>int</name></type>
<name>PyMac_GetFSRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>FSRef</name> *</type><name>fsr</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
        <decl_stmt><decl><type><name>FSSpec</name></type> <name>fss</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

        <if>if <condition>(<expr><call><name>FSRef_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>fsr</name> = ((<name>FSRefObject</name> *)<name>v</name>)-&gt;<name>ob_itself</name></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
        }</block></then></if>

        <comment type="block">/* On OSX we now try a pathname */</comment>
        <if>if <condition>( <expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> || <call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>char</name> *</type><name>path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"et"</expr></argument>, <argument><expr><name>Py_FileSystemDefaultEncoding</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <return>return <expr>0</expr>;</return></then></if>
                <if>if <condition>( <expr>(<name>err</name>=<call><name>FSPathMakeRef</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>char</name>*)<name>path</name></expr></argument>, <argument><expr><name>fsr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr> )</condition><then>
                        <expr_stmt><expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>!<name>err</name></expr>;</return>
        }</block></then></if>
        <comment type="block">/* XXXX Should try unicode here too */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
        <comment type="block">/* Otherwise we try to go via an FSSpec */</comment>
        <if>if <condition>(<expr><call><name>FSSpec_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>fss</name> = ((<name>FSSpecObject</name> *)<name>v</name>)-&gt;<name>ob_itself</name></expr>;</expr_stmt>
                <if>if <condition>(<expr>(<name>err</name>=<call><name>FSpMakeFSRef</name><argument_list>(<argument><expr>&amp;<name>fss</name></expr></argument>, <argument><expr><name>fsr</name></expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
                        <return>return <expr>1</expr>;</return></then></if>
                <expr_stmt><expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"FSRef, FSSpec or pathname required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function><type><specifier>extern</specifier> <name>PyObject</name> *</type>
<name>PyMac_BuildFSSpec</name><parameter_list>(<param><decl><type><name>FSSpec</name> *</type><name>spec</name></decl></param>)</parameter_list>
<block>{
        <return>return <expr><call><name>FSSpec_New</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

<function><type><specifier>extern</specifier> <name>PyObject</name> *</type>
<name>PyMac_BuildFSRef</name><parameter_list>(<param><decl><type><name>FSRef</name> *</type><name>spec</name></decl></param>)</parameter_list>
<block>{
        <return>return <expr><call><name>FSRef_New</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>void</name></type> <name>init_File</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_NEW</name><argument_list>(<argument><expr><name>FSSpec</name> *</expr></argument>, <argument><expr><name>PyMac_BuildFSSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_CONVERT</name><argument_list>(<argument><expr><name>FSSpec</name></expr></argument>, <argument><expr><name>PyMac_GetFSSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

	<expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_NEW</name><argument_list>(<argument><expr><name>FSRef</name> *</expr></argument>, <argument><expr><name>PyMac_BuildFSRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_CONVERT</name><argument_list>(<argument><expr><name>FSRef</name></expr></argument>, <argument><expr><name>PyMac_GetFSRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_File"</expr></argument>, <argument><expr><name>File_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>File_Error</name> = <call><name>PyMac_GetOSErrException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>File_Error</name> == <name>NULL</name> ||
	    <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Error"</expr></argument>, <argument><expr><name>File_Error</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><name><name>FSCatalogInfo_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>FSCatalogInfo_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>FSCatalogInfo_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"FSCatalogInfo"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>FSCatalogInfo_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Backward-compatible name */</comment>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>FSCatalogInfo_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"FSCatalogInfoType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>FSCatalogInfo_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<expr_stmt><expr><name><name>FInfo_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>FInfo_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>FInfo_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"FInfo"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>FInfo_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Backward-compatible name */</comment>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>FInfo_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"FInfoType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>FInfo_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>
	<expr_stmt><expr><name><name>Alias_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>Alias_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>Alias_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"Alias"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>Alias_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Backward-compatible name */</comment>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>Alias_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"AliasType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>Alias_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<expr_stmt><expr><name><name>FSSpec_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>FSSpec_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>FSSpec_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"FSSpec"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>FSSpec_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Backward-compatible name */</comment>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>FSSpec_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"FSSpecType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>FSSpec_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>
	<expr_stmt><expr><name><name>FSRef_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>FSRef_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>FSRef_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"FSRef"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>FSRef_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Backward-compatible name */</comment>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>FSRef_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"FSRefType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>FSRef_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* ======================== End module _File ======================== */</comment>

</unit>
