<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Mac/Modules/icn/_Icnmodule.c">
<comment type="block">/* ========================== Module _Icn =========================== */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pymactoolbox.h"</cpp:file></cpp:include>

<comment type="block">/* Macro to test whether a weak-loaded CFM function exists */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMac_PRECHECK</name><parameter_list>(<param><type><name>rtn</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { if ( &amp;rtn == NULL )  {\
        PyErr_SetString(PyExc_NotImplementedError, \
        "Not available in this shared library/OS version"); \
        return NULL; \
    }} while(0)</cpp:value></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Carbon/Carbon.h&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_Error</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_GetCIcon</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CIconHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>iconID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetCIcon</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetCIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>iconID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetCIcon</name><argument_list>(<argument><expr><name>iconID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_PlotCIcon</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>theRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CIconHandle</name></type> <name>theIcon</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PlotCIcon</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PlotCIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>theRect</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIcon</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>PlotCIcon</name><argument_list>(<argument><expr>&amp;<name>theRect</name></expr></argument>,
	          <argument><expr><name>theIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_DisposeCIcon</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CIconHandle</name></type> <name>theIcon</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DisposeCIcon</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DisposeCIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIcon</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DisposeCIcon</name><argument_list>(<argument><expr><name>theIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_GetIcon</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>iconID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetIcon</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>iconID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetIcon</name><argument_list>(<argument><expr><name>iconID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_PlotIcon</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>theRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>theIcon</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PlotIcon</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PlotIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>theRect</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIcon</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>PlotIcon</name><argument_list>(<argument><expr>&amp;<name>theRect</name></expr></argument>,
	         <argument><expr><name>theIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_PlotIconID</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>theRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconAlignmentType</name></type> <name>align</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconTransformType</name></type> <name>transform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>theResID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PlotIconID</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PlotIconID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hhh"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>theRect</name></expr></argument>,
	                      <argument><expr>&amp;<name>align</name></expr></argument>,
	                      <argument><expr>&amp;<name>transform</name></expr></argument>,
	                      <argument><expr>&amp;<name>theResID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>PlotIconID</name><argument_list>(<argument><expr>&amp;<name>theRect</name></expr></argument>,
	                  <argument><expr><name>align</name></expr></argument>,
	                  <argument><expr><name>transform</name></expr></argument>,
	                  <argument><expr><name>theResID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_NewIconSuite</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconSuiteRef</name></type> <name>theIconSuite</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NewIconSuite</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewIconSuite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>NewIconSuite</name><argument_list>(<argument><expr>&amp;<name>theIconSuite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>theIconSuite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_AddIconToSuite</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>theIconData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconSuiteRef</name></type> <name>theSuite</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ResType</name></type> <name>theType</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AddIconToSuite</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AddIconToSuite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIconData</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theSuite</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>theType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>AddIconToSuite</name><argument_list>(<argument><expr><name>theIconData</name></expr></argument>,
	                      <argument><expr><name>theSuite</name></expr></argument>,
	                      <argument><expr><name>theType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_GetIconFromSuite</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>theIconData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconSuiteRef</name></type> <name>theSuite</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ResType</name></type> <name>theType</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetIconFromSuite</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetIconFromSuite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theSuite</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>theType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetIconFromSuite</name><argument_list>(<argument><expr>&amp;<name>theIconData</name></expr></argument>,
	                        <argument><expr><name>theSuite</name></expr></argument>,
	                        <argument><expr><name>theType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>theIconData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_GetIconSuite</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconSuiteRef</name></type> <name>theIconSuite</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>theResID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconSelectorValue</name></type> <name>selector</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetIconSuite</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetIconSuite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hl"</expr></argument>,
	                      <argument><expr>&amp;<name>theResID</name></expr></argument>,
	                      <argument><expr>&amp;<name>selector</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetIconSuite</name><argument_list>(<argument><expr>&amp;<name>theIconSuite</name></expr></argument>,
	                    <argument><expr><name>theResID</name></expr></argument>,
	                    <argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>theIconSuite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_DisposeIconSuite</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconSuiteRef</name></type> <name>theIconSuite</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>disposeData</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DisposeIconSuite</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DisposeIconSuite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIconSuite</name></expr></argument>,
	                      <argument><expr>&amp;<name>disposeData</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>DisposeIconSuite</name><argument_list>(<argument><expr><name>theIconSuite</name></expr></argument>,
	                        <argument><expr><name>disposeData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_PlotIconSuite</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>theRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconAlignmentType</name></type> <name>align</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconTransformType</name></type> <name>transform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconSuiteRef</name></type> <name>theIconSuite</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PlotIconSuite</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PlotIconSuite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hhO&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>theRect</name></expr></argument>,
	                      <argument><expr>&amp;<name>align</name></expr></argument>,
	                      <argument><expr>&amp;<name>transform</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIconSuite</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>PlotIconSuite</name><argument_list>(<argument><expr>&amp;<name>theRect</name></expr></argument>,
	                     <argument><expr><name>align</name></expr></argument>,
	                     <argument><expr><name>transform</name></expr></argument>,
	                     <argument><expr><name>theIconSuite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_LoadIconCache</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>theRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconAlignmentType</name></type> <name>align</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconTransformType</name></type> <name>transform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconCacheRef</name></type> <name>theIconCache</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LoadIconCache</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LoadIconCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hhO&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>theRect</name></expr></argument>,
	                      <argument><expr>&amp;<name>align</name></expr></argument>,
	                      <argument><expr>&amp;<name>transform</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIconCache</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>LoadIconCache</name><argument_list>(<argument><expr>&amp;<name>theRect</name></expr></argument>,
	                     <argument><expr><name>align</name></expr></argument>,
	                     <argument><expr><name>transform</name></expr></argument>,
	                     <argument><expr><name>theIconCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_GetLabel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>labelNumber</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>labelColor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>labelString</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetLabel</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>labelNumber</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>labelString</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetLabel</name><argument_list>(<argument><expr><name>labelNumber</name></expr></argument>,
	                <argument><expr>&amp;<name>labelColor</name></expr></argument>,
	                <argument><expr><name>labelString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>labelColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_PtInIconID</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>testPt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>iconRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconAlignmentType</name></type> <name>align</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>iconID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PtInIconID</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PtInIconID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;hh"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>testPt</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>iconRect</name></expr></argument>,
	                      <argument><expr>&amp;<name>align</name></expr></argument>,
	                      <argument><expr>&amp;<name>iconID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>PtInIconID</name><argument_list>(<argument><expr><name>testPt</name></expr></argument>,
	                 <argument><expr>&amp;<name>iconRect</name></expr></argument>,
	                 <argument><expr><name>align</name></expr></argument>,
	                 <argument><expr><name>iconID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_PtInIconSuite</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>testPt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>iconRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconAlignmentType</name></type> <name>align</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconSuiteRef</name></type> <name>theIconSuite</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PtInIconSuite</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PtInIconSuite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;hO&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>testPt</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>iconRect</name></expr></argument>,
	                      <argument><expr>&amp;<name>align</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIconSuite</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>PtInIconSuite</name><argument_list>(<argument><expr><name>testPt</name></expr></argument>,
	                    <argument><expr>&amp;<name>iconRect</name></expr></argument>,
	                    <argument><expr><name>align</name></expr></argument>,
	                    <argument><expr><name>theIconSuite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_RectInIconID</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>testRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>iconRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconAlignmentType</name></type> <name>align</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>iconID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RectInIconID</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RectInIconID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;hh"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>testRect</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>iconRect</name></expr></argument>,
	                      <argument><expr>&amp;<name>align</name></expr></argument>,
	                      <argument><expr>&amp;<name>iconID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>RectInIconID</name><argument_list>(<argument><expr>&amp;<name>testRect</name></expr></argument>,
	                   <argument><expr>&amp;<name>iconRect</name></expr></argument>,
	                   <argument><expr><name>align</name></expr></argument>,
	                   <argument><expr><name>iconID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_RectInIconSuite</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>testRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>iconRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconAlignmentType</name></type> <name>align</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconSuiteRef</name></type> <name>theIconSuite</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RectInIconSuite</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RectInIconSuite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;hO&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>testRect</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>iconRect</name></expr></argument>,
	                      <argument><expr>&amp;<name>align</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIconSuite</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>RectInIconSuite</name><argument_list>(<argument><expr>&amp;<name>testRect</name></expr></argument>,
	                      <argument><expr>&amp;<name>iconRect</name></expr></argument>,
	                      <argument><expr><name>align</name></expr></argument>,
	                      <argument><expr><name>theIconSuite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_IconIDToRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>theRgn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>iconRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconAlignmentType</name></type> <name>align</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>iconID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IconIDToRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IconIDToRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;hh"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theRgn</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>iconRect</name></expr></argument>,
	                      <argument><expr>&amp;<name>align</name></expr></argument>,
	                      <argument><expr>&amp;<name>iconID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>IconIDToRgn</name><argument_list>(<argument><expr><name>theRgn</name></expr></argument>,
	                   <argument><expr>&amp;<name>iconRect</name></expr></argument>,
	                   <argument><expr><name>align</name></expr></argument>,
	                   <argument><expr><name>iconID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_IconSuiteToRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>theRgn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>iconRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconAlignmentType</name></type> <name>align</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconSuiteRef</name></type> <name>theIconSuite</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IconSuiteToRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IconSuiteToRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;hO&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theRgn</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>iconRect</name></expr></argument>,
	                      <argument><expr>&amp;<name>align</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIconSuite</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>IconSuiteToRgn</name><argument_list>(<argument><expr><name>theRgn</name></expr></argument>,
	                      <argument><expr>&amp;<name>iconRect</name></expr></argument>,
	                      <argument><expr><name>align</name></expr></argument>,
	                      <argument><expr><name>theIconSuite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_SetSuiteLabel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconSuiteRef</name></type> <name>theSuite</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>theLabel</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetSuiteLabel</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetSuiteLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theSuite</name></expr></argument>,
	                      <argument><expr>&amp;<name>theLabel</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetSuiteLabel</name><argument_list>(<argument><expr><name>theSuite</name></expr></argument>,
	                     <argument><expr><name>theLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_GetSuiteLabel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconSuiteRef</name></type> <name>theSuite</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetSuiteLabel</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetSuiteLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theSuite</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetSuiteLabel</name><argument_list>(<argument><expr><name>theSuite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_PlotIconHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>theRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconAlignmentType</name></type> <name>align</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconTransformType</name></type> <name>transform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>theIcon</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PlotIconHandle</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PlotIconHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hhO&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>theRect</name></expr></argument>,
	                      <argument><expr>&amp;<name>align</name></expr></argument>,
	                      <argument><expr>&amp;<name>transform</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIcon</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>PlotIconHandle</name><argument_list>(<argument><expr>&amp;<name>theRect</name></expr></argument>,
	                      <argument><expr><name>align</name></expr></argument>,
	                      <argument><expr><name>transform</name></expr></argument>,
	                      <argument><expr><name>theIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_PlotSICNHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>theRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconAlignmentType</name></type> <name>align</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconTransformType</name></type> <name>transform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>theSICN</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PlotSICNHandle</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PlotSICNHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hhO&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>theRect</name></expr></argument>,
	                      <argument><expr>&amp;<name>align</name></expr></argument>,
	                      <argument><expr>&amp;<name>transform</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theSICN</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>PlotSICNHandle</name><argument_list>(<argument><expr>&amp;<name>theRect</name></expr></argument>,
	                      <argument><expr><name>align</name></expr></argument>,
	                      <argument><expr><name>transform</name></expr></argument>,
	                      <argument><expr><name>theSICN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_PlotCIconHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>theRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconAlignmentType</name></type> <name>align</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconTransformType</name></type> <name>transform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CIconHandle</name></type> <name>theCIcon</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PlotCIconHandle</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PlotCIconHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hhO&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>theRect</name></expr></argument>,
	                      <argument><expr>&amp;<name>align</name></expr></argument>,
	                      <argument><expr>&amp;<name>transform</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theCIcon</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>PlotCIconHandle</name><argument_list>(<argument><expr>&amp;<name>theRect</name></expr></argument>,
	                       <argument><expr><name>align</name></expr></argument>,
	                       <argument><expr><name>transform</name></expr></argument>,
	                       <argument><expr><name>theCIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_IconRefToIconFamily</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>theIconRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconSelectorValue</name></type> <name>whichIcons</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconFamilyHandle</name></type> <name>iconFamily</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IconRefToIconFamily</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IconRefToIconFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIconRef</name></expr></argument>,
	                      <argument><expr>&amp;<name>whichIcons</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>IconRefToIconFamily</name><argument_list>(<argument><expr><name>theIconRef</name></expr></argument>,
	                           <argument><expr><name>whichIcons</name></expr></argument>,
	                           <argument><expr>&amp;<name>iconFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>iconFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_IconFamilyToIconSuite</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconFamilyHandle</name></type> <name>iconFamily</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconSelectorValue</name></type> <name>whichIcons</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconSuiteRef</name></type> <name>iconSuite</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IconFamilyToIconSuite</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IconFamilyToIconSuite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>iconFamily</name></expr></argument>,
	                      <argument><expr>&amp;<name>whichIcons</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>IconFamilyToIconSuite</name><argument_list>(<argument><expr><name>iconFamily</name></expr></argument>,
	                             <argument><expr><name>whichIcons</name></expr></argument>,
	                             <argument><expr>&amp;<name>iconSuite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>iconSuite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_IconSuiteToIconFamily</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconSuiteRef</name></type> <name>iconSuite</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconSelectorValue</name></type> <name>whichIcons</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconFamilyHandle</name></type> <name>iconFamily</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IconSuiteToIconFamily</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IconSuiteToIconFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>iconSuite</name></expr></argument>,
	                      <argument><expr>&amp;<name>whichIcons</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>IconSuiteToIconFamily</name><argument_list>(<argument><expr><name>iconSuite</name></expr></argument>,
	                             <argument><expr><name>whichIcons</name></expr></argument>,
	                             <argument><expr>&amp;<name>iconFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>iconFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_SetIconFamilyData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconFamilyHandle</name></type> <name>iconFamily</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>iconType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>h</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetIconFamilyData</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetIconFamilyData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>iconFamily</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>iconType</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetIconFamilyData</name><argument_list>(<argument><expr><name>iconFamily</name></expr></argument>,
	                         <argument><expr><name>iconType</name></expr></argument>,
	                         <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_GetIconFamilyData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconFamilyHandle</name></type> <name>iconFamily</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>iconType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>h</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetIconFamilyData</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetIconFamilyData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>iconFamily</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>iconType</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetIconFamilyData</name><argument_list>(<argument><expr><name>iconFamily</name></expr></argument>,
	                         <argument><expr><name>iconType</name></expr></argument>,
	                         <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_GetIconRefOwners</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>theIconRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt16</name></type> <name>owners</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetIconRefOwners</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetIconRefOwners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIconRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetIconRefOwners</name><argument_list>(<argument><expr><name>theIconRef</name></expr></argument>,
	                        <argument><expr>&amp;<name>owners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"H"</expr></argument>,
	                     <argument><expr><name>owners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_AcquireIconRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>theIconRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AcquireIconRef</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AcquireIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIconRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>AcquireIconRef</name><argument_list>(<argument><expr><name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_ReleaseIconRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>theIconRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ReleaseIconRef</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ReleaseIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIconRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>ReleaseIconRef</name><argument_list>(<argument><expr><name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_GetIconRefFromFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>theFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>theIconRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>theLabel</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetIconRefFromFile</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetIconRefFromFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>theFile</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetIconRefFromFile</name><argument_list>(<argument><expr>&amp;<name>theFile</name></expr></argument>,
	                          <argument><expr>&amp;<name>theIconRef</name></expr></argument>,
	                          <argument><expr>&amp;<name>theLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;h"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>theIconRef</name></expr></argument>,
	                     <argument><expr><name>theLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_GetIconRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>creator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>iconType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>theIconRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetIconRef</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hO&amp;O&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>vRefNum</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>creator</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>iconType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetIconRef</name><argument_list>(<argument><expr><name>vRefNum</name></expr></argument>,
	                  <argument><expr><name>creator</name></expr></argument>,
	                  <argument><expr><name>iconType</name></expr></argument>,
	                  <argument><expr>&amp;<name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_GetIconRefFromFolder</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt32</name></type> <name>parentFolderID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt32</name></type> <name>folderID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt8</name></type> <name>attributes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt8</name></type> <name>accessPrivileges</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>theIconRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetIconRefFromFolder</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetIconRefFromFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hllbb"</expr></argument>,
	                      <argument><expr>&amp;<name>vRefNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>parentFolderID</name></expr></argument>,
	                      <argument><expr>&amp;<name>folderID</name></expr></argument>,
	                      <argument><expr>&amp;<name>attributes</name></expr></argument>,
	                      <argument><expr>&amp;<name>accessPrivileges</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetIconRefFromFolder</name><argument_list>(<argument><expr><name>vRefNum</name></expr></argument>,
	                            <argument><expr><name>parentFolderID</name></expr></argument>,
	                            <argument><expr><name>folderID</name></expr></argument>,
	                            <argument><expr><name>attributes</name></expr></argument>,
	                            <argument><expr><name>accessPrivileges</name></expr></argument>,
	                            <argument><expr>&amp;<name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_RegisterIconRefFromIconFamily</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>creator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>iconType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconFamilyHandle</name></type> <name>iconFamily</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>theIconRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RegisterIconRefFromIconFamily</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RegisterIconRefFromIconFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>creator</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>iconType</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>iconFamily</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>RegisterIconRefFromIconFamily</name><argument_list>(<argument><expr><name>creator</name></expr></argument>,
	                                     <argument><expr><name>iconType</name></expr></argument>,
	                                     <argument><expr><name>iconFamily</name></expr></argument>,
	                                     <argument><expr>&amp;<name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_RegisterIconRefFromResource</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>creator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>iconType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>resourceFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>resourceID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>theIconRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RegisterIconRefFromResource</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RegisterIconRefFromResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;h"</expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>creator</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>iconType</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>resourceFile</name></expr></argument>,
	                      <argument><expr>&amp;<name>resourceID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>RegisterIconRefFromResource</name><argument_list>(<argument><expr><name>creator</name></expr></argument>,
	                                   <argument><expr><name>iconType</name></expr></argument>,
	                                   <argument><expr>&amp;<name>resourceFile</name></expr></argument>,
	                                   <argument><expr><name>resourceID</name></expr></argument>,
	                                   <argument><expr>&amp;<name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_RegisterIconRefFromFSRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>creator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>iconType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>iconFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>theIconRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RegisterIconRefFromFSRef</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RegisterIconRefFromFSRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>creator</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>iconType</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetFSRef</name></expr></argument>, <argument><expr>&amp;<name>iconFile</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>RegisterIconRefFromFSRef</name><argument_list>(<argument><expr><name>creator</name></expr></argument>,
	                                <argument><expr><name>iconType</name></expr></argument>,
	                                <argument><expr>&amp;<name>iconFile</name></expr></argument>,
	                                <argument><expr>&amp;<name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_UnregisterIconRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>creator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>iconType</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UnregisterIconRef</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>UnregisterIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>creator</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>iconType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>UnregisterIconRef</name><argument_list>(<argument><expr><name>creator</name></expr></argument>,
	                         <argument><expr><name>iconType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_UpdateIconRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>theIconRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UpdateIconRef</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>UpdateIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIconRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>UpdateIconRef</name><argument_list>(<argument><expr><name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_OverrideIconRefFromResource</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>theIconRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>resourceFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>resourceID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OverrideIconRefFromResource</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>OverrideIconRefFromResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;h"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIconRef</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>resourceFile</name></expr></argument>,
	                      <argument><expr>&amp;<name>resourceID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>OverrideIconRefFromResource</name><argument_list>(<argument><expr><name>theIconRef</name></expr></argument>,
	                                   <argument><expr>&amp;<name>resourceFile</name></expr></argument>,
	                                   <argument><expr><name>resourceID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_OverrideIconRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>oldIconRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>newIconRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OverrideIconRef</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>OverrideIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>oldIconRef</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>newIconRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>OverrideIconRef</name><argument_list>(<argument><expr><name>oldIconRef</name></expr></argument>,
	                       <argument><expr><name>newIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_RemoveIconRefOverride</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>theIconRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RemoveIconRefOverride</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RemoveIconRefOverride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIconRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>RemoveIconRefOverride</name><argument_list>(<argument><expr><name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_CompositeIconRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>backgroundIconRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>foregroundIconRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>compositeIconRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CompositeIconRef</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CompositeIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>backgroundIconRef</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>foregroundIconRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>CompositeIconRef</name><argument_list>(<argument><expr><name>backgroundIconRef</name></expr></argument>,
	                        <argument><expr><name>foregroundIconRef</name></expr></argument>,
	                        <argument><expr>&amp;<name>compositeIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>compositeIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_IsIconRefComposite</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>compositeIconRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>backgroundIconRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>foregroundIconRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsIconRefComposite</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsIconRefComposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>compositeIconRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>IsIconRefComposite</name><argument_list>(<argument><expr><name>compositeIconRef</name></expr></argument>,
	                          <argument><expr>&amp;<name>backgroundIconRef</name></expr></argument>,
	                          <argument><expr>&amp;<name>foregroundIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>backgroundIconRef</name></expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>foregroundIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_IsValidIconRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>theIconRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsValidIconRef</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsValidIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIconRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>IsValidIconRef</name><argument_list>(<argument><expr><name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_PlotIconRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>theRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconAlignmentType</name></type> <name>align</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconTransformType</name></type> <name>transform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconServicesUsageFlags</name></type> <name>theIconServicesUsageFlags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>theIconRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PlotIconRef</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PlotIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hhlO&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>theRect</name></expr></argument>,
	                      <argument><expr>&amp;<name>align</name></expr></argument>,
	                      <argument><expr>&amp;<name>transform</name></expr></argument>,
	                      <argument><expr>&amp;<name>theIconServicesUsageFlags</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIconRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>PlotIconRef</name><argument_list>(<argument><expr>&amp;<name>theRect</name></expr></argument>,
	                   <argument><expr><name>align</name></expr></argument>,
	                   <argument><expr><name>transform</name></expr></argument>,
	                   <argument><expr><name>theIconServicesUsageFlags</name></expr></argument>,
	                   <argument><expr><name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_PtInIconRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>testPt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>iconRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconAlignmentType</name></type> <name>align</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconServicesUsageFlags</name></type> <name>theIconServicesUsageFlags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>theIconRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PtInIconRef</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PtInIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;hlO&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>testPt</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>iconRect</name></expr></argument>,
	                      <argument><expr>&amp;<name>align</name></expr></argument>,
	                      <argument><expr>&amp;<name>theIconServicesUsageFlags</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIconRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>PtInIconRef</name><argument_list>(<argument><expr>&amp;<name>testPt</name></expr></argument>,
	                  <argument><expr>&amp;<name>iconRect</name></expr></argument>,
	                  <argument><expr><name>align</name></expr></argument>,
	                  <argument><expr><name>theIconServicesUsageFlags</name></expr></argument>,
	                  <argument><expr><name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_RectInIconRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>testRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>iconRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconAlignmentType</name></type> <name>align</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconServicesUsageFlags</name></type> <name>iconServicesUsageFlags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>theIconRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RectInIconRef</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RectInIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;hlO&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>testRect</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>iconRect</name></expr></argument>,
	                      <argument><expr>&amp;<name>align</name></expr></argument>,
	                      <argument><expr>&amp;<name>iconServicesUsageFlags</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIconRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>RectInIconRef</name><argument_list>(<argument><expr>&amp;<name>testRect</name></expr></argument>,
	                    <argument><expr>&amp;<name>iconRect</name></expr></argument>,
	                    <argument><expr><name>align</name></expr></argument>,
	                    <argument><expr><name>iconServicesUsageFlags</name></expr></argument>,
	                    <argument><expr><name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_IconRefToRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>theRgn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>iconRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconAlignmentType</name></type> <name>align</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconServicesUsageFlags</name></type> <name>iconServicesUsageFlags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>theIconRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IconRefToRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IconRefToRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;hlO&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theRgn</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>iconRect</name></expr></argument>,
	                      <argument><expr>&amp;<name>align</name></expr></argument>,
	                      <argument><expr>&amp;<name>iconServicesUsageFlags</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIconRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>IconRefToRgn</name><argument_list>(<argument><expr><name>theRgn</name></expr></argument>,
	                    <argument><expr>&amp;<name>iconRect</name></expr></argument>,
	                    <argument><expr><name>align</name></expr></argument>,
	                    <argument><expr><name>iconServicesUsageFlags</name></expr></argument>,
	                    <argument><expr><name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_GetIconSizesFromIconRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconSelectorValue</name></type> <name>iconSelectorInput</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconSelectorValue</name></type> <name>iconSelectorOutputPtr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconServicesUsageFlags</name></type> <name>iconServicesUsageFlags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>theIconRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetIconSizesFromIconRef</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetIconSizesFromIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"llO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>iconSelectorInput</name></expr></argument>,
	                      <argument><expr>&amp;<name>iconServicesUsageFlags</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theIconRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetIconSizesFromIconRef</name><argument_list>(<argument><expr><name>iconSelectorInput</name></expr></argument>,
	                               <argument><expr>&amp;<name>iconSelectorOutputPtr</name></expr></argument>,
	                               <argument><expr><name>iconServicesUsageFlags</name></expr></argument>,
	                               <argument><expr><name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>iconSelectorOutputPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_FlushIconRefs</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>creator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>iconType</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FlushIconRefs</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FlushIconRefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>creator</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>iconType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FlushIconRefs</name><argument_list>(<argument><expr><name>creator</name></expr></argument>,
	                     <argument><expr><name>iconType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_FlushIconRefsByVolume</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>vRefNum</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FlushIconRefsByVolume</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FlushIconRefsByVolume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>vRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>FlushIconRefsByVolume</name><argument_list>(<argument><expr><name>vRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_SetCustomIconsEnabled</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>enableCustomIcons</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetCustomIconsEnabled</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetCustomIconsEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hb"</expr></argument>,
	                      <argument><expr>&amp;<name>vRefNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>enableCustomIcons</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetCustomIconsEnabled</name><argument_list>(<argument><expr><name>vRefNum</name></expr></argument>,
	                             <argument><expr><name>enableCustomIcons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_GetCustomIconsEnabled</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>vRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>customIconsEnabled</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetCustomIconsEnabled</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetCustomIconsEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>vRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetCustomIconsEnabled</name><argument_list>(<argument><expr><name>vRefNum</name></expr></argument>,
	                             <argument><expr>&amp;<name>customIconsEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>customIconsEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_IsIconRefMaskEmpty</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>iconRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsIconRefMaskEmpty</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsIconRefMaskEmpty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>iconRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>IsIconRefMaskEmpty</name><argument_list>(<argument><expr><name>iconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_GetIconRefVariant</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>inIconRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>inVariant</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconTransformType</name></type> <name>outTransform</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetIconRefVariant</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetIconRefVariant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inIconRef</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>inVariant</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetIconRefVariant</name><argument_list>(<argument><expr><name>inIconRef</name></expr></argument>,
	                        <argument><expr><name>inVariant</name></expr></argument>,
	                        <argument><expr>&amp;<name>outTransform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;h"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>,
	                     <argument><expr><name>outTransform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_RegisterIconRefFromIconFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>creator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>iconType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>iconFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconRef</name></type> <name>theIconRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RegisterIconRefFromIconFile</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RegisterIconRefFromIconFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>creator</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>iconType</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>iconFile</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>RegisterIconRefFromIconFile</name><argument_list>(<argument><expr><name>creator</name></expr></argument>,
	                                   <argument><expr><name>iconType</name></expr></argument>,
	                                   <argument><expr>&amp;<name>iconFile</name></expr></argument>,
	                                   <argument><expr>&amp;<name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>theIconRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_ReadIconFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>iconFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconFamilyHandle</name></type> <name>iconFamily</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ReadIconFile</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ReadIconFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>iconFile</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>ReadIconFile</name><argument_list>(<argument><expr>&amp;<name>iconFile</name></expr></argument>,
	                    <argument><expr>&amp;<name>iconFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>iconFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_ReadIconFromFSRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>ref</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconFamilyHandle</name></type> <name>iconFamily</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ReadIconFromFSRef</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ReadIconFromFSRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetFSRef</name></expr></argument>, <argument><expr>&amp;<name>ref</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>ReadIconFromFSRef</name><argument_list>(<argument><expr>&amp;<name>ref</name></expr></argument>,
	                         <argument><expr>&amp;<name>iconFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>iconFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Icn_WriteIconFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconFamilyHandle</name></type> <name>iconFamily</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSSpec</name></type> <name>iconFile</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WriteIconFile</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>WriteIconFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>iconFamily</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>iconFile</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>WriteIconFile</name><argument_list>(<argument><expr><name>iconFamily</name></expr></argument>,
	                     <argument><expr>&amp;<name>iconFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>Icn_methods</name><index>[]</index></name> <init>= <expr><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<expr><block>{<expr>"GetCIcon"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_GetCIcon</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 iconID) -&gt; (CIconHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PlotCIcon"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_PlotCIcon</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect theRect, CIconHandle theIcon) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DisposeCIcon"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_DisposeCIcon</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CIconHandle theIcon) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetIcon"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_GetIcon</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 iconID) -&gt; (Handle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PlotIcon"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_PlotIcon</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect theRect, Handle theIcon) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PlotIconID"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_PlotIconID</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect theRect, IconAlignmentType align, IconTransformType transform, SInt16 theResID) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"NewIconSuite"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_NewIconSuite</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (IconSuiteRef theIconSuite)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"AddIconToSuite"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_AddIconToSuite</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle theIconData, IconSuiteRef theSuite, ResType theType) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetIconFromSuite"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_GetIconFromSuite</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconSuiteRef theSuite, ResType theType) -&gt; (Handle theIconData)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetIconSuite"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_GetIconSuite</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 theResID, IconSelectorValue selector) -&gt; (IconSuiteRef theIconSuite)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DisposeIconSuite"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_DisposeIconSuite</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconSuiteRef theIconSuite, Boolean disposeData) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PlotIconSuite"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_PlotIconSuite</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect theRect, IconAlignmentType align, IconTransformType transform, IconSuiteRef theIconSuite) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LoadIconCache"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_LoadIconCache</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect theRect, IconAlignmentType align, IconTransformType transform, IconCacheRef theIconCache) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetLabel"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_GetLabel</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 labelNumber, Str255 labelString) -&gt; (RGBColor labelColor)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PtInIconID"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_PtInIconID</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point testPt, Rect iconRect, IconAlignmentType align, SInt16 iconID) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PtInIconSuite"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_PtInIconSuite</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point testPt, Rect iconRect, IconAlignmentType align, IconSuiteRef theIconSuite) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"RectInIconID"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_RectInIconID</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect testRect, Rect iconRect, IconAlignmentType align, SInt16 iconID) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"RectInIconSuite"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_RectInIconSuite</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect testRect, Rect iconRect, IconAlignmentType align, IconSuiteRef theIconSuite) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IconIDToRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_IconIDToRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle theRgn, Rect iconRect, IconAlignmentType align, SInt16 iconID) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IconSuiteToRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_IconSuiteToRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle theRgn, Rect iconRect, IconAlignmentType align, IconSuiteRef theIconSuite) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetSuiteLabel"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_SetSuiteLabel</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconSuiteRef theSuite, SInt16 theLabel) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetSuiteLabel"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_GetSuiteLabel</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconSuiteRef theSuite) -&gt; (SInt16 _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PlotIconHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_PlotIconHandle</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect theRect, IconAlignmentType align, IconTransformType transform, Handle theIcon) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PlotSICNHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_PlotSICNHandle</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect theRect, IconAlignmentType align, IconTransformType transform, Handle theSICN) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PlotCIconHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_PlotCIconHandle</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect theRect, IconAlignmentType align, IconTransformType transform, CIconHandle theCIcon) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IconRefToIconFamily"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_IconRefToIconFamily</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconRef theIconRef, IconSelectorValue whichIcons) -&gt; (IconFamilyHandle iconFamily)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IconFamilyToIconSuite"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_IconFamilyToIconSuite</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconFamilyHandle iconFamily, IconSelectorValue whichIcons) -&gt; (IconSuiteRef iconSuite)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IconSuiteToIconFamily"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_IconSuiteToIconFamily</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconSuiteRef iconSuite, IconSelectorValue whichIcons) -&gt; (IconFamilyHandle iconFamily)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetIconFamilyData"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_SetIconFamilyData</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconFamilyHandle iconFamily, OSType iconType, Handle h) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetIconFamilyData"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_GetIconFamilyData</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconFamilyHandle iconFamily, OSType iconType, Handle h) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetIconRefOwners"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_GetIconRefOwners</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconRef theIconRef) -&gt; (UInt16 owners)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"AcquireIconRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_AcquireIconRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconRef theIconRef) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ReleaseIconRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_ReleaseIconRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconRef theIconRef) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetIconRefFromFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_GetIconRefFromFile</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSSpec theFile) -&gt; (IconRef theIconRef, SInt16 theLabel)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetIconRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_GetIconRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 vRefNum, OSType creator, OSType iconType) -&gt; (IconRef theIconRef)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetIconRefFromFolder"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_GetIconRefFromFolder</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 vRefNum, SInt32 parentFolderID, SInt32 folderID, SInt8 attributes, SInt8 accessPrivileges) -&gt; (IconRef theIconRef)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"RegisterIconRefFromIconFamily"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_RegisterIconRefFromIconFamily</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType creator, OSType iconType, IconFamilyHandle iconFamily) -&gt; (IconRef theIconRef)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"RegisterIconRefFromResource"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_RegisterIconRefFromResource</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType creator, OSType iconType, FSSpec resourceFile, SInt16 resourceID) -&gt; (IconRef theIconRef)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"RegisterIconRefFromFSRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_RegisterIconRefFromFSRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType creator, OSType iconType, FSRef iconFile) -&gt; (IconRef theIconRef)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"UnregisterIconRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_UnregisterIconRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType creator, OSType iconType) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"UpdateIconRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_UpdateIconRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconRef theIconRef) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"OverrideIconRefFromResource"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_OverrideIconRefFromResource</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconRef theIconRef, FSSpec resourceFile, SInt16 resourceID) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"OverrideIconRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_OverrideIconRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconRef oldIconRef, IconRef newIconRef) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"RemoveIconRefOverride"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_RemoveIconRefOverride</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconRef theIconRef) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CompositeIconRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_CompositeIconRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconRef backgroundIconRef, IconRef foregroundIconRef) -&gt; (IconRef compositeIconRef)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsIconRefComposite"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_IsIconRefComposite</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconRef compositeIconRef) -&gt; (IconRef backgroundIconRef, IconRef foregroundIconRef)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsValidIconRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_IsValidIconRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconRef theIconRef) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PlotIconRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_PlotIconRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect theRect, IconAlignmentType align, IconTransformType transform, IconServicesUsageFlags theIconServicesUsageFlags, IconRef theIconRef) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PtInIconRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_PtInIconRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point testPt, Rect iconRect, IconAlignmentType align, IconServicesUsageFlags theIconServicesUsageFlags, IconRef theIconRef) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"RectInIconRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_RectInIconRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect testRect, Rect iconRect, IconAlignmentType align, IconServicesUsageFlags iconServicesUsageFlags, IconRef theIconRef) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IconRefToRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_IconRefToRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle theRgn, Rect iconRect, IconAlignmentType align, IconServicesUsageFlags iconServicesUsageFlags, IconRef theIconRef) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetIconSizesFromIconRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_GetIconSizesFromIconRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconSelectorValue iconSelectorInput, IconServicesUsageFlags iconServicesUsageFlags, IconRef theIconRef) -&gt; (IconSelectorValue iconSelectorOutputPtr)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FlushIconRefs"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_FlushIconRefs</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType creator, OSType iconType) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FlushIconRefsByVolume"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_FlushIconRefsByVolume</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 vRefNum) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetCustomIconsEnabled"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_SetCustomIconsEnabled</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 vRefNum, Boolean enableCustomIcons) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetCustomIconsEnabled"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_GetCustomIconsEnabled</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 vRefNum) -&gt; (Boolean customIconsEnabled)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsIconRefMaskEmpty"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_IsIconRefMaskEmpty</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconRef iconRef) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetIconRefVariant"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_GetIconRefVariant</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconRef inIconRef, OSType inVariant) -&gt; (IconRef _rv, IconTransformType outTransform)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"RegisterIconRefFromIconFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_RegisterIconRefFromIconFile</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType creator, OSType iconType, FSSpec iconFile) -&gt; (IconRef theIconRef)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ReadIconFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_ReadIconFile</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSSpec iconFile) -&gt; (IconFamilyHandle iconFamily)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ReadIconFromFSRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_ReadIconFromFSRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSRef ref) -&gt; (IconFamilyHandle iconFamily)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"WriteIconFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Icn_WriteIconFile</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(IconFamilyHandle iconFamily, FSSpec iconFile) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>




<function><type><name>void</name></type> <name>init_Icn</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>




	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_Icn"</expr></argument>, <argument><expr><name>Icn_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>Icn_Error</name> = <call><name>PyMac_GetOSErrException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>Icn_Error</name> == <name>NULL</name> ||
	    <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Error"</expr></argument>, <argument><expr><name>Icn_Error</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
		<return>return;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>
}</block></function>

<comment type="block">/* ======================== End module _Icn ========================= */</comment>

</unit>
