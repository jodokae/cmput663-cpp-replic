<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Mac/Modules/qd/_Qdmodule.c">
<comment type="block">/* =========================== Module _Qd =========================== */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pymactoolbox.h"</cpp:file></cpp:include>

<comment type="block">/* Macro to test whether a weak-loaded CFM function exists */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMac_PRECHECK</name><parameter_list>(<param><type><name>rtn</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { if ( &amp;rtn == NULL )  {\
        PyErr_SetString(PyExc_NotImplementedError, \
        "Not available in this shared library/OS version"); \
        return NULL; \
    }} while(0)</cpp:value></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Carbon/Carbon.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TOOLBOX_OBJECT_GLUE</name></cpp:ifdef>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>_GrafObj_New</name><parameter_list>(<param><decl><type><name>GrafPtr</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_GrafObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>GrafPtr</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>_BMObj_New</name><parameter_list>(<param><decl><type><name>BitMapPtr</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_BMObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>BitMapPtr</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>_QdRGB_New</name><parameter_list>(<param><decl><type><name>RGBColorPtr</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_QdRGB_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>RGBColorPtr</name></type></decl></param>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GrafObj_New</name></cpp:macro> <cpp:value>_GrafObj_New</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GrafObj_Convert</name></cpp:macro> <cpp:value>_GrafObj_Convert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMObj_New</name></cpp:macro> <cpp:value>_BMObj_New</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMObj_Convert</name></cpp:macro> <cpp:value>_BMObj_Convert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QdRGB_New</name></cpp:macro> <cpp:value>_QdRGB_New</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QdRGB_Convert</name></cpp:macro> <cpp:value>_QdRGB_Convert</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>BMObj_NewCopied</name><parameter_list>(<param><decl><type><name>BitMapPtr</name></type></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
** Parse/generate RGB records
*/</comment>
<function><type><name>PyObject</name> *</type><name>QdRGB_New</name><parameter_list>(<param><decl><type><name>RGBColorPtr</name></type> <name>itself</name></decl></param>)</parameter_list>
<block>{

        <return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lll"</expr></argument>, <argument><expr>(<name>long</name>)<name><name>itself</name>-&gt;<name>red</name></name></expr></argument>, <argument><expr>(<name>long</name>)<name><name>itself</name>-&gt;<name>green</name></name></expr></argument>, <argument><expr>(<name>long</name>)<name><name>itself</name>-&gt;<name>blue</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>QdRGB_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>RGBColorPtr</name></type> <name>p_itself</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>long</name></type> <name>red</name></decl>, <decl><type ref="prev"/><name>green</name></decl>, <decl><type ref="prev"/><name>blue</name></decl>;</decl_stmt>

        <if>if<condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"lll"</expr></argument>, <argument><expr>&amp;<name>red</name></expr></argument>, <argument><expr>&amp;<name>green</name></expr></argument>, <argument><expr>&amp;<name>blue</name></expr></argument>)</argument_list></call></expr> )</condition><then>
                <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name><name>p_itself</name>-&gt;<name>red</name></name> = (<name>unsigned</name> <name>short</name>)<name>red</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p_itself</name>-&gt;<name>green</name></name> = (<name>unsigned</name> <name>short</name>)<name>green</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p_itself</name>-&gt;<name>blue</name></name> = (<name>unsigned</name> <name>short</name>)<name>blue</name></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/*
** Generate FontInfo records
*/</comment>
<function><type><specifier>static</specifier>
<name>PyObject</name> *</type><name>QdFI_New</name><parameter_list>(<param><decl><type><name>FontInfo</name> *</type><name>itself</name></decl></param>)</parameter_list>
<block>{

        <return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"hhhh"</expr></argument>, <argument><expr><name><name>itself</name>-&gt;<name>ascent</name></name></expr></argument>, <argument><expr><name><name>itself</name>-&gt;<name>descent</name></name></expr></argument>,
                        <argument><expr><name><name>itself</name>-&gt;<name>widMax</name></name></expr></argument>, <argument><expr><name><name>itself</name>-&gt;<name>leading</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_Error</name></decl>;</decl_stmt>

<comment type="block">/* ---------------------- Object type GrafPort ---------------------- */</comment>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>GrafPort_Type</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GrafObj_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;GrafPort_Type || PyObject_TypeCheck((x), &amp;GrafPort_Type))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>GrafPortObject</name> <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>GrafPtr</name></type> <name>ob_itself</name></decl>;</decl_stmt>
}</block></struct></type> <name>GrafPortObject</name>;</typedef>

<function><type><name>PyObject</name> *</type><name>GrafObj_New</name><parameter_list>(<param><decl><type><name>GrafPtr</name></type> <name>itself</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>GrafPortObject</name> *</type><name>it</name></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>itself</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>resNotFound</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>GrafPortObject</name></expr></argument>, <argument><expr>&amp;<name>GrafPort_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_itself</name></name> = <name>itself</name></expr>;</expr_stmt>
	<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>GrafObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>GrafPtr</name> *</type><name>p_itself</name></decl></param>)</parameter_list>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>1</expr></cpp:if>
	<block>{
		<decl_stmt><decl><type><name>WindowRef</name></type> <name>win</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name>WinObj_Convert</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>&amp;<name>win</name></expr></argument>)</argument_list></call> &amp;&amp; <name>v</name></expr>)</condition><then> <block>{
			<expr_stmt><expr>*<name>p_itself</name> = (<name>GrafPtr</name>)<call><name>GetWindowPort</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>1</expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if>if <condition>(<expr><call><name>DlgObj_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>DialogRef</name></type> <name>dlg</name> <init>= <expr><call>(<name>DialogRef</name>)<argument_list>(<argument><expr>(<name>GrafPortObject</name> *)<name>v</name></expr></argument>)</argument_list></call>-&gt;<name>ob_itself</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr>*<name>p_itself</name> = (<name>GrafPtr</name>)<call><name>GetWindowPort</name><argument_list>(<argument><expr><call><name>GetDialogWindow</name><argument_list>(<argument><expr><name>dlg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>1</expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr><call><name>WinObj_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>WindowRef</name></type> <name>win</name> <init>= <expr><call>(<name>WindowRef</name>)<argument_list>(<argument><expr>(<name>GrafPortObject</name> *)<name>v</name></expr></argument>)</argument_list></call>-&gt;<name>ob_itself</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr>*<name>p_itself</name> = (<name>GrafPtr</name>)<call><name>GetWindowPort</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>1</expr>;</return>
	}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>GrafObj_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"GrafPort required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>0</expr>;</return>
	}</block></then></if>
	<expr_stmt><expr>*<name>p_itself</name> = ((<name>GrafPortObject</name> *)<name>v</name>)-&gt;<name>ob_itself</name></expr>;</expr_stmt>
	<return>return <expr>1</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GrafObj_dealloc</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<comment type="block">/* Cleanup of self-&gt;ob_itself goes here */</comment>
	<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_MacSetPort</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacSetPort</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacSetPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacSetPort</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_QDSwapPort</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CGrafPtr</name></type> <name>outOldPort</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>QDSwapPort</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QDSwapPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>QDSwapPort</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                 <argument><expr>&amp;<name>outOldPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"bO&amp;"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>,
	                     <argument><expr><name>GrafObj_New</name></expr></argument>, <argument><expr><name>outOldPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_IsValidPort</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsValidPort</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsValidPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>IsValidPort</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortPixMap</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortPixMap</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortPixMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetPortPixMap</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortBitMapForCopyBits</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>BitMap</name> *</type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortBitMapForCopyBits</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortBitMapForCopyBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetPortBitMapForCopyBits</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>BMObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortBounds</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>rect</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortBounds</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetPortBounds</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	              <argument><expr>&amp;<name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortForeColor</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>foreColor</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortForeColor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortForeColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetPortForeColor</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                 <argument><expr>&amp;<name>foreColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>foreColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortBackColor</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>backColor</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortBackColor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortBackColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetPortBackColor</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                 <argument><expr>&amp;<name>backColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>backColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortOpColor</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>opColor</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortOpColor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortOpColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetPortOpColor</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	               <argument><expr>&amp;<name>opColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>opColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortHiliteColor</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>hiliteColor</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortHiliteColor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortHiliteColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetPortHiliteColor</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                   <argument><expr>&amp;<name>hiliteColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>hiliteColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortTextFont</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortTextFont</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortTextFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetPortTextFont</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortTextFace</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Style</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortTextFace</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortTextFace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetPortTextFace</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortTextMode</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortTextMode</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortTextMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetPortTextMode</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortTextSize</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortTextSize</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortTextSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetPortTextSize</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortChExtra</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortChExtra</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortChExtra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetPortChExtra</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortFracHPenLocation</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortFracHPenLocation</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortFracHPenLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetPortFracHPenLocation</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortSpExtra</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Fixed</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortSpExtra</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortSpExtra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetPortSpExtra</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortPenVisibility</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortPenVisibility</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortPenVisibility</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetPortPenVisibility</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortVisibleRegion</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>visRgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortVisibleRegion</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortVisibleRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>visRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetPortVisibleRegion</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                           <argument><expr><name>visRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortClipRegion</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>clipRgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortClipRegion</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortClipRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>clipRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetPortClipRegion</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                        <argument><expr><name>clipRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortBackPixPat</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>backPattern</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortBackPixPat</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortBackPixPat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>backPattern</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetPortBackPixPat</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                        <argument><expr><name>backPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortPenPixPat</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>penPattern</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortPenPixPat</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortPenPixPat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>penPattern</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetPortPenPixPat</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                       <argument><expr><name>penPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortFillPixPat</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>fillPattern</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortFillPixPat</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortFillPixPat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>fillPattern</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetPortFillPixPat</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                        <argument><expr><name>fillPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortPenSize</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>penSize</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortPenSize</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortPenSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>penSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetPortPenSize</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	               <argument><expr>&amp;<name>penSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>penSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortPenMode</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt32</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortPenMode</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortPenMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetPortPenMode</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_GetPortPenLocation</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>penLocation</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPortPenLocation</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPortPenLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>penLocation</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetPortPenLocation</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                   <argument><expr>&amp;<name>penLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>penLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_IsPortRegionBeingDefined</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsPortRegionBeingDefined</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsPortRegionBeingDefined</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>IsPortRegionBeingDefined</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_IsPortPictureBeingDefined</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsPortPictureBeingDefined</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsPortPictureBeingDefined</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>IsPortPictureBeingDefined</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_IsPortPolyBeingDefined</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsPortPolyBeingDefined</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsPortPolyBeingDefined</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>IsPortPolyBeingDefined</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_IsPortOffscreen</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsPortOffscreen</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsPortOffscreen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>IsPortOffscreen</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_IsPortColor</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsPortColor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsPortColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>IsPortColor</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_IsPortVisibleRegionEmpty</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsPortVisibleRegionEmpty</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsPortVisibleRegionEmpty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>IsPortVisibleRegionEmpty</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_IsPortClipRegionEmpty</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsPortClipRegionEmpty</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsPortClipRegionEmpty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>IsPortClipRegionEmpty</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_SectRegionWithPortClipRegion</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>ioRegion</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SectRegionWithPortClipRegion</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SectRegionWithPortClipRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ioRegion</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SectRegionWithPortClipRegion</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                             <argument><expr><name>ioRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_SectRegionWithPortVisibleRegion</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>ioRegion</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SectRegionWithPortVisibleRegion</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SectRegionWithPortVisibleRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ioRegion</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SectRegionWithPortVisibleRegion</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                <argument><expr><name>ioRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_SwapPortPicSaveHandle</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>inPicSaveHdl</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SwapPortPicSaveHandle</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SwapPortPicSaveHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inPicSaveHdl</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>SwapPortPicSaveHandle</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                            <argument><expr><name>inPicSaveHdl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_SwapPortPolySaveHandle</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>inPolySaveHdl</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SwapPortPolySaveHandle</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SwapPortPolySaveHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inPolySaveHdl</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>SwapPortPolySaveHandle</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                             <argument><expr><name>inPolySaveHdl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_SwapPortRegionSaveHandle</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>inRegionSaveHdl</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SwapPortRegionSaveHandle</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SwapPortRegionSaveHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inRegionSaveHdl</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>SwapPortRegionSaveHandle</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                               <argument><expr><name>inRegionSaveHdl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_SetPortBounds</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>rect</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetPortBounds</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetPortBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>rect</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetPortBounds</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	              <argument><expr>&amp;<name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_SetPortOpColor</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>opColor</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetPortOpColor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetPortOpColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>QdRGB_Convert</name></expr></argument>, <argument><expr>&amp;<name>opColor</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetPortOpColor</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	               <argument><expr>&amp;<name>opColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_SetPortTextFont</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>txFont</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetPortTextFont</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetPortTextFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>txFont</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetPortTextFont</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                <argument><expr><name>txFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_SetPortTextSize</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>txSize</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetPortTextSize</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetPortTextSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>txSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetPortTextSize</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                <argument><expr><name>txSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_SetPortTextFace</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StyleParameter</name></type> <name>face</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetPortTextFace</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetPortTextFace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>face</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetPortTextFace</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                <argument><expr><name>face</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_SetPortTextMode</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>mode</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetPortTextMode</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetPortTextMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetPortTextMode</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_SetPortVisibleRegion</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>visRgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetPortVisibleRegion</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetPortVisibleRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>visRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetPortVisibleRegion</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                     <argument><expr><name>visRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_SetPortClipRegion</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>clipRgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetPortClipRegion</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetPortClipRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>clipRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetPortClipRegion</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                  <argument><expr><name>clipRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_SetPortPenPixPat</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>penPattern</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetPortPenPixPat</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetPortPenPixPat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>penPattern</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetPortPenPixPat</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                 <argument><expr><name>penPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_SetPortFillPixPat</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>penPattern</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetPortFillPixPat</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetPortFillPixPat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>penPattern</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetPortFillPixPat</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                  <argument><expr><name>penPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_SetPortBackPixPat</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>backPattern</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetPortBackPixPat</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetPortBackPixPat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>backPattern</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetPortBackPixPat</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                  <argument><expr><name>backPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_SetPortPenSize</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>penSize</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetPortPenSize</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetPortPenSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>penSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetPortPenSize</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	               <argument><expr><name>penSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_SetPortPenMode</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt32</name></type> <name>penMode</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetPortPenMode</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetPortPenMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>penMode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetPortPenMode</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	               <argument><expr><name>penMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_SetPortFracHPenLocation</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>pnLocHFrac</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetPortFracHPenLocation</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetPortFracHPenLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>pnLocHFrac</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetPortFracHPenLocation</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                        <argument><expr><name>pnLocHFrac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_DisposePort</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DisposePort</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DisposePort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DisposePort</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_QDLocalToGlobalPoint</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>point</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>QDLocalToGlobalPoint</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QDLocalToGlobalPoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>point</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>QDLocalToGlobalPoint</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                     <argument><expr>&amp;<name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_QDGlobalToLocalPoint</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>point</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>QDGlobalToLocalPoint</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QDGlobalToLocalPoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>point</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>QDGlobalToLocalPoint</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                     <argument><expr>&amp;<name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_QDLocalToGlobalRect</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>bounds</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>QDLocalToGlobalRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QDLocalToGlobalRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>QDLocalToGlobalRect</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                    <argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_QDGlobalToLocalRect</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>bounds</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>QDGlobalToLocalRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QDGlobalToLocalRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>QDGlobalToLocalRect</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                    <argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_QDLocalToGlobalRegion</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>region</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>QDLocalToGlobalRegion</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QDLocalToGlobalRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>region</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>QDLocalToGlobalRegion</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                            <argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_QDGlobalToLocalRegion</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>region</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>QDGlobalToLocalRegion</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QDGlobalToLocalRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>region</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>QDGlobalToLocalRegion</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                            <argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_QDIsPortBuffered</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>QDIsPortBuffered</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QDIsPortBuffered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>QDIsPortBuffered</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_QDIsPortBufferDirty</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>QDIsPortBufferDirty</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QDIsPortBufferDirty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>QDIsPortBufferDirty</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_QDFlushPortBuffer</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>region</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>QDFlushPortBuffer</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QDFlushPortBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>OptResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>region</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>QDFlushPortBuffer</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                  <argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_QDGetDirtyRegion</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>QDGetDirtyRegion</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QDGetDirtyRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>QDGetDirtyRegion</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                        <argument><expr><name>rgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_QDSetDirtyRegion</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>QDSetDirtyRegion</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QDSetDirtyRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>QDSetDirtyRegion</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                        <argument><expr><name>rgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>GrafObj_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"MacSetPort"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_MacSetPort</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"QDSwapPort"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_QDSwapPort</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv, CGrafPtr outOldPort)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsValidPort"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_IsValidPort</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortPixMap"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortPixMap</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (PixMapHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortBitMapForCopyBits"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortBitMapForCopyBits</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (const BitMap * _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortBounds"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortBounds</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Rect rect)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortForeColor"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortForeColor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (RGBColor foreColor)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortBackColor"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortBackColor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (RGBColor backColor)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortOpColor"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortOpColor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (RGBColor opColor)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortHiliteColor"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortHiliteColor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (RGBColor hiliteColor)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortTextFont"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortTextFont</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (short _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortTextFace"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortTextFace</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Style _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortTextMode"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortTextMode</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (short _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortTextSize"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortTextSize</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (short _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortChExtra"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortChExtra</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (short _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortFracHPenLocation"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortFracHPenLocation</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (short _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortSpExtra"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortSpExtra</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Fixed _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortPenVisibility"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortPenVisibility</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (short _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortVisibleRegion"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortVisibleRegion</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle visRgn) -&gt; (RgnHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortClipRegion"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortClipRegion</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle clipRgn) -&gt; (RgnHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortBackPixPat"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortBackPixPat</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixPatHandle backPattern) -&gt; (PixPatHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortPenPixPat"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortPenPixPat</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixPatHandle penPattern) -&gt; (PixPatHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortFillPixPat"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortFillPixPat</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixPatHandle fillPattern) -&gt; (PixPatHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortPenSize"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortPenSize</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point penSize) -&gt; (Point penSize)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortPenMode"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortPenMode</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (SInt32 _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPortPenLocation"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_GetPortPenLocation</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point penLocation) -&gt; (Point penLocation)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsPortRegionBeingDefined"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_IsPortRegionBeingDefined</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsPortPictureBeingDefined"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_IsPortPictureBeingDefined</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsPortPolyBeingDefined"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_IsPortPolyBeingDefined</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsPortOffscreen"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_IsPortOffscreen</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsPortColor"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_IsPortColor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsPortVisibleRegionEmpty"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_IsPortVisibleRegionEmpty</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsPortClipRegionEmpty"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_IsPortClipRegionEmpty</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SectRegionWithPortClipRegion"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_SectRegionWithPortClipRegion</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle ioRegion) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SectRegionWithPortVisibleRegion"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_SectRegionWithPortVisibleRegion</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle ioRegion) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SwapPortPicSaveHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_SwapPortPicSaveHandle</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle inPicSaveHdl) -&gt; (Handle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SwapPortPolySaveHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_SwapPortPolySaveHandle</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle inPolySaveHdl) -&gt; (Handle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SwapPortRegionSaveHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_SwapPortRegionSaveHandle</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle inRegionSaveHdl) -&gt; (Handle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetPortBounds"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_SetPortBounds</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect rect) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetPortOpColor"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_SetPortOpColor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RGBColor opColor) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetPortTextFont"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_SetPortTextFont</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short txFont) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetPortTextSize"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_SetPortTextSize</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short txSize) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetPortTextFace"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_SetPortTextFace</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(StyleParameter face) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetPortTextMode"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_SetPortTextMode</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short mode) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetPortVisibleRegion"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_SetPortVisibleRegion</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle visRgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetPortClipRegion"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_SetPortClipRegion</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle clipRgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetPortPenPixPat"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_SetPortPenPixPat</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixPatHandle penPattern) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetPortFillPixPat"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_SetPortFillPixPat</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixPatHandle penPattern) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetPortBackPixPat"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_SetPortBackPixPat</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixPatHandle backPattern) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetPortPenSize"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_SetPortPenSize</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point penSize) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetPortPenMode"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_SetPortPenMode</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt32 penMode) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetPortFracHPenLocation"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_SetPortFracHPenLocation</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short pnLocHFrac) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DisposePort"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_DisposePort</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"QDLocalToGlobalPoint"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_QDLocalToGlobalPoint</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point point) -&gt; (Point point)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"QDGlobalToLocalPoint"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_QDGlobalToLocalPoint</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point point) -&gt; (Point point)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"QDLocalToGlobalRect"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_QDLocalToGlobalRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Rect bounds)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"QDGlobalToLocalRect"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_QDGlobalToLocalRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Rect bounds)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"QDLocalToGlobalRegion"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_QDLocalToGlobalRegion</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle region) -&gt; (RgnHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"QDGlobalToLocalRegion"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_QDGlobalToLocalRegion</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle region) -&gt; (RgnHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"QDIsPortBuffered"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_QDIsPortBuffered</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"QDIsPortBufferDirty"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_QDIsPortBufferDirty</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"QDFlushPortBuffer"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_QDFlushPortBuffer</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle region) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"QDGetDirtyRegion"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_QDGetDirtyRegion</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"QDSetDirtyRegion"</expr>, <expr>(<name>PyCFunction</name>)<name>GrafObj_QDSetDirtyRegion</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_get_visRgn</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>h</name><init>=<expr><call><name>NewRgn</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* XXXX wrong dispose routine */</comment>
	            <return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr>(<name>Handle</name>)<call><name>GetPortVisibleRegion</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	            
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GrafObj_set_visRgn</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_get_clipRgn</name><parameter_list>(<param><decl><type><name>GrafPortObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>h</name><init>=<expr><call><name>NewRgn</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* XXXX wrong dispose routine */</comment>
	            <return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr>(<name>Handle</name>)<call><name>GetPortClipRegion</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	            
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GrafObj_set_clipRgn</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>GrafObj_getsetlist</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"visRgn"</expr>, <expr>(<name>getter</name>)<name>GrafObj_get_visRgn</name></expr>, <expr>(<name>setter</name>)<name>GrafObj_set_visRgn</name></expr>, <expr>"Convenience attribute: return a copy of the visible region"</expr>}</block></expr>,
	<expr><block>{<expr>"clipRgn"</expr>, <expr>(<name>getter</name>)<name>GrafObj_get_clipRgn</name></expr>, <expr>(<name>setter</name>)<name>GrafObj_set_clipRgn</name></expr>, <expr>"Convenience attribute: return a copy of the clipping region"</expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GrafObj_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GrafObj_repr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GrafObj_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GrafObj_tp_init</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GrafObj_tp_alloc</name></cpp:macro> <cpp:value>PyType_GenericAlloc</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GrafObj_tp_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_self</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrafPtr</name></type> <name>itself</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name><name>kw</name><index>[]</index></name> <init>= <expr><block>{<expr>"itself"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr><name>_kwds</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>GrafObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>itself</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr>(<name>_self</name> = <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr>((<name>GrafPortObject</name> *)<name>_self</name>)-&gt;<name>ob_itself</name> = <name>itself</name></expr>;</expr_stmt>
	<return>return <expr><name>_self</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GrafObj_tp_free</name></cpp:macro> <cpp:value>PyObject_Del</cpp:value></cpp:define>


<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>GrafPort_Type</name> <init>= <expr><block>{
	<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
	0</expr>, <comment type="block">/*ob_size*/</comment>
	<expr>"_Qd.GrafPort"</expr>, <comment type="block">/*tp_name*/</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>GrafPortObject</name></expr></argument>)</argument_list></sizeof></expr>, <comment type="block">/*tp_basicsize*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>) <name>GrafObj_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_print*/</comment>
	<expr>(<name>getattrfunc</name>)0</expr>, <comment type="block">/*tp_getattr*/</comment>
	<expr>(<name>setattrfunc</name>)0</expr>, <comment type="block">/*tp_setattr*/</comment>
	<expr>(<name>cmpfunc</name>) <name>GrafObj_compare</name></expr>, <comment type="block">/*tp_compare*/</comment>
	<expr>(<name>reprfunc</name>) <name>GrafObj_repr</name></expr>, <comment type="block">/*tp_repr*/</comment>
	<expr>(<name>PyNumberMethods</name> *)0</expr>, <comment type="block">/* tp_as_number */</comment>
	<expr>(<name>PySequenceMethods</name> *)0</expr>, <comment type="block">/* tp_as_sequence */</comment>
	<expr>(<name>PyMappingMethods</name> *)0</expr>, <comment type="block">/* tp_as_mapping */</comment>
	<expr>(<name>hashfunc</name>) <name>GrafObj_hash</name></expr>, <comment type="block">/*tp_hash*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_call*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_str*/</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>, <comment type="block">/*tp_getattro*/</comment>
	<expr><name>PyObject_GenericSetAttr</name></expr>, <comment type="block">/*tp_setattro */</comment>
	<expr>0</expr>, <comment type="block">/*tp_as_buffer*/</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/* tp_flags */</comment>
	<expr>0</expr>, <comment type="block">/*tp_doc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_traverse*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_clear*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_richcompare*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_weaklistoffset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iter*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iternext*/</comment>
	<expr><name>GrafObj_methods</name></expr>, <comment type="block">/* tp_methods */</comment>
	<expr>0</expr>, <comment type="block">/*tp_members*/</comment>
	<expr><name>GrafObj_getsetlist</name></expr>, <comment type="block">/*tp_getset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_base*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dict*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_get*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_set*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dictoffset*/</comment>
	<expr><name>GrafObj_tp_init</name></expr>, <comment type="block">/* tp_init */</comment>
	<expr><name>GrafObj_tp_alloc</name></expr>, <comment type="block">/* tp_alloc */</comment>
	<expr><name>GrafObj_tp_new</name></expr>, <comment type="block">/* tp_new */</comment>
	<expr><name>GrafObj_tp_free</name></expr>, <comment type="block">/* tp_free */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* -------------------- End object type GrafPort -------------------- */</comment>


<comment type="block">/* ----------------------- Object type BitMap ----------------------- */</comment>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>BitMap_Type</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMObj_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;BitMap_Type || PyObject_TypeCheck((x), &amp;BitMap_Type))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>BitMapObject</name> <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>BitMapPtr</name></type> <name>ob_itself</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>referred_object</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BitMap</name> *</type><name>referred_bitmap</name></decl>;</decl_stmt>
}</block></struct></type> <name>BitMapObject</name>;</typedef>

<function><type><name>PyObject</name> *</type><name>BMObj_New</name><parameter_list>(<param><decl><type><name>BitMapPtr</name></type> <name>itself</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>BitMapObject</name> *</type><name>it</name></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>itself</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>resNotFound</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>BitMapObject</name></expr></argument>, <argument><expr>&amp;<name>BitMap_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_itself</name></name> = <name>itself</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>referred_object</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>referred_bitmap</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>BMObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>BitMapPtr</name> *</type><name>p_itself</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr>!<call><name>BMObj_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"BitMap required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>0</expr>;</return>
	}</block></then></if>
	<expr_stmt><expr>*<name>p_itself</name> = ((<name>BitMapObject</name> *)<name>v</name>)-&gt;<name>ob_itself</name></expr>;</expr_stmt>
	<return>return <expr>1</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>BMObj_dealloc</name><parameter_list>(<param><decl><type><name>BitMapObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>referred_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name><name>self</name>-&gt;<name>referred_bitmap</name></name></expr>)</condition><then> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>referred_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>BMObj_getdata</name><parameter_list>(<param><decl><type><name>BitMapObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>cp</name></decl>;</decl_stmt>

	<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ii"</expr></argument>, <argument><expr>&amp;<name>from</name></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr> )</condition><then>
	        <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>cp</name> = <name><name>_self</name>-&gt;<name>ob_itself</name>-&gt;<name>baseAddr</name></name>+<name>from</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>

}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>BMObj_putdata</name><parameter_list>(<param><decl><type><name>BitMapObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>cp</name></decl>, *<decl><type ref="prev"/><name>icp</name></decl>;</decl_stmt>

	<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"is#"</expr></argument>, <argument><expr>&amp;<name>from</name></expr></argument>, <argument><expr>&amp;<name>icp</name></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr> )</condition><then>
	        <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>cp</name> = <name><name>_self</name>-&gt;<name>ob_itself</name>-&gt;<name>baseAddr</name></name>+<name>from</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>icp</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>

}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>BMObj_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"getdata"</expr>, <expr>(<name>PyCFunction</name>)<name>BMObj_getdata</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(int start, int size) -&gt; string. Return bytes from the bitmap"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"putdata"</expr>, <expr>(<name>PyCFunction</name>)<name>BMObj_putdata</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(int start, string data). Store bytes into the bitmap"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>BMObj_get_baseAddr</name><parameter_list>(<param><decl><type><name>BitMapObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name><name>self</name>-&gt;<name>ob_itself</name>-&gt;<name>baseAddr</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMObj_set_baseAddr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>BMObj_get_rowBytes</name><parameter_list>(<param><decl><type><name>BitMapObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name><name>self</name>-&gt;<name>ob_itself</name>-&gt;<name>rowBytes</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMObj_set_rowBytes</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>BMObj_get_bounds</name><parameter_list>(<param><decl><type><name>BitMapObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>ob_itself</name>-&gt;<name>bounds</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMObj_set_bounds</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>BMObj_get_bitmap_data</name><parameter_list>(<param><decl><type><name>BitMapObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BitMap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMObj_set_bitmap_data</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>BMObj_get_pixmap_data</name><parameter_list>(<param><decl><type><name>BitMapObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PixMap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMObj_set_pixmap_data</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>BMObj_getsetlist</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"baseAddr"</expr>, <expr>(<name>getter</name>)<name>BMObj_get_baseAddr</name></expr>, <expr>(<name>setter</name>)<name>BMObj_set_baseAddr</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"rowBytes"</expr>, <expr>(<name>getter</name>)<name>BMObj_get_rowBytes</name></expr>, <expr>(<name>setter</name>)<name>BMObj_set_rowBytes</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"bounds"</expr>, <expr>(<name>getter</name>)<name>BMObj_get_bounds</name></expr>, <expr>(<name>setter</name>)<name>BMObj_set_bounds</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"bitmap_data"</expr>, <expr>(<name>getter</name>)<name>BMObj_get_bitmap_data</name></expr>, <expr>(<name>setter</name>)<name>BMObj_set_bitmap_data</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"pixmap_data"</expr>, <expr>(<name>getter</name>)<name>BMObj_get_pixmap_data</name></expr>, <expr>(<name>setter</name>)<name>BMObj_set_pixmap_data</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMObj_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMObj_repr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMObj_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMObj_tp_init</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMObj_tp_alloc</name></cpp:macro> <cpp:value>PyType_GenericAlloc</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>BMObj_tp_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_self</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BitMapPtr</name></type> <name>itself</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name><name>kw</name><index>[]</index></name> <init>= <expr><block>{<expr>"itself"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr><name>_kwds</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>BMObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>itself</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr>(<name>_self</name> = <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr>((<name>BitMapObject</name> *)<name>_self</name>)-&gt;<name>ob_itself</name> = <name>itself</name></expr>;</expr_stmt>
	<return>return <expr><name>_self</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMObj_tp_free</name></cpp:macro> <cpp:value>PyObject_Del</cpp:value></cpp:define>


<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>BitMap_Type</name> <init>= <expr><block>{
	<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
	0</expr>, <comment type="block">/*ob_size*/</comment>
	<expr>"_Qd.BitMap"</expr>, <comment type="block">/*tp_name*/</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>BitMapObject</name></expr></argument>)</argument_list></sizeof></expr>, <comment type="block">/*tp_basicsize*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>) <name>BMObj_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_print*/</comment>
	<expr>(<name>getattrfunc</name>)0</expr>, <comment type="block">/*tp_getattr*/</comment>
	<expr>(<name>setattrfunc</name>)0</expr>, <comment type="block">/*tp_setattr*/</comment>
	<expr>(<name>cmpfunc</name>) <name>BMObj_compare</name></expr>, <comment type="block">/*tp_compare*/</comment>
	<expr>(<name>reprfunc</name>) <name>BMObj_repr</name></expr>, <comment type="block">/*tp_repr*/</comment>
	<expr>(<name>PyNumberMethods</name> *)0</expr>, <comment type="block">/* tp_as_number */</comment>
	<expr>(<name>PySequenceMethods</name> *)0</expr>, <comment type="block">/* tp_as_sequence */</comment>
	<expr>(<name>PyMappingMethods</name> *)0</expr>, <comment type="block">/* tp_as_mapping */</comment>
	<expr>(<name>hashfunc</name>) <name>BMObj_hash</name></expr>, <comment type="block">/*tp_hash*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_call*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_str*/</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>, <comment type="block">/*tp_getattro*/</comment>
	<expr><name>PyObject_GenericSetAttr</name></expr>, <comment type="block">/*tp_setattro */</comment>
	<expr>0</expr>, <comment type="block">/*tp_as_buffer*/</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/* tp_flags */</comment>
	<expr>0</expr>, <comment type="block">/*tp_doc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_traverse*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_clear*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_richcompare*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_weaklistoffset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iter*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iternext*/</comment>
	<expr><name>BMObj_methods</name></expr>, <comment type="block">/* tp_methods */</comment>
	<expr>0</expr>, <comment type="block">/*tp_members*/</comment>
	<expr><name>BMObj_getsetlist</name></expr>, <comment type="block">/*tp_getset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_base*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dict*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_get*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_set*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dictoffset*/</comment>
	<expr><name>BMObj_tp_init</name></expr>, <comment type="block">/* tp_init */</comment>
	<expr><name>BMObj_tp_alloc</name></expr>, <comment type="block">/* tp_alloc */</comment>
	<expr><name>BMObj_tp_new</name></expr>, <comment type="block">/* tp_new */</comment>
	<expr><name>BMObj_tp_free</name></expr>, <comment type="block">/* tp_free */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* --------------------- End object type BitMap --------------------- */</comment>


<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetPort</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrafPtr</name></type> <name>port</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPort</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetPort</name><argument_list>(<argument><expr>&amp;<name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>GrafObj_New</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GrafDevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>device</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GrafDevice</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GrafDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>device</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GrafDevice</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SetPortBits</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BitMapPtr</name></type> <name>bm</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetPortBits</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetPortBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>BMObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>bm</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetPortBits</name><argument_list>(<argument><expr><name>bm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_PortSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>width</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>height</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PortSize</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PortSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>width</name></expr></argument>,
	                      <argument><expr>&amp;<name>height</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>PortSize</name><argument_list>(<argument><expr><name>width</name></expr></argument>,
	         <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MovePortTo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>leftGlobal</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>topGlobal</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MovePortTo</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovePortTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>leftGlobal</name></expr></argument>,
	                      <argument><expr>&amp;<name>topGlobal</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MovePortTo</name><argument_list>(<argument><expr><name>leftGlobal</name></expr></argument>,
	           <argument><expr><name>topGlobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SetOrigin</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>v</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetOrigin</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetOrigin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>h</name></expr></argument>,
	                      <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetOrigin</name><argument_list>(<argument><expr><name>h</name></expr></argument>,
	          <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SetClip</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetClip</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetClip</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetClip</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetClip</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetClip</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_ClipRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ClipRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ClipRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>ClipRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_BackPat</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pattern</name> *</type><name>pat__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pat__in_len__</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BackPat</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>BackPat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"s#"</expr></argument>,
	                      <argument><expr>(<name>char</name> **)&amp;<name>pat__in__</name></expr></argument>, <argument><expr>&amp;<name>pat__in_len__</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr><name>pat__in_len__</name> != <sizeof>sizeof<argument_list>(<argument><expr><name>Pattern</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"buffer length should be sizeof(Pattern)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>pat__error__</name>;</goto>
	}</block></then></if>
	<expr_stmt><expr><call><name>BackPat</name><argument_list>(<argument><expr><name>pat__in__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
 <label><name>pat__error__</name>:</label> <empty_stmt>;</empty_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_InitCursor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InitCursor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InitCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>InitCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacSetCursor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cursor</name> *</type><name>crsr__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>crsr__in_len__</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacSetCursor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacSetCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"s#"</expr></argument>,
	                      <argument><expr>(<name>char</name> **)&amp;<name>crsr__in__</name></expr></argument>, <argument><expr>&amp;<name>crsr__in_len__</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr><name>crsr__in_len__</name> != <sizeof>sizeof<argument_list>(<argument><expr><name>Cursor</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"buffer length should be sizeof(Cursor)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>crsr__error__</name>;</goto>
	}</block></then></if>
	<expr_stmt><expr><call><name>MacSetCursor</name><argument_list>(<argument><expr><name>crsr__in__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
 <label><name>crsr__error__</name>:</label> <empty_stmt>;</empty_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_HideCursor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HideCursor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>HideCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>HideCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacShowCursor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacShowCursor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacShowCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacShowCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_ObscureCursor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ObscureCursor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ObscureCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>ObscureCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_HidePen</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HidePen</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>HidePen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>HidePen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_ShowPen</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ShowPen</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ShowPen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>ShowPen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetPen</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>pt</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPen</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetPen</name><argument_list>(<argument><expr>&amp;<name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetPenState</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PenState</name></type> <name>pnState__out__</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPenState</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPenState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetPenState</name><argument_list>(<argument><expr>&amp;<name>pnState__out__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"s#"</expr></argument>,
	                     <argument><expr>(<name>char</name> *)&amp;<name>pnState__out__</name></expr></argument>, <argument><expr>(<name>int</name>)<sizeof>sizeof<argument_list>(<argument><expr><name>PenState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SetPenState</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PenState</name> *</type><name>pnState__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pnState__in_len__</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetPenState</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetPenState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"s#"</expr></argument>,
	                      <argument><expr>(<name>char</name> **)&amp;<name>pnState__in__</name></expr></argument>, <argument><expr>&amp;<name>pnState__in_len__</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr><name>pnState__in_len__</name> != <sizeof>sizeof<argument_list>(<argument><expr><name>PenState</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"buffer length should be sizeof(PenState)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>pnState__error__</name>;</goto>
	}</block></then></if>
	<expr_stmt><expr><call><name>SetPenState</name><argument_list>(<argument><expr><name>pnState__in__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
 <label><name>pnState__error__</name>:</label> <empty_stmt>;</empty_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_PenSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>width</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>height</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PenSize</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PenSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>width</name></expr></argument>,
	                      <argument><expr>&amp;<name>height</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>PenSize</name><argument_list>(<argument><expr><name>width</name></expr></argument>,
	        <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_PenMode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>mode</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PenMode</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PenMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>PenMode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_PenPat</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pattern</name> *</type><name>pat__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pat__in_len__</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PenPat</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PenPat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"s#"</expr></argument>,
	                      <argument><expr>(<name>char</name> **)&amp;<name>pat__in__</name></expr></argument>, <argument><expr>&amp;<name>pat__in_len__</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr><name>pat__in_len__</name> != <sizeof>sizeof<argument_list>(<argument><expr><name>Pattern</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"buffer length should be sizeof(Pattern)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>pat__error__</name>;</goto>
	}</block></then></if>
	<expr_stmt><expr><call><name>PenPat</name><argument_list>(<argument><expr><name>pat__in__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
 <label><name>pat__error__</name>:</label> <empty_stmt>;</empty_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_PenNormal</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PenNormal</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PenNormal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>PenNormal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MoveTo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>v</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MoveTo</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MoveTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>h</name></expr></argument>,
	                      <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MoveTo</name><argument_list>(<argument><expr><name>h</name></expr></argument>,
	       <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_Move</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Move</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>Move</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>dh</name></expr></argument>,
	                      <argument><expr>&amp;<name>dv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Move</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
	     <argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacLineTo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>v</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacLineTo</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacLineTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>h</name></expr></argument>,
	                      <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacLineTo</name><argument_list>(<argument><expr><name>h</name></expr></argument>,
	          <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_Line</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Line</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>Line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>dh</name></expr></argument>,
	                      <argument><expr>&amp;<name>dv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Line</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
	     <argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_ForeColor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>color</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ForeColor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ForeColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>color</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>ForeColor</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_BackColor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>color</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BackColor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>BackColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>color</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>BackColor</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_ColorBit</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>whichBit</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ColorBit</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ColorBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>whichBit</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>ColorBit</name><argument_list>(<argument><expr><name>whichBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacSetRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>left</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>top</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>right</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>bottom</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacSetRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacSetRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hhhh"</expr></argument>,
	                      <argument><expr>&amp;<name>left</name></expr></argument>,
	                      <argument><expr>&amp;<name>top</name></expr></argument>,
	                      <argument><expr>&amp;<name>right</name></expr></argument>,
	                      <argument><expr>&amp;<name>bottom</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacSetRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	           <argument><expr><name>left</name></expr></argument>,
	           <argument><expr><name>top</name></expr></argument>,
	           <argument><expr><name>right</name></expr></argument>,
	           <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacOffsetRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacOffsetRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacOffsetRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr>&amp;<name>dh</name></expr></argument>,
	                      <argument><expr>&amp;<name>dv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacOffsetRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	              <argument><expr><name>dh</name></expr></argument>,
	              <argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacInsetRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacInsetRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacInsetRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr>&amp;<name>dh</name></expr></argument>,
	                      <argument><expr>&amp;<name>dv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacInsetRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	             <argument><expr><name>dh</name></expr></argument>,
	             <argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SectRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>src1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>src2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>dstRect</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SectRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SectRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>src1</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>src2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>SectRect</name><argument_list>(<argument><expr>&amp;<name>src1</name></expr></argument>,
	               <argument><expr>&amp;<name>src2</name></expr></argument>,
	               <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"bO&amp;"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>,
	                     <argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacUnionRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>src1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>src2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>dstRect</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacUnionRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacUnionRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>src1</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>src2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacUnionRect</name><argument_list>(<argument><expr>&amp;<name>src1</name></expr></argument>,
	             <argument><expr>&amp;<name>src2</name></expr></argument>,
	             <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacEqualRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>rect1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>rect2</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacEqualRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacEqualRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>rect1</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>rect2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>MacEqualRect</name><argument_list>(<argument><expr>&amp;<name>rect1</name></expr></argument>,
	                   <argument><expr>&amp;<name>rect2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_EmptyRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EmptyRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>EmptyRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>EmptyRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacFrameRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacFrameRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacFrameRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacFrameRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_PaintRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PaintRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PaintRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>PaintRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_EraseRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EraseRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>EraseRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>EraseRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacInvertRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacInvertRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacInvertRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacInvertRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacFillRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pattern</name> *</type><name>pat__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pat__in_len__</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacFillRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacFillRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s#"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr>(<name>char</name> **)&amp;<name>pat__in__</name></expr></argument>, <argument><expr>&amp;<name>pat__in_len__</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr><name>pat__in_len__</name> != <sizeof>sizeof<argument_list>(<argument><expr><name>Pattern</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"buffer length should be sizeof(Pattern)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>pat__error__</name>;</goto>
	}</block></then></if>
	<expr_stmt><expr><call><name>MacFillRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	            <argument><expr><name>pat__in__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
 <label><name>pat__error__</name>:</label> <empty_stmt>;</empty_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_FrameOval</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FrameOval</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FrameOval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>FrameOval</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_PaintOval</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PaintOval</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PaintOval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>PaintOval</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_EraseOval</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EraseOval</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>EraseOval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>EraseOval</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_InvertOval</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InvertOval</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InvertOval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>InvertOval</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_FillOval</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pattern</name> *</type><name>pat__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pat__in_len__</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FillOval</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FillOval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s#"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr>(<name>char</name> **)&amp;<name>pat__in__</name></expr></argument>, <argument><expr>&amp;<name>pat__in_len__</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr><name>pat__in_len__</name> != <sizeof>sizeof<argument_list>(<argument><expr><name>Pattern</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"buffer length should be sizeof(Pattern)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>pat__error__</name>;</goto>
	}</block></then></if>
	<expr_stmt><expr><call><name>FillOval</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	         <argument><expr><name>pat__in__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
 <label><name>pat__error__</name>:</label> <empty_stmt>;</empty_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_FrameRoundRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>ovalWidth</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>ovalHeight</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FrameRoundRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FrameRoundRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr>&amp;<name>ovalWidth</name></expr></argument>,
	                      <argument><expr>&amp;<name>ovalHeight</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>FrameRoundRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	               <argument><expr><name>ovalWidth</name></expr></argument>,
	               <argument><expr><name>ovalHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_PaintRoundRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>ovalWidth</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>ovalHeight</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PaintRoundRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PaintRoundRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr>&amp;<name>ovalWidth</name></expr></argument>,
	                      <argument><expr>&amp;<name>ovalHeight</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>PaintRoundRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	               <argument><expr><name>ovalWidth</name></expr></argument>,
	               <argument><expr><name>ovalHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_EraseRoundRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>ovalWidth</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>ovalHeight</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EraseRoundRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>EraseRoundRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr>&amp;<name>ovalWidth</name></expr></argument>,
	                      <argument><expr>&amp;<name>ovalHeight</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>EraseRoundRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	               <argument><expr><name>ovalWidth</name></expr></argument>,
	               <argument><expr><name>ovalHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_InvertRoundRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>ovalWidth</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>ovalHeight</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InvertRoundRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InvertRoundRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr>&amp;<name>ovalWidth</name></expr></argument>,
	                      <argument><expr>&amp;<name>ovalHeight</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>InvertRoundRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	                <argument><expr><name>ovalWidth</name></expr></argument>,
	                <argument><expr><name>ovalHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_FillRoundRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>ovalWidth</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>ovalHeight</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pattern</name> *</type><name>pat__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pat__in_len__</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FillRoundRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FillRoundRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hhs#"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr>&amp;<name>ovalWidth</name></expr></argument>,
	                      <argument><expr>&amp;<name>ovalHeight</name></expr></argument>,
	                      <argument><expr>(<name>char</name> **)&amp;<name>pat__in__</name></expr></argument>, <argument><expr>&amp;<name>pat__in_len__</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr><name>pat__in_len__</name> != <sizeof>sizeof<argument_list>(<argument><expr><name>Pattern</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"buffer length should be sizeof(Pattern)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>pat__error__</name>;</goto>
	}</block></then></if>
	<expr_stmt><expr><call><name>FillRoundRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	              <argument><expr><name>ovalWidth</name></expr></argument>,
	              <argument><expr><name>ovalHeight</name></expr></argument>,
	              <argument><expr><name>pat__in__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
 <label><name>pat__error__</name>:</label> <empty_stmt>;</empty_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_FrameArc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>startAngle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>arcAngle</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FrameArc</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FrameArc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr>&amp;<name>startAngle</name></expr></argument>,
	                      <argument><expr>&amp;<name>arcAngle</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>FrameArc</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	         <argument><expr><name>startAngle</name></expr></argument>,
	         <argument><expr><name>arcAngle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_PaintArc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>startAngle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>arcAngle</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PaintArc</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PaintArc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr>&amp;<name>startAngle</name></expr></argument>,
	                      <argument><expr>&amp;<name>arcAngle</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>PaintArc</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	         <argument><expr><name>startAngle</name></expr></argument>,
	         <argument><expr><name>arcAngle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_EraseArc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>startAngle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>arcAngle</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EraseArc</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>EraseArc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr>&amp;<name>startAngle</name></expr></argument>,
	                      <argument><expr>&amp;<name>arcAngle</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>EraseArc</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	         <argument><expr><name>startAngle</name></expr></argument>,
	         <argument><expr><name>arcAngle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_InvertArc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>startAngle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>arcAngle</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InvertArc</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InvertArc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr>&amp;<name>startAngle</name></expr></argument>,
	                      <argument><expr>&amp;<name>arcAngle</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>InvertArc</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	          <argument><expr><name>startAngle</name></expr></argument>,
	          <argument><expr><name>arcAngle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_FillArc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>startAngle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>arcAngle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pattern</name> *</type><name>pat__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pat__in_len__</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FillArc</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FillArc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hhs#"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr>&amp;<name>startAngle</name></expr></argument>,
	                      <argument><expr>&amp;<name>arcAngle</name></expr></argument>,
	                      <argument><expr>(<name>char</name> **)&amp;<name>pat__in__</name></expr></argument>, <argument><expr>&amp;<name>pat__in_len__</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr><name>pat__in_len__</name> != <sizeof>sizeof<argument_list>(<argument><expr><name>Pattern</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"buffer length should be sizeof(Pattern)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>pat__error__</name>;</goto>
	}</block></then></if>
	<expr_stmt><expr><call><name>FillArc</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	        <argument><expr><name>startAngle</name></expr></argument>,
	        <argument><expr><name>arcAngle</name></expr></argument>,
	        <argument><expr><name>pat__in__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
 <label><name>pat__error__</name>:</label> <empty_stmt>;</empty_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_NewRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NewRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>NewRgn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_OpenRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OpenRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>OpenRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>OpenRgn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_CloseRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>dstRgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CloseRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CloseRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>CloseRgn</name><argument_list>(<argument><expr><name>dstRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_BitMapToRegion</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>region</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BitMapPtr</name></type> <name>bMap</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BitMapToRegion</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>BitMapToRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>region</name></expr></argument>,
	                      <argument><expr><name>BMObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>bMap</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>BitMapToRegion</name><argument_list>(<argument><expr><name>region</name></expr></argument>,
	                      <argument><expr><name>bMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_RgnToHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>region</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>flattenedRgnDataHdl</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RgnToHandle</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RgnToHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>region</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>flattenedRgnDataHdl</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>RgnToHandle</name><argument_list>(<argument><expr><name>region</name></expr></argument>,
	            <argument><expr><name>flattenedRgnDataHdl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_DisposeRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DisposeRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DisposeRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DisposeRgn</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacCopyRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>srcRgn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>dstRgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacCopyRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacCopyRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcRgn</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacCopyRgn</name><argument_list>(<argument><expr><name>srcRgn</name></expr></argument>,
	           <argument><expr><name>dstRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SetEmptyRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetEmptyRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetEmptyRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetEmptyRgn</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacSetRectRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>left</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>top</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>right</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>bottom</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacSetRectRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacSetRectRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hhhh"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>,
	                      <argument><expr>&amp;<name>left</name></expr></argument>,
	                      <argument><expr>&amp;<name>top</name></expr></argument>,
	                      <argument><expr>&amp;<name>right</name></expr></argument>,
	                      <argument><expr>&amp;<name>bottom</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacSetRectRgn</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>,
	              <argument><expr><name>left</name></expr></argument>,
	              <argument><expr><name>top</name></expr></argument>,
	              <argument><expr><name>right</name></expr></argument>,
	              <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_RectRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RectRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RectRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>RectRgn</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>,
	        <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacOffsetRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacOffsetRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacOffsetRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>,
	                      <argument><expr>&amp;<name>dh</name></expr></argument>,
	                      <argument><expr>&amp;<name>dv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacOffsetRgn</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>,
	             <argument><expr><name>dh</name></expr></argument>,
	             <argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_InsetRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InsetRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InsetRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>,
	                      <argument><expr>&amp;<name>dh</name></expr></argument>,
	                      <argument><expr>&amp;<name>dv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>InsetRgn</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>,
	         <argument><expr><name>dh</name></expr></argument>,
	         <argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SectRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>srcRgnA</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>srcRgnB</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>dstRgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SectRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SectRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcRgnA</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcRgnB</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SectRgn</name><argument_list>(<argument><expr><name>srcRgnA</name></expr></argument>,
	        <argument><expr><name>srcRgnB</name></expr></argument>,
	        <argument><expr><name>dstRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacUnionRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>srcRgnA</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>srcRgnB</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>dstRgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacUnionRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacUnionRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcRgnA</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcRgnB</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacUnionRgn</name><argument_list>(<argument><expr><name>srcRgnA</name></expr></argument>,
	            <argument><expr><name>srcRgnB</name></expr></argument>,
	            <argument><expr><name>dstRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_DiffRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>srcRgnA</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>srcRgnB</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>dstRgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DiffRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DiffRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcRgnA</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcRgnB</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DiffRgn</name><argument_list>(<argument><expr><name>srcRgnA</name></expr></argument>,
	        <argument><expr><name>srcRgnB</name></expr></argument>,
	        <argument><expr><name>dstRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacXorRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>srcRgnA</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>srcRgnB</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>dstRgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacXorRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacXorRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcRgnA</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcRgnB</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacXorRgn</name><argument_list>(<argument><expr><name>srcRgnA</name></expr></argument>,
	          <argument><expr><name>srcRgnB</name></expr></argument>,
	          <argument><expr><name>dstRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_RectInRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RectInRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RectInRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>RectInRgn</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	                <argument><expr><name>rgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacEqualRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgnA</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgnB</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacEqualRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacEqualRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgnA</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgnB</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>MacEqualRgn</name><argument_list>(<argument><expr><name>rgnA</name></expr></argument>,
	                  <argument><expr><name>rgnB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_EmptyRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EmptyRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>EmptyRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>EmptyRgn</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacFrameRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacFrameRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacFrameRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacFrameRgn</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacPaintRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacPaintRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacPaintRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacPaintRgn</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_EraseRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EraseRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>EraseRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>EraseRgn</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacInvertRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacInvertRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacInvertRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacInvertRgn</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacFillRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pattern</name> *</type><name>pat__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pat__in_len__</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacFillRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacFillRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s#"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>,
	                      <argument><expr>(<name>char</name> **)&amp;<name>pat__in__</name></expr></argument>, <argument><expr>&amp;<name>pat__in_len__</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr><name>pat__in_len__</name> != <sizeof>sizeof<argument_list>(<argument><expr><name>Pattern</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"buffer length should be sizeof(Pattern)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>pat__error__</name>;</goto>
	}</block></then></if>
	<expr_stmt><expr><call><name>MacFillRgn</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>,
	           <argument><expr><name>pat__in__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
 <label><name>pat__error__</name>:</label> <empty_stmt>;</empty_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_ScrollRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>updateRgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ScrollRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ScrollRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hhO&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr>&amp;<name>dh</name></expr></argument>,
	                      <argument><expr>&amp;<name>dv</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>updateRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>ScrollRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	           <argument><expr><name>dh</name></expr></argument>,
	           <argument><expr><name>dv</name></expr></argument>,
	           <argument><expr><name>updateRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_CopyBits</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BitMapPtr</name></type> <name>srcBits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BitMapPtr</name></type> <name>dstBits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>srcRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>dstRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>mode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>maskRgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CopyBits</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CopyBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;O&amp;hO&amp;"</expr></argument>,
	                      <argument><expr><name>BMObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcBits</name></expr></argument>,
	                      <argument><expr><name>BMObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstBits</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>srcRect</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>dstRect</name></expr></argument>,
	                      <argument><expr>&amp;<name>mode</name></expr></argument>,
	                      <argument><expr><name>OptResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>maskRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>CopyBits</name><argument_list>(<argument><expr><name>srcBits</name></expr></argument>,
	         <argument><expr><name>dstBits</name></expr></argument>,
	         <argument><expr>&amp;<name>srcRect</name></expr></argument>,
	         <argument><expr>&amp;<name>dstRect</name></expr></argument>,
	         <argument><expr><name>mode</name></expr></argument>,
	         <argument><expr><name>maskRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_CopyMask</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BitMapPtr</name></type> <name>srcBits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BitMapPtr</name></type> <name>maskBits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BitMapPtr</name></type> <name>dstBits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>srcRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>maskRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>dstRect</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CopyMask</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CopyMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>BMObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcBits</name></expr></argument>,
	                      <argument><expr><name>BMObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>maskBits</name></expr></argument>,
	                      <argument><expr><name>BMObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstBits</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>srcRect</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>maskRect</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>CopyMask</name><argument_list>(<argument><expr><name>srcBits</name></expr></argument>,
	         <argument><expr><name>maskBits</name></expr></argument>,
	         <argument><expr><name>dstBits</name></expr></argument>,
	         <argument><expr>&amp;<name>srcRect</name></expr></argument>,
	         <argument><expr>&amp;<name>maskRect</name></expr></argument>,
	         <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_OpenPicture</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PicHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>picFrame</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OpenPicture</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>OpenPicture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>picFrame</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>OpenPicture</name><argument_list>(<argument><expr>&amp;<name>picFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_PicComment</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>kind</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dataSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>dataHandle</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PicComment</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PicComment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hhO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>kind</name></expr></argument>,
	                      <argument><expr>&amp;<name>dataSize</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataHandle</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>PicComment</name><argument_list>(<argument><expr><name>kind</name></expr></argument>,
	           <argument><expr><name>dataSize</name></expr></argument>,
	           <argument><expr><name>dataHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_ClosePicture</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ClosePicture</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ClosePicture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>ClosePicture</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_DrawPicture</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PicHandle</name></type> <name>myPicture</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>dstRect</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DrawPicture</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DrawPicture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>myPicture</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DrawPicture</name><argument_list>(<argument><expr><name>myPicture</name></expr></argument>,
	            <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_KillPicture</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PicHandle</name></type> <name>myPicture</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>KillPicture</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>KillPicture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>myPicture</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>KillPicture</name><argument_list>(<argument><expr><name>myPicture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_OpenPoly</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PolyHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OpenPoly</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>OpenPoly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>OpenPoly</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_ClosePoly</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ClosePoly</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ClosePoly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>ClosePoly</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_KillPoly</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PolyHandle</name></type> <name>poly</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>KillPoly</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>KillPoly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>poly</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>KillPoly</name><argument_list>(<argument><expr><name>poly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_OffsetPoly</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PolyHandle</name></type> <name>poly</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OffsetPoly</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>OffsetPoly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>poly</name></expr></argument>,
	                      <argument><expr>&amp;<name>dh</name></expr></argument>,
	                      <argument><expr>&amp;<name>dv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>OffsetPoly</name><argument_list>(<argument><expr><name>poly</name></expr></argument>,
	           <argument><expr><name>dh</name></expr></argument>,
	           <argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_FramePoly</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PolyHandle</name></type> <name>poly</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FramePoly</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FramePoly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>poly</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>FramePoly</name><argument_list>(<argument><expr><name>poly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_PaintPoly</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PolyHandle</name></type> <name>poly</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PaintPoly</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PaintPoly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>poly</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>PaintPoly</name><argument_list>(<argument><expr><name>poly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_ErasePoly</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PolyHandle</name></type> <name>poly</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ErasePoly</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ErasePoly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>poly</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>ErasePoly</name><argument_list>(<argument><expr><name>poly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_InvertPoly</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PolyHandle</name></type> <name>poly</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InvertPoly</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InvertPoly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>poly</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>InvertPoly</name><argument_list>(<argument><expr><name>poly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_FillPoly</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PolyHandle</name></type> <name>poly</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pattern</name> *</type><name>pat__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pat__in_len__</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FillPoly</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FillPoly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s#"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>poly</name></expr></argument>,
	                      <argument><expr>(<name>char</name> **)&amp;<name>pat__in__</name></expr></argument>, <argument><expr>&amp;<name>pat__in_len__</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr><name>pat__in_len__</name> != <sizeof>sizeof<argument_list>(<argument><expr><name>Pattern</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"buffer length should be sizeof(Pattern)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>pat__error__</name>;</goto>
	}</block></then></if>
	<expr_stmt><expr><call><name>FillPoly</name><argument_list>(<argument><expr><name>poly</name></expr></argument>,
	         <argument><expr><name>pat__in__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
 <label><name>pat__error__</name>:</label> <empty_stmt>;</empty_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SetPt</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>pt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>v</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetPt</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetPt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>h</name></expr></argument>,
	                      <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetPt</name><argument_list>(<argument><expr>&amp;<name>pt</name></expr></argument>,
	      <argument><expr><name>h</name></expr></argument>,
	      <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LocalToGlobal</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>pt</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LocalToGlobal</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LocalToGlobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>pt</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LocalToGlobal</name><argument_list>(<argument><expr>&amp;<name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GlobalToLocal</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>pt</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GlobalToLocal</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GlobalToLocal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>pt</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GlobalToLocal</name><argument_list>(<argument><expr>&amp;<name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_Random</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Random</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>Random</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>Random</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacGetPixel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>v</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacGetPixel</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacGetPixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>h</name></expr></argument>,
	                      <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>MacGetPixel</name><argument_list>(<argument><expr><name>h</name></expr></argument>,
	                  <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_ScalePt</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>pt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>srcRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>dstRect</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ScalePt</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ScalePt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>pt</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>srcRect</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>ScalePt</name><argument_list>(<argument><expr>&amp;<name>pt</name></expr></argument>,
	        <argument><expr>&amp;<name>srcRect</name></expr></argument>,
	        <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MapPt</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>pt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>srcRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>dstRect</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MapPt</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MapPt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>pt</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>srcRect</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MapPt</name><argument_list>(<argument><expr>&amp;<name>pt</name></expr></argument>,
	      <argument><expr>&amp;<name>srcRect</name></expr></argument>,
	      <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MapRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>srcRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>dstRect</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MapRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MapRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>srcRect</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MapRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	        <argument><expr>&amp;<name>srcRect</name></expr></argument>,
	        <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MapRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>srcRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>dstRect</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MapRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MapRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>srcRect</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MapRgn</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>,
	       <argument><expr>&amp;<name>srcRect</name></expr></argument>,
	       <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MapPoly</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PolyHandle</name></type> <name>poly</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>srcRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>dstRect</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MapPoly</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MapPoly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>poly</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>srcRect</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MapPoly</name><argument_list>(<argument><expr><name>poly</name></expr></argument>,
	        <argument><expr>&amp;<name>srcRect</name></expr></argument>,
	        <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_StdBits</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BitMapPtr</name></type> <name>srcBits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>srcRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>dstRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>mode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>maskRgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>StdBits</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>StdBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;hO&amp;"</expr></argument>,
	                      <argument><expr><name>BMObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcBits</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>srcRect</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>dstRect</name></expr></argument>,
	                      <argument><expr>&amp;<name>mode</name></expr></argument>,
	                      <argument><expr><name>OptResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>maskRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>StdBits</name><argument_list>(<argument><expr><name>srcBits</name></expr></argument>,
	        <argument><expr>&amp;<name>srcRect</name></expr></argument>,
	        <argument><expr>&amp;<name>dstRect</name></expr></argument>,
	        <argument><expr><name>mode</name></expr></argument>,
	        <argument><expr><name>maskRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_AddPt</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>src</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>dst</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AddPt</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AddPt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>AddPt</name><argument_list>(<argument><expr><name>src</name></expr></argument>,
	      <argument><expr>&amp;<name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_EqualPt</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>pt1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>pt2</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EqualPt</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>EqualPt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>pt1</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>pt2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>EqualPt</name><argument_list>(<argument><expr><name>pt1</name></expr></argument>,
	              <argument><expr><name>pt2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacPtInRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>pt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacPtInRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacPtInRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>pt</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>MacPtInRect</name><argument_list>(<argument><expr><name>pt</name></expr></argument>,
	                  <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_Pt2Rect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>pt1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>pt2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>dstRect</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Pt2Rect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>Pt2Rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>pt1</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>pt2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Pt2Rect</name><argument_list>(<argument><expr><name>pt1</name></expr></argument>,
	        <argument><expr><name>pt2</name></expr></argument>,
	        <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_PtToAngle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>pt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>angle</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PtToAngle</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PtToAngle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>pt</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>PtToAngle</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	          <argument><expr><name>pt</name></expr></argument>,
	          <argument><expr>&amp;<name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SubPt</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>src</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>dst</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SubPt</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SubPt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SubPt</name><argument_list>(<argument><expr><name>src</name></expr></argument>,
	      <argument><expr>&amp;<name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_PtInRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>pt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PtInRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PtInRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>pt</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>PtInRgn</name><argument_list>(<argument><expr><name>pt</name></expr></argument>,
	              <argument><expr><name>rgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_NewPixMap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NewPixMap</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewPixMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>NewPixMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_DisposePixMap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>pm</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DisposePixMap</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DisposePixMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pm</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DisposePixMap</name><argument_list>(<argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_CopyPixMap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>srcPM</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>dstPM</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CopyPixMap</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CopyPixMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcPM</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstPM</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>CopyPixMap</name><argument_list>(<argument><expr><name>srcPM</name></expr></argument>,
	           <argument><expr><name>dstPM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_NewPixPat</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NewPixPat</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewPixPat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>NewPixPat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_DisposePixPat</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>pp</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DisposePixPat</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DisposePixPat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DisposePixPat</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_CopyPixPat</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>srcPP</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>dstPP</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CopyPixPat</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CopyPixPat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcPP</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstPP</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>CopyPixPat</name><argument_list>(<argument><expr><name>srcPP</name></expr></argument>,
	           <argument><expr><name>dstPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_PenPixPat</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>pp</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PenPixPat</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PenPixPat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>PenPixPat</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_BackPixPat</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>pp</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BackPixPat</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>BackPixPat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>BackPixPat</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetPixPat</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>patID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPixPat</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPixPat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>patID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetPixPat</name><argument_list>(<argument><expr><name>patID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MakeRGBPat</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>pp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>myColor</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MakeRGBPat</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MakeRGBPat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pp</name></expr></argument>,
	                      <argument><expr><name>QdRGB_Convert</name></expr></argument>, <argument><expr>&amp;<name>myColor</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MakeRGBPat</name><argument_list>(<argument><expr><name>pp</name></expr></argument>,
	           <argument><expr>&amp;<name>myColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_FillCRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>pp</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FillCRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FillCRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>FillCRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	          <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_FillCOval</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>pp</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FillCOval</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FillCOval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>FillCOval</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	          <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_FillCRoundRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>ovalWidth</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>ovalHeight</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>pp</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FillCRoundRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FillCRoundRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hhO&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr>&amp;<name>ovalWidth</name></expr></argument>,
	                      <argument><expr>&amp;<name>ovalHeight</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>FillCRoundRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	               <argument><expr><name>ovalWidth</name></expr></argument>,
	               <argument><expr><name>ovalHeight</name></expr></argument>,
	               <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_FillCArc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>startAngle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>arcAngle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>pp</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FillCArc</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FillCArc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hhO&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr>&amp;<name>startAngle</name></expr></argument>,
	                      <argument><expr>&amp;<name>arcAngle</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>FillCArc</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	         <argument><expr><name>startAngle</name></expr></argument>,
	         <argument><expr><name>arcAngle</name></expr></argument>,
	         <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_FillCRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>pp</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FillCRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FillCRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>FillCRgn</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>,
	         <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_FillCPoly</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PolyHandle</name></type> <name>poly</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixPatHandle</name></type> <name>pp</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FillCPoly</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FillCPoly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>poly</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>FillCPoly</name><argument_list>(<argument><expr><name>poly</name></expr></argument>,
	          <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_RGBForeColor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>color</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RGBForeColor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RGBForeColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>QdRGB_Convert</name></expr></argument>, <argument><expr>&amp;<name>color</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>RGBForeColor</name><argument_list>(<argument><expr>&amp;<name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_RGBBackColor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>color</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RGBBackColor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RGBBackColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>QdRGB_Convert</name></expr></argument>, <argument><expr>&amp;<name>color</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>RGBBackColor</name><argument_list>(<argument><expr>&amp;<name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SetCPixel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>cPix</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetCPixel</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetCPixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hhO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>h</name></expr></argument>,
	                      <argument><expr>&amp;<name>v</name></expr></argument>,
	                      <argument><expr><name>QdRGB_Convert</name></expr></argument>, <argument><expr>&amp;<name>cPix</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetCPixel</name><argument_list>(<argument><expr><name>h</name></expr></argument>,
	          <argument><expr><name>v</name></expr></argument>,
	          <argument><expr>&amp;<name>cPix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SetPortPix</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>pm</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetPortPix</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetPortPix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pm</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetPortPix</name><argument_list>(<argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetCPixel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>cPix</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetCPixel</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetCPixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>h</name></expr></argument>,
	                      <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetCPixel</name><argument_list>(<argument><expr><name>h</name></expr></argument>,
	          <argument><expr><name>v</name></expr></argument>,
	          <argument><expr>&amp;<name>cPix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>cPix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetForeColor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>color</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetForeColor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetForeColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetForeColor</name><argument_list>(<argument><expr>&amp;<name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetBackColor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>color</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetBackColor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetBackColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetBackColor</name><argument_list>(<argument><expr>&amp;<name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_OpColor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>color</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OpColor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>OpColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>QdRGB_Convert</name></expr></argument>, <argument><expr>&amp;<name>color</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>OpColor</name><argument_list>(<argument><expr>&amp;<name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_HiliteColor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>color</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HiliteColor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>HiliteColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>QdRGB_Convert</name></expr></argument>, <argument><expr>&amp;<name>color</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>HiliteColor</name><argument_list>(<argument><expr>&amp;<name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_DisposeCTable</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CTabHandle</name></type> <name>cTable</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DisposeCTable</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DisposeCTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>cTable</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DisposeCTable</name><argument_list>(<argument><expr><name>cTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetCTable</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CTabHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>ctID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetCTable</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetCTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>ctID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetCTable</name><argument_list>(<argument><expr><name>ctID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetCCursor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CCrsrHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>crsrID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetCCursor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetCCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>crsrID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetCCursor</name><argument_list>(<argument><expr><name>crsrID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SetCCursor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CCrsrHandle</name></type> <name>cCrsr</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetCCursor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetCCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>cCrsr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetCCursor</name><argument_list>(<argument><expr><name>cCrsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_AllocCursor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AllocCursor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AllocCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>AllocCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_DisposeCCursor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CCrsrHandle</name></type> <name>cCrsr</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DisposeCCursor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DisposeCCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>cCrsr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DisposeCCursor</name><argument_list>(<argument><expr><name>cCrsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetMaxDevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GDHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>globalRect</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMaxDevice</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMaxDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>globalRect</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetMaxDevice</name><argument_list>(<argument><expr>&amp;<name>globalRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetCTSeed</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetCTSeed</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetCTSeed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetCTSeed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetDeviceList</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GDHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetDeviceList</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetDeviceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetDeviceList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetMainDevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GDHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMainDevice</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMainDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetMainDevice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetNextDevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GDHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GDHandle</name></type> <name>curDevice</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetNextDevice</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetNextDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>curDevice</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetNextDevice</name><argument_list>(<argument><expr><name>curDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_TestDeviceAttribute</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GDHandle</name></type> <name>gdh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>attribute</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>TestDeviceAttribute</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TestDeviceAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gdh</name></expr></argument>,
	                      <argument><expr>&amp;<name>attribute</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>TestDeviceAttribute</name><argument_list>(<argument><expr><name>gdh</name></expr></argument>,
	                          <argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SetDeviceAttribute</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GDHandle</name></type> <name>gdh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>attribute</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>value</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetDeviceAttribute</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetDeviceAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hb"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gdh</name></expr></argument>,
	                      <argument><expr>&amp;<name>attribute</name></expr></argument>,
	                      <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetDeviceAttribute</name><argument_list>(<argument><expr><name>gdh</name></expr></argument>,
	                   <argument><expr><name>attribute</name></expr></argument>,
	                   <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_InitGDevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>qdRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>mode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GDHandle</name></type> <name>gdh</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InitGDevice</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InitGDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hlO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>qdRefNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>mode</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gdh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>InitGDevice</name><argument_list>(<argument><expr><name>qdRefNum</name></expr></argument>,
	            <argument><expr><name>mode</name></expr></argument>,
	            <argument><expr><name>gdh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_NewGDevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GDHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>refNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>mode</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NewGDevice</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewGDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hl"</expr></argument>,
	                      <argument><expr>&amp;<name>refNum</name></expr></argument>,
	                      <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>NewGDevice</name><argument_list>(<argument><expr><name>refNum</name></expr></argument>,
	                 <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_DisposeGDevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GDHandle</name></type> <name>gdh</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DisposeGDevice</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DisposeGDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gdh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DisposeGDevice</name><argument_list>(<argument><expr><name>gdh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SetGDevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GDHandle</name></type> <name>gd</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetGDevice</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetGDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gd</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetGDevice</name><argument_list>(<argument><expr><name>gd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetGDevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GDHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetGDevice</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetGDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetGDevice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_Color2Index</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>myColor</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Color2Index</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>Color2Index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>QdRGB_Convert</name></expr></argument>, <argument><expr>&amp;<name>myColor</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>Color2Index</name><argument_list>(<argument><expr>&amp;<name>myColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_Index2Color</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>aColor</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Index2Color</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>Index2Color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Index2Color</name><argument_list>(<argument><expr><name>index</name></expr></argument>,
	            <argument><expr>&amp;<name>aColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>aColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_InvertColor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>myColor</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InvertColor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InvertColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>InvertColor</name><argument_list>(<argument><expr>&amp;<name>myColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>myColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_RealColor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>color</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RealColor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RealColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>QdRGB_Convert</name></expr></argument>, <argument><expr>&amp;<name>color</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>RealColor</name><argument_list>(<argument><expr>&amp;<name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetSubTable</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CTabHandle</name></type> <name>myColors</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>iTabRes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CTabHandle</name></type> <name>targetTbl</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetSubTable</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetSubTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hO&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>myColors</name></expr></argument>,
	                      <argument><expr>&amp;<name>iTabRes</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>targetTbl</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetSubTable</name><argument_list>(<argument><expr><name>myColors</name></expr></argument>,
	            <argument><expr><name>iTabRes</name></expr></argument>,
	            <argument><expr><name>targetTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MakeITable</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CTabHandle</name></type> <name>cTabH</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ITabHandle</name></type> <name>iTabH</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>res</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MakeITable</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MakeITable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;h"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>cTabH</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>iTabH</name></expr></argument>,
	                      <argument><expr>&amp;<name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MakeITable</name><argument_list>(<argument><expr><name>cTabH</name></expr></argument>,
	           <argument><expr><name>iTabH</name></expr></argument>,
	           <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SetClientID</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>id</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetClientID</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetClientID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetClientID</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_ProtectEntry</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>protect</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ProtectEntry</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ProtectEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hb"</expr></argument>,
	                      <argument><expr>&amp;<name>index</name></expr></argument>,
	                      <argument><expr>&amp;<name>protect</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>ProtectEntry</name><argument_list>(<argument><expr><name>index</name></expr></argument>,
	             <argument><expr><name>protect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_ReserveEntry</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>reserve</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ReserveEntry</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ReserveEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hb"</expr></argument>,
	                      <argument><expr>&amp;<name>index</name></expr></argument>,
	                      <argument><expr>&amp;<name>reserve</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>ReserveEntry</name><argument_list>(<argument><expr><name>index</name></expr></argument>,
	             <argument><expr><name>reserve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_QDError</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>QDError</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QDError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>QDError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_CopyDeepMask</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BitMapPtr</name></type> <name>srcBits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BitMapPtr</name></type> <name>maskBits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BitMapPtr</name></type> <name>dstBits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>srcRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>maskRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>dstRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>mode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>maskRgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CopyDeepMask</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CopyDeepMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;O&amp;O&amp;O&amp;hO&amp;"</expr></argument>,
	                      <argument><expr><name>BMObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcBits</name></expr></argument>,
	                      <argument><expr><name>BMObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>maskBits</name></expr></argument>,
	                      <argument><expr><name>BMObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstBits</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>srcRect</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>maskRect</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>dstRect</name></expr></argument>,
	                      <argument><expr>&amp;<name>mode</name></expr></argument>,
	                      <argument><expr><name>OptResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>maskRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>CopyDeepMask</name><argument_list>(<argument><expr><name>srcBits</name></expr></argument>,
	             <argument><expr><name>maskBits</name></expr></argument>,
	             <argument><expr><name>dstBits</name></expr></argument>,
	             <argument><expr>&amp;<name>srcRect</name></expr></argument>,
	             <argument><expr>&amp;<name>maskRect</name></expr></argument>,
	             <argument><expr>&amp;<name>dstRect</name></expr></argument>,
	             <argument><expr><name>mode</name></expr></argument>,
	             <argument><expr><name>maskRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetPattern</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PatHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>patternID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPattern</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>patternID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetPattern</name><argument_list>(<argument><expr><name>patternID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacGetCursor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CursHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>cursorID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacGetCursor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacGetCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>cursorID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>MacGetCursor</name><argument_list>(<argument><expr><name>cursorID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetPicture</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PicHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>pictureID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPicture</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPicture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>pictureID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetPicture</name><argument_list>(<argument><expr><name>pictureID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_DeltaPoint</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>ptA</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>ptB</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DeltaPoint</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DeltaPoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>ptA</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>ptB</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>DeltaPoint</name><argument_list>(<argument><expr><name>ptA</name></expr></argument>,
	                 <argument><expr><name>ptB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_ShieldCursor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>shieldRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>offsetPt</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ShieldCursor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ShieldCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>shieldRect</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>offsetPt</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>ShieldCursor</name><argument_list>(<argument><expr>&amp;<name>shieldRect</name></expr></argument>,
	             <argument><expr><name>offsetPt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_ScreenRes</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>scrnHRes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>scrnVRes</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ScreenRes</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ScreenRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>ScreenRes</name><argument_list>(<argument><expr>&amp;<name>scrnHRes</name></expr></argument>,
	          <argument><expr>&amp;<name>scrnVRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"hh"</expr></argument>,
	                     <argument><expr><name>scrnHRes</name></expr></argument>,
	                     <argument><expr><name>scrnVRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetIndPattern</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pattern</name></type> <name>thePat__out__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>patternListID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>index</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetIndPattern</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetIndPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>patternListID</name></expr></argument>,
	                      <argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetIndPattern</name><argument_list>(<argument><expr>&amp;<name>thePat__out__</name></expr></argument>,
	              <argument><expr><name>patternListID</name></expr></argument>,
	              <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"s#"</expr></argument>,
	                     <argument><expr>(<name>char</name> *)&amp;<name>thePat__out__</name></expr></argument>, <argument><expr>(<name>int</name>)<sizeof>sizeof<argument_list>(<argument><expr><name>Pattern</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SlopeFromAngle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Fixed</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>angle</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SlopeFromAngle</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SlopeFromAngle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>angle</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>SlopeFromAngle</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_AngleFromSlope</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Fixed</name></type> <name>slope</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AngleFromSlope</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AngleFromSlope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>slope</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>AngleFromSlope</name><argument_list>(<argument><expr><name>slope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetPixBounds</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>pixMap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>bounds</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPixBounds</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPixBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pixMap</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetPixBounds</name><argument_list>(<argument><expr><name>pixMap</name></expr></argument>,
	             <argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetPixDepth</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>pixMap</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPixDepth</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPixDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pixMap</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetPixDepth</name><argument_list>(<argument><expr><name>pixMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetQDGlobalsRandomSeed</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetQDGlobalsRandomSeed</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetQDGlobalsRandomSeed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetQDGlobalsRandomSeed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetQDGlobalsScreenBits</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BitMap</name></type> <name>screenBits</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetQDGlobalsScreenBits</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetQDGlobalsScreenBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetQDGlobalsScreenBits</name><argument_list>(<argument><expr>&amp;<name>screenBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>BMObj_NewCopied</name></expr></argument>, <argument><expr>&amp;<name>screenBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetQDGlobalsArrow</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cursor</name></type> <name>arrow__out__</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetQDGlobalsArrow</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetQDGlobalsArrow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetQDGlobalsArrow</name><argument_list>(<argument><expr>&amp;<name>arrow__out__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"s#"</expr></argument>,
	                     <argument><expr>(<name>char</name> *)&amp;<name>arrow__out__</name></expr></argument>, <argument><expr>(<name>int</name>)<sizeof>sizeof<argument_list>(<argument><expr><name>Cursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetQDGlobalsDarkGray</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pattern</name></type> <name>dkGray__out__</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetQDGlobalsDarkGray</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetQDGlobalsDarkGray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetQDGlobalsDarkGray</name><argument_list>(<argument><expr>&amp;<name>dkGray__out__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"s#"</expr></argument>,
	                     <argument><expr>(<name>char</name> *)&amp;<name>dkGray__out__</name></expr></argument>, <argument><expr>(<name>int</name>)<sizeof>sizeof<argument_list>(<argument><expr><name>Pattern</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetQDGlobalsLightGray</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pattern</name></type> <name>ltGray__out__</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetQDGlobalsLightGray</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetQDGlobalsLightGray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetQDGlobalsLightGray</name><argument_list>(<argument><expr>&amp;<name>ltGray__out__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"s#"</expr></argument>,
	                     <argument><expr>(<name>char</name> *)&amp;<name>ltGray__out__</name></expr></argument>, <argument><expr>(<name>int</name>)<sizeof>sizeof<argument_list>(<argument><expr><name>Pattern</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetQDGlobalsGray</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pattern</name></type> <name>gray__out__</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetQDGlobalsGray</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetQDGlobalsGray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetQDGlobalsGray</name><argument_list>(<argument><expr>&amp;<name>gray__out__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"s#"</expr></argument>,
	                     <argument><expr>(<name>char</name> *)&amp;<name>gray__out__</name></expr></argument>, <argument><expr>(<name>int</name>)<sizeof>sizeof<argument_list>(<argument><expr><name>Pattern</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetQDGlobalsBlack</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pattern</name></type> <name>black__out__</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetQDGlobalsBlack</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetQDGlobalsBlack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetQDGlobalsBlack</name><argument_list>(<argument><expr>&amp;<name>black__out__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"s#"</expr></argument>,
	                     <argument><expr>(<name>char</name> *)&amp;<name>black__out__</name></expr></argument>, <argument><expr>(<name>int</name>)<sizeof>sizeof<argument_list>(<argument><expr><name>Pattern</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetQDGlobalsWhite</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pattern</name></type> <name>white__out__</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetQDGlobalsWhite</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetQDGlobalsWhite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetQDGlobalsWhite</name><argument_list>(<argument><expr>&amp;<name>white__out__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"s#"</expr></argument>,
	                     <argument><expr>(<name>char</name> *)&amp;<name>white__out__</name></expr></argument>, <argument><expr>(<name>int</name>)<sizeof>sizeof<argument_list>(<argument><expr><name>Pattern</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetQDGlobalsThePort</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CGrafPtr</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetQDGlobalsThePort</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetQDGlobalsThePort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetQDGlobalsThePort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>GrafObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SetQDGlobalsRandomSeed</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>randomSeed</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetQDGlobalsRandomSeed</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetQDGlobalsRandomSeed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>randomSeed</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetQDGlobalsRandomSeed</name><argument_list>(<argument><expr><name>randomSeed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SetQDGlobalsArrow</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cursor</name> *</type><name>arrow__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>arrow__in_len__</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetQDGlobalsArrow</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetQDGlobalsArrow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"s#"</expr></argument>,
	                      <argument><expr>(<name>char</name> **)&amp;<name>arrow__in__</name></expr></argument>, <argument><expr>&amp;<name>arrow__in_len__</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr><name>arrow__in_len__</name> != <sizeof>sizeof<argument_list>(<argument><expr><name>Cursor</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"buffer length should be sizeof(Cursor)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>arrow__error__</name>;</goto>
	}</block></then></if>
	<expr_stmt><expr><call><name>SetQDGlobalsArrow</name><argument_list>(<argument><expr><name>arrow__in__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
 <label><name>arrow__error__</name>:</label> <empty_stmt>;</empty_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetRegionBounds</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>region</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>bounds</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetRegionBounds</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetRegionBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>region</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetRegionBounds</name><argument_list>(<argument><expr><name>region</name></expr></argument>,
	                <argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_IsRegionRectangular</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>region</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsRegionRectangular</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsRegionRectangular</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>region</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>IsRegionRectangular</name><argument_list>(<argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_CreateNewPort</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CGrafPtr</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CreateNewPort</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CreateNewPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>CreateNewPort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>GrafObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SetQDError</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetQDError</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetQDError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetQDError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMGetScrVRes</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMGetScrVRes</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMGetScrVRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>LMGetScrVRes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMSetScrVRes</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>value</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMSetScrVRes</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMSetScrVRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LMSetScrVRes</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMGetScrHRes</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMGetScrHRes</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMGetScrHRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>LMGetScrHRes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMSetScrHRes</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>value</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMSetScrHRes</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMSetScrHRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LMSetScrHRes</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMGetMainDevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GDHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMGetMainDevice</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMGetMainDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>LMGetMainDevice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMSetMainDevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GDHandle</name></type> <name>value</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMSetMainDevice</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMSetMainDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LMSetMainDevice</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMGetDeviceList</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GDHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMGetDeviceList</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMGetDeviceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>LMGetDeviceList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMSetDeviceList</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GDHandle</name></type> <name>value</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMSetDeviceList</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMSetDeviceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LMSetDeviceList</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMGetQDColors</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMGetQDColors</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMGetQDColors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>LMGetQDColors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMSetQDColors</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>value</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMSetQDColors</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMSetQDColors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LMSetQDColors</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMGetWidthListHand</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMGetWidthListHand</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMGetWidthListHand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>LMGetWidthListHand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMSetWidthListHand</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>value</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMSetWidthListHand</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMSetWidthListHand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LMSetWidthListHand</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMGetHiliteMode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt8</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMGetHiliteMode</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMGetHiliteMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>LMGetHiliteMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMSetHiliteMode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt8</name></type> <name>value</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMSetHiliteMode</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMSetHiliteMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"b"</expr></argument>,
	                      <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LMSetHiliteMode</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMGetWidthTabHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMGetWidthTabHandle</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMGetWidthTabHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>LMGetWidthTabHandle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMSetWidthTabHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>value</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMSetWidthTabHandle</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMSetWidthTabHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LMSetWidthTabHandle</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMGetLastSPExtra</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt32</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMGetLastSPExtra</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMGetLastSPExtra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>LMGetLastSPExtra</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMSetLastSPExtra</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt32</name></type> <name>value</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMSetLastSPExtra</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMSetLastSPExtra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LMSetLastSPExtra</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMGetLastFOND</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMGetLastFOND</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMGetLastFOND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>LMGetLastFOND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMSetLastFOND</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>value</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMSetLastFOND</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMSetLastFOND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LMSetLastFOND</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMGetFractEnable</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt8</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMGetFractEnable</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMGetFractEnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>LMGetFractEnable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMSetFractEnable</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt8</name></type> <name>value</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMSetFractEnable</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMSetFractEnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"b"</expr></argument>,
	                      <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LMSetFractEnable</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMGetTheGDevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GDHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMGetTheGDevice</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMGetTheGDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>LMGetTheGDevice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMSetTheGDevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GDHandle</name></type> <name>value</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMSetTheGDevice</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMSetTheGDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LMSetTheGDevice</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMGetHiliteRGB</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>hiliteRGBValue</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMGetHiliteRGB</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMGetHiliteRGB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LMGetHiliteRGB</name><argument_list>(<argument><expr>&amp;<name>hiliteRGBValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>hiliteRGBValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMSetHiliteRGB</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>hiliteRGBValue</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMSetHiliteRGB</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMSetHiliteRGB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>QdRGB_Convert</name></expr></argument>, <argument><expr>&amp;<name>hiliteRGBValue</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LMSetHiliteRGB</name><argument_list>(<argument><expr>&amp;<name>hiliteRGBValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMGetCursorNew</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMGetCursorNew</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMGetCursorNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>LMGetCursorNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LMSetCursorNew</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>value</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMSetCursorNew</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMSetCursorNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"b"</expr></argument>,
	                      <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LMSetCursorNew</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_TextFont</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>font</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>TextFont</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TextFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>font</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>TextFont</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_TextFace</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StyleParameter</name></type> <name>face</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>TextFace</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TextFace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>face</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>TextFace</name><argument_list>(<argument><expr><name>face</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_TextMode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>mode</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>TextMode</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TextMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>TextMode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_TextSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>size</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>TextSize</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TextSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>TextSize</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SpaceExtra</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Fixed</name></type> <name>extra</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SpaceExtra</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpaceExtra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>extra</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SpaceExtra</name><argument_list>(<argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_DrawChar</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CharParameter</name></type> <name>ch</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DrawChar</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DrawChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DrawChar</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_DrawString</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>s</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DrawString</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DrawString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DrawString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_MacDrawText</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>textBuf__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>textBuf__in_len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>firstByte</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>byteCount</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacDrawText</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacDrawText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"s#hh"</expr></argument>,
	                      <argument><expr>&amp;<name>textBuf__in__</name></expr></argument>, <argument><expr>&amp;<name>textBuf__in_len__</name></expr></argument>,
	                      <argument><expr>&amp;<name>firstByte</name></expr></argument>,
	                      <argument><expr>&amp;<name>byteCount</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<comment type="block">/* Fool compiler warnings */</comment>
	<expr_stmt><expr><name>textBuf__in_len__</name> = <name>textBuf__in_len__</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MacDrawText</name><argument_list>(<argument><expr><name>textBuf__in__</name></expr></argument>,
	            <argument><expr><name>firstByte</name></expr></argument>,
	            <argument><expr><name>byteCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_CharWidth</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CharParameter</name></type> <name>ch</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CharWidth</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CharWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>CharWidth</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_StringWidth</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>s</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>StringWidth</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>StringWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>StringWidth</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_TextWidth</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>textBuf__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>textBuf__in_len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>firstByte</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>byteCount</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>TextWidth</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TextWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"s#hh"</expr></argument>,
	                      <argument><expr>&amp;<name>textBuf__in__</name></expr></argument>, <argument><expr>&amp;<name>textBuf__in_len__</name></expr></argument>,
	                      <argument><expr>&amp;<name>firstByte</name></expr></argument>,
	                      <argument><expr>&amp;<name>byteCount</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<comment type="block">/* Fool compiler warnings */</comment>
	<expr_stmt><expr><name>textBuf__in_len__</name> = <name>textBuf__in_len__</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_rv</name> = <call><name>TextWidth</name><argument_list>(<argument><expr><name>textBuf__in__</name></expr></argument>,
	                <argument><expr><name>firstByte</name></expr></argument>,
	                <argument><expr><name>byteCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetFontInfo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FontInfo</name></type> <name>info</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetFontInfo</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetFontInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetFontInfo</name><argument_list>(<argument><expr>&amp;<name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>QdFI_New</name></expr></argument>, <argument><expr>&amp;<name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_CharExtra</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Fixed</name></type> <name>extra</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CharExtra</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CharExtra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>extra</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>CharExtra</name><argument_list>(<argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_TruncString</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>width</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>theString</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TruncCode</name></type> <name>truncWhere</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>TruncString</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TruncString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hO&amp;h"</expr></argument>,
	                      <argument><expr>&amp;<name>width</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>theString</name></expr></argument>,
	                      <argument><expr>&amp;<name>truncWhere</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>TruncString</name><argument_list>(<argument><expr><name>width</name></expr></argument>,
	                  <argument><expr><name>theString</name></expr></argument>,
	                  <argument><expr><name>truncWhere</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SetPort</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrafPtr</name></type> <name>thePort</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetPort</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>GrafObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>thePort</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetPort</name><argument_list>(<argument><expr><name>thePort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetCursor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CursHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>cursorID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetCursor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>cursorID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetCursor</name><argument_list>(<argument><expr><name>cursorID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SetCursor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cursor</name> *</type><name>crsr__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>crsr__in_len__</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetCursor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"s#"</expr></argument>,
	                      <argument><expr>(<name>char</name> **)&amp;<name>crsr__in__</name></expr></argument>, <argument><expr>&amp;<name>crsr__in_len__</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr><name>crsr__in_len__</name> != <sizeof>sizeof<argument_list>(<argument><expr><name>Cursor</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"buffer length should be sizeof(Cursor)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>crsr__error__</name>;</goto>
	}</block></then></if>
	<expr_stmt><expr><call><name>SetCursor</name><argument_list>(<argument><expr><name>crsr__in__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
 <label><name>crsr__error__</name>:</label> <empty_stmt>;</empty_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_ShowCursor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ShowCursor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ShowCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>ShowCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_LineTo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>v</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LineTo</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LineTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>h</name></expr></argument>,
	                      <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LineTo</name><argument_list>(<argument><expr><name>h</name></expr></argument>,
	       <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SetRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>left</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>top</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>right</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>bottom</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hhhh"</expr></argument>,
	                      <argument><expr>&amp;<name>left</name></expr></argument>,
	                      <argument><expr>&amp;<name>top</name></expr></argument>,
	                      <argument><expr>&amp;<name>right</name></expr></argument>,
	                      <argument><expr>&amp;<name>bottom</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	        <argument><expr><name>left</name></expr></argument>,
	        <argument><expr><name>top</name></expr></argument>,
	        <argument><expr><name>right</name></expr></argument>,
	        <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_OffsetRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OffsetRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>OffsetRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr>&amp;<name>dh</name></expr></argument>,
	                      <argument><expr>&amp;<name>dv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>OffsetRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	           <argument><expr><name>dh</name></expr></argument>,
	           <argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_InsetRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InsetRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InsetRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr>&amp;<name>dh</name></expr></argument>,
	                      <argument><expr>&amp;<name>dv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>InsetRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	          <argument><expr><name>dh</name></expr></argument>,
	          <argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_UnionRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>src1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>src2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>dstRect</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UnionRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>UnionRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>src1</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>src2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>UnionRect</name><argument_list>(<argument><expr>&amp;<name>src1</name></expr></argument>,
	          <argument><expr>&amp;<name>src2</name></expr></argument>,
	          <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_EqualRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>rect1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>rect2</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EqualRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>EqualRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>rect1</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>rect2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>EqualRect</name><argument_list>(<argument><expr>&amp;<name>rect1</name></expr></argument>,
	                <argument><expr>&amp;<name>rect2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_FrameRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FrameRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FrameRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>FrameRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_InvertRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InvertRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InvertRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>InvertRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_FillRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pattern</name> *</type><name>pat__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pat__in_len__</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FillRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FillRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s#"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>,
	                      <argument><expr>(<name>char</name> **)&amp;<name>pat__in__</name></expr></argument>, <argument><expr>&amp;<name>pat__in_len__</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr><name>pat__in_len__</name> != <sizeof>sizeof<argument_list>(<argument><expr><name>Pattern</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"buffer length should be sizeof(Pattern)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>pat__error__</name>;</goto>
	}</block></then></if>
	<expr_stmt><expr><call><name>FillRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>,
	         <argument><expr><name>pat__in__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
 <label><name>pat__error__</name>:</label> <empty_stmt>;</empty_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_CopyRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>srcRgn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>dstRgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CopyRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CopyRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcRgn</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>CopyRgn</name><argument_list>(<argument><expr><name>srcRgn</name></expr></argument>,
	        <argument><expr><name>dstRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_SetRectRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>left</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>top</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>right</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>bottom</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetRectRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetRectRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hhhh"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>,
	                      <argument><expr>&amp;<name>left</name></expr></argument>,
	                      <argument><expr>&amp;<name>top</name></expr></argument>,
	                      <argument><expr>&amp;<name>right</name></expr></argument>,
	                      <argument><expr>&amp;<name>bottom</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetRectRgn</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>,
	           <argument><expr><name>left</name></expr></argument>,
	           <argument><expr><name>top</name></expr></argument>,
	           <argument><expr><name>right</name></expr></argument>,
	           <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_OffsetRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OffsetRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>OffsetRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>,
	                      <argument><expr>&amp;<name>dh</name></expr></argument>,
	                      <argument><expr>&amp;<name>dv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>OffsetRgn</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>,
	          <argument><expr><name>dh</name></expr></argument>,
	          <argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_UnionRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>srcRgnA</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>srcRgnB</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>dstRgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UnionRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>UnionRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcRgnA</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcRgnB</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>UnionRgn</name><argument_list>(<argument><expr><name>srcRgnA</name></expr></argument>,
	         <argument><expr><name>srcRgnB</name></expr></argument>,
	         <argument><expr><name>dstRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_XorRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>srcRgnA</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>srcRgnB</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>dstRgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>XorRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>XorRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcRgnA</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcRgnB</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>XorRgn</name><argument_list>(<argument><expr><name>srcRgnA</name></expr></argument>,
	       <argument><expr><name>srcRgnB</name></expr></argument>,
	       <argument><expr><name>dstRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_EqualRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgnA</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgnB</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EqualRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>EqualRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgnA</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgnB</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>EqualRgn</name><argument_list>(<argument><expr><name>rgnA</name></expr></argument>,
	               <argument><expr><name>rgnB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_FrameRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FrameRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FrameRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>FrameRgn</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_PaintRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PaintRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PaintRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>PaintRgn</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_InvertRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InvertRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InvertRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>InvertRgn</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_FillRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pattern</name> *</type><name>pat__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pat__in_len__</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FillRgn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FillRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s#"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>,
	                      <argument><expr>(<name>char</name> **)&amp;<name>pat__in__</name></expr></argument>, <argument><expr>&amp;<name>pat__in_len__</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr><name>pat__in_len__</name> != <sizeof>sizeof<argument_list>(<argument><expr><name>Pattern</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"buffer length should be sizeof(Pattern)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>pat__error__</name>;</goto>
	}</block></then></if>
	<expr_stmt><expr><call><name>FillRgn</name><argument_list>(<argument><expr><name>rgn</name></expr></argument>,
	        <argument><expr><name>pat__in__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
 <label><name>pat__error__</name>:</label> <empty_stmt>;</empty_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_GetPixel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>v</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetPixel</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>h</name></expr></argument>,
	                      <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetPixel</name><argument_list>(<argument><expr><name>h</name></expr></argument>,
	               <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_PtInRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>pt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PtInRect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PtInRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>pt</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>PtInRect</name><argument_list>(<argument><expr><name>pt</name></expr></argument>,
	               <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_DrawText</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>textBuf__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>textBuf__in_len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>firstByte</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>byteCount</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DrawText</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DrawText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"s#hh"</expr></argument>,
	                      <argument><expr>&amp;<name>textBuf__in__</name></expr></argument>, <argument><expr>&amp;<name>textBuf__in_len__</name></expr></argument>,
	                      <argument><expr>&amp;<name>firstByte</name></expr></argument>,
	                      <argument><expr>&amp;<name>byteCount</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<comment type="block">/* Fool compiler warnings */</comment>
	<expr_stmt><expr><name>textBuf__in_len__</name> = <name>textBuf__in_len__</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><name>textBuf__in__</name></expr></argument>,
	         <argument><expr><name>firstByte</name></expr></argument>,
	         <argument><expr><name>byteCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_BitMap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>BitMap</name> *</type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>source</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>bounds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rowbytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>data</name></decl>;</decl_stmt>

	<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O!iO&amp;"</expr></argument>, <argument><expr>&amp;<name>PyString_Type</name></expr></argument>, <argument><expr>&amp;<name>source</name></expr></argument>, <argument><expr>&amp;<name>rowbytes</name></expr></argument>, <argument><expr><name>PyMac_GetRect</name></expr></argument>,
	                <argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr> )</condition><then>
	        <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>data</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>(<name>ptr</name>=(<name>BitMap</name> *)<call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BitMap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>) == <name>NULL</name></expr> )</condition><then>
	        <return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name><name>ptr</name>-&gt;<name>baseAddr</name></name> = (<name>Ptr</name>)<name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ptr</name>-&gt;<name>rowBytes</name></name> = <name>rowbytes</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ptr</name>-&gt;<name>bounds</name></name> = <name>bounds</name></expr>;</expr_stmt>
	<if>if <condition>( <expr>(<name>_res</name> = <call><name>BMObj_New</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr> )</condition><then> <block>{
	        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr>((<name>BitMapObject</name> *)<name>_res</name>)-&gt;<name>referred_object</name> = <name>source</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr>((<name>BitMapObject</name> *)<name>_res</name>)-&gt;<name>referred_bitmap</name> = <name>ptr</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>

}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qd_RawBitMap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>BitMap</name> *</type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>source</name></decl>;</decl_stmt>

	<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O!"</expr></argument>, <argument><expr>&amp;<name>PyString_Type</name></expr></argument>, <argument><expr>&amp;<name>source</name></expr></argument>)</argument_list></call></expr> )</condition><then>
	        <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>( <expr><call><name>PyString_Size</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call> != <sizeof>sizeof<argument_list>(<argument><expr><name>BitMap</name></expr></argument>)</argument_list></sizeof> &amp;&amp; <call><name>PyString_Size</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call> != <sizeof>sizeof<argument_list>(<argument><expr><name>PixMap</name></expr></argument>)</argument_list></sizeof></expr> )</condition><then> <block>{
	        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
	                <argument><expr>"Argument size was %ld, should be %lu (sizeof BitMap) or %lu (sizeof PixMap)"</expr></argument>,
	                <argument><expr><call><name>PyString_Size</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BitMap</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PixMap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>ptr</name> = (<name>BitMapPtr</name>)<call><name>PyString_AsString</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>( <expr>(<name>_res</name> = <call><name>BMObj_New</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr> )</condition><then> <block>{
	        <return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr>((<name>BitMapObject</name> *)<name>_res</name>)-&gt;<name>referred_object</name> = <name>source</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>

}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>Qd_methods</name><index>[]</index></name> <init>= <expr><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<expr><block>{<expr>"GetPort"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetPort</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (GrafPtr port)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GrafDevice"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GrafDevice</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short device) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetPortBits"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SetPortBits</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(BitMapPtr bm) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PortSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_PortSize</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short width, short height) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MovePortTo"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MovePortTo</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short leftGlobal, short topGlobal) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetOrigin"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SetOrigin</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short h, short v) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetClip"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SetClip</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetClip"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetClip</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ClipRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_ClipRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"BackPat"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_BackPat</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Pattern pat) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InitCursor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_InitCursor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacSetCursor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacSetCursor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Cursor crsr) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"HideCursor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_HideCursor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacShowCursor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacShowCursor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ObscureCursor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_ObscureCursor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"HidePen"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_HidePen</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ShowPen"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_ShowPen</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPen"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetPen</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Point pt)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPenState"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetPenState</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (PenState pnState)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetPenState"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SetPenState</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PenState pnState) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PenSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_PenSize</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short width, short height) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PenMode"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_PenMode</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short mode) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PenPat"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_PenPat</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Pattern pat) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PenNormal"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_PenNormal</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MoveTo"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MoveTo</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short h, short v) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"Move"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_Move</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short dh, short dv) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacLineTo"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacLineTo</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short h, short v) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"Line"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_Line</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short dh, short dv) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ForeColor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_ForeColor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(long color) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"BackColor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_BackColor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(long color) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ColorBit"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_ColorBit</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short whichBit) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacSetRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacSetRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short left, short top, short right, short bottom) -&gt; (Rect r)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacOffsetRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacOffsetRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, short dh, short dv) -&gt; (Rect r)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacInsetRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacInsetRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, short dh, short dv) -&gt; (Rect r)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SectRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SectRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect src1, Rect src2) -&gt; (Boolean _rv, Rect dstRect)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacUnionRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacUnionRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect src1, Rect src2) -&gt; (Rect dstRect)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacEqualRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacEqualRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect rect1, Rect rect2) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"EmptyRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_EmptyRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacFrameRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacFrameRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PaintRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_PaintRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"EraseRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_EraseRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacInvertRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacInvertRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacFillRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacFillRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, Pattern pat) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FrameOval"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_FrameOval</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PaintOval"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_PaintOval</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"EraseOval"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_EraseOval</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InvertOval"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_InvertOval</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FillOval"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_FillOval</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, Pattern pat) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FrameRoundRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_FrameRoundRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, short ovalWidth, short ovalHeight) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PaintRoundRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_PaintRoundRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, short ovalWidth, short ovalHeight) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"EraseRoundRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_EraseRoundRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, short ovalWidth, short ovalHeight) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InvertRoundRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_InvertRoundRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, short ovalWidth, short ovalHeight) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FillRoundRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_FillRoundRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, short ovalWidth, short ovalHeight, Pattern pat) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FrameArc"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_FrameArc</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, short startAngle, short arcAngle) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PaintArc"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_PaintArc</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, short startAngle, short arcAngle) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"EraseArc"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_EraseArc</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, short startAngle, short arcAngle) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InvertArc"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_InvertArc</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, short startAngle, short arcAngle) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FillArc"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_FillArc</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, short startAngle, short arcAngle, Pattern pat) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"NewRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_NewRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (RgnHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"OpenRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_OpenRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CloseRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_CloseRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle dstRgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"BitMapToRegion"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_BitMapToRegion</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle region, BitMapPtr bMap) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"RgnToHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_RgnToHandle</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle region, Handle flattenedRgnDataHdl) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DisposeRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_DisposeRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacCopyRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacCopyRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle srcRgn, RgnHandle dstRgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetEmptyRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SetEmptyRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacSetRectRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacSetRectRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn, short left, short top, short right, short bottom) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"RectRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_RectRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn, Rect r) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacOffsetRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacOffsetRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn, short dh, short dv) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InsetRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_InsetRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn, short dh, short dv) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SectRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SectRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle srcRgnA, RgnHandle srcRgnB, RgnHandle dstRgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacUnionRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacUnionRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle srcRgnA, RgnHandle srcRgnB, RgnHandle dstRgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DiffRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_DiffRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle srcRgnA, RgnHandle srcRgnB, RgnHandle dstRgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacXorRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacXorRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle srcRgnA, RgnHandle srcRgnB, RgnHandle dstRgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"RectInRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_RectInRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, RgnHandle rgn) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacEqualRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacEqualRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgnA, RgnHandle rgnB) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"EmptyRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_EmptyRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacFrameRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacFrameRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacPaintRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacPaintRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"EraseRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_EraseRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacInvertRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacInvertRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacFillRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacFillRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn, Pattern pat) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ScrollRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_ScrollRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, short dh, short dv, RgnHandle updateRgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CopyBits"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_CopyBits</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(BitMapPtr srcBits, BitMapPtr dstBits, Rect srcRect, Rect dstRect, short mode, RgnHandle maskRgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CopyMask"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_CopyMask</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(BitMapPtr srcBits, BitMapPtr maskBits, BitMapPtr dstBits, Rect srcRect, Rect maskRect, Rect dstRect) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"OpenPicture"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_OpenPicture</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect picFrame) -&gt; (PicHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PicComment"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_PicComment</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short kind, short dataSize, Handle dataHandle) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ClosePicture"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_ClosePicture</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DrawPicture"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_DrawPicture</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PicHandle myPicture, Rect dstRect) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"KillPicture"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_KillPicture</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PicHandle myPicture) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"OpenPoly"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_OpenPoly</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (PolyHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ClosePoly"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_ClosePoly</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"KillPoly"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_KillPoly</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PolyHandle poly) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"OffsetPoly"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_OffsetPoly</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PolyHandle poly, short dh, short dv) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FramePoly"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_FramePoly</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PolyHandle poly) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PaintPoly"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_PaintPoly</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PolyHandle poly) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ErasePoly"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_ErasePoly</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PolyHandle poly) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InvertPoly"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_InvertPoly</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PolyHandle poly) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FillPoly"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_FillPoly</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PolyHandle poly, Pattern pat) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetPt"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SetPt</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short h, short v) -&gt; (Point pt)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LocalToGlobal"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LocalToGlobal</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point pt) -&gt; (Point pt)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GlobalToLocal"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GlobalToLocal</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point pt) -&gt; (Point pt)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"Random"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_Random</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (short _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacGetPixel"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacGetPixel</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short h, short v) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ScalePt"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_ScalePt</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point pt, Rect srcRect, Rect dstRect) -&gt; (Point pt)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MapPt"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MapPt</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point pt, Rect srcRect, Rect dstRect) -&gt; (Point pt)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MapRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MapRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, Rect srcRect, Rect dstRect) -&gt; (Rect r)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MapRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MapRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn, Rect srcRect, Rect dstRect) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MapPoly"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MapPoly</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PolyHandle poly, Rect srcRect, Rect dstRect) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"StdBits"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_StdBits</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(BitMapPtr srcBits, Rect srcRect, Rect dstRect, short mode, RgnHandle maskRgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"AddPt"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_AddPt</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point src, Point dst) -&gt; (Point dst)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"EqualPt"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_EqualPt</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point pt1, Point pt2) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacPtInRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacPtInRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point pt, Rect r) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"Pt2Rect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_Pt2Rect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point pt1, Point pt2) -&gt; (Rect dstRect)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PtToAngle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_PtToAngle</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, Point pt) -&gt; (short angle)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SubPt"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SubPt</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point src, Point dst) -&gt; (Point dst)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PtInRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_PtInRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point pt, RgnHandle rgn) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"NewPixMap"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_NewPixMap</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (PixMapHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DisposePixMap"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_DisposePixMap</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixMapHandle pm) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CopyPixMap"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_CopyPixMap</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixMapHandle srcPM, PixMapHandle dstPM) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"NewPixPat"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_NewPixPat</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (PixPatHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DisposePixPat"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_DisposePixPat</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixPatHandle pp) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CopyPixPat"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_CopyPixPat</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixPatHandle srcPP, PixPatHandle dstPP) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PenPixPat"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_PenPixPat</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixPatHandle pp) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"BackPixPat"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_BackPixPat</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixPatHandle pp) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPixPat"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetPixPat</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short patID) -&gt; (PixPatHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MakeRGBPat"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MakeRGBPat</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixPatHandle pp, RGBColor myColor) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FillCRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_FillCRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, PixPatHandle pp) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FillCOval"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_FillCOval</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, PixPatHandle pp) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FillCRoundRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_FillCRoundRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, short ovalWidth, short ovalHeight, PixPatHandle pp) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FillCArc"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_FillCArc</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, short startAngle, short arcAngle, PixPatHandle pp) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FillCRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_FillCRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn, PixPatHandle pp) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FillCPoly"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_FillCPoly</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PolyHandle poly, PixPatHandle pp) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"RGBForeColor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_RGBForeColor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RGBColor color) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"RGBBackColor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_RGBBackColor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RGBColor color) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetCPixel"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SetCPixel</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short h, short v, RGBColor cPix) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetPortPix"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SetPortPix</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixMapHandle pm) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetCPixel"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetCPixel</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short h, short v) -&gt; (RGBColor cPix)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetForeColor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetForeColor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (RGBColor color)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetBackColor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetBackColor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (RGBColor color)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"OpColor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_OpColor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RGBColor color) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"HiliteColor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_HiliteColor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RGBColor color) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DisposeCTable"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_DisposeCTable</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CTabHandle cTable) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetCTable"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetCTable</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short ctID) -&gt; (CTabHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetCCursor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetCCursor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short crsrID) -&gt; (CCrsrHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetCCursor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SetCCursor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CCrsrHandle cCrsr) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"AllocCursor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_AllocCursor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DisposeCCursor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_DisposeCCursor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CCrsrHandle cCrsr) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMaxDevice"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetMaxDevice</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect globalRect) -&gt; (GDHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetCTSeed"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetCTSeed</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (long _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetDeviceList"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetDeviceList</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (GDHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMainDevice"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetMainDevice</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (GDHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetNextDevice"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetNextDevice</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(GDHandle curDevice) -&gt; (GDHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"TestDeviceAttribute"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_TestDeviceAttribute</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(GDHandle gdh, short attribute) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetDeviceAttribute"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SetDeviceAttribute</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(GDHandle gdh, short attribute, Boolean value) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InitGDevice"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_InitGDevice</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short qdRefNum, long mode, GDHandle gdh) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"NewGDevice"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_NewGDevice</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short refNum, long mode) -&gt; (GDHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DisposeGDevice"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_DisposeGDevice</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(GDHandle gdh) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetGDevice"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SetGDevice</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(GDHandle gd) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetGDevice"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetGDevice</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (GDHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"Color2Index"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_Color2Index</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RGBColor myColor) -&gt; (long _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"Index2Color"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_Index2Color</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(long index) -&gt; (RGBColor aColor)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InvertColor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_InvertColor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (RGBColor myColor)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"RealColor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_RealColor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RGBColor color) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetSubTable"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetSubTable</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CTabHandle myColors, short iTabRes, CTabHandle targetTbl) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MakeITable"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MakeITable</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CTabHandle cTabH, ITabHandle iTabH, short res) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetClientID"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SetClientID</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short id) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ProtectEntry"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_ProtectEntry</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short index, Boolean protect) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ReserveEntry"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_ReserveEntry</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short index, Boolean reserve) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"QDError"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_QDError</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (short _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CopyDeepMask"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_CopyDeepMask</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(BitMapPtr srcBits, BitMapPtr maskBits, BitMapPtr dstBits, Rect srcRect, Rect maskRect, Rect dstRect, short mode, RgnHandle maskRgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPattern"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetPattern</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short patternID) -&gt; (PatHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacGetCursor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacGetCursor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short cursorID) -&gt; (CursHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPicture"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetPicture</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short pictureID) -&gt; (PicHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DeltaPoint"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_DeltaPoint</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point ptA, Point ptB) -&gt; (long _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ShieldCursor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_ShieldCursor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect shieldRect, Point offsetPt) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ScreenRes"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_ScreenRes</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (short scrnHRes, short scrnVRes)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetIndPattern"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetIndPattern</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short patternListID, short index) -&gt; (Pattern thePat)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SlopeFromAngle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SlopeFromAngle</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short angle) -&gt; (Fixed _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"AngleFromSlope"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_AngleFromSlope</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Fixed slope) -&gt; (short _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPixBounds"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetPixBounds</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixMapHandle pixMap) -&gt; (Rect bounds)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPixDepth"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetPixDepth</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixMapHandle pixMap) -&gt; (short _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetQDGlobalsRandomSeed"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetQDGlobalsRandomSeed</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (long _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetQDGlobalsScreenBits"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetQDGlobalsScreenBits</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (BitMap screenBits)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetQDGlobalsArrow"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetQDGlobalsArrow</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Cursor arrow)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetQDGlobalsDarkGray"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetQDGlobalsDarkGray</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Pattern dkGray)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetQDGlobalsLightGray"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetQDGlobalsLightGray</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Pattern ltGray)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetQDGlobalsGray"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetQDGlobalsGray</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Pattern gray)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetQDGlobalsBlack"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetQDGlobalsBlack</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Pattern black)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetQDGlobalsWhite"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetQDGlobalsWhite</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Pattern white)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetQDGlobalsThePort"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetQDGlobalsThePort</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (CGrafPtr _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetQDGlobalsRandomSeed"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SetQDGlobalsRandomSeed</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(long randomSeed) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetQDGlobalsArrow"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SetQDGlobalsArrow</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Cursor arrow) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetRegionBounds"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetRegionBounds</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle region) -&gt; (Rect bounds)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsRegionRectangular"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_IsRegionRectangular</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle region) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CreateNewPort"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_CreateNewPort</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (CGrafPtr _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetQDError"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SetQDError</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSErr err) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMGetScrVRes"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMGetScrVRes</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (SInt16 _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMSetScrVRes"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMSetScrVRes</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 value) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMGetScrHRes"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMGetScrHRes</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (SInt16 _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMSetScrHRes"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMSetScrHRes</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 value) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMGetMainDevice"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMGetMainDevice</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (GDHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMSetMainDevice"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMSetMainDevice</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(GDHandle value) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMGetDeviceList"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMGetDeviceList</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (GDHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMSetDeviceList"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMSetDeviceList</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(GDHandle value) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMGetQDColors"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMGetQDColors</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Handle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMSetQDColors"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMSetQDColors</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle value) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMGetWidthListHand"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMGetWidthListHand</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Handle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMSetWidthListHand"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMSetWidthListHand</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle value) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMGetHiliteMode"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMGetHiliteMode</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (UInt8 _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMSetHiliteMode"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMSetHiliteMode</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(UInt8 value) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMGetWidthTabHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMGetWidthTabHandle</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Handle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMSetWidthTabHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMSetWidthTabHandle</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle value) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMGetLastSPExtra"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMGetLastSPExtra</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (SInt32 _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMSetLastSPExtra"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMSetLastSPExtra</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt32 value) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMGetLastFOND"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMGetLastFOND</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Handle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMSetLastFOND"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMSetLastFOND</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle value) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMGetFractEnable"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMGetFractEnable</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (UInt8 _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMSetFractEnable"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMSetFractEnable</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(UInt8 value) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMGetTheGDevice"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMGetTheGDevice</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (GDHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMSetTheGDevice"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMSetTheGDevice</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(GDHandle value) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMGetHiliteRGB"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMGetHiliteRGB</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (RGBColor hiliteRGBValue)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMSetHiliteRGB"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMSetHiliteRGB</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RGBColor hiliteRGBValue) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMGetCursorNew"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMGetCursorNew</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMSetCursorNew"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LMSetCursorNew</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Boolean value) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"TextFont"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_TextFont</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short font) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"TextFace"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_TextFace</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(StyleParameter face) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"TextMode"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_TextMode</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short mode) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"TextSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_TextSize</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short size) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SpaceExtra"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SpaceExtra</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Fixed extra) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DrawChar"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_DrawChar</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CharParameter ch) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DrawString"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_DrawString</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Str255 s) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacDrawText"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_MacDrawText</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Buffer textBuf, short firstByte, short byteCount) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CharWidth"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_CharWidth</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CharParameter ch) -&gt; (short _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"StringWidth"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_StringWidth</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Str255 s) -&gt; (short _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"TextWidth"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_TextWidth</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Buffer textBuf, short firstByte, short byteCount) -&gt; (short _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetFontInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetFontInfo</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (FontInfo info)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CharExtra"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_CharExtra</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Fixed extra) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"TruncString"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_TruncString</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short width, Str255 theString, TruncCode truncWhere) -&gt; (short _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetPort"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SetPort</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(GrafPtr thePort) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetCursor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetCursor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short cursorID) -&gt; (CursHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetCursor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SetCursor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Cursor crsr) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ShowCursor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_ShowCursor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LineTo"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_LineTo</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short h, short v) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SetRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short left, short top, short right, short bottom) -&gt; (Rect r)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"OffsetRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_OffsetRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, short dh, short dv) -&gt; (Rect r)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InsetRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_InsetRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, short dh, short dv) -&gt; (Rect r)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"UnionRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_UnionRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect src1, Rect src2) -&gt; (Rect dstRect)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"EqualRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_EqualRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect rect1, Rect rect2) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FrameRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_FrameRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InvertRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_InvertRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FillRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_FillRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect r, Pattern pat) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CopyRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_CopyRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle srcRgn, RgnHandle dstRgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetRectRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_SetRectRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn, short left, short top, short right, short bottom) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"OffsetRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_OffsetRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn, short dh, short dv) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"UnionRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_UnionRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle srcRgnA, RgnHandle srcRgnB, RgnHandle dstRgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"XorRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_XorRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle srcRgnA, RgnHandle srcRgnB, RgnHandle dstRgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"EqualRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_EqualRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgnA, RgnHandle rgnB) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FrameRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_FrameRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PaintRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_PaintRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InvertRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_InvertRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FillRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_FillRgn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle rgn, Pattern pat) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetPixel"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_GetPixel</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short h, short v) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PtInRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_PtInRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point pt, Rect r) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DrawText"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_DrawText</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Buffer textBuf, short firstByte, short byteCount) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"BitMap"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_BitMap</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"Take (string, int, Rect) argument and create BitMap"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"RawBitMap"</expr>, <expr>(<name>PyCFunction</name>)<name>Qd_RawBitMap</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"Take string BitMap and turn into BitMap object"</argument>)</argument_list></macro>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>

<comment type="block">/* Like BMObj_New, but the original bitmap data structure is copied (and
** released when the object is released)
*/</comment>
<function><type><name>PyObject</name> *</type><name>BMObj_NewCopied</name><parameter_list>(<param><decl><type><name>BitMapPtr</name></type> <name>itself</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>BitMapObject</name> *</type><name>it</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BitMapPtr</name></type> <name>itself_copy</name></decl>;</decl_stmt>

        <if>if <condition>(<expr>(<name>itself_copy</name>=(<name>BitMapPtr</name>)<call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BitMap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
                <return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
        <expr_stmt><expr>*<name>itself_copy</name> = *<name>itself</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>it</name> = (<name>BitMapObject</name> *)<call><name>BMObj_New</name><argument_list>(<argument><expr><name>itself_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>it</name>-&gt;<name>referred_bitmap</name></name> = <name>itself_copy</name></expr>;</expr_stmt>
        <return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>


<function><type><name>void</name></type> <name>init_Qd</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>



	        <expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_NEW</name><argument_list>(<argument><expr><name>BitMapPtr</name></expr></argument>, <argument><expr><name>BMObj_New</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_CONVERT</name><argument_list>(<argument><expr><name>BitMapPtr</name></expr></argument>, <argument><expr><name>BMObj_Convert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_NEW</name><argument_list>(<argument><expr><name>GrafPtr</name></expr></argument>, <argument><expr><name>GrafObj_New</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_CONVERT</name><argument_list>(<argument><expr><name>GrafPtr</name></expr></argument>, <argument><expr><name>GrafObj_Convert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_NEW</name><argument_list>(<argument><expr><name>RGBColorPtr</name></expr></argument>, <argument><expr><name>QdRGB_New</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_CONVERT</name><argument_list>(<argument><expr><name>RGBColor</name></expr></argument>, <argument><expr><name>QdRGB_Convert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>

	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_Qd"</expr></argument>, <argument><expr><name>Qd_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>Qd_Error</name> = <call><name>PyMac_GetOSErrException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>Qd_Error</name> == <name>NULL</name> ||
	    <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Error"</expr></argument>, <argument><expr><name>Qd_Error</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><name><name>GrafPort_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>GrafPort_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>GrafPort_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"GrafPort"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>GrafPort_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Backward-compatible name */</comment>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>GrafPort_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"GrafPortType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>GrafPort_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>BitMap_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>BitMap_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>BitMap_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"BitMap"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>BitMap_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Backward-compatible name */</comment>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>BitMap_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"BitMapType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>BitMap_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>
}</block></function>

<comment type="block">/* ========================= End module _Qd ========================= */</comment>

</unit>
