<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Mac/Modules/launch/_Launchmodule.c">
<comment type="block">/* ========================= Module _Launch ========================= */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pymactoolbox.h"</cpp:file></cpp:include>

<comment type="block">/* Macro to test whether a weak-loaded CFM function exists */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMac_PRECHECK</name><parameter_list>(<param><type><name>rtn</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { if ( &amp;rtn == NULL )  {\
        PyErr_SetString(PyExc_NotImplementedError, \
        "Not available in this shared library/OS version"); \
        return NULL; \
    }} while(0)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> &lt; 0x02040000</expr></cpp:if>
<function_decl><type><name>PyObject</name> *</type><name>PyMac_GetOSErrException</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ApplicationServices/ApplicationServices.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
** Optional CFStringRef. None will pass NULL
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>OptCFStringRefObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>CFStringRef</name> *</type><name>spec</name></decl></param>)</parameter_list>
<block>{
        <if>if <condition>(<expr><name>v</name> == <name>Py_None</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>spec</name> = <name>NULL</name></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>CFStringRefObj_Convert</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PyObject</name> *</type>
<name>OptCFStringRefObj_New</name><parameter_list>(<param><decl><type><name>CFStringRef</name></type> <name>it</name></decl></param>)</parameter_list>
<block>{
        <if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>Py_None</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>CFStringRefObj_New</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Convert LSItemInfoRecord to Python.
*/</comment>
<function><type><name>PyObject</name> *</type>
<name>LSItemInfoRecord_New</name><parameter_list>(<param><decl><type><name>LSItemInfoRecord</name> *</type><name>it</name></decl></param>)</parameter_list>
<block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
        <return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"{s:is:O&amp;s:O&amp;s:O&amp;s:O&amp;s:i}"</expr></argument>,
                <argument><expr>"flags"</expr></argument>, <argument><expr><name><name>it</name>-&gt;<name>flags</name></name></expr></argument>,
                <argument><expr>"filetype"</expr></argument>, <argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name><name>it</name>-&gt;<name>filetype</name></name></expr></argument>,
                <argument><expr>"creator"</expr></argument>, <argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name><name>it</name>-&gt;<name>creator</name></name></expr></argument>,
                <argument><expr>"extension"</expr></argument>, <argument><expr><name>OptCFStringRefObj_New</name></expr></argument>, <argument><expr><name><name>it</name>-&gt;<name>extension</name></name></expr></argument>,
                <argument><expr>"iconFileName"</expr></argument>, <argument><expr><name>OptCFStringRefObj_New</name></expr></argument>, <argument><expr><name><name>it</name>-&gt;<name>iconFileName</name></name></expr></argument>,
                <argument><expr>"kindID"</expr></argument>, <argument><expr><name><name>it</name>-&gt;<name>kindID</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"{s:is:O&amp;s:O&amp;s:O&amp;}"</expr></argument>,
                <argument><expr>"flags"</expr></argument>, <argument><expr><name><name>it</name>-&gt;<name>flags</name></name></expr></argument>,
                <argument><expr>"filetype"</expr></argument>, <argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name><name>it</name>-&gt;<name>filetype</name></name></expr></argument>,
                <argument><expr>"creator"</expr></argument>, <argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name><name>it</name>-&gt;<name>creator</name></name></expr></argument>,
                <argument><expr>"extension"</expr></argument>, <argument><expr><name>OptCFStringRefObj_New</name></expr></argument>, <argument><expr><name><name>it</name>-&gt;<name>extension</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Launch_Error</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Launch_LSCopyItemInfoForRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>inItemRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LSRequestedInfo</name></type> <name>inWhichInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LSItemInfoRecord</name></type> <name>outItemInfo</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
	                      <argument><expr><name>PyMac_GetFSRef</name></expr></argument>, <argument><expr>&amp;<name>inItemRef</name></expr></argument>,
	                      <argument><expr>&amp;<name>inWhichInfo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>LSCopyItemInfoForRef</name><argument_list>(<argument><expr>&amp;<name>inItemRef</name></expr></argument>,
	                            <argument><expr><name>inWhichInfo</name></expr></argument>,
	                            <argument><expr>&amp;<name>outItemInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>LSItemInfoRecord_New</name></expr></argument>, <argument><expr>&amp;<name>outItemInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Launch_LSCopyItemInfoForURL</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFURLRef</name></type> <name>inURL</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LSRequestedInfo</name></type> <name>inWhichInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LSItemInfoRecord</name></type> <name>outItemInfo</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
	                      <argument><expr><name>CFURLRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inURL</name></expr></argument>,
	                      <argument><expr>&amp;<name>inWhichInfo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>LSCopyItemInfoForURL</name><argument_list>(<argument><expr><name>inURL</name></expr></argument>,
	                            <argument><expr><name>inWhichInfo</name></expr></argument>,
	                            <argument><expr>&amp;<name>outItemInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>LSItemInfoRecord_New</name></expr></argument>, <argument><expr>&amp;<name>outItemInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Launch_LSGetExtensionInfo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniChar</name> *</type><name>inNameLen__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniCharCount</name></type> <name>inNameLen__len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>inNameLen__in_len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniCharCount</name></type> <name>outExtStartIndex</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"u#"</expr></argument>,
	                      <argument><expr>&amp;<name>inNameLen__in__</name></expr></argument>, <argument><expr>&amp;<name>inNameLen__in_len__</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>inNameLen__len__</name> = <name>inNameLen__in_len__</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_err</name> = <call><name>LSGetExtensionInfo</name><argument_list>(<argument><expr><name>inNameLen__len__</name></expr></argument>, <argument><expr><name>inNameLen__in__</name></expr></argument>,
	                          <argument><expr>&amp;<name>outExtStartIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>outExtStartIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Launch_LSCopyDisplayNameForRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>inRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFStringRef</name></type> <name>outDisplayName</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetFSRef</name></expr></argument>, <argument><expr>&amp;<name>inRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>LSCopyDisplayNameForRef</name><argument_list>(<argument><expr>&amp;<name>inRef</name></expr></argument>,
	                               <argument><expr>&amp;<name>outDisplayName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>CFStringRefObj_New</name></expr></argument>, <argument><expr><name>outDisplayName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Launch_LSCopyDisplayNameForURL</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFURLRef</name></type> <name>inURL</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFStringRef</name></type> <name>outDisplayName</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>CFURLRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inURL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>LSCopyDisplayNameForURL</name><argument_list>(<argument><expr><name>inURL</name></expr></argument>,
	                               <argument><expr>&amp;<name>outDisplayName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>CFStringRefObj_New</name></expr></argument>, <argument><expr><name>outDisplayName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Launch_LSSetExtensionHiddenForRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>inRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>inHide</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
	                      <argument><expr><name>PyMac_GetFSRef</name></expr></argument>, <argument><expr>&amp;<name>inRef</name></expr></argument>,
	                      <argument><expr>&amp;<name>inHide</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>LSSetExtensionHiddenForRef</name><argument_list>(<argument><expr>&amp;<name>inRef</name></expr></argument>,
	                                  <argument><expr><name>inHide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Launch_LSSetExtensionHiddenForURL</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFURLRef</name></type> <name>inURL</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>inHide</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
	                      <argument><expr><name>CFURLRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inURL</name></expr></argument>,
	                      <argument><expr>&amp;<name>inHide</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>LSSetExtensionHiddenForURL</name><argument_list>(<argument><expr><name>inURL</name></expr></argument>,
	                                  <argument><expr><name>inHide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Launch_LSCopyKindStringForRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>inFSRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFStringRef</name></type> <name>outKindString</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetFSRef</name></expr></argument>, <argument><expr>&amp;<name>inFSRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>LSCopyKindStringForRef</name><argument_list>(<argument><expr>&amp;<name>inFSRef</name></expr></argument>,
	                              <argument><expr>&amp;<name>outKindString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>CFStringRefObj_New</name></expr></argument>, <argument><expr><name>outKindString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Launch_LSCopyKindStringForURL</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFURLRef</name></type> <name>inURL</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFStringRef</name></type> <name>outKindString</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>CFURLRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inURL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>LSCopyKindStringForURL</name><argument_list>(<argument><expr><name>inURL</name></expr></argument>,
	                              <argument><expr>&amp;<name>outKindString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>CFStringRefObj_New</name></expr></argument>, <argument><expr><name>outKindString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Launch_LSGetApplicationForItem</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>inItemRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LSRolesMask</name></type> <name>inRoleMask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>outAppRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFURLRef</name></type> <name>outAppURL</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
	                      <argument><expr><name>PyMac_GetFSRef</name></expr></argument>, <argument><expr>&amp;<name>inItemRef</name></expr></argument>,
	                      <argument><expr>&amp;<name>inRoleMask</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>LSGetApplicationForItem</name><argument_list>(<argument><expr>&amp;<name>inItemRef</name></expr></argument>,
	                               <argument><expr><name>inRoleMask</name></expr></argument>,
	                               <argument><expr>&amp;<name>outAppRef</name></expr></argument>,
	                               <argument><expr>&amp;<name>outAppURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildFSRef</name></expr></argument>, <argument><expr>&amp;<name>outAppRef</name></expr></argument>,
	                     <argument><expr><name>CFURLRefObj_New</name></expr></argument>, <argument><expr><name>outAppURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Launch_LSGetApplicationForInfo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>inType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>inCreator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFStringRef</name></type> <name>inExtension</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LSRolesMask</name></type> <name>inRoleMask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>outAppRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFURLRef</name></type> <name>outAppURL</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;l"</expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>inType</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>inCreator</name></expr></argument>,
	                      <argument><expr><name>OptCFStringRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inExtension</name></expr></argument>,
	                      <argument><expr>&amp;<name>inRoleMask</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>LSGetApplicationForInfo</name><argument_list>(<argument><expr><name>inType</name></expr></argument>,
	                               <argument><expr><name>inCreator</name></expr></argument>,
	                               <argument><expr><name>inExtension</name></expr></argument>,
	                               <argument><expr><name>inRoleMask</name></expr></argument>,
	                               <argument><expr>&amp;<name>outAppRef</name></expr></argument>,
	                               <argument><expr>&amp;<name>outAppURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildFSRef</name></expr></argument>, <argument><expr>&amp;<name>outAppRef</name></expr></argument>,
	                     <argument><expr><name>CFURLRefObj_New</name></expr></argument>, <argument><expr><name>outAppURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Launch_LSGetApplicationForURL</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFURLRef</name></type> <name>inURL</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LSRolesMask</name></type> <name>inRoleMask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>outAppRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFURLRef</name></type> <name>outAppURL</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
	                      <argument><expr><name>CFURLRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inURL</name></expr></argument>,
	                      <argument><expr>&amp;<name>inRoleMask</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>LSGetApplicationForURL</name><argument_list>(<argument><expr><name>inURL</name></expr></argument>,
	                              <argument><expr><name>inRoleMask</name></expr></argument>,
	                              <argument><expr>&amp;<name>outAppRef</name></expr></argument>,
	                              <argument><expr>&amp;<name>outAppURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildFSRef</name></expr></argument>, <argument><expr>&amp;<name>outAppRef</name></expr></argument>,
	                     <argument><expr><name>CFURLRefObj_New</name></expr></argument>, <argument><expr><name>outAppURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Launch_LSFindApplicationForInfo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>inCreator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFStringRef</name></type> <name>inBundleID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFStringRef</name></type> <name>inName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>outAppRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFURLRef</name></type> <name>outAppURL</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>inCreator</name></expr></argument>,
	                      <argument><expr><name>OptCFStringRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inBundleID</name></expr></argument>,
	                      <argument><expr><name>OptCFStringRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>LSFindApplicationForInfo</name><argument_list>(<argument><expr><name>inCreator</name></expr></argument>,
	                                <argument><expr><name>inBundleID</name></expr></argument>,
	                                <argument><expr><name>inName</name></expr></argument>,
	                                <argument><expr>&amp;<name>outAppRef</name></expr></argument>,
	                                <argument><expr>&amp;<name>outAppURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildFSRef</name></expr></argument>, <argument><expr>&amp;<name>outAppRef</name></expr></argument>,
	                     <argument><expr><name>CFURLRefObj_New</name></expr></argument>, <argument><expr><name>outAppURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Launch_LSCanRefAcceptItem</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>inItemFSRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>inTargetRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LSRolesMask</name></type> <name>inRoleMask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LSAcceptanceFlags</name></type> <name>inFlags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>outAcceptsItem</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;ll"</expr></argument>,
	                      <argument><expr><name>PyMac_GetFSRef</name></expr></argument>, <argument><expr>&amp;<name>inItemFSRef</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetFSRef</name></expr></argument>, <argument><expr>&amp;<name>inTargetRef</name></expr></argument>,
	                      <argument><expr>&amp;<name>inRoleMask</name></expr></argument>,
	                      <argument><expr>&amp;<name>inFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>LSCanRefAcceptItem</name><argument_list>(<argument><expr>&amp;<name>inItemFSRef</name></expr></argument>,
	                          <argument><expr>&amp;<name>inTargetRef</name></expr></argument>,
	                          <argument><expr><name>inRoleMask</name></expr></argument>,
	                          <argument><expr><name>inFlags</name></expr></argument>,
	                          <argument><expr>&amp;<name>outAcceptsItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>outAcceptsItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Launch_LSCanURLAcceptURL</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFURLRef</name></type> <name>inItemURL</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFURLRef</name></type> <name>inTargetURL</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LSRolesMask</name></type> <name>inRoleMask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LSAcceptanceFlags</name></type> <name>inFlags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>outAcceptsItem</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;ll"</expr></argument>,
	                      <argument><expr><name>CFURLRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inItemURL</name></expr></argument>,
	                      <argument><expr><name>CFURLRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inTargetURL</name></expr></argument>,
	                      <argument><expr>&amp;<name>inRoleMask</name></expr></argument>,
	                      <argument><expr>&amp;<name>inFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>LSCanURLAcceptURL</name><argument_list>(<argument><expr><name>inItemURL</name></expr></argument>,
	                         <argument><expr><name>inTargetURL</name></expr></argument>,
	                         <argument><expr><name>inRoleMask</name></expr></argument>,
	                         <argument><expr><name>inFlags</name></expr></argument>,
	                         <argument><expr>&amp;<name>outAcceptsItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>outAcceptsItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Launch_LSOpenFSRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>inRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>outLaunchedRef</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetFSRef</name></expr></argument>, <argument><expr>&amp;<name>inRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>LSOpenFSRef</name><argument_list>(<argument><expr>&amp;<name>inRef</name></expr></argument>,
	                   <argument><expr>&amp;<name>outLaunchedRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildFSRef</name></expr></argument>, <argument><expr>&amp;<name>outLaunchedRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Launch_LSOpenCFURLRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFURLRef</name></type> <name>inURL</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFURLRef</name></type> <name>outLaunchedURL</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>CFURLRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inURL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>LSOpenCFURLRef</name><argument_list>(<argument><expr><name>inURL</name></expr></argument>,
	                      <argument><expr>&amp;<name>outLaunchedURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>CFURLRefObj_New</name></expr></argument>, <argument><expr><name>outLaunchedURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>Launch_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"LSCopyItemInfoForRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Launch_LSCopyItemInfoForRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSRef inItemRef, LSRequestedInfo inWhichInfo) -&gt; (LSItemInfoRecord outItemInfo)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LSCopyItemInfoForURL"</expr>, <expr>(<name>PyCFunction</name>)<name>Launch_LSCopyItemInfoForURL</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CFURLRef inURL, LSRequestedInfo inWhichInfo) -&gt; (LSItemInfoRecord outItemInfo)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LSGetExtensionInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>Launch_LSGetExtensionInfo</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Buffer inNameLen) -&gt; (UniCharCount outExtStartIndex)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LSCopyDisplayNameForRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Launch_LSCopyDisplayNameForRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSRef inRef) -&gt; (CFStringRef outDisplayName)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LSCopyDisplayNameForURL"</expr>, <expr>(<name>PyCFunction</name>)<name>Launch_LSCopyDisplayNameForURL</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CFURLRef inURL) -&gt; (CFStringRef outDisplayName)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LSSetExtensionHiddenForRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Launch_LSSetExtensionHiddenForRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSRef inRef, Boolean inHide) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LSSetExtensionHiddenForURL"</expr>, <expr>(<name>PyCFunction</name>)<name>Launch_LSSetExtensionHiddenForURL</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CFURLRef inURL, Boolean inHide) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LSCopyKindStringForRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Launch_LSCopyKindStringForRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSRef inFSRef) -&gt; (CFStringRef outKindString)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LSCopyKindStringForURL"</expr>, <expr>(<name>PyCFunction</name>)<name>Launch_LSCopyKindStringForURL</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CFURLRef inURL) -&gt; (CFStringRef outKindString)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LSGetApplicationForItem"</expr>, <expr>(<name>PyCFunction</name>)<name>Launch_LSGetApplicationForItem</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSRef inItemRef, LSRolesMask inRoleMask) -&gt; (FSRef outAppRef, CFURLRef outAppURL)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LSGetApplicationForInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>Launch_LSGetApplicationForInfo</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType inType, OSType inCreator, CFStringRef inExtension, LSRolesMask inRoleMask) -&gt; (FSRef outAppRef, CFURLRef outAppURL)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LSGetApplicationForURL"</expr>, <expr>(<name>PyCFunction</name>)<name>Launch_LSGetApplicationForURL</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CFURLRef inURL, LSRolesMask inRoleMask) -&gt; (FSRef outAppRef, CFURLRef outAppURL)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LSFindApplicationForInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>Launch_LSFindApplicationForInfo</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType inCreator, CFStringRef inBundleID, CFStringRef inName) -&gt; (FSRef outAppRef, CFURLRef outAppURL)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LSCanRefAcceptItem"</expr>, <expr>(<name>PyCFunction</name>)<name>Launch_LSCanRefAcceptItem</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSRef inItemFSRef, FSRef inTargetRef, LSRolesMask inRoleMask, LSAcceptanceFlags inFlags) -&gt; (Boolean outAcceptsItem)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LSCanURLAcceptURL"</expr>, <expr>(<name>PyCFunction</name>)<name>Launch_LSCanURLAcceptURL</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CFURLRef inItemURL, CFURLRef inTargetURL, LSRolesMask inRoleMask, LSAcceptanceFlags inFlags) -&gt; (Boolean outAcceptsItem)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LSOpenFSRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Launch_LSOpenFSRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSRef inRef) -&gt; (FSRef outLaunchedRef)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LSOpenCFURLRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Launch_LSOpenCFURLRef</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CFURLRef inURL) -&gt; (CFURLRef outLaunchedURL)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>




<function><type><name>void</name></type> <name>init_Launch</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>




	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_Launch"</expr></argument>, <argument><expr><name>Launch_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>Launch_Error</name> = <call><name>PyMac_GetOSErrException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>Launch_Error</name> == <name>NULL</name> ||
	    <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Error"</expr></argument>, <argument><expr><name>Launch_Error</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
		<return>return;</return></then></if>
}</block></function>

<comment type="block">/* ======================= End module _Launch ======================= */</comment>

</unit>
