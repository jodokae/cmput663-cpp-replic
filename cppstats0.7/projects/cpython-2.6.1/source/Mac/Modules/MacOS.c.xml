<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Mac/Modules/MacOS.c"><comment type="block">/***********************************************************
Copyright 1991-1997 by Stichting Mathematisch Centrum, Amsterdam,
The Netherlands.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Stichting Mathematisch
Centrum or CWI not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior permission.

STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO
THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS, IN NO EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE
FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

******************************************************************/</comment>

<comment type="block">/* Macintosh OS-specific interface */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pymactoolbox.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Carbon/Carbon.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ApplicationServices/ApplicationServices.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_OSX105_SDK</name></cpp:ifndef>
<typedef>typedef <type><name>SInt16</name></type>	<name>FSIORefNum</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MacOS_Error</name></decl>;</decl_stmt> <comment type="block">/* Exception MacOS.Error */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATHNAMELEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<comment type="block">/* ----------------------------------------------------- */</comment>

<comment type="block">/* Declarations for objects of type Resource fork */</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>FSIORefNum</name></type> <name>fRefNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>isclosed</name></decl>;</decl_stmt>
}</block></struct></type> <name>rfobject</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Rftype</name></decl>;</decl_stmt>



<comment type="block">/* ---------------------------------------------------------------- */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_close</name><parameter_list>(<param><decl><type><name>rfobject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>self</name>-&gt;<name>isclosed</name></name></expr> )</condition><then> <return>return;</return></then></if>
	<expr_stmt><expr>(<name>void</name>)<call><name>FSCloseFork</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>fRefNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name>-&gt;<name>isclosed</name></name> = 1</expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>rf_read__doc__</name><index>[]</index></name> <init>= 
<expr>"Read data from resource fork"</expr></init></decl>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>rf_read</name><parameter_list>(<param><decl><type><name>rfobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ByteCount</name></type> <name>n2</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr><name><name>self</name>-&gt;<name>isclosed</name></name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"Operation on closed file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
		
	<expr_stmt><expr><name>v</name> = <call><name>PyBytes_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)<name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
		
	<expr_stmt><expr><name>err</name> = <call><name>FSReadFork</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>fRefNum</name></name></expr></argument>, <argument><expr><name>fsAtMark</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>PyString_AsString</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>err</name> &amp;&amp; <name>err</name> != <name>eofErr</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>_PyString_Resize</name><argument_list>(<argument><expr>&amp;<name>v</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>v</name></expr>;</return>
}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>rf_write__doc__</name><index>[]</index></name> <init>= 
<expr>"Write to resource fork"</expr></init></decl>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>rf_write</name><parameter_list>(<param><decl><type><name>rfobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>buffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr><name><name>self</name>-&gt;<name>isclosed</name></name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"Operation on closed file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#"</expr></argument>, <argument><expr>&amp;<name>buffer</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>err</name> = <call><name>FSWriteFork</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>fRefNum</name></name></expr></argument>, <argument><expr><name>fsAtMark</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>rf_seek__doc__</name><index>[]</index></name> <init>= 
<expr>"Set file position"</expr></init></decl>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>rf_seek</name><parameter_list>(<param><decl><type><name>rfobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>amount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>whence</name> <init>= <expr><name>SEEK_SET</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr><name><name>self</name>-&gt;<name>isclosed</name></name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"Operation on closed file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l|i"</expr></argument>, <argument><expr>&amp;<name>amount</name></expr></argument>, <argument><expr>&amp;<name>whence</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	
	<switch>switch <condition>(<expr><name>whence</name></expr>)</condition> <block>{
	<case>case <expr><name>SEEK_CUR</name></expr>:
		<expr_stmt><expr><name>mode</name> = <name>fsFromMark</name></expr>;</expr_stmt>
		<break>break;</break>
	</case><case>case <expr><name>SEEK_END</name></expr>:
		<expr_stmt><expr><name>mode</name> = <name>fsFromLEOF</name></expr>;</expr_stmt>
		<break>break;</break>
	</case><case>case <expr><name>SEEK_SET</name></expr>:
		<expr_stmt><expr><name>mode</name> = <name>fsFromStart</name></expr>;</expr_stmt>
		<break>break;</break>
	</case><default>default:
		<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</default>}</block></switch>

	<expr_stmt><expr><name>err</name> = <call><name>FSSetForkPosition</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>fRefNum</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>err</name> != <name>noErr</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>rf_tell__doc__</name><index>[]</index></name> <init>= 
<expr>"Get file position"</expr></init></decl>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>rf_tell</name><parameter_list>(<param><decl><type><name>rfobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>where</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr><name><name>self</name>-&gt;<name>isclosed</name></name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"Operation on closed file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>err</name> = <call><name>FSGetForkPosition</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>fRefNum</name></name></expr></argument>, <argument><expr>&amp;<name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>err</name> != <name>noErr</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>PyLong_FromLongLong</name><argument_list>(<argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>rf_close__doc__</name><index>[]</index></name> <init>= 
<expr>"Close resource fork"</expr></init></decl>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>rf_close</name><parameter_list>(<param><decl><type><name>rfobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>do_close</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>rf_methods</name><index>[]</index></name> <init>= <expr><block>{
 <expr><block>{<expr>"read"</expr>,	<expr>(<name>PyCFunction</name>)<name>rf_read</name></expr>,	<expr>1</expr>,	<expr><name>rf_read__doc__</name></expr>}</block></expr>,
 <expr><block>{<expr>"write"</expr>,	<expr>(<name>PyCFunction</name>)<name>rf_write</name></expr>,	<expr>1</expr>,	<expr><name>rf_write__doc__</name></expr>}</block></expr>,
 <expr><block>{<expr>"seek"</expr>,	<expr>(<name>PyCFunction</name>)<name>rf_seek</name></expr>,	<expr>1</expr>,	<expr><name>rf_seek__doc__</name></expr>}</block></expr>,
 <expr><block>{<expr>"tell"</expr>,	<expr>(<name>PyCFunction</name>)<name>rf_tell</name></expr>,	<expr>1</expr>,	<expr><name>rf_tell__doc__</name></expr>}</block></expr>,
 <expr><block>{<expr>"close"</expr>,	<expr>(<name>PyCFunction</name>)<name>rf_close</name></expr>,	<expr>1</expr>,	<expr><name>rf_close__doc__</name></expr>}</block></expr>,
 
	<expr><block>{<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* ---------- */</comment>


<function><type><specifier>static</specifier> <name>rfobject</name> *</type>
<name>newrfobject</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>rfobject</name> *</type><name>self</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>self</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>rfobject</name></expr></argument>, <argument><expr>&amp;<name>Rftype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>self</name>-&gt;<name>isclosed</name></name> = 1</expr>;</expr_stmt>
	<return>return <expr><name>self</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>rf_dealloc</name><parameter_list>(<param><decl><type><name>rfobject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>do_close</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyObject_DEL</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>rf_getattr</name><parameter_list>(<param><decl><type><name>rfobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>rf_methods</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>Rftype__doc__</name><index>[]</index></name> <init>= 
<expr>"Resource fork file object"</expr></init></decl>
;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Rftype</name> <init>= <expr><block>{
	<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>)</argument_list></call>
	0</expr>,				<comment type="block">/*ob_size*/</comment>
	<expr>"MacOS.ResourceFork"</expr>,		<comment type="block">/*tp_name*/</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>rfobject</name></expr></argument>)</argument_list></sizeof></expr>,		<comment type="block">/*tp_basicsize*/</comment>
	<expr>0</expr>,				<comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>)<name>rf_dealloc</name></expr>,	<comment type="block">/*tp_dealloc*/</comment>
	<expr>(<name>printfunc</name>)0</expr>,		<comment type="block">/*tp_print*/</comment>
	<expr>(<name>getattrfunc</name>)<name>rf_getattr</name></expr>,	<comment type="block">/*tp_getattr*/</comment>
	<expr>(<name>setattrfunc</name>)0</expr>,	<comment type="block">/*tp_setattr*/</comment>
	<expr>(<name>cmpfunc</name>)0</expr>,		<comment type="block">/*tp_compare*/</comment>
	<expr>(<name>reprfunc</name>)0</expr>,		<comment type="block">/*tp_repr*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_as_number*/</comment>
	<expr>0</expr>,		<comment type="block">/*tp_as_sequence*/</comment>
	<expr>0</expr>,		<comment type="block">/*tp_as_mapping*/</comment>
	<expr>(<name>hashfunc</name>)0</expr>,		<comment type="block">/*tp_hash*/</comment>
	<expr>(<name>ternaryfunc</name>)0</expr>,		<comment type="block">/*tp_call*/</comment>
	<expr>(<name>reprfunc</name>)0</expr>,		<comment type="block">/*tp_str*/</comment>

	<comment type="block">/* Space for future expansion */</comment>
	<expr>0L</expr>,<expr>0L</expr>,<expr>0L</expr>,<expr>0L</expr>,
	<expr><name>Rftype__doc__</name></expr> <comment type="block">/* Documentation string */</comment>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* End of code for Resource fork objects */</comment>
<comment type="block">/* -------------------------------------------------------- */</comment>

<comment type="block">/*----------------------------------------------------------------------*/</comment>
<comment type="block">/* Miscellaneous File System Operations */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>getcrtp_doc</name><index>[]</index></name> <init>= <expr>"Get MacOS 4-char creator and type for a file"</expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>MacOS_GetCreatorAndType</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>creator</name></decl>, *<decl><type ref="prev"/><name>type</name></decl>, *<decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>ref</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSCatalogInfo</name></type>	<name>cataloginfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FileInfo</name>*</type> <name>finfo</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_GetFSRef</name></expr></argument>, <argument><expr>&amp;<name>ref</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
		<comment type="block">/* This function is documented to take an FSSpec as well,
		 * which only works in 32-bit mode.
		 */</comment>
		<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>FSSpec</name></type> <name>fss</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FInfo</name></type> <name>info</name></decl>;</decl_stmt>

		<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>fss</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<return>return <expr><name>NULL</name></expr>;</return></then></if>

		<if>if <condition>(<expr>(<name>err</name> = <call><name>FSpGetFInfo</name><argument_list>(<argument><expr>&amp;<name>fss</name></expr></argument>, <argument><expr>&amp;<name>info</name></expr></argument>)</argument_list></call>) != <name>noErr</name></expr>)</condition><then> <block>{
			<return>return <expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>MacOS_Error</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><name>creator</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(
				<argument><expr>(<name>char</name> *)&amp;<name><name>info</name>.<name>fdCreator</name></name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>type</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)&amp;<name><name>info</name>.<name>fdType</name></name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"OO"</expr></argument>, <argument><expr><name>creator</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>creator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>res</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>	<comment type="block">/* __LP64__ */</comment>
		<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	<comment type="block">/* __LP64__ */</comment>
	}</block></then></if>

	<expr_stmt><expr><name>err</name> = <call><name>FSGetCatalogInfo</name><argument_list>(<argument><expr>&amp;<name>ref</name></expr></argument>, 
			<argument><expr><name>kFSCatInfoFinderInfo</name>|<name>kFSCatInfoNodeFlags</name></expr></argument>, <argument><expr>&amp;<name>cataloginfo</name></expr></argument>, 
			<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>err</name> != <name>noErr</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>MacOS_Error</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<if>if <condition>(<expr>(<name><name>cataloginfo</name>.<name>nodeFlags</name></name> &amp; <name>kFSNodeIsDirectoryMask</name>) != 0</expr>)</condition><then> <block>{
		<comment type="block">/* Directory: doesn't have type/creator info.
		 *
		 * The specific error code is for backward compatibility with
		 * earlier versions.
		 */</comment>
		<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>MacOS_Error</name></expr></argument>, <argument><expr><name>fnfErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>

	}</block></then></if> 
	<expr_stmt><expr><name>finfo</name> = (<name>FileInfo</name>*)&amp;(<name><name>cataloginfo</name>.<name>finderInfo</name></name>)</expr>;</expr_stmt>
	<expr_stmt><expr><name>creator</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name>*)&amp;(<name><name>finfo</name>-&gt;<name>fileCreator</name></name>)</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>type</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name>*)&amp;(<name><name>finfo</name>-&gt;<name>fileType</name></name>)</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"OO"</expr></argument>, <argument><expr><name>creator</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>creator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>setcrtp_doc</name><index>[]</index></name> <init>= <expr>"Set MacOS 4-char creator and type for a file"</expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>MacOS_SetCreatorAndType</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ResType</name></type> <name>creator</name></decl>, <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>ref</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FileInfo</name>*</type> <name>finfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSCatalogInfo</name></type>	<name>cataloginfo</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
			<argument><expr><name>PyMac_GetFSRef</name></expr></argument>, <argument><expr>&amp;<name>ref</name></expr></argument>, <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>creator</name></expr></argument>, <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
		<comment type="block">/* Try to handle FSSpec arguments, for backward compatibility */</comment>
		<decl_stmt><decl><type><name>FSSpec</name></type> <name>fss</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FInfo</name></type> <name>info</name></decl>;</decl_stmt>

		<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
			<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>fss</name></expr></argument>, <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>creator</name></expr></argument>, <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<return>return <expr><name>NULL</name></expr>;</return></then></if>

		<if>if <condition>(<expr>(<name>err</name> = <call><name>FSpGetFInfo</name><argument_list>(<argument><expr>&amp;<name>fss</name></expr></argument>, <argument><expr>&amp;<name>info</name></expr></argument>)</argument_list></call>) != <name>noErr</name></expr>)</condition><then>
			<return>return <expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>MacOS_Error</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

		<expr_stmt><expr><name><name>info</name>.<name>fdCreator</name></name> = <name>creator</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name>.<name>fdType</name></name> = <name>type</name></expr>;</expr_stmt>

		<if>if <condition>(<expr>(<name>err</name> = <call><name>FSpSetFInfo</name><argument_list>(<argument><expr>&amp;<name>fss</name></expr></argument>, <argument><expr>&amp;<name>info</name></expr></argument>)</argument_list></call>) != <name>noErr</name></expr>)</condition><then>
			<return>return <expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>MacOS_Error</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>Py_None</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* __LP64__ */</comment>
		<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>
	}</block></then></if>
	
	<expr_stmt><expr><name>err</name> = <call><name>FSGetCatalogInfo</name><argument_list>(<argument><expr>&amp;<name>ref</name></expr></argument>, 
			<argument><expr><name>kFSCatInfoFinderInfo</name>|<name>kFSCatInfoNodeFlags</name></expr></argument>, <argument><expr>&amp;<name>cataloginfo</name></expr></argument>, 
			<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>err</name> != <name>noErr</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>MacOS_Error</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<if>if <condition>(<expr>(<name><name>cataloginfo</name>.<name>nodeFlags</name></name> &amp; <name>kFSNodeIsDirectoryMask</name>) != 0</expr>)</condition><then> <block>{
		<comment type="block">/* Directory: doesn't have type/creator info.
		 *
		 * The specific error code is for backward compatibility with
		 * earlier versions.
		 */</comment>
		<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>MacOS_Error</name></expr></argument>, <argument><expr><name>fnfErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>

	}</block></then></if> 
	<expr_stmt><expr><name>finfo</name> = (<name>FileInfo</name>*)&amp;(<name><name>cataloginfo</name>.<name>finderInfo</name></name>)</expr>;</expr_stmt>
	<expr_stmt><expr><name><name>finfo</name>-&gt;<name>fileCreator</name></name> = <name>creator</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>finfo</name>-&gt;<name>fileType</name></name> = <name>type</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>err</name> = <call><name>FSSetCatalogInfo</name><argument_list>(<argument><expr>&amp;<name>ref</name></expr></argument>, <argument><expr><name>kFSCatInfoFinderInfo</name></expr></argument>, <argument><expr>&amp;<name>cataloginfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>err</name> != <name>noErr</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><name>MacOS_Error</name></expr></argument>, <argument><expr><name>fnfErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>geterr_doc</name><index>[]</index></name> <init>= <expr>"Convert OSErr number to string"</expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>MacOS_GetErrorString</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>errors_loaded</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>h</name> = <call><name>GetResource</name><argument_list>(<argument><expr>'Estr'</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>h</name> &amp;&amp; !<name>errors_loaded</name></expr>)</condition><then> <block>{
		<comment type="block">/*
		** Attempt to open the resource file containing the
		** Estr resources. We ignore all errors. We also try
		** this only once.
		*/</comment>
		<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>rv</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>errors_loaded</name> = 1</expr>;</expr_stmt>
		
		<expr_stmt><expr><name>m</name> = <call><name>PyImport_ImportModuleNoBlock</name><argument_list>(<argument><expr>"macresource"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr>!<name>m</name></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>Py_VerboseFlag</name></expr>)</condition><then>
				<expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><name>rv</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"open_error_resource"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr>!<name>rv</name></expr>)</condition><then> <block>{
				<if>if <condition>(<expr><name>Py_VerboseFlag</name></expr>)</condition><then>
					<expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else <block>{
				<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* And try again... */</comment>
				<expr_stmt><expr><name>h</name> = <call><name>GetResource</name><argument_list>(<argument><expr>'Estr'</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then></if>
	<comment type="block">/*
	** Whether the code above succeeded or not, we won't try
	** again.
	*/</comment>
	<expr_stmt><expr><name>errors_loaded</name> = 1</expr>;</expr_stmt>
		
	<if>if <condition>(<expr><name>h</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>HLock</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>str</name> = (<name>char</name> *)*<name>h</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>str</name>+1</expr></argument>, <argument><expr>(<name>unsigned</name> <name>char</name>)<name><name>str</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr>(<name>unsigned</name> <name>char</name>)<name><name>str</name><index>[<expr>0</expr>]</index></name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>HUnlock</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ReleaseResource</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else>else <block>{
		<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"Mac OS error code %d"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>

	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"s"</expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>splash_doc</name><index>[]</index></name> <init>= <expr>"Open a splash-screen dialog by resource-id (0=close)"</expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>MacOS_splash</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>resid</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>DialogPtr</name></type> <name>curdialog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DialogPtr</name></type> <name>olddialog</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WindowRef</name></type> <name>theWindow</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CGrafPtr</name></type> <name>thePort</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
	short xpos, ypos, width, height, swidth, sheight;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|i"</expr></argument>, <argument><expr>&amp;<name>resid</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>olddialog</name> = <name>curdialog</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>curdialog</name> = <name>NULL</name></expr>;</expr_stmt>

	<if>if <condition>( <expr><name>resid</name> != -1</expr> )</condition><then> <block>{
		<expr_stmt><expr><name>curdialog</name> = <call><name>GetNewDialog</name><argument_list>(<argument><expr><name>resid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>WindowPtr</name>)-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>( <expr><name>curdialog</name></expr> )</condition><then> <block>{
			<expr_stmt><expr><name>theWindow</name> = <call><name>GetDialogWindow</name><argument_list>(<argument><expr><name>curdialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>thePort</name> = <call><name>GetWindowPort</name><argument_list>(<argument><expr><name>theWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
			width = thePort-&gt;portRect.right - thePort-&gt;portRect.left;
			height = thePort-&gt;portRect.bottom - thePort-&gt;portRect.top;
			swidth = qd.screenBits.bounds.right - qd.screenBits.bounds.left;
			sheight = qd.screenBits.bounds.bottom - qd.screenBits.bounds.top - LMGetMBarHeight();
			xpos = (swidth-width)/2;
			ypos = (sheight-height)/5 + LMGetMBarHeight();
			MoveWindow(theWindow, xpos, ypos, 0);
			ShowWindow(theWindow);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name>DrawDialog</name><argument_list>(<argument><expr><name>curdialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<if>if <condition>(<expr><name>olddialog</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>DisposeDialog</name><argument_list>(<argument><expr><name>olddialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>DebugStr_doc</name><index>[]</index></name> <init>= <expr>"Switch to low-level debugger with a message"</expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>MacOS_DebugStr</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>Str255</name></type> <name>message</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>object</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
	
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O&amp;|O"</expr></argument>, <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr>&amp;<name>object</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<expr_stmt><expr><call><name>DebugStr</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>SysBeep_doc</name><index>[]</index></name> <init>= <expr>"BEEEEEP!!!"</expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>MacOS_SysBeep</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>duration</name> <init>= <expr>6</expr></init></decl>;</decl_stmt>
	
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|i"</expr></argument>, <argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SysBeep</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>WMAvailable_doc</name><index>[]</index></name> <init>= 
	<expr>"True if this process can interact with the display."
	"Will foreground the application on the first call as a side-effect."</expr></init></decl>
	;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>MacOS_WMAvailable</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr>!<name>rv</name></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>ProcessSerialNumber</name></type> <name>psn</name></decl>;</decl_stmt>
		
		<comment type="block">/*
		** This is a fairly innocuous call to make if we don't have a window
		** manager, or if we have no permission to talk to it. It will print
		** a message on stderr, but at least it won't abort the process.
		** It appears the function caches the result itself, and it's cheap, so
		** no need for us to cache.
		*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>kCGNullDirectDisplay</name></cpp:ifdef>
		<comment type="block">/* On 10.1 CGMainDisplayID() isn't available, and
		** kCGNullDirectDisplay isn't defined.
		*/</comment>
		<if>if <condition>(<expr><call><name>CGMainDisplayID</name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
			<expr_stmt><expr><name>rv</name> = <name>Py_False</name></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<if>if <condition>(<expr><call><name>GetCurrentProcess</name><argument_list>(<argument><expr>&amp;<name>psn</name></expr></argument>)</argument_list></call> &lt; 0 ||
				<call><name>SetFrontProcess</name><argument_list>(<argument><expr>&amp;<name>psn</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
				<expr_stmt><expr><name>rv</name> = <name>Py_False</name></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name>rv</name> = <name>Py_True</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block>
	}</block></else></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>GetTicks_doc</name><index>[]</index></name> <init>= <expr>"Return number of ticks since bootup"</expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>MacOS_GetTicks</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr>(<name>int</name>)<call><name>TickCount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>openrf_doc</name><index>[]</index></name> <init>= <expr>"Open resource fork of a file"</expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>MacOS_openrf</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>mode</name> <init>= <expr>"r"</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>ref</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt8</name></type> <name>permission</name> <init>= <expr><name>fsRdPerm</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rfobject</name> *</type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HFSUniStr255</name></type> <name>name</name></decl>;</decl_stmt>
		
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O&amp;|s"</expr></argument>, <argument><expr><name>PyMac_GetFSRef</name></expr></argument>, <argument><expr>&amp;<name>ref</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<while>while <condition>(<expr>*<name>mode</name></expr>)</condition> <block>{
		<switch>switch <condition>(<expr>*<name>mode</name>++</expr>)</condition> <block>{
		<case>case <expr>'*'</expr>: <break>break;</break>
		</case><case>case <expr>'r'</expr>: <expr_stmt><expr><name>permission</name> = <name>fsRdPerm</name></expr>;</expr_stmt> <break>break;</break>
		</case><case>case <expr>'w'</expr>: <expr_stmt><expr><name>permission</name> = <name>fsWrPerm</name></expr>;</expr_stmt> <break>break;</break>
		</case><case>case <expr>'b'</expr>: <break>break;</break>
		</case><default>default:
			<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</default>}</block></switch>
	}</block></while>

	<expr_stmt><expr><name>err</name> = <call><name>FSGetResourceForkName</name><argument_list>(<argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>err</name> != <name>noErr</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	
	<if>if <condition>( <expr>(<name>fp</name> = <call><name>newrfobject</name><argument_list>()</argument_list></call>) == <name>NULL</name></expr> )</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	
	<expr_stmt><expr><name>err</name> = <call><name>FSOpenFork</name><argument_list>(<argument><expr>&amp;<name>ref</name></expr></argument>, <argument><expr><name><name>name</name>.<name>length</name></name></expr></argument>, <argument><expr><name><name>name</name>.<name>unicode</name></name></expr></argument>, <argument><expr><name>permission</name></expr></argument>, <argument><expr>&amp;<name><name>fp</name>-&gt;<name>fRefNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>err</name> != <name>noErr</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name><name>fp</name>-&gt;<name>isclosed</name></name> = 0</expr>;</expr_stmt>
	<return>return <expr>(<name>PyObject</name> *)<name>fp</name></expr>;</return>
}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>MacOS_Methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"GetCreatorAndType"</expr>,		<expr><name>MacOS_GetCreatorAndType</name></expr>, <expr>1</expr>,	<expr><name>getcrtp_doc</name></expr>}</block></expr>,
	<expr><block>{<expr>"SetCreatorAndType"</expr>,		<expr><name>MacOS_SetCreatorAndType</name></expr>, <expr>1</expr>,	<expr><name>setcrtp_doc</name></expr>}</block></expr>,
	<expr><block>{<expr>"GetErrorString"</expr>,		<expr><name>MacOS_GetErrorString</name></expr>,	<expr>1</expr>,	<expr><name>geterr_doc</name></expr>}</block></expr>,
	<expr><block>{<expr>"openrf"</expr>,			<expr><name>MacOS_openrf</name></expr>, 		<expr>1</expr>, 	<expr><name>openrf_doc</name></expr>}</block></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<expr><block>{<expr>"splash"</expr>,			<expr><name>MacOS_splash</name></expr>,		<expr>1</expr>, 	<expr><name>splash_doc</name></expr>}</block></expr>,
	<expr><block>{<expr>"DebugStr"</expr>,			<expr><name>MacOS_DebugStr</name></expr>,		<expr>1</expr>,	<expr><name>DebugStr_doc</name></expr>}</block></expr>,
	<expr><block>{<expr>"SysBeep"</expr>,			<expr><name>MacOS_SysBeep</name></expr>,		<expr>1</expr>,	<expr><name>SysBeep_doc</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>
	<expr><block>{<expr>"GetTicks"</expr>,			<expr><name>MacOS_GetTicks</name></expr>,		<expr>1</expr>,	<expr><name>GetTicks_doc</name></expr>}</block></expr>,
	<expr><block>{<expr>"WMAvailable"</expr>,			<expr><name>MacOS_WMAvailable</name></expr>,		<expr>1</expr>,	<expr><name>WMAvailable_doc</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,				<expr><name>NULL</name></expr>}</block></expr>		 <comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>


<function><type><name>void</name></type>
<name>initMacOS</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"In 3.x, MacOS is removed."</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return;</return></then></if>
	
	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"MacOS"</expr></argument>, <argument><expr><name>MacOS_Methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* Initialize MacOS.Error exception */</comment>
	<expr_stmt><expr><name>MacOS_Error</name> = <call><name>PyMac_GetOSErrException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>MacOS_Error</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Error"</expr></argument>, <argument><expr><name>MacOS_Error</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><name><name>Rftype</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>Rftype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ResourceForkType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>Rftype</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<comment type="block">/*
	** This is a hack: the following constant added to the id() of a string
	** object gives you the address of the data. Unfortunately, it is needed for
	** some of the image and sound processing interfaces on the mac:-(
	*/</comment>
	<block>{
		<decl_stmt><decl><type><name>PyStringObject</name> *</type><name>p</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name></type> <name>off</name> <init>= <expr>(<name>long</name>)&amp;(<name><name>p</name>-&gt;<name>ob_sval</name><index>[<expr>0</expr>]</index></name>)</expr></init></decl>;</decl_stmt>
		
		<if>if<condition>( <expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"string_id_to_buffer"</expr></argument>, <argument><expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
			<return>return;</return></then></if>
	}</block>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_RUNTIMEMODEL</name></cpp:macro> <cpp:value>"macho"</cpp:value></cpp:define>
	<if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"runtimemodel"</expr></argument>, 
				<argument><expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"s"</expr></argument>, <argument><expr><name>PY_RUNTIMEMODEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
		<return>return;</return></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_NEXT_FRAMEWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_LINKMODEL</name></cpp:macro> <cpp:value>"framework"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_ENABLE_SHARED</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_LINKMODEL</name></cpp:macro> <cpp:value>"shared"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_LINKMODEL</name></cpp:macro> <cpp:value>"static"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"linkmodel"</expr></argument>, 
				<argument><expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"s"</expr></argument>, <argument><expr><name>PY_LINKMODEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
		<return>return;</return></then></if>

}</block></function></block></function>
</unit>
