<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Mac/Modules/menu/_Menumodule.c">
<comment type="block">/* ========================== Module _Menu ========================== */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pymactoolbox.h"</cpp:file></cpp:include>

<comment type="block">/* Macro to test whether a weak-loaded CFM function exists */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMac_PRECHECK</name><parameter_list>(<param><type><name>rtn</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { if ( &amp;rtn == NULL )  {\
        PyErr_SetString(PyExc_NotImplementedError, \
        "Not available in this shared library/OS version"); \
        return NULL; \
    }} while(0)</cpp:value></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Carbon/Carbon.h&gt;</cpp:file></cpp:include>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TOOLBOX_OBJECT_GLUE</name></cpp:ifdef>

<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>_MenuObj_New</name><parameter_list>(<param><decl><type><name>MenuHandle</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_MenuObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>MenuHandle</name> *</type></decl></param>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MenuObj_New</name></cpp:macro> <cpp:value>_MenuObj_New</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MenuObj_Convert</name></cpp:macro> <cpp:value>_MenuObj_Convert</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_Menu</name><parameter_list>(<param><type><name>h</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((MenuHandle)h)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_Resource</name><parameter_list>(<param><type><name>h</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((Handle)h)</cpp:value></cpp:define>


<comment type="block">/* Alternative version of MenuObj_New, which returns None for NULL argument */</comment>
<function><type><name>PyObject</name> *</type><name>OptMenuObj_New</name><parameter_list>(<param><decl><type><name>MenuRef</name></type> <name>itself</name></decl></param>)</parameter_list>
<block>{
        <if>if <condition>(<expr><name>itself</name> == <name>NULL</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>Py_None</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>MenuObj_New</name><argument_list>(<argument><expr><name>itself</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Alternative version of MenuObj_Convert, which returns NULL for a None argument */</comment>
<function><type><name>int</name></type> <name>OptMenuObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>MenuRef</name> *</type><name>p_itself</name></decl></param>)</parameter_list>
<block>{
        <if>if <condition>( <expr><name>v</name> == <name>Py_None</name></expr> )</condition><then> <block>{
                <expr_stmt><expr>*<name>p_itself</name> = <name>NULL</name></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>MenuObj_Convert</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>p_itself</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_Error</name></decl>;</decl_stmt>

<comment type="block">/* ------------------------ Object type Menu ------------------------ */</comment>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>Menu_Type</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MenuObj_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;Menu_Type || PyObject_TypeCheck((x), &amp;Menu_Type))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MenuObject</name> <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>MenuHandle</name></type> <name>ob_itself</name></decl>;</decl_stmt>
}</block></struct></type> <name>MenuObject</name>;</typedef>

<function><type><name>PyObject</name> *</type><name>MenuObj_New</name><parameter_list>(<param><decl><type><name>MenuHandle</name></type> <name>itself</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>MenuObject</name> *</type><name>it</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>MenuObject</name></expr></argument>, <argument><expr>&amp;<name>Menu_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_itself</name></name> = <name>itself</name></expr>;</expr_stmt>
	<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>MenuObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>MenuHandle</name> *</type><name>p_itself</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr>!<call><name>MenuObj_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Menu required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>0</expr>;</return>
	}</block></then></if>
	<expr_stmt><expr>*<name>p_itself</name> = ((<name>MenuObject</name> *)<name>v</name>)-&gt;<name>ob_itself</name></expr>;</expr_stmt>
	<return>return <expr>1</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MenuObj_dealloc</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<comment type="block">/* Cleanup of self-&gt;ob_itself goes here */</comment>
	<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_DisposeMenu</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DisposeMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DisposeMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DisposeMenu</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_CalcMenuSize</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CalcMenuSize</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CalcMenuSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>CalcMenuSize</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_CountMenuItems</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt16</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CountMenuItems</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CountMenuItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>CountMenuItems</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"H"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuFont</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>outFontID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt16</name></type> <name>outFontSize</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuFont</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetMenuFont</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                   <argument><expr>&amp;<name>outFontID</name></expr></argument>,
	                   <argument><expr>&amp;<name>outFontSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"hH"</expr></argument>,
	                     <argument><expr><name>outFontID</name></expr></argument>,
	                     <argument><expr><name>outFontSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetMenuFont</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>inFontID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt16</name></type> <name>inFontSize</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuFont</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hH"</expr></argument>,
	                      <argument><expr>&amp;<name>inFontID</name></expr></argument>,
	                      <argument><expr>&amp;<name>inFontSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetMenuFont</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                   <argument><expr><name>inFontID</name></expr></argument>,
	                   <argument><expr><name>inFontSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuExcludesMarkColumn</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuExcludesMarkColumn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuExcludesMarkColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetMenuExcludesMarkColumn</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetMenuExcludesMarkColumn</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>excludesMark</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuExcludesMarkColumn</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuExcludesMarkColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"b"</expr></argument>,
	                      <argument><expr>&amp;<name>excludesMark</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetMenuExcludesMarkColumn</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                 <argument><expr><name>excludesMark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_IsValidMenu</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsValidMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsValidMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>IsValidMenu</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuRetainCount</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemCount</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuRetainCount</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuRetainCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetMenuRetainCount</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_RetainMenu</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RetainMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RetainMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>RetainMenu</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_ReleaseMenu</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ReleaseMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ReleaseMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>ReleaseMenu</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_DuplicateMenu</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>outMenu</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DuplicateMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DuplicateMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>DuplicateMenu</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                     <argument><expr>&amp;<name>outMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>MenuObj_New</name></expr></argument>, <argument><expr><name>outMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_CopyMenuTitleAsCFString</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFStringRef</name></type> <name>outString</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CopyMenuTitleAsCFString</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CopyMenuTitleAsCFString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>CopyMenuTitleAsCFString</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                               <argument><expr>&amp;<name>outString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>CFStringRefObj_New</name></expr></argument>, <argument><expr><name>outString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetMenuTitleWithCFString</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFStringRef</name></type> <name>inString</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuTitleWithCFString</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuTitleWithCFString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>CFStringRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inString</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetMenuTitleWithCFString</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                <argument><expr><name>inString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_InvalidateMenuSize</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InvalidateMenuSize</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InvalidateMenuSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>InvalidateMenuSize</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_IsMenuSizeInvalid</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsMenuSizeInvalid</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsMenuSizeInvalid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>IsMenuSizeInvalid</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_MacAppendMenu</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>data</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacAppendMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacAppendMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacAppendMenu</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	              <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_InsertResMenu</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ResType</name></type> <name>theType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>afterItem</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InsertResMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InsertResMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>theType</name></expr></argument>,
	                      <argument><expr>&amp;<name>afterItem</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>InsertResMenu</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	              <argument><expr><name>theType</name></expr></argument>,
	              <argument><expr><name>afterItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_AppendResMenu</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ResType</name></type> <name>theType</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AppendResMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AppendResMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>theType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>AppendResMenu</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	              <argument><expr><name>theType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_MacInsertMenuItem</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>itemString</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>afterItem</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacInsertMenuItem</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacInsertMenuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>itemString</name></expr></argument>,
	                      <argument><expr>&amp;<name>afterItem</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacInsertMenuItem</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                  <argument><expr><name>itemString</name></expr></argument>,
	                  <argument><expr><name>afterItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_DeleteMenuItem</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>item</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DeleteMenuItem</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DeleteMenuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DeleteMenuItem</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	               <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_InsertFontResMenu</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>afterItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>scriptFilter</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InsertFontResMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InsertFontResMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>afterItem</name></expr></argument>,
	                      <argument><expr>&amp;<name>scriptFilter</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>InsertFontResMenu</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                  <argument><expr><name>afterItem</name></expr></argument>,
	                  <argument><expr><name>scriptFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_InsertIntlResMenu</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ResType</name></type> <name>theType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>afterItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>scriptFilter</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InsertIntlResMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InsertIntlResMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>theType</name></expr></argument>,
	                      <argument><expr>&amp;<name>afterItem</name></expr></argument>,
	                      <argument><expr>&amp;<name>scriptFilter</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>InsertIntlResMenu</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                  <argument><expr><name>theType</name></expr></argument>,
	                  <argument><expr><name>afterItem</name></expr></argument>,
	                  <argument><expr><name>scriptFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_AppendMenuItemText</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>inString</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AppendMenuItemText</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AppendMenuItemText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>inString</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>AppendMenuItemText</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                          <argument><expr><name>inString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_InsertMenuItemText</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>inString</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>afterItem</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InsertMenuItemText</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InsertMenuItemText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>inString</name></expr></argument>,
	                      <argument><expr>&amp;<name>afterItem</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>InsertMenuItemText</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                          <argument><expr><name>inString</name></expr></argument>,
	                          <argument><expr><name>afterItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_CopyMenuItems</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>inFirstItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemCount</name></type> <name>inNumItems</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>inDestMenu</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>inInsertAfter</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CopyMenuItems</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CopyMenuItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hlO&amp;h"</expr></argument>,
	                      <argument><expr>&amp;<name>inFirstItem</name></expr></argument>,
	                      <argument><expr>&amp;<name>inNumItems</name></expr></argument>,
	                      <argument><expr><name>MenuObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inDestMenu</name></expr></argument>,
	                      <argument><expr>&amp;<name>inInsertAfter</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>CopyMenuItems</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                     <argument><expr><name>inFirstItem</name></expr></argument>,
	                     <argument><expr><name>inNumItems</name></expr></argument>,
	                     <argument><expr><name>inDestMenu</name></expr></argument>,
	                     <argument><expr><name>inInsertAfter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_DeleteMenuItems</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>inFirstItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemCount</name></type> <name>inNumItems</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DeleteMenuItems</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DeleteMenuItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hl"</expr></argument>,
	                      <argument><expr>&amp;<name>inFirstItem</name></expr></argument>,
	                      <argument><expr>&amp;<name>inNumItems</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>DeleteMenuItems</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                       <argument><expr><name>inFirstItem</name></expr></argument>,
	                       <argument><expr><name>inNumItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_AppendMenuItemTextWithCFString</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFStringRef</name></type> <name>inString</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemAttributes</name></type> <name>inAttributes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>inCommandID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>outNewItem</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AppendMenuItemTextWithCFString</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AppendMenuItemTextWithCFString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
	                      <argument><expr><name>CFStringRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inString</name></expr></argument>,
	                      <argument><expr>&amp;<name>inAttributes</name></expr></argument>,
	                      <argument><expr>&amp;<name>inCommandID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>AppendMenuItemTextWithCFString</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                      <argument><expr><name>inString</name></expr></argument>,
	                                      <argument><expr><name>inAttributes</name></expr></argument>,
	                                      <argument><expr><name>inCommandID</name></expr></argument>,
	                                      <argument><expr>&amp;<name>outNewItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>outNewItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_InsertMenuItemTextWithCFString</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFStringRef</name></type> <name>inString</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>inAfterItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemAttributes</name></type> <name>inAttributes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>inCommandID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InsertMenuItemTextWithCFString</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InsertMenuItemTextWithCFString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hll"</expr></argument>,
	                      <argument><expr><name>CFStringRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inString</name></expr></argument>,
	                      <argument><expr>&amp;<name>inAfterItem</name></expr></argument>,
	                      <argument><expr>&amp;<name>inAttributes</name></expr></argument>,
	                      <argument><expr>&amp;<name>inCommandID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>InsertMenuItemTextWithCFString</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                      <argument><expr><name>inString</name></expr></argument>,
	                                      <argument><expr><name>inAfterItem</name></expr></argument>,
	                                      <argument><expr><name>inAttributes</name></expr></argument>,
	                                      <argument><expr><name>inCommandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_PopUpMenuSelect</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>top</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>left</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>popUpItem</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PopUpMenuSelect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PopUpMenuSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hhh"</expr></argument>,
	                      <argument><expr>&amp;<name>top</name></expr></argument>,
	                      <argument><expr>&amp;<name>left</name></expr></argument>,
	                      <argument><expr>&amp;<name>popUpItem</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>PopUpMenuSelect</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                      <argument><expr><name>top</name></expr></argument>,
	                      <argument><expr><name>left</name></expr></argument>,
	                      <argument><expr><name>popUpItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_InvalidateMenuEnabling</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InvalidateMenuEnabling</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InvalidateMenuEnabling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>InvalidateMenuEnabling</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_IsMenuBarInvalid</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsMenuBarInvalid</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsMenuBarInvalid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>IsMenuBarInvalid</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_MacInsertMenu</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuID</name></type> <name>beforeID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacInsertMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacInsertMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>beforeID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacInsertMenu</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	              <argument><expr><name>beforeID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetRootMenu</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetRootMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetRootMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetRootMenu</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_MacCheckMenuItem</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>checked</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacCheckMenuItem</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacCheckMenuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hb"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>,
	                      <argument><expr>&amp;<name>checked</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacCheckMenuItem</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                 <argument><expr><name>item</name></expr></argument>,
	                 <argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetMenuItemText</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>itemString</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuItemText</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuItemText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>itemString</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetMenuItemText</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                <argument><expr><name>item</name></expr></argument>,
	                <argument><expr><name>itemString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuItemText</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>itemString</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuItemText</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuItemText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetMenuItemText</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                <argument><expr><name>item</name></expr></argument>,
	                <argument><expr><name>itemString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildStr255</name></expr></argument>, <argument><expr><name>itemString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetItemMark</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CharParameter</name></type> <name>markChar</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetItemMark</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetItemMark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>,
	                      <argument><expr>&amp;<name>markChar</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetItemMark</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	            <argument><expr><name>item</name></expr></argument>,
	            <argument><expr><name>markChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetItemMark</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CharParameter</name></type> <name>markChar</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetItemMark</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetItemMark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetItemMark</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	            <argument><expr><name>item</name></expr></argument>,
	            <argument><expr>&amp;<name>markChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>markChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetItemCmd</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CharParameter</name></type> <name>cmdChar</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetItemCmd</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetItemCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>,
	                      <argument><expr>&amp;<name>cmdChar</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetItemCmd</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	           <argument><expr><name>item</name></expr></argument>,
	           <argument><expr><name>cmdChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetItemCmd</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CharParameter</name></type> <name>cmdChar</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetItemCmd</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetItemCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetItemCmd</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	           <argument><expr><name>item</name></expr></argument>,
	           <argument><expr>&amp;<name>cmdChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>cmdChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetItemIcon</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>iconIndex</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetItemIcon</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetItemIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>,
	                      <argument><expr>&amp;<name>iconIndex</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetItemIcon</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	            <argument><expr><name>item</name></expr></argument>,
	            <argument><expr><name>iconIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetItemIcon</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>iconIndex</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetItemIcon</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetItemIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetItemIcon</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	            <argument><expr><name>item</name></expr></argument>,
	            <argument><expr>&amp;<name>iconIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>iconIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetItemStyle</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StyleParameter</name></type> <name>chStyle</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetItemStyle</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetItemStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>,
	                      <argument><expr>&amp;<name>chStyle</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetItemStyle</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	             <argument><expr><name>item</name></expr></argument>,
	             <argument><expr><name>chStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetItemStyle</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Style</name></type> <name>chStyle</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetItemStyle</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetItemStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>GetItemStyle</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	             <argument><expr><name>item</name></expr></argument>,
	             <argument><expr>&amp;<name>chStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>chStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetMenuItemCommandID</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>inCommandID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuItemCommandID</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuItemCommandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hl"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>,
	                      <argument><expr>&amp;<name>inCommandID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetMenuItemCommandID</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                            <argument><expr><name>inItem</name></expr></argument>,
	                            <argument><expr><name>inCommandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuItemCommandID</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>outCommandID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuItemCommandID</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuItemCommandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetMenuItemCommandID</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                            <argument><expr><name>inItem</name></expr></argument>,
	                            <argument><expr>&amp;<name>outCommandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>outCommandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetMenuItemModifiers</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt8</name></type> <name>inModifiers</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuItemModifiers</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuItemModifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hb"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>,
	                      <argument><expr>&amp;<name>inModifiers</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetMenuItemModifiers</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                            <argument><expr><name>inItem</name></expr></argument>,
	                            <argument><expr><name>inModifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuItemModifiers</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt8</name></type> <name>outModifiers</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuItemModifiers</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuItemModifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetMenuItemModifiers</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                            <argument><expr><name>inItem</name></expr></argument>,
	                            <argument><expr>&amp;<name>outModifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>outModifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetMenuItemIconHandle</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt8</name></type> <name>inIconType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>inIconHandle</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuItemIconHandle</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuItemIconHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hbO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>,
	                      <argument><expr>&amp;<name>inIconType</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inIconHandle</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetMenuItemIconHandle</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                             <argument><expr><name>inItem</name></expr></argument>,
	                             <argument><expr><name>inIconType</name></expr></argument>,
	                             <argument><expr><name>inIconHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuItemIconHandle</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt8</name></type> <name>outIconType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>outIconHandle</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuItemIconHandle</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuItemIconHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetMenuItemIconHandle</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                             <argument><expr><name>inItem</name></expr></argument>,
	                             <argument><expr>&amp;<name>outIconType</name></expr></argument>,
	                             <argument><expr>&amp;<name>outIconHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"bO&amp;"</expr></argument>,
	                     <argument><expr><name>outIconType</name></expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>outIconHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetMenuItemTextEncoding</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TextEncoding</name></type> <name>inScriptID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuItemTextEncoding</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuItemTextEncoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hl"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>,
	                      <argument><expr>&amp;<name>inScriptID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetMenuItemTextEncoding</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                               <argument><expr><name>inItem</name></expr></argument>,
	                               <argument><expr><name>inScriptID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuItemTextEncoding</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TextEncoding</name></type> <name>outScriptID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuItemTextEncoding</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuItemTextEncoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetMenuItemTextEncoding</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                               <argument><expr><name>inItem</name></expr></argument>,
	                               <argument><expr>&amp;<name>outScriptID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>outScriptID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetMenuItemHierarchicalID</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuID</name></type> <name>inHierID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuItemHierarchicalID</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuItemHierarchicalID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>,
	                      <argument><expr>&amp;<name>inHierID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetMenuItemHierarchicalID</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                 <argument><expr><name>inItem</name></expr></argument>,
	                                 <argument><expr><name>inHierID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuItemHierarchicalID</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuID</name></type> <name>outHierID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuItemHierarchicalID</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuItemHierarchicalID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetMenuItemHierarchicalID</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                 <argument><expr><name>inItem</name></expr></argument>,
	                                 <argument><expr>&amp;<name>outHierID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>outHierID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetMenuItemFontID</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>inFontID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuItemFontID</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuItemFontID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>,
	                      <argument><expr>&amp;<name>inFontID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetMenuItemFontID</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                         <argument><expr><name>inItem</name></expr></argument>,
	                         <argument><expr><name>inFontID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuItemFontID</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>outFontID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuItemFontID</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuItemFontID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetMenuItemFontID</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                         <argument><expr><name>inItem</name></expr></argument>,
	                         <argument><expr>&amp;<name>outFontID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>outFontID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetMenuItemRefCon</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt32</name></type> <name>inRefCon</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuItemRefCon</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuItemRefCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hl"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>,
	                      <argument><expr>&amp;<name>inRefCon</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetMenuItemRefCon</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                         <argument><expr><name>inItem</name></expr></argument>,
	                         <argument><expr><name>inRefCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuItemRefCon</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt32</name></type> <name>outRefCon</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuItemRefCon</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuItemRefCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetMenuItemRefCon</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                         <argument><expr><name>inItem</name></expr></argument>,
	                         <argument><expr>&amp;<name>outRefCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>outRefCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetMenuItemKeyGlyph</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>inGlyph</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuItemKeyGlyph</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuItemKeyGlyph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>,
	                      <argument><expr>&amp;<name>inGlyph</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetMenuItemKeyGlyph</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                           <argument><expr><name>inItem</name></expr></argument>,
	                           <argument><expr><name>inGlyph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuItemKeyGlyph</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>outGlyph</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuItemKeyGlyph</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuItemKeyGlyph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetMenuItemKeyGlyph</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                           <argument><expr><name>inItem</name></expr></argument>,
	                           <argument><expr>&amp;<name>outGlyph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>outGlyph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_MacEnableMenuItem</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>item</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacEnableMenuItem</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacEnableMenuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacEnableMenuItem</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                  <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_DisableMenuItem</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>item</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DisableMenuItem</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DisableMenuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DisableMenuItem</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_IsMenuItemEnabled</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>item</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsMenuItemEnabled</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsMenuItemEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>IsMenuItemEnabled</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                        <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_EnableMenuItemIcon</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>item</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EnableMenuItemIcon</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>EnableMenuItemIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>EnableMenuItemIcon</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                   <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_DisableMenuItemIcon</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>item</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DisableMenuItemIcon</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DisableMenuItemIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DisableMenuItemIcon</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                    <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_IsMenuItemIconEnabled</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>item</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsMenuItemIconEnabled</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsMenuItemIconEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>IsMenuItemIconEnabled</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                            <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetMenuItemHierarchicalMenu</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>inHierMenu</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuItemHierarchicalMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuItemHierarchicalMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>,
	                      <argument><expr><name>MenuObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inHierMenu</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetMenuItemHierarchicalMenu</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                   <argument><expr><name>inItem</name></expr></argument>,
	                                   <argument><expr><name>inHierMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuItemHierarchicalMenu</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>outHierMenu</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuItemHierarchicalMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuItemHierarchicalMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetMenuItemHierarchicalMenu</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                   <argument><expr><name>inItem</name></expr></argument>,
	                                   <argument><expr>&amp;<name>outHierMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>OptMenuObj_New</name></expr></argument>, <argument><expr><name>outHierMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_CopyMenuItemTextAsCFString</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFStringRef</name></type> <name>outString</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CopyMenuItemTextAsCFString</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CopyMenuItemTextAsCFString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>CopyMenuItemTextAsCFString</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                  <argument><expr><name>inItem</name></expr></argument>,
	                                  <argument><expr>&amp;<name>outString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>CFStringRefObj_New</name></expr></argument>, <argument><expr><name>outString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetMenuItemTextWithCFString</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFStringRef</name></type> <name>inString</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuItemTextWithCFString</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuItemTextWithCFString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>,
	                      <argument><expr><name>CFStringRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inString</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetMenuItemTextWithCFString</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                   <argument><expr><name>inItem</name></expr></argument>,
	                                   <argument><expr><name>inString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuItemIndent</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt32</name></type> <name>outIndent</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuItemIndent</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuItemIndent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetMenuItemIndent</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                         <argument><expr><name>inItem</name></expr></argument>,
	                         <argument><expr>&amp;<name>outIndent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>outIndent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetMenuItemIndent</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt32</name></type> <name>inIndent</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuItemIndent</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuItemIndent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hl"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>,
	                      <argument><expr>&amp;<name>inIndent</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetMenuItemIndent</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                         <argument><expr><name>inItem</name></expr></argument>,
	                         <argument><expr><name>inIndent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuItemCommandKey</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>inGetVirtualKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt16</name></type> <name>outKey</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuItemCommandKey</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuItemCommandKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hb"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>,
	                      <argument><expr>&amp;<name>inGetVirtualKey</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetMenuItemCommandKey</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                             <argument><expr><name>inItem</name></expr></argument>,
	                             <argument><expr><name>inGetVirtualKey</name></expr></argument>,
	                             <argument><expr>&amp;<name>outKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"H"</expr></argument>,
	                     <argument><expr><name>outKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetMenuItemCommandKey</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>inItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>inSetVirtualKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt16</name></type> <name>inKey</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuItemCommandKey</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuItemCommandKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hbH"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>,
	                      <argument><expr>&amp;<name>inSetVirtualKey</name></expr></argument>,
	                      <argument><expr>&amp;<name>inKey</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetMenuItemCommandKey</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                             <argument><expr><name>inItem</name></expr></argument>,
	                             <argument><expr><name>inSetVirtualKey</name></expr></argument>,
	                             <argument><expr><name>inKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuItemPropertyAttributes</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>propertyCreator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>propertyTag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt32</name></type> <name>attributes</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuItemPropertyAttributes</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuItemPropertyAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hO&amp;O&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>propertyCreator</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>propertyTag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetMenuItemPropertyAttributes</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                     <argument><expr><name>item</name></expr></argument>,
	                                     <argument><expr><name>propertyCreator</name></expr></argument>,
	                                     <argument><expr><name>propertyTag</name></expr></argument>,
	                                     <argument><expr>&amp;<name>attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_ChangeMenuItemPropertyAttributes</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>propertyCreator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>propertyTag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt32</name></type> <name>attributesToSet</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt32</name></type> <name>attributesToClear</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ChangeMenuItemPropertyAttributes</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ChangeMenuItemPropertyAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hO&amp;O&amp;ll"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>propertyCreator</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>propertyTag</name></expr></argument>,
	                      <argument><expr>&amp;<name>attributesToSet</name></expr></argument>,
	                      <argument><expr>&amp;<name>attributesToClear</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>ChangeMenuItemPropertyAttributes</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                        <argument><expr><name>item</name></expr></argument>,
	                                        <argument><expr><name>propertyCreator</name></expr></argument>,
	                                        <argument><expr><name>propertyTag</name></expr></argument>,
	                                        <argument><expr><name>attributesToSet</name></expr></argument>,
	                                        <argument><expr><name>attributesToClear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuAttributes</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuAttributes</name></type> <name>outAttributes</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuAttributes</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetMenuAttributes</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                         <argument><expr>&amp;<name>outAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>outAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_ChangeMenuAttributes</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuAttributes</name></type> <name>setTheseAttributes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuAttributes</name></type> <name>clearTheseAttributes</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ChangeMenuAttributes</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ChangeMenuAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
	                      <argument><expr>&amp;<name>setTheseAttributes</name></expr></argument>,
	                      <argument><expr>&amp;<name>clearTheseAttributes</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>ChangeMenuAttributes</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                            <argument><expr><name>setTheseAttributes</name></expr></argument>,
	                            <argument><expr><name>clearTheseAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuItemAttributes</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemAttributes</name></type> <name>outAttributes</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuItemAttributes</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuItemAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetMenuItemAttributes</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                             <argument><expr><name>item</name></expr></argument>,
	                             <argument><expr>&amp;<name>outAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>outAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_ChangeMenuItemAttributes</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemAttributes</name></type> <name>setTheseAttributes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemAttributes</name></type> <name>clearTheseAttributes</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ChangeMenuItemAttributes</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ChangeMenuItemAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hll"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>,
	                      <argument><expr>&amp;<name>setTheseAttributes</name></expr></argument>,
	                      <argument><expr>&amp;<name>clearTheseAttributes</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>ChangeMenuItemAttributes</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                <argument><expr><name>item</name></expr></argument>,
	                                <argument><expr><name>setTheseAttributes</name></expr></argument>,
	                                <argument><expr><name>clearTheseAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_DisableAllMenuItems</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DisableAllMenuItems</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DisableAllMenuItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DisableAllMenuItems</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_EnableAllMenuItems</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EnableAllMenuItems</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>EnableAllMenuItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>EnableAllMenuItems</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_MenuHasEnabledItems</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MenuHasEnabledItems</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MenuHasEnabledItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>MenuHasEnabledItems</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuType</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt16</name></type> <name>outType</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuType</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetMenuType</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                   <argument><expr>&amp;<name>outType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"H"</expr></argument>,
	                     <argument><expr><name>outType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_CountMenuItemsWithCommandID</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemCount</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>inCommandID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CountMenuItemsWithCommandID</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CountMenuItemsWithCommandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>inCommandID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>CountMenuItemsWithCommandID</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                  <argument><expr><name>inCommandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetIndMenuItemWithCommandID</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>inCommandID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt32</name></type> <name>inItemIndex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>outMenu</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>outIndex</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetIndMenuItemWithCommandID</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetIndMenuItemWithCommandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
	                      <argument><expr>&amp;<name>inCommandID</name></expr></argument>,
	                      <argument><expr>&amp;<name>inItemIndex</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetIndMenuItemWithCommandID</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                   <argument><expr><name>inCommandID</name></expr></argument>,
	                                   <argument><expr><name>inItemIndex</name></expr></argument>,
	                                   <argument><expr>&amp;<name>outMenu</name></expr></argument>,
	                                   <argument><expr>&amp;<name>outIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;h"</expr></argument>,
	                     <argument><expr><name>MenuObj_New</name></expr></argument>, <argument><expr><name>outMenu</name></expr></argument>,
	                     <argument><expr><name>outIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_EnableMenuCommand</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>inCommandID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EnableMenuCommand</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>EnableMenuCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>inCommandID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>EnableMenuCommand</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                  <argument><expr><name>inCommandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_DisableMenuCommand</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>inCommandID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DisableMenuCommand</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DisableMenuCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>inCommandID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DisableMenuCommand</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                   <argument><expr><name>inCommandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_IsMenuCommandEnabled</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>inCommandID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsMenuCommandEnabled</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsMenuCommandEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>inCommandID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>IsMenuCommandEnabled</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                           <argument><expr><name>inCommandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetMenuCommandMark</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>inCommandID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniChar</name></type> <name>inMark</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuCommandMark</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuCommandMark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lh"</expr></argument>,
	                      <argument><expr>&amp;<name>inCommandID</name></expr></argument>,
	                      <argument><expr>&amp;<name>inMark</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetMenuCommandMark</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                          <argument><expr><name>inCommandID</name></expr></argument>,
	                          <argument><expr><name>inMark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuCommandMark</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>inCommandID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniChar</name></type> <name>outMark</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuCommandMark</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuCommandMark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>inCommandID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetMenuCommandMark</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                          <argument><expr><name>inCommandID</name></expr></argument>,
	                          <argument><expr>&amp;<name>outMark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>outMark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuCommandPropertySize</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>inCommandID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>inPropertyCreator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>inPropertyTag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ByteCount</name></type> <name>outSize</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuCommandPropertySize</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuCommandPropertySize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;O&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>inCommandID</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>inPropertyCreator</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>inPropertyTag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetMenuCommandPropertySize</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                  <argument><expr><name>inCommandID</name></expr></argument>,
	                                  <argument><expr><name>inPropertyCreator</name></expr></argument>,
	                                  <argument><expr><name>inPropertyTag</name></expr></argument>,
	                                  <argument><expr>&amp;<name>outSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>outSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_RemoveMenuCommandProperty</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>inCommandID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>inPropertyCreator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>inPropertyTag</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RemoveMenuCommandProperty</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RemoveMenuCommandProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;O&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>inCommandID</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>inPropertyCreator</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>inPropertyTag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>RemoveMenuCommandProperty</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                 <argument><expr><name>inCommandID</name></expr></argument>,
	                                 <argument><expr><name>inPropertyCreator</name></expr></argument>,
	                                 <argument><expr><name>inPropertyTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_IsMenuItemInvalid</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>inItem</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsMenuItemInvalid</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsMenuItemInvalid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>inItem</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>IsMenuItemInvalid</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                        <argument><expr><name>inItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_InvalidateMenuItems</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>inFirstItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemCount</name></type> <name>inNumItems</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InvalidateMenuItems</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InvalidateMenuItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hl"</expr></argument>,
	                      <argument><expr>&amp;<name>inFirstItem</name></expr></argument>,
	                      <argument><expr>&amp;<name>inNumItems</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>InvalidateMenuItems</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                           <argument><expr><name>inFirstItem</name></expr></argument>,
	                           <argument><expr><name>inNumItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_UpdateInvalidMenuItems</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UpdateInvalidMenuItems</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>UpdateInvalidMenuItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>UpdateInvalidMenuItems</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_CreateStandardFontMenu</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>afterItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuID</name></type> <name>firstHierMenuID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OptionBits</name></type> <name>options</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemCount</name></type> <name>outHierMenuCount</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CreateStandardFontMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CreateStandardFontMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hhl"</expr></argument>,
	                      <argument><expr>&amp;<name>afterItem</name></expr></argument>,
	                      <argument><expr>&amp;<name>firstHierMenuID</name></expr></argument>,
	                      <argument><expr>&amp;<name>options</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>CreateStandardFontMenu</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                              <argument><expr><name>afterItem</name></expr></argument>,
	                              <argument><expr><name>firstHierMenuID</name></expr></argument>,
	                              <argument><expr><name>options</name></expr></argument>,
	                              <argument><expr>&amp;<name>outHierMenuCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>outHierMenuCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_UpdateStandardFontMenu</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemCount</name></type> <name>outHierMenuCount</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UpdateStandardFontMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>UpdateStandardFontMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>UpdateStandardFontMenu</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                              <argument><expr>&amp;<name>outHierMenuCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>outHierMenuCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetFontFamilyFromMenuSelection</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FMFontFamily</name></type> <name>outFontFamily</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FMFontStyle</name></type> <name>outStyle</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetFontFamilyFromMenuSelection</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetFontFamilyFromMenuSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetFontFamilyFromMenuSelection</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                      <argument><expr><name>item</name></expr></argument>,
	                                      <argument><expr>&amp;<name>outFontFamily</name></expr></argument>,
	                                      <argument><expr>&amp;<name>outStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"hh"</expr></argument>,
	                     <argument><expr><name>outFontFamily</name></expr></argument>,
	                     <argument><expr><name>outStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuID</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuID</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuID</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetMenuID</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuWidth</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuWidth</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetMenuWidth</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_GetMenuHeight</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuHeight</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetMenuHeight</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetMenuID</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuID</name></type> <name>menuID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuID</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>menuID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetMenuID</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	          <argument><expr><name>menuID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetMenuWidth</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>width</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuWidth</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>width</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetMenuWidth</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	             <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_SetMenuHeight</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>height</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuHeight</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>height</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetMenuHeight</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	              <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_as_Resource</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>as_Resource</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>as_Resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>as_Resource</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_AppendMenu</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>data</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AppendMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AppendMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>AppendMenu</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	           <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_InsertMenu</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>beforeID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InsertMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InsertMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>beforeID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>InsertMenu</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	           <argument><expr><name>beforeID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_InsertMenuItem</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>itemString</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>afterItem</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InsertMenuItem</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InsertMenuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>itemString</name></expr></argument>,
	                      <argument><expr>&amp;<name>afterItem</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>InsertMenuItem</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	               <argument><expr><name>itemString</name></expr></argument>,
	               <argument><expr><name>afterItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_EnableMenuItem</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt16</name></type> <name>item</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EnableMenuItem</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>EnableMenuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"H"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>EnableMenuItem</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	               <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_CheckMenuItem</name><parameter_list>(<param><decl><type><name>MenuObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>checked</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CheckMenuItem</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CheckMenuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hb"</expr></argument>,
	                      <argument><expr>&amp;<name>item</name></expr></argument>,
	                      <argument><expr>&amp;<name>checked</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>CheckMenuItem</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	              <argument><expr><name>item</name></expr></argument>,
	              <argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>MenuObj_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"DisposeMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_DisposeMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CalcMenuSize"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_CalcMenuSize</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CountMenuItems"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_CountMenuItems</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (UInt16 _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuFont"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuFont</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (SInt16 outFontID, UInt16 outFontSize)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuFont"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetMenuFont</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 inFontID, UInt16 inFontSize) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuExcludesMarkColumn"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuExcludesMarkColumn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuExcludesMarkColumn"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetMenuExcludesMarkColumn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Boolean excludesMark) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsValidMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_IsValidMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuRetainCount"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuRetainCount</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (ItemCount _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"RetainMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_RetainMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ReleaseMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_ReleaseMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DuplicateMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_DuplicateMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (MenuHandle outMenu)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CopyMenuTitleAsCFString"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_CopyMenuTitleAsCFString</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (CFStringRef outString)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuTitleWithCFString"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetMenuTitleWithCFString</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CFStringRef inString) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InvalidateMenuSize"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_InvalidateMenuSize</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsMenuSizeInvalid"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_IsMenuSizeInvalid</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacAppendMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_MacAppendMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Str255 data) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InsertResMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_InsertResMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(ResType theType, short afterItem) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"AppendResMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_AppendResMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(ResType theType) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacInsertMenuItem"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_MacInsertMenuItem</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Str255 itemString, short afterItem) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DeleteMenuItem"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_DeleteMenuItem</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short item) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InsertFontResMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_InsertFontResMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short afterItem, short scriptFilter) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InsertIntlResMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_InsertIntlResMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(ResType theType, short afterItem, short scriptFilter) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"AppendMenuItemText"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_AppendMenuItemText</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Str255 inString) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InsertMenuItemText"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_InsertMenuItemText</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Str255 inString, MenuItemIndex afterItem) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CopyMenuItems"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_CopyMenuItems</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex inFirstItem, ItemCount inNumItems, MenuHandle inDestMenu, MenuItemIndex inInsertAfter) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DeleteMenuItems"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_DeleteMenuItems</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex inFirstItem, ItemCount inNumItems) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"AppendMenuItemTextWithCFString"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_AppendMenuItemTextWithCFString</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CFStringRef inString, MenuItemAttributes inAttributes, MenuCommand inCommandID) -&gt; (MenuItemIndex outNewItem)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InsertMenuItemTextWithCFString"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_InsertMenuItemTextWithCFString</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CFStringRef inString, MenuItemIndex inAfterItem, MenuItemAttributes inAttributes, MenuCommand inCommandID) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"PopUpMenuSelect"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_PopUpMenuSelect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short top, short left, short popUpItem) -&gt; (long _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InvalidateMenuEnabling"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_InvalidateMenuEnabling</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsMenuBarInvalid"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_IsMenuBarInvalid</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacInsertMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_MacInsertMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuID beforeID) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetRootMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetRootMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacCheckMenuItem"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_MacCheckMenuItem</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short item, Boolean checked) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuItemText"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetMenuItemText</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short item, Str255 itemString) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuItemText"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuItemText</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short item) -&gt; (Str255 itemString)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetItemMark"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetItemMark</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short item, CharParameter markChar) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetItemMark"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetItemMark</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short item) -&gt; (CharParameter markChar)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetItemCmd"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetItemCmd</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short item, CharParameter cmdChar) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetItemCmd"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetItemCmd</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short item) -&gt; (CharParameter cmdChar)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetItemIcon"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetItemIcon</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short item, short iconIndex) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetItemIcon"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetItemIcon</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short item) -&gt; (short iconIndex)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetItemStyle"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetItemStyle</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short item, StyleParameter chStyle) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetItemStyle"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetItemStyle</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short item) -&gt; (Style chStyle)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuItemCommandID"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetMenuItemCommandID</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 inItem, MenuCommand inCommandID) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuItemCommandID"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuItemCommandID</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 inItem) -&gt; (MenuCommand outCommandID)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuItemModifiers"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetMenuItemModifiers</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 inItem, UInt8 inModifiers) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuItemModifiers"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuItemModifiers</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 inItem) -&gt; (UInt8 outModifiers)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuItemIconHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetMenuItemIconHandle</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 inItem, UInt8 inIconType, Handle inIconHandle) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuItemIconHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuItemIconHandle</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 inItem) -&gt; (UInt8 outIconType, Handle outIconHandle)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuItemTextEncoding"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetMenuItemTextEncoding</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 inItem, TextEncoding inScriptID) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuItemTextEncoding"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuItemTextEncoding</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 inItem) -&gt; (TextEncoding outScriptID)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuItemHierarchicalID"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetMenuItemHierarchicalID</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 inItem, MenuID inHierID) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuItemHierarchicalID"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuItemHierarchicalID</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 inItem) -&gt; (MenuID outHierID)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuItemFontID"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetMenuItemFontID</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 inItem, SInt16 inFontID) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuItemFontID"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuItemFontID</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 inItem) -&gt; (SInt16 outFontID)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuItemRefCon"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetMenuItemRefCon</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 inItem, UInt32 inRefCon) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuItemRefCon"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuItemRefCon</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 inItem) -&gt; (UInt32 outRefCon)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuItemKeyGlyph"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetMenuItemKeyGlyph</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 inItem, SInt16 inGlyph) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuItemKeyGlyph"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuItemKeyGlyph</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 inItem) -&gt; (SInt16 outGlyph)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacEnableMenuItem"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_MacEnableMenuItem</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex item) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DisableMenuItem"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_DisableMenuItem</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex item) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsMenuItemEnabled"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_IsMenuItemEnabled</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex item) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"EnableMenuItemIcon"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_EnableMenuItemIcon</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex item) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DisableMenuItemIcon"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_DisableMenuItemIcon</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex item) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsMenuItemIconEnabled"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_IsMenuItemIconEnabled</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex item) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuItemHierarchicalMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetMenuItemHierarchicalMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex inItem, MenuHandle inHierMenu) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuItemHierarchicalMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuItemHierarchicalMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex inItem) -&gt; (MenuHandle outHierMenu)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CopyMenuItemTextAsCFString"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_CopyMenuItemTextAsCFString</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex inItem) -&gt; (CFStringRef outString)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuItemTextWithCFString"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetMenuItemTextWithCFString</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex inItem, CFStringRef inString) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuItemIndent"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuItemIndent</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex inItem) -&gt; (UInt32 outIndent)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuItemIndent"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetMenuItemIndent</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex inItem, UInt32 inIndent) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuItemCommandKey"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuItemCommandKey</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex inItem, Boolean inGetVirtualKey) -&gt; (UInt16 outKey)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuItemCommandKey"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetMenuItemCommandKey</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex inItem, Boolean inSetVirtualKey, UInt16 inKey) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuItemPropertyAttributes"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuItemPropertyAttributes</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex item, OSType propertyCreator, OSType propertyTag) -&gt; (UInt32 attributes)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ChangeMenuItemPropertyAttributes"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_ChangeMenuItemPropertyAttributes</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex item, OSType propertyCreator, OSType propertyTag, UInt32 attributesToSet, UInt32 attributesToClear) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuAttributes"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuAttributes</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (MenuAttributes outAttributes)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ChangeMenuAttributes"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_ChangeMenuAttributes</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuAttributes setTheseAttributes, MenuAttributes clearTheseAttributes) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuItemAttributes"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuItemAttributes</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex item) -&gt; (MenuItemAttributes outAttributes)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ChangeMenuItemAttributes"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_ChangeMenuItemAttributes</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex item, MenuItemAttributes setTheseAttributes, MenuItemAttributes clearTheseAttributes) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DisableAllMenuItems"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_DisableAllMenuItems</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"EnableAllMenuItems"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_EnableAllMenuItems</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MenuHasEnabledItems"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_MenuHasEnabledItems</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuType"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuType</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (UInt16 outType)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CountMenuItemsWithCommandID"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_CountMenuItemsWithCommandID</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuCommand inCommandID) -&gt; (ItemCount _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetIndMenuItemWithCommandID"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetIndMenuItemWithCommandID</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuCommand inCommandID, UInt32 inItemIndex) -&gt; (MenuHandle outMenu, MenuItemIndex outIndex)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"EnableMenuCommand"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_EnableMenuCommand</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuCommand inCommandID) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DisableMenuCommand"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_DisableMenuCommand</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuCommand inCommandID) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsMenuCommandEnabled"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_IsMenuCommandEnabled</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuCommand inCommandID) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuCommandMark"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetMenuCommandMark</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuCommand inCommandID, UniChar inMark) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuCommandMark"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuCommandMark</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuCommand inCommandID) -&gt; (UniChar outMark)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuCommandPropertySize"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuCommandPropertySize</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuCommand inCommandID, OSType inPropertyCreator, OSType inPropertyTag) -&gt; (ByteCount outSize)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"RemoveMenuCommandProperty"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_RemoveMenuCommandProperty</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuCommand inCommandID, OSType inPropertyCreator, OSType inPropertyTag) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsMenuItemInvalid"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_IsMenuItemInvalid</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex inItem) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InvalidateMenuItems"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_InvalidateMenuItems</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex inFirstItem, ItemCount inNumItems) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"UpdateInvalidMenuItems"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_UpdateInvalidMenuItems</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CreateStandardFontMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_CreateStandardFontMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex afterItem, MenuID firstHierMenuID, OptionBits options) -&gt; (ItemCount outHierMenuCount)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"UpdateStandardFontMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_UpdateStandardFontMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (ItemCount outHierMenuCount)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetFontFamilyFromMenuSelection"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetFontFamilyFromMenuSelection</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuItemIndex item) -&gt; (FMFontFamily outFontFamily, FMFontStyle outStyle)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuID"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuID</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (MenuID _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuWidth"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuWidth</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (SInt16 _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuHeight"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_GetMenuHeight</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (SInt16 _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuID"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetMenuID</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuID menuID) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuWidth"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetMenuWidth</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 width) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuHeight"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_SetMenuHeight</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 height) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"as_Resource"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_as_Resource</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Handle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"AppendMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_AppendMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Str255 data) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InsertMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_InsertMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short beforeID) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InsertMenuItem"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_InsertMenuItem</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Str255 itemString, short afterItem) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"EnableMenuItem"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_EnableMenuItem</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(UInt16 item) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CheckMenuItem"</expr>, <expr>(<name>PyCFunction</name>)<name>MenuObj_CheckMenuItem</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short item, Boolean checked) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MenuObj_getsetlist</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MenuObj_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MenuObj_repr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MenuObj_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MenuObj_tp_init</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MenuObj_tp_alloc</name></cpp:macro> <cpp:value>PyType_GenericAlloc</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MenuObj_tp_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_self</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>itself</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name><name>kw</name><index>[]</index></name> <init>= <expr><block>{<expr>"itself"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr><name>_kwds</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>MenuObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>itself</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr>(<name>_self</name> = <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr>((<name>MenuObject</name> *)<name>_self</name>)-&gt;<name>ob_itself</name> = <name>itself</name></expr>;</expr_stmt>
	<return>return <expr><name>_self</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MenuObj_tp_free</name></cpp:macro> <cpp:value>PyObject_Del</cpp:value></cpp:define>


<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>Menu_Type</name> <init>= <expr><block>{
	<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
	0</expr>, <comment type="block">/*ob_size*/</comment>
	<expr>"_Menu.Menu"</expr>, <comment type="block">/*tp_name*/</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>MenuObject</name></expr></argument>)</argument_list></sizeof></expr>, <comment type="block">/*tp_basicsize*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>) <name>MenuObj_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_print*/</comment>
	<expr>(<name>getattrfunc</name>)0</expr>, <comment type="block">/*tp_getattr*/</comment>
	<expr>(<name>setattrfunc</name>)0</expr>, <comment type="block">/*tp_setattr*/</comment>
	<expr>(<name>cmpfunc</name>) <name>MenuObj_compare</name></expr>, <comment type="block">/*tp_compare*/</comment>
	<expr>(<name>reprfunc</name>) <name>MenuObj_repr</name></expr>, <comment type="block">/*tp_repr*/</comment>
	<expr>(<name>PyNumberMethods</name> *)0</expr>, <comment type="block">/* tp_as_number */</comment>
	<expr>(<name>PySequenceMethods</name> *)0</expr>, <comment type="block">/* tp_as_sequence */</comment>
	<expr>(<name>PyMappingMethods</name> *)0</expr>, <comment type="block">/* tp_as_mapping */</comment>
	<expr>(<name>hashfunc</name>) <name>MenuObj_hash</name></expr>, <comment type="block">/*tp_hash*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_call*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_str*/</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>, <comment type="block">/*tp_getattro*/</comment>
	<expr><name>PyObject_GenericSetAttr</name></expr>, <comment type="block">/*tp_setattro */</comment>
	<expr>0</expr>, <comment type="block">/*tp_as_buffer*/</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/* tp_flags */</comment>
	<expr>0</expr>, <comment type="block">/*tp_doc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_traverse*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_clear*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_richcompare*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_weaklistoffset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iter*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iternext*/</comment>
	<expr><name>MenuObj_methods</name></expr>, <comment type="block">/* tp_methods */</comment>
	<expr>0</expr>, <comment type="block">/*tp_members*/</comment>
	<expr><name>MenuObj_getsetlist</name></expr>, <comment type="block">/*tp_getset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_base*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dict*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_get*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_set*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dictoffset*/</comment>
	<expr><name>MenuObj_tp_init</name></expr>, <comment type="block">/* tp_init */</comment>
	<expr><name>MenuObj_tp_alloc</name></expr>, <comment type="block">/* tp_alloc */</comment>
	<expr><name>MenuObj_tp_new</name></expr>, <comment type="block">/* tp_new */</comment>
	<expr><name>MenuObj_tp_free</name></expr>, <comment type="block">/* tp_free */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* ---------------------- End object type Menu ---------------------- */</comment>


<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_NewMenu</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuID</name></type> <name>menuID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Str255</name></type> <name>menuTitle</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NewMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>menuID</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>menuTitle</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>NewMenu</name><argument_list>(<argument><expr><name>menuID</name></expr></argument>,
	              <argument><expr><name>menuTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>MenuObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_MacGetMenu</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>resourceID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacGetMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacGetMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>resourceID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>MacGetMenu</name><argument_list>(<argument><expr><name>resourceID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>MenuObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_CreateNewMenu</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuID</name></type> <name>inMenuID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuAttributes</name></type> <name>inMenuAttributes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>outMenuRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CreateNewMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CreateNewMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hl"</expr></argument>,
	                      <argument><expr>&amp;<name>inMenuID</name></expr></argument>,
	                      <argument><expr>&amp;<name>inMenuAttributes</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>CreateNewMenu</name><argument_list>(<argument><expr><name>inMenuID</name></expr></argument>,
	                     <argument><expr><name>inMenuAttributes</name></expr></argument>,
	                     <argument><expr>&amp;<name>outMenuRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>MenuObj_New</name></expr></argument>, <argument><expr><name>outMenuRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_MenuKey</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CharParameter</name></type> <name>ch</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MenuKey</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MenuKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>MenuKey</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_MenuSelect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>startPt</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MenuSelect</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MenuSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>startPt</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>MenuSelect</name><argument_list>(<argument><expr><name>startPt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_MenuChoice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MenuChoice</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MenuChoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>MenuChoice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_MenuEvent</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt32</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EventRecord</name></type> <name>inEvent</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MenuEvent</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MenuEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetEventRecord</name></expr></argument>, <argument><expr>&amp;<name>inEvent</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>MenuEvent</name><argument_list>(<argument><expr>&amp;<name>inEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_GetMBarHeight</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMBarHeight</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMBarHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetMBarHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_MacDrawMenuBar</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacDrawMenuBar</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacDrawMenuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacDrawMenuBar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_InvalMenuBar</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InvalMenuBar</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InvalMenuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>InvalMenuBar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_HiliteMenu</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuID</name></type> <name>menuID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HiliteMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>HiliteMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>menuID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>HiliteMenu</name><argument_list>(<argument><expr><name>menuID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_GetNewMBar</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuBarHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>menuBarID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetNewMBar</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetNewMBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>menuBarID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetNewMBar</name><argument_list>(<argument><expr><name>menuBarID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_GetMenuBar</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuBarHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuBar</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetMenuBar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_SetMenuBar</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuBarHandle</name></type> <name>mbar</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuBar</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mbar</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetMenuBar</name><argument_list>(<argument><expr><name>mbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_DuplicateMenuBar</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuBarHandle</name></type> <name>inMbar</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuBarHandle</name></type> <name>outMbar</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DuplicateMenuBar</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DuplicateMenuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inMbar</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>DuplicateMenuBar</name><argument_list>(<argument><expr><name>inMbar</name></expr></argument>,
	                        <argument><expr>&amp;<name>outMbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>outMbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_DisposeMenuBar</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuBarHandle</name></type> <name>inMbar</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DisposeMenuBar</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DisposeMenuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inMbar</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>DisposeMenuBar</name><argument_list>(<argument><expr><name>inMbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_GetMenuHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuID</name></type> <name>menuID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuHandle</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>menuID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetMenuHandle</name><argument_list>(<argument><expr><name>menuID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>MenuObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_MacDeleteMenu</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuID</name></type> <name>menuID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MacDeleteMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MacDeleteMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>menuID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>MacDeleteMenu</name><argument_list>(<argument><expr><name>menuID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_ClearMenuBar</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ClearMenuBar</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ClearMenuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>ClearMenuBar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_SetMenuFlashCount</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>count</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuFlashCount</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuFlashCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetMenuFlashCount</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_FlashMenuBar</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuID</name></type> <name>menuID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FlashMenuBar</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FlashMenuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>menuID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>FlashMenuBar</name><argument_list>(<argument><expr><name>menuID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_IsMenuBarVisible</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsMenuBarVisible</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsMenuBarVisible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>IsMenuBarVisible</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_ShowMenuBar</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ShowMenuBar</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ShowMenuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>ShowMenuBar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_HideMenuBar</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HideMenuBar</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>HideMenuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>HideMenuBar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_AcquireRootMenu</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AcquireRootMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AcquireRootMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>AcquireRootMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>MenuObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_DeleteMCEntries</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuID</name></type> <name>menuID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>menuItem</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DeleteMCEntries</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DeleteMCEntries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>menuID</name></expr></argument>,
	                      <argument><expr>&amp;<name>menuItem</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DeleteMCEntries</name><argument_list>(<argument><expr><name>menuID</name></expr></argument>,
	                <argument><expr><name>menuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_InitContextualMenus</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>InitContextualMenus</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InitContextualMenus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>InitContextualMenus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_IsShowContextualMenuClick</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EventRecord</name></type> <name>inEvent</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsShowContextualMenuClick</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsShowContextualMenuClick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetEventRecord</name></expr></argument>, <argument><expr>&amp;<name>inEvent</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>IsShowContextualMenuClick</name><argument_list>(<argument><expr>&amp;<name>inEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_LMGetTheMenu</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LMGetTheMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LMGetTheMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>LMGetTheMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_as_Menu</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>h</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>as_Menu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>as_Menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>as_Menu</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>MenuObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_GetMenu</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>resourceID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>resourceID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetMenu</name><argument_list>(<argument><expr><name>resourceID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>MenuObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_DeleteMenu</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>menuID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DeleteMenu</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DeleteMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>menuID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DeleteMenu</name><argument_list>(<argument><expr><name>menuID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_DrawMenuBar</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DrawMenuBar</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DrawMenuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DrawMenuBar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_CountMenuItemsWithCommandID</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemCount</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>inMenu</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>inCommandID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CountMenuItemsWithCommandID</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CountMenuItemsWithCommandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
	                      <argument><expr><name>OptMenuObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inMenu</name></expr></argument>,
	                      <argument><expr>&amp;<name>inCommandID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>CountMenuItemsWithCommandID</name><argument_list>(<argument><expr><name>inMenu</name></expr></argument>,
	                                  <argument><expr><name>inCommandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_GetIndMenuItemWithCommandID</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>inMenu</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>inCommandID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt32</name></type> <name>inItemIndex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>outMenu</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuItemIndex</name></type> <name>outIndex</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetIndMenuItemWithCommandID</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetIndMenuItemWithCommandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
	                      <argument><expr><name>OptMenuObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inMenu</name></expr></argument>,
	                      <argument><expr>&amp;<name>inCommandID</name></expr></argument>,
	                      <argument><expr>&amp;<name>inItemIndex</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetIndMenuItemWithCommandID</name><argument_list>(<argument><expr><name>inMenu</name></expr></argument>,
	                                   <argument><expr><name>inCommandID</name></expr></argument>,
	                                   <argument><expr><name>inItemIndex</name></expr></argument>,
	                                   <argument><expr>&amp;<name>outMenu</name></expr></argument>,
	                                   <argument><expr>&amp;<name>outIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;h"</expr></argument>,
	                     <argument><expr><name>MenuObj_New</name></expr></argument>, <argument><expr><name>outMenu</name></expr></argument>,
	                     <argument><expr><name>outIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_EnableMenuCommand</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>inMenu</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>inCommandID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EnableMenuCommand</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>EnableMenuCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
	                      <argument><expr><name>OptMenuObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inMenu</name></expr></argument>,
	                      <argument><expr>&amp;<name>inCommandID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>EnableMenuCommand</name><argument_list>(<argument><expr><name>inMenu</name></expr></argument>,
	                  <argument><expr><name>inCommandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_DisableMenuCommand</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>inMenu</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>inCommandID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DisableMenuCommand</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DisableMenuCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
	                      <argument><expr><name>OptMenuObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inMenu</name></expr></argument>,
	                      <argument><expr>&amp;<name>inCommandID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>DisableMenuCommand</name><argument_list>(<argument><expr><name>inMenu</name></expr></argument>,
	                   <argument><expr><name>inCommandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_IsMenuCommandEnabled</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>inMenu</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>inCommandID</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IsMenuCommandEnabled</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsMenuCommandEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
	                      <argument><expr><name>OptMenuObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inMenu</name></expr></argument>,
	                      <argument><expr>&amp;<name>inCommandID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>IsMenuCommandEnabled</name><argument_list>(<argument><expr><name>inMenu</name></expr></argument>,
	                           <argument><expr><name>inCommandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_SetMenuCommandMark</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>inMenu</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>inCommandID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniChar</name></type> <name>inMark</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetMenuCommandMark</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMenuCommandMark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lh"</expr></argument>,
	                      <argument><expr><name>OptMenuObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inMenu</name></expr></argument>,
	                      <argument><expr>&amp;<name>inCommandID</name></expr></argument>,
	                      <argument><expr>&amp;<name>inMark</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetMenuCommandMark</name><argument_list>(<argument><expr><name>inMenu</name></expr></argument>,
	                          <argument><expr><name>inCommandID</name></expr></argument>,
	                          <argument><expr><name>inMark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_GetMenuCommandMark</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>inMenu</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>inCommandID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniChar</name></type> <name>outMark</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuCommandMark</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuCommandMark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
	                      <argument><expr><name>OptMenuObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inMenu</name></expr></argument>,
	                      <argument><expr>&amp;<name>inCommandID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetMenuCommandMark</name><argument_list>(<argument><expr><name>inMenu</name></expr></argument>,
	                          <argument><expr><name>inCommandID</name></expr></argument>,
	                          <argument><expr>&amp;<name>outMark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>outMark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_GetMenuCommandPropertySize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>inMenu</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>inCommandID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>inPropertyCreator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>inPropertyTag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ByteCount</name></type> <name>outSize</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetMenuCommandPropertySize</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMenuCommandPropertySize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lO&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>OptMenuObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inMenu</name></expr></argument>,
	                      <argument><expr>&amp;<name>inCommandID</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>inPropertyCreator</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>inPropertyTag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetMenuCommandPropertySize</name><argument_list>(<argument><expr><name>inMenu</name></expr></argument>,
	                                  <argument><expr><name>inCommandID</name></expr></argument>,
	                                  <argument><expr><name>inPropertyCreator</name></expr></argument>,
	                                  <argument><expr><name>inPropertyTag</name></expr></argument>,
	                                  <argument><expr>&amp;<name>outSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>outSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Menu_RemoveMenuCommandProperty</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuHandle</name></type> <name>inMenu</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MenuCommand</name></type> <name>inCommandID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>inPropertyCreator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSType</name></type> <name>inPropertyTag</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RemoveMenuCommandProperty</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RemoveMenuCommandProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lO&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>OptMenuObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inMenu</name></expr></argument>,
	                      <argument><expr>&amp;<name>inCommandID</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>inPropertyCreator</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>inPropertyTag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>RemoveMenuCommandProperty</name><argument_list>(<argument><expr><name>inMenu</name></expr></argument>,
	                                 <argument><expr><name>inCommandID</name></expr></argument>,
	                                 <argument><expr><name>inPropertyCreator</name></expr></argument>,
	                                 <argument><expr><name>inPropertyTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>Menu_methods</name><index>[]</index></name> <init>= <expr><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<expr><block>{<expr>"NewMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_NewMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuID menuID, Str255 menuTitle) -&gt; (MenuHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacGetMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_MacGetMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short resourceID) -&gt; (MenuHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CreateNewMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_CreateNewMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuID inMenuID, MenuAttributes inMenuAttributes) -&gt; (MenuHandle outMenuRef)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MenuKey"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_MenuKey</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CharParameter ch) -&gt; (long _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MenuSelect"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_MenuSelect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point startPt) -&gt; (long _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MenuChoice"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_MenuChoice</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (long _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MenuEvent"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_MenuEvent</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(EventRecord inEvent) -&gt; (UInt32 _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMBarHeight"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_GetMBarHeight</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (short _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacDrawMenuBar"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_MacDrawMenuBar</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InvalMenuBar"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_InvalMenuBar</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"HiliteMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_HiliteMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuID menuID) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetNewMBar"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_GetNewMBar</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short menuBarID) -&gt; (MenuBarHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuBar"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_GetMenuBar</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (MenuBarHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuBar"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_SetMenuBar</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuBarHandle mbar) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DuplicateMenuBar"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_DuplicateMenuBar</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuBarHandle inMbar) -&gt; (MenuBarHandle outMbar)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DisposeMenuBar"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_DisposeMenuBar</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuBarHandle inMbar) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_GetMenuHandle</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuID menuID) -&gt; (MenuHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"MacDeleteMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_MacDeleteMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuID menuID) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ClearMenuBar"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_ClearMenuBar</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuFlashCount"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_SetMenuFlashCount</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short count) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"FlashMenuBar"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_FlashMenuBar</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuID menuID) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsMenuBarVisible"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_IsMenuBarVisible</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ShowMenuBar"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_ShowMenuBar</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"HideMenuBar"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_HideMenuBar</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"AcquireRootMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_AcquireRootMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (MenuHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DeleteMCEntries"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_DeleteMCEntries</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuID menuID, short menuItem) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InitContextualMenus"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_InitContextualMenus</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsShowContextualMenuClick"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_IsShowContextualMenuClick</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(EventRecord inEvent) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LMGetTheMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_LMGetTheMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (SInt16 _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"as_Menu"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_as_Menu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle h) -&gt; (MenuHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_GetMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short resourceID) -&gt; (MenuHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DeleteMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_DeleteMenu</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short menuID) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DrawMenuBar"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_DrawMenuBar</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CountMenuItemsWithCommandID"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_CountMenuItemsWithCommandID</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuHandle inMenu, MenuCommand inCommandID) -&gt; (ItemCount _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetIndMenuItemWithCommandID"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_GetIndMenuItemWithCommandID</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuHandle inMenu, MenuCommand inCommandID, UInt32 inItemIndex) -&gt; (MenuHandle outMenu, MenuItemIndex outIndex)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"EnableMenuCommand"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_EnableMenuCommand</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuHandle inMenu, MenuCommand inCommandID) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DisableMenuCommand"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_DisableMenuCommand</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuHandle inMenu, MenuCommand inCommandID) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"IsMenuCommandEnabled"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_IsMenuCommandEnabled</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuHandle inMenu, MenuCommand inCommandID) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetMenuCommandMark"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_SetMenuCommandMark</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuHandle inMenu, MenuCommand inCommandID, UniChar inMark) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuCommandMark"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_GetMenuCommandMark</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuHandle inMenu, MenuCommand inCommandID) -&gt; (UniChar outMark)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetMenuCommandPropertySize"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_GetMenuCommandPropertySize</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuHandle inMenu, MenuCommand inCommandID, OSType inPropertyCreator, OSType inPropertyTag) -&gt; (ByteCount outSize)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"RemoveMenuCommandProperty"</expr>, <expr>(<name>PyCFunction</name>)<name>Menu_RemoveMenuCommandProperty</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(MenuHandle inMenu, MenuCommand inCommandID, OSType inPropertyCreator, OSType inPropertyTag) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>




<function><type><name>void</name></type> <name>init_Menu</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>



	        <expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_NEW</name><argument_list>(<argument><expr><name>MenuHandle</name></expr></argument>, <argument><expr><name>MenuObj_New</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_CONVERT</name><argument_list>(<argument><expr><name>MenuHandle</name></expr></argument>, <argument><expr><name>MenuObj_Convert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>


	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_Menu"</expr></argument>, <argument><expr><name>Menu_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>Menu_Error</name> = <call><name>PyMac_GetOSErrException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>Menu_Error</name> == <name>NULL</name> ||
	    <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Error"</expr></argument>, <argument><expr><name>Menu_Error</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><name><name>Menu_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>Menu_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>Menu_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"Menu"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>Menu_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Backward-compatible name */</comment>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>Menu_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"MenuType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>Menu_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>
}</block></function>

<comment type="block">/* ======================== End module _Menu ======================== */</comment>

</unit>
