<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Mac/Modules/ah/_AHmodule.c">
<comment type="block">/* =========================== Module _AH =========================== */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pymactoolbox.h"</cpp:file></cpp:include>

<comment type="block">/* Macro to test whether a weak-loaded CFM function exists */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMac_PRECHECK</name><parameter_list>(<param><type><name>rtn</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { if ( &amp;rtn == NULL )  {\
        PyErr_SetString(PyExc_NotImplementedError, \
        "Not available in this shared library/OS version"); \
        return NULL; \
    }} while(0)</cpp:value></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Carbon/Carbon.h&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Ah_Error</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Ah_AHSearch</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFStringRef</name></type> <name>bookname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFStringRef</name></type> <name>query</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>CFStringRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>bookname</name></expr></argument>,
	                      <argument><expr><name>CFStringRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>query</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>AHSearch</name><argument_list>(<argument><expr><name>bookname</name></expr></argument>,
	                <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Ah_AHGotoMainTOC</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AHTOCType</name></type> <name>toctype</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
	                      <argument><expr>&amp;<name>toctype</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>AHGotoMainTOC</name><argument_list>(<argument><expr><name>toctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Ah_AHGotoPage</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFStringRef</name></type> <name>bookname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFStringRef</name></type> <name>path</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFStringRef</name></type> <name>anchor</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>CFStringRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>bookname</name></expr></argument>,
	                      <argument><expr><name>CFStringRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>,
	                      <argument><expr><name>CFStringRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>anchor</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>AHGotoPage</name><argument_list>(<argument><expr><name>bookname</name></expr></argument>,
	                  <argument><expr><name>path</name></expr></argument>,
	                  <argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Ah_AHLookupAnchor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFStringRef</name></type> <name>bookname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CFStringRef</name></type> <name>anchor</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>CFStringRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>bookname</name></expr></argument>,
	                      <argument><expr><name>CFStringRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>anchor</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>AHLookupAnchor</name><argument_list>(<argument><expr><name>bookname</name></expr></argument>,
	                      <argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Ah_AHRegisterHelpBook</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSRef</name></type> <name>appBundleRef</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetFSRef</name></expr></argument>, <argument><expr>&amp;<name>appBundleRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>AHRegisterHelpBook</name><argument_list>(<argument><expr>&amp;<name>appBundleRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>Ah_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"AHSearch"</expr>, <expr>(<name>PyCFunction</name>)<name>Ah_AHSearch</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CFStringRef bookname, CFStringRef query) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"AHGotoMainTOC"</expr>, <expr>(<name>PyCFunction</name>)<name>Ah_AHGotoMainTOC</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(AHTOCType toctype) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"AHGotoPage"</expr>, <expr>(<name>PyCFunction</name>)<name>Ah_AHGotoPage</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CFStringRef bookname, CFStringRef path, CFStringRef anchor) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"AHLookupAnchor"</expr>, <expr>(<name>PyCFunction</name>)<name>Ah_AHLookupAnchor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(CFStringRef bookname, CFStringRef anchor) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"AHRegisterHelpBook"</expr>, <expr>(<name>PyCFunction</name>)<name>Ah_AHRegisterHelpBook</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSRef appBundleRef) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>




<function><type><name>void</name></type> <name>init_AH</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>




	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_AH"</expr></argument>, <argument><expr><name>Ah_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>Ah_Error</name> = <call><name>PyMac_GetOSErrException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>Ah_Error</name> == <name>NULL</name> ||
	    <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Error"</expr></argument>, <argument><expr><name>Ah_Error</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
		<return>return;</return></then></if>
}</block></function>

<comment type="block">/* ========================= End module _AH ========================= */</comment>

</unit>
