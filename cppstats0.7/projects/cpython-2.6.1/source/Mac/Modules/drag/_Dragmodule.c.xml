<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Mac/Modules/drag/_Dragmodule.c">
<comment type="block">/* ========================== Module _Drag ========================== */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pymactoolbox.h"</cpp:file></cpp:include>

<comment type="block">/* Macro to test whether a weak-loaded CFM function exists */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMac_PRECHECK</name><parameter_list>(<param><type><name>rtn</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { if ( &amp;rtn == NULL )  {\
        PyErr_SetString(PyExc_NotImplementedError, \
        "Not available in this shared library/OS version"); \
        return NULL; \
    }} while(0)</cpp:value></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Carbon/Carbon.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Callback glue routines */</comment>
<decl_stmt><decl><type><name>DragTrackingHandlerUPP</name></type> <name>dragglue_TrackingHandlerUPP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DragReceiveHandlerUPP</name></type> <name>dragglue_ReceiveHandlerUPP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DragSendDataUPP</name></type> <name>dragglue_SendDataUPP</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
DragInputUPP dragglue_InputUPP;
DragDrawingUPP dragglue_DrawingUPP;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TOOLBOX_OBJECT_GLUE</name></cpp:ifdef>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>_DragObj_New</name><parameter_list>(<param><decl><type><name>DragRef</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_DragObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>DragRef</name> *</type></decl></param>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DragObj_New</name></cpp:macro> <cpp:value>_DragObj_New</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DragObj_Convert</name></cpp:macro> <cpp:value>_DragObj_Convert</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Drag_Error</name></decl>;</decl_stmt>

<comment type="block">/* ---------------------- Object type DragObj ----------------------- */</comment>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>DragObj_Type</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DragObj_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;DragObj_Type || PyObject_TypeCheck((x), &amp;DragObj_Type))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>DragObjObject</name> <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>DragRef</name></type> <name>ob_itself</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>sendproc</name></decl>;</decl_stmt>
}</block></struct></type> <name>DragObjObject</name>;</typedef>

<function><type><name>PyObject</name> *</type><name>DragObj_New</name><parameter_list>(<param><decl><type><name>DragRef</name></type> <name>itself</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>DragObjObject</name> *</type><name>it</name></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>itself</name> == <name>NULL</name></expr>)</condition><then> <block>{
	                                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>Drag_Error</name></expr></argument>,<argument><expr>"Cannot create null Drag"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                                <return>return <expr><name>NULL</name></expr>;</return>
	                        }</block></then></if>
	<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>DragObjObject</name></expr></argument>, <argument><expr>&amp;<name>DragObj_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_itself</name></name> = <name>itself</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>sendproc</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>DragObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>DragRef</name> *</type><name>p_itself</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr>!<call><name>DragObj_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"DragObj required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>0</expr>;</return>
	}</block></then></if>
	<expr_stmt><expr>*<name>p_itself</name> = ((<name>DragObjObject</name> *)<name>v</name>)-&gt;<name>ob_itself</name></expr>;</expr_stmt>
	<return>return <expr>1</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DragObj_dealloc</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>sendproc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_DisposeDrag</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DisposeDrag</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DisposeDrag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>DisposeDrag</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_AddDragItemFlavor</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemReference</name></type> <name>theItemRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FlavorType</name></type> <name>theType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>dataPtr__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>dataPtr__len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>dataPtr__in_len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FlavorFlags</name></type> <name>theFlags</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AddDragItemFlavor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AddDragItemFlavor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;z#l"</expr></argument>,
	                      <argument><expr>&amp;<name>theItemRef</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>theType</name></expr></argument>,
	                      <argument><expr>&amp;<name>dataPtr__in__</name></expr></argument>, <argument><expr>&amp;<name>dataPtr__in_len__</name></expr></argument>,
	                      <argument><expr>&amp;<name>theFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>dataPtr__len__</name> = <name>dataPtr__in_len__</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_err</name> = <call><name>AddDragItemFlavor</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                         <argument><expr><name>theItemRef</name></expr></argument>,
	                         <argument><expr><name>theType</name></expr></argument>,
	                         <argument><expr><name>dataPtr__in__</name></expr></argument>, <argument><expr><name>dataPtr__len__</name></expr></argument>,
	                         <argument><expr><name>theFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_SetDragItemFlavorData</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemReference</name></type> <name>theItemRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FlavorType</name></type> <name>theType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>dataPtr__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>dataPtr__len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>dataPtr__in_len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt32</name></type> <name>dataOffset</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetDragItemFlavorData</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetDragItemFlavorData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;z#l"</expr></argument>,
	                      <argument><expr>&amp;<name>theItemRef</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>theType</name></expr></argument>,
	                      <argument><expr>&amp;<name>dataPtr__in__</name></expr></argument>, <argument><expr>&amp;<name>dataPtr__in_len__</name></expr></argument>,
	                      <argument><expr>&amp;<name>dataOffset</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>dataPtr__len__</name> = <name>dataPtr__in_len__</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_err</name> = <call><name>SetDragItemFlavorData</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                             <argument><expr><name>theItemRef</name></expr></argument>,
	                             <argument><expr><name>theType</name></expr></argument>,
	                             <argument><expr><name>dataPtr__in__</name></expr></argument>, <argument><expr><name>dataPtr__len__</name></expr></argument>,
	                             <argument><expr><name>dataOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_SetDragImage</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>imagePixMap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>imageRgn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>imageOffsetPt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DragImageFlags</name></type> <name>theImageFlags</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetDragImage</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetDragImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;l"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>imagePixMap</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>imageRgn</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>imageOffsetPt</name></expr></argument>,
	                      <argument><expr>&amp;<name>theImageFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetDragImage</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                    <argument><expr><name>imagePixMap</name></expr></argument>,
	                    <argument><expr><name>imageRgn</name></expr></argument>,
	                    <argument><expr><name>imageOffsetPt</name></expr></argument>,
	                    <argument><expr><name>theImageFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_ChangeDragBehaviors</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DragBehaviors</name></type> <name>inBehaviorsToSet</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DragBehaviors</name></type> <name>inBehaviorsToClear</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ChangeDragBehaviors</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ChangeDragBehaviors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
	                      <argument><expr>&amp;<name>inBehaviorsToSet</name></expr></argument>,
	                      <argument><expr>&amp;<name>inBehaviorsToClear</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>ChangeDragBehaviors</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                           <argument><expr><name>inBehaviorsToSet</name></expr></argument>,
	                           <argument><expr><name>inBehaviorsToClear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_TrackDrag</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EventRecord</name></type> <name>theEvent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>theRegion</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>TrackDrag</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TrackDrag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetEventRecord</name></expr></argument>, <argument><expr>&amp;<name>theEvent</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theRegion</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>TrackDrag</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                 <argument><expr>&amp;<name>theEvent</name></expr></argument>,
	                 <argument><expr><name>theRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_CountDragItems</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt16</name></type> <name>numItems</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CountDragItems</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CountDragItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>CountDragItems</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                      <argument><expr>&amp;<name>numItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"H"</expr></argument>,
	                     <argument><expr><name>numItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_GetDragItemReferenceNumber</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt16</name></type> <name>index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemReference</name></type> <name>theItemRef</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetDragItemReferenceNumber</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetDragItemReferenceNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"H"</expr></argument>,
	                      <argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetDragItemReferenceNumber</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                                  <argument><expr><name>index</name></expr></argument>,
	                                  <argument><expr>&amp;<name>theItemRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>theItemRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_CountDragItemFlavors</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemReference</name></type> <name>theItemRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt16</name></type> <name>numFlavors</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CountDragItemFlavors</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CountDragItemFlavors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>theItemRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>CountDragItemFlavors</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                            <argument><expr><name>theItemRef</name></expr></argument>,
	                            <argument><expr>&amp;<name>numFlavors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"H"</expr></argument>,
	                     <argument><expr><name>numFlavors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_GetFlavorType</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemReference</name></type> <name>theItemRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt16</name></type> <name>index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FlavorType</name></type> <name>theType</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetFlavorType</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetFlavorType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lH"</expr></argument>,
	                      <argument><expr>&amp;<name>theItemRef</name></expr></argument>,
	                      <argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetFlavorType</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                     <argument><expr><name>theItemRef</name></expr></argument>,
	                     <argument><expr><name>index</name></expr></argument>,
	                     <argument><expr>&amp;<name>theType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>theType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_GetFlavorFlags</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemReference</name></type> <name>theItemRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FlavorType</name></type> <name>theType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FlavorFlags</name></type> <name>theFlags</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetFlavorFlags</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetFlavorFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>theItemRef</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>theType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetFlavorFlags</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                      <argument><expr><name>theItemRef</name></expr></argument>,
	                      <argument><expr><name>theType</name></expr></argument>,
	                      <argument><expr>&amp;<name>theFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>theFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_GetFlavorDataSize</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemReference</name></type> <name>theItemRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FlavorType</name></type> <name>theType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>dataSize</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetFlavorDataSize</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetFlavorDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>theItemRef</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>theType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetFlavorDataSize</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                         <argument><expr><name>theItemRef</name></expr></argument>,
	                         <argument><expr><name>theType</name></expr></argument>,
	                         <argument><expr>&amp;<name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_GetFlavorData</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemReference</name></type> <name>theItemRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FlavorType</name></type> <name>theType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>dataPtr__out__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>dataPtr__len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>dataPtr__in_len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UInt32</name></type> <name>dataOffset</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetFlavorData</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetFlavorData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;il"</expr></argument>,
	                      <argument><expr>&amp;<name>theItemRef</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>theType</name></expr></argument>,
	                      <argument><expr>&amp;<name>dataPtr__in_len__</name></expr></argument>,
	                      <argument><expr>&amp;<name>dataOffset</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr>(<name>dataPtr__out__</name> = <call><name>malloc</name><argument_list>(<argument><expr><name>dataPtr__in_len__</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>dataPtr__error__</name>;</goto>
	}</block></then></if>
	<expr_stmt><expr><name>dataPtr__len__</name> = <name>dataPtr__in_len__</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_err</name> = <call><name>GetFlavorData</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                     <argument><expr><name>theItemRef</name></expr></argument>,
	                     <argument><expr><name>theType</name></expr></argument>,
	                     <argument><expr><name>dataPtr__out__</name></expr></argument>, <argument><expr>&amp;<name>dataPtr__len__</name></expr></argument>,
	                     <argument><expr><name>dataOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"s#"</expr></argument>,
	                     <argument><expr><name>dataPtr__out__</name></expr></argument>, <argument><expr>(<name>int</name>)<name>dataPtr__len__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dataPtr__out__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <label><name>dataPtr__error__</name>:</label> <empty_stmt>;</empty_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_GetDragItemBounds</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemReference</name></type> <name>theItemRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>itemBounds</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetDragItemBounds</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetDragItemBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
	                      <argument><expr>&amp;<name>theItemRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetDragItemBounds</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                         <argument><expr><name>theItemRef</name></expr></argument>,
	                         <argument><expr>&amp;<name>itemBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>itemBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_SetDragItemBounds</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemReference</name></type> <name>theItemRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>itemBounds</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetDragItemBounds</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetDragItemBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>theItemRef</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>itemBounds</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetDragItemBounds</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                         <argument><expr><name>theItemRef</name></expr></argument>,
	                         <argument><expr>&amp;<name>itemBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_GetDropLocation</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AEDesc</name></type> <name>dropLocation</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetDropLocation</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetDropLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetDropLocation</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                       <argument><expr>&amp;<name>dropLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>AEDesc_New</name></expr></argument>, <argument><expr>&amp;<name>dropLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_SetDropLocation</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AEDesc</name></type> <name>dropLocation</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetDropLocation</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetDropLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>AEDesc_Convert</name></expr></argument>, <argument><expr>&amp;<name>dropLocation</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetDropLocation</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                       <argument><expr>&amp;<name>dropLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_GetDragAttributes</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DragAttributes</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetDragAttributes</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetDragAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetDragAttributes</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                         <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_GetDragMouse</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>mouse</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>globalPinnedMouse</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetDragMouse</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetDragMouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetDragMouse</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                    <argument><expr>&amp;<name>mouse</name></expr></argument>,
	                    <argument><expr>&amp;<name>globalPinnedMouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>mouse</name></expr></argument>,
	                     <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>globalPinnedMouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_SetDragMouse</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>globalPinnedMouse</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SetDragMouse</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetDragMouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>globalPinnedMouse</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>SetDragMouse</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                    <argument><expr><name>globalPinnedMouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_GetDragOrigin</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>globalInitialMouse</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetDragOrigin</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetDragOrigin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetDragOrigin</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                     <argument><expr>&amp;<name>globalInitialMouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>globalInitialMouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_GetDragModifiers</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>modifiers</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>mouseDownModifiers</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>mouseUpModifiers</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetDragModifiers</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetDragModifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetDragModifiers</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                        <argument><expr>&amp;<name>modifiers</name></expr></argument>,
	                        <argument><expr>&amp;<name>mouseDownModifiers</name></expr></argument>,
	                        <argument><expr>&amp;<name>mouseUpModifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"hhh"</expr></argument>,
	                     <argument><expr><name>modifiers</name></expr></argument>,
	                     <argument><expr><name>mouseDownModifiers</name></expr></argument>,
	                     <argument><expr><name>mouseUpModifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_ShowDragHilite</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>hiliteFrame</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>inside</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ShowDragHilite</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ShowDragHilite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>hiliteFrame</name></expr></argument>,
	                      <argument><expr>&amp;<name>inside</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>ShowDragHilite</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                      <argument><expr><name>hiliteFrame</name></expr></argument>,
	                      <argument><expr><name>inside</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_HideDragHilite</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HideDragHilite</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>HideDragHilite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>HideDragHilite</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_DragPreScroll</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>dH</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>dV</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DragPreScroll</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DragPreScroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>dH</name></expr></argument>,
	                      <argument><expr>&amp;<name>dV</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>DragPreScroll</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                     <argument><expr><name>dH</name></expr></argument>,
	                     <argument><expr><name>dV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_DragPostScroll</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DragPostScroll</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DragPostScroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>DragPostScroll</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_UpdateDragHilite</name><parameter_list>(<param><decl><type><name>DragObjObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>updateRgn</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UpdateDragHilite</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>UpdateDragHilite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>updateRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>UpdateDragHilite</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
	                        <argument><expr><name>updateRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>DragObj_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"DisposeDrag"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_DisposeDrag</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"AddDragItemFlavor"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_AddDragItemFlavor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(ItemReference theItemRef, FlavorType theType, Buffer dataPtr, FlavorFlags theFlags) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetDragItemFlavorData"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_SetDragItemFlavorData</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(ItemReference theItemRef, FlavorType theType, Buffer dataPtr, UInt32 dataOffset) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetDragImage"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_SetDragImage</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixMapHandle imagePixMap, RgnHandle imageRgn, Point imageOffsetPt, DragImageFlags theImageFlags) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ChangeDragBehaviors"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_ChangeDragBehaviors</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(DragBehaviors inBehaviorsToSet, DragBehaviors inBehaviorsToClear) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"TrackDrag"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_TrackDrag</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(EventRecord theEvent, RgnHandle theRegion) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CountDragItems"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_CountDragItems</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (UInt16 numItems)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetDragItemReferenceNumber"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_GetDragItemReferenceNumber</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(UInt16 index) -&gt; (ItemReference theItemRef)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"CountDragItemFlavors"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_CountDragItemFlavors</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(ItemReference theItemRef) -&gt; (UInt16 numFlavors)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetFlavorType"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_GetFlavorType</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(ItemReference theItemRef, UInt16 index) -&gt; (FlavorType theType)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetFlavorFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_GetFlavorFlags</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(ItemReference theItemRef, FlavorType theType) -&gt; (FlavorFlags theFlags)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetFlavorDataSize"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_GetFlavorDataSize</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(ItemReference theItemRef, FlavorType theType) -&gt; (Size dataSize)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetFlavorData"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_GetFlavorData</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(ItemReference theItemRef, FlavorType theType, Buffer dataPtr, UInt32 dataOffset) -&gt; (Buffer dataPtr)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetDragItemBounds"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_GetDragItemBounds</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(ItemReference theItemRef) -&gt; (Rect itemBounds)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetDragItemBounds"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_SetDragItemBounds</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(ItemReference theItemRef, Rect itemBounds) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetDropLocation"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_GetDropLocation</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (AEDesc dropLocation)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetDropLocation"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_SetDropLocation</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(AEDesc dropLocation) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetDragAttributes"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_GetDragAttributes</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (DragAttributes flags)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetDragMouse"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_GetDragMouse</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Point mouse, Point globalPinnedMouse)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetDragMouse"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_SetDragMouse</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point globalPinnedMouse) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetDragOrigin"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_GetDragOrigin</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Point globalInitialMouse)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetDragModifiers"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_GetDragModifiers</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (SInt16 modifiers, SInt16 mouseDownModifiers, SInt16 mouseUpModifiers)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ShowDragHilite"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_ShowDragHilite</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle hiliteFrame, Boolean inside) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"HideDragHilite"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_HideDragHilite</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DragPreScroll"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_DragPreScroll</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt16 dH, SInt16 dV) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"DragPostScroll"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_DragPostScroll</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"UpdateDragHilite"</expr>, <expr>(<name>PyCFunction</name>)<name>DragObj_UpdateDragHilite</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle updateRgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DragObj_getsetlist</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DragObj_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DragObj_repr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DragObj_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DragObj_tp_init</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DragObj_tp_alloc</name></cpp:macro> <cpp:value>PyType_GenericAlloc</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DragObj_tp_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_self</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DragRef</name></type> <name>itself</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name><name>kw</name><index>[]</index></name> <init>= <expr><block>{<expr>"itself"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr><name>_kwds</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>DragObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>itself</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr>(<name>_self</name> = <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr>((<name>DragObjObject</name> *)<name>_self</name>)-&gt;<name>ob_itself</name> = <name>itself</name></expr>;</expr_stmt>
	<return>return <expr><name>_self</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DragObj_tp_free</name></cpp:macro> <cpp:value>PyObject_Del</cpp:value></cpp:define>


<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>DragObj_Type</name> <init>= <expr><block>{
	<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
	0</expr>, <comment type="block">/*ob_size*/</comment>
	<expr>"_Drag.DragObj"</expr>, <comment type="block">/*tp_name*/</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>DragObjObject</name></expr></argument>)</argument_list></sizeof></expr>, <comment type="block">/*tp_basicsize*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>) <name>DragObj_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_print*/</comment>
	<expr>(<name>getattrfunc</name>)0</expr>, <comment type="block">/*tp_getattr*/</comment>
	<expr>(<name>setattrfunc</name>)0</expr>, <comment type="block">/*tp_setattr*/</comment>
	<expr>(<name>cmpfunc</name>) <name>DragObj_compare</name></expr>, <comment type="block">/*tp_compare*/</comment>
	<expr>(<name>reprfunc</name>) <name>DragObj_repr</name></expr>, <comment type="block">/*tp_repr*/</comment>
	<expr>(<name>PyNumberMethods</name> *)0</expr>, <comment type="block">/* tp_as_number */</comment>
	<expr>(<name>PySequenceMethods</name> *)0</expr>, <comment type="block">/* tp_as_sequence */</comment>
	<expr>(<name>PyMappingMethods</name> *)0</expr>, <comment type="block">/* tp_as_mapping */</comment>
	<expr>(<name>hashfunc</name>) <name>DragObj_hash</name></expr>, <comment type="block">/*tp_hash*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_call*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_str*/</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>, <comment type="block">/*tp_getattro*/</comment>
	<expr><name>PyObject_GenericSetAttr</name></expr>, <comment type="block">/*tp_setattro */</comment>
	<expr>0</expr>, <comment type="block">/*tp_as_buffer*/</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/* tp_flags */</comment>
	<expr>0</expr>, <comment type="block">/*tp_doc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_traverse*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_clear*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_richcompare*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_weaklistoffset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iter*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iternext*/</comment>
	<expr><name>DragObj_methods</name></expr>, <comment type="block">/* tp_methods */</comment>
	<expr>0</expr>, <comment type="block">/*tp_members*/</comment>
	<expr><name>DragObj_getsetlist</name></expr>, <comment type="block">/*tp_getset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_base*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dict*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_get*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_set*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dictoffset*/</comment>
	<expr><name>DragObj_tp_init</name></expr>, <comment type="block">/* tp_init */</comment>
	<expr><name>DragObj_tp_alloc</name></expr>, <comment type="block">/* tp_alloc */</comment>
	<expr><name>DragObj_tp_new</name></expr>, <comment type="block">/* tp_new */</comment>
	<expr><name>DragObj_tp_free</name></expr>, <comment type="block">/* tp_free */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* -------------------- End object type DragObj --------------------- */</comment>


<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Drag_NewDrag</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DragRef</name></type> <name>theDrag</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NewDrag</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewDrag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>NewDrag</name><argument_list>(<argument><expr>&amp;<name>theDrag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>DragObj_New</name></expr></argument>, <argument><expr><name>theDrag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Drag_GetDragHiliteColor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WindowPtr</name></type> <name>window</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RGBColor</name></type> <name>color</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetDragHiliteColor</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetDragHiliteColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>WinObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>window</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>GetDragHiliteColor</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
	                          <argument><expr>&amp;<name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Drag_WaitMouseMoved</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>initialMouse</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WaitMouseMoved</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>WaitMouseMoved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>initialMouse</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>WaitMouseMoved</name><argument_list>(<argument><expr><name>initialMouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Drag_ZoomRects</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>fromRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>toRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>zoomSteps</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZoomAcceleration</name></type> <name>acceleration</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ZoomRects</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ZoomRects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;hh"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>fromRect</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>toRect</name></expr></argument>,
	                      <argument><expr>&amp;<name>zoomSteps</name></expr></argument>,
	                      <argument><expr>&amp;<name>acceleration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>ZoomRects</name><argument_list>(<argument><expr>&amp;<name>fromRect</name></expr></argument>,
	                 <argument><expr>&amp;<name>toRect</name></expr></argument>,
	                 <argument><expr><name>zoomSteps</name></expr></argument>,
	                 <argument><expr><name>acceleration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Drag_ZoomRegion</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>region</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>zoomDistance</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt16</name></type> <name>zoomSteps</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZoomAcceleration</name></type> <name>acceleration</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ZoomRegion</name></cpp:ifndef>
	<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ZoomRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;hh"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>region</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>zoomDistance</name></expr></argument>,
	                      <argument><expr>&amp;<name>zoomSteps</name></expr></argument>,
	                      <argument><expr>&amp;<name>acceleration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_err</name> = <call><name>ZoomRegion</name><argument_list>(<argument><expr><name>region</name></expr></argument>,
	                  <argument><expr><name>zoomDistance</name></expr></argument>,
	                  <argument><expr><name>zoomSteps</name></expr></argument>,
	                  <argument><expr><name>acceleration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Drag_InstallTrackingHandler</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	    <decl_stmt><decl><type><name>PyObject</name> *</type><name>callback</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>WindowPtr</name></type> <name>theWindow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>

	    <if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O|O&amp;"</expr></argument>, <argument><expr>&amp;<name>callback</name></expr></argument>, <argument><expr><name>WinObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theWindow</name></expr></argument>)</argument_list></call></expr> )</condition><then>
	        <return>return <expr><name>NULL</name></expr>;</return></then></if>
	    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block">/* Cannot decref later, too bad */</comment>
	    <expr_stmt><expr><name>_err</name> = <call><name>InstallTrackingHandler</name><argument_list>(<argument><expr><name>dragglue_TrackingHandlerUPP</name></expr></argument>, <argument><expr><name>theWindow</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	        <return>return <expr><name>_res</name></expr>;</return>

}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Drag_InstallReceiveHandler</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	    <decl_stmt><decl><type><name>PyObject</name> *</type><name>callback</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>WindowPtr</name></type> <name>theWindow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>

	    <if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O|O&amp;"</expr></argument>, <argument><expr>&amp;<name>callback</name></expr></argument>, <argument><expr><name>WinObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theWindow</name></expr></argument>)</argument_list></call></expr> )</condition><then>
	        <return>return <expr><name>NULL</name></expr>;</return></then></if>
	    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block">/* Cannot decref later, too bad */</comment>
	    <expr_stmt><expr><name>_err</name> = <call><name>InstallReceiveHandler</name><argument_list>(<argument><expr><name>dragglue_ReceiveHandlerUPP</name></expr></argument>, <argument><expr><name>theWindow</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	        <return>return <expr><name>_res</name></expr>;</return>

}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Drag_RemoveTrackingHandler</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	    <decl_stmt><decl><type><name>WindowPtr</name></type> <name>theWindow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>

	    <if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"|O&amp;"</expr></argument>, <argument><expr><name>WinObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theWindow</name></expr></argument>)</argument_list></call></expr> )</condition><then>
	        <return>return <expr><name>NULL</name></expr>;</return></then></if>
	    <expr_stmt><expr><name>_err</name> = <call><name>RemoveTrackingHandler</name><argument_list>(<argument><expr><name>dragglue_TrackingHandlerUPP</name></expr></argument>, <argument><expr><name>theWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	        <return>return <expr><name>_res</name></expr>;</return>

}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Drag_RemoveReceiveHandler</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	    <decl_stmt><decl><type><name>WindowPtr</name></type> <name>theWindow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>

	    <if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"|O&amp;"</expr></argument>, <argument><expr><name>WinObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theWindow</name></expr></argument>)</argument_list></call></expr> )</condition><then>
	        <return>return <expr><name>NULL</name></expr>;</return></then></if>
	    <expr_stmt><expr><name>_err</name> = <call><name>RemoveReceiveHandler</name><argument_list>(<argument><expr><name>dragglue_ReceiveHandlerUPP</name></expr></argument>, <argument><expr><name>theWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	        <return>return <expr><name>_res</name></expr>;</return>

}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>Drag_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"NewDrag"</expr>, <expr>(<name>PyCFunction</name>)<name>Drag_NewDrag</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (DragRef theDrag)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetDragHiliteColor"</expr>, <expr>(<name>PyCFunction</name>)<name>Drag_GetDragHiliteColor</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(WindowPtr window) -&gt; (RGBColor color)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"WaitMouseMoved"</expr>, <expr>(<name>PyCFunction</name>)<name>Drag_WaitMouseMoved</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point initialMouse) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ZoomRects"</expr>, <expr>(<name>PyCFunction</name>)<name>Drag_ZoomRects</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect fromRect, Rect toRect, SInt16 zoomSteps, ZoomAcceleration acceleration) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"ZoomRegion"</expr>, <expr>(<name>PyCFunction</name>)<name>Drag_ZoomRegion</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle region, Point zoomDistance, SInt16 zoomSteps, ZoomAcceleration acceleration) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InstallTrackingHandler"</expr>, <expr>(<name>PyCFunction</name>)<name>Drag_InstallTrackingHandler</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>NULL</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"InstallReceiveHandler"</expr>, <expr>(<name>PyCFunction</name>)<name>Drag_InstallReceiveHandler</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>NULL</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"RemoveTrackingHandler"</expr>, <expr>(<name>PyCFunction</name>)<name>Drag_RemoveTrackingHandler</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>NULL</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"RemoveReceiveHandler"</expr>, <expr>(<name>PyCFunction</name>)<name>Drag_RemoveReceiveHandler</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>NULL</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <name>pascal</name> <name>OSErr</name></type>
<name>dragglue_TrackingHandler</name><parameter_list>(<param><decl><type><name>DragTrackingMessage</name></type> <name>theMessage</name></decl></param>, <param><decl><type><name>WindowPtr</name></type> <name>theWindow</name></decl></param>,
                         <param><decl><type><name>void</name> *</type><name>handlerRefCon</name></decl></param>, <param><decl><type><name>DragReference</name></type> <name>theDrag</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>, *<decl><type ref="prev"/><name>rv</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>args</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"hO&amp;O&amp;"</expr></argument>, <argument><expr><name>theMessage</name></expr></argument>, <argument><expr><name>DragObj_New</name></expr></argument>, <argument><expr><name>theDrag</name></expr></argument>, <argument><expr><name>WinObj_WhichWindow</name></expr></argument>, <argument><expr><name>theWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>( <expr><name>args</name> == <name>NULL</name></expr> )</condition><then>
                <return>return <expr>-1</expr>;</return></then></if>
        <expr_stmt><expr><name>rv</name> = <call><name>PyEval_CallObject</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>handlerRefCon</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>( <expr><name>rv</name> == <name>NULL</name></expr> )</condition><then> <block>{
                <expr_stmt><expr><call><name>PySys_WriteStderr</name><argument_list>(<argument><expr>"Drag: Exception in TrackingHandler\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>-1</expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>i</name> = -1</expr>;</expr_stmt>
        <if>if <condition>( <expr><name>rv</name> == <name>Py_None</name></expr> )</condition><then>
                <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt></then>
        <else>else
                <expr_stmt><expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>i</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>pascal</name> <name>OSErr</name></type>
<name>dragglue_ReceiveHandler</name><parameter_list>(<param><decl><type><name>WindowPtr</name></type> <name>theWindow</name></decl></param>, <param><decl><type><name>void</name> *</type><name>handlerRefCon</name></decl></param>,
                        <param><decl><type><name>DragReference</name></type> <name>theDrag</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>, *<decl><type ref="prev"/><name>rv</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>args</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>, <argument><expr><name>DragObj_New</name></expr></argument>, <argument><expr><name>theDrag</name></expr></argument>, <argument><expr><name>WinObj_WhichWindow</name></expr></argument>, <argument><expr><name>theWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>( <expr><name>args</name> == <name>NULL</name></expr> )</condition><then>
                <return>return <expr>-1</expr>;</return></then></if>
        <expr_stmt><expr><name>rv</name> = <call><name>PyEval_CallObject</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>handlerRefCon</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>( <expr><name>rv</name> == <name>NULL</name></expr> )</condition><then> <block>{
                <expr_stmt><expr><call><name>PySys_WriteStderr</name><argument_list>(<argument><expr>"Drag: Exception in ReceiveHandler\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>-1</expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>i</name> = -1</expr>;</expr_stmt>
        <if>if <condition>( <expr><name>rv</name> == <name>Py_None</name></expr> )</condition><then>
                <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt></then>
        <else>else
                <expr_stmt><expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>i</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>pascal</name> <name>OSErr</name></type>
<name>dragglue_SendData</name><parameter_list>(<param><decl><type><name>FlavorType</name></type> <name>theType</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dragSendRefCon</name></decl></param>,
                      <param><decl><type><name>ItemReference</name></type> <name>theItem</name></decl></param>, <param><decl><type><name>DragReference</name></type> <name>theDrag</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>DragObjObject</name> *</type><name>self</name> <init>= <expr>(<name>DragObjObject</name> *)<name>dragSendRefCon</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>, *<decl><type ref="prev"/><name>rv</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

        <if>if <condition>( <expr><name><name>self</name>-&gt;<name>sendproc</name></name> == <name>NULL</name></expr> )</condition><then>
                <return>return <expr>-1</expr>;</return></then></if>
        <expr_stmt><expr><name>args</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;l"</expr></argument>, <argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>theType</name></expr></argument>, <argument><expr><name>theItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>( <expr><name>args</name> == <name>NULL</name></expr> )</condition><then>
                <return>return <expr>-1</expr>;</return></then></if>
        <expr_stmt><expr><name>rv</name> = <call><name>PyEval_CallObject</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>sendproc</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>( <expr><name>rv</name> == <name>NULL</name></expr> )</condition><then> <block>{
                <expr_stmt><expr><call><name>PySys_WriteStderr</name><argument_list>(<argument><expr>"Drag: Exception in SendDataHandler\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>-1</expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>i</name> = -1</expr>;</expr_stmt>
        <if>if <condition>( <expr><name>rv</name> == <name>Py_None</name></expr> )</condition><then>
                <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt></then>
        <else>else
                <expr_stmt><expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>i</name></expr>;</return>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
static pascal OSErr
dragglue_Input(Point *mouse, short *modifiers,
                   void *dragSendRefCon, DragReference theDrag)
{
    return 0;
}

static pascal OSErr
dragglue_Drawing(xxxx
                   void *dragSendRefCon, DragReference theDrag)
{
    return 0;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* __LP64__ */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>Drag_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>


<function><type><name>void</name></type> <name>init_Drag</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>



	        <expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_NEW</name><argument_list>(<argument><expr><name>DragRef</name></expr></argument>, <argument><expr><name>DragObj_New</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_CONVERT</name><argument_list>(<argument><expr><name>DragRef</name></expr></argument>, <argument><expr><name>DragObj_Convert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>


	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_Drag"</expr></argument>, <argument><expr><name>Drag_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>Drag_Error</name> = <call><name>PyMac_GetOSErrException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>Drag_Error</name> == <name>NULL</name> ||
	    <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Error"</expr></argument>, <argument><expr><name>Drag_Error</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><name><name>DragObj_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>DragObj_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>DragObj_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"DragObj"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>DragObj_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Backward-compatible name */</comment>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>DragObj_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"DragObjType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>DragObj_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dragglue_TrackingHandlerUPP</name> = <call><name>NewDragTrackingHandlerUPP</name><argument_list>(<argument><expr><name>dragglue_TrackingHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dragglue_ReceiveHandlerUPP</name> = <call><name>NewDragReceiveHandlerUPP</name><argument_list>(<argument><expr><name>dragglue_ReceiveHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dragglue_SendDataUPP</name> = <call><name>NewDragSendDataUPP</name><argument_list>(<argument><expr><name>dragglue_SendData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
	dragglue_InputUPP = NewDragInputUPP(dragglue_Input);
	dragglue_DrawingUPP = NewDragDrawingUPP(dragglue_Drawing);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

}</block></function>

<comment type="block">/* ======================== End module _Drag ======================== */</comment>

</unit>
