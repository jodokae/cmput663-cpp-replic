<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Mac/Modules/list/_Listmodule.c">
<comment type="block">/* ========================== Module _List ========================== */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pymactoolbox.h"</cpp:file></cpp:include>

<comment type="block">/* Macro to test whether a weak-loaded CFM function exists */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMac_PRECHECK</name><parameter_list>(<param><type><name>rtn</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { if ( &amp;rtn == NULL )  {\
        PyErr_SetString(PyExc_NotImplementedError, \
        "Not available in this shared library/OS version"); \
        return NULL; \
    }} while(0)</cpp:value></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Carbon/Carbon.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TOOLBOX_OBJECT_GLUE</name></cpp:ifdef>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>_ListObj_New</name><parameter_list>(<param><decl><type><name>ListHandle</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_ListObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>ListHandle</name> *</type></decl></param>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ListObj_New</name></cpp:macro> <cpp:value>_ListObj_New</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ListObj_Convert</name></cpp:macro> <cpp:value>_ListObj_Convert</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_List</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((ListHandle)x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_Resource</name><parameter_list>(<param><type><name>lh</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((Handle)lh)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>ListDefUPP</name></type> <name>myListDefFunctionUPP</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>List_Error</name></decl>;</decl_stmt>

<comment type="block">/* ------------------------ Object type List ------------------------ */</comment>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>List_Type</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ListObj_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;List_Type || PyObject_TypeCheck((x), &amp;List_Type))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>ListObject</name> <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>ListHandle</name></type> <name>ob_itself</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>ob_ldef_func</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ob_must_be_disposed</name></decl>;</decl_stmt>
}</block></struct></type> <name>ListObject</name>;</typedef>

<function><type><name>PyObject</name> *</type><name>ListObj_New</name><parameter_list>(<param><decl><type><name>ListHandle</name></type> <name>itself</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ListObject</name> *</type><name>it</name></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>itself</name> == <name>NULL</name></expr>)</condition><then> <block>{
	                                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>List_Error</name></expr></argument>,<argument><expr>"Cannot create null List"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                                <return>return <expr><name>NULL</name></expr>;</return>
	                        }</block></then></if>
	<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>ListObject</name></expr></argument>, <argument><expr>&amp;<name>List_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_itself</name></name> = <name>itself</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_ldef_func</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_must_be_disposed</name></name> = 1</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetListRefCon</name><argument_list>(<argument><expr><name>itself</name></expr></argument>, <argument><expr>(<name>long</name>)<name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>ListObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>ListHandle</name> *</type><name>p_itself</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr>!<call><name>ListObj_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"List required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>0</expr>;</return>
	}</block></then></if>
	<expr_stmt><expr>*<name>p_itself</name> = ((<name>ListObject</name> *)<name>v</name>)-&gt;<name>ob_itself</name></expr>;</expr_stmt>
	<return>return <expr>1</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ListObj_dealloc</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_ldef_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_ldef_func</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetListRefCon</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>, <argument><expr>(<name>long</name>)0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_must_be_disposed</name></name> &amp;&amp; <name><name>self</name>-&gt;<name>ob_itself</name></name></expr>)</condition><then> <expr_stmt><expr><call><name>LDispose</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LAddColumn</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>colNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>count</name></expr></argument>,
	                      <argument><expr>&amp;<name>colNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>LAddColumn</name><argument_list>(<argument><expr><name>count</name></expr></argument>,
	                 <argument><expr><name>colNum</name></expr></argument>,
	                 <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LAddRow</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>rowNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>count</name></expr></argument>,
	                      <argument><expr>&amp;<name>rowNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>LAddRow</name><argument_list>(<argument><expr><name>count</name></expr></argument>,
	              <argument><expr><name>rowNum</name></expr></argument>,
	              <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LDelColumn</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>colNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>count</name></expr></argument>,
	                      <argument><expr>&amp;<name>colNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LDelColumn</name><argument_list>(<argument><expr><name>count</name></expr></argument>,
	           <argument><expr><name>colNum</name></expr></argument>,
	           <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LDelRow</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>rowNum</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>count</name></expr></argument>,
	                      <argument><expr>&amp;<name>rowNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LDelRow</name><argument_list>(<argument><expr><name>count</name></expr></argument>,
	        <argument><expr><name>rowNum</name></expr></argument>,
	        <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LGetSelect</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>theCell</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"bO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>next</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>theCell</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>LGetSelect</name><argument_list>(<argument><expr><name>next</name></expr></argument>,
	                 <argument><expr>&amp;<name>theCell</name></expr></argument>,
	                 <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"bO&amp;"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>,
	                     <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>theCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LLastClick</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>_rv</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>LLastClick</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LNextCell</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>hNext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>vNext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>theCell</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"bbO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>hNext</name></expr></argument>,
	                      <argument><expr>&amp;<name>vNext</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>theCell</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>LNextCell</name><argument_list>(<argument><expr><name>hNext</name></expr></argument>,
	                <argument><expr><name>vNext</name></expr></argument>,
	                <argument><expr>&amp;<name>theCell</name></expr></argument>,
	                <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"bO&amp;"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>,
	                     <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>theCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LSize</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>listWidth</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>listHeight</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>listWidth</name></expr></argument>,
	                      <argument><expr>&amp;<name>listHeight</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LSize</name><argument_list>(<argument><expr><name>listWidth</name></expr></argument>,
	      <argument><expr><name>listHeight</name></expr></argument>,
	      <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LSetDrawingMode</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>drawIt</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"b"</expr></argument>,
	                      <argument><expr>&amp;<name>drawIt</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LSetDrawingMode</name><argument_list>(<argument><expr><name>drawIt</name></expr></argument>,
	                <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LScroll</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dCols</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dRows</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
	                      <argument><expr>&amp;<name>dCols</name></expr></argument>,
	                      <argument><expr>&amp;<name>dRows</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LScroll</name><argument_list>(<argument><expr><name>dCols</name></expr></argument>,
	        <argument><expr><name>dRows</name></expr></argument>,
	        <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LAutoScroll</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LAutoScroll</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LUpdate</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RgnHandle</name></type> <name>theRgn</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LUpdate</name><argument_list>(<argument><expr><name>theRgn</name></expr></argument>,
	        <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LActivate</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>act</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"b"</expr></argument>,
	                      <argument><expr>&amp;<name>act</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LActivate</name><argument_list>(<argument><expr><name>act</name></expr></argument>,
	          <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LCellSize</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>cSize</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>cSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LCellSize</name><argument_list>(<argument><expr><name>cSize</name></expr></argument>,
	          <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LClick</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>pt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EventModifiers</name></type> <name>modifiers</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;H"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>pt</name></expr></argument>,
	                      <argument><expr>&amp;<name>modifiers</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>LClick</name><argument_list>(<argument><expr><name>pt</name></expr></argument>,
	             <argument><expr><name>modifiers</name></expr></argument>,
	             <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LAddToCell</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>dataPtr__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dataPtr__len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>dataPtr__in_len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>theCell</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"s#O&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>dataPtr__in__</name></expr></argument>, <argument><expr>&amp;<name>dataPtr__in_len__</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>theCell</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>dataPtr__len__</name> = <name>dataPtr__in_len__</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LAddToCell</name><argument_list>(<argument><expr><name>dataPtr__in__</name></expr></argument>, <argument><expr><name>dataPtr__len__</name></expr></argument>,
	           <argument><expr><name>theCell</name></expr></argument>,
	           <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LClrCell</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>theCell</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>theCell</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LClrCell</name><argument_list>(<argument><expr><name>theCell</name></expr></argument>,
	         <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LGetCell</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>dataPtr__out__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dataPtr__len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>dataPtr__in_len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>theCell</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"iO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>dataPtr__in_len__</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>theCell</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr>(<name>dataPtr__out__</name> = <call><name>malloc</name><argument_list>(<argument><expr><name>dataPtr__in_len__</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>dataPtr__error__</name>;</goto>
	}</block></then></if>
	<expr_stmt><expr><name>dataPtr__len__</name> = <name>dataPtr__in_len__</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LGetCell</name><argument_list>(<argument><expr><name>dataPtr__out__</name></expr></argument>, <argument><expr>&amp;<name>dataPtr__len__</name></expr></argument>,
	         <argument><expr><name>theCell</name></expr></argument>,
	         <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"s#"</expr></argument>,
	                     <argument><expr><name>dataPtr__out__</name></expr></argument>, <argument><expr>(<name>int</name>)<name>dataPtr__len__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dataPtr__out__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <label><name>dataPtr__error__</name>:</label> <empty_stmt>;</empty_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LRect</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>cellRect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>theCell</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>theCell</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LRect</name><argument_list>(<argument><expr>&amp;<name>cellRect</name></expr></argument>,
	      <argument><expr><name>theCell</name></expr></argument>,
	      <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>cellRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LSetCell</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>dataPtr__in__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>dataPtr__len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>dataPtr__in_len__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>theCell</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"s#O&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>dataPtr__in__</name></expr></argument>, <argument><expr>&amp;<name>dataPtr__in_len__</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>theCell</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>dataPtr__len__</name> = <name>dataPtr__in_len__</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LSetCell</name><argument_list>(<argument><expr><name>dataPtr__in__</name></expr></argument>, <argument><expr><name>dataPtr__len__</name></expr></argument>,
	         <argument><expr><name>theCell</name></expr></argument>,
	         <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LSetSelect</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>setIt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>theCell</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"bO&amp;"</expr></argument>,
	                      <argument><expr>&amp;<name>setIt</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>theCell</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LSetSelect</name><argument_list>(<argument><expr><name>setIt</name></expr></argument>,
	           <argument><expr><name>theCell</name></expr></argument>,
	           <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LDraw</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>theCell</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>theCell</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LDraw</name><argument_list>(<argument><expr><name>theCell</name></expr></argument>,
	      <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_LGetCellDataLocation</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>theCell</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>theCell</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>LGetCellDataLocation</name><argument_list>(<argument><expr>&amp;<name>offset</name></expr></argument>,
	                     <argument><expr>&amp;<name>len</name></expr></argument>,
	                     <argument><expr><name>theCell</name></expr></argument>,
	                     <argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"hh"</expr></argument>,
	                     <argument><expr><name>offset</name></expr></argument>,
	                     <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_GetListPort</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CGrafPtr</name></type> <name>_rv</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetListPort</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>GrafObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_GetListVerticalScrollBar</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ControlHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetListVerticalScrollBar</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>CtlObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_GetListHorizontalScrollBar</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ControlHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetListHorizontalScrollBar</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>CtlObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_GetListActive</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetListActive</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_GetListClickTime</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt32</name></type> <name>_rv</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetListClickTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_GetListRefCon</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt32</name></type> <name>_rv</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetListRefCon</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_GetListDefinition</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetListDefinition</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_GetListUserHandle</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetListUserHandle</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_GetListDataHandle</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DataHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetListDataHandle</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_GetListFlags</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OptionBits</name></type> <name>_rv</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetListFlags</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_GetListSelectionFlags</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OptionBits</name></type> <name>_rv</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>GetListSelectionFlags</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
	                     <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_as_Resource</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>as_Resource</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>ListObj_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"LAddColumn"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LAddColumn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short count, short colNum) -&gt; (short _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LAddRow"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LAddRow</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short count, short rowNum) -&gt; (short _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LDelColumn"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LDelColumn</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short count, short colNum) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LDelRow"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LDelRow</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short count, short rowNum) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LGetSelect"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LGetSelect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Boolean next, Point theCell) -&gt; (Boolean _rv, Point theCell)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LLastClick"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LLastClick</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Point _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LNextCell"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LNextCell</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Boolean hNext, Boolean vNext, Point theCell) -&gt; (Boolean _rv, Point theCell)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LSize"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LSize</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short listWidth, short listHeight) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LSetDrawingMode"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LSetDrawingMode</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Boolean drawIt) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LScroll"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LScroll</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(short dCols, short dRows) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LAutoScroll"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LAutoScroll</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LUpdate"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LUpdate</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle theRgn) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LActivate"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LActivate</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Boolean act) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LCellSize"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LCellSize</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point cSize) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LClick"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LClick</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point pt, EventModifiers modifiers) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LAddToCell"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LAddToCell</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Buffer dataPtr, Point theCell) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LClrCell"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LClrCell</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point theCell) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LGetCell"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LGetCell</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Buffer dataPtr, Point theCell) -&gt; (Buffer dataPtr)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LRect"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LRect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point theCell) -&gt; (Rect cellRect)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LSetCell"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LSetCell</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Buffer dataPtr, Point theCell) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LSetSelect"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LSetSelect</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Boolean setIt, Point theCell) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LDraw"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LDraw</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point theCell) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LGetCellDataLocation"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_LGetCellDataLocation</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point theCell) -&gt; (short offset, short len)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetListPort"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_GetListPort</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (CGrafPtr _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetListVerticalScrollBar"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_GetListVerticalScrollBar</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (ControlHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetListHorizontalScrollBar"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_GetListHorizontalScrollBar</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (ControlHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetListActive"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_GetListActive</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetListClickTime"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_GetListClickTime</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (SInt32 _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetListRefCon"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_GetListRefCon</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (SInt32 _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetListDefinition"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_GetListDefinition</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Handle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetListUserHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_GetListUserHandle</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Handle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetListDataHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_GetListDataHandle</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (DataHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetListFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_GetListFlags</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (OptionBits _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"GetListSelectionFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_GetListSelectionFlags</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (OptionBits _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"as_Resource"</expr>, <expr>(<name>PyCFunction</name>)<name>ListObj_as_Resource</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Handle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_get_listFlags</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr>(<name>long</name>)<call><name>GetListFlags</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call> &amp; 0xff</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ListObj_set_listFlags</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr>&amp;<name>(*<name><name>self</name>-&gt;<name>ob_itself</name></name>)-&gt;<name>listFlags</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_get_selFlags</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr>(<name>long</name>)<call><name>GetListSelectionFlags</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call> &amp; 0xff</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ListObj_set_selFlags</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr>&amp;<name>(*<name><name>self</name>-&gt;<name>ob_itself</name></name>)-&gt;<name>selFlags</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_get_cellSize</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>(*<name><name>self</name>-&gt;<name>ob_itself</name></name>)-&gt;<name>cellSize</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ListObj_set_cellSize</name><parameter_list>(<param><decl><type><name>ListObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>(*<name><name>self</name>-&gt;<name>ob_itself</name></name>)-&gt;<name>cellSize</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
	<return>return <expr>0</expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>ListObj_getsetlist</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"listFlags"</expr>, <expr>(<name>getter</name>)<name>ListObj_get_listFlags</name></expr>, <expr>(<name>setter</name>)<name>ListObj_set_listFlags</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"selFlags"</expr>, <expr>(<name>getter</name>)<name>ListObj_get_selFlags</name></expr>, <expr>(<name>setter</name>)<name>ListObj_set_selFlags</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr>"cellSize"</expr>, <expr>(<name>getter</name>)<name>ListObj_get_cellSize</name></expr>, <expr>(<name>setter</name>)<name>ListObj_set_cellSize</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ListObj_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ListObj_repr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ListObj_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ListObj_tp_init</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ListObj_tp_alloc</name></cpp:macro> <cpp:value>PyType_GenericAlloc</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ListObj_tp_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_self</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListHandle</name></type> <name>itself</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name><name>kw</name><index>[]</index></name> <init>= <expr><block>{<expr>"itself"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr><name>_kwds</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>ListObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>itself</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr>(<name>_self</name> = <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr>((<name>ListObject</name> *)<name>_self</name>)-&gt;<name>ob_itself</name> = <name>itself</name></expr>;</expr_stmt>
	<return>return <expr><name>_self</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ListObj_tp_free</name></cpp:macro> <cpp:value>PyObject_Del</cpp:value></cpp:define>


<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>List_Type</name> <init>= <expr><block>{
	<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
	0</expr>, <comment type="block">/*ob_size*/</comment>
	<expr>"_List.List"</expr>, <comment type="block">/*tp_name*/</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>ListObject</name></expr></argument>)</argument_list></sizeof></expr>, <comment type="block">/*tp_basicsize*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>) <name>ListObj_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_print*/</comment>
	<expr>(<name>getattrfunc</name>)0</expr>, <comment type="block">/*tp_getattr*/</comment>
	<expr>(<name>setattrfunc</name>)0</expr>, <comment type="block">/*tp_setattr*/</comment>
	<expr>(<name>cmpfunc</name>) <name>ListObj_compare</name></expr>, <comment type="block">/*tp_compare*/</comment>
	<expr>(<name>reprfunc</name>) <name>ListObj_repr</name></expr>, <comment type="block">/*tp_repr*/</comment>
	<expr>(<name>PyNumberMethods</name> *)0</expr>, <comment type="block">/* tp_as_number */</comment>
	<expr>(<name>PySequenceMethods</name> *)0</expr>, <comment type="block">/* tp_as_sequence */</comment>
	<expr>(<name>PyMappingMethods</name> *)0</expr>, <comment type="block">/* tp_as_mapping */</comment>
	<expr>(<name>hashfunc</name>) <name>ListObj_hash</name></expr>, <comment type="block">/*tp_hash*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_call*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_str*/</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>, <comment type="block">/*tp_getattro*/</comment>
	<expr><name>PyObject_GenericSetAttr</name></expr>, <comment type="block">/*tp_setattro */</comment>
	<expr>0</expr>, <comment type="block">/*tp_as_buffer*/</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/* tp_flags */</comment>
	<expr>0</expr>, <comment type="block">/*tp_doc*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_traverse*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_clear*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_richcompare*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_weaklistoffset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iter*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_iternext*/</comment>
	<expr><name>ListObj_methods</name></expr>, <comment type="block">/* tp_methods */</comment>
	<expr>0</expr>, <comment type="block">/*tp_members*/</comment>
	<expr><name>ListObj_getsetlist</name></expr>, <comment type="block">/*tp_getset*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_base*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dict*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_get*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_descr_set*/</comment>
	<expr>0</expr>, <comment type="block">/*tp_dictoffset*/</comment>
	<expr><name>ListObj_tp_init</name></expr>, <comment type="block">/* tp_init */</comment>
	<expr><name>ListObj_tp_alloc</name></expr>, <comment type="block">/* tp_alloc */</comment>
	<expr><name>ListObj_tp_new</name></expr>, <comment type="block">/* tp_new */</comment>
	<expr><name>ListObj_tp_free</name></expr>, <comment type="block">/* tp_free */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* ---------------------- End object type List ---------------------- */</comment>


<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>List_CreateCustomList</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>rView</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>dataBounds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>cellSize</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>PyObject</name> *</type><name>listDefFunc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListDefSpec</name></type> <name>theSpec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WindowPtr</name></type> <name>theWindow</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>drawIt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>hasGrow</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>scrollHoriz</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>scrollVert</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListHandle</name></type> <name>outList</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;(iO)O&amp;bbbb"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>rView</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>dataBounds</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>cellSize</name></expr></argument>,
	                      <argument><expr>&amp;<name><name>theSpec</name>.<name>defType</name></name></expr></argument>, <argument><expr>&amp;<name>listDefFunc</name></expr></argument>,
	                      <argument><expr><name>WinObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theWindow</name></expr></argument>,
	                      <argument><expr>&amp;<name>drawIt</name></expr></argument>,
	                      <argument><expr>&amp;<name>hasGrow</name></expr></argument>,
	                      <argument><expr>&amp;<name>scrollHoriz</name></expr></argument>,
	                      <argument><expr>&amp;<name>scrollVert</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	        <return>return <expr><name>NULL</name></expr>;</return></then></if>


	<comment type="block">/* Carbon applications use the CreateCustomList API */</comment>
	<expr_stmt><expr><name><name>theSpec</name>.<name>u</name>.<name>userProc</name></name> = <name>myListDefFunctionUPP</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CreateCustomList</name><argument_list>(<argument><expr>&amp;<name>rView</name></expr></argument>,
	                 <argument><expr>&amp;<name>dataBounds</name></expr></argument>,
	                 <argument><expr><name>cellSize</name></expr></argument>,
	                 <argument><expr>&amp;<name>theSpec</name></expr></argument>,
	                 <argument><expr><name>theWindow</name></expr></argument>,
	                 <argument><expr><name>drawIt</name></expr></argument>,
	                 <argument><expr><name>hasGrow</name></expr></argument>,
	                 <argument><expr><name>scrollHoriz</name></expr></argument>,
	                 <argument><expr><name>scrollVert</name></expr></argument>,
	                 <argument><expr>&amp;<name>outList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<expr_stmt><expr><name>_res</name> = <call><name>ListObj_New</name><argument_list>(<argument><expr><name>outList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>_res</name> == <name>NULL</name></expr>)</condition><then>
	        <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>listDefFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr>((<name>ListObject</name>*)<name>_res</name>)-&gt;<name>ob_ldef_func</name> = <name>listDefFunc</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>List_LNew</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>rView</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>dataBounds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>cSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>theProc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WindowPtr</name></type> <name>theWindow</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>drawIt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>hasGrow</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>scrollHoriz</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>scrollVert</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;hO&amp;bbbb"</expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>rView</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>dataBounds</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>cSize</name></expr></argument>,
	                      <argument><expr>&amp;<name>theProc</name></expr></argument>,
	                      <argument><expr><name>WinObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theWindow</name></expr></argument>,
	                      <argument><expr>&amp;<name>drawIt</name></expr></argument>,
	                      <argument><expr>&amp;<name>hasGrow</name></expr></argument>,
	                      <argument><expr>&amp;<name>scrollHoriz</name></expr></argument>,
	                      <argument><expr>&amp;<name>scrollVert</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>_rv</name> = <call><name>LNew</name><argument_list>(<argument><expr>&amp;<name>rView</name></expr></argument>,
	           <argument><expr>&amp;<name>dataBounds</name></expr></argument>,
	           <argument><expr><name>cSize</name></expr></argument>,
	           <argument><expr><name>theProc</name></expr></argument>,
	           <argument><expr><name>theWindow</name></expr></argument>,
	           <argument><expr><name>drawIt</name></expr></argument>,
	           <argument><expr><name>hasGrow</name></expr></argument>,
	           <argument><expr><name>scrollHoriz</name></expr></argument>,
	           <argument><expr><name>scrollVert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
	                     <argument><expr><name>ListObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>List_SetListViewBounds</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListHandle</name></type> <name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Rect</name></type> <name>view</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ListObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>list</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>view</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetListViewBounds</name><argument_list>(<argument><expr><name>list</name></expr></argument>,
	                  <argument><expr>&amp;<name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>List_SetListPort</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListHandle</name></type> <name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CGrafPtr</name></type> <name>port</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ListObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>list</name></expr></argument>,
	                      <argument><expr><name>GrafObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>port</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetListPort</name><argument_list>(<argument><expr><name>list</name></expr></argument>,
	            <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>List_SetListCellIndent</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListHandle</name></type> <name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name></type> <name>indent</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ListObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>list</name></expr></argument>,
	                      <argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>indent</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetListCellIndent</name><argument_list>(<argument><expr><name>list</name></expr></argument>,
	                  <argument><expr>&amp;<name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>List_SetListClickTime</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListHandle</name></type> <name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt32</name></type> <name>time</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
	                      <argument><expr><name>ListObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>list</name></expr></argument>,
	                      <argument><expr>&amp;<name>time</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetListClickTime</name><argument_list>(<argument><expr><name>list</name></expr></argument>,
	                 <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>List_SetListRefCon</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListHandle</name></type> <name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SInt32</name></type> <name>refCon</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
	                      <argument><expr><name>ListObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>list</name></expr></argument>,
	                      <argument><expr>&amp;<name>refCon</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetListRefCon</name><argument_list>(<argument><expr><name>list</name></expr></argument>,
	              <argument><expr><name>refCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>List_SetListUserHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListHandle</name></type> <name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Handle</name></type> <name>userHandle</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
	                      <argument><expr><name>ListObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>list</name></expr></argument>,
	                      <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>userHandle</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetListUserHandle</name><argument_list>(<argument><expr><name>list</name></expr></argument>,
	                  <argument><expr><name>userHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>List_SetListFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListHandle</name></type> <name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OptionBits</name></type> <name>listFlags</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
	                      <argument><expr><name>ListObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>list</name></expr></argument>,
	                      <argument><expr>&amp;<name>listFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetListFlags</name><argument_list>(<argument><expr><name>list</name></expr></argument>,
	             <argument><expr><name>listFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>List_SetListSelectionFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListHandle</name></type> <name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OptionBits</name></type> <name>selectionFlags</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
	                      <argument><expr><name>ListObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>list</name></expr></argument>,
	                      <argument><expr>&amp;<name>selectionFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>SetListSelectionFlags</name><argument_list>(<argument><expr><name>list</name></expr></argument>,
	                      <argument><expr><name>selectionFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>List_as_List</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Handle</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListObject</name> *</type><name>l</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	        <return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>l</name> = (<name>ListObject</name> *)<call><name>ListObj_New</name><argument_list>(<argument><expr><call><name>as_List</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>l</name>-&gt;<name>ob_must_be_disposed</name></name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O"</expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_res</name></expr>;</return>

}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>List_methods</name><index>[]</index></name> <init>= <expr><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<expr><block>{<expr>"CreateCustomList"</expr>, <expr>(<name>PyCFunction</name>)<name>List_CreateCustomList</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect rView, Rect dataBounds, Point cellSize, ListDefSpec theSpec, WindowPtr theWindow, Boolean drawIt, Boolean hasGrow, Boolean scrollHoriz, Boolean scrollVert) -&gt; (ListHandle outList)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"LNew"</expr>, <expr>(<name>PyCFunction</name>)<name>List_LNew</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect rView, Rect dataBounds, Point cSize, short theProc, WindowPtr theWindow, Boolean drawIt, Boolean hasGrow, Boolean scrollHoriz, Boolean scrollVert) -&gt; (ListHandle _rv)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetListViewBounds"</expr>, <expr>(<name>PyCFunction</name>)<name>List_SetListViewBounds</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(ListHandle list, Rect view) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetListPort"</expr>, <expr>(<name>PyCFunction</name>)<name>List_SetListPort</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(ListHandle list, CGrafPtr port) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetListCellIndent"</expr>, <expr>(<name>PyCFunction</name>)<name>List_SetListCellIndent</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(ListHandle list, Point indent) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetListClickTime"</expr>, <expr>(<name>PyCFunction</name>)<name>List_SetListClickTime</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(ListHandle list, SInt32 time) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetListRefCon"</expr>, <expr>(<name>PyCFunction</name>)<name>List_SetListRefCon</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(ListHandle list, SInt32 refCon) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetListUserHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>List_SetListUserHandle</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(ListHandle list, Handle userHandle) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetListFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>List_SetListFlags</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(ListHandle list, OptionBits listFlags) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"SetListSelectionFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>List_SetListSelectionFlags</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(ListHandle list, OptionBits selectionFlags) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"as_List"</expr>, <expr>(<name>PyCFunction</name>)<name>List_as_List</name></expr>, <expr>1</expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"(Resource)-&gt;List.\nReturns List object (which is not auto-freed!)"</argument>)</argument_list></macro>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>


<function><type><specifier>static</specifier> <name>void</name></type> <name>myListDefFunction</name><parameter_list>(<param><decl><type><name>SInt16</name></type> <name>message</name></decl></param>,
                       <param><decl><type><name>Boolean</name></type> <name>selected</name></decl></param>,
                       <param><decl><type><name>Rect</name> *</type><name>cellRect</name></decl></param>,
                       <param><decl><type><name>Cell</name></type> <name>theCell</name></decl></param>,
                       <param><decl><type><name>SInt16</name></type> <name>dataOffset</name></decl></param>,
                       <param><decl><type><name>SInt16</name></type> <name>dataLen</name></decl></param>,
                       <param><decl><type><name>ListHandle</name></type> <name>theList</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>listDefFunc</name></decl>, *<decl><type ref="prev"/><name>args</name></decl>, *<decl><type ref="prev"/><name>rv</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ListObject</name> *</type><name>self</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>self</name> = (<name>ListObject</name>*)<call><name>GetListRefCon</name><argument_list>(<argument><expr><name>theList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>self</name> == <name>NULL</name> || <name><name>self</name>-&gt;<name>ob_itself</name></name> != <name>theList</name></expr>)</condition><then>
                <return>return;</return></then></if>  <comment type="block">/* nothing we can do */</comment>
        <expr_stmt><expr><name>listDefFunc</name> = <name><name>self</name>-&gt;<name>ob_ldef_func</name></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>listDefFunc</name> == <name>NULL</name></expr>)</condition><then>
                <return>return;</return></then></if>  <comment type="block">/* nothing we can do */</comment>
        <expr_stmt><expr><name>args</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"hbO&amp;O&amp;hhO"</expr></argument>, <argument><expr><name>message</name></expr></argument>,
                                          <argument><expr><name>selected</name></expr></argument>,
                                          <argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr><name>cellRect</name></expr></argument>,
                                          <argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>theCell</name></expr></argument>,
                                          <argument><expr><name>dataOffset</name></expr></argument>,
                                          <argument><expr><name>dataLen</name></expr></argument>,
                                          <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>args</name> != <name>NULL</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>rv</name> = <call><name>PyEval_CallObject</name><argument_list>(<argument><expr><name>listDefFunc</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>rv</name> == <name>NULL</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PySys_WriteStderr</name><argument_list>(<argument><expr>"error in list definition callback:\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>


<function><type><name>void</name></type> <name>init_List</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>



	<expr_stmt><expr><name>myListDefFunctionUPP</name> = <call><name>NewListDefUPP</name><argument_list>(<argument><expr>(<name>ListDefProcPtr</name>)<name>myListDefFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_NEW</name><argument_list>(<argument><expr><name>ListHandle</name></expr></argument>, <argument><expr><name>ListObj_New</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_CONVERT</name><argument_list>(<argument><expr><name>ListHandle</name></expr></argument>, <argument><expr><name>ListObj_Convert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>


	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_List"</expr></argument>, <argument><expr><name>List_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
	<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>List_Error</name> = <call><name>PyMac_GetOSErrException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>List_Error</name> == <name>NULL</name> ||
	    <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Error"</expr></argument>, <argument><expr><name>List_Error</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><name><name>List_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>List_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>List_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"List"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>List_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Backward-compatible name */</comment>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>List_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"ListType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>List_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>
}</block></function>

<comment type="block">/* ======================== End module _List ======================== */</comment>

</unit>
