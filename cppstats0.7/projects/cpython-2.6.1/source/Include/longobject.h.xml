<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/longobject.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_LONGOBJECT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_LONGOBJECT_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* Long (arbitrary precision) integer object interface */</comment>

<typedef>typedef <type>struct <name>_longobject</name></type> <name>PyLongObject</name>;</typedef> <comment type="block">/* Revealed in longintrepr.h */</comment>

<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyLong_Type</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyLong_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> \
		<cpp:value>PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LONG_SUBCLASS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyLong_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;PyLong_Type)</cpp:value></cpp:define>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_FromLong</name><argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PyLong_FromUnsignedLong</name><argument_list>(<argument>unsigned long</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_FromDouble</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_FromSize_t</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_FromSsize_t</name><argument_list>(<argument><expr><name>Py_ssize_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>long</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_AsLong</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>unsigned long</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_AsUnsignedLong</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>unsigned long</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_AsUnsignedLongMask</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_AsSsize_t</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* For use by intobject.c only */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyLong_AsSsize_t</name></cpp:macro> <cpp:value>PyLong_AsSsize_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyLong_FromSize_t</name></cpp:macro> <cpp:value>PyLong_FromSize_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyLong_FromSsize_t</name></cpp:macro> <cpp:value>PyLong_FromSsize_t</cpp:value></cpp:define>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><name><name>_PyLong_DigitValue</name><index>[<expr>256</expr>]</index></name></expr>;</expr_stmt>

<comment type="block">/* _PyLong_AsScaledDouble returns a double x and an exponent e such that
   the true value is approximately equal to x * 2**(SHIFT*e).  e is &gt;= 0.
   x is 0.0 if and only if the input is 0 (in which case, e and x are both
   zeroes).  Overflow is impossible.  Note that the exponent returned must
   be multiplied by SHIFT!  There may not be enough room in an int to store
   e*SHIFT directly. */</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>double</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyLong_AsScaledDouble</name><argument_list>(<argument><expr><name>PyObject</name> *<name>vv</name></expr></argument>, <argument><expr><name>int</name> *<name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>double</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_AsDouble</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_FromVoidPtr</name><argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_AsVoidPtr</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LONG_LONG</name></cpp:ifdef>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_FromLongLong</name><argument_list>(<argument><expr><name>PY_LONG_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PyLong_FromUnsignedLongLong</name><argument_list>(<argument>unsigned PY_LONG_LONG</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PY_LONG_LONG</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_AsLongLong</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>unsigned PY_LONG_LONG</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_AsUnsignedLongLong</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>unsigned PY_LONG_LONG</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_AsUnsignedLongLongMask</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_LONG_LONG */</comment>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_FromString</name><argument_list>(<argument><expr><name>char</name> *</expr></argument>, <argument><expr><name>char</name> **</expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_USING_UNICODE</name></cpp:ifdef>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_FromUnicode</name><argument_list>(<argument><expr><name>Py_UNICODE</name>*</expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* _PyLong_Sign.  Return 0 if v is 0, -1 if v &lt; 0, +1 if v &gt; 0.
   v must not be NULL, and must be a normalized long.
   There are no error cases.
*/</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyLong_Sign</name><argument_list>(<argument><expr><name>PyObject</name> *<name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block">/* _PyLong_NumBits.  Return the number of bits needed to represent the
   absolute value of a long.  For example, this returns 1 for 1 and -1, 2
   for 2 and -2, and 2 for 3 and -3.  It returns 0 for 0.
   v must not be NULL, and must be a normalized long.
   (size_t)-1 is returned and OverflowError set if the true result doesn't
   fit in a size_t.
*/</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>size_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyLong_NumBits</name><argument_list>(<argument><expr><name>PyObject</name> *<name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* _PyLong_FromByteArray:  View the n unsigned bytes as a binary integer in
   base 256, and return a Python long with the same numeric value.
   If n is 0, the integer is 0.  Else:
   If little_endian is 1/true, bytes[n-1] is the MSB and bytes[0] the LSB;
   else (little_endian is 0/false) bytes[0] is the MSB and bytes[n-1] the
   LSB.
   If is_signed is 0/false, view the bytes as a non-negative integer.
   If is_signed is 1/true, view the bytes as a 2's-complement integer,
   non-negative if bit 0x80 of the MSB is clear, negative if set.
   Error returns:
   + Return NULL with the appropriate exception set if there's not
     enough memory to create the Python long.
*/</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>_PyLong_FromByteArray</name><argument_list>(
	<argument>const unsigned char* bytes</argument>, <argument>size_t n</argument>,
	<argument>int little_endian</argument>, <argument>int is_signed</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/* _PyLong_AsByteArray: Convert the least-significant 8*n bits of long
   v to a base-256 integer, stored in array bytes.  Normally return 0,
   return -1 on error.
   If little_endian is 1/true, store the MSB at bytes[n-1] and the LSB at
   bytes[0]; else (little_endian is 0/false) store the MSB at bytes[0] and
   the LSB at bytes[n-1].
   If is_signed is 0/false, it's an error if v &lt; 0; else (v &gt;= 0) n bytes
   are filled and there's nothing special about bit 0x80 of the MSB.
   If is_signed is 1/true, bytes is filled with the 2's-complement
   representation of v's value.  Bit 0x80 of the MSB is the sign bit.
   Error returns (-1):
   + is_signed is 0 and v &lt; 0.  TypeError is set in this case, and bytes
     isn't altered.
   + n isn't big enough to hold the full mathematical value of v.  For
     example, if is_signed is 0 and there are more digits in the v than
     fit in n; or if is_signed is 1, v &lt; 0, and n is just 1 bit shy of
     being large enough to hold a sign bit.  OverflowError is set in this
     case, but bytes holds the least-signficant n bytes of the true value.
*/</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>_PyLong_AsByteArray</name><argument_list>(<argument>PyLongObject* v</argument>,
	<argument>unsigned char* bytes</argument>, <argument>size_t n</argument>,
	<argument>int little_endian</argument>, <argument>int is_signed</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/* _PyLong_Format: Convert the long to a string object with given base,
   appending a base prefix of 0[box] if base is 2, 8 or 16.
   Add a trailing "L" if addL is non-zero.
   If newstyle is zero, then use the pre-2.6 behavior of octal having
   a leading "0", instead of the prefix "0o" */</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>_PyLong_Format</name><argument_list>(<argument>PyObject *aa</argument>, <argument>int base</argument>, <argument>int addL</argument>, <argument>int newstyle</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/* Format the object based on the format_spec, as defined in PEP 3101
   (Advanced String Formatting). */</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>_PyLong_FormatAdvanced</name><argument_list>(<argument>PyObject *obj</argument>,
					      <argument>char *format_spec</argument>,
					      <argument>Py_ssize_t format_spec_len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_LONGOBJECT_H */</comment>
</unit>
