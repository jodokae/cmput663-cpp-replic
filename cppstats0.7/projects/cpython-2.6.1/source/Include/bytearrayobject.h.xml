<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/bytearrayobject.h"><comment type="block">/* ByteArray object interface */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_BYTEARRAYOBJECT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_BYTEARRAYOBJECT_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Type PyByteArrayObject represents a mutable array of bytes.
 * The Python API is that of a sequence;
 * the bytes are mapped to ints in [0, 256).
 * Bytes are not characters; they may be used to encode characters.
 * The only way to go between bytes and str/unicode is via encoding
 * and decoding.
 * For the convenience of C programmers, the bytes type is considered
 * to contain a char pointer, not an unsigned char pointer.
 */</comment>

<comment type="block">/* Object layout */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>PyObject_VAR_HEAD</name>
    <comment type="block">/* XXX(nnorwitz): should ob_exports be Py_ssize_t? */</comment>
    <name>int</name></type> <name>ob_exports</name></decl>;</decl_stmt> <comment type="block">/* how many buffer exports */</comment>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>ob_alloc</name></decl>;</decl_stmt> <comment type="block">/* How many bytes allocated */</comment>
    <decl_stmt><decl><type><name>char</name> *</type><name>ob_bytes</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyByteArrayObject</name>;</typedef>

<comment type="block">/* Type object */</comment>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyByteArray_Type</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyByteArrayIter_Type</name></expr>;</expr_stmt>

<comment type="block">/* Type check macros */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyByteArray_Check</name><parameter_list>(<param><type><name>self</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_TypeCheck(self, &amp;PyByteArray_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyByteArray_CheckExact</name><parameter_list>(<param><type><name>self</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(self) == &amp;PyByteArray_Type)</cpp:value></cpp:define>

<comment type="block">/* Direct API functions */</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyByteArray_FromObject</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyByteArray_Concat</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyByteArray_FromStringAndSize</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyByteArray_Size</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyByteArray_AsString</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyByteArray_Resize</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Macros, trading safety for speed */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyByteArray_AS_STRING</name><parameter_list>(<param><type><name>self</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(assert(PyByteArray_Check(self)),((PyByteArrayObject *)(self))-&gt;ob_bytes)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyByteArray_GET_SIZE</name><parameter_list>(<param><type><name>self</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>(assert(PyByteArray_Check(self)),Py_SIZE(self))</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_BYTEARRAYOBJECT_H */</comment>
</unit>
