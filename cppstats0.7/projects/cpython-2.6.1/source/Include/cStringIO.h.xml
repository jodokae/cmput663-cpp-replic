<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/cStringIO.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_CSTRINGIO_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_CSTRINGIO_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*

  This header provides access to cStringIO objects from C.
  Functions are provided for calling cStringIO objects and
  macros are provided for testing whether you have cStringIO 
  objects.

  Before calling any of the functions or macros, you must initialize
  the routines with:

    PycString_IMPORT

  This would typically be done in your init function.

*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PycString_IMPORT</name></cpp:macro> \
  <cpp:value>PycStringIO = (struct PycStringIO_CAPI*)PyCObject_Import("cStringIO", \
                                                           "cStringIO_CAPI")</cpp:value></cpp:define>

<comment type="block">/* Basic functions to manipulate cStringIO objects from C */</comment>

<struct><specifier>static</specifier> struct <name>PycStringIO_CAPI</name> <block>{
  
 <comment type="block">/* Read a string from an input object.  If the last argument
    is -1, the remainder will be read.
    */</comment>
  <function_decl><type><name>int</name></type>(*<name>cread</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>char</name> **</type></decl></param>, <param><decl><type><name>Py_ssize_t</name></type></decl></param>)</parameter_list>;</function_decl>

 <comment type="block">/* Read a line from an input object.  Returns the length of the read
    line as an int and a pointer inside the object buffer as char** (so
    the caller doesn't have to provide its own buffer as destination).
    */</comment>
  <function_decl><type><name>int</name></type>(*<name>creadline</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>char</name> **</type></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/* Write a string to an output object*/</comment>
  <function_decl><type><name>int</name></type>(*<name>cwrite</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>, <param><decl><type><name>Py_ssize_t</name></type></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/* Get the output object as a Python string (returns new reference). */</comment>
  <function_decl><type><name>PyObject</name> *</type>(*<name>cgetvalue</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/* Create a new output object */</comment>
  <function_decl><type><name>PyObject</name> *</type>(*<name>NewOutput</name>)<parameter_list>(<param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/* Create an input object from a Python string
     (copies the Python string reference).
     */</comment>
  <function_decl><type><name>PyObject</name> *</type>(*<name>NewInput</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/* The Python types for cStringIO input and output objects.
     Note that you can do input on an output object.
     */</comment>
  <decl_stmt><decl><type><name>PyTypeObject</name> *</type><name>InputType</name></decl>, *<decl><type ref="prev"/><name>OutputType</name></decl>;</decl_stmt>

}</block> <decl>*<name>PycStringIO</name></decl>;</struct>

<comment type="block">/* These can be used to test if you have one */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PycStringIO_InputCheck</name><parameter_list>(<param><type><name>O</name></type></param>)</parameter_list></cpp:macro> \
  <cpp:value>(Py_TYPE(O)==PycStringIO-&gt;InputType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PycStringIO_OutputCheck</name><parameter_list>(<param><type><name>O</name></type></param>)</parameter_list></cpp:macro> \
  <cpp:value>(Py_TYPE(O)==PycStringIO-&gt;OutputType)</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_CSTRINGIO_H */</comment>
</unit>
