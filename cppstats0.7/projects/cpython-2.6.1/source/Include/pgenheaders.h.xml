<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/pgenheaders.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_PGENHEADERS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_PGENHEADERS_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* Include files and extern declarations used by most of the parser. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>PySys_WriteStdout</name><argument_list>(<argument>const char *format</argument>, <argument>...</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>Py_GCC_ATTRIBUTE</name><argument_list>(<argument><expr>(<call><name>format</name><argument_list>(<argument><expr><name>printf</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>PySys_WriteStderr</name><argument_list>(<argument>const char *format</argument>, <argument>...</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>Py_GCC_ATTRIBUTE</name><argument_list>(<argument><expr>(<call><name>format</name><argument_list>(<argument><expr><name>printf</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>addarc</name></cpp:macro> <cpp:value>_Py_addarc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>addbit</name></cpp:macro> <cpp:value>_Py_addbit</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>adddfa</name></cpp:macro> <cpp:value>_Py_adddfa</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>addfirstsets</name></cpp:macro> <cpp:value>_Py_addfirstsets</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>addlabel</name></cpp:macro> <cpp:value>_Py_addlabel</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>addstate</name></cpp:macro> <cpp:value>_Py_addstate</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>delbitset</name></cpp:macro> <cpp:value>_Py_delbitset</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dumptree</name></cpp:macro> <cpp:value>_Py_dumptree</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>findlabel</name></cpp:macro> <cpp:value>_Py_findlabel</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mergebitset</name></cpp:macro> <cpp:value>_Py_mergebitset</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>meta_grammar</name></cpp:macro> <cpp:value>_Py_meta_grammar</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>newbitset</name></cpp:macro> <cpp:value>_Py_newbitset</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>newgrammar</name></cpp:macro> <cpp:value>_Py_newgrammar</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pgen</name></cpp:macro> <cpp:value>_Py_pgen</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>printgrammar</name></cpp:macro> <cpp:value>_Py_printgrammar</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>printnonterminals</name></cpp:macro> <cpp:value>_Py_printnonterminals</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>printtree</name></cpp:macro> <cpp:value>_Py_printtree</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>samebitset</name></cpp:macro> <cpp:value>_Py_samebitset</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>showtree</name></cpp:macro> <cpp:value>_Py_showtree</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tok_dump</name></cpp:macro> <cpp:value>_Py_tok_dump</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>translatelabels</name></cpp:macro> <cpp:value>_Py_translatelabels</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_PGENHEADERS_H */</comment>
</unit>
