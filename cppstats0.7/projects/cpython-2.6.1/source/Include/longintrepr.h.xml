<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/longintrepr.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_LONGINTREPR_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_LONGINTREPR_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* This is published for the benefit of "friend" marshal.c only. */</comment>

<comment type="block">/* Parameters of the long integer representation.
   These shouldn't have to be changed as C should guarantee that a short
   contains at least 16 bits, but it's made changeable anyway.
   Note: 'digit' should be able to hold 2*MASK+1, and 'twodigits'
   should be able to hold the intermediate results in 'mul'
   (at most (BASE-1)*(2*BASE+1) == MASK*(2*MASK+3)).
   Also, x_sub assumes that 'digit' is an unsigned type, and overflow
   is handled by taking the result mod 2**N for some N &gt; SHIFT.
   And, at some places it is assumed that MASK fits in an int, as well.
   long_pow() requires that SHIFT be divisible by 5. */</comment>

<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>digit</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>wdigit</name>;</typedef> <comment type="block">/* digit widened to parameter size */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE_TWODIGITS_TYPE</name></cpp:macro> <cpp:value>long</cpp:value></cpp:define>
<typedef>typedef <type><name>unsigned</name> <name>BASE_TWODIGITS_TYPE</name></type> <name>twodigits</name>;</typedef>
<typedef>typedef <type><name>BASE_TWODIGITS_TYPE</name></type> <name>stwodigits</name>;</typedef> <comment type="block">/* signed variant of twodigits */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyLong_SHIFT</name></cpp:macro>    <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyLong_BASE</name></cpp:macro>     <cpp:value>((digit)1 &lt;&lt; PyLong_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyLong_MASK</name></cpp:macro>     <cpp:value>((int)(PyLong_BASE - 1))</cpp:value></cpp:define>

<comment type="block">/* b/w compatibility with Python 2.5 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT</name></cpp:macro>	<cpp:value>PyLong_SHIFT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE</name></cpp:macro>	<cpp:value>PyLong_BASE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK</name></cpp:macro>	<cpp:value>PyLong_MASK</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PyLong_SHIFT</name> % 5 != 0</expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> "longobject.c requires that PyLong_SHIFT be divisible by 5"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Long integer representation.
   The absolute value of a number is equal to
   	SUM(for i=0 through abs(ob_size)-1) ob_digit[i] * 2**(SHIFT*i)
   Negative numbers are represented with ob_size &lt; 0;
   zero is represented by ob_size == 0.
   In a normalized number, ob_digit[abs(ob_size)-1] (the most significant
   digit) is never zero.  Also, in all cases, for all valid i,
   	0 &lt;= ob_digit[i] &lt;= MASK.
   The allocation function takes care of allocating extra memory
   so that ob_digit[0] ... ob_digit[abs(ob_size)-1] are actually available.

   CAUTION:  Generic code manipulating subtypes of PyVarObject has to
   aware that longs abuse  ob_size's sign bit.
*/</comment>

<struct>struct <name>_longobject</name> <block>{
	<decl_stmt><decl><type><name>PyObject_VAR_HEAD</name>
	<name>digit</name></type> <name><name>ob_digit</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyLongObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyLong_New</name><argument_list>(<argument><expr><name>Py_ssize_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Return a copy of src. */</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyLong_Copy</name><argument_list>(<argument><expr><name>PyLongObject</name> *<name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_LONGINTREPR_H */</comment>
</unit>
