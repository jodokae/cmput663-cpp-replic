<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/datetime.h"><comment type="block">/*  datetime.h
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DATETIME_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATETIME_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Fields are packed into successive bytes, each viewed as unsigned and
 * big-endian, unless otherwise noted:
 *
 * byte offset
 *  0 		year     2 bytes, 1-9999
 *  2		month    1 byte, 1-12
 *  3 		day      1 byte, 1-31
 *  4		hour     1 byte, 0-23
 *  5 		minute   1 byte, 0-59
 *  6 		second   1 byte, 0-59
 *  7 		usecond  3 bytes, 0-999999
 * 10
 */</comment>

<comment type="block">/* # of bytes for year, month, and day. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyDateTime_DATE_DATASIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<comment type="block">/* # of bytes for hour, minute, second, and usecond. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyDateTime_TIME_DATASIZE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<comment type="block">/* # of bytes for year, month, day, hour, minute, second, and usecond. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyDateTime_DATETIME_DATASIZE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>long</name></type> <name>hashcode</name></decl>;</decl_stmt>		<comment type="block">/* -1 when unknown */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>days</name></decl>;</decl_stmt>		<comment type="block">/* -MAX_DELTA_DAYS &lt;= days &lt;= MAX_DELTA_DAYS */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>seconds</name></decl>;</decl_stmt>		<comment type="block">/* 0 &lt;= seconds &lt; 24*3600 is invariant */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>microseconds</name></decl>;</decl_stmt>	<comment type="block">/* 0 &lt;= microseconds &lt; 1000000 is invariant */</comment>
}</block></struct></type> <name>PyDateTime_Delta</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
	<expr_stmt><expr><name>PyObject_HEAD</name></expr></expr_stmt>		<comment type="block">/* a pure abstract base clase */</comment>
}</block></struct></type> <name>PyDateTime_TZInfo</name>;</typedef>


<comment type="block">/* The datetime and time types have hashcodes, and an optional tzinfo member,
 * present if and only if hastzinfo is true.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyTZINFO_HEAD</name></cpp:macro>		\
	<cpp:value>PyObject_HEAD		\
	long hashcode;		\
	char hastzinfo;</cpp:value></cpp:define>		<comment type="block">/* boolean flag */</comment>

<comment type="block">/* No _PyDateTime_BaseTZInfo is allocated; it's just to have something
 * convenient to cast to, when getting at the hastzinfo member of objects
 * starting with _PyTZINFO_HEAD.
 */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<expr_stmt><expr><name>_PyTZINFO_HEAD</name></expr></expr_stmt>
}</block></struct></type> <name>_PyDateTime_BaseTZInfo</name>;</typedef>

<comment type="block">/* All time objects are of PyDateTime_TimeType, but that can be allocated
 * in two ways, with or without a tzinfo member.  Without is the same as
 * tzinfo == None, but consumes less memory.  _PyDateTime_BaseTime is an
 * internal struct used to allocate the right amount of space for the
 * "without" case.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyDateTime_TIMEHEAD</name></cpp:macro>	\
	<cpp:value>_PyTZINFO_HEAD		\
	unsigned char data[_PyDateTime_TIME_DATASIZE];</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
	<expr_stmt><expr><name>_PyDateTime_TIMEHEAD</name></expr></expr_stmt>
}</block></struct></type> <name>_PyDateTime_BaseTime</name>;</typedef>		<comment type="block">/* hastzinfo false */</comment>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>_PyDateTime_TIMEHEAD</name>
	<name>PyObject</name> *</type><name>tzinfo</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyDateTime_Time</name>;</typedef>		<comment type="block">/* hastzinfo true */</comment>


<comment type="block">/* All datetime objects are of PyDateTime_DateTimeType, but that can be
 * allocated in two ways too, just like for time objects above.  In addition,
 * the plain date type is a base class for datetime, so it must also have
 * a hastzinfo member (although it's unused there).
 */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>_PyTZINFO_HEAD</name>
	<name>unsigned</name> <name>char</name></type> <name><name>data</name><index>[<expr><name>_PyDateTime_DATE_DATASIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>PyDateTime_Date</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyDateTime_DATETIMEHEAD</name></cpp:macro>	\
	<cpp:value>_PyTZINFO_HEAD			\
	unsigned char data[_PyDateTime_DATETIME_DATASIZE];</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
	<expr_stmt><expr><name>_PyDateTime_DATETIMEHEAD</name></expr></expr_stmt>
}</block></struct></type> <name>_PyDateTime_BaseDateTime</name>;</typedef>	<comment type="block">/* hastzinfo false */</comment>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>_PyDateTime_DATETIMEHEAD</name>
	<name>PyObject</name> *</type><name>tzinfo</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyDateTime_DateTime</name>;</typedef>		<comment type="block">/* hastzinfo true */</comment>


<comment type="block">/* Apply for date and datetime instances. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDateTime_GET_YEAR</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro>     <cpp:value>((((PyDateTime_Date*)o)-&gt;data[0] &lt;&lt; 8) | \
                                     ((PyDateTime_Date*)o)-&gt;data[1])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDateTime_GET_MONTH</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>(((PyDateTime_Date*)o)-&gt;data[2])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDateTime_GET_DAY</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>(((PyDateTime_Date*)o)-&gt;data[3])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDateTime_DATE_GET_HOUR</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro>        <cpp:value>(((PyDateTime_DateTime*)o)-&gt;data[4])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDateTime_DATE_GET_MINUTE</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>(((PyDateTime_DateTime*)o)-&gt;data[5])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDateTime_DATE_GET_SECOND</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>(((PyDateTime_DateTime*)o)-&gt;data[6])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDateTime_DATE_GET_MICROSECOND</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro> 		\
	<cpp:value>((((PyDateTime_DateTime*)o)-&gt;data[7] &lt;&lt; 16) |	\
         (((PyDateTime_DateTime*)o)-&gt;data[8] &lt;&lt; 8)  |	\
          ((PyDateTime_DateTime*)o)-&gt;data[9])</cpp:value></cpp:define>

<comment type="block">/* Apply for time instances. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDateTime_TIME_GET_HOUR</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro>        <cpp:value>(((PyDateTime_Time*)o)-&gt;data[0])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDateTime_TIME_GET_MINUTE</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>(((PyDateTime_Time*)o)-&gt;data[1])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDateTime_TIME_GET_SECOND</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>(((PyDateTime_Time*)o)-&gt;data[2])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDateTime_TIME_GET_MICROSECOND</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro> 		\
	<cpp:value>((((PyDateTime_Time*)o)-&gt;data[3] &lt;&lt; 16) |	\
         (((PyDateTime_Time*)o)-&gt;data[4] &lt;&lt; 8)  |	\
          ((PyDateTime_Time*)o)-&gt;data[5])</cpp:value></cpp:define>


<comment type="block">/* Define structure for C API. */</comment>
<typedef>typedef <type><struct>struct <block>{
    <comment type="block">/* type objects */</comment>
    <decl_stmt><decl><type><name>PyTypeObject</name> *</type><name>DateType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyTypeObject</name> *</type><name>DateTimeType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyTypeObject</name> *</type><name>TimeType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyTypeObject</name> *</type><name>DeltaType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyTypeObject</name> *</type><name>TZInfoType</name></decl>;</decl_stmt>

    <comment type="block">/* constructors */</comment>
    <function_decl><type><name>PyObject</name> *</type>(*<name>Date_FromDate</name>)<parameter_list>(<param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>PyTypeObject</name>*</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>PyObject</name> *</type>(*<name>DateTime_FromDateAndTime</name>)<parameter_list>(<param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>,
            <param><decl><type><name>PyObject</name>*</type></decl></param>, <param><decl><type><name>PyTypeObject</name>*</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>PyObject</name> *</type>(*<name>Time_FromTime</name>)<parameter_list>(<param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>PyObject</name>*</type></decl></param>, <param><decl><type><name>PyTypeObject</name>*</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>PyObject</name> *</type>(*<name>Delta_FromDelta</name>)<parameter_list>(<param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>PyTypeObject</name>*</type></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/* constructors for the DB API */</comment>
    <function_decl><type><name>PyObject</name> *</type>(*<name>DateTime_FromTimestamp</name>)<parameter_list>(<param><decl><type><name>PyObject</name>*</type></decl></param>, <param><decl><type><name>PyObject</name>*</type></decl></param>, <param><decl><type><name>PyObject</name>*</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>PyObject</name> *</type>(*<name>Date_FromTimestamp</name>)<parameter_list>(<param><decl><type><name>PyObject</name>*</type></decl></param>, <param><decl><type><name>PyObject</name>*</type></decl></param>)</parameter_list>;</function_decl>

}</block></struct></type> <name>PyDateTime_CAPI</name>;</typedef>


<comment type="block">/* "magic" constant used to partially protect against developer mistakes. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATETIME_API_MAGIC</name></cpp:macro> <cpp:value>0x414548d5</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_BUILD_CORE</name></cpp:ifdef>

<comment type="block">/* Macros for type checking when building the Python core. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDate_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_TypeCheck(op, &amp;PyDateTime_DateType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDate_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;PyDateTime_DateType)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDateTime_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_TypeCheck(op, &amp;PyDateTime_DateTimeType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDateTime_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;PyDateTime_DateTimeType)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTime_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_TypeCheck(op, &amp;PyDateTime_TimeType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTime_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;PyDateTime_TimeType)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDelta_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_TypeCheck(op, &amp;PyDateTime_DeltaType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDelta_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;PyDateTime_DeltaType)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTZInfo_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_TypeCheck(op, &amp;PyDateTime_TZInfoType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTZInfo_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;PyDateTime_TZInfoType)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<comment type="block">/* Define global variable for the C API and a macro for setting it. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyDateTime_CAPI</name> *</type><name>PyDateTimeAPI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDateTime_IMPORT</name></cpp:macro> \
        <cpp:value>PyDateTimeAPI = (PyDateTime_CAPI*) PyCObject_Import("datetime", \
                                                            "datetime_CAPI")</cpp:value></cpp:define>

<comment type="block">/* This macro would be used if PyCObject_ImportEx() was created.
#define PyDateTime_IMPORT \
        PyDateTimeAPI = (PyDateTime_CAPI*) PyCObject_ImportEx("datetime", \
                                                            "datetime_CAPI", \
                                                            DATETIME_API_MAGIC)
*/</comment>

<comment type="block">/* Macros for type checking when not building the Python core. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDate_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_TypeCheck(op, PyDateTimeAPI-&gt;DateType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDate_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == PyDateTimeAPI-&gt;DateType)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDateTime_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_TypeCheck(op, PyDateTimeAPI-&gt;DateTimeType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDateTime_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == PyDateTimeAPI-&gt;DateTimeType)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTime_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_TypeCheck(op, PyDateTimeAPI-&gt;TimeType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTime_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == PyDateTimeAPI-&gt;TimeType)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDelta_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_TypeCheck(op, PyDateTimeAPI-&gt;DeltaType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDelta_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == PyDateTimeAPI-&gt;DeltaType)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTZInfo_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_TypeCheck(op, PyDateTimeAPI-&gt;TZInfoType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTZInfo_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == PyDateTimeAPI-&gt;TZInfoType)</cpp:value></cpp:define>

<comment type="block">/* Macros for accessing constructors in a simplified fashion. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDate_FromDate</name><parameter_list>(<param><type><name>year</name></type></param>, <param><type><name>month</name></type></param>, <param><type><name>day</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value>PyDateTimeAPI-&gt;Date_FromDate(year, month, day, PyDateTimeAPI-&gt;DateType)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDateTime_FromDateAndTime</name><parameter_list>(<param><type><name>year</name></type></param>, <param><type><name>month</name></type></param>, <param><type><name>day</name></type></param>, <param><type><name>hour</name></type></param>, <param><type><name>min</name></type></param>, <param><type><name>sec</name></type></param>, <param><type><name>usec</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value>PyDateTimeAPI-&gt;DateTime_FromDateAndTime(year, month, day, hour, \
		min, sec, usec, Py_None, PyDateTimeAPI-&gt;DateTimeType)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTime_FromTime</name><parameter_list>(<param><type><name>hour</name></type></param>, <param><type><name>minute</name></type></param>, <param><type><name>second</name></type></param>, <param><type><name>usecond</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value>PyDateTimeAPI-&gt;Time_FromTime(hour, minute, second, usecond, \
		Py_None, PyDateTimeAPI-&gt;TimeType)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDelta_FromDSU</name><parameter_list>(<param><type><name>days</name></type></param>, <param><type><name>seconds</name></type></param>, <param><type><name>useconds</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value>PyDateTimeAPI-&gt;Delta_FromDelta(days, seconds, useconds, 1, \
		PyDateTimeAPI-&gt;DeltaType)</cpp:value></cpp:define>

<comment type="block">/* Macros supporting the DB API. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDateTime_FromTimestamp</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value>PyDateTimeAPI-&gt;DateTime_FromTimestamp( \
		(PyObject*) (PyDateTimeAPI-&gt;DateTimeType), args, NULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDate_FromTimestamp</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value>PyDateTimeAPI-&gt;Date_FromTimestamp( \
		(PyObject*) (PyDateTimeAPI-&gt;DateType), args)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	<comment type="block">/* Py_BUILD_CORE */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
