<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/errcode.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_ERRCODE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_ERRCODE_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* Error codes passed around between file input, tokenizer, parser and
   interpreter.  This is necessary so we can turn them into Python
   exceptions at a higher level.  Note that some errors have a
   slightly different meaning when passed from the tokenizer to the
   parser than when passed from the parser to the interpreter; e.g.
   the parser only returns E_EOF when it hits EOF immediately, and it
   never returns E_OK. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_OK</name></cpp:macro>		<cpp:value>10</cpp:value></cpp:define>	<comment type="block">/* No error */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_EOF</name></cpp:macro>		<cpp:value>11</cpp:value></cpp:define>	<comment type="block">/* End Of File */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_INTR</name></cpp:macro>		<cpp:value>12</cpp:value></cpp:define>	<comment type="block">/* Interrupted */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_TOKEN</name></cpp:macro>		<cpp:value>13</cpp:value></cpp:define>	<comment type="block">/* Bad token */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_SYNTAX</name></cpp:macro>	<cpp:value>14</cpp:value></cpp:define>	<comment type="block">/* Syntax error */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_NOMEM</name></cpp:macro>		<cpp:value>15</cpp:value></cpp:define>	<comment type="block">/* Ran out of memory */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_DONE</name></cpp:macro>		<cpp:value>16</cpp:value></cpp:define>	<comment type="block">/* Parsing complete */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_ERROR</name></cpp:macro>		<cpp:value>17</cpp:value></cpp:define>	<comment type="block">/* Execution error */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_TABSPACE</name></cpp:macro>	<cpp:value>18</cpp:value></cpp:define>	<comment type="block">/* Inconsistent mixing of tabs and spaces */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_OVERFLOW</name></cpp:macro>      <cpp:value>19</cpp:value></cpp:define>	<comment type="block">/* Node had too many children */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_TOODEEP</name></cpp:macro>	<cpp:value>20</cpp:value></cpp:define>	<comment type="block">/* Too many indentation levels */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_DEDENT</name></cpp:macro>	<cpp:value>21</cpp:value></cpp:define>	<comment type="block">/* No matching outer block for dedent */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_DECODE</name></cpp:macro>	<cpp:value>22</cpp:value></cpp:define>	<comment type="block">/* Error in decoding into Unicode */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_EOFS</name></cpp:macro>		<cpp:value>23</cpp:value></cpp:define>	<comment type="block">/* EOF in triple-quoted string */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_EOLS</name></cpp:macro>		<cpp:value>24</cpp:value></cpp:define>	<comment type="block">/* EOL in single-quoted string */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_LINECONT</name></cpp:macro>	<cpp:value>25</cpp:value></cpp:define>	<comment type="block">/* Unexpected characters after a line continuation */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_ERRCODE_H */</comment>
</unit>
