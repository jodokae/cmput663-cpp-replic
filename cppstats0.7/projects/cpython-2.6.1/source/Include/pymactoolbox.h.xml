<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/pymactoolbox.h"><comment type="block">/*
** pymactoolbox.h - globals defined in mactoolboxglue.c
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_PYMACTOOLBOX_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_PYMACTOOLBOX_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
	<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Carbon/Carbon.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QuickTime/QuickTime.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

<comment type="block">/*
** Helper routines for error codes and such.
*/</comment>
<function_decl><type><name>char</name> *</type><name>PyMac_StrError</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>			<comment type="block">/* strerror with mac errors */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>PyMac_OSErrException</name></decl>;</decl_stmt>		<comment type="block">/* Exception for OSErr */</comment>
<function_decl><type><name>PyObject</name> *</type><name>PyMac_GetOSErrException</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>	<comment type="block">/* Initialize &amp; return it */</comment>
<function_decl><type><name>PyObject</name> *</type><name>PyErr_Mac</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>		<comment type="block">/* Exception with a mac error */</comment>
<function_decl><type><name>PyObject</name> *</type><name>PyMac_Error</name><parameter_list>(<param><decl><type><name>OSErr</name></type></decl></param>)</parameter_list>;</function_decl>			<comment type="block">/* Uses PyMac_GetOSErrException */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef> 
<function_decl><type><specifier>extern</specifier> <name>OSErr</name></type> <name>PyMac_GetFullPathname</name><parameter_list>(<param><decl><type><name>FSSpec</name> *</type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl> <comment type="block">/* convert
							      fsspec-&gt;path */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __LP64__ */</comment>

<comment type="block">/*
** These conversion routines are defined in mactoolboxglue.c itself.
*/</comment>
<function_decl><type><name>int</name></type> <name>PyMac_GetOSType</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>OSType</name> *</type></decl></param>)</parameter_list>;</function_decl>	<comment type="block">/* argument parser for OSType */</comment>
<function_decl><type><name>PyObject</name> *</type><name>PyMac_BuildOSType</name><parameter_list>(<param><decl><type><name>OSType</name></type></decl></param>)</parameter_list>;</function_decl>		<comment type="block">/* Convert OSType to PyObject */</comment>

<function_decl><type><name>PyObject</name> *</type><name>PyMac_BuildNumVersion</name><parameter_list>(<param><decl><type><name>NumVersion</name></type></decl></param>)</parameter_list>;</function_decl><comment type="block">/* Convert NumVersion to PyObject */</comment>

<function_decl><type><name>int</name></type> <name>PyMac_GetStr255</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Str255</name></type></decl></param>)</parameter_list>;</function_decl>	<comment type="block">/* argument parser for Str255 */</comment>
<function_decl><type><name>PyObject</name> *</type><name>PyMac_BuildStr255</name><parameter_list>(<param><decl><type><name>Str255</name></type></decl></param>)</parameter_list>;</function_decl>		<comment type="block">/* Convert Str255 to PyObject */</comment>
<function_decl><type><name>PyObject</name> *</type><name>PyMac_BuildOptStr255</name><parameter_list>(<param><decl><type><name>Str255</name></type></decl></param>)</parameter_list>;</function_decl>		<comment type="block">/* Convert Str255 to PyObject,
						   NULL to None */</comment>

<function_decl><type><name>int</name></type> <name>PyMac_GetRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Rect</name> *</type></decl></param>)</parameter_list>;</function_decl>		<comment type="block">/* argument parser for Rect */</comment>
<function_decl><type><name>PyObject</name> *</type><name>PyMac_BuildRect</name><parameter_list>(<param><decl><type><name>Rect</name> *</type></decl></param>)</parameter_list>;</function_decl>		<comment type="block">/* Convert Rect to PyObject */</comment>

<function_decl><type><name>int</name></type> <name>PyMac_GetPoint</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Point</name> *</type></decl></param>)</parameter_list>;</function_decl>	<comment type="block">/* argument parser for Point */</comment>
<function_decl><type><name>PyObject</name> *</type><name>PyMac_BuildPoint</name><parameter_list>(<param><decl><type><name>Point</name></type></decl></param>)</parameter_list>;</function_decl>		<comment type="block">/* Convert Point to PyObject */</comment>

<function_decl><type><name>int</name></type> <name>PyMac_GetEventRecord</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>EventRecord</name> *</type></decl></param>)</parameter_list>;</function_decl> <comment type="block">/* argument parser for
							EventRecord */</comment>
<function_decl><type><name>PyObject</name> *</type><name>PyMac_BuildEventRecord</name><parameter_list>(<param><decl><type><name>EventRecord</name> *</type></decl></param>)</parameter_list>;</function_decl> <comment type="block">/* Convert EventRecord to
						    PyObject */</comment>

<function_decl><type><name>int</name></type> <name>PyMac_GetFixed</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Fixed</name> *</type></decl></param>)</parameter_list>;</function_decl>	<comment type="block">/* argument parser for Fixed */</comment>
<function_decl><type><name>PyObject</name> *</type><name>PyMac_BuildFixed</name><parameter_list>(<param><decl><type><name>Fixed</name></type></decl></param>)</parameter_list>;</function_decl>		<comment type="block">/* Convert Fixed to PyObject */</comment>
<function_decl><type><name>int</name></type> <name>PyMac_Getwide</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>wide</name> *</type></decl></param>)</parameter_list>;</function_decl>		<comment type="block">/* argument parser for wide */</comment>
<function_decl><type><name>PyObject</name> *</type><name>PyMac_Buildwide</name><parameter_list>(<param><decl><type><name>wide</name> *</type></decl></param>)</parameter_list>;</function_decl>		<comment type="block">/* Convert wide to PyObject */</comment>

<comment type="block">/*
** The rest of the routines are implemented by extension modules. If they are
** dynamically loaded mactoolboxglue will contain a stub implementation of the
** routine, which imports the module, whereupon the module's init routine will
** communicate the routine pointer back to the stub.
** If USE_TOOLBOX_OBJECT_GLUE is not defined there is no glue code, and the
** extension modules simply declare the routine. This is the case for static
** builds (and could be the case for MacPython CFM builds, because CFM extension
** modules can reference each other without problems).
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TOOLBOX_OBJECT_GLUE</name></cpp:ifdef>
<comment type="block">/*
** These macros are used in the module init code. If we use toolbox object glue
** it sets the function pointer to point to the real function.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMac_INIT_TOOLBOX_OBJECT_NEW</name><parameter_list>(<param><type><name>object</name></type></param>, <param><type><name>rtn</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ \
	extern PyObject *(*PyMacGluePtr_##rtn)(object); \
	PyMacGluePtr_##rtn = _##rtn; \
}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMac_INIT_TOOLBOX_OBJECT_CONVERT</name><parameter_list>(<param><type><name>object</name></type></param>, <param><type><name>rtn</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ \
	extern int (*PyMacGluePtr_##rtn)(PyObject *, object *); \
	PyMacGluePtr_##rtn = _##rtn; \
}</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/*
** If we don't use toolbox object glue the init macros are empty. Moreover, we define
** _xxx_New to be the same as xxx_New, and the code in mactoolboxglue isn't included.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMac_INIT_TOOLBOX_OBJECT_NEW</name><parameter_list>(<param><type><name>object</name></type></param>, <param><type><name>rtn</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMac_INIT_TOOLBOX_OBJECT_CONVERT</name><parameter_list>(<param><type><name>object</name></type></param>, <param><type><name>rtn</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_TOOLBOX_OBJECT_GLUE */</comment>

<comment type="block">/* macfs exports */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function_decl><type><name>int</name></type> <name>PyMac_GetFSSpec</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>FSSpec</name> *</type></decl></param>)</parameter_list>;</function_decl>	<comment type="block">/* argument parser for FSSpec */</comment>
<function_decl><type><name>PyObject</name> *</type><name>PyMac_BuildFSSpec</name><parameter_list>(<param><decl><type><name>FSSpec</name> *</type></decl></param>)</parameter_list>;</function_decl>		<comment type="block">/* Convert FSSpec to PyObject */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

<function_decl><type><name>int</name></type> <name>PyMac_GetFSRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>FSRef</name> *</type></decl></param>)</parameter_list>;</function_decl>	<comment type="block">/* argument parser for FSRef */</comment>
<function_decl><type><name>PyObject</name> *</type><name>PyMac_BuildFSRef</name><parameter_list>(<param><decl><type><name>FSRef</name> *</type></decl></param>)</parameter_list>;</function_decl>		<comment type="block">/* Convert FSRef to PyObject */</comment>

<comment type="block">/* AE exports */</comment>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>AEDesc_New</name><parameter_list>(<param><decl><type><name>AppleEvent</name> *</type></decl></param>)</parameter_list>;</function_decl> <comment type="block">/* XXXX Why passed by address?? */</comment>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>AEDesc_NewBorrowed</name><parameter_list>(<param><decl><type><name>AppleEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>AEDesc_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>AppleEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Cm exports */</comment>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>CmpObj_New</name><parameter_list>(<param><decl><type><name>Component</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>CmpObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Component</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>CmpInstObj_New</name><parameter_list>(<param><decl><type><name>ComponentInstance</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>CmpInstObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>ComponentInstance</name> *</type></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Ctl exports */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>CtlObj_New</name><parameter_list>(<param><decl><type><name>ControlHandle</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>CtlObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>ControlHandle</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

<comment type="block">/* Dlg exports */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>DlgObj_New</name><parameter_list>(<param><decl><type><name>DialogPtr</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>DlgObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>DialogPtr</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>DlgObj_WhichDialog</name><parameter_list>(<param><decl><type><name>DialogPtr</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

<comment type="block">/* Drag exports */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>DragObj_New</name><parameter_list>(<param><decl><type><name>DragReference</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>DragObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>DragReference</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

<comment type="block">/* List exports */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>ListObj_New</name><parameter_list>(<param><decl><type><name>ListHandle</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ListObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>ListHandle</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

<comment type="block">/* Menu exports */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>MenuObj_New</name><parameter_list>(<param><decl><type><name>MenuHandle</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>MenuObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>MenuHandle</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

<comment type="block">/* Qd exports */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>GrafObj_New</name><parameter_list>(<param><decl><type><name>GrafPtr</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>GrafObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>GrafPtr</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>BMObj_New</name><parameter_list>(<param><decl><type><name>BitMapPtr</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>BMObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>BitMapPtr</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>QdRGB_New</name><parameter_list>(<param><decl><type><name>RGBColor</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>QdRGB_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>RGBColor</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

<comment type="block">/* Qdoffs exports */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>GWorldObj_New</name><parameter_list>(<param><decl><type><name>GWorldPtr</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>GWorldObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>GWorldPtr</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

<comment type="block">/* Qt exports */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>TrackObj_New</name><parameter_list>(<param><decl><type><name>Track</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>TrackObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Track</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>MovieObj_New</name><parameter_list>(<param><decl><type><name>Movie</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>MovieObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Movie</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_New</name><parameter_list>(<param><decl><type><name>MovieController</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>MovieCtlObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>MovieController</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>TimeBaseObj_New</name><parameter_list>(<param><decl><type><name>TimeBase</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>TimeBaseObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>TimeBase</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>UserDataObj_New</name><parameter_list>(<param><decl><type><name>UserData</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>UserDataObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>UserData</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>MediaObj_New</name><parameter_list>(<param><decl><type><name>Media</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>MediaObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Media</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

<comment type="block">/* Res exports */</comment>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>ResObj_New</name><parameter_list>(<param><decl><type><name>Handle</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ResObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Handle</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>OptResObj_New</name><parameter_list>(<param><decl><type><name>Handle</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>OptResObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Handle</name> *</type></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* TE exports */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>TEObj_New</name><parameter_list>(<param><decl><type><name>TEHandle</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>TEObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>TEHandle</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

<comment type="block">/* Win exports */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>WinObj_New</name><parameter_list>(<param><decl><type><name>WindowPtr</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>WinObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>WindowPtr</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>WinObj_WhichWindow</name><parameter_list>(<param><decl><type><name>WindowPtr</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

<comment type="block">/* CF exports */</comment>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>CFObj_New</name><parameter_list>(<param><decl><type><name>CFTypeRef</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>CFObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>CFTypeRef</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>CFTypeRefObj_New</name><parameter_list>(<param><decl><type><name>CFTypeRef</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>CFTypeRefObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>CFTypeRef</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>CFStringRefObj_New</name><parameter_list>(<param><decl><type><name>CFStringRef</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>CFStringRefObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>CFStringRef</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>CFMutableStringRefObj_New</name><parameter_list>(<param><decl><type><name>CFMutableStringRef</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>CFMutableStringRefObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>CFMutableStringRef</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>CFArrayRefObj_New</name><parameter_list>(<param><decl><type><name>CFArrayRef</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>CFArrayRefObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>CFArrayRef</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>CFMutableArrayRefObj_New</name><parameter_list>(<param><decl><type><name>CFMutableArrayRef</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>CFMutableArrayRefObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>CFMutableArrayRef</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>CFDictionaryRefObj_New</name><parameter_list>(<param><decl><type><name>CFDictionaryRef</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>CFDictionaryRefObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>CFDictionaryRef</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>CFMutableDictionaryRefObj_New</name><parameter_list>(<param><decl><type><name>CFMutableDictionaryRef</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>CFMutableDictionaryRefObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>CFMutableDictionaryRef</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>CFURLRefObj_New</name><parameter_list>(<param><decl><type><name>CFURLRef</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>CFURLRefObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>CFURLRef</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>OptionalCFURLRefObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>CFURLRef</name> *</type></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
	}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
