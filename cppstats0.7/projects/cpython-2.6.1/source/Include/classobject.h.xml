<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/classobject.h">
<comment type="block">/* Class object interface */</comment>

<comment type="block">/* Revealing some structures (not for general use) */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_CLASSOBJECT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_CLASSOBJECT_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>
    <name>PyObject</name>	*</type><name>cl_bases</name></decl>;</decl_stmt>	<comment type="block">/* A tuple of class objects */</comment>
    <decl_stmt><decl><type><name>PyObject</name>	*</type><name>cl_dict</name></decl>;</decl_stmt>	<comment type="block">/* A dictionary */</comment>
    <decl_stmt><decl><type><name>PyObject</name>	*</type><name>cl_name</name></decl>;</decl_stmt>	<comment type="block">/* A string */</comment>
    <comment type="block">/* The following three are functions or NULL */</comment>
    <decl_stmt><decl><type><name>PyObject</name>	*</type><name>cl_getattr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>	*</type><name>cl_setattr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>	*</type><name>cl_delattr</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyClassObject</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>
    <name>PyClassObject</name> *</type><name>in_class</name></decl>;</decl_stmt>	<comment type="block">/* The class object */</comment>
    <decl_stmt><decl><type><name>PyObject</name>	  *</type><name>in_dict</name></decl>;</decl_stmt>	<comment type="block">/* A dictionary */</comment>
    <decl_stmt><decl><type><name>PyObject</name>	  *</type><name>in_weakreflist</name></decl>;</decl_stmt> <comment type="block">/* List of weak references */</comment>
}</block></struct></type> <name>PyInstanceObject</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>
    <name>PyObject</name> *</type><name>im_func</name></decl>;</decl_stmt>   <comment type="block">/* The callable object implementing the method */</comment>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>im_self</name></decl>;</decl_stmt>   <comment type="block">/* The instance it is bound to, or NULL */</comment>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>im_class</name></decl>;</decl_stmt>  <comment type="block">/* The class that asked for the method */</comment>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>im_weakreflist</name></decl>;</decl_stmt> <comment type="block">/* List of weak references */</comment>
}</block></struct></type> <name>PyMethodObject</name>;</typedef>

<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyClass_Type</name></expr>, <expr><name>PyInstance_Type</name></expr>, <expr><name>PyMethod_Type</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyClass_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((op)-&gt;ob_type == &amp;PyClass_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyInstance_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((op)-&gt;ob_type == &amp;PyInstance_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMethod_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((op)-&gt;ob_type == &amp;PyMethod_Type)</cpp:value></cpp:define>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyClass_New</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyInstance_New</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>,
                                            <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyInstance_NewRaw</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyMethod_New</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyMethod_Function</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyMethod_Self</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyMethod_Class</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Look up attribute with name (a string) on instance object pinst, using
 * only the instance and base class dicts.  If a descriptor is found in
 * a class dict, the descriptor is returned without calling it.
 * Returns NULL if nothing found, else a borrowed reference to the
 * value associated with name in the dict in which name was found.
 * The point of this routine is that it never calls arbitrary Python
 * code, so is always "safe":  all it does is dict lookups.  The function
 * can't fail, never sets an exception, and NULL is not an error (it just
 * means "not found").
 */</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyInstance_Lookup</name><argument_list>(<argument><expr><name>PyObject</name> *<name>pinst</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Macros for direct access to these values. Type checks are *not*
   done, so use with care. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMethod_GET_FUNCTION</name><parameter_list>(<param><type><name>meth</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>(((PyMethodObject *)meth) -&gt; im_func)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMethod_GET_SELF</name><parameter_list>(<param><type><name>meth</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value>(((PyMethodObject *)meth) -&gt; im_self)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMethod_GET_CLASS</name><parameter_list>(<param><type><name>meth</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value>(((PyMethodObject *)meth) -&gt; im_class)</cpp:value></cpp:define>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyClass_IsSubclass</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyMethod_ClearFreeList</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_CLASSOBJECT_H */</comment>
</unit>
