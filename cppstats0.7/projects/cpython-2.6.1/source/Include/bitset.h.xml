<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/bitset.h">
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_BITSET_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_BITSET_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Bitset interface */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE</name></cpp:macro>		<cpp:value>char</cpp:value></cpp:define>

<typedef>typedef <type><name>BYTE</name> *</type><name>bitset</name>;</typedef>

<function_decl><type><name>bitset</name></type> <name>newbitset</name><parameter_list>(<param><decl><type><name>int</name></type> <name>nbits</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>delbitset</name><parameter_list>(<param><decl><type><name>bitset</name></type> <name>bs</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testbit</name><parameter_list>(<param><type><name>ss</name></type></param>, <param><type><name>ibit</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((ss)[BIT2BYTE(ibit)] &amp; BIT2MASK(ibit)) != 0)</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>addbit</name><parameter_list>(<param><decl><type><name>bitset</name></type> <name>bs</name></decl></param>, <param><decl><type><name>int</name></type> <name>ibit</name></decl></param>)</parameter_list>;</function_decl> <comment type="block">/* Returns 0 if already set */</comment>
<function_decl><type><name>int</name></type> <name>samebitset</name><parameter_list>(<param><decl><type><name>bitset</name></type> <name>bs1</name></decl></param>, <param><decl><type><name>bitset</name></type> <name>bs2</name></decl></param>, <param><decl><type><name>int</name></type> <name>nbits</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mergebitset</name><parameter_list>(<param><decl><type><name>bitset</name></type> <name>bs1</name></decl></param>, <param><decl><type><name>bitset</name></type> <name>bs2</name></decl></param>, <param><decl><type><name>int</name></type> <name>nbits</name></decl></param>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSPERBYTE</name></cpp:macro>	<cpp:value>(8*sizeof(BYTE))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NBYTES</name><parameter_list>(<param><type><name>nbits</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>(((nbits) + BITSPERBYTE - 1) / BITSPERBYTE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT2BYTE</name><parameter_list>(<param><type><name>ibit</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>((ibit) / BITSPERBYTE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT2SHIFT</name><parameter_list>(<param><type><name>ibit</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>((ibit) % BITSPERBYTE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT2MASK</name><parameter_list>(<param><type><name>ibit</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>(1 &lt;&lt; BIT2SHIFT(ibit))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE2BIT</name><parameter_list>(<param><type><name>ibyte</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>((ibyte) * BITSPERBYTE)</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_BITSET_H */</comment>
</unit>
