<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/import.h">
<comment type="block">/* Module definition and import interface */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_IMPORT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_IMPORT_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>long</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyImport_GetMagicNumber</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyImport_ExecCodeModule</name><argument_list>(<argument><expr><name>char</name> *<name>name</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyImport_ExecCodeModuleEx</name><argument_list>(
	<argument><expr><name>char</name> *<name>name</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>co</name></expr></argument>, <argument><expr><name>char</name> *<name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyImport_GetModuleDict</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyImport_AddModule</name><argument_list>(<argument><expr>const <name>char</name> *<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyImport_ImportModule</name><argument_list>(<argument><expr>const <name>char</name> *<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyImport_ImportModuleNoBlock</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PyImport_ImportModuleLevel</name><argument_list>(<argument>char *name</argument>,
	<argument>PyObject *globals</argument>, <argument>PyObject *locals</argument>, <argument>PyObject *fromlist</argument>, <argument>int level</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyImport_ImportModuleEx</name><parameter_list>(<param><type><name>n</name></type></param>, <param><type><name>g</name></type></param>, <param><type><name>l</name></type></param>, <param><type><name>f</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value>PyImport_ImportModuleLevel(n, g, l, f, -1)</cpp:value></cpp:define>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyImport_GetImporter</name><argument_list>(<argument><expr><name>PyObject</name> *<name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyImport_Import</name><argument_list>(<argument><expr><name>PyObject</name> *<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyImport_ReloadModule</name><argument_list>(<argument><expr><name>PyObject</name> *<name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyImport_Cleanup</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyImport_ImportFrozenModule</name><argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>struct filedescr *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyImport_FindModule</name><argument_list>(
	<argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>char</name> *</expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>FILE</name> **</expr></argument>, <argument><expr><name>PyObject</name> **</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyImport_IsScript</name><argument_list>(<argument>struct <expr><name>filedescr</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyImport_ReInitLock</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro><expr_stmt><expr><call><name>_PyImport_FindExtension</name><argument_list>(<argument><expr><name>char</name> *</expr></argument>, <argument><expr><name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro><expr_stmt><expr><call><name>_PyImport_FixupExtension</name><argument_list>(<argument><expr><name>char</name> *</expr></argument>, <argument><expr><name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>_inittab</name> <block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
    <function_decl><type><name>void</name></type> (*<name>initfunc</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
}</block>;</struct>

<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyNullImporter_Type</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>struct _inittab *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyImport_Inittab</name></expr>;</expr_stmt>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyImport_AppendInittab</name><argument_list>(<argument><expr><name>char</name> *<name>name</name></expr></argument>, <argument><expr><call><call><name>void</name> <argument_list>(<argument><expr>*<name>initfunc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyImport_ExtendInittab</name><argument_list>(<argument>struct <expr><name>_inittab</name> *<name>newtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>_frozen</name> <block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>code</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* Embedding apps may change this pointer to point to their favorite
   collection of frozen modules: */</comment>

<macro><name>PyAPI_DATA</name><argument_list>(<argument>struct _frozen *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyImport_FrozenModules</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_IMPORT_H */</comment>
</unit>
