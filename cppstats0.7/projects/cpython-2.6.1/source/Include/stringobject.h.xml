<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/stringobject.h">
<comment type="block">/* String (str/bytes) object interface */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_STRINGOBJECT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_STRINGOBJECT_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
Type PyStringObject represents a character string.  An extra zero byte is
reserved at the end to ensure it is zero-terminated, but a size is
present so strings with null bytes in them can be represented.  This
is an immutable object type.

There are functions to create new string objects, to test
an object for string-ness, and to get the
string value.  The latter function returns a null pointer
if the object is not of the proper type.
There is a variant that takes an explicit size as well as a
variant that assumes a zero-terminated string.  Note that none of the
functions should be applied to nil objects.
*/</comment>

<comment type="block">/* Caching the hash (ob_shash) saves recalculation of a string's hash value.
   Interning strings (ob_sstate) tries to ensure that only one string
   object with a given value exists, so equality tests can be one pointer
   comparison.  This is generally restricted to strings that "look like"
   Python identifiers, although the intern() builtin can be used to force
   interning of any string.
   Together, these sped the interpreter by up to 20%. */</comment>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>PyObject_VAR_HEAD</name>
    <name>long</name></type> <name>ob_shash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ob_sstate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>ob_sval</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* Invariants:
     *     ob_sval contains space for 'ob_size+1' elements.
     *     ob_sval[ob_size] == 0.
     *     ob_shash is the hash of the string or -1 if not computed yet.
     *     ob_sstate != 0 iff the string object is in stringobject.c's
     *       'interned' dictionary; in this case the two references
     *       from 'interned' to this object are *not counted* in ob_refcnt.
     */</comment>
}</block></struct></type> <name>PyStringObject</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSTATE_NOT_INTERNED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSTATE_INTERNED_MORTAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSTATE_INTERNED_IMMORTAL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyBaseString_Type</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyString_Type</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyString_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> \
                 <cpp:value>PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_STRING_SUBCLASS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyString_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;PyString_Type)</cpp:value></cpp:define>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyString_FromString</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PyString_FromFormatV</name><argument_list>(<argument>const char*</argument>, <argument>va_list</argument>)</argument_list></macro>
				<expr_stmt><expr><call><name>Py_GCC_ATTRIBUTE</name><argument_list>(<argument><expr>(<call><name>format</name><argument_list>(<argument><expr><name>printf</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PyString_FromFormat</name><argument_list>(<argument>const char*</argument>, <argument>...</argument>)</argument_list></macro>
				<expr_stmt><expr><call><name>Py_GCC_ATTRIBUTE</name><argument_list>(<argument><expr>(<call><name>format</name><argument_list>(<argument><expr><name>printf</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyString_Size</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyString_AsString</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyString_Repr</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyString_Concat</name><argument_list>(<argument><expr><name>PyObject</name> **</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyString_ConcatAndDel</name><argument_list>(<argument><expr><name>PyObject</name> **</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyString_Resize</name><argument_list>(<argument><expr><name>PyObject</name> **</expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyString_Eq</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name>*</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyString_Format</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyString_FormatLong</name><argument_list>(<argument><expr><name>PyObject</name>*</expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>,
						  <argument><expr><name>int</name></expr></argument>, <argument><expr><name>char</name>**</expr></argument>, <argument><expr><name>int</name>*</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyString_DecodeEscape</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>, 
						   <argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>,
						   <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyString_InternInPlace</name><argument_list>(<argument><expr><name>PyObject</name> **</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyString_InternImmortal</name><argument_list>(<argument><expr><name>PyObject</name> **</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyString_InternFromString</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_Py_ReleaseInternedStrings</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Use only if you know it's a string */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyString_CHECK_INTERNED</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((PyStringObject *)(op))-&gt;ob_sstate)</cpp:value></cpp:define>

<comment type="block">/* Macro, trading safety for speed */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyString_AS_STRING</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((PyStringObject *)(op))-&gt;ob_sval)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyString_GET_SIZE</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>Py_SIZE(op)</cpp:value></cpp:define>

<comment type="block">/* _PyString_Join(sep, x) is like sep.join(x).  sep must be PyStringObject*,
   x must be an iterable object. */</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyString_Join</name><argument_list>(<argument><expr><name>PyObject</name> *<name>sep</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* --- Generic Codecs ----------------------------------------------------- */</comment>

<comment type="block">/* Create an object by decoding the encoded string s of the
   given size. */</comment>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyString_Decode</name><argument_list>(
    <argument>const char *s</argument>,              <comment type="block">/* encoded string */</comment>
    <argument>Py_ssize_t size</argument>,            <comment type="block">/* size of buffer */</comment>
    <argument>const char *encoding</argument>,       <comment type="block">/* encoding */</comment>
    <argument>const char *errors</argument>          <comment type="block">/* error handling */</comment>
    )</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/* Encodes a char buffer of the given size and returns a 
   Python object. */</comment>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyString_Encode</name><argument_list>(
    <argument>const char *s</argument>,              <comment type="block">/* string char buffer */</comment>
    <argument>Py_ssize_t size</argument>,            <comment type="block">/* number of chars to encode */</comment>
    <argument>const char *encoding</argument>,       <comment type="block">/* encoding */</comment>
    <argument>const char *errors</argument>          <comment type="block">/* error handling */</comment>
    )</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/* Encodes a string object and returns the result as Python 
   object. */</comment>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyString_AsEncodedObject</name><argument_list>(
    <argument><expr><name>PyObject</name> *<name>str</name></expr></argument>,	 	<comment type="block">/* string object */</comment>
    <argument><expr>const <name>char</name> *<name>encoding</name></expr></argument>,	<comment type="block">/* encoding */</comment>
    <argument><expr>const <name>char</name> *<name>errors</name></expr></argument>		<comment type="block">/* error handling */</comment>
    )</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Encodes a string object and returns the result as Python string
   object.   
   
   If the codec returns an Unicode object, the object is converted
   back to a string using the default encoding.

   DEPRECATED - use PyString_AsEncodedObject() instead. */</comment>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyString_AsEncodedString</name><argument_list>(
    <argument><expr><name>PyObject</name> *<name>str</name></expr></argument>,	 	<comment type="block">/* string object */</comment>
    <argument><expr>const <name>char</name> *<name>encoding</name></expr></argument>,	<comment type="block">/* encoding */</comment>
    <argument><expr>const <name>char</name> *<name>errors</name></expr></argument>		<comment type="block">/* error handling */</comment>
    )</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Decodes a string object and returns the result as Python 
   object. */</comment>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyString_AsDecodedObject</name><argument_list>(
    <argument><expr><name>PyObject</name> *<name>str</name></expr></argument>,	 	<comment type="block">/* string object */</comment>
    <argument><expr>const <name>char</name> *<name>encoding</name></expr></argument>,	<comment type="block">/* encoding */</comment>
    <argument><expr>const <name>char</name> *<name>errors</name></expr></argument>		<comment type="block">/* error handling */</comment>
    )</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Decodes a string object and returns the result as Python string
   object.  
   
   If the codec returns an Unicode object, the object is converted
   back to a string using the default encoding.

   DEPRECATED - use PyString_AsDecodedObject() instead. */</comment>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyString_AsDecodedString</name><argument_list>(
    <argument><expr><name>PyObject</name> *<name>str</name></expr></argument>,	 	<comment type="block">/* string object */</comment>
    <argument><expr>const <name>char</name> *<name>encoding</name></expr></argument>,	<comment type="block">/* encoding */</comment>
    <argument><expr>const <name>char</name> *<name>errors</name></expr></argument>		<comment type="block">/* error handling */</comment>
    )</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Provides access to the internal data buffer and size of a string
   object or the default encoded version of an Unicode object. Passing
   NULL as *len parameter will force the string buffer to be
   0-terminated (passing a string with embedded NULL characters will
   cause an exception).  */</comment>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>PyString_AsStringAndSize</name><argument_list>(
    <argument>register PyObject *obj</argument>,	<comment type="block">/* string or Unicode object */</comment>
    <argument>register char **s</argument>,		<comment type="block">/* pointer to buffer variable */</comment>
    <argument>register Py_ssize_t *len</argument>	<comment type="block">/* pointer to length variable or NULL
				   (only possible for 0-terminated
				   strings) */</comment>
    )</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/* Using the current locale, insert the thousands grouping
   into the string pointed to by buffer.  For the argument descriptions,
   see Objects/stringlib/localeutil.h */</comment>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>_PyString_InsertThousandsGrouping</name><argument_list>(<argument>char *buffer</argument>,
						  <argument>Py_ssize_t n_buffer</argument>,
						  <argument>Py_ssize_t n_digits</argument>,
						  <argument>Py_ssize_t buf_size</argument>,
						  <argument>Py_ssize_t *count</argument>,
						  <argument>int append_zero_char</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/* Format the object based on the format_spec, as defined in PEP 3101
   (Advanced String Formatting). */</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>_PyBytes_FormatAdvanced</name><argument_list>(<argument>PyObject *obj</argument>,
					       <argument>char *format_spec</argument>,
					       <argument>Py_ssize_t format_spec_len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_STRINGOBJECT_H */</comment>
</unit>
