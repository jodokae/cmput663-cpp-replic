<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/node.h">
<comment type="block">/* Parse tree node interface */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_NODE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_NODE_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>_node</name> <block>{
    <decl_stmt><decl><type><name>short</name></type>		<name>n_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>		*</type><name>n_str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>			<name>n_lineno</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>			<name>n_col_offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>			<name>n_nchildren</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>_node</name>	*</type><name>n_child</name></decl>;</decl_stmt>
}</block></struct></type> <name>node</name>;</typedef>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>node *</argument>)</argument_list></macro> <macro><name>PyNode_New</name><argument_list>(<argument>int type</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>PyNode_AddChild</name><argument_list>(<argument>node *n</argument>, <argument>int type</argument>,
                                      <argument>char *str</argument>, <argument>int lineno</argument>, <argument>int col_offset</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNode_Free</name><argument_list>(<argument><expr><name>node</name> *<name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Node access functions */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NCH</name><parameter_list>(<param><type><name>n</name></type></param>)</parameter_list></cpp:macro>		<cpp:value>((n)-&gt;n_nchildren)</cpp:value></cpp:define>
	
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHILD</name><parameter_list>(<param><type><name>n</name></type></param>, <param><type><name>i</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>(&amp;(n)-&gt;n_child[i])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RCHILD</name><parameter_list>(<param><type><name>n</name></type></param>, <param><type><name>i</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>(CHILD(n, NCH(n) + i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE</name><parameter_list>(<param><type><name>n</name></type></param>)</parameter_list></cpp:macro>		<cpp:value>((n)-&gt;n_type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<param><type><name>n</name></type></param>)</parameter_list></cpp:macro>		<cpp:value>((n)-&gt;n_str)</cpp:value></cpp:define>

<comment type="block">/* Assert that the type of a node is what we expect */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ</name><parameter_list>(<param><type><name>n</name></type></param>, <param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>assert(TYPE(n) == (type))</cpp:value></cpp:define>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNode_ListTree</name><argument_list>(<argument><expr><name>node</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_NODE_H */</comment>
</unit>
