<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/bytes_methods.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_BYTES_CTYPE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_BYTES_CTYPE_H</name></cpp:macro></cpp:define>

<comment type="block">/*
 * The internal implementation behind PyString (bytes) and PyBytes (buffer)
 * methods of the given names, they operate on ASCII byte strings.
 */</comment>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name>*</type> <name>_Py_bytes_isspace</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cptr</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name>*</type> <name>_Py_bytes_isalpha</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cptr</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name>*</type> <name>_Py_bytes_isalnum</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cptr</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name>*</type> <name>_Py_bytes_isdigit</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cptr</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name>*</type> <name>_Py_bytes_islower</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cptr</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name>*</type> <name>_Py_bytes_isupper</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cptr</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name>*</type> <name>_Py_bytes_istitle</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cptr</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* These store their len sized answer in the given preallocated *result arg. */</comment>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_Py_bytes_lower</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>result</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cptr</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_Py_bytes_upper</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>result</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cptr</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_Py_bytes_title</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>result</name></decl></param>, <param><decl><type><name>char</name> *</type><name>s</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_Py_bytes_capitalize</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>result</name></decl></param>, <param><decl><type><name>char</name> *</type><name>s</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_Py_bytes_swapcase</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>result</name></decl></param>, <param><decl><type><name>char</name> *</type><name>s</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Shared __doc__ strings. */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>_Py_isspace__doc__</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>_Py_isalpha__doc__</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>_Py_isalnum__doc__</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>_Py_isdigit__doc__</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>_Py_islower__doc__</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>_Py_isupper__doc__</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>_Py_istitle__doc__</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>_Py_lower__doc__</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>_Py_upper__doc__</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>_Py_title__doc__</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>_Py_capitalize__doc__</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>_Py_swapcase__doc__</name><index>[]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_LOWER</name></cpp:macro>  <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_UPPER</name></cpp:macro>  <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_ALPHA</name></cpp:macro>  <cpp:value>(FLAG_LOWER|FLAG_UPPER)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_DIGIT</name></cpp:macro>  <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_ALNUM</name></cpp:macro>  <cpp:value>(FLAG_ALPHA|FLAG_DIGIT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_SPACE</name></cpp:macro>  <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_XDIGIT</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>_Py_ctype_table</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISLOWER</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(_Py_ctype_table[Py_CHARMASK(c)] &amp; FLAG_LOWER)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISUPPER</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(_Py_ctype_table[Py_CHARMASK(c)] &amp; FLAG_UPPER)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISALPHA</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(_Py_ctype_table[Py_CHARMASK(c)] &amp; FLAG_ALPHA)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISDIGIT</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(_Py_ctype_table[Py_CHARMASK(c)] &amp; FLAG_DIGIT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISXDIGIT</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(_Py_ctype_table[Py_CHARMASK(c)] &amp; FLAG_XDIGIT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISALNUM</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(_Py_ctype_table[Py_CHARMASK(c)] &amp; FLAG_ALNUM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISSPACE</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(_Py_ctype_table[Py_CHARMASK(c)] &amp; FLAG_SPACE)</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>islower</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>islower</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>undefined_islower(c)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isupper</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isupper</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>undefined_isupper(c)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isalpha</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isalpha</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>undefined_isalpha(c)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isdigit</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isdigit</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>undefined_isdigit(c)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isxdigit</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isxdigit</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>undefined_isxdigit(c)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isalnum</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isalnum</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>undefined_isalnum(c)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isspace</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isspace</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>undefined_isspace(c)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>_Py_ctype_tolower</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>_Py_ctype_toupper</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOLOWER</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(_Py_ctype_tolower[Py_CHARMASK(c)])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOUPPER</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(_Py_ctype_toupper[Py_CHARMASK(c)])</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>tolower</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tolower</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>undefined_tolower(c)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>toupper</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>toupper</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>undefined_toupper(c)</cpp:value></cpp:define>

<comment type="block">/* this is needed because some docs are shared from the .o, not static */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDoc_STRVAR_shared</name><parameter_list>(<param><type><name>name</name></type></param>,<param><type><name>str</name></type></param>)</parameter_list></cpp:macro> <cpp:value>const char name[] = PyDoc_STR(str)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_BYTES_CTYPE_H */</comment>
</unit>
