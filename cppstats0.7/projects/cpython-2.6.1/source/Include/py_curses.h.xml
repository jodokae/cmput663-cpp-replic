<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/py_curses.h">
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_CURSES_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_CURSES_H</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__APPLE__</name></cpp:ifdef>
<comment type="block">/*
** On Mac OS X 10.2 [n]curses.h and stdlib.h use different guards
** against multiple definition of wchar_t.
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>_BSD_WCHAR_T_DEFINED_</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WCHAR_T</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__FreeBSD__</name></cpp:ifdef>
<comment type="block">/*
** On FreeBSD, [n]curses.h and stdlib.h/wchar.h use different guards
** against multiple definition of wchar_t and wint_t.
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>_XOPEN_SOURCE_EXTENDED</name></cpp:ifdef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__FreeBSD_version</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;osreldate.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__FreeBSD_version</name> &gt;= 500000</expr></cpp:if>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__wchar_t</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__wchar_t</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__wint_t</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__wint_t</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WCHAR_T</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WCHAR_T</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WINT_T</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WINT_T</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_NCURSES_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ncurses.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curses.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TERM_H</name></cpp:ifdef>
<comment type="block">/* for tigetstr, which is not declared in SysV curses */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;term.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_NCURSES_H</name></cpp:ifdef>
<comment type="block">/* configure was checking &lt;curses.h&gt;, but we will
   use &lt;ncurses.h&gt;, which has all these features. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WINDOW_HAS_FLAGS</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINDOW_HAS_FLAGS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MVWDELCH_IS_EXPRESSION</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MVWDELCH_IS_EXPRESSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCurses_API_pointers</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<comment type="block">/* Type declarations */</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>WINDOW</name> *</type><name>win</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyCursesWindowObject</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCursesWindow_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro>	 <cpp:value>(Py_TYPE(v) == &amp;PyCursesWindow_Type)</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CURSES_MODULE</name></cpp:ifdef>
<comment type="block">/* This section is used when compiling _cursesmodule.c */</comment>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/* This section is used in modules that use the _cursesmodule API */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> **</type><name>PyCurses_API</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCursesWindow_Type</name></cpp:macro> <cpp:value>(*(PyTypeObject *) PyCurses_API[0])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCursesSetupTermCalled</name></cpp:macro>  <cpp:value>{if (! ((int (*)(void))PyCurses_API[1]) () ) return NULL;}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCursesInitialised</name></cpp:macro>      <cpp:value>{if (! ((int (*)(void))PyCurses_API[2]) () ) return NULL;}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCursesInitialisedColor</name></cpp:macro> <cpp:value>{if (! ((int (*)(void))PyCurses_API[3]) () ) return NULL;}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>import_curses</name><parameter_list>()</parameter_list></cpp:macro> \
<cpp:value>{ \
  PyObject *module = PyImport_ImportModuleNoBlock("_curses"); \
  if (module != NULL) { \
    PyObject *module_dict = PyModule_GetDict(module); \
    PyObject *c_api_object = PyDict_GetItemString(module_dict, "_C_API"); \
    if (PyCObject_Check(c_api_object)) { \
      PyCurses_API = (void **)PyCObject_AsVoidPtr(c_api_object); \
    } \
  } \
}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* general error messages */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>catchall_ERR</name>  <init>= <expr>"curses function returned ERR"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>catchall_NULL</name> <init>= <expr>"curses function returned NULL"</expr></init></decl>;</decl_stmt>

<comment type="block">/* Function Prototype Macros - They are ugly but very, very useful. ;-)

   X - function name
   TYPE - parameter Type
   ERGSTR - format string for construction of the return value
   PARSESTR - format string for argument parsing
   */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NoArgNoReturnFunction</name><parameter_list>(<param><type><name>X</name></type></param>)</parameter_list></cpp:macro> \
<cpp:value>static PyObject *PyCurses_ ## X (PyObject *self) \
{ \
  PyCursesInitialised \
  return PyCursesCheckERR(X(), # X); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NoArgOrFlagNoReturnFunction</name><parameter_list>(<param><type><name>X</name></type></param>)</parameter_list></cpp:macro> \
<cpp:value>static PyObject *PyCurses_ ## X (PyObject *self, PyObject *args) \
{ \
  int flag = 0; \
  PyCursesInitialised \
  switch(PyTuple_Size(args)) { \
  case 0: \
    return PyCursesCheckERR(X(), # X); \
  case 1: \
    if (!PyArg_ParseTuple(args, "i;True(1) or False(0)", &amp;flag)) return NULL; \
    if (flag) return PyCursesCheckERR(X(), # X); \
    else return PyCursesCheckERR(no ## X (), # X); \
  default: \
    PyErr_SetString(PyExc_TypeError, # X " requires 0 or 1 arguments"); \
    return NULL; } }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NoArgReturnIntFunction</name><parameter_list>(<param><type><name>X</name></type></param>)</parameter_list></cpp:macro> \
<cpp:value>static PyObject *PyCurses_ ## X (PyObject *self) \
{ \
 PyCursesInitialised \
 return PyInt_FromLong((long) X()); }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NoArgReturnStringFunction</name><parameter_list>(<param><type><name>X</name></type></param>)</parameter_list></cpp:macro> \
<cpp:value>static PyObject *PyCurses_ ## X (PyObject *self) \
{ \
  PyCursesInitialised \
  return PyString_FromString(X()); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NoArgTrueFalseFunction</name><parameter_list>(<param><type><name>X</name></type></param>)</parameter_list></cpp:macro> \
<cpp:value>static PyObject *PyCurses_ ## X (PyObject *self) \
{ \
  PyCursesInitialised \
  if (X () == FALSE) { \
    Py_INCREF(Py_False); \
    return Py_False; \
  } \
  Py_INCREF(Py_True); \
  return Py_True; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NoArgNoReturnVoidFunction</name><parameter_list>(<param><type><name>X</name></type></param>)</parameter_list></cpp:macro> \
<cpp:value>static PyObject *PyCurses_ ## X (PyObject *self) \
{ \
  PyCursesInitialised \
  X(); \
  Py_INCREF(Py_None); \
  return Py_None; }</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(Py_CURSES_H) */</comment>


</unit>
