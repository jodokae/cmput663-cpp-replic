<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/genobject.h">
<comment type="block">/* Generator object interface */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_GENOBJECT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_GENOBJECT_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct_decl>struct <name>_frame</name>;</struct_decl> <comment type="block">/* Avoid including frameobject.h */</comment>

<typedef>typedef <type><struct>struct <block>{
	<macro><name>PyObject_HEAD</name></macro>
	<comment type="block">/* The gi_ prefix is intended to remind of generator-iterator. */</comment>

	<comment type="block">/* Note: gi_frame can be NULL if the generator is "finished" */</comment>
	<decl_stmt><decl><type>struct <name>_frame</name> *</type><name>gi_frame</name></decl>;</decl_stmt>

	<comment type="block">/* True if generator is being executed. */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>gi_running</name></decl>;</decl_stmt>
    
	<comment type="block">/* The code object backing the generator */</comment>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>gi_code</name></decl>;</decl_stmt>

	<comment type="block">/* List of weak reference. */</comment>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>gi_weakreflist</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyGenObject</name>;</typedef>

<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyGen_Type</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyGen_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_TypeCheck(op, &amp;PyGen_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyGen_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;PyGen_Type)</cpp:value></cpp:define>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyGen_New</name><argument_list>(<argument>struct <expr><name>_frame</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyGen_NeedsFinalizing</name><argument_list>(<argument><expr><name>PyGenObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_GENOBJECT_H */</comment>
</unit>
