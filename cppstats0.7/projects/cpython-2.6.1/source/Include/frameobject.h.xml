<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/frameobject.h">
<comment type="block">/* Frame object interface */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_FRAMEOBJECT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_FRAMEOBJECT_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>b_type</name></decl>;</decl_stmt>			<comment type="block">/* what kind of block this is */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>b_handler</name></decl>;</decl_stmt>		<comment type="block">/* where to jump to find handler */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>b_level</name></decl>;</decl_stmt>		<comment type="block">/* value stack level to pop to */</comment>
}</block></struct></type> <name>PyTryBlock</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_frame</name> <block>{
    <macro><name>PyObject_VAR_HEAD</name></macro>
    <decl_stmt><decl><type>struct <name>_frame</name> *</type><name>f_back</name></decl>;</decl_stmt>	<comment type="block">/* previous frame, or NULL */</comment>
    <decl_stmt><decl><type><name>PyCodeObject</name> *</type><name>f_code</name></decl>;</decl_stmt>	<comment type="block">/* code segment */</comment>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>f_builtins</name></decl>;</decl_stmt>	<comment type="block">/* builtin symbol table (PyDictObject) */</comment>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>f_globals</name></decl>;</decl_stmt>	<comment type="block">/* global symbol table (PyDictObject) */</comment>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>f_locals</name></decl>;</decl_stmt>		<comment type="block">/* local symbol table (any mapping) */</comment>
    <decl_stmt><decl><type><name>PyObject</name> **</type><name>f_valuestack</name></decl>;</decl_stmt>	<comment type="block">/* points after the last local */</comment>
    <comment type="block">/* Next free slot in f_valuestack.  Frame creation sets to f_valuestack.
       Frame evaluation usually NULLs it, but a frame that yields sets it
       to the current stack top. */</comment>
    <decl_stmt><decl><type><name>PyObject</name> **</type><name>f_stacktop</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>f_trace</name></decl>;</decl_stmt>		<comment type="block">/* Trace function */</comment>

    <comment type="block">/* If an exception is raised in this frame, the next three are used to
     * record the exception info (if any) originally in the thread state.  See
     * comments before set_exc_info() -- it's not obvious.
     * Invariant:  if _type is NULL, then so are _value and _traceback.
     * Desired invariant:  all three are NULL, or all three are non-NULL.  That
     * one isn't currently true, but "should be".
     */</comment>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>f_exc_type</name></decl>, *<name>f_exc_value</name>, *<name>f_exc_traceback</name>;</decl_stmt>

    <decl_stmt><decl><type><name>PyThreadState</name> *</type><name>f_tstate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>f_lasti</name></decl>;</decl_stmt>		<comment type="block">/* Last instruction if called */</comment>
    <comment type="block">/* As of 2.3 f_lineno is only valid when tracing is active (i.e. when
       f_trace is set) -- at other times use PyCode_Addr2Line instead. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>f_lineno</name></decl>;</decl_stmt>		<comment type="block">/* Current line number */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>f_iblock</name></decl>;</decl_stmt>		<comment type="block">/* index in f_blockstack */</comment>
    <decl_stmt><decl><type><name>PyTryBlock</name></type> <name><name>f_blockstack</name><index>[<expr><name>CO_MAXBLOCKS</name></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* for try and loop blocks */</comment>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name><name>f_localsplus</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* locals+stack, dynamically sized */</comment>
}</block></struct></type> <name>PyFrameObject</name>;</typedef>


<comment type="block">/* Standard object interface */</comment>

<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyFrame_Type</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyFrame_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((op)-&gt;ob_type == &amp;PyFrame_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyFrame_IsRestricted</name><parameter_list>(<param><type><name>f</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value>((f)-&gt;f_builtins != (f)-&gt;f_tstate-&gt;interp-&gt;builtins)</cpp:value></cpp:define>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyFrameObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFrame_New</name><argument_list>(<argument><expr><name>PyThreadState</name> *</expr></argument>, <argument><expr><name>PyCodeObject</name> *</expr></argument>,
                                       <argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block">/* The rest of the interface is specific for frame objects */</comment>

<comment type="block">/* Block management functions */</comment>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFrame_BlockSetup</name><argument_list>(<argument><expr><name>PyFrameObject</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyTryBlock *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFrame_BlockPop</name><argument_list>(<argument><expr><name>PyFrameObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Extend the value stack */</comment>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject **</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFrame_ExtendStack</name><argument_list>(<argument><expr><name>PyFrameObject</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Conversions between "fast locals" and locals in dictionary */</comment>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFrame_LocalsToFast</name><argument_list>(<argument><expr><name>PyFrameObject</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFrame_FastToLocals</name><argument_list>(<argument><expr><name>PyFrameObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFrame_ClearFreeList</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_FRAMEOBJECT_H */</comment>
</unit>
