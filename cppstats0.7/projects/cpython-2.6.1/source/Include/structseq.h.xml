<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/structseq.h">
<comment type="block">/* Tuple object interface */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_STRUCTSEQ_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_STRUCTSEQ_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>PyStructSequence_Field</name> <block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>doc</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyStructSequence_Field</name>;</typedef>

<typedef>typedef <type><struct>struct <name>PyStructSequence_Desc</name> <block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>doc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type>struct <name>PyStructSequence_Field</name> *</type><name>fields</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n_in_sequence</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyStructSequence_Desc</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name>*</type> <name>PyStructSequence_UnnamedField</name></decl>;</decl_stmt>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyStructSequence_InitType</name><argument_list>(<argument><expr><name>PyTypeObject</name> *<name>type</name></expr></argument>,
					   <argument><expr><name>PyStructSequence_Desc</name> *<name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyStructSequence_New</name><argument_list>(<argument><expr><name>PyTypeObject</name>* <name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>PyObject_VAR_HEAD</name>
	<name>PyObject</name> *</type><name><name>ob_item</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>PyStructSequence</name>;</typedef>

<comment type="block">/* Macro, *only* to be used to fill in brand new objects */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyStructSequence_SET_ITEM</name><parameter_list>(<param><type><name>op</name></type></param>, <param><type><name>i</name></type></param>, <param><type><name>v</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value>(((PyStructSequence *)(op))-&gt;ob_item[i] = v)</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_STRUCTSEQ_H */</comment>
</unit>
