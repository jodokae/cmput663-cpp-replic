<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/cobject.h">
<comment type="block">/* C objects to be exported from one extension module to another.
 
   C objects are used for communication between extension modules.
   They provide a way for an extension module to export a C interface
   to other extension modules, so that extension modules can use the
   Python import mechanism to link to one another.

*/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_COBJECT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_COBJECT_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyCObject_Type</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCObject_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;PyCObject_Type)</cpp:value></cpp:define>

<comment type="block">/* Create a PyCObject from a pointer to a C object and an optional
   destructor function.  If the second argument is non-null, then it
   will be called with the first argument if and when the PyCObject is
   destroyed.

*/</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCObject_FromVoidPtr</name><argument_list>(
	<argument><expr><name>void</name> *<name>cobj</name></expr></argument>, <argument><expr><call><call><name>void</name> <argument_list>(<argument><expr>*<name>destruct</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name>*</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block">/* Create a PyCObject from a pointer to a C object, a description object,
   and an optional destructor function.  If the third argument is non-null,
   then it will be called with the first and second arguments if and when 
   the PyCObject is destroyed.
*/</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCObject_FromVoidPtrAndDesc</name><argument_list>(
	<argument><expr><name>void</name> *<name>cobj</name></expr></argument>, <argument><expr><name>void</name> *<name>desc</name></expr></argument>, <argument><expr><call><call><name>void</name> <argument_list>(<argument><expr>*<name>destruct</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name>*</expr></argument>,<argument><expr><name>void</name>*</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Retrieve a pointer to a C object from a PyCObject. */</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCObject_AsVoidPtr</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Retrieve a pointer to a description object from a PyCObject. */</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCObject_GetDesc</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Import a pointer to a C object from a module using a PyCObject. */</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCObject_Import</name><argument_list>(<argument><expr><name>char</name> *<name>module_name</name></expr></argument>, <argument><expr><name>char</name> *<name>cobject_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Modify a C object. Fails (==0) if object has a destructor. */</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCObject_SetVoidPtr</name><argument_list>(<argument><expr><name>PyObject</name> *<name>self</name></expr></argument>, <argument><expr><name>void</name> *<name>cobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>
    <name>void</name> *</type><name>cobject</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> *</type><name>desc</name></decl>;</decl_stmt>
    <function_decl><type><name>void</name></type> (*<name>destructor</name>)<parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl>
}</block></struct></type> <name>PyCObject</name>;</typedef>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_COBJECT_H */</comment>
</unit>
