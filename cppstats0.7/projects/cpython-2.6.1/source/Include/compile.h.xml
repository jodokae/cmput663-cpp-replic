<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/compile.h">
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_COMPILE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_COMPILE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"code.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Public interface */</comment>
<struct_decl>struct <name>_node</name>;</struct_decl> <comment type="block">/* Declare the existence of this type */</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyCodeObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNode_Compile</name><argument_list>(<argument>struct <expr><name>_node</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Future feature support */</comment>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>ff_features</name></decl>;</decl_stmt>      <comment type="block">/* flags set by future statements */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ff_lineno</name></decl>;</decl_stmt>        <comment type="block">/* line number of last future statement */</comment>
}</block></struct></type> <name>PyFutureFeatures</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTURE_NESTED_SCOPES</name></cpp:macro> <cpp:value>"nested_scopes"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTURE_GENERATORS</name></cpp:macro> <cpp:value>"generators"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTURE_DIVISION</name></cpp:macro> <cpp:value>"division"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTURE_ABSOLUTE_IMPORT</name></cpp:macro> <cpp:value>"absolute_import"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTURE_WITH_STATEMENT</name></cpp:macro> <cpp:value>"with_statement"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTURE_PRINT_FUNCTION</name></cpp:macro> <cpp:value>"print_function"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTURE_UNICODE_LITERALS</name></cpp:macro> <cpp:value>"unicode_literals"</cpp:value></cpp:define>


<struct_decl>struct <name>_mod</name>;</struct_decl> <comment type="block">/* Declare the existence of this type */</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyCodeObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyAST_Compile</name><argument_list>(<argument>struct <expr><name>_mod</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>,
					<argument><expr><name>PyCompilerFlags</name> *</expr></argument>, <argument><expr><name>PyArena</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyFutureFeatures *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFuture_FromAST</name><argument_list>(<argument>struct <expr><name>_mod</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_LATE_FUTURE</name></cpp:macro> \
<cpp:value>"from __future__ imports must occur at the beginning of the file"</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_COMPILE_H */</comment>
</unit>
