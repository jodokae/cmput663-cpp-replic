<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/boolobject.h"><comment type="block">/* Boolean object interface */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_BOOLOBJECT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_BOOLOBJECT_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><name>PyIntObject</name></type> <name>PyBoolObject</name>;</typedef>

<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyBool_Type</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBool_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(x) == &amp;PyBool_Type)</cpp:value></cpp:define>

<comment type="block">/* Py_False and Py_True are the only two bools in existence.
Don't forget to apply Py_INCREF() when returning either!!! */</comment>

<comment type="block">/* Don't use these directly */</comment>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyIntObject</argument>)</argument_list></macro> <expr_stmt><expr><name>_Py_ZeroStruct</name></expr>, <expr><name>_Py_TrueStruct</name></expr>;</expr_stmt>

<comment type="block">/* Use these macros */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_False</name></cpp:macro> <cpp:value>((PyObject *) &amp;_Py_ZeroStruct)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_True</name></cpp:macro> <cpp:value>((PyObject *) &amp;_Py_TrueStruct)</cpp:value></cpp:define>

<comment type="block">/* Macros for returning Py_True or Py_False, respectively */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_RETURN_TRUE</name></cpp:macro> <cpp:value>return Py_INCREF(Py_True), Py_True</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_RETURN_FALSE</name></cpp:macro> <cpp:value>return Py_INCREF(Py_False), Py_False</cpp:value></cpp:define>

<comment type="block">/* Function to return a bool from a C long */</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyBool_FromLong</name><argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_BOOLOBJECT_H */</comment>
</unit>
