<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/patchlevel.h">
<comment type="block">/* Newfangled version identification scheme.

   This scheme was added in Python 1.5.2b2; before that time, only PATCHLEVEL
   was available.  To test for presence of the scheme, test for
   defined(PY_MAJOR_VERSION).

   When the major or minor version changes, the VERSION variable in
   configure.in must also be changed.

   There is also (independent) API version information in modsupport.h.
*/</comment>

<comment type="block">/* Values for PY_RELEASE_LEVEL */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_RELEASE_LEVEL_ALPHA</name></cpp:macro>	<cpp:value>0xA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_RELEASE_LEVEL_BETA</name></cpp:macro>	<cpp:value>0xB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_RELEASE_LEVEL_GAMMA</name></cpp:macro>	<cpp:value>0xC</cpp:value></cpp:define>     <comment type="block">/* For release candidates */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_RELEASE_LEVEL_FINAL</name></cpp:macro>	<cpp:value>0xF</cpp:value></cpp:define>	<comment type="block">/* Serial should be 0 here */</comment>
					<comment type="block">/* Higher for patch releases */</comment>

<comment type="block">/* Version parsed out into numeric values */</comment>
<comment type="block">/*--start constants--*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_MAJOR_VERSION</name></cpp:macro>	<cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_MINOR_VERSION</name></cpp:macro>	<cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_MICRO_VERSION</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_RELEASE_LEVEL</name></cpp:macro>	<cpp:value>PY_RELEASE_LEVEL_FINAL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_RELEASE_SERIAL</name></cpp:macro>	<cpp:value>0</cpp:value></cpp:define>

<comment type="block">/* Version as a string */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_VERSION</name></cpp:macro>      	<cpp:value>"2.6.1"</cpp:value></cpp:define>
<comment type="block">/*--end constants--*/</comment>

<comment type="block">/* Subversion Revision number of this file (not of the repository) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_PATCHLEVEL_REVISION</name></cpp:macro>  <cpp:value>"$Revision$"</cpp:value></cpp:define>

<comment type="block">/* Version as a single 4-byte hex number, e.g. 0x010502B2 == 1.5.2b2.
   Use this for numeric comparisons, e.g. #if PY_VERSION_HEX &gt;= ... */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_VERSION_HEX</name></cpp:macro> <cpp:value>((PY_MAJOR_VERSION &lt;&lt; 24) | \
			(PY_MINOR_VERSION &lt;&lt; 16) | \
			(PY_MICRO_VERSION &lt;&lt;  8) | \
			(PY_RELEASE_LEVEL &lt;&lt;  4) | \
			(PY_RELEASE_SERIAL &lt;&lt; 0))</cpp:value></cpp:define>
</unit>
