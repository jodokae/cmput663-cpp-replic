<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/complexobject.h"><comment type="block">/* Complex number structure */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_COMPLEXOBJECT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_COMPLEXOBJECT_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>double</name></type> <name>real</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>imag</name></decl>;</decl_stmt>
}</block></struct></type> <name>Py_complex</name>;</typedef>

<comment type="block">/* Operations on complex numbers from complexmodule.c */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>c_sum</name></cpp:macro> <cpp:value>_Py_c_sum</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>c_diff</name></cpp:macro> <cpp:value>_Py_c_diff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>c_neg</name></cpp:macro> <cpp:value>_Py_c_neg</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>c_prod</name></cpp:macro> <cpp:value>_Py_c_prod</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>c_quot</name></cpp:macro> <cpp:value>_Py_c_quot</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>c_pow</name></cpp:macro> <cpp:value>_Py_c_pow</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>c_abs</name></cpp:macro> <cpp:value>_Py_c_abs</cpp:value></cpp:define>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_complex</argument>)</argument_list></macro> <expr_stmt><expr><call><name>c_sum</name><argument_list>(<argument><expr><name>Py_complex</name></expr></argument>, <argument><expr><name>Py_complex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_complex</argument>)</argument_list></macro> <expr_stmt><expr><call><name>c_diff</name><argument_list>(<argument><expr><name>Py_complex</name></expr></argument>, <argument><expr><name>Py_complex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_complex</argument>)</argument_list></macro> <expr_stmt><expr><call><name>c_neg</name><argument_list>(<argument><expr><name>Py_complex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_complex</argument>)</argument_list></macro> <expr_stmt><expr><call><name>c_prod</name><argument_list>(<argument><expr><name>Py_complex</name></expr></argument>, <argument><expr><name>Py_complex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_complex</argument>)</argument_list></macro> <expr_stmt><expr><call><name>c_quot</name><argument_list>(<argument><expr><name>Py_complex</name></expr></argument>, <argument><expr><name>Py_complex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_complex</argument>)</argument_list></macro> <expr_stmt><expr><call><name>c_pow</name><argument_list>(<argument><expr><name>Py_complex</name></expr></argument>, <argument><expr><name>Py_complex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>double</argument>)</argument_list></macro> <expr_stmt><expr><call><name>c_abs</name><argument_list>(<argument><expr><name>Py_complex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block">/* Complex object interface */</comment>

<comment type="block">/*
PyComplexObject represents a complex number with double-precision
real and imaginary parts.
*/</comment>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>
    <name>Py_complex</name></type> <name>cval</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyComplexObject</name>;</typedef>     

<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyComplex_Type</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyComplex_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_TypeCheck(op, &amp;PyComplex_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyComplex_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;PyComplex_Type)</cpp:value></cpp:define>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyComplex_FromCComplex</name><argument_list>(<argument><expr><name>Py_complex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PyComplex_FromDoubles</name><argument_list>(<argument>double real</argument>, <argument>double imag</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>double</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyComplex_RealAsDouble</name><argument_list>(<argument><expr><name>PyObject</name> *<name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>double</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyComplex_ImagAsDouble</name><argument_list>(<argument><expr><name>PyObject</name> *<name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_complex</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyComplex_AsCComplex</name><argument_list>(<argument><expr><name>PyObject</name> *<name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_COMPLEXOBJECT_H */</comment>
</unit>
