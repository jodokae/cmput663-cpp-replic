<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/funcobject.h">
<comment type="block">/* Function object interface */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_FUNCOBJECT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_FUNCOBJECT_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Function objects and code objects should not be confused with each other:
 *
 * Function objects are created by the execution of the 'def' statement.
 * They reference a code object in their func_code attribute, which is a
 * purely syntactic object, i.e. nothing more than a compiled version of some
 * source code lines.  There is one code object per source code "fragment",
 * but each code object can be referenced by zero or many function objects
 * depending only on how many times the 'def' statement in the source was
 * executed so far.
 */</comment>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>
    <name>PyObject</name> *</type><name>func_code</name></decl>;</decl_stmt>	<comment type="block">/* A code object */</comment>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>func_globals</name></decl>;</decl_stmt>	<comment type="block">/* A dictionary (other mappings won't do) */</comment>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>func_defaults</name></decl>;</decl_stmt>	<comment type="block">/* NULL or a tuple */</comment>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>func_closure</name></decl>;</decl_stmt>	<comment type="block">/* NULL or a tuple of cell objects */</comment>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>func_doc</name></decl>;</decl_stmt>		<comment type="block">/* The __doc__ attribute, can be anything */</comment>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>func_name</name></decl>;</decl_stmt>	<comment type="block">/* The __name__ attribute, a string object */</comment>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>func_dict</name></decl>;</decl_stmt>	<comment type="block">/* The __dict__ attribute, a dict or NULL */</comment>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>func_weakreflist</name></decl>;</decl_stmt>	<comment type="block">/* List of weak references */</comment>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>func_module</name></decl>;</decl_stmt>	<comment type="block">/* The __module__ attribute, can be anything */</comment>

    <comment type="block">/* Invariant:
     *     func_closure contains the bindings for func_code-&gt;co_freevars, so
     *     PyTuple_Size(func_closure) == PyCode_GetNumFree(func_code)
     *     (func_closure may be NULL if PyCode_GetNumFree(func_code) == 0).
     */</comment>
}</block></struct></type> <name>PyFunctionObject</name>;</typedef>

<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyFunction_Type</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyFunction_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;PyFunction_Type)</cpp:value></cpp:define>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFunction_New</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFunction_GetCode</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFunction_GetGlobals</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFunction_GetModule</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFunction_GetDefaults</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFunction_SetDefaults</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFunction_GetClosure</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFunction_SetClosure</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Macros for direct access to these values. Type checks are *not*
   done, so use with care. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyFunction_GET_CODE</name><parameter_list>(<param><type><name>func</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>(((PyFunctionObject *)func) -&gt; func_code)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyFunction_GET_GLOBALS</name><parameter_list>(<param><type><name>func</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value>(((PyFunctionObject *)func) -&gt; func_globals)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyFunction_GET_MODULE</name><parameter_list>(<param><type><name>func</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value>(((PyFunctionObject *)func) -&gt; func_module)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyFunction_GET_DEFAULTS</name><parameter_list>(<param><type><name>func</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value>(((PyFunctionObject *)func) -&gt; func_defaults)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyFunction_GET_CLOSURE</name><parameter_list>(<param><type><name>func</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value>(((PyFunctionObject *)func) -&gt; func_closure)</cpp:value></cpp:define>

<comment type="block">/* The classmethod and staticmethod types lives here, too */</comment>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyClassMethod_Type</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyStaticMethod_Type</name></expr>;</expr_stmt>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyClassMethod_New</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyStaticMethod_New</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_FUNCOBJECT_H */</comment>
</unit>
