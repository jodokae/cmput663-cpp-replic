<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/bufferobject.h">
<comment type="block">/* Buffer object interface */</comment>

<comment type="block">/* Note: the object's structure is private */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_BUFFEROBJECT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_BUFFEROBJECT_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyBuffer_Type</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBuffer_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;PyBuffer_Type)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_END_OF_BUFFER</name></cpp:macro>	<cpp:value>(-1)</cpp:value></cpp:define>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PyBuffer_FromObject</name><argument_list>(<argument>PyObject *base</argument>,
                                           <argument>Py_ssize_t offset</argument>, <argument>Py_ssize_t size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PyBuffer_FromReadWriteObject</name><argument_list>(<argument>PyObject *base</argument>,
                                                    <argument>Py_ssize_t offset</argument>,
                                                    <argument>Py_ssize_t size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PyBuffer_FromMemory</name><argument_list>(<argument>void *ptr</argument>, <argument>Py_ssize_t size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PyBuffer_FromReadWriteMemory</name><argument_list>(<argument>void *ptr</argument>, <argument>Py_ssize_t size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PyBuffer_New</name><argument_list>(<argument>Py_ssize_t size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_BUFFEROBJECT_H */</comment>
</unit>
