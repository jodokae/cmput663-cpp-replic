<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/weakrefobject.h"><comment type="block">/* Weak references objects for Python. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_WEAKREFOBJECT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_WEAKREFOBJECT_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type>struct <name>_PyWeakReference</name></type> <name>PyWeakReference</name>;</typedef>

<comment type="block">/* PyWeakReference is the base struct for the Python ReferenceType, ProxyType,
 * and CallableProxyType.
 */</comment>
<struct>struct <name>_PyWeakReference</name> <block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>

    <comment type="block">/* The object to which this is a weak reference, or Py_None if none.
     * Note that this is a stealth reference:  wr_object's refcount is
     * not incremented to reflect this pointer.
     */</comment>
    <name>PyObject</name> *</type><name>wr_object</name></decl>;</decl_stmt>

    <comment type="block">/* A callable to invoke when wr_object dies, or NULL if none. */</comment>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>wr_callback</name></decl>;</decl_stmt>

    <comment type="block">/* A cache for wr_object's hash code.  As usual for hashes, this is -1
     * if the hash code isn't known yet.
     */</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>hash</name></decl>;</decl_stmt>

    <comment type="block">/* If wr_object is weakly referenced, wr_object has a doubly-linked NULL-
     * terminated list of weak references to it.  These are the list pointers.
     * If wr_object goes away, wr_object is set to Py_None, and these pointers
     * have no meaning then.
     */</comment>
    <decl_stmt><decl><type><name>PyWeakReference</name> *</type><name>wr_prev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyWeakReference</name> *</type><name>wr_next</name></decl>;</decl_stmt>
}</block>;</struct>

<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>_PyWeakref_RefType</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>_PyWeakref_ProxyType</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>_PyWeakref_CallableProxyType</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyWeakref_CheckRef</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_TypeCheck(op, &amp;_PyWeakref_RefType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyWeakref_CheckRefExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>(Py_TYPE(op) == &amp;_PyWeakref_RefType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyWeakref_CheckProxy</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>((Py_TYPE(op) == &amp;_PyWeakref_ProxyType) || \
         (Py_TYPE(op) == &amp;_PyWeakref_CallableProxyType))</cpp:value></cpp:define>

<comment type="block">/* This macro calls PyWeakref_CheckRef() last since that can involve a
   function call; this makes it more likely that the function call
   will be avoided. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyWeakref_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>(PyWeakref_CheckRef(op) || PyWeakref_CheckProxy(op))</cpp:value></cpp:define>


<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyWeakref_NewRef</name><argument_list>(<argument><expr><name>PyObject</name> *<name>ob</name></expr></argument>,
                                              <argument><expr><name>PyObject</name> *<name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyWeakref_NewProxy</name><argument_list>(<argument><expr><name>PyObject</name> *<name>ob</name></expr></argument>,
                                                <argument><expr><name>PyObject</name> *<name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyWeakref_GetObject</name><argument_list>(<argument><expr><name>PyObject</name> *<name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyWeakref_GetWeakrefCount</name><argument_list>(<argument><expr><name>PyWeakReference</name> *<name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyWeakref_ClearRef</name><argument_list>(<argument><expr><name>PyWeakReference</name> *<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyWeakref_GET_OBJECT</name><parameter_list>(<param><type><name>ref</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((PyWeakReference *)(ref))-&gt;wr_object)</cpp:value></cpp:define>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_WEAKREFOBJECT_H */</comment>
</unit>
