<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/pystate.h">
<comment type="block">/* Thread and interpreter state structures and their interfaces */</comment>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_PYSTATE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_PYSTATE_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* State shared between threads */</comment>

<struct_decl>struct <name>_ts</name>;</struct_decl> <comment type="block">/* Forward */</comment>
<struct_decl>struct <name>_is</name>;</struct_decl> <comment type="block">/* Forward */</comment>

<typedef>typedef <type><struct>struct <name>_is</name> <block>{

    <decl_stmt><decl><type>struct <name>_is</name> *</type><name>next</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>_ts</name> *</type><name>tstate_head</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name> *</type><name>modules</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>sysdict</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>builtins</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>modules_reloading</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name> *</type><name>codec_search_path</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>codec_search_cache</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>codec_error_registry</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DLOPEN</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int</name></type> <name>dlopenflags</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WITH_TSC</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int</name></type> <name>tscdump</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>PyInterpreterState</name>;</typedef>


<comment type="block">/* State unique per thread */</comment>

<struct_decl>struct <name>_frame</name>;</struct_decl> <comment type="block">/* Avoid including frameobject.h */</comment>

<comment type="block">/* Py_tracefunc return -1 when raising an exception, or 0 for success. */</comment>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>Py_tracefunc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type>struct</type> <name>_frame</name> *</decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* The following values are used for 'what' for tracefunc functions: */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTrace_CALL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTrace_EXCEPTION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTrace_LINE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTrace_RETURN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTrace_C_CALL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTrace_C_EXCEPTION</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTrace_C_RETURN</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_ts</name> <block>{
    <comment type="block">/* See Python/ceval.c for comments explaining most fields */</comment>

    <decl_stmt><decl><type>struct <name>_ts</name> *</type><name>next</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyInterpreterState</name> *</type><name>interp</name></decl>;</decl_stmt>

    <decl_stmt><decl><type>struct <name>_frame</name> *</type><name>frame</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>recursion_depth</name></decl>;</decl_stmt>
    <comment type="block">/* 'tracing' keeps track of the execution depth when tracing/profiling.
       This is to prevent the actual trace/profile code from being recorded in
       the trace/profile. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>tracing</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>use_tracing</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Py_tracefunc</name></type> <name>c_profilefunc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_tracefunc</name></type> <name>c_tracefunc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>c_profileobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>c_traceobj</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name> *</type><name>curexc_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>curexc_value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>curexc_traceback</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name> *</type><name>exc_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>exc_value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>exc_traceback</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>  <comment type="block">/* Stores per-thread state */</comment>

    <comment type="block">/* tick_counter is incremented whenever the check_interval ticker
     * reaches zero. The purpose is to give a useful measure of the number
     * of interpreted bytecode instructions in a given thread.  This
     * extremely lightweight statistic collector may be of interest to
     * profilers (like psyco.jit()), although nothing in the core uses it.
     */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>tick_counter</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>gilstate_counter</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name> *</type><name>async_exc</name></decl>;</decl_stmt> <comment type="block">/* Asynchronous exception to raise */</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>thread_id</name></decl>;</decl_stmt> <comment type="block">/* Thread id where this tstate was created */</comment>

    <comment type="block">/* XXX signal handlers should also be here */</comment>

}</block></struct></type> <name>PyThreadState</name>;</typedef>


<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyInterpreterState *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyInterpreterState_New</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyInterpreterState_Clear</name><argument_list>(<argument><expr><name>PyInterpreterState</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyInterpreterState_Delete</name><argument_list>(<argument><expr><name>PyInterpreterState</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyThreadState *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyThreadState_New</name><argument_list>(<argument><expr><name>PyInterpreterState</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyThreadState_Clear</name><argument_list>(<argument><expr><name>PyThreadState</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyThreadState_Delete</name><argument_list>(<argument><expr><name>PyThreadState</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WITH_THREAD</name></cpp:ifdef>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyThreadState_DeleteCurrent</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyThreadState *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyThreadState_Get</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyThreadState *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyThreadState_Swap</name><argument_list>(<argument><expr><name>PyThreadState</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyThreadState_GetDict</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyThreadState_SetAsyncExc</name><argument_list>(<argument><expr><name>long</name></expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block">/* Variable and macro for in-line access to current thread state */</comment>

<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyThreadState *</argument>)</argument_list></macro> <expr_stmt><expr><name>_PyThreadState_Current</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_DEBUG</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyThreadState_GET</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>PyThreadState_Get()</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyThreadState_GET</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(_PyThreadState_Current)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef
    <type><enum>enum <block>{<decl><name>PyGILState_LOCKED</name></decl>, <decl><name>PyGILState_UNLOCKED</name></decl>}</block></enum></type>
        <name>PyGILState_STATE</name>;</typedef>

<comment type="block">/* Ensure that the current thread is ready to call the Python
   C API, regardless of the current state of Python, or of its
   thread lock.  This may be called as many times as desired
   by a thread so long as each call is matched with a call to
   PyGILState_Release().  In general, other thread-state APIs may
   be used between _Ensure() and _Release() calls, so long as the
   thread-state is restored to its previous state before the Release().
   For example, normal use of the Py_BEGIN_ALLOW_THREADS/
   Py_END_ALLOW_THREADS macros are acceptable.

   The return value is an opaque "handle" to the thread state when
   PyGILState_Ensure() was called, and must be passed to
   PyGILState_Release() to ensure Python is left in the same state. Even
   though recursive calls are allowed, these handles can *not* be shared -
   each unique call to PyGILState_Ensure must save the handle for its
   call to PyGILState_Release.

   When the function returns, the current thread will hold the GIL.

   Failure is a fatal error.
*/</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyGILState_STATE</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyGILState_Ensure</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Release any resources previously acquired.  After this call, Python's
   state will be the same as it was prior to the corresponding
   PyGILState_Ensure() call (but generally this state will be unknown to
   the caller, hence the use of the GILState API.)

   Every call to PyGILState_Ensure must be matched by a call to
   PyGILState_Release on the same thread.
*/</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyGILState_Release</name><argument_list>(<argument><expr><name>PyGILState_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Helper/diagnostic function - get the current thread state for
   this thread.  May return NULL if no GILState API has been used
   on the current thread.  Note the main thread always has such a
   thread-state, even if no auto-thread-state call has been made
   on the main thread.
*/</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyThreadState *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyGILState_GetThisThreadState</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* The implementation of sys._current_frames()  Returns a dict mapping
   thread id to that thread's current frame.
*/</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyThread_CurrentFrames</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Routines for advanced debuggers, requested by David Beazley.
   Don't use unless you know what you are doing! */</comment>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyInterpreterState *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyInterpreterState_Head</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyInterpreterState *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyInterpreterState_Next</name><argument_list>(<argument><expr><name>PyInterpreterState</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyThreadState *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyInterpreterState_ThreadHead</name><argument_list>(<argument><expr><name>PyInterpreterState</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyThreadState *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyThreadState_Next</name><argument_list>(<argument><expr><name>PyThreadState</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <function_decl><type>struct <name>_frame</name> *</type>(*<name>PyThreadFrameGetter</name>)<parameter_list>(<param><decl><type><name>PyThreadState</name> *</type><name>self_</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* hook for PyEval_GetFrame(), requested for Psyco */</comment>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyThreadFrameGetter</argument>)</argument_list></macro> <expr_stmt><expr><name>_PyThreadState_GetFrame</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_PYSTATE_H */</comment>
</unit>
