<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Include/descrobject.h"><comment type="block">/* Descriptors */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_DESCROBJECT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_DESCROBJECT_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>PyObject</name> *</type>(*<name>getter</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>setter</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>PyGetSetDef</name> <block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>getter</name></type> <name>get</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>setter</name></type> <name>set</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>doc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> *</type><name>closure</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyGetSetDef</name>;</typedef>

<typedef>typedef <function_decl><type><name>PyObject</name> *</type>(*<name>wrapperfunc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>,
				 <param><decl><type><name>void</name> *</type><name>wrapped</name></decl></param>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>PyObject</name> *</type>(*<name>wrapperfunc_kwds</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>,
				      <param><decl><type><name>void</name> *</type><name>wrapped</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>wrapperbase</name> <block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> *</type><name>function</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>wrapperfunc</name></type> <name>wrapper</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>doc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>name_strobj</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* Flags for above struct */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyWrapperFlag_KEYWORDS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* wrapper function takes keyword args */</comment>

<comment type="block">/* Various kinds of descriptor objects */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDescr_COMMON</name></cpp:macro> \
	<cpp:value>PyObject_HEAD \
	PyTypeObject *d_type; \
	PyObject *d_name</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
	<expr_stmt><expr><name>PyDescr_COMMON</name></expr>;</expr_stmt>
}</block></struct></type> <name>PyDescrObject</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
	<expr_stmt><expr><name>PyDescr_COMMON</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>PyMethodDef</name> *</type><name>d_method</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyMethodDescrObject</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
	<expr_stmt><expr><name>PyDescr_COMMON</name></expr>;</expr_stmt>
	<decl_stmt><decl><type>struct <name>PyMemberDef</name> *</type><name>d_member</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyMemberDescrObject</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
	<expr_stmt><expr><name>PyDescr_COMMON</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>PyGetSetDef</name> *</type><name>d_getset</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyGetSetDescrObject</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
	<expr_stmt><expr><name>PyDescr_COMMON</name></expr>;</expr_stmt>
	<decl_stmt><decl><type>struct <name>wrapperbase</name> *</type><name>d_base</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> *</type><name>d_wrapped</name></decl>;</decl_stmt> <comment type="block">/* This can be any function pointer */</comment>
}</block></struct></type> <name>PyWrapperDescrObject</name>;</typedef>

<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyWrapperDescr_Type</name></expr>;</expr_stmt>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDescr_NewMethod</name><argument_list>(<argument><expr><name>PyTypeObject</name> *</expr></argument>, <argument><expr><name>PyMethodDef</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDescr_NewClassMethod</name><argument_list>(<argument><expr><name>PyTypeObject</name> *</expr></argument>, <argument><expr><name>PyMethodDef</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDescr_NewMember</name><argument_list>(<argument><expr><name>PyTypeObject</name> *</expr></argument>,
					       <argument>struct <expr><name>PyMemberDef</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDescr_NewGetSet</name><argument_list>(<argument><expr><name>PyTypeObject</name> *</expr></argument>,
					       <argument>struct <expr><name>PyGetSetDef</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDescr_NewWrapper</name><argument_list>(<argument><expr><name>PyTypeObject</name> *</expr></argument>,
						<argument>struct <expr><name>wrapperbase</name> *</expr></argument>, <argument><expr><name>void</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDescr_IsData</name><parameter_list>(<param><type><name>d</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(d)-&gt;tp_descr_set != NULL)</cpp:value></cpp:define>

<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDictProxy_New</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyWrapper_New</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyProperty_Type</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_DESCROBJECT_H */</comment>

</unit>
