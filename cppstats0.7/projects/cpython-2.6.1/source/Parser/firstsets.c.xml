<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Parser/firstsets.c">
<comment type="block">/* Computation of FIRST stets */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgenheaders.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"grammar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"token.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Py_DebugFlag</name></decl>;</decl_stmt>

<comment type="block">/* Forward */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>calcfirstset</name><parameter_list>(<param><decl><type><name>grammar</name> *</type></decl></param>, <param><decl><type><name>dfa</name> *</type></decl></param>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>addfirstsets</name><parameter_list>(<param><decl><type><name>grammar</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>dfa</name> *</type><name>d</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>Py_DebugFlag</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Adding FIRST sets ...\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>g</name>-&gt;<name>g_ndfas</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
		<expr_stmt><expr><name>d</name> = &amp;<name><name>g</name>-&gt;<name>g_dfa</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>d</name>-&gt;<name>d_first</name></name> == <name>NULL</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>calcfirstset</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></for>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>calcfirstset</name><parameter_list>(<param><decl><type><name>grammar</name> *</type><name>g</name></decl></param>, <param><decl><type><name>dfa</name> *</type><name>d</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>state</name> *</type><name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>arc</name> *</type><name>a</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nsyms</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name> *</type><name>sym</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nbits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>bitset</name></type> <name>dummy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bitset</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>dfa</name> *</type><name>d1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>label</name> *</type><name>l0</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr><name>Py_DebugFlag</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Calculate FIRST set for '%s'\n"</expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	
	<if>if <condition>(<expr><name>dummy</name> == <name>NULL</name></expr>)</condition><then>
		<expr_stmt><expr><name>dummy</name> = <call><name>newbitset</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if>if <condition>(<expr><name><name>d</name>-&gt;<name>d_first</name></name> == <name>dummy</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Left-recursion for '%s'\n"</expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<if>if <condition>(<expr><name><name>d</name>-&gt;<name>d_first</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Re-calculating FIRST set for '%s' ???\n"</expr></argument>,
			<argument><expr><name><name>d</name>-&gt;<name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name><name>d</name>-&gt;<name>d_first</name></name> = <name>dummy</name></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>l0</name> = <name><name>g</name>-&gt;<name>g_ll</name>.<name>ll_label</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nbits</name> = <name><name>g</name>-&gt;<name>g_ll</name>.<name>ll_nlabels</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> = <call><name>newbitset</name><argument_list>(<argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>sym</name> = (<name>int</name> *)<call><name>PyObject_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>sym</name> == <name>NULL</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"no mem for new sym in calcfirstset"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name>nsyms</name> = 1</expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sym</name><index>[<expr>0</expr>]</index></name> = <call><name>findlabel</name><argument_list>(<argument><expr>&amp;<name><name>g</name>-&gt;<name>g_ll</name></name></expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>d_type</name></name></expr></argument>, <argument><expr>(<name>char</name> *)<name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>s</name> = &amp;<name><name>d</name>-&gt;<name>d_state</name><index>[<expr><name><name>d</name>-&gt;<name>d_initial</name></name></expr>]</index></name></expr>;</expr_stmt>
	<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>s</name>-&gt;<name>s_narcs</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
		<expr_stmt><expr><name>a</name> = &amp;<name><name>s</name>-&gt;<name>s_arc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>nsyms</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
			<if>if <condition>(<expr><name><name>sym</name><index>[<expr><name>j</name></expr>]</index></name> == <name><name>a</name>-&gt;<name>a_lbl</name></name></expr>)</condition><then>
				<break>break;</break></then></if>
		}</block></for>
		<if>if <condition>(<expr><name>j</name> &gt;= <name>nsyms</name></expr>)</condition><then> <block>{ <comment type="block">/* New label */</comment>
			<expr_stmt><expr><name>sym</name> = (<name>int</name> *)<call><name>PyObject_REALLOC</name><argument_list>(<argument><expr><name>sym</name></expr></argument>, 
                                                <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> * (<name>nsyms</name> + 1)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>sym</name> == <name>NULL</name></expr>)</condition><then>
				<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(
				    <argument><expr>"no mem to resize sym in calcfirstset"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><name><name>sym</name><index>[<expr><name>nsyms</name>++</expr>]</index></name> = <name><name>a</name>-&gt;<name>a_lbl</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>type</name> = <name><name>l0</name><index>[<expr><name><name>a</name>-&gt;<name>a_lbl</name></name></expr>]</index></name>.<name>lb_type</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><call><name>ISNONTERMINAL</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>d1</name> = <call><name>PyGrammar_FindDFA</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if <condition>(<expr><name><name>d1</name>-&gt;<name>d_first</name></name> == <name>dummy</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
						<argument><expr>"Left-recursion below '%s'\n"</expr></argument>,
						<argument><expr><name><name>d</name>-&gt;<name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<else>else <block>{
					<if>if <condition>(<expr><name><name>d1</name>-&gt;<name>d_first</name></name> == <name>NULL</name></expr>)</condition><then>
						<expr_stmt><expr><call><name>calcfirstset</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
					<expr_stmt><expr><call><name>mergebitset</name><argument_list>(<argument><expr><name>result</name></expr></argument>,
						    <argument><expr><name><name>d1</name>-&gt;<name>d_first</name></name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then>
			<else>else <if>if <condition>(<expr><call><name>ISTERMINAL</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>addbit</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>a</name>-&gt;<name>a_lbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><name><name>d</name>-&gt;<name>d_first</name></name> = <name>result</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>Py_DebugFlag</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"FIRST set for '%s': {"</expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nbits</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
			<if>if <condition>(<expr><call><name>testbit</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" %s"</expr></argument>, <argument><expr><call><name>PyGrammar_LabelRepr</name><argument_list>(<argument><expr>&amp;<name><name>l0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" }\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<expr_stmt><expr><call><name>PyObject_FREE</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
