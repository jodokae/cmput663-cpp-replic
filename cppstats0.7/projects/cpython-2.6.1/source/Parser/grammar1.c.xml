<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Parser/grammar1.c">
<comment type="block">/* Grammar subroutines needed by parser */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgenheaders.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"grammar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"token.h"</cpp:file></cpp:include>

<comment type="block">/* Return the DFA for the given type */</comment>

<function><type><name>dfa</name> *</type>
<name>PyGrammar_FindDFA</name><parameter_list>(<param><decl><type><name>grammar</name> *</type><name>g</name></decl></param>, <param><decl><type><name>register</name> <name>int</name></type> <name>type</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>register</name> <name>dfa</name> *</type><name>d</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>1</expr></cpp:if>
	<comment type="block">/* Massive speed-up */</comment>
	<expr_stmt><expr><name>d</name> = &amp;<name><name>g</name>-&gt;<name>g_dfa</name><index>[<expr><name>type</name> - <name>NT_OFFSET</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>d</name>-&gt;<name>d_type</name></name> == <name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>d</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/* Old, slow version */</comment>
	<decl_stmt><decl><type><name>register</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
	
	<for>for (<init><expr><name>i</name> = <name><name>g</name>-&gt;<name>g_ndfas</name></name></expr>, <expr><name>d</name> = <name><name>g</name>-&gt;<name>g_dfa</name></name></expr>;</init> <condition><expr>--<name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>d</name>++</expr></incr>) <block>{
		<if>if <condition>(<expr><name><name>d</name>-&gt;<name>d_type</name></name> == <name>type</name></expr>)</condition><then>
			<return>return <expr><name>d</name></expr>;</return></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* NOTREACHED */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name>char</name> *</type>
<name>PyGrammar_LabelRepr</name><parameter_list>(<param><decl><type><name>label</name> *</type><name>lb</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr><name><name>lb</name>-&gt;<name>lb_type</name></name> == <name>ENDMARKER</name></expr>)</condition><then>
		<return>return <expr>"EMPTY"</expr>;</return></then>
	<else>else <if>if <condition>(<expr><call><name>ISNONTERMINAL</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>lb_type</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name><name>lb</name>-&gt;<name>lb_str</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"NT%d"</expr></argument>, <argument><expr><name><name>lb</name>-&gt;<name>lb_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>buf</name></expr>;</return>
		}</block></then>
		<else>else
			<return>return <expr><name><name>lb</name>-&gt;<name>lb_str</name></name></expr>;</return></else></if>
	}</block></then>
	<else>else <block>{
		<if>if <condition>(<expr><name><name>lb</name>-&gt;<name>lb_str</name></name> == <name>NULL</name></expr>)</condition><then>
			<return>return <expr><name><name>_PyParser_TokenNames</name><index>[<expr><name><name>lb</name>-&gt;<name>lb_type</name></name></expr>]</index></name></expr>;</return></then>
		<else>else <block>{
			<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%.32s(%.32s)"</expr></argument>,
				<argument><expr><name><name>_PyParser_TokenNames</name><index>[<expr><name><name>lb</name>-&gt;<name>lb_type</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>lb</name>-&gt;<name>lb_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>buf</name></expr>;</return>
		}</block></else></if>
	}</block></else></if></else></if>
}</block></function>
</unit>
