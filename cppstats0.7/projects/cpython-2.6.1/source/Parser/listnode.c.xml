<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Parser/listnode.c">
<comment type="block">/* List a node on a file */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgenheaders.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"token.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"node.h"</cpp:file></cpp:include>

<comment type="block">/* Forward */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>list1node</name><parameter_list>(<param><decl><type><name>FILE</name> *</type></decl></param>, <param><decl><type><name>node</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>listnode</name><parameter_list>(<param><decl><type><name>FILE</name> *</type></decl></param>, <param><decl><type><name>node</name> *</type></decl></param>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>PyNode_ListTree</name><parameter_list>(<param><decl><type><name>node</name> *</type><name>n</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>listnode</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>atbol</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>listnode</name><parameter_list>(<param><decl><type><name>FILE</name> *</type><name>fp</name></decl></param>, <param><decl><type><name>node</name> *</type><name>n</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><name>level</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name>atbol</name> = 1</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>list1node</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>list1node</name><parameter_list>(<param><decl><type><name>FILE</name> *</type><name>fp</name></decl></param>, <param><decl><type><name>node</name> *</type><name>n</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>n</name> == 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<if>if <condition>(<expr><call><name>ISNONTERMINAL</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>NCH</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
			<expr_stmt><expr><call><name>list1node</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><call><name>CHILD</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
	}</block></then>
	<else>else <if>if <condition>(<expr><call><name>ISTERMINAL</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
		<case>case <expr><name>INDENT</name></expr>:
			<expr_stmt><expr>++<name>level</name></expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>DEDENT</name></expr>:
			<expr_stmt><expr>--<name>level</name></expr>;</expr_stmt>
			<break>break;</break>
		</case><default>default:
			<if>if <condition>(<expr><name>atbol</name></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
				<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>level</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>"\t"</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
				<expr_stmt><expr><name>atbol</name> = 0</expr>;</expr_stmt>
			}</block></then></if>
			<if>if <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> == <name>NEWLINE</name></expr>)</condition><then> <block>{
				<if>if <condition>(<expr><call><name>STR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>atbol</name> = 1</expr>;</expr_stmt>
			}</block></then>
			<else>else
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>"%s "</expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			<break>break;</break>
		</default>}</block></switch>
	}</block></then>
	<else>else
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>"? "</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
}</block></function>
</unit>
