<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Parser/pgenmain.c">
<comment type="block">/* Parser generator main program */</comment>

<comment type="block">/* This expects a filename containing the grammar as argv[1] (UNIX)
   or asks the console for such a file name (THINK C).
   It writes its output on two files in the current directory:
   - "graminit.c" gets the grammar as a bunch of initialized data
   - "graminit.h" gets the grammar's non-terminals as #defines.
   Error messages and status info during the generation process are
   written to stdout, or sometimes to stderr. */</comment>

<comment type="block">/* XXX TO DO:
   - check for duplicate definitions of names (instead of fatal err)
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgenheaders.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"grammar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parsetok.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgen.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type> <name>Py_DebugFlag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Py_VerboseFlag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Py_IgnoreEnvironmentFlag</name></decl>;</decl_stmt>

<comment type="block">/* Forward */</comment>
<function_decl><type><name>grammar</name> *</type><name>getgrammar</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>filename</name></decl></param>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>Py_Exit</name><parameter_list>(<param><decl><type><name>int</name></type> <name>sts</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>sts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>grammar</name> *</type><name>g</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name> *</type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>filename</name></decl>, *<decl><type ref="prev"/><name>graminit_h</name></decl>, *<decl><type ref="prev"/><name>graminit_c</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr><name>argc</name> != 4</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
			<argument><expr>"usage: %s grammar graminit.h graminit.c\n"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_Exit</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name>filename</name> = <name><name>argv</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>graminit_h</name> = <name><name>argv</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>graminit_c</name> = <name><name>argv</name><index>[<expr>3</expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>g</name> = <call><name>getgrammar</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fp</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>graminit_c</name></expr></argument>, <argument><expr>"w"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>fp</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>graminit_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_Exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if>if <condition>(<expr><name>Py_DebugFlag</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Writing %s ...\n"</expr></argument>, <argument><expr><name>graminit_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>printgrammar</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fp</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>graminit_h</name></expr></argument>, <argument><expr>"w"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>fp</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>graminit_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_Exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if>if <condition>(<expr><name>Py_DebugFlag</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Writing %s ...\n"</expr></argument>, <argument><expr><name>graminit_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>printnonterminals</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_Exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>0</expr>;</return> <comment type="block">/* Make gcc -Wall happy */</comment>
}</block></function>

<function><type><name>grammar</name> *</type>
<name>getgrammar</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>filename</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>FILE</name> *</type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>node</name> *</type><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>grammar</name> *</type><name>g0</name></decl>, *<decl><type ref="prev"/><name>g</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>perrdetail</name></type> <name>err</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>fp</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr>"r"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>fp</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_Exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name>g0</name> = <call><name>meta_grammar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> = <call><name>PyParser_ParseFile</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>g0</name></expr></argument>, <argument><expr><name><name>g0</name>-&gt;<name>g_start</name></name></expr></argument>,
		      <argument><expr>(<name>char</name> *)<name>NULL</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>NULL</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>n</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Parsing error %d, line %d.\n"</expr></argument>,
			<argument><expr><name><name>err</name>.<name>error</name></name></expr></argument>, <argument><expr><name><name>err</name>.<name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>err</name>.<name>text</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name><name>err</name>.<name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>err</name>.<name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>i</name> == 0 || <name><name>err</name>.<name>text</name><index>[<expr><name>i</name>-1</expr>]</index></name> != '\n'</expr>)</condition><then>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>err</name>.<name>offset</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
				<if>if <condition>(<expr><name><name>err</name>.<name>text</name><index>[<expr><name>i</name></expr>]</index></name> == '\t'</expr>)</condition><then>
					<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr>'\t'</expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else>else
					<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr>' '</expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			}</block></for>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"^\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PyObject_FREE</name><argument_list>(<argument><expr><name><name>err</name>.<name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name>Py_Exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name>g</name> = <call><name>pgen</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>g</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Bad grammar.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_Exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return>return <expr><name>g</name></expr>;</return>
}</block></function>

<comment type="block">/* Can't happen in pgen */</comment>
<function><type><name>PyObject</name>*</type>
<name>PyErr_Occurred</name><parameter_list>()</parameter_list>
<block>{
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name>Py_FatalError</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"pgen: FATAL ERROR: %s\n"</expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_Exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* No-nonsense my_readline() for tokenizer.c */</comment>

<function><type><name>char</name> *</type>
<name>PyOS_Readline</name><parameter_list>(<param><decl><type><name>FILE</name> *</type><name>sys_stdin</name></decl></param>, <param><decl><type><name>FILE</name> *</type><name>sys_stdout</name></decl></param>, <param><decl><type><name>char</name> *</type><name>prompt</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr>1000</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>p</name> <init>= <expr>(<name>char</name> *)<call><name>PyMem_MALLOC</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>q</name></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>q</name> = <call><name>fgets</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>sys_stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>q</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr>*<name>p</name> = '\0'</expr>;</expr_stmt>
		<return>return <expr><name>p</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>n</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>n</name> &gt; 0 &amp;&amp; <name><name>p</name><index>[<expr><name>n</name>-1</expr>]</index></name> != '\n'</expr>)</condition><then>
		<expr_stmt><expr><name><name>p</name><index>[<expr><name>n</name>-1</expr>]</index></name> = '\n'</expr>;</expr_stmt></then></if>
	<return>return <expr>(<name>char</name> *)<call><name>PyMem_REALLOC</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name>+1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* No-nonsense fgets */</comment>
<function><type><name>char</name> *</type>
<name>Py_UniversalNewlineFgets</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>FILE</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>fobj</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>PySys_WriteStderr</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>format</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
