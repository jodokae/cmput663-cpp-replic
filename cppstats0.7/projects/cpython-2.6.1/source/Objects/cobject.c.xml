<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Objects/cobject.c">
<comment type="block">/* Wrap void* pointers to be passed between C modules */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>


<comment type="block">/* Declarations for objects of type PyCObject */</comment>

<typedef>typedef <function_decl><type><name>void</name></type> (*<name>destructor1</name>)<parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (*<name>destructor2</name>)<parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl></typedef>

<function><type><name>PyObject</name> *</type>
<name>PyCObject_FromVoidPtr</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>cobj</name></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>destr</name>)<parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyCObject</name> *</type><name>self</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>self</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>PyCObject</name></expr></argument>, <argument><expr>&amp;<name>PyCObject_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>cobject</name></name>=<name>cobj</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>destructor</name></name>=<name>destr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>desc</name></name>=<name>NULL</name></expr>;</expr_stmt>

    <return>return <expr>(<name>PyObject</name> *)<name>self</name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name> *</type>
<name>PyCObject_FromVoidPtrAndDesc</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>cobj</name></decl></param>, <param><decl><type><name>void</name> *</type><name>desc</name></decl></param>,
                             <param><function_decl><type><name>void</name></type> (*<name>destr</name>)<parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyCObject</name> *</type><name>self</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>desc</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                        <argument><expr>"PyCObject_FromVoidPtrAndDesc called with null"
                        " description"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>self</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>PyCObject</name></expr></argument>, <argument><expr>&amp;<name>PyCObject_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>cobject</name></name> = <name>cobj</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>destructor</name></name> = (<name>destructor1</name>)<name>destr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>desc</name></name> = <name>desc</name></expr>;</expr_stmt>

    <return>return <expr>(<name>PyObject</name> *)<name>self</name></expr>;</return>
}</block></function>

<function><type><name>void</name> *</type>
<name>PyCObject_AsVoidPtr</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>self</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_type</name></name> == &amp;<name>PyCObject_Type</name></expr>)</condition><then>
            <return>return <expr>((<name>PyCObject</name> *)<name>self</name>)-&gt;<name>cobject</name></expr>;</return></then></if>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                        <argument><expr>"PyCObject_AsVoidPtr with non-C-object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr>!<call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                        <argument><expr>"PyCObject_AsVoidPtr called with null pointer"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><name>void</name> *</type>
<name>PyCObject_GetDesc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>self</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_type</name></name> == &amp;<name>PyCObject_Type</name></expr>)</condition><then>
            <return>return <expr>((<name>PyCObject</name> *)<name>self</name>)-&gt;<name>desc</name></expr>;</return></then></if>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                        <argument><expr>"PyCObject_GetDesc with non-C-object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr>!<call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                        <argument><expr>"PyCObject_GetDesc called with null pointer"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><name>void</name> *</type>
<name>PyCObject_Import</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>module_name</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> *</type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name>m</name> = <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr><name>module_name</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
        <if>if <condition>(<expr>(<name>c</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>r</name> = <call><name>PyCObject_AsVoidPtr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>r</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>PyCObject_SetVoidPtr</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>cobj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyCObject</name>*</type> <name>cself</name> <init>= <expr>(<name>PyCObject</name>*)<name>self</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>cself</name> == <name>NULL</name> || !<call><name>PyCObject_Check</name><argument_list>(<argument><expr><name>cself</name></expr></argument>)</argument_list></call> ||
	<name><name>cself</name>-&gt;<name>destructor</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, 
			<argument><expr>"Invalid call to PyCObject_SetVoidPtr"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>0</expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>cself</name>-&gt;<name>cobject</name></name> = <name>cobj</name></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>PyCObject_dealloc</name><parameter_list>(<param><decl><type><name>PyCObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>destructor</name></name></expr>)</condition><then> <block>{
        <if>if<condition>(<expr><name><name>self</name>-&gt;<name>desc</name></name></expr>)</condition><then>
            <expr_stmt><expr>(<call>(<name>destructor2</name>)<argument_list>(<argument><expr><name><name>self</name>-&gt;<name>destructor</name></name></expr></argument>)</argument_list></call>)(<name><name>self</name>-&gt;<name>cobject</name></name>, <name><name>self</name>-&gt;<name>desc</name></name>)</expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><call>(<name><name>self</name>-&gt;<name>destructor</name></name>)<argument_list>(<argument><expr><name><name>self</name>-&gt;<name>cobject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then></if>
    <expr_stmt><expr><call><name>PyObject_DEL</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>PyCObject_Type__doc__</name></expr></argument>,
<argument><expr>"C objects to be exported from one extension module to another\n\
\n\
C objects are used for communication between extension modules.  They\n\
provide a way for an extension module to export a C interface to other\n\
extension modules, so that extension modules can use the Python import\n\
mechanism to link to one another."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyCObject_Type</name> <init>= <expr><block>{
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
    "PyCObject"</expr>,		<comment type="block">/*tp_name*/</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyCObject</name></expr></argument>)</argument_list></sizeof></expr>,		<comment type="block">/*tp_basicsize*/</comment>
    <expr>0</expr>,				<comment type="block">/*tp_itemsize*/</comment>
    <comment type="block">/* methods */</comment>
    <expr>(<name>destructor</name>)<name>PyCObject_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
    <expr>0</expr>,				<comment type="block">/*tp_print*/</comment>
    <expr>0</expr>,				<comment type="block">/*tp_getattr*/</comment>
    <expr>0</expr>,				<comment type="block">/*tp_setattr*/</comment>
    <expr>0</expr>,				<comment type="block">/*tp_compare*/</comment>
    <expr>0</expr>,				<comment type="block">/*tp_repr*/</comment>
    <expr>0</expr>,				<comment type="block">/*tp_as_number*/</comment>
    <expr>0</expr>,				<comment type="block">/*tp_as_sequence*/</comment>
    <expr>0</expr>,				<comment type="block">/*tp_as_mapping*/</comment>
    <expr>0</expr>,				<comment type="block">/*tp_hash*/</comment>
    <expr>0</expr>,				<comment type="block">/*tp_call*/</comment>
    <expr>0</expr>,				<comment type="block">/*tp_str*/</comment>
    <expr>0</expr>,				<comment type="block">/*tp_getattro*/</comment>
    <expr>0</expr>,				<comment type="block">/*tp_setattro*/</comment>
    <expr>0</expr>,				<comment type="block">/*tp_as_buffer*/</comment>
    <expr>0</expr>,				<comment type="block">/*tp_flags*/</comment>
    <expr><name>PyCObject_Type__doc__</name></expr>	<comment type="block">/*tp_doc*/</comment>
}</block></expr></init></decl>;</decl_stmt>
</unit>
