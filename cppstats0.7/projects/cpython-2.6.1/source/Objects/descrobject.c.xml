<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Objects/descrobject.c"><comment type="block">/* Descriptors -- a new, flexible way to describe attributes */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include> <comment type="block">/* Why is this not included in Python.h? */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>descr_dealloc</name><parameter_list>(<param><decl><type><name>PyDescrObject</name> *</type><name>descr</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>_PyObject_GC_UNTRACK</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>descr</name>-&gt;<name>d_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>descr</name>-&gt;<name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyObject_GC_Del</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>char</name> *</type>
<name>descr_name</name><parameter_list>(<param><decl><type><name>PyDescrObject</name> *</type><name>descr</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>descr</name>-&gt;<name>d_name</name></name> != <name>NULL</name> &amp;&amp; <call><name>PyString_Check</name><argument_list>(<argument><expr><name><name>descr</name>-&gt;<name>d_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>descr</name>-&gt;<name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</return></then>
	<else>else
		<return>return <expr>"?"</expr>;</return></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>descr_repr</name><parameter_list>(<param><decl><type><name>PyDescrObject</name> *</type><name>descr</name></decl></param>, <param><decl><type><name>char</name> *</type><name>format</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><call><name>descr_name</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><name><name>descr</name>-&gt;<name>d_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>method_repr</name><parameter_list>(<param><decl><type><name>PyMethodDescrObject</name> *</type><name>descr</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>descr_repr</name><argument_list>(<argument><expr>(<name>PyDescrObject</name> *)<name>descr</name></expr></argument>, 
			  <argument><expr>"&lt;method '%s' of '%s' objects&gt;"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>member_repr</name><parameter_list>(<param><decl><type><name>PyMemberDescrObject</name> *</type><name>descr</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>descr_repr</name><argument_list>(<argument><expr>(<name>PyDescrObject</name> *)<name>descr</name></expr></argument>, 
			  <argument><expr>"&lt;member '%s' of '%s' objects&gt;"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>getset_repr</name><parameter_list>(<param><decl><type><name>PyGetSetDescrObject</name> *</type><name>descr</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>descr_repr</name><argument_list>(<argument><expr>(<name>PyDescrObject</name> *)<name>descr</name></expr></argument>, 
			  <argument><expr>"&lt;attribute '%s' of '%s' objects&gt;"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>wrapperdescr_repr</name><parameter_list>(<param><decl><type><name>PyWrapperDescrObject</name> *</type><name>descr</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>descr_repr</name><argument_list>(<argument><expr>(<name>PyDescrObject</name> *)<name>descr</name></expr></argument>, 
			  <argument><expr>"&lt;slot wrapper '%s' of '%s' objects&gt;"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>descr_check</name><parameter_list>(<param><decl><type><name>PyDescrObject</name> *</type><name>descr</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> **</type><name>pres</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>obj</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr>*<name>pres</name> = (<name>PyObject</name> *)<name>descr</name></expr>;</expr_stmt>
		<return>return <expr>1</expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr>!<call><name>PyObject_TypeCheck</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>descr</name>-&gt;<name>d_type</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
			     <argument><expr>"descriptor '%s' for '%s' objects "
			     "doesn't apply to '%s' object"</expr></argument>,
			     <argument><expr><call><name>descr_name</name><argument_list>(<argument><expr>(<name>PyDescrObject</name> *)<name>descr</name></expr></argument>)</argument_list></call></expr></argument>,
			     <argument><expr><name><name>descr</name>-&gt;<name>d_type</name>-&gt;<name>tp_name</name></name></expr></argument>,
			     <argument><expr><name><name>obj</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr>*<name>pres</name> = <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr>1</expr>;</return>
	}</block></then></if>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>classmethod_get</name><parameter_list>(<param><decl><type><name>PyMethodDescrObject</name> *</type><name>descr</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>type</name></decl></param>)</parameter_list>
<block>{
	<comment type="block">/* Ensure a valid type.  Class methods ignore obj. */</comment>
	<if>if <condition>(<expr><name>type</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name>obj</name> != <name>NULL</name></expr>)</condition><then>
			<expr_stmt><expr><name>type</name> = (<name>PyObject</name> *)<name><name>obj</name>-&gt;<name>ob_type</name></name></expr>;</expr_stmt></then>
		<else>else <block>{
			<comment type="block">/* Wot - no type?! */</comment>
			<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
				     <argument><expr>"descriptor '%s' for type '%s' "
				     "needs either an object or a type"</expr></argument>,
				     <argument><expr><call><name>descr_name</name><argument_list>(<argument><expr>(<name>PyDescrObject</name> *)<name>descr</name></expr></argument>)</argument_list></call></expr></argument>,
				     <argument><expr><name><name>descr</name>-&gt;<name>d_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		}</block></else></if>
	}</block></then></if>
	<if>if <condition>(<expr>!<call><name>PyType_Check</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
			     <argument><expr>"descriptor '%s' for type '%s' "
			     "needs a type, not a '%s' as arg 2"</expr></argument>,
			     <argument><expr><call><name>descr_name</name><argument_list>(<argument><expr>(<name>PyDescrObject</name> *)<name>descr</name></expr></argument>)</argument_list></call></expr></argument>,
			     <argument><expr><name><name>descr</name>-&gt;<name>d_type</name>-&gt;<name>tp_name</name></name></expr></argument>,
			     <argument><expr><name><name>type</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr>!<call><name>PyType_IsSubtype</name><argument_list>(<argument><expr>(<name>PyTypeObject</name> *)<name>type</name></expr></argument>, <argument><expr><name><name>descr</name>-&gt;<name>d_type</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
			     <argument><expr>"descriptor '%s' for type '%s' "
			     "doesn't apply to type '%s'"</expr></argument>,
			     <argument><expr><call><name>descr_name</name><argument_list>(<argument><expr>(<name>PyDescrObject</name> *)<name>descr</name></expr></argument>)</argument_list></call></expr></argument>,
			     <argument><expr><name><name>descr</name>-&gt;<name>d_type</name>-&gt;<name>tp_name</name></name></expr></argument>,
			     <argument><expr>((<name>PyTypeObject</name> *)<name>type</name>)-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>PyCFunction_New</name><argument_list>(<argument><expr><name><name>descr</name>-&gt;<name>d_method</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>method_get</name><parameter_list>(<param><decl><type><name>PyMethodDescrObject</name> *</type><name>descr</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>type</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><call><name>descr_check</name><argument_list>(<argument><expr>(<name>PyDescrObject</name> *)<name>descr</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>res</name></expr>;</return></then></if>
	<return>return <expr><call><name>PyCFunction_New</name><argument_list>(<argument><expr><name><name>descr</name>-&gt;<name>d_method</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>member_get</name><parameter_list>(<param><decl><type><name>PyMemberDescrObject</name> *</type><name>descr</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>type</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><call><name>descr_check</name><argument_list>(<argument><expr>(<name>PyDescrObject</name> *)<name>descr</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>res</name></expr>;</return></then></if>
	<return>return <expr><call><name>PyMember_GetOne</name><argument_list>(<argument><expr>(<name>char</name> *)<name>obj</name></expr></argument>, <argument><expr><name><name>descr</name>-&gt;<name>d_member</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>getset_get</name><parameter_list>(<param><decl><type><name>PyGetSetDescrObject</name> *</type><name>descr</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>type</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><call><name>descr_check</name><argument_list>(<argument><expr>(<name>PyDescrObject</name> *)<name>descr</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>res</name></expr>;</return></then></if>
	<if>if <condition>(<expr><name><name>descr</name>-&gt;<name>d_getset</name>-&gt;<name>get</name></name> != <name>NULL</name></expr>)</condition><then>
		<return>return <expr><call><name><name>descr</name>-&gt;<name>d_getset</name>-&gt;<name>get</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>descr</name>-&gt;<name>d_getset</name>-&gt;<name>closure</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>,
		     <argument><expr>"attribute '%.300s' of '%.100s' objects is not readable"</expr></argument>,
		     <argument><expr><call><name>descr_name</name><argument_list>(<argument><expr>(<name>PyDescrObject</name> *)<name>descr</name></expr></argument>)</argument_list></call></expr></argument>,
		     <argument><expr><name><name>descr</name>-&gt;<name>d_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>wrapperdescr_get</name><parameter_list>(<param><decl><type><name>PyWrapperDescrObject</name> *</type><name>descr</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>type</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><call><name>descr_check</name><argument_list>(<argument><expr>(<name>PyDescrObject</name> *)<name>descr</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>res</name></expr>;</return></then></if>
	<return>return <expr><call><name>PyWrapper_New</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>descr</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>descr_setcheck</name><parameter_list>(<param><decl><type><name>PyDescrObject</name> *</type><name>descr</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>value</name></decl></param>,
	       <param><decl><type><name>int</name> *</type><name>pres</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>obj</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<call><name>PyObject_TypeCheck</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>descr</name>-&gt;<name>d_type</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
			     <argument><expr>"descriptor '%.200s' for '%.100s' objects "
			     "doesn't apply to '%.100s' object"</expr></argument>,
			     <argument><expr><call><name>descr_name</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr></argument>,
			     <argument><expr><name><name>descr</name>-&gt;<name>d_type</name>-&gt;<name>tp_name</name></name></expr></argument>,
			     <argument><expr><name><name>obj</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr>*<name>pres</name> = -1</expr>;</expr_stmt>
		<return>return <expr>1</expr>;</return>
	}</block></then></if>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>member_set</name><parameter_list>(<param><decl><type><name>PyMemberDescrObject</name> *</type><name>descr</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>value</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><call><name>descr_setcheck</name><argument_list>(<argument><expr>(<name>PyDescrObject</name> *)<name>descr</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr>&amp;<name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>res</name></expr>;</return></then></if>
	<return>return <expr><call><name>PyMember_SetOne</name><argument_list>(<argument><expr>(<name>char</name> *)<name>obj</name></expr></argument>, <argument><expr><name><name>descr</name>-&gt;<name>d_member</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>getset_set</name><parameter_list>(<param><decl><type><name>PyGetSetDescrObject</name> *</type><name>descr</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>value</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><call><name>descr_setcheck</name><argument_list>(<argument><expr>(<name>PyDescrObject</name> *)<name>descr</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr>&amp;<name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>res</name></expr>;</return></then></if>
	<if>if <condition>(<expr><name><name>descr</name>-&gt;<name>d_getset</name>-&gt;<name>set</name></name> != <name>NULL</name></expr>)</condition><then>
		<return>return <expr><call><name><name>descr</name>-&gt;<name>d_getset</name>-&gt;<name>set</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>value</name></expr></argument>,
					    <argument><expr><name><name>descr</name>-&gt;<name>d_getset</name>-&gt;<name>closure</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>,
		     <argument><expr>"attribute '%.300s' of '%.100s' objects is not writable"</expr></argument>,
		     <argument><expr><call><name>descr_name</name><argument_list>(<argument><expr>(<name>PyDescrObject</name> *)<name>descr</name></expr></argument>)</argument_list></call></expr></argument>,
		     <argument><expr><name><name>descr</name>-&gt;<name>d_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>-1</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>methoddescr_call</name><parameter_list>(<param><decl><type><name>PyMethodDescrObject</name> *</type><name>descr</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>argc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>, *<decl><type ref="prev"/><name>func</name></decl>, *<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

	<comment type="block">/* Make sure that the first argument is acceptable as 'self' */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>argc</name> = <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>argc</name> &lt; 1</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
			     <argument><expr>"descriptor '%.300s' of '%.100s' "
			     "object needs an argument"</expr></argument>,
			     <argument><expr><call><name>descr_name</name><argument_list>(<argument><expr>(<name>PyDescrObject</name> *)<name>descr</name></expr></argument>)</argument_list></call></expr></argument>,
			     <argument><expr><name><name>descr</name>-&gt;<name>d_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>self</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call>(<name>PyObject</name> *)<argument_list>(<argument><expr><name><name>descr</name>-&gt;<name>d_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
			     <argument><expr>"descriptor '%.200s' "
			     "requires a '%.100s' object "
			     "but received a '%.100s'"</expr></argument>,
			     <argument><expr><call><name>descr_name</name><argument_list>(<argument><expr>(<name>PyDescrObject</name> *)<name>descr</name></expr></argument>)</argument_list></call></expr></argument>,
			     <argument><expr><name><name>descr</name>-&gt;<name>d_type</name>-&gt;<name>tp_name</name></name></expr></argument>,
			     <argument><expr><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><name>func</name> = <call><name>PyCFunction_New</name><argument_list>(<argument><expr><name><name>descr</name>-&gt;<name>d_method</name></name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>func</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>args</name> = <call><name>PyTuple_GetSlice</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>args</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>result</name> = <call><name>PyEval_CallObjectWithKeywords</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>classmethoddescr_call</name><parameter_list>(<param><decl><type><name>PyMethodDescrObject</name> *</type><name>descr</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>,
		      <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>func</name></decl>, *<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>func</name> = <call><name>PyCFunction_New</name><argument_list>(<argument><expr><name><name>descr</name>-&gt;<name>d_method</name></name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name><name>descr</name>-&gt;<name>d_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>func</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>result</name> = <call><name>PyEval_CallObjectWithKeywords</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>wrapperdescr_call</name><parameter_list>(<param><decl><type><name>PyWrapperDescrObject</name> *</type><name>descr</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>argc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>, *<decl><type ref="prev"/><name>func</name></decl>, *<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

	<comment type="block">/* Make sure that the first argument is acceptable as 'self' */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>argc</name> = <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>argc</name> &lt; 1</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
			     <argument><expr>"descriptor '%.300s' of '%.100s' "
			     "object needs an argument"</expr></argument>,
			     <argument><expr><call><name>descr_name</name><argument_list>(<argument><expr>(<name>PyDescrObject</name> *)<name>descr</name></expr></argument>)</argument_list></call></expr></argument>,
			     <argument><expr><name><name>descr</name>-&gt;<name>d_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>self</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call>(<name>PyObject</name> *)<argument_list>(<argument><expr><name><name>descr</name>-&gt;<name>d_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
			     <argument><expr>"descriptor '%.200s' "
			     "requires a '%.100s' object "
			     "but received a '%.100s'"</expr></argument>,
			     <argument><expr><call><name>descr_name</name><argument_list>(<argument><expr>(<name>PyDescrObject</name> *)<name>descr</name></expr></argument>)</argument_list></call></expr></argument>,
			     <argument><expr><name><name>descr</name>-&gt;<name>d_type</name>-&gt;<name>tp_name</name></name></expr></argument>,
			     <argument><expr><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><name>func</name> = <call><name>PyWrapper_New</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>descr</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>func</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>args</name> = <call><name>PyTuple_GetSlice</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>args</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>result</name> = <call><name>PyEval_CallObjectWithKeywords</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>method_get_doc</name><parameter_list>(<param><decl><type><name>PyMethodDescrObject</name> *</type><name>descr</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>descr</name>-&gt;<name>d_method</name>-&gt;<name>ml_doc</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>Py_None</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name><name>descr</name>-&gt;<name>d_method</name>-&gt;<name>ml_doc</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>descr_members</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"__objclass__"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyDescrObject</name></expr></argument>, <argument><expr><name>d_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>}</block></expr>,
	<expr><block>{<expr>"__name__"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyDescrObject</name></expr></argument>, <argument><expr><name>d_name</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>}</block></expr>,
	<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>method_getset</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"__doc__"</expr>, <expr>(<name>getter</name>)<name>method_get_doc</name></expr>}</block></expr>,
	<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>member_get_doc</name><parameter_list>(<param><decl><type><name>PyMemberDescrObject</name> *</type><name>descr</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>descr</name>-&gt;<name>d_member</name>-&gt;<name>doc</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>Py_None</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name><name>descr</name>-&gt;<name>d_member</name>-&gt;<name>doc</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>member_getset</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"__doc__"</expr>, <expr>(<name>getter</name>)<name>member_get_doc</name></expr>}</block></expr>,
	<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>getset_get_doc</name><parameter_list>(<param><decl><type><name>PyGetSetDescrObject</name> *</type><name>descr</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>descr</name>-&gt;<name>d_getset</name>-&gt;<name>doc</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>Py_None</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name><name>descr</name>-&gt;<name>d_getset</name>-&gt;<name>doc</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>getset_getset</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"__doc__"</expr>, <expr>(<name>getter</name>)<name>getset_get_doc</name></expr>}</block></expr>,
	<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>wrapperdescr_get_doc</name><parameter_list>(<param><decl><type><name>PyWrapperDescrObject</name> *</type><name>descr</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>descr</name>-&gt;<name>d_base</name>-&gt;<name>doc</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>Py_None</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name><name>descr</name>-&gt;<name>d_base</name>-&gt;<name>doc</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>wrapperdescr_getset</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"__doc__"</expr>, <expr>(<name>getter</name>)<name>wrapperdescr_get_doc</name></expr>}</block></expr>,
	<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>descr_traverse</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyDescrObject</name> *</type><name>descr</name> <init>= <expr>(<name>PyDescrObject</name> *)<name>self</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>descr</name>-&gt;<name>d_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>0</expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>PyMethodDescr_Type</name> <init>= <expr><block>{
	<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
	"method_descriptor"</expr>,
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyMethodDescrObject</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr>0</expr>,
	<expr>(<name>destructor</name>)<name>descr_dealloc</name></expr>,		<comment type="block">/* tp_dealloc */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_print */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_getattr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_setattr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_compare */</comment>
	<expr>(<name>reprfunc</name>)<name>method_repr</name></expr>,			<comment type="block">/* tp_repr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_number */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_sequence */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_mapping */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_hash */</comment>
	<expr>(<name>ternaryfunc</name>)<name>methoddescr_call</name></expr>,		<comment type="block">/* tp_call */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_str */</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>,		<comment type="block">/* tp_getattro */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_setattro */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_buffer */</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name></expr>, <comment type="block">/* tp_flags */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_doc */</comment>
	<expr><name>descr_traverse</name></expr>,				<comment type="block">/* tp_traverse */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_clear */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_richcompare */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_weaklistoffset */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_iter */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_iternext */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_methods */</comment>
	<expr><name>descr_members</name></expr>,				<comment type="block">/* tp_members */</comment>
	<expr><name>method_getset</name></expr>,				<comment type="block">/* tp_getset */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_base */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_dict */</comment>
	<expr>(<name>descrgetfunc</name>)<name>method_get</name></expr>,		<comment type="block">/* tp_descr_get */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_descr_set */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* This is for METH_CLASS in C, not for "f = classmethod(f)" in Python! */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>PyClassMethodDescr_Type</name> <init>= <expr><block>{
	<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
	"classmethod_descriptor"</expr>,
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyMethodDescrObject</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr>0</expr>,
	<expr>(<name>destructor</name>)<name>descr_dealloc</name></expr>,		<comment type="block">/* tp_dealloc */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_print */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_getattr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_setattr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_compare */</comment>
	<expr>(<name>reprfunc</name>)<name>method_repr</name></expr>,			<comment type="block">/* tp_repr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_number */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_sequence */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_mapping */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_hash */</comment>
	<expr>(<name>ternaryfunc</name>)<name>classmethoddescr_call</name></expr>,	<comment type="block">/* tp_call */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_str */</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>,		<comment type="block">/* tp_getattro */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_setattro */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_buffer */</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name></expr>, <comment type="block">/* tp_flags */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_doc */</comment>
	<expr><name>descr_traverse</name></expr>,				<comment type="block">/* tp_traverse */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_clear */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_richcompare */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_weaklistoffset */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_iter */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_iternext */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_methods */</comment>
	<expr><name>descr_members</name></expr>,				<comment type="block">/* tp_members */</comment>
	<expr><name>method_getset</name></expr>,				<comment type="block">/* tp_getset */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_base */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_dict */</comment>
	<expr>(<name>descrgetfunc</name>)<name>classmethod_get</name></expr>,		<comment type="block">/* tp_descr_get */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_descr_set */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>PyMemberDescr_Type</name> <init>= <expr><block>{
	<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
	"member_descriptor"</expr>,
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyMemberDescrObject</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr>0</expr>,
	<expr>(<name>destructor</name>)<name>descr_dealloc</name></expr>,		<comment type="block">/* tp_dealloc */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_print */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_getattr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_setattr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_compare */</comment>
	<expr>(<name>reprfunc</name>)<name>member_repr</name></expr>,			<comment type="block">/* tp_repr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_number */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_sequence */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_mapping */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_hash */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_call */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_str */</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>,		<comment type="block">/* tp_getattro */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_setattro */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_buffer */</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name></expr>, <comment type="block">/* tp_flags */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_doc */</comment>
	<expr><name>descr_traverse</name></expr>,				<comment type="block">/* tp_traverse */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_clear */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_richcompare */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_weaklistoffset */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_iter */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_iternext */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_methods */</comment>
	<expr><name>descr_members</name></expr>,				<comment type="block">/* tp_members */</comment>
	<expr><name>member_getset</name></expr>,				<comment type="block">/* tp_getset */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_base */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_dict */</comment>
	<expr>(<name>descrgetfunc</name>)<name>member_get</name></expr>,		<comment type="block">/* tp_descr_get */</comment>
	<expr>(<name>descrsetfunc</name>)<name>member_set</name></expr>,		<comment type="block">/* tp_descr_set */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>PyGetSetDescr_Type</name> <init>= <expr><block>{
	<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
	"getset_descriptor"</expr>,
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyGetSetDescrObject</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr>0</expr>,
	<expr>(<name>destructor</name>)<name>descr_dealloc</name></expr>,		<comment type="block">/* tp_dealloc */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_print */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_getattr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_setattr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_compare */</comment>
	<expr>(<name>reprfunc</name>)<name>getset_repr</name></expr>,			<comment type="block">/* tp_repr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_number */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_sequence */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_mapping */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_hash */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_call */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_str */</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>,		<comment type="block">/* tp_getattro */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_setattro */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_buffer */</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name></expr>, <comment type="block">/* tp_flags */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_doc */</comment>
	<expr><name>descr_traverse</name></expr>,				<comment type="block">/* tp_traverse */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_clear */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_richcompare */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_weaklistoffset */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_iter */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_iternext */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_methods */</comment>
	<expr><name>descr_members</name></expr>,				<comment type="block">/* tp_members */</comment>
	<expr><name>getset_getset</name></expr>,				<comment type="block">/* tp_getset */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_base */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_dict */</comment>
	<expr>(<name>descrgetfunc</name>)<name>getset_get</name></expr>,		<comment type="block">/* tp_descr_get */</comment>
	<expr>(<name>descrsetfunc</name>)<name>getset_set</name></expr>,		<comment type="block">/* tp_descr_set */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyWrapperDescr_Type</name> <init>= <expr><block>{
	<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
	"wrapper_descriptor"</expr>,
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyWrapperDescrObject</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr>0</expr>,
	<expr>(<name>destructor</name>)<name>descr_dealloc</name></expr>,		<comment type="block">/* tp_dealloc */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_print */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_getattr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_setattr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_compare */</comment>
	<expr>(<name>reprfunc</name>)<name>wrapperdescr_repr</name></expr>,		<comment type="block">/* tp_repr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_number */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_sequence */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_mapping */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_hash */</comment>
	<expr>(<name>ternaryfunc</name>)<name>wrapperdescr_call</name></expr>,		<comment type="block">/* tp_call */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_str */</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>,		<comment type="block">/* tp_getattro */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_setattro */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_buffer */</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name></expr>, <comment type="block">/* tp_flags */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_doc */</comment>
	<expr><name>descr_traverse</name></expr>,				<comment type="block">/* tp_traverse */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_clear */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_richcompare */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_weaklistoffset */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_iter */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_iternext */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_methods */</comment>
	<expr><name>descr_members</name></expr>,				<comment type="block">/* tp_members */</comment>
	<expr><name>wrapperdescr_getset</name></expr>,			<comment type="block">/* tp_getset */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_base */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_dict */</comment>
	<expr>(<name>descrgetfunc</name>)<name>wrapperdescr_get</name></expr>,		<comment type="block">/* tp_descr_get */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_descr_set */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyDescrObject</name> *</type>
<name>descr_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>descrtype</name></decl></param>, <param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyDescrObject</name> *</type><name>descr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>descr</name> = (<name>PyDescrObject</name> *)<call><name>PyType_GenericAlloc</name><argument_list>(<argument><expr><name>descrtype</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>descr</name> != <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>descr</name>-&gt;<name>d_type</name></name> = <name>type</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>descr</name>-&gt;<name>d_name</name></name> = <call><name>PyString_InternFromString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>descr</name>-&gt;<name>d_name</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>descr</name> = <name>NULL</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<return>return <expr><name>descr</name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name> *</type>
<name>PyDescr_NewMethod</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyMethodDef</name> *</type><name>method</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyMethodDescrObject</name> *</type><name>descr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>descr</name> = (<name>PyMethodDescrObject</name> *)<call><name>descr_new</name><argument_list>(<argument><expr>&amp;<name>PyMethodDescr_Type</name></expr></argument>,
						 <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>method</name>-&gt;<name>ml_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>descr</name> != <name>NULL</name></expr>)</condition><then>
		<expr_stmt><expr><name><name>descr</name>-&gt;<name>d_method</name></name> = <name>method</name></expr>;</expr_stmt></then></if>
	<return>return <expr>(<name>PyObject</name> *)<name>descr</name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name> *</type>
<name>PyDescr_NewClassMethod</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyMethodDef</name> *</type><name>method</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyMethodDescrObject</name> *</type><name>descr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>descr</name> = (<name>PyMethodDescrObject</name> *)<call><name>descr_new</name><argument_list>(<argument><expr>&amp;<name>PyClassMethodDescr_Type</name></expr></argument>,
						 <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>method</name>-&gt;<name>ml_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>descr</name> != <name>NULL</name></expr>)</condition><then>
		<expr_stmt><expr><name><name>descr</name>-&gt;<name>d_method</name></name> = <name>method</name></expr>;</expr_stmt></then></if>
	<return>return <expr>(<name>PyObject</name> *)<name>descr</name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name> *</type>
<name>PyDescr_NewMember</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyMemberDef</name> *</type><name>member</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyMemberDescrObject</name> *</type><name>descr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>descr</name> = (<name>PyMemberDescrObject</name> *)<call><name>descr_new</name><argument_list>(<argument><expr>&amp;<name>PyMemberDescr_Type</name></expr></argument>,
						 <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>member</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>descr</name> != <name>NULL</name></expr>)</condition><then>
		<expr_stmt><expr><name><name>descr</name>-&gt;<name>d_member</name></name> = <name>member</name></expr>;</expr_stmt></then></if>
	<return>return <expr>(<name>PyObject</name> *)<name>descr</name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name> *</type>
<name>PyDescr_NewGetSet</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyGetSetDef</name> *</type><name>getset</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyGetSetDescrObject</name> *</type><name>descr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>descr</name> = (<name>PyGetSetDescrObject</name> *)<call><name>descr_new</name><argument_list>(<argument><expr>&amp;<name>PyGetSetDescr_Type</name></expr></argument>,
						 <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>getset</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>descr</name> != <name>NULL</name></expr>)</condition><then>
		<expr_stmt><expr><name><name>descr</name>-&gt;<name>d_getset</name></name> = <name>getset</name></expr>;</expr_stmt></then></if>
	<return>return <expr>(<name>PyObject</name> *)<name>descr</name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name> *</type>
<name>PyDescr_NewWrapper</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type>struct <name>wrapperbase</name> *</type><name>base</name></decl></param>, <param><decl><type><name>void</name> *</type><name>wrapped</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyWrapperDescrObject</name> *</type><name>descr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>descr</name> = (<name>PyWrapperDescrObject</name> *)<call><name>descr_new</name><argument_list>(<argument><expr>&amp;<name>PyWrapperDescr_Type</name></expr></argument>,
						 <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>descr</name> != <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>descr</name>-&gt;<name>d_base</name></name> = <name>base</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>descr</name>-&gt;<name>d_wrapped</name></name> = <name>wrapped</name></expr>;</expr_stmt>
	}</block></then></if>
	<return>return <expr>(<name>PyObject</name> *)<name>descr</name></expr>;</return>
}</block></function>


<comment type="block">/* --- Readonly proxy for dictionaries (actually any mapping) --- */</comment>

<comment type="block">/* This has no reason to be in this file except that adding new files is a
   bit of a pain */</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
}</block></struct></type> <name>proxyobject</name>;</typedef>

<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>proxy_len</name><parameter_list>(<param><decl><type><name>proxyobject</name> *</type><name>pp</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyObject_Size</name><argument_list>(<argument><expr><name><name>pp</name>-&gt;<name>dict</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>proxy_getitem</name><parameter_list>(<param><decl><type><name>proxyobject</name> *</type><name>pp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyObject_GetItem</name><argument_list>(<argument><expr><name><name>pp</name>-&gt;<name>dict</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMappingMethods</name></type> <name>proxy_as_mapping</name> <init>= <expr><block>{
	<expr>(<name>lenfunc</name>)<name>proxy_len</name></expr>,			<comment type="block">/* mp_length */</comment>
	<expr>(<name>binaryfunc</name>)<name>proxy_getitem</name></expr>,		<comment type="block">/* mp_subscript */</comment>
	<expr>0</expr>,					<comment type="block">/* mp_ass_subscript */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>proxy_contains</name><parameter_list>(<param><decl><type><name>proxyobject</name> *</type><name>pp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyDict_Contains</name><argument_list>(<argument><expr><name><name>pp</name>-&gt;<name>dict</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>proxy_as_sequence</name> <init>= <expr><block>{
	<expr>0</expr>,					<comment type="block">/* sq_length */</comment>
	<expr>0</expr>,					<comment type="block">/* sq_concat */</comment>
	<expr>0</expr>,					<comment type="block">/* sq_repeat */</comment>
	<expr>0</expr>,					<comment type="block">/* sq_item */</comment>
	<expr>0</expr>,					<comment type="block">/* sq_slice */</comment>
	<expr>0</expr>,					<comment type="block">/* sq_ass_item */</comment>
	<expr>0</expr>,					<comment type="block">/* sq_ass_slice */</comment>
	<expr>(<name>objobjproc</name>)<name>proxy_contains</name></expr>,		<comment type="block">/* sq_contains */</comment>
	<expr>0</expr>,					<comment type="block">/* sq_inplace_concat */</comment>
	<expr>0</expr>,					<comment type="block">/* sq_inplace_repeat */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>proxy_has_key</name><parameter_list>(<param><decl><type><name>proxyobject</name> *</type><name>pp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>PyDict_Contains</name><argument_list>(<argument><expr><name><name>pp</name>-&gt;<name>dict</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>res</name> &lt; 0</expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<return>return <expr><call><name>PyBool_FromLong</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>proxy_get</name><parameter_list>(<param><decl><type><name>proxyobject</name> *</type><name>pp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name></decl>, *<decl><type ref="prev"/><name>def</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"get"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>def</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<return>return <expr><call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>pp</name>-&gt;<name>dict</name></name></expr></argument>, <argument><expr>"get"</expr></argument>, <argument><expr>"(OO)"</expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>proxy_keys</name><parameter_list>(<param><decl><type><name>proxyobject</name> *</type><name>pp</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyMapping_Keys</name><argument_list>(<argument><expr><name><name>pp</name>-&gt;<name>dict</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>proxy_values</name><parameter_list>(<param><decl><type><name>proxyobject</name> *</type><name>pp</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyMapping_Values</name><argument_list>(<argument><expr><name><name>pp</name>-&gt;<name>dict</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>proxy_items</name><parameter_list>(<param><decl><type><name>proxyobject</name> *</type><name>pp</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyMapping_Items</name><argument_list>(<argument><expr><name><name>pp</name>-&gt;<name>dict</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>proxy_iterkeys</name><parameter_list>(<param><decl><type><name>proxyobject</name> *</type><name>pp</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>pp</name>-&gt;<name>dict</name></name></expr></argument>, <argument><expr>"iterkeys"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>proxy_itervalues</name><parameter_list>(<param><decl><type><name>proxyobject</name> *</type><name>pp</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>pp</name>-&gt;<name>dict</name></name></expr></argument>, <argument><expr>"itervalues"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>proxy_iteritems</name><parameter_list>(<param><decl><type><name>proxyobject</name> *</type><name>pp</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>pp</name>-&gt;<name>dict</name></name></expr></argument>, <argument><expr>"iteritems"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>proxy_copy</name><parameter_list>(<param><decl><type><name>proxyobject</name> *</type><name>pp</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>pp</name>-&gt;<name>dict</name></name></expr></argument>, <argument><expr>"copy"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>proxy_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"has_key"</expr>,   <expr>(<name>PyCFunction</name>)<name>proxy_has_key</name></expr>,    <expr><name>METH_O</name></expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"D.has_key(k) -&gt; True if D has a key k, else False"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"get"</expr>,       <expr>(<name>PyCFunction</name>)<name>proxy_get</name></expr>,        <expr><name>METH_VARARGS</name></expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"D.get(k[,d]) -&gt; D[k] if D.has_key(k), else d."
	 				"  d defaults to None."</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"keys"</expr>,      <expr>(<name>PyCFunction</name>)<name>proxy_keys</name></expr>,       <expr><name>METH_NOARGS</name></expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"D.keys() -&gt; list of D's keys"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"values"</expr>,    <expr>(<name>PyCFunction</name>)<name>proxy_values</name></expr>,     <expr><name>METH_NOARGS</name></expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"D.values() -&gt; list of D's values"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"items"</expr>,     <expr>(<name>PyCFunction</name>)<name>proxy_items</name></expr>,      <expr><name>METH_NOARGS</name></expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"D.items() -&gt; list of D's (key, value) pairs, as 2-tuples"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"iterkeys"</expr>,  <expr>(<name>PyCFunction</name>)<name>proxy_iterkeys</name></expr>,   <expr><name>METH_NOARGS</name></expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"D.iterkeys() -&gt; an iterator over the keys of D"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"itervalues"</expr>,<expr>(<name>PyCFunction</name>)<name>proxy_itervalues</name></expr>, <expr><name>METH_NOARGS</name></expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"D.itervalues() -&gt; an iterator over the values of D"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"iteritems"</expr>, <expr>(<name>PyCFunction</name>)<name>proxy_iteritems</name></expr>,  <expr><name>METH_NOARGS</name></expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"D.iteritems() -&gt;"
	 	   " an iterator over the (key, value) items of D"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"copy"</expr>,      <expr>(<name>PyCFunction</name>)<name>proxy_copy</name></expr>,       <expr><name>METH_NOARGS</name></expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"D.copy() -&gt; a shallow copy of D"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>proxy_dealloc</name><parameter_list>(<param><decl><type><name>proxyobject</name> *</type><name>pp</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>_PyObject_GC_UNTRACK</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>pp</name>-&gt;<name>dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyObject_GC_Del</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>proxy_getiter</name><parameter_list>(<param><decl><type><name>proxyobject</name> *</type><name>pp</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyObject_GetIter</name><argument_list>(<argument><expr><name><name>pp</name>-&gt;<name>dict</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>proxy_str</name><parameter_list>(<param><decl><type><name>proxyobject</name> *</type><name>pp</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyObject_Str</name><argument_list>(<argument><expr><name><name>pp</name>-&gt;<name>dict</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>proxy_traverse</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>proxyobject</name> *</type><name>pp</name> <init>= <expr>(<name>proxyobject</name> *)<name>self</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>pp</name>-&gt;<name>dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>proxy_compare</name><parameter_list>(<param><decl><type><name>proxyobject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>w</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyObject_Compare</name><argument_list>(<argument><expr><name><name>v</name>-&gt;<name>dict</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>proxy_richcompare</name><parameter_list>(<param><decl><type><name>proxyobject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>w</name></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyObject_RichCompare</name><argument_list>(<argument><expr><name><name>v</name>-&gt;<name>dict</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>proxytype</name> <init>= <expr><block>{
	<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
	"dictproxy"</expr>,				<comment type="block">/* tp_name */</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxyobject</name></expr></argument>)</argument_list></sizeof></expr>,			<comment type="block">/* tp_basicsize */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_itemsize */</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>)<name>proxy_dealloc</name></expr>, 		<comment type="block">/* tp_dealloc */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_print */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_getattr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_setattr */</comment>
	<expr>(<name>cmpfunc</name>)<name>proxy_compare</name></expr>,			<comment type="block">/* tp_compare */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_repr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_number */</comment>
	<expr>&amp;<name>proxy_as_sequence</name></expr>,			<comment type="block">/* tp_as_sequence */</comment>
	<expr>&amp;<name>proxy_as_mapping</name></expr>,			<comment type="block">/* tp_as_mapping */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_hash */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_call */</comment>
	<expr>(<name>reprfunc</name>)<name>proxy_str</name></expr>,			<comment type="block">/* tp_str */</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>,		<comment type="block">/* tp_getattro */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_setattro */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_buffer */</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name></expr>, <comment type="block">/* tp_flags */</comment>
 	<expr>0</expr>,					<comment type="block">/* tp_doc */</comment>
	<expr><name>proxy_traverse</name></expr>,				<comment type="block">/* tp_traverse */</comment>
 	<expr>0</expr>,					<comment type="block">/* tp_clear */</comment>
	<expr>(<name>richcmpfunc</name>)<name>proxy_richcompare</name></expr>,		<comment type="block">/* tp_richcompare */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_weaklistoffset */</comment>
	<expr>(<name>getiterfunc</name>)<name>proxy_getiter</name></expr>,		<comment type="block">/* tp_iter */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_iternext */</comment>
	<expr><name>proxy_methods</name></expr>,				<comment type="block">/* tp_methods */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_members */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_getset */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_base */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_dict */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_descr_get */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_descr_set */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>PyObject</name> *</type>
<name>PyDictProxy_New</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>dict</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>proxyobject</name> *</type><name>pp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pp</name> = <call><name>PyObject_GC_New</name><argument_list>(<argument><expr><name>proxyobject</name></expr></argument>, <argument><expr>&amp;<name>proxytype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>pp</name> != <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pp</name>-&gt;<name>dict</name></name> = <name>dict</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_PyObject_GC_TRACK</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return>return <expr>(<name>PyObject</name> *)<name>pp</name></expr>;</return>
}</block></function>


<comment type="block">/* --- Wrapper object for "slot" methods --- */</comment>

<comment type="block">/* This has no reason to be in this file except that adding new files is a
   bit of a pain */</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>PyWrapperDescrObject</name> *</type><name>descr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>
}</block></struct></type> <name>wrapperobject</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>wrapper_dealloc</name><parameter_list>(<param><decl><type><name>wrapperobject</name> *</type><name>wp</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>Py_TRASHCAN_SAFE_BEGIN</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>wp</name>-&gt;<name>descr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>wp</name>-&gt;<name>self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyObject_GC_Del</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>Py_TRASHCAN_SAFE_END</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>wrapper_compare</name><parameter_list>(<param><decl><type><name>wrapperobject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>wrapperobject</name> *</type><name>b</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>a</name>-&gt;<name>descr</name></name> == <name><name>b</name>-&gt;<name>descr</name></name></expr>)</condition><then>
		<return>return <expr><call><name>PyObject_Compare</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>self</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>self</name></name></expr></argument>)</argument_list></call></expr>;</return></then>
	<else>else
		<return>return <expr>(<name><name>a</name>-&gt;<name>descr</name></name> &lt; <name><name>b</name>-&gt;<name>descr</name></name>) ? -1 : 1</expr>;</return></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>wrapper_hash</name><parameter_list>(<param><decl><type><name>wrapperobject</name> *</type><name>wp</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>x</name> = <call><name>_Py_HashPointer</name><argument_list>(<argument><expr><name><name>wp</name>-&gt;<name>descr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == -1</expr>)</condition><then>
		<return>return <expr>-1</expr>;</return></then></if>
	<expr_stmt><expr><name>y</name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name><name>wp</name>-&gt;<name>self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>y</name> == -1</expr>)</condition><then>
		<return>return <expr>-1</expr>;</return></then></if>
	<expr_stmt><expr><name>x</name> = <name>x</name> ^ <name>y</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == -1</expr>)</condition><then>
		<expr_stmt><expr><name>x</name> = -2</expr>;</expr_stmt></then></if>
	<return>return <expr><name>x</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>wrapper_repr</name><parameter_list>(<param><decl><type><name>wrapperobject</name> *</type><name>wp</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr>"&lt;method-wrapper '%s' of %s object at %p&gt;"</expr></argument>,
				   <argument><expr><name><name>wp</name>-&gt;<name>descr</name>-&gt;<name>d_base</name>-&gt;<name>name</name></name></expr></argument>,
				   <argument><expr><name><name>wp</name>-&gt;<name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>,
				   <argument><expr><name><name>wp</name>-&gt;<name>self</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>wrapper_members</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"__self__"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>wrapperobject</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>}</block></expr>,
	<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>wrapper_objclass</name><parameter_list>(<param><decl><type><name>wrapperobject</name> *</type><name>wp</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>c</name> <init>= <expr>(<name>PyObject</name> *)<name><name>wp</name>-&gt;<name>descr</name>-&gt;<name>d_type</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>c</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>wrapper_name</name><parameter_list>(<param><decl><type><name>wrapperobject</name> *</type><name>wp</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>s</name> <init>= <expr><name><name>wp</name>-&gt;<name>descr</name>-&gt;<name>d_base</name>-&gt;<name>name</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>wrapper_doc</name><parameter_list>(<param><decl><type><name>wrapperobject</name> *</type><name>wp</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>s</name> <init>= <expr><name><name>wp</name>-&gt;<name>descr</name>-&gt;<name>d_base</name>-&gt;<name>doc</name></name></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>s</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>Py_None</name></expr>;</return>
	}</block></then>
	<else>else <block>{
		<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></else></if>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>wrapper_getsets</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"__objclass__"</expr>, <expr>(<name>getter</name>)<name>wrapper_objclass</name></expr>}</block></expr>,
	<expr><block>{<expr>"__name__"</expr>, <expr>(<name>getter</name>)<name>wrapper_name</name></expr>}</block></expr>,
	<expr><block>{<expr>"__doc__"</expr>, <expr>(<name>getter</name>)<name>wrapper_doc</name></expr>}</block></expr>,
	<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>wrapper_call</name><parameter_list>(<param><decl><type><name>wrapperobject</name> *</type><name>wp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>wrapperfunc</name></type> <name>wrapper</name> <init>= <expr><name><name>wp</name>-&gt;<name>descr</name>-&gt;<name>d_base</name>-&gt;<name>wrapper</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name> <init>= <expr><name><name>wp</name>-&gt;<name>self</name></name></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr><name><name>wp</name>-&gt;<name>descr</name>-&gt;<name>d_base</name>-&gt;<name>flags</name></name> &amp; <name>PyWrapperFlag_KEYWORDS</name></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>wrapperfunc_kwds</name></type> <name>wk</name> <init>= <expr>(<name>wrapperfunc_kwds</name>)<name>wrapper</name></expr></init></decl>;</decl_stmt>
		<return>return <expr><call>(*<name>wk</name>)<argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>wp</name>-&gt;<name>descr</name>-&gt;<name>d_wrapped</name></name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then></if>

	<if>if <condition>(<expr><name>kwds</name> != <name>NULL</name> &amp;&amp; (!<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>kwds</name></expr></argument>)</argument_list></call> || <call><name>PyDict_Size</name><argument_list>(<argument><expr><name>kwds</name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
			     <argument><expr>"wrapper %s doesn't take keyword arguments"</expr></argument>,
			     <argument><expr><name><name>wp</name>-&gt;<name>descr</name>-&gt;<name>d_base</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call>(*<name>wrapper</name>)<argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>wp</name>-&gt;<name>descr</name>-&gt;<name>d_wrapped</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>wrapper_traverse</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>wrapperobject</name> *</type><name>wp</name> <init>= <expr>(<name>wrapperobject</name> *)<name>self</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>wp</name>-&gt;<name>descr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>wp</name>-&gt;<name>self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>0</expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>wrappertype</name> <init>= <expr><block>{
	<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
	"method-wrapper"</expr>,			<comment type="block">/* tp_name */</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>wrapperobject</name></expr></argument>)</argument_list></sizeof></expr>,			<comment type="block">/* tp_basicsize */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_itemsize */</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>)<name>wrapper_dealloc</name></expr>, 		<comment type="block">/* tp_dealloc */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_print */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_getattr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_setattr */</comment>
	<expr>(<name>cmpfunc</name>)<name>wrapper_compare</name></expr>,		<comment type="block">/* tp_compare */</comment>
	<expr>(<name>reprfunc</name>)<name>wrapper_repr</name></expr>,			<comment type="block">/* tp_repr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_number */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_sequence */</comment>
	<expr>0</expr>,		       			<comment type="block">/* tp_as_mapping */</comment>
	<expr>(<name>hashfunc</name>)<name>wrapper_hash</name></expr>,			<comment type="block">/* tp_hash */</comment>
	<expr>(<name>ternaryfunc</name>)<name>wrapper_call</name></expr>,		<comment type="block">/* tp_call */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_str */</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>,		<comment type="block">/* tp_getattro */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_setattro */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_buffer */</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name></expr>, <comment type="block">/* tp_flags */</comment>
 	<expr>0</expr>,					<comment type="block">/* tp_doc */</comment>
	<expr><name>wrapper_traverse</name></expr>,			<comment type="block">/* tp_traverse */</comment>
 	<expr>0</expr>,					<comment type="block">/* tp_clear */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_richcompare */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_weaklistoffset */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_iter */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_iternext */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_methods */</comment>
	<expr><name>wrapper_members</name></expr>,			<comment type="block">/* tp_members */</comment>
	<expr><name>wrapper_getsets</name></expr>,			<comment type="block">/* tp_getset */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_base */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_dict */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_descr_get */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_descr_set */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>PyObject</name> *</type>
<name>PyWrapper_New</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>d</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>wrapperobject</name> *</type><name>wp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyWrapperDescrObject</name> *</type><name>descr</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyObject_TypeCheck</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>&amp;<name>PyWrapperDescr_Type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>descr</name> = (<name>PyWrapperDescrObject</name> *)<name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call>(<name>PyObject</name> *)<argument_list>(<argument><expr><name><name>descr</name>-&gt;<name>d_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>wp</name> = <call><name>PyObject_GC_New</name><argument_list>(<argument><expr><name>wrapperobject</name></expr></argument>, <argument><expr>&amp;<name>wrappertype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>wp</name> != <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>wp</name>-&gt;<name>descr</name></name> = <name>descr</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>wp</name>-&gt;<name>self</name></name> = <name>self</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_PyObject_GC_TRACK</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return>return <expr>(<name>PyObject</name> *)<name>wp</name></expr>;</return>
}</block></function>


<comment type="block">/* A built-in 'property' type */</comment>

<comment type="block">/*
    class property(object):

        def __init__(self, fget=None, fset=None, fdel=None, doc=None):
            if doc is None and fget is not None and hasattr(fget, "__doc__"):
                doc = fget.__doc__
            self.__get = fget
            self.__set = fset
            self.__del = fdel
            self.__doc__ = doc

        def __get__(self, inst, type=None):
            if inst is None:
                return self
            if self.__get is None:
                raise AttributeError, "unreadable attribute"
            return self.__get(inst)

        def __set__(self, inst, value):
            if self.__set is None:
                raise AttributeError, "can't set attribute"
            return self.__set(inst, value)

        def __delete__(self, inst):
            if self.__del is None:
                raise AttributeError, "can't delete attribute"
            return self.__del(inst)

*/</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>PyObject</name> *</type><name>prop_get</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>prop_set</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>prop_del</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>prop_doc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>getter_doc</name></decl>;</decl_stmt>
}</block></struct></type> <name>propertyobject</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type> <name>property_copy</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>,
				  <param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>property_members</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"fget"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>propertyobject</name></expr></argument>, <argument><expr><name>prop_get</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>}</block></expr>,
	<expr><block>{<expr>"fset"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>propertyobject</name></expr></argument>, <argument><expr><name>prop_set</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>}</block></expr>,
	<expr><block>{<expr>"fdel"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>propertyobject</name></expr></argument>, <argument><expr><name>prop_del</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>}</block></expr>,
	<expr><block>{<expr>"__doc__"</expr>,  <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>propertyobject</name></expr></argument>, <argument><expr><name>prop_doc</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>}</block></expr>,
	<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>getter_doc</name></expr></argument>,
	     <argument><expr>"Descriptor to change the getter on a property."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>property_getter</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>getter</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>property_copy</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>getter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>setter_doc</name></expr></argument>,
	     <argument><expr>"Descriptor to change the setter on a property."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>property_setter</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>setter</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>property_copy</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>setter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>deleter_doc</name></expr></argument>,
	     <argument><expr>"Descriptor to change the deleter on a property."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>property_deleter</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>deleter</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>property_copy</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>deleter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>property_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"getter"</expr>, <expr><name>property_getter</name></expr>, <expr><name>METH_O</name></expr>, <expr><name>getter_doc</name></expr>}</block></expr>,
	<expr><block>{<expr>"setter"</expr>, <expr><name>property_setter</name></expr>, <expr><name>METH_O</name></expr>, <expr><name>setter_doc</name></expr>}</block></expr>,
	<expr><block>{<expr>"deleter"</expr>, <expr><name>property_deleter</name></expr>, <expr><name>METH_O</name></expr>, <expr><name>deleter_doc</name></expr>}</block></expr>,
	<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>property_dealloc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>propertyobject</name> *</type><name>gs</name> <init>= <expr>(<name>propertyobject</name> *)<name>self</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>_PyObject_GC_UNTRACK</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>gs</name>-&gt;<name>prop_get</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>gs</name>-&gt;<name>prop_set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>gs</name>-&gt;<name>prop_del</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>gs</name>-&gt;<name>prop_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>property_descr_get</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>type</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>propertyobject</name> *</type><name>gs</name> <init>= <expr>(<name>propertyobject</name> *)<name>self</name></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>obj</name> == <name>NULL</name> || <name>obj</name> == <name>Py_None</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>self</name></expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr><name><name>gs</name>-&gt;<name>prop_get</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr>"unreadable attribute"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name><name>gs</name>-&gt;<name>prop_get</name></name></expr></argument>, <argument><expr>"(O)"</expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>property_descr_set</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>value</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>propertyobject</name> *</type><name>gs</name> <init>= <expr>(<name>propertyobject</name> *)<name>self</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>func</name></decl>, *<decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>value</name> == <name>NULL</name></expr>)</condition><then>
		<expr_stmt><expr><name>func</name> = <name><name>gs</name>-&gt;<name>prop_del</name></name></expr>;</expr_stmt></then>
	<else>else
		<expr_stmt><expr><name>func</name> = <name><name>gs</name>-&gt;<name>prop_set</name></name></expr>;</expr_stmt></else></if>
	<if>if <condition>(<expr><name>func</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>,
				<argument><expr><name>value</name> == <name>NULL</name> ?
				"can't delete attribute" :
				"can't set attribute"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>-1</expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr><name>value</name> == <name>NULL</name></expr>)</condition><then>
		<expr_stmt><expr><name>res</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr>"(O)"</expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else>else
		<expr_stmt><expr><name>res</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr>"(OO)"</expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	<if>if <condition>(<expr><name>res</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr>-1</expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>property_copy</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>old</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>get</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>set</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>del</name></decl></param>,
		<param><decl><type><name>PyObject</name> *</type><name>doc</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>propertyobject</name> *</type><name>pold</name> <init>= <expr>(<name>propertyobject</name> *)<name>old</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>propertyobject</name> *</type><name>pnew</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>new</name></decl>, *<decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>type</name> = <call><name>PyObject_Type</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>type</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><name>get</name> == <name>NULL</name> || <name>get</name> == <name>Py_None</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>get</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>get</name> = <name><name>pold</name>-&gt;<name>prop_get</name></name> ? <name><name>pold</name>-&gt;<name>prop_get</name></name> : <name>Py_None</name></expr>;</expr_stmt>
	}</block></then></if>
	<if>if <condition>(<expr><name>set</name> == <name>NULL</name> || <name>set</name> == <name>Py_None</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>set</name> = <name><name>pold</name>-&gt;<name>prop_set</name></name> ? <name><name>pold</name>-&gt;<name>prop_set</name></name> : <name>Py_None</name></expr>;</expr_stmt>
	}</block></then></if>
	<if>if <condition>(<expr><name>del</name> == <name>NULL</name> || <name>del</name> == <name>Py_None</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>del</name> = <name><name>pold</name>-&gt;<name>prop_del</name></name> ? <name><name>pold</name>-&gt;<name>prop_del</name></name> : <name>Py_None</name></expr>;</expr_stmt>
	}</block></then></if>
	<if>if <condition>(<expr><name>doc</name> == <name>NULL</name> || <name>doc</name> == <name>Py_None</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>doc</name> = <name><name>pold</name>-&gt;<name>prop_doc</name></name> ? <name><name>pold</name>-&gt;<name>prop_doc</name></name> : <name>Py_None</name></expr>;</expr_stmt>
	}</block></then></if>
	
	<expr_stmt><expr><name>new</name> =  <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>"OOOO"</expr></argument>, <argument><expr><name>get</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>del</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>new</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>pnew</name> = (<name>propertyobject</name> *)<name>new</name></expr>;</expr_stmt>
	
	<if>if <condition>(<expr><name><name>pold</name>-&gt;<name>getter_doc</name></name> &amp;&amp; <name>get</name> != <name>Py_None</name></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>PyObject</name> *</type><name>get_doc</name> <init>= <expr><call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>get</name></expr></argument>, <argument><expr>"__doc__"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>get_doc</name> != <name>NULL</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>pnew</name>-&gt;<name>prop_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pnew</name>-&gt;<name>prop_doc</name></name> = <name>get_doc</name></expr>;</expr_stmt>  <comment type="block">/* get_doc already INCREF'd by GetAttr */</comment>
			<expr_stmt><expr><name><name>pnew</name>-&gt;<name>getter_doc</name></name> = 1</expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then></if>
	<return>return <expr><name>new</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>property_init</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>get</name> <init>= <expr><name>NULL</name></expr></init>, *<name>set</name> <init>= <expr><name>NULL</name></expr></init>, *<name>del</name> <init>= <expr><name>NULL</name></expr></init>, *<name>doc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr>"fget"</expr>, <expr>"fset"</expr>, <expr>"fdel"</expr>, <expr>"doc"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>propertyobject</name> *</type><name>prop</name> <init>= <expr>(<name>propertyobject</name> *)<name>self</name></expr></init></decl>;</decl_stmt>
	
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>, <argument><expr>"|OOOO:property"</expr></argument>,
					 <argument><expr><name>kwlist</name></expr></argument>, <argument><expr>&amp;<name>get</name></expr></argument>, <argument><expr>&amp;<name>set</name></expr></argument>, <argument><expr>&amp;<name>del</name></expr></argument>, <argument><expr>&amp;<name>doc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr>-1</expr>;</return></then></if>

	<if>if <condition>(<expr><name>get</name> == <name>Py_None</name></expr>)</condition><then>
		<expr_stmt><expr><name>get</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
	<if>if <condition>(<expr><name>set</name> == <name>Py_None</name></expr>)</condition><then>
		<expr_stmt><expr><name>set</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
	<if>if <condition>(<expr><name>del</name> == <name>Py_None</name></expr>)</condition><then>
		<expr_stmt><expr><name>del</name> = <name>NULL</name></expr>;</expr_stmt></then></if>

	<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>get</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>prop</name>-&gt;<name>prop_get</name></name> = <name>get</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prop</name>-&gt;<name>prop_set</name></name> = <name>set</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prop</name>-&gt;<name>prop_del</name></name> = <name>del</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prop</name>-&gt;<name>prop_doc</name></name> = <name>doc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prop</name>-&gt;<name>getter_doc</name></name> = 0</expr>;</expr_stmt>

	<comment type="block">/* if no docstring given and the getter has one, use that one */</comment>
	<if>if <condition>(<expr>(<name>doc</name> == <name>NULL</name> || <name>doc</name> == <name>Py_None</name>) &amp;&amp; <name>get</name> != <name>NULL</name></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>PyObject</name> *</type><name>get_doc</name> <init>= <expr><call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>get</name></expr></argument>, <argument><expr>"__doc__"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>get_doc</name> != <name>NULL</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>prop</name>-&gt;<name>prop_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>prop</name>-&gt;<name>prop_doc</name></name> = <name>get_doc</name></expr>;</expr_stmt>  <comment type="block">/* get_doc already INCREF'd by GetAttr */</comment>
			<expr_stmt><expr><name><name>prop</name>-&gt;<name>getter_doc</name></name> = 1</expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then></if>

	<return>return <expr>0</expr>;</return>
}</block></function>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>property_doc</name></expr></argument>,
<argument><expr>"property(fget=None, fset=None, fdel=None, doc=None) -&gt; property attribute\n"
"\n"
"fget is a function to be used for getting an attribute value, and likewise\n"
"fset is a function for setting, and fdel a function for del'ing, an\n"
"attribute.  Typical use is to define a managed attribute x:\n"
"class C(object):\n"
"    def getx(self): return self._x\n"
"    def setx(self, value): self._x = value\n"
"    def delx(self): del self._x\n"
"    x = property(getx, setx, delx, \"I'm the 'x' property.\")\n"
"\n"
"Decorators make defining new properties or modifying existing ones easy:\n"
"class C(object):\n"
"    @property\n"
"    def x(self): return self._x\n"
"    @x.setter\n"
"    def x(self, value): self._x = value\n"
"    @x.deleter\n"
"    def x(self): del self._x\n"</expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>property_traverse</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>propertyobject</name> *</type><name>pp</name> <init>= <expr>(<name>propertyobject</name> *)<name>self</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>pp</name>-&gt;<name>prop_get</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>pp</name>-&gt;<name>prop_set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>pp</name>-&gt;<name>prop_del</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>pp</name>-&gt;<name>prop_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>0</expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyProperty_Type</name> <init>= <expr><block>{
	<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
	"property"</expr>,				<comment type="block">/* tp_name */</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>propertyobject</name></expr></argument>)</argument_list></sizeof></expr>,			<comment type="block">/* tp_basicsize */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_itemsize */</comment>
	<comment type="block">/* methods */</comment>
	<expr><name>property_dealloc</name></expr>,	 		<comment type="block">/* tp_dealloc */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_print */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_getattr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_setattr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_compare */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_repr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_number */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_sequence */</comment>
	<expr>0</expr>,		       			<comment type="block">/* tp_as_mapping */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_hash */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_call */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_str */</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>,		<comment type="block">/* tp_getattro */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_setattro */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_buffer */</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name> |
		<name>Py_TPFLAGS_BASETYPE</name></expr>,		<comment type="block">/* tp_flags */</comment>
 	<expr><name>property_doc</name></expr>,				<comment type="block">/* tp_doc */</comment>
	<expr><name>property_traverse</name></expr>,			<comment type="block">/* tp_traverse */</comment>
 	<expr>0</expr>,					<comment type="block">/* tp_clear */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_richcompare */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_weaklistoffset */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_iter */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_iternext */</comment>
	<expr><name>property_methods</name></expr>,			<comment type="block">/* tp_methods */</comment>
	<expr><name>property_members</name></expr>,			<comment type="block">/* tp_members */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_getset */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_base */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_dict */</comment>
	<expr><name>property_descr_get</name></expr>,			<comment type="block">/* tp_descr_get */</comment>
	<expr><name>property_descr_set</name></expr>,			<comment type="block">/* tp_descr_set */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_dictoffset */</comment>
	<expr><name>property_init</name></expr>,				<comment type="block">/* tp_init */</comment>
	<expr><name>PyType_GenericAlloc</name></expr>,			<comment type="block">/* tp_alloc */</comment>
	<expr><name>PyType_GenericNew</name></expr>,			<comment type="block">/* tp_new */</comment>
	<expr><name>PyObject_GC_Del</name></expr>,               		<comment type="block">/* tp_free */</comment>
}</block></expr></init></decl>;</decl_stmt>
</unit>
