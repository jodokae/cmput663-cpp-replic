<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Objects/stringlib/fastsearch.h"><comment type="block">/* stringlib: fastsearch implementation */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STRINGLIB_FASTSEARCH_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGLIB_FASTSEARCH_H</name></cpp:macro></cpp:define>

<comment type="block">/* fast search/count implementation, based on a mix between boyer-
   moore and horspool, with a few more bells and whistles on the top.
   for some more background, see: http://effbot.org/stringlib */</comment>

<comment type="block">/* note: fastsearch may access s[n], which isn't a problem when using
   Python's ordinary string types, but may cause problems if you're
   using this code in other contexts.  also, the count mode returns -1
   if there cannot possible be a match in the target string, and 0 if
   it has actually checked for matches, but didn't find any.  callers
   beware! */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_COUNT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_SEARCH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<macro><name>Py_LOCAL_INLINE</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro>
<macro><name>fastsearch</name><argument_list>(<argument>const STRINGLIB_CHAR* s</argument>, <argument>Py_ssize_t n</argument>,
           <argument>const STRINGLIB_CHAR* p</argument>, <argument>Py_ssize_t m</argument>,
           <argument>int mode</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>long</name></type> <name>mask</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>skip</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>mlast</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>w</name> = <name>n</name> - <name>m</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>w</name> &lt; 0</expr>)</condition><then>
        <return>return <expr>-1</expr>;</return></then></if>

    <comment type="block">/* look for special cases */</comment>
    <if>if <condition>(<expr><name>m</name> &lt;= 1</expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>m</name> &lt;= 0</expr>)</condition><then>
            <return>return <expr>-1</expr>;</return></then></if>
        <comment type="block">/* use special case for 1-character strings */</comment>
        <if>if <condition>(<expr><name>mode</name> == <name>FAST_COUNT</name></expr>)</condition><then> <block>{
            <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> == <name><name>p</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then>
                    <expr_stmt><expr><name>count</name>++</expr>;</expr_stmt></then></if></for>
            <return>return <expr><name>count</name></expr>;</return>
        }</block></then> <else>else <block>{
            <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> == <name><name>p</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then>
                    <return>return <expr><name>i</name></expr>;</return></then></if></for>
        }</block></else></if>
        <return>return <expr>-1</expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>mlast</name> = <name>m</name> - 1</expr>;</expr_stmt>

    <comment type="block">/* create compressed boyer-moore delta 1 table */</comment>
    <expr_stmt><expr><name>skip</name> = <name>mlast</name> - 1</expr>;</expr_stmt>
    <comment type="block">/* process pattern[:-1] */</comment>
    <for>for (<init><expr><name>mask</name> = <name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>mlast</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>mask</name> |= (1 &lt;&lt; (<name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> &amp; 0x1F))</expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> == <name><name>p</name><index>[<expr><name>mlast</name></expr>]</index></name></expr>)</condition><then>
            <expr_stmt><expr><name>skip</name> = <name>mlast</name> - <name>i</name> - 1</expr>;</expr_stmt></then></if>
    }</block></for>
    <comment type="block">/* process pattern[-1] outside the loop */</comment>
    <expr_stmt><expr><name>mask</name> |= (1 &lt;&lt; (<name><name>p</name><index>[<expr><name>mlast</name></expr>]</index></name> &amp; 0x1F))</expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt;= <name>w</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <comment type="block">/* note: using mlast in the skip path slows things down on x86 */</comment>
        <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name>+<name>m</name>-1</expr>]</index></name> == <name><name>p</name><index>[<expr><name>m</name>-1</expr>]</index></name></expr>)</condition><then> <block>{
            <comment type="block">/* candidate match */</comment>
            <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>mlast</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>)
                <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name>+<name>j</name></expr>]</index></name> != <name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
                    <break>break;</break></then></if></for>
            <if>if <condition>(<expr><name>j</name> == <name>mlast</name></expr>)</condition><then> <block>{
                <comment type="block">/* got a match! */</comment>
                <if>if <condition>(<expr><name>mode</name> != <name>FAST_COUNT</name></expr>)</condition><then>
                    <return>return <expr><name>i</name></expr>;</return></then></if>
                <expr_stmt><expr><name>count</name>++</expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name> = <name>i</name> + <name>mlast</name></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <comment type="block">/* miss: check if next character is part of pattern */</comment>
            <if>if <condition>(<expr>!(<name>mask</name> &amp; (1 &lt;&lt; (<name><name>s</name><index>[<expr><name>i</name>+<name>m</name></expr>]</index></name> &amp; 0x1F)))</expr>)</condition><then>
                <expr_stmt><expr><name>i</name> = <name>i</name> + <name>m</name></expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><name>i</name> = <name>i</name> + <name>skip</name></expr>;</expr_stmt></else></if>
        }</block></then> <else>else <block>{
            <comment type="block">/* skip: check if next character is part of pattern */</comment>
            <if>if <condition>(<expr>!(<name>mask</name> &amp; (1 &lt;&lt; (<name><name>s</name><index>[<expr><name>i</name>+<name>m</name></expr>]</index></name> &amp; 0x1F)))</expr>)</condition><then>
                <expr_stmt><expr><name>i</name> = <name>i</name> + <name>m</name></expr>;</expr_stmt></then></if>
        }</block></else></if>
    }</block></for>

    <if>if <condition>(<expr><name>mode</name> != <name>FAST_COUNT</name></expr>)</condition><then>
        <return>return <expr>-1</expr>;</return></then></if>
    <return>return <expr><name>count</name></expr>;</return>
}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
Local variables:
c-basic-offset: 4
indent-tabs-mode: nil
End:
*/</comment>
</unit>
