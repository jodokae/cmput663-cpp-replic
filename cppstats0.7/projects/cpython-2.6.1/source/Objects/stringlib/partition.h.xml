<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Objects/stringlib/partition.h"><comment type="block">/* stringlib: partition implementation */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STRINGLIB_PARTITION_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGLIB_PARTITION_H</name></cpp:macro></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STRINGLIB_FASTSEARCH_H</name></cpp:ifndef>
<cpp:error>#<cpp:directive>error</cpp:directive> must include "stringlib/fastsearch.h" before including this module</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>Py_LOCAL_INLINE</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro>
<macro><name>stringlib_partition</name><argument_list>(
    <argument>PyObject* str_obj</argument>, <argument>const STRINGLIB_CHAR* str</argument>, <argument>Py_ssize_t str_len</argument>,
    <argument>PyObject* sep_obj</argument>, <argument>const STRINGLIB_CHAR* sep</argument>, <argument>Py_ssize_t sep_len</argument>
    )</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>pos</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>sep_len</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"empty separator"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>out</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>out</name></expr>)</condition><then>
	<return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>pos</name> = <call><name>fastsearch</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>str_len</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>sep_len</name></expr></argument>, <argument><expr><name>FAST_SEARCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>pos</name> &lt; 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>str_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>str_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>STRINGLIB_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>STRINGLIB_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>STRINGLIB_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>STRINGLIB_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>out</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>STRINGLIB_NEW</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>sep_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>sep_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pos</name> += <name>sep_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><call><name>STRINGLIB_NEW</name><argument_list>(<argument><expr><name>str</name> + <name>pos</name></expr></argument>, <argument><expr><name>str_len</name> - <name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>out</name></expr>;</return>
}</block>

<macro><name>Py_LOCAL_INLINE</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro>
<macro><name>stringlib_rpartition</name><argument_list>(
    <argument>PyObject* str_obj</argument>, <argument>const STRINGLIB_CHAR* str</argument>, <argument>Py_ssize_t str_len</argument>,
    <argument>PyObject* sep_obj</argument>, <argument>const STRINGLIB_CHAR* sep</argument>, <argument>Py_ssize_t sep_len</argument>
    )</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>sep_len</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"empty separator"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>out</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>out</name></expr>)</condition><then>
	<return>return <expr><name>NULL</name></expr>;</return></then></if>

    <comment type="block">/* XXX - create reversefastsearch helper! */</comment>
        <expr_stmt><expr><name>pos</name> = -1</expr>;</expr_stmt>
	<for>for (<init><expr><name>j</name> = <name>str_len</name> - <name>sep_len</name></expr>;</init> <condition><expr><name>j</name> &gt;= 0</expr>;</condition> <incr><expr>--<name>j</name></expr></incr>)
            <if>if <condition>(<expr><call><name>STRINGLIB_CMP</name><argument_list>(<argument><expr><name>str</name>+<name>j</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>sep_len</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>pos</name> = <name>j</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if></for>

    <if>if <condition>(<expr><name>pos</name> &lt; 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>STRINGLIB_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>STRINGLIB_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>STRINGLIB_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>STRINGLIB_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>str_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
	<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>str_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>out</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>STRINGLIB_NEW</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>sep_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>sep_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pos</name> += <name>sep_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><call><name>STRINGLIB_NEW</name><argument_list>(<argument><expr><name>str</name> + <name>pos</name></expr></argument>, <argument><expr><name>str_len</name> - <name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>out</name></expr>;</return>
}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
Local variables:
c-basic-offset: 4
indent-tabs-mode: nil
End:
*/</comment>
</unit>
