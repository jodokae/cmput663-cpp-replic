<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Objects/codeobject.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"code.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_CHARS</name></cpp:macro> \
	<cpp:value>"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz"</cpp:value></cpp:define>

<comment type="block">/* all_name_chars(s): true iff all chars in s are valid NAME_CHARS */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>all_name_chars</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>ok_name_char</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> *</type><name>name_chars</name> <init>= <expr>(<name>unsigned</name> <name>char</name> *)<name>NAME_CHARS</name></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr><name><name>ok_name_char</name><index>[<expr>*<name>name_chars</name></expr>]</index></name> == 0</expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>
		<for>for (<init><expr><name>p</name> = <name>name_chars</name></expr>;</init> <condition><expr>*<name>p</name></expr>;</condition> <incr><expr><name>p</name>++</expr></incr>)
			<expr_stmt><expr><name><name>ok_name_char</name><index>[<expr>*<name>p</name></expr>]</index></name> = 1</expr>;</expr_stmt></for>
	}</block></then></if>
	<while>while <condition>(<expr>*<name>s</name></expr>)</condition> <block>{
		<if>if <condition>(<expr><name><name>ok_name_char</name><index>[<expr>*<name>s</name>++</expr>]</index></name> == 0</expr>)</condition><then>
			<return>return <expr>0</expr>;</return></then></if>
	}</block></while>
	<return>return <expr>1</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>intern_strings</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>tuple</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for (<init><expr><name>i</name> = <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr>--<name>i</name> &gt;= 0</expr>;</condition> <incr/>) <block>{
		<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>v</name> == <name>NULL</name> || !<call><name>PyString_CheckExact</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"non-string found in code slot"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name>PyString_InternInPlace</name><argument_list>(<argument><expr>&amp;<call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>


<function><type><name>PyCodeObject</name> *</type>
<name>PyCode_New</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argcount</name></decl></param>, <param><decl><type><name>int</name></type> <name>nlocals</name></decl></param>, <param><decl><type><name>int</name></type> <name>stacksize</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>,
	   <param><decl><type><name>PyObject</name> *</type><name>code</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>consts</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>names</name></decl></param>,
	   <param><decl><type><name>PyObject</name> *</type><name>varnames</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>freevars</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>cellvars</name></decl></param>,
	   <param><decl><type><name>PyObject</name> *</type><name>filename</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>name</name></decl></param>, <param><decl><type><name>int</name></type> <name>firstlineno</name></decl></param>,
	   <param><decl><type><name>PyObject</name> *</type><name>lnotab</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyCodeObject</name> *</type><name>co</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
	<comment type="block">/* Check argument types */</comment>
	<if>if <condition>(<expr><name>argcount</name> &lt; 0 || <name>nlocals</name> &lt; 0 ||
	    <name>code</name> == <name>NULL</name> ||
	    <name>consts</name> == <name>NULL</name> || !<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>consts</name></expr></argument>)</argument_list></call> ||
	    <name>names</name> == <name>NULL</name> || !<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call> ||
	    <name>varnames</name> == <name>NULL</name> || !<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>varnames</name></expr></argument>)</argument_list></call> ||
	    <name>freevars</name> == <name>NULL</name> || !<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>freevars</name></expr></argument>)</argument_list></call> ||
	    <name>cellvars</name> == <name>NULL</name> || !<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>cellvars</name></expr></argument>)</argument_list></call> ||
	    <name>name</name> == <name>NULL</name> || !<call><name>PyString_Check</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> ||
	    <name>filename</name> == <name>NULL</name> || !<call><name>PyString_Check</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> ||
	    <name>lnotab</name> == <name>NULL</name> || !<call><name>PyString_Check</name><argument_list>(<argument><expr><name>lnotab</name></expr></argument>)</argument_list></call> ||
	    !<call><name>PyObject_CheckReadBuffer</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>intern_strings</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>intern_strings</name><argument_list>(<argument><expr><name>varnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>intern_strings</name><argument_list>(<argument><expr><name>freevars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>intern_strings</name><argument_list>(<argument><expr><name>cellvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Intern selected string constants */</comment>
	<for>for (<init><expr><name>i</name> = <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>consts</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr>--<name>i</name> &gt;= 0</expr>;</condition> <incr/>) <block>{
		<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>consts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr>!<call><name>PyString_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<continue>continue;</continue></then></if>
		<if>if <condition>(<expr>!<call><name>all_name_chars</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>char</name> *)<call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
			<continue>continue;</continue></then></if>
		<expr_stmt><expr><call><name>PyString_InternInPlace</name><argument_list>(<argument><expr>&amp;<call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>consts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>co</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>PyCodeObject</name></expr></argument>, <argument><expr>&amp;<name>PyCode_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>co</name> != <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>co</name>-&gt;<name>co_argcount</name></name> = <name>argcount</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>co</name>-&gt;<name>co_nlocals</name></name> = <name>nlocals</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>co</name>-&gt;<name>co_stacksize</name></name> = <name>stacksize</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>co</name>-&gt;<name>co_flags</name></name> = <name>flags</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>co</name>-&gt;<name>co_code</name></name> = <name>code</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>consts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>co</name>-&gt;<name>co_consts</name></name> = <name>consts</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>co</name>-&gt;<name>co_names</name></name> = <name>names</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>varnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>co</name>-&gt;<name>co_varnames</name></name> = <name>varnames</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>freevars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>co</name>-&gt;<name>co_freevars</name></name> = <name>freevars</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>cellvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>co</name>-&gt;<name>co_cellvars</name></name> = <name>cellvars</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>co</name>-&gt;<name>co_filename</name></name> = <name>filename</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>co</name>-&gt;<name>co_name</name></name> = <name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>co</name>-&gt;<name>co_firstlineno</name></name> = <name>firstlineno</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>lnotab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>co</name>-&gt;<name>co_lnotab</name></name> = <name>lnotab</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>co</name>-&gt;<name>co_zombieframe</name></name> = <name>NULL</name></expr>;</expr_stmt>
	}</block></then></if>
	<return>return <expr><name>co</name></expr>;</return>
}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>offsetof(PyCodeObject, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>code_memberlist</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"co_argcount"</expr>,	<expr><name>T_INT</name></expr>,		<expr><call><name>OFF</name><argument_list>(<argument><expr><name>co_argcount</name></expr></argument>)</argument_list></call></expr>,	<expr><name>READONLY</name></expr>}</block></expr>,
	<expr><block>{<expr>"co_nlocals"</expr>,	<expr><name>T_INT</name></expr>,		<expr><call><name>OFF</name><argument_list>(<argument><expr><name>co_nlocals</name></expr></argument>)</argument_list></call></expr>,	<expr><name>READONLY</name></expr>}</block></expr>,
	<expr><block>{<expr>"co_stacksize"</expr>,<expr><name>T_INT</name></expr>,		<expr><call><name>OFF</name><argument_list>(<argument><expr><name>co_stacksize</name></expr></argument>)</argument_list></call></expr>,	<expr><name>READONLY</name></expr>}</block></expr>,
	<expr><block>{<expr>"co_flags"</expr>,	<expr><name>T_INT</name></expr>,		<expr><call><name>OFF</name><argument_list>(<argument><expr><name>co_flags</name></expr></argument>)</argument_list></call></expr>,		<expr><name>READONLY</name></expr>}</block></expr>,
	<expr><block>{<expr>"co_code"</expr>,	<expr><name>T_OBJECT</name></expr>,	<expr><call><name>OFF</name><argument_list>(<argument><expr><name>co_code</name></expr></argument>)</argument_list></call></expr>,		<expr><name>READONLY</name></expr>}</block></expr>,
	<expr><block>{<expr>"co_consts"</expr>,	<expr><name>T_OBJECT</name></expr>,	<expr><call><name>OFF</name><argument_list>(<argument><expr><name>co_consts</name></expr></argument>)</argument_list></call></expr>,		<expr><name>READONLY</name></expr>}</block></expr>,
	<expr><block>{<expr>"co_names"</expr>,	<expr><name>T_OBJECT</name></expr>,	<expr><call><name>OFF</name><argument_list>(<argument><expr><name>co_names</name></expr></argument>)</argument_list></call></expr>,		<expr><name>READONLY</name></expr>}</block></expr>,
	<expr><block>{<expr>"co_varnames"</expr>,	<expr><name>T_OBJECT</name></expr>,	<expr><call><name>OFF</name><argument_list>(<argument><expr><name>co_varnames</name></expr></argument>)</argument_list></call></expr>,	<expr><name>READONLY</name></expr>}</block></expr>,
	<expr><block>{<expr>"co_freevars"</expr>,	<expr><name>T_OBJECT</name></expr>,	<expr><call><name>OFF</name><argument_list>(<argument><expr><name>co_freevars</name></expr></argument>)</argument_list></call></expr>,	<expr><name>READONLY</name></expr>}</block></expr>,
	<expr><block>{<expr>"co_cellvars"</expr>,	<expr><name>T_OBJECT</name></expr>,	<expr><call><name>OFF</name><argument_list>(<argument><expr><name>co_cellvars</name></expr></argument>)</argument_list></call></expr>,	<expr><name>READONLY</name></expr>}</block></expr>,
	<expr><block>{<expr>"co_filename"</expr>,	<expr><name>T_OBJECT</name></expr>,	<expr><call><name>OFF</name><argument_list>(<argument><expr><name>co_filename</name></expr></argument>)</argument_list></call></expr>,	<expr><name>READONLY</name></expr>}</block></expr>,
	<expr><block>{<expr>"co_name"</expr>,	<expr><name>T_OBJECT</name></expr>,	<expr><call><name>OFF</name><argument_list>(<argument><expr><name>co_name</name></expr></argument>)</argument_list></call></expr>,		<expr><name>READONLY</name></expr>}</block></expr>,
	<expr><block>{<expr>"co_firstlineno"</expr>, <expr><name>T_INT</name></expr>,	<expr><call><name>OFF</name><argument_list>(<argument><expr><name>co_firstlineno</name></expr></argument>)</argument_list></call></expr>,	<expr><name>READONLY</name></expr>}</block></expr>,
	<expr><block>{<expr>"co_lnotab"</expr>,	<expr><name>T_OBJECT</name></expr>,	<expr><call><name>OFF</name><argument_list>(<argument><expr><name>co_lnotab</name></expr></argument>)</argument_list></call></expr>,		<expr><name>READONLY</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>}</block></expr>	<comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Helper for code_new: return a shallow copy of a tuple that is
   guaranteed to contain exact strings, by converting string subclasses
   to exact strings and complaining if a non-string is found. */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>validate_and_copy_tuple</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>tup</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>newtuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> = <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>newtuple</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>newtuple</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
		<expr_stmt><expr><name>item</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name>PyString_CheckExact</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else <if>if <condition>(<expr>!<call><name>PyString_Check</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(
				<argument><expr><name>PyExc_TypeError</name></expr></argument>,
				<argument><expr>"name tuples must contain only "
				"strings, not '%.500s'"</expr></argument>,
				<argument><expr><name><name>item</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>newtuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><name>item</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(
				<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>item</name> == <name>NULL</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>newtuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>NULL</name></expr>;</return>
			}</block></then></if>
		}</block></else></if></else></if>
		<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>newtuple</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<return>return <expr><name>newtuple</name></expr>;</return>
}</block></function>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>code_doc</name></expr></argument>,
<argument><expr>"code(argcount, nlocals, stacksize, flags, codestring, constants, names,\n\
      varnames, filename, name, firstlineno, lnotab[, freevars[, cellvars]])\n\
\n\
Create a code object.  Not for the faint of heart."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>code_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>argcount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nlocals</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>stacksize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>co</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>code</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>consts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>names</name></decl>, *<decl><type ref="prev"/><name>ournames</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>varnames</name></decl>, *<decl><type ref="prev"/><name>ourvarnames</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>freevars</name> <init>= <expr><name>NULL</name></expr></init>, *<name>ourfreevars</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>cellvars</name> <init>= <expr><name>NULL</name></expr></init>, *<name>ourcellvars</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>filename</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>firstlineno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>lnotab</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iiiiSO!O!O!SSiS|O!O!:code"</expr></argument>,
			      <argument><expr>&amp;<name>argcount</name></expr></argument>, <argument><expr>&amp;<name>nlocals</name></expr></argument>, <argument><expr>&amp;<name>stacksize</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>,
			      <argument><expr>&amp;<name>code</name></expr></argument>,
			      <argument><expr>&amp;<name>PyTuple_Type</name></expr></argument>, <argument><expr>&amp;<name>consts</name></expr></argument>,
			      <argument><expr>&amp;<name>PyTuple_Type</name></expr></argument>, <argument><expr>&amp;<name>names</name></expr></argument>,
			      <argument><expr>&amp;<name>PyTuple_Type</name></expr></argument>, <argument><expr>&amp;<name>varnames</name></expr></argument>,
			      <argument><expr>&amp;<name>filename</name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>,
			      <argument><expr>&amp;<name>firstlineno</name></expr></argument>, <argument><expr>&amp;<name>lnotab</name></expr></argument>,
			      <argument><expr>&amp;<name>PyTuple_Type</name></expr></argument>, <argument><expr>&amp;<name>freevars</name></expr></argument>,
			      <argument><expr>&amp;<name>PyTuple_Type</name></expr></argument>, <argument><expr>&amp;<name>cellvars</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><name>argcount</name> &lt; 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
			<argument><expr><name>PyExc_ValueError</name></expr></argument>,
			<argument><expr>"code: argcount must not be negative"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	}</block></then></if>

	<if>if <condition>(<expr><name>nlocals</name> &lt; 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
			<argument><expr><name>PyExc_ValueError</name></expr></argument>,
			<argument><expr>"code: nlocals must not be negative"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	}</block></then></if>

	<expr_stmt><expr><name>ournames</name> = <call><name>validate_and_copy_tuple</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>ournames</name> == <name>NULL</name></expr>)</condition><then>
		<goto>goto <name>cleanup</name>;</goto></then></if>
	<expr_stmt><expr><name>ourvarnames</name> = <call><name>validate_and_copy_tuple</name><argument_list>(<argument><expr><name>varnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>ourvarnames</name> == <name>NULL</name></expr>)</condition><then>
		<goto>goto <name>cleanup</name>;</goto></then></if>
	<if>if <condition>(<expr><name>freevars</name></expr>)</condition><then>
		<expr_stmt><expr><name>ourfreevars</name> = <call><name>validate_and_copy_tuple</name><argument_list>(<argument><expr><name>freevars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else>else
		<expr_stmt><expr><name>ourfreevars</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	<if>if <condition>(<expr><name>ourfreevars</name> == <name>NULL</name></expr>)</condition><then>
		<goto>goto <name>cleanup</name>;</goto></then></if>
	<if>if <condition>(<expr><name>cellvars</name></expr>)</condition><then>
		<expr_stmt><expr><name>ourcellvars</name> = <call><name>validate_and_copy_tuple</name><argument_list>(<argument><expr><name>cellvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else>else
		<expr_stmt><expr><name>ourcellvars</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	<if>if <condition>(<expr><name>ourcellvars</name> == <name>NULL</name></expr>)</condition><then>
		<goto>goto <name>cleanup</name>;</goto></then></if>

	<expr_stmt><expr><name>co</name> = (<name>PyObject</name> *)<call><name>PyCode_New</name><argument_list>(<argument><expr><name>argcount</name></expr></argument>, <argument><expr><name>nlocals</name></expr></argument>, <argument><expr><name>stacksize</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
				    <argument><expr><name>code</name></expr></argument>, <argument><expr><name>consts</name></expr></argument>, <argument><expr><name>ournames</name></expr></argument>, <argument><expr><name>ourvarnames</name></expr></argument>,
				    <argument><expr><name>ourfreevars</name></expr></argument>, <argument><expr><name>ourcellvars</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>,
				    <argument><expr><name>name</name></expr></argument>, <argument><expr><name>firstlineno</name></expr></argument>, <argument><expr><name>lnotab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>ournames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>ourvarnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>ourfreevars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>ourcellvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>co</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>code_dealloc</name><parameter_list>(<param><decl><type><name>PyCodeObject</name> *</type><name>co</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_consts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_varnames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_freevars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_cellvars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_lnotab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>co</name>-&gt;<name>co_zombieframe</name></name> != <name>NULL</name></expr>)</condition><then>
                <expr_stmt><expr><call><name>PyObject_GC_Del</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_zombieframe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>PyObject_DEL</name><argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>code_repr</name><parameter_list>(<param><decl><type><name>PyCodeObject</name> *</type><name>co</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>500</expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>lineno</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>filename</name> <init>= <expr>"???"</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr>"???"</expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr><name><name>co</name>-&gt;<name>co_firstlineno</name></name> != 0</expr>)</condition><then>
		<expr_stmt><expr><name>lineno</name> = <name><name>co</name>-&gt;<name>co_firstlineno</name></name></expr>;</expr_stmt></then></if>
	<if>if <condition>(<expr><name><name>co</name>-&gt;<name>co_filename</name></name> &amp;&amp; <call><name>PyString_Check</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_filename</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<expr_stmt><expr><name>filename</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if>if <condition>(<expr><name><name>co</name>-&gt;<name>co_name</name></name> &amp;&amp; <call><name>PyString_Check</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<expr_stmt><expr><name>name</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
		      <argument><expr>"&lt;code object %.100s at %p, file \"%.300s\", line %d&gt;"</expr></argument>,
		      <argument><expr><name>name</name></expr></argument>, <argument><expr><name>co</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>code_compare</name><parameter_list>(<param><decl><type><name>PyCodeObject</name> *</type><name>co</name></decl></param>, <param><decl><type><name>PyCodeObject</name> *</type><name>cp</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cmp</name> = <call><name>PyObject_Compare</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_name</name></name></expr></argument>, <argument><expr><name><name>cp</name>-&gt;<name>co_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>cmp</name></expr>)</condition><then> <return>return <expr><name>cmp</name></expr>;</return></then></if>
	<expr_stmt><expr><name>cmp</name> = <name><name>co</name>-&gt;<name>co_argcount</name></name> - <name><name>cp</name>-&gt;<name>co_argcount</name></name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>cmp</name></expr>)</condition><then> <goto>goto <name>normalize</name>;</goto></then></if>
	<expr_stmt><expr><name>cmp</name> = <name><name>co</name>-&gt;<name>co_nlocals</name></name> - <name><name>cp</name>-&gt;<name>co_nlocals</name></name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>cmp</name></expr>)</condition><then> <goto>goto <name>normalize</name>;</goto></then></if>
	<expr_stmt><expr><name>cmp</name> = <name><name>co</name>-&gt;<name>co_flags</name></name> - <name><name>cp</name>-&gt;<name>co_flags</name></name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>cmp</name></expr>)</condition><then> <goto>goto <name>normalize</name>;</goto></then></if>
	<expr_stmt><expr><name>cmp</name> = <name><name>co</name>-&gt;<name>co_firstlineno</name></name> - <name><name>cp</name>-&gt;<name>co_firstlineno</name></name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>cmp</name></expr>)</condition><then> <goto>goto <name>normalize</name>;</goto></then></if>
	<expr_stmt><expr><name>cmp</name> = <call><name>PyObject_Compare</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_code</name></name></expr></argument>, <argument><expr><name><name>cp</name>-&gt;<name>co_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>cmp</name></expr>)</condition><then> <return>return <expr><name>cmp</name></expr>;</return></then></if>
	<expr_stmt><expr><name>cmp</name> = <call><name>PyObject_Compare</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_consts</name></name></expr></argument>, <argument><expr><name><name>cp</name>-&gt;<name>co_consts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>cmp</name></expr>)</condition><then> <return>return <expr><name>cmp</name></expr>;</return></then></if>
	<expr_stmt><expr><name>cmp</name> = <call><name>PyObject_Compare</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_names</name></name></expr></argument>, <argument><expr><name><name>cp</name>-&gt;<name>co_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>cmp</name></expr>)</condition><then> <return>return <expr><name>cmp</name></expr>;</return></then></if>
	<expr_stmt><expr><name>cmp</name> = <call><name>PyObject_Compare</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_varnames</name></name></expr></argument>, <argument><expr><name><name>cp</name>-&gt;<name>co_varnames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>cmp</name></expr>)</condition><then> <return>return <expr><name>cmp</name></expr>;</return></then></if>
	<expr_stmt><expr><name>cmp</name> = <call><name>PyObject_Compare</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_freevars</name></name></expr></argument>, <argument><expr><name><name>cp</name>-&gt;<name>co_freevars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>cmp</name></expr>)</condition><then> <return>return <expr><name>cmp</name></expr>;</return></then></if>
	<expr_stmt><expr><name>cmp</name> = <call><name>PyObject_Compare</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_cellvars</name></name></expr></argument>, <argument><expr><name><name>cp</name>-&gt;<name>co_cellvars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>cmp</name></expr>;</return>

 <label><name>normalize</name>:</label>
	<if>if <condition>(<expr><name>cmp</name> &gt; 0</expr>)</condition><then>
		<return>return <expr>1</expr>;</return></then>
	<else>else <if>if <condition>(<expr><name>cmp</name> &lt; 0</expr>)</condition><then>
		<return>return <expr>-1</expr>;</return></then>
	<else>else
		<return>return <expr>0</expr>;</return></else></if></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>code_richcompare</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>other</name></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyCodeObject</name> *</type><name>co</name></decl>, *<decl><type ref="prev"/><name>cp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>eq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>(<name>op</name> != <name>Py_EQ</name> &amp;&amp; <name>op</name> != <name>Py_NE</name>) ||
	    !<call><name>PyCode_Check</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> ||
	    !<call><name>PyCode_Check</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

		<comment type="block">/* Py3K warning if types are not equal and comparison
		isn't == or !=  */</comment>
		<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"code inequality comparisons not supported "
				   "in 3.x"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
			<return>return <expr><name>NULL</name></expr>;</return>
		}</block></then></if>

		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_NotImplemented</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>Py_NotImplemented</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><name>co</name> = (<name>PyCodeObject</name> *)<name>self</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cp</name> = (<name>PyCodeObject</name> *)<name>other</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>eq</name> = <call><name>PyObject_RichCompareBool</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_name</name></name></expr></argument>, <argument><expr><name><name>cp</name>-&gt;<name>co_name</name></name></expr></argument>, <argument><expr><name>Py_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>eq</name> &lt;= 0</expr>)</condition><then> <goto>goto <name>unequal</name>;</goto></then></if>
	<expr_stmt><expr><name>eq</name> = <name><name>co</name>-&gt;<name>co_argcount</name></name> == <name><name>cp</name>-&gt;<name>co_argcount</name></name></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>eq</name></expr>)</condition><then> <goto>goto <name>unequal</name>;</goto></then></if>
	<expr_stmt><expr><name>eq</name> = <name><name>co</name>-&gt;<name>co_nlocals</name></name> == <name><name>cp</name>-&gt;<name>co_nlocals</name></name></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>eq</name></expr>)</condition><then> <goto>goto <name>unequal</name>;</goto></then></if>
	<expr_stmt><expr><name>eq</name> = <name><name>co</name>-&gt;<name>co_flags</name></name> == <name><name>cp</name>-&gt;<name>co_flags</name></name></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>eq</name></expr>)</condition><then> <goto>goto <name>unequal</name>;</goto></then></if>
	<expr_stmt><expr><name>eq</name> = <name><name>co</name>-&gt;<name>co_firstlineno</name></name> == <name><name>cp</name>-&gt;<name>co_firstlineno</name></name></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>eq</name></expr>)</condition><then> <goto>goto <name>unequal</name>;</goto></then></if>
	<expr_stmt><expr><name>eq</name> = <call><name>PyObject_RichCompareBool</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_code</name></name></expr></argument>, <argument><expr><name><name>cp</name>-&gt;<name>co_code</name></name></expr></argument>, <argument><expr><name>Py_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>eq</name> &lt;= 0</expr>)</condition><then> <goto>goto <name>unequal</name>;</goto></then></if>
	<expr_stmt><expr><name>eq</name> = <call><name>PyObject_RichCompareBool</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_consts</name></name></expr></argument>, <argument><expr><name><name>cp</name>-&gt;<name>co_consts</name></name></expr></argument>, <argument><expr><name>Py_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>eq</name> &lt;= 0</expr>)</condition><then> <goto>goto <name>unequal</name>;</goto></then></if>
	<expr_stmt><expr><name>eq</name> = <call><name>PyObject_RichCompareBool</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_names</name></name></expr></argument>, <argument><expr><name><name>cp</name>-&gt;<name>co_names</name></name></expr></argument>, <argument><expr><name>Py_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>eq</name> &lt;= 0</expr>)</condition><then> <goto>goto <name>unequal</name>;</goto></then></if>
	<expr_stmt><expr><name>eq</name> = <call><name>PyObject_RichCompareBool</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_varnames</name></name></expr></argument>, <argument><expr><name><name>cp</name>-&gt;<name>co_varnames</name></name></expr></argument>, <argument><expr><name>Py_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>eq</name> &lt;= 0</expr>)</condition><then> <goto>goto <name>unequal</name>;</goto></then></if>
	<expr_stmt><expr><name>eq</name> = <call><name>PyObject_RichCompareBool</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_freevars</name></name></expr></argument>, <argument><expr><name><name>cp</name>-&gt;<name>co_freevars</name></name></expr></argument>, <argument><expr><name>Py_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>eq</name> &lt;= 0</expr>)</condition><then> <goto>goto <name>unequal</name>;</goto></then></if>
	<expr_stmt><expr><name>eq</name> = <call><name>PyObject_RichCompareBool</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_cellvars</name></name></expr></argument>, <argument><expr><name><name>cp</name>-&gt;<name>co_cellvars</name></name></expr></argument>, <argument><expr><name>Py_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>eq</name> &lt;= 0</expr>)</condition><then> <goto>goto <name>unequal</name>;</goto></then></if>

	<if>if <condition>(<expr><name>op</name> == <name>Py_EQ</name></expr>)</condition><then>
		<expr_stmt><expr><name>res</name> = <name>Py_True</name></expr>;</expr_stmt></then>
	<else>else
		<expr_stmt><expr><name>res</name> = <name>Py_False</name></expr>;</expr_stmt></else></if>
	<goto>goto <name>done</name>;</goto>

  <label><name>unequal</name>:</label>
	<if>if <condition>(<expr><name>eq</name> &lt; 0</expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr><name>op</name> == <name>Py_NE</name></expr>)</condition><then>
		<expr_stmt><expr><name>res</name> = <name>Py_True</name></expr>;</expr_stmt></then>
	<else>else
		<expr_stmt><expr><name>res</name> = <name>Py_False</name></expr>;</expr_stmt></else></if>

  <label><name>done</name>:</label>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>code_hash</name><parameter_list>(<param><decl><type><name>PyCodeObject</name> *</type><name>co</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>h0</name></decl>, <decl><type ref="prev"/><name>h1</name></decl>, <decl><type ref="prev"/><name>h2</name></decl>, <decl><type ref="prev"/><name>h3</name></decl>, <decl><type ref="prev"/><name>h4</name></decl>, <decl><type ref="prev"/><name>h5</name></decl>, <decl><type ref="prev"/><name>h6</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>h0</name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>h0</name> == -1</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
	<expr_stmt><expr><name>h1</name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>h1</name> == -1</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
	<expr_stmt><expr><name>h2</name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_consts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>h2</name> == -1</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
	<expr_stmt><expr><name>h3</name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>h3</name> == -1</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
	<expr_stmt><expr><name>h4</name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_varnames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>h4</name> == -1</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
	<expr_stmt><expr><name>h5</name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_freevars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>h5</name> == -1</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
	<expr_stmt><expr><name>h6</name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_cellvars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>h6</name> == -1</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
	<expr_stmt><expr><name>h</name> = <name>h0</name> ^ <name>h1</name> ^ <name>h2</name> ^ <name>h3</name> ^ <name>h4</name> ^ <name>h5</name> ^ <name>h6</name> ^
		<name><name>co</name>-&gt;<name>co_argcount</name></name> ^ <name><name>co</name>-&gt;<name>co_nlocals</name></name> ^ <name><name>co</name>-&gt;<name>co_flags</name></name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>h</name> == -1</expr>)</condition><then> <expr_stmt><expr><name>h</name> = -2</expr>;</expr_stmt></then></if>
	<return>return <expr><name>h</name></expr>;</return>
}</block></function>

<comment type="block">/* XXX code objects need to participate in GC? */</comment>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyCode_Type</name> <init>= <expr><block>{
	<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
	"code"</expr>,
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyCodeObject</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr>0</expr>,
	<expr>(<name>destructor</name>)<name>code_dealloc</name></expr>, 	<comment type="block">/* tp_dealloc */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_print */</comment>
	<expr>0</expr>, 				<comment type="block">/* tp_getattr */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_setattr */</comment>
	<expr>(<name>cmpfunc</name>)<name>code_compare</name></expr>, 		<comment type="block">/* tp_compare */</comment>
	<expr>(<name>reprfunc</name>)<name>code_repr</name></expr>,		<comment type="block">/* tp_repr */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_as_number */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_as_sequence */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_as_mapping */</comment>
	<expr>(<name>hashfunc</name>)<name>code_hash</name></expr>, 		<comment type="block">/* tp_hash */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_call */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_str */</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>,	<comment type="block">/* tp_getattro */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_setattro */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_as_buffer */</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name></expr>,		<comment type="block">/* tp_flags */</comment>
	<expr><name>code_doc</name></expr>,			<comment type="block">/* tp_doc */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_traverse */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_clear */</comment>
	<expr><name>code_richcompare</name></expr>,				<comment type="block">/* tp_richcompare */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_weaklistoffset */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_iter */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_iternext */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_methods */</comment>
	<expr><name>code_memberlist</name></expr>,		<comment type="block">/* tp_members */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_getset */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_base */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_dict */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_descr_get */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_descr_set */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_dictoffset */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_init */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_alloc */</comment>
	<expr><name>code_new</name></expr>,			<comment type="block">/* tp_new */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* All about c_lnotab.

c_lnotab is an array of unsigned bytes disguised as a Python string.  In -O
mode, SET_LINENO opcodes aren't generated, and bytecode offsets are mapped
to source code line #s (when needed for tracebacks) via c_lnotab instead.
The array is conceptually a list of
    (bytecode offset increment, line number increment)
pairs.  The details are important and delicate, best illustrated by example:

    byte code offset    source code line number
        0		    1
        6		    2
       50		    7
      350                 307
      361                 308

The first trick is that these numbers aren't stored, only the increments
from one row to the next (this doesn't really work, but it's a start):

    0, 1,  6, 1,  44, 5,  300, 300,  11, 1

The second trick is that an unsigned byte can't hold negative values, or
values larger than 255, so (a) there's a deep assumption that byte code
offsets and their corresponding line #s both increase monotonically, and (b)
if at least one column jumps by more than 255 from one row to the next, more
than one pair is written to the table. In case #b, there's no way to know
from looking at the table later how many were written.  That's the delicate
part.  A user of c_lnotab desiring to find the source line number
corresponding to a bytecode address A should do something like this

    lineno = addr = 0
    for addr_incr, line_incr in c_lnotab:
        addr += addr_incr
        if addr &gt; A:
            return lineno
        lineno += line_incr

In order for this to work, when the addr field increments by more than 255,
the line # increment in each pair generated must be 0 until the remaining addr
increment is &lt; 256.  So, in the example above, com_set_lineno should not (as
was actually done until 2.2) expand 300, 300 to 255, 255,  45, 45, but to
255, 0,  45, 255,  0, 45.
*/</comment>

<function><type><name>int</name></type>
<name>PyCode_Addr2Line</name><parameter_list>(<param><decl><type><name>PyCodeObject</name> *</type><name>co</name></decl></param>, <param><decl><type><name>int</name></type> <name>addrq</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>PyString_Size</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_lnotab</name></name></expr></argument>)</argument_list></call> / 2</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>p</name> <init>= <expr>(<name>unsigned</name> <name>char</name>*)<call><name>PyString_AsString</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_lnotab</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr><name><name>co</name>-&gt;<name>co_firstlineno</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>addr</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr>--<name>size</name> &gt;= 0</expr>)</condition> <block>{
		<expr_stmt><expr><name>addr</name> += *<name>p</name>++</expr>;</expr_stmt>
		<if>if <condition>(<expr><name>addr</name> &gt; <name>addrq</name></expr>)</condition><then>
			<break>break;</break></then></if>
		<expr_stmt><expr><name>line</name> += *<name>p</name>++</expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>line</name></expr>;</return>
}</block></function>

<comment type="block">/* 
   Check whether the current instruction is at the start of a line.

 */</comment>

	<comment type="block">/* The theory of SET_LINENO-less tracing.

	   In a nutshell, we use the co_lnotab field of the code object
	   to tell when execution has moved onto a different line.

	   As mentioned above, the basic idea is so set things up so
	   that

	         *instr_lb &lt;= frame-&gt;f_lasti &lt; *instr_ub

	   is true so long as execution does not change lines.

	   This is all fairly simple.  Digging the information out of
	   co_lnotab takes some work, but is conceptually clear.

	   Somewhat harder to explain is why we don't *always* call the
	   line trace function when the above test fails.

	   Consider this code:

	   1: def f(a):
	   2:     if a:
	   3:        print 1
	   4:     else:
	   5:        print 2

	   which compiles to this:

	   2           0 LOAD_FAST                0 (a)
		       3 JUMP_IF_FALSE            9 (to 15)
		       6 POP_TOP

	   3           7 LOAD_CONST               1 (1)
		      10 PRINT_ITEM
		      11 PRINT_NEWLINE
		      12 JUMP_FORWARD             6 (to 21)
		 &gt;&gt;   15 POP_TOP

	   5          16 LOAD_CONST               2 (2)
		      19 PRINT_ITEM
		      20 PRINT_NEWLINE
		 &gt;&gt;   21 LOAD_CONST               0 (None)
		      24 RETURN_VALUE

	   If 'a' is false, execution will jump to instruction at offset
	   15 and the co_lnotab will claim that execution has moved to
	   line 3.  This is at best misleading.  In this case we could
	   associate the POP_TOP with line 4, but that doesn't make
	   sense in all cases (I think).

	   What we do is only call the line trace function if the co_lnotab
	   indicates we have jumped to the *start* of a line, i.e. if the
	   current instruction offset matches the offset given for the
	   start of a line by the co_lnotab.

	   This also takes care of the situation where 'a' is true.
	   Execution will jump from instruction offset 12 to offset 21.
	   Then the co_lnotab would imply that execution has moved to line
	   5, which is again misleading.

	   Why do we set f_lineno when tracing?  Well, consider the code
	   above when 'a' is true.  If stepping through this with 'n' in
	   pdb, you would stop at line 1 with a "call" type event, then
	   line events on lines 2 and 3, then a "return" type event -- but
	   you would be shown line 5 during this event.  This is a change
	   from the behaviour in 2.2 and before, and I've found it
	   confusing in practice.  By setting and using f_lineno when
	   tracing, one can report a line number different from that
	   suggested by f_lasti on this one occasion where it's desirable.
	*/</comment>


<function><type><name>int</name></type> 
<name>PyCode_CheckLineNumber</name><parameter_list>(<param><decl><type><name>PyCodeObject</name>*</type> <name>co</name></decl></param>, <param><decl><type><name>int</name></type> <name>lasti</name></decl></param>, <param><decl><type><name>PyAddrPair</name> *</type><name>bounds</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>addr</name></decl>, <decl><type ref="prev"/><name>line</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name>*</type> <name>p</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>p</name> = (<name>unsigned</name> <name>char</name>*)<call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_lnotab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> = <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name><name>co</name>-&gt;<name>co_lnotab</name></name></expr></argument>)</argument_list></call> / 2</expr>;</expr_stmt>

        <expr_stmt><expr><name>addr</name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name>line</name> = <name><name>co</name>-&gt;<name>co_firstlineno</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>line</name> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* possible optimization: if f-&gt;f_lasti == instr_ub
           (likely to be a common case) then we already know
           instr_lb -- if we stored the matching value of p
           somwhere we could skip the first while loop. */</comment>

        <comment type="block">/* see comments in compile.c for the description of
           co_lnotab.  A point to remember: increments to p
           should come in pairs -- although we don't care about
           the line increments here, treating them as byte
           increments gets confusing, to say the least. */</comment>

        <expr_stmt><expr><name><name>bounds</name>-&gt;<name>ap_lower</name></name> = 0</expr>;</expr_stmt>
        <while>while <condition>(<expr><name>size</name> &gt; 0</expr>)</condition> <block>{
                <if>if <condition>(<expr><name>addr</name> + *<name>p</name> &gt; <name>lasti</name></expr>)</condition><then>
                        <break>break;</break></then></if>
                <expr_stmt><expr><name>addr</name> += *<name>p</name>++</expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>p</name></expr>)</condition><then> 
                        <expr_stmt><expr><name><name>bounds</name>-&gt;<name>ap_lower</name></name> = <name>addr</name></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><name>line</name> += *<name>p</name>++</expr>;</expr_stmt>
                <expr_stmt><expr>--<name>size</name></expr>;</expr_stmt>
        }</block></while>

        <comment type="block">/* If lasti and addr don't match exactly, we don't want to
           change the lineno slot on the frame or execute a trace
           function.  Return -1 instead.
        */</comment>
        <if>if <condition>(<expr><name>addr</name> != <name>lasti</name></expr>)</condition><then>
                <expr_stmt><expr><name>line</name> = -1</expr>;</expr_stmt></then></if>
        
        <if>if <condition>(<expr><name>size</name> &gt; 0</expr>)</condition><then> <block>{
                <while>while <condition>(<expr>--<name>size</name> &gt;= 0</expr>)</condition> <block>{
                        <expr_stmt><expr><name>addr</name> += *<name>p</name>++</expr>;</expr_stmt>
                        <if>if <condition>(<expr>*<name>p</name>++</expr>)</condition><then>
                                <break>break;</break></then></if>
                }</block></while>
                <expr_stmt><expr><name><name>bounds</name>-&gt;<name>ap_upper</name></name> = <name>addr</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
                <expr_stmt><expr><name><name>bounds</name>-&gt;<name>ap_upper</name></name> = <name>INT_MAX</name></expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr><name>line</name></expr>;</return>
}</block></function>
</unit>
