<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Objects/unicodectype.c"><comment type="block">/*
   Unicode character type helpers.

   Written by Marc-Andre Lemburg (mal@lemburg.com).
   Modified for Python 2.0 by Fredrik Lundh (fredrik@pythonware.com)

   Copyright (c) Corporation for National Research Initiatives.

*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unicodeobject.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALPHA_MASK</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECIMAL_MASK</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGIT_MASK</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOWER_MASK</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINEBREAK_MASK</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPACE_MASK</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TITLE_MASK</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPPER_MASK</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODELTA_MASK</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>Py_UNICODE</name></type> <name>upper</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Py_UNICODE</name></type> <name>lower</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Py_UNICODE</name></type> <name>title</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>decimal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>digit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name>flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>_PyUnicode_TypeRecord</name>;</typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unicodetype_db.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>_PyUnicode_TypeRecord</name> *</type>
<name>gettyperecord</name><parameter_list>(<param><decl><type><name>Py_UNICODE</name></type> <name>code</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    <if>if <condition>(<expr><name>code</name> &gt;= 0x110000</expr>)</condition><then>
        <expr_stmt><expr><name>index</name> = 0</expr>;</expr_stmt></then>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{
        <expr_stmt><expr><name>index</name> = <name><name>index1</name><index>[<expr>(<name>code</name>&gt;&gt;<name>SHIFT</name>)</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>index</name> = <name><name>index2</name><index>[<expr>(<name>index</name>&lt;&lt;<name>SHIFT</name>)+(<name>code</name>&amp;((1&lt;&lt;<name>SHIFT</name>)-1))</expr>]</index></name></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr>&amp;<name><name>_PyUnicode_TypeRecords</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
}</block></function>

<comment type="block">/* Returns 1 for Unicode characters having the category 'Zl', 'Zp' or
   type 'B', 0 otherwise. */</comment>

<function><type><name>int</name></type> <name>_PyUnicode_IsLinebreak</name><parameter_list>(<param><decl><type><name>register</name> <specifier>const</specifier> <name>Py_UNICODE</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{
    <case>case <expr>0x000A</expr>: <comment type="block">/* LINE FEED */</comment>
    </case><case>case <expr>0x000D</expr>: <comment type="block">/* CARRIAGE RETURN */</comment>
    </case><case>case <expr>0x001C</expr>: <comment type="block">/* FILE SEPARATOR */</comment>
    </case><case>case <expr>0x001D</expr>: <comment type="block">/* GROUP SEPARATOR */</comment>
    </case><case>case <expr>0x001E</expr>: <comment type="block">/* RECORD SEPARATOR */</comment>
    </case><case>case <expr>0x0085</expr>: <comment type="block">/* NEXT LINE */</comment>
    </case><case>case <expr>0x2028</expr>: <comment type="block">/* LINE SEPARATOR */</comment>
    </case><case>case <expr>0x2029</expr>: <comment type="block">/* PARAGRAPH SEPARATOR */</comment>
	<return>return <expr>1</expr>;</return>
    </case><default>default:
	<return>return <expr>0</expr>;</return>
    </default>}</block></switch>
}</block></function>

<comment type="block">/* Returns the titlecase Unicode characters corresponding to ch or just
   ch if no titlecase mapping is known. */</comment>

<function><type><name>Py_UNICODE</name></type> <name>_PyUnicode_ToTitlecase</name><parameter_list>(<param><decl><type><name>register</name> <name>Py_UNICODE</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>_PyUnicode_TypeRecord</name> *</type><name>ctype</name> <init>= <expr><call><name>gettyperecord</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>delta</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>ctype</name>-&gt;<name>title</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>delta</name> = <name><name>ctype</name>-&gt;<name>title</name></name></expr>;</expr_stmt></then>
    <else>else
	<expr_stmt><expr><name>delta</name> = <name><name>ctype</name>-&gt;<name>upper</name></name></expr>;</expr_stmt></else></if>

    <if>if <condition>(<expr><name><name>ctype</name>-&gt;<name>flags</name></name> &amp; <name>NODELTA_MASK</name></expr>)</condition><then>
	<return>return <expr><name>delta</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>delta</name> &gt;= 32768</expr>)</condition><then>
	    <expr_stmt><expr><name>delta</name> -= 65536</expr>;</expr_stmt></then></if>

    <return>return <expr><name>ch</name> + <name>delta</name></expr>;</return>
}</block></function>

<comment type="block">/* Returns 1 for Unicode characters having the category 'Lt', 0
   otherwise. */</comment>

<function><type><name>int</name></type> <name>_PyUnicode_IsTitlecase</name><parameter_list>(<param><decl><type><name>Py_UNICODE</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>_PyUnicode_TypeRecord</name> *</type><name>ctype</name> <init>= <expr><call><name>gettyperecord</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr>(<name><name>ctype</name>-&gt;<name>flags</name></name> &amp; <name>TITLE_MASK</name>) != 0</expr>;</return>
}</block></function>

<comment type="block">/* Returns the integer decimal (0-9) for Unicode characters having
   this property, -1 otherwise. */</comment>

<function><type><name>int</name></type> <name>_PyUnicode_ToDecimalDigit</name><parameter_list>(<param><decl><type><name>Py_UNICODE</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>_PyUnicode_TypeRecord</name> *</type><name>ctype</name> <init>= <expr><call><name>gettyperecord</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr>(<name><name>ctype</name>-&gt;<name>flags</name></name> &amp; <name>DECIMAL_MASK</name>) ? <name><name>ctype</name>-&gt;<name>decimal</name></name> : -1</expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>_PyUnicode_IsDecimalDigit</name><parameter_list>(<param><decl><type><name>Py_UNICODE</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><call><name>_PyUnicode_ToDecimalDigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
	<return>return <expr>0</expr>;</return></then></if>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/* Returns the integer digit (0-9) for Unicode characters having
   this property, -1 otherwise. */</comment>

<function><type><name>int</name></type> <name>_PyUnicode_ToDigit</name><parameter_list>(<param><decl><type><name>Py_UNICODE</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>_PyUnicode_TypeRecord</name> *</type><name>ctype</name> <init>= <expr><call><name>gettyperecord</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr>(<name><name>ctype</name>-&gt;<name>flags</name></name> &amp; <name>DIGIT_MASK</name>) ? <name><name>ctype</name>-&gt;<name>digit</name></name> : -1</expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>_PyUnicode_IsDigit</name><parameter_list>(<param><decl><type><name>Py_UNICODE</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><call><name>_PyUnicode_ToDigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
	<return>return <expr>0</expr>;</return></then></if>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/* Returns the numeric value as double for Unicode characters having
   this property, -1.0 otherwise. */</comment>

<comment type="block">/* TODO: replace with unicodetype_db.h table */</comment>

<function><type><name>double</name></type> <name>_PyUnicode_ToNumeric</name><parameter_list>(<param><decl><type><name>Py_UNICODE</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{
    <case>case <expr>0x0F33</expr>:
        <return>return <expr>(<name>double</name>) -1 / 2</expr>;</return>
    </case><case>case <expr>0x17F0</expr>:
    </case><case>case <expr>0x3007</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x1018A</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 0</expr>;</return>
    </case><case>case <expr>0x09F4</expr>:
    </case><case>case <expr>0x17F1</expr>:
    </case><case>case <expr>0x215F</expr>:
    </case><case>case <expr>0x2160</expr>:
    </case><case>case <expr>0x2170</expr>:
    </case><case>case <expr>0x3021</expr>:
    </case><case>case <expr>0x3192</expr>:
    </case><case>case <expr>0x3220</expr>:
    </case><case>case <expr>0x3280</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x10107</expr>:
    </case><case>case <expr>0x10142</expr>:
    </case><case>case <expr>0x10158</expr>:
    </case><case>case <expr>0x10159</expr>:
    </case><case>case <expr>0x1015A</expr>:
    </case><case>case <expr>0x10320</expr>:
    </case><case>case <expr>0x103D1</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 1</expr>;</return>
    </case><case>case <expr>0x00BD</expr>:
    </case><case>case <expr>0x0F2A</expr>:
    </case><case>case <expr>0x2CFD</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x10141</expr>:
    </case><case>case <expr>0x10175</expr>:
    </case><case>case <expr>0x10176</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 1 / 2</expr>;</return>
    </case><case>case <expr>0x2153</expr>:
	<return>return <expr>(<name>double</name>) 1 / 3</expr>;</return>
    </case><case>case <expr>0x00BC</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x10140</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 1 / 4</expr>;</return>
    </case><case>case <expr>0x2155</expr>:
	<return>return <expr>(<name>double</name>) 1 / 5</expr>;</return>
    </case><case>case <expr>0x2159</expr>:
	<return>return <expr>(<name>double</name>) 1 / 6</expr>;</return>
    </case><case>case <expr>0x215B</expr>:
	<return>return <expr>(<name>double</name>) 1 / 8</expr>;</return>
    </case><case>case <expr>0x0BF0</expr>:
    </case><case>case <expr>0x1372</expr>:
    </case><case>case <expr>0x2169</expr>:
    </case><case>case <expr>0x2179</expr>:
    </case><case>case <expr>0x2469</expr>:
    </case><case>case <expr>0x247D</expr>:
    </case><case>case <expr>0x2491</expr>:
    </case><case>case <expr>0x24FE</expr>:
    </case><case>case <expr>0x277F</expr>:
    </case><case>case <expr>0x2789</expr>:
    </case><case>case <expr>0x2793</expr>:
    </case><case>case <expr>0x3038</expr>:
    </case><case>case <expr>0x3229</expr>:
    </case><case>case <expr>0x3289</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x10110</expr>:
    </case><case>case <expr>0x10149</expr>:
    </case><case>case <expr>0x10150</expr>:
    </case><case>case <expr>0x10157</expr>:
    </case><case>case <expr>0x10160</expr>:
    </case><case>case <expr>0x10161</expr>:
    </case><case>case <expr>0x10162</expr>:
    </case><case>case <expr>0x10163</expr>:
    </case><case>case <expr>0x10164</expr>:
    </case><case>case <expr>0x10322</expr>:
    </case><case>case <expr>0x103D3</expr>:
    </case><case>case <expr>0x10A44</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 10</expr>;</return>
    </case><case>case <expr>0x0BF1</expr>:
    </case><case>case <expr>0x137B</expr>:
    </case><case>case <expr>0x216D</expr>:
    </case><case>case <expr>0x217D</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x10119</expr>:
    </case><case>case <expr>0x1014B</expr>:
    </case><case>case <expr>0x10152</expr>:
    </case><case>case <expr>0x1016A</expr>:
    </case><case>case <expr>0x103D5</expr>:
    </case><case>case <expr>0x10A46</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 100</expr>;</return>
    </case><case>case <expr>0x0BF2</expr>:
    </case><case>case <expr>0x216F</expr>:
    </case><case>case <expr>0x217F</expr>:
    </case><case>case <expr>0x2180</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x10122</expr>:
    </case><case>case <expr>0x1014D</expr>:
    </case><case>case <expr>0x10154</expr>:
    </case><case>case <expr>0x10171</expr>:
    </case><case>case <expr>0x10A47</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 1000</expr>;</return>
    </case><case>case <expr>0x137C</expr>:
    </case><case>case <expr>0x2182</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x1012B</expr>:
    </case><case>case <expr>0x10155</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 10000</expr>;</return>
    </case><case>case <expr>0x216A</expr>:
    </case><case>case <expr>0x217A</expr>:
    </case><case>case <expr>0x246A</expr>:
    </case><case>case <expr>0x247E</expr>:
    </case><case>case <expr>0x2492</expr>:
    </case><case>case <expr>0x24EB</expr>:
	<return>return <expr>(<name>double</name>) 11</expr>;</return>
    </case><case>case <expr>0x0F2F</expr>:
        <return>return <expr>(<name>double</name>) 11 / 2</expr>;</return>
    </case><case>case <expr>0x216B</expr>:
    </case><case>case <expr>0x217B</expr>:
    </case><case>case <expr>0x246B</expr>:
    </case><case>case <expr>0x247F</expr>:
    </case><case>case <expr>0x2493</expr>:
    </case><case>case <expr>0x24EC</expr>:
	<return>return <expr>(<name>double</name>) 12</expr>;</return>
    </case><case>case <expr>0x246C</expr>:
    </case><case>case <expr>0x2480</expr>:
    </case><case>case <expr>0x2494</expr>:
    </case><case>case <expr>0x24ED</expr>:
	<return>return <expr>(<name>double</name>) 13</expr>;</return>
    </case><case>case <expr>0x0F30</expr>:
        <return>return <expr>(<name>double</name>) 13 / 2</expr>;</return>
    </case><case>case <expr>0x246D</expr>:
    </case><case>case <expr>0x2481</expr>:
    </case><case>case <expr>0x2495</expr>:
    </case><case>case <expr>0x24EE</expr>:
	<return>return <expr>(<name>double</name>) 14</expr>;</return>
    </case><case>case <expr>0x246E</expr>:
    </case><case>case <expr>0x2482</expr>:
    </case><case>case <expr>0x2496</expr>:
    </case><case>case <expr>0x24EF</expr>:
	<return>return <expr>(<name>double</name>) 15</expr>;</return>
    </case><case>case <expr>0x0F31</expr>:
        <return>return <expr>(<name>double</name>) 15 / 2</expr>;</return>
    </case><case>case <expr>0x09F9</expr>:
    </case><case>case <expr>0x246F</expr>:
    </case><case>case <expr>0x2483</expr>:
    </case><case>case <expr>0x2497</expr>:
    </case><case>case <expr>0x24F0</expr>:
	<return>return <expr>(<name>double</name>) 16</expr>;</return>
    </case><case>case <expr>0x16EE</expr>:
    </case><case>case <expr>0x2470</expr>:
    </case><case>case <expr>0x2484</expr>:
    </case><case>case <expr>0x2498</expr>:
    </case><case>case <expr>0x24F1</expr>:
	<return>return <expr>(<name>double</name>) 17</expr>;</return>
    </case><case>case <expr>0x0F32</expr>:
        <return>return <expr>(<name>double</name>) 17 / 2</expr>;</return>
    </case><case>case <expr>0x16EF</expr>:
    </case><case>case <expr>0x2471</expr>:
    </case><case>case <expr>0x2485</expr>:
    </case><case>case <expr>0x2499</expr>:
    </case><case>case <expr>0x24F2</expr>:
	<return>return <expr>(<name>double</name>) 18</expr>;</return>
    </case><case>case <expr>0x16F0</expr>:
    </case><case>case <expr>0x2472</expr>:
    </case><case>case <expr>0x2486</expr>:
    </case><case>case <expr>0x249A</expr>:
    </case><case>case <expr>0x24F3</expr>:
	<return>return <expr>(<name>double</name>) 19</expr>;</return>
    </case><case>case <expr>0x09F5</expr>:
    </case><case>case <expr>0x17F2</expr>:
    </case><case>case <expr>0x2161</expr>:
    </case><case>case <expr>0x2171</expr>:
    </case><case>case <expr>0x3022</expr>:
    </case><case>case <expr>0x3193</expr>:
    </case><case>case <expr>0x3221</expr>:
    </case><case>case <expr>0x3281</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x10108</expr>:
    </case><case>case <expr>0x1015B</expr>:
    </case><case>case <expr>0x1015C</expr>:
    </case><case>case <expr>0x1015D</expr>:
    </case><case>case <expr>0x1015E</expr>:
    </case><case>case <expr>0x103D2</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 2</expr>;</return>
    </case><case>case <expr>0x2154</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x10177</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 2 / 3</expr>;</return>
    </case><case>case <expr>0x2156</expr>:
        <return>return <expr>(<name>double</name>) 2 / 5</expr>;</return>
    </case><case>case <expr>0x1373</expr>:
    </case><case>case <expr>0x2473</expr>:
    </case><case>case <expr>0x2487</expr>:
    </case><case>case <expr>0x249B</expr>:
    </case><case>case <expr>0x24F4</expr>:
    </case><case>case <expr>0x3039</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x10111</expr>:
    </case><case>case <expr>0x103D4</expr>:
    </case><case>case <expr>0x10A45</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return <expr>(<name>double</name>) 20</expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x1011A</expr>:
        <return>return <expr>(<name>double</name>) 200</expr>;</return>
    </case><case>case <expr>0x10123</expr>:
        <return>return <expr>(<name>double</name>) 2000</expr>;</return>
    </case><case>case <expr>0x1012C</expr>:
        <return>return <expr>(<name>double</name>) 20000</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </case><case>case <expr>0x3251</expr>:
        <return>return <expr>(<name>double</name>) 21</expr>;</return>
    </case><case>case <expr>0x3252</expr>:
        <return>return <expr>(<name>double</name>) 22</expr>;</return>
    </case><case>case <expr>0x3253</expr>:
        <return>return <expr>(<name>double</name>) 23</expr>;</return>
    </case><case>case <expr>0x3254</expr>:
        <return>return <expr>(<name>double</name>) 24</expr>;</return>
    </case><case>case <expr>0x3255</expr>:
        <return>return <expr>(<name>double</name>) 25</expr>;</return>
    </case><case>case <expr>0x3256</expr>:
        <return>return <expr>(<name>double</name>) 26</expr>;</return>
    </case><case>case <expr>0x3257</expr>:
        <return>return <expr>(<name>double</name>) 27</expr>;</return>
    </case><case>case <expr>0x3258</expr>:
        <return>return <expr>(<name>double</name>) 28</expr>;</return>
    </case><case>case <expr>0x3259</expr>:
        <return>return <expr>(<name>double</name>) 29</expr>;</return>
    </case><case>case <expr>0x09F6</expr>:
    </case><case>case <expr>0x17F3</expr>:
    </case><case>case <expr>0x2162</expr>:
    </case><case>case <expr>0x2172</expr>:
    </case><case>case <expr>0x3023</expr>:
    </case><case>case <expr>0x3194</expr>:
    </case><case>case <expr>0x3222</expr>:
    </case><case>case <expr>0x3282</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x10109</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 3</expr>;</return>
    </case><case>case <expr>0x0F2B</expr>:
        <return>return <expr>(<name>double</name>) 3 / 2</expr>;</return>
    </case><case>case <expr>0x00BE</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x10178</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 3 / 4</expr>;</return>
    </case><case>case <expr>0x2157</expr>:
	<return>return <expr>(<name>double</name>) 3 / 5</expr>;</return>
    </case><case>case <expr>0x215C</expr>:
	<return>return <expr>(<name>double</name>) 3 / 8</expr>;</return>
    </case><case>case <expr>0x1374</expr>:
    </case><case>case <expr>0x303A</expr>:
    </case><case>case <expr>0x325A</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x10112</expr>:
    </case><case>case <expr>0x10165</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 30</expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x1011B</expr>:
    </case><case>case <expr>0x1016B</expr>:
        <return>return <expr>(<name>double</name>) 300</expr>;</return>
    </case><case>case <expr>0x10124</expr>:
        <return>return <expr>(<name>double</name>) 3000</expr>;</return>
    </case><case>case <expr>0x1012D</expr>:
        <return>return <expr>(<name>double</name>) 30000</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </case><case>case <expr>0x325B</expr>:
        <return>return <expr>(<name>double</name>) 31</expr>;</return>
    </case><case>case <expr>0x325C</expr>:
        <return>return <expr>(<name>double</name>) 32</expr>;</return>
    </case><case>case <expr>0x325D</expr>:
        <return>return <expr>(<name>double</name>) 33</expr>;</return>
    </case><case>case <expr>0x325E</expr>:
        <return>return <expr>(<name>double</name>) 34</expr>;</return>
    </case><case>case <expr>0x325F</expr>:
        <return>return <expr>(<name>double</name>) 35</expr>;</return>
    </case><case>case <expr>0x32B1</expr>:
        <return>return <expr>(<name>double</name>) 36</expr>;</return>
    </case><case>case <expr>0x32B2</expr>:
        <return>return <expr>(<name>double</name>) 37</expr>;</return>
    </case><case>case <expr>0x32B3</expr>:
        <return>return <expr>(<name>double</name>) 38</expr>;</return>
    </case><case>case <expr>0x32B4</expr>:
        <return>return <expr>(<name>double</name>) 39</expr>;</return>
    </case><case>case <expr>0x09F7</expr>:
    </case><case>case <expr>0x17F4</expr>:
    </case><case>case <expr>0x2163</expr>:
    </case><case>case <expr>0x2173</expr>:
    </case><case>case <expr>0x3024</expr>:
    </case><case>case <expr>0x3195</expr>:
    </case><case>case <expr>0x3223</expr>:
    </case><case>case <expr>0x3283</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x1010A</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 4</expr>;</return>
    </case><case>case <expr>0x2158</expr>:
	<return>return <expr>(<name>double</name>) 4 / 5</expr>;</return>
    </case><case>case <expr>0x1375</expr>:
    </case><case>case <expr>0x32B5</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x10113</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return <expr>(<name>double</name>) 40</expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x1011C</expr>:
        <return>return <expr>(<name>double</name>) 400</expr>;</return>
    </case><case>case <expr>0x10125</expr>:
        <return>return <expr>(<name>double</name>) 4000</expr>;</return>
    </case><case>case <expr>0x1012E</expr>:
        <return>return <expr>(<name>double</name>) 40000</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </case><case>case <expr>0x32B6</expr>:
        <return>return <expr>(<name>double</name>) 41</expr>;</return>
    </case><case>case <expr>0x32B7</expr>:
        <return>return <expr>(<name>double</name>) 42</expr>;</return>
    </case><case>case <expr>0x32B8</expr>:
        <return>return <expr>(<name>double</name>) 43</expr>;</return>
    </case><case>case <expr>0x32B9</expr>:
        <return>return <expr>(<name>double</name>) 44</expr>;</return>
    </case><case>case <expr>0x32BA</expr>:
        <return>return <expr>(<name>double</name>) 45</expr>;</return>
    </case><case>case <expr>0x32BB</expr>:
        <return>return <expr>(<name>double</name>) 46</expr>;</return>
    </case><case>case <expr>0x32BC</expr>:
        <return>return <expr>(<name>double</name>) 47</expr>;</return>
    </case><case>case <expr>0x32BD</expr>:
        <return>return <expr>(<name>double</name>) 48</expr>;</return>
    </case><case>case <expr>0x32BE</expr>:
        <return>return <expr>(<name>double</name>) 49</expr>;</return>
    </case><case>case <expr>0x17F5</expr>:
    </case><case>case <expr>0x2164</expr>:
    </case><case>case <expr>0x2174</expr>:
    </case><case>case <expr>0x3025</expr>:
    </case><case>case <expr>0x3224</expr>:
    </case><case>case <expr>0x3284</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x1010B</expr>:
    </case><case>case <expr>0x10143</expr>:
    </case><case>case <expr>0x10148</expr>:
    </case><case>case <expr>0x1014F</expr>:
    </case><case>case <expr>0x1015F</expr>:
    </case><case>case <expr>0x10173</expr>:
    </case><case>case <expr>0x10321</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 5</expr>;</return>
    </case><case>case <expr>0x0F2C</expr>:
        <return>return <expr>(<name>double</name>) 5 / 2</expr>;</return>
    </case><case>case <expr>0x215A</expr>:
	<return>return <expr>(<name>double</name>) 5 / 6</expr>;</return>
    </case><case>case <expr>0x215D</expr>:
	<return>return <expr>(<name>double</name>) 5 / 8</expr>;</return>
    </case><case>case <expr>0x1376</expr>:
    </case><case>case <expr>0x216C</expr>:
    </case><case>case <expr>0x217C</expr>:
    </case><case>case <expr>0x32BF</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x10114</expr>:
    </case><case>case <expr>0x10144</expr>:
    </case><case>case <expr>0x1014A</expr>:
    </case><case>case <expr>0x10151</expr>:
    </case><case>case <expr>0x10166</expr>:
    </case><case>case <expr>0x10167</expr>:
    </case><case>case <expr>0x10168</expr>:
    </case><case>case <expr>0x10169</expr>:
    </case><case>case <expr>0x10174</expr>:
    </case><case>case <expr>0x10323</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 50</expr>;</return>
    </case><case>case <expr>0x216E</expr>:
    </case><case>case <expr>0x217E</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x1011D</expr>:
    </case><case>case <expr>0x10145</expr>:
    </case><case>case <expr>0x1014C</expr>:
    </case><case>case <expr>0x10153</expr>:
    </case><case>case <expr>0x1016C</expr>:
    </case><case>case <expr>0x1016D</expr>:
    </case><case>case <expr>0x1016E</expr>:
    </case><case>case <expr>0x1016F</expr>:
    </case><case>case <expr>0x10170</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 500</expr>;</return>
    </case><case>case <expr>0x2181</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x10126</expr>:
    </case><case>case <expr>0x10146</expr>:
    </case><case>case <expr>0x1014E</expr>:
    </case><case>case <expr>0x10172</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 5000</expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x1012F</expr>:
    </case><case>case <expr>0x10147</expr>:
    </case><case>case <expr>0x10156</expr>:
        <return>return <expr>(<name>double</name>) 50000</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </case><case>case <expr>0x17F6</expr>:
    </case><case>case <expr>0x2165</expr>:
    </case><case>case <expr>0x2175</expr>:
    </case><case>case <expr>0x3026</expr>:
    </case><case>case <expr>0x3225</expr>:
    </case><case>case <expr>0x3285</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x1010C</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 6</expr>;</return>
    </case><case>case <expr>0x1377</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x10115</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 60</expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x1011E</expr>:
        <return>return <expr>(<name>double</name>) 600</expr>;</return>
    </case><case>case <expr>0x10127</expr>:
        <return>return <expr>(<name>double</name>) 6000</expr>;</return>
    </case><case>case <expr>0x10130</expr>:
        <return>return <expr>(<name>double</name>) 60000</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </case><case>case <expr>0x17F7</expr>:
    </case><case>case <expr>0x2166</expr>:
    </case><case>case <expr>0x2176</expr>:
    </case><case>case <expr>0x3027</expr>:
    </case><case>case <expr>0x3226</expr>:
    </case><case>case <expr>0x3286</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x1010D</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 7</expr>;</return>
    </case><case>case <expr>0x0F2D</expr>:
        <return>return <expr>(<name>double</name>) 7 / 2</expr>;</return>
    </case><case>case <expr>0x215E</expr>:
	<return>return <expr>(<name>double</name>) 7 / 8</expr>;</return>
    </case><case>case <expr>0x1378</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x10116</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 70</expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x1011F</expr>:
        <return>return <expr>(<name>double</name>) 700</expr>;</return>
    </case><case>case <expr>0x10128</expr>:
        <return>return <expr>(<name>double</name>) 7000</expr>;</return>
    </case><case>case <expr>0x10131</expr>:
        <return>return <expr>(<name>double</name>) 70000</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </case><case>case <expr>0x17F8</expr>:
    </case><case>case <expr>0x2167</expr>:
    </case><case>case <expr>0x2177</expr>:
    </case><case>case <expr>0x3028</expr>:
    </case><case>case <expr>0x3227</expr>:
    </case><case>case <expr>0x3287</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x1010E</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 8</expr>;</return>
    </case><case>case <expr>0x1379</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x10117</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 80</expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x10120</expr>:
        <return>return <expr>(<name>double</name>) 800</expr>;</return>
    </case><case>case <expr>0x10129</expr>:
        <return>return <expr>(<name>double</name>) 8000</expr>;</return>
    </case><case>case <expr>0x10132</expr>:
        <return>return <expr>(<name>double</name>) 80000</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </case><case>case <expr>0x17F9</expr>:
    </case><case>case <expr>0x2168</expr>:
    </case><case>case <expr>0x2178</expr>:
    </case><case>case <expr>0x3029</expr>:
    </case><case>case <expr>0x3228</expr>:
    </case><case>case <expr>0x3288</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x1010F</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 9</expr>;</return>
    </case><case>case <expr>0x0F2E</expr>:
        <return>return <expr>(<name>double</name>) 9 / 2</expr>;</return>
    </case><case>case <expr>0x137A</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x10118</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr>(<name>double</name>) 90</expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
    </case><case>case <expr>0x10121</expr>:
    </case><case>case <expr>0x1034A</expr>:
        <return>return <expr>(<name>double</name>) 900</expr>;</return>
    </case><case>case <expr>0x1012A</expr>:
        <return>return <expr>(<name>double</name>) 9000</expr>;</return>
    </case><case>case <expr>0x10133</expr>:
        <return>return <expr>(<name>double</name>) 90000</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </case><default>default:
	<return>return <expr>(<name>double</name>) <call><name>_PyUnicode_ToDigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
    </default>}</block></switch>
}</block></function>

<function><type><name>int</name></type> <name>_PyUnicode_IsNumeric</name><parameter_list>(<param><decl><type><name>Py_UNICODE</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>_PyUnicode_ToNumeric</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> != -1.0</expr>;</return>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WANT_WCTYPE_FUNCTIONS</name></cpp:ifndef>

<comment type="block">/* Returns 1 for Unicode characters having the bidirectional type
   'WS', 'B' or 'S' or the category 'Zs', 0 otherwise. */</comment>

<function><type><name>int</name></type> <name>_PyUnicode_IsWhitespace</name><parameter_list>(<param><decl><type><name>register</name> <specifier>const</specifier> <name>Py_UNICODE</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{
    <case>case <expr>0x0009</expr>: <comment type="block">/* HORIZONTAL TABULATION */</comment>
    </case><case>case <expr>0x000A</expr>: <comment type="block">/* LINE FEED */</comment>
    </case><case>case <expr>0x000B</expr>: <comment type="block">/* VERTICAL TABULATION */</comment>
    </case><case>case <expr>0x000C</expr>: <comment type="block">/* FORM FEED */</comment>
    </case><case>case <expr>0x000D</expr>: <comment type="block">/* CARRIAGE RETURN */</comment>
    </case><case>case <expr>0x001C</expr>: <comment type="block">/* FILE SEPARATOR */</comment>
    </case><case>case <expr>0x001D</expr>: <comment type="block">/* GROUP SEPARATOR */</comment>
    </case><case>case <expr>0x001E</expr>: <comment type="block">/* RECORD SEPARATOR */</comment>
    </case><case>case <expr>0x001F</expr>: <comment type="block">/* UNIT SEPARATOR */</comment>
    </case><case>case <expr>0x0020</expr>: <comment type="block">/* SPACE */</comment>
    </case><case>case <expr>0x0085</expr>: <comment type="block">/* NEXT LINE */</comment>
    </case><case>case <expr>0x00A0</expr>: <comment type="block">/* NO-BREAK SPACE */</comment>
    </case><case>case <expr>0x1680</expr>: <comment type="block">/* OGHAM SPACE MARK */</comment>
    </case><case>case <expr>0x2000</expr>: <comment type="block">/* EN QUAD */</comment>
    </case><case>case <expr>0x2001</expr>: <comment type="block">/* EM QUAD */</comment>
    </case><case>case <expr>0x2002</expr>: <comment type="block">/* EN SPACE */</comment>
    </case><case>case <expr>0x2003</expr>: <comment type="block">/* EM SPACE */</comment>
    </case><case>case <expr>0x2004</expr>: <comment type="block">/* THREE-PER-EM SPACE */</comment>
    </case><case>case <expr>0x2005</expr>: <comment type="block">/* FOUR-PER-EM SPACE */</comment>
    </case><case>case <expr>0x2006</expr>: <comment type="block">/* SIX-PER-EM SPACE */</comment>
    </case><case>case <expr>0x2007</expr>: <comment type="block">/* FIGURE SPACE */</comment>
    </case><case>case <expr>0x2008</expr>: <comment type="block">/* PUNCTUATION SPACE */</comment>
    </case><case>case <expr>0x2009</expr>: <comment type="block">/* THIN SPACE */</comment>
    </case><case>case <expr>0x200A</expr>: <comment type="block">/* HAIR SPACE */</comment>
    </case><case>case <expr>0x200B</expr>: <comment type="block">/* ZERO WIDTH SPACE */</comment>
    </case><case>case <expr>0x2028</expr>: <comment type="block">/* LINE SEPARATOR */</comment>
    </case><case>case <expr>0x2029</expr>: <comment type="block">/* PARAGRAPH SEPARATOR */</comment>
    </case><case>case <expr>0x202F</expr>: <comment type="block">/* NARROW NO-BREAK SPACE */</comment>
    </case><case>case <expr>0x205F</expr>: <comment type="block">/* MEDIUM MATHEMATICAL SPACE */</comment>
    </case><case>case <expr>0x3000</expr>: <comment type="block">/* IDEOGRAPHIC SPACE */</comment>
	<return>return <expr>1</expr>;</return>
    </case><default>default:
	<return>return <expr>0</expr>;</return>
    </default>}</block></switch>
}</block></function>

<comment type="block">/* Returns 1 for Unicode characters having the category 'Ll', 0
   otherwise. */</comment>

<function><type><name>int</name></type> <name>_PyUnicode_IsLowercase</name><parameter_list>(<param><decl><type><name>Py_UNICODE</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>_PyUnicode_TypeRecord</name> *</type><name>ctype</name> <init>= <expr><call><name>gettyperecord</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr>(<name><name>ctype</name>-&gt;<name>flags</name></name> &amp; <name>LOWER_MASK</name>) != 0</expr>;</return>
}</block></function>

<comment type="block">/* Returns 1 for Unicode characters having the category 'Lu', 0
   otherwise. */</comment>

<function><type><name>int</name></type> <name>_PyUnicode_IsUppercase</name><parameter_list>(<param><decl><type><name>Py_UNICODE</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>_PyUnicode_TypeRecord</name> *</type><name>ctype</name> <init>= <expr><call><name>gettyperecord</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr>(<name><name>ctype</name>-&gt;<name>flags</name></name> &amp; <name>UPPER_MASK</name>) != 0</expr>;</return>
}</block></function>

<comment type="block">/* Returns the uppercase Unicode characters corresponding to ch or just
   ch if no uppercase mapping is known. */</comment>

<function><type><name>Py_UNICODE</name></type> <name>_PyUnicode_ToUppercase</name><parameter_list>(<param><decl><type><name>Py_UNICODE</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>_PyUnicode_TypeRecord</name> *</type><name>ctype</name> <init>= <expr><call><name>gettyperecord</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><name><name>ctype</name>-&gt;<name>upper</name></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>ctype</name>-&gt;<name>flags</name></name> &amp; <name>NODELTA_MASK</name></expr>)</condition><then>
	<return>return <expr><name>delta</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name>delta</name> &gt;= 32768</expr>)</condition><then>
	    <expr_stmt><expr><name>delta</name> -= 65536</expr>;</expr_stmt></then></if>
    <return>return <expr><name>ch</name> + <name>delta</name></expr>;</return>
}</block></function>

<comment type="block">/* Returns the lowercase Unicode characters corresponding to ch or just
   ch if no lowercase mapping is known. */</comment>

<function><type><name>Py_UNICODE</name></type> <name>_PyUnicode_ToLowercase</name><parameter_list>(<param><decl><type><name>Py_UNICODE</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>_PyUnicode_TypeRecord</name> *</type><name>ctype</name> <init>= <expr><call><name>gettyperecord</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><name><name>ctype</name>-&gt;<name>lower</name></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>ctype</name>-&gt;<name>flags</name></name> &amp; <name>NODELTA_MASK</name></expr>)</condition><then>
	<return>return <expr><name>delta</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name>delta</name> &gt;= 32768</expr>)</condition><then>
	    <expr_stmt><expr><name>delta</name> -= 65536</expr>;</expr_stmt></then></if>
    <return>return <expr><name>ch</name> + <name>delta</name></expr>;</return>
}</block></function>

<comment type="block">/* Returns 1 for Unicode characters having the category 'Ll', 'Lu', 'Lt',
   'Lo' or 'Lm',  0 otherwise. */</comment>

<function><type><name>int</name></type> <name>_PyUnicode_IsAlpha</name><parameter_list>(<param><decl><type><name>Py_UNICODE</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>_PyUnicode_TypeRecord</name> *</type><name>ctype</name> <init>= <expr><call><name>gettyperecord</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr>(<name><name>ctype</name>-&gt;<name>flags</name></name> &amp; <name>ALPHA_MASK</name>) != 0</expr>;</return>
}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<comment type="block">/* Export the interfaces using the wchar_t type for portability
   reasons:  */</comment>

<function><type><name>int</name></type> <name>_PyUnicode_IsWhitespace</name><parameter_list>(<param><decl><type><name>Py_UNICODE</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>iswspace</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>_PyUnicode_IsLowercase</name><parameter_list>(<param><decl><type><name>Py_UNICODE</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>iswlower</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>_PyUnicode_IsUppercase</name><parameter_list>(<param><decl><type><name>Py_UNICODE</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>iswupper</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>Py_UNICODE</name></type> <name>_PyUnicode_ToLowercase</name><parameter_list>(<param><decl><type><name>Py_UNICODE</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>towlower</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>Py_UNICODE</name></type> <name>_PyUnicode_ToUppercase</name><parameter_list>(<param><decl><type><name>Py_UNICODE</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>towupper</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>_PyUnicode_IsAlpha</name><parameter_list>(<param><decl><type><name>Py_UNICODE</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>iswalpha</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
