<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Objects/rangeobject.c"><comment type="block">/* Range object implementation */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>long</name></type>	<name>start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>	<name>step</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>	<name>len</name></decl>;</decl_stmt>
}</block></struct></type> <name>rangeobject</name>;</typedef>

<comment type="block">/* Return number of items in range/xrange (lo, hi, step).  step &gt; 0
 * required.  Return a value &lt; 0 if &amp; only if the true value is too
 * large to fit in a signed long.
 */</comment>
<function><type><specifier>static</specifier> <name>long</name></type>
<name>get_len_of_range</name><parameter_list>(<param><decl><type><name>long</name></type> <name>lo</name></decl></param>, <param><decl><type><name>long</name></type> <name>hi</name></decl></param>, <param><decl><type><name>long</name></type> <name>step</name></decl></param>)</parameter_list>
<block>{
	<comment type="block">/* -------------------------------------------------------------
	If lo &gt;= hi, the range is empty.
	Else if n values are in the range, the last one is
	lo + (n-1)*step, which must be &lt;= hi-1.  Rearranging,
	n &lt;= (hi - lo - 1)/step + 1, so taking the floor of the RHS gives
	the proper value.  Since lo &lt; hi in this case, hi-lo-1 &gt;= 0, so
	the RHS is non-negative and so truncation is the same as the
	floor.  Letting M be the largest positive long, the worst case
	for the RHS numerator is hi=M, lo=-M-1, and then
	hi-lo-1 = M-(-M-1)-1 = 2*M.  Therefore unsigned long has enough
	precision to compute the RHS exactly.
	---------------------------------------------------------------*/</comment>
	<decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>lo</name> &lt; <name>hi</name></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>uhi</name> <init>= <expr>(<name>unsigned</name> <name>long</name>)<name>hi</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ulo</name> <init>= <expr>(<name>unsigned</name> <name>long</name>)<name>lo</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>diff</name> <init>= <expr><name>uhi</name> - <name>ulo</name> - 1</expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>n</name> = <call>(<name>long</name>)<argument_list>(<argument><expr><name>diff</name> / (<name>unsigned</name> <name>long</name>)<name>step</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return>return <expr><name>n</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>range_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>rangeobject</name> *</type><name>obj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>ilow</name> <init>= <expr>0</expr></init>, <name>ihigh</name> <init>= <expr>0</expr></init>, <name>istep</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>_PyArg_NoKeywords</name><argument_list>(<argument><expr>"xrange()"</expr></argument>, <argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> &lt;= 1</expr>)</condition><then> <block>{
		<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,
				<argument><expr>"l;xrange() requires 1-3 int arguments"</expr></argument>,
				<argument><expr>&amp;<name>ihigh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<return>return <expr><name>NULL</name></expr>;</return></then></if>
	}</block></then>
	<else>else <block>{
		<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,
				<argument><expr>"ll|l;xrange() requires 1-3 int arguments"</expr></argument>,
				<argument><expr>&amp;<name>ilow</name></expr></argument>, <argument><expr>&amp;<name>ihigh</name></expr></argument>, <argument><expr>&amp;<name>istep</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<return>return <expr><name>NULL</name></expr>;</return></then></if>
	}</block></else></if>
	<if>if <condition>(<expr><name>istep</name> == 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"xrange() arg 3 must not be zero"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr><name>istep</name> &gt; 0</expr>)</condition><then>
		<expr_stmt><expr><name>n</name> = <call><name>get_len_of_range</name><argument_list>(<argument><expr><name>ilow</name></expr></argument>, <argument><expr><name>ihigh</name></expr></argument>, <argument><expr><name>istep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else>else
		<expr_stmt><expr><name>n</name> = <call><name>get_len_of_range</name><argument_list>(<argument><expr><name>ihigh</name></expr></argument>, <argument><expr><name>ilow</name></expr></argument>, <argument><expr>-<name>istep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	<if>if <condition>(<expr><name>n</name> &lt; 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_OverflowError</name></expr></argument>,
				<argument><expr>"xrange() result has too many items"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><name>obj</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>rangeobject</name></expr></argument>, <argument><expr>&amp;<name>PyRange_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>obj</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>obj</name>-&gt;<name>start</name></name> = <name>ilow</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>obj</name>-&gt;<name>len</name></name>   = <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>obj</name>-&gt;<name>step</name></name>  = <name>istep</name></expr>;</expr_stmt>
	<return>return <expr>(<name>PyObject</name> *) <name>obj</name></expr>;</return>
}</block></function>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>range_doc</name></expr></argument>,
<argument><expr>"xrange([start,] stop[, step]) -&gt; xrange object\n\
\n\
Like range(), but instead of returning a list, returns an object that\n\
generates the numbers in the range on demand.  For looping, this is \n\
slightly faster than range() and more memory efficient."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>range_item</name><parameter_list>(<param><decl><type><name>rangeobject</name> *</type><name>r</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>i</name> &lt; 0 || <name>i</name> &gt;= <name><name>r</name>-&gt;<name>len</name></name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>,
				<argument><expr>"xrange object index out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>PyInt_FromSsize_t</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>start</name></name> + <name>i</name> * <name><name>r</name>-&gt;<name>step</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>range_length</name><parameter_list>(<param><decl><type><name>rangeobject</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name><name>r</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>range_repr</name><parameter_list>(<param><decl><type><name>rangeobject</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>rtn</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><name><name>r</name>-&gt;<name>start</name></name> == 0 &amp;&amp; <name><name>r</name>-&gt;<name>step</name></name> == 1</expr>)</condition><then>
		<expr_stmt><expr><name>rtn</name> = <call><name>PyString_FromFormat</name><argument_list>(<argument><expr>"xrange(%ld)"</expr></argument>,
					  <argument><expr><name><name>r</name>-&gt;<name>start</name></name> + <name><name>r</name>-&gt;<name>len</name></name> * <name><name>r</name>-&gt;<name>step</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>

	<else>else <if>if <condition>(<expr><name><name>r</name>-&gt;<name>step</name></name> == 1</expr>)</condition><then>
		<expr_stmt><expr><name>rtn</name> = <call><name>PyString_FromFormat</name><argument_list>(<argument><expr>"xrange(%ld, %ld)"</expr></argument>,
					  <argument><expr><name><name>r</name>-&gt;<name>start</name></name></expr></argument>,
					  <argument><expr><name><name>r</name>-&gt;<name>start</name></name> + <name><name>r</name>-&gt;<name>len</name></name> * <name><name>r</name>-&gt;<name>step</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>

	<else>else
		<expr_stmt><expr><name>rtn</name> = <call><name>PyString_FromFormat</name><argument_list>(<argument><expr>"xrange(%ld, %ld, %ld)"</expr></argument>,
					  <argument><expr><name><name>r</name>-&gt;<name>start</name></name></expr></argument>,
					  <argument><expr><name><name>r</name>-&gt;<name>start</name></name> + <name><name>r</name>-&gt;<name>len</name></name> * <name><name>r</name>-&gt;<name>step</name></name></expr></argument>,
					  <argument><expr><name><name>r</name>-&gt;<name>step</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
	<return>return <expr><name>rtn</name></expr>;</return>
}</block></function>

<comment type="block">/* Pickling support */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>range_reduce</name><parameter_list>(<param><decl><type><name>rangeobject</name> *</type><name>r</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(O(iii))"</expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>,
			     <argument><expr><name><name>r</name>-&gt;<name>start</name></name></expr></argument>,
			     <argument><expr><name><name>r</name>-&gt;<name>start</name></name> + <name><name>r</name>-&gt;<name>len</name></name> * <name><name>r</name>-&gt;<name>step</name></name></expr></argument>,
			     <argument><expr><name><name>r</name>-&gt;<name>step</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>range_as_sequence</name> <init>= <expr><block>{
	<expr>(<name>lenfunc</name>)<name>range_length</name></expr>,	<comment type="block">/* sq_length */</comment>
	<expr>0</expr>,			<comment type="block">/* sq_concat */</comment>
	<expr>0</expr>,			<comment type="block">/* sq_repeat */</comment>
	<expr>(<name>ssizeargfunc</name>)<name>range_item</name></expr>, <comment type="block">/* sq_item */</comment>
	<expr>0</expr>,			<comment type="block">/* sq_slice */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type> <name>range_iter</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>seq</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type> <name>range_reverse</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>seq</name></decl></param>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>reverse_doc</name></expr></argument>,
<argument><expr>"Returns a reverse iterator."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>range_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"__reversed__"</expr>,	<expr>(<name>PyCFunction</name>)<name>range_reverse</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>reverse_doc</name></expr>}</block></expr>,
	<expr><block>{<expr>"__reduce__"</expr>,		<expr>(<name>PyCFunction</name>)<name>range_reduce</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
 	<expr><block>{<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyRange_Type</name> <init>= <expr><block>{
	<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>)</argument_list></call>
	0</expr>,			<comment type="block">/* Number of items for varobject */</comment>
	<expr>"xrange"</expr>,		<comment type="block">/* Name of this type */</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>rangeobject</name></expr></argument>)</argument_list></sizeof></expr>,	<comment type="block">/* Basic object size */</comment>
	<expr>0</expr>,			<comment type="block">/* Item size for varobject */</comment>
	<expr>(<name>destructor</name>)<name>PyObject_Del</name></expr>, <comment type="block">/* tp_dealloc */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_print */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_getattr */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_setattr */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_compare */</comment>
	<expr>(<name>reprfunc</name>)<name>range_repr</name></expr>,	<comment type="block">/* tp_repr */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_as_number */</comment>
	<expr>&amp;<name>range_as_sequence</name></expr>,	<comment type="block">/* tp_as_sequence */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_as_mapping */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_hash */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_call */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_str */</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>,  <comment type="block">/* tp_getattro */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_setattro */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_as_buffer */</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name></expr>,	<comment type="block">/* tp_flags */</comment>
	<expr><name>range_doc</name></expr>,		<comment type="block">/* tp_doc */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_traverse */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_clear */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_richcompare */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_weaklistoffset */</comment>
	<expr><name>range_iter</name></expr>,		<comment type="block">/* tp_iter */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_iternext */</comment>
	<expr><name>range_methods</name></expr>,		<comment type="block">/* tp_methods */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_members */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_getset */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_base */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_dict */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_descr_get */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_descr_set */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_dictoffset */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_init */</comment>
	<expr>0</expr>,			<comment type="block">/* tp_alloc */</comment>
	<expr><name>range_new</name></expr>,		<comment type="block">/* tp_new */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*********************** Xrange Iterator **************************/</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>long</name></type>	<name>index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>	<name>start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>	<name>step</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>	<name>len</name></decl>;</decl_stmt>
}</block></struct></type> <name>rangeiterobject</name>;</typedef>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>rangeiter_next</name><parameter_list>(<param><decl><type><name>rangeiterobject</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>r</name>-&gt;<name>index</name></name> &lt; <name><name>r</name>-&gt;<name>len</name></name></expr>)</condition><then>
		<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>start</name></name> + (<name><name>r</name>-&gt;<name>index</name></name>++) * <name><name>r</name>-&gt;<name>step</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>rangeiter_len</name><parameter_list>(<param><decl><type><name>rangeiterobject</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>len</name></name> - <name><name>r</name>-&gt;<name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>length_hint_doc</name></expr></argument>, <argument><expr>"Private method returning an estimate of len(list(it))."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>rangeiter_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"__length_hint__"</expr>, <expr>(<name>PyCFunction</name>)<name>rangeiter_len</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>length_hint_doc</name></expr>}</block></expr>,
 	<expr><block>{<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Pyrangeiter_Type</name> <init>= <expr><block>{
	<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>)</argument_list></call>
	0</expr>,                                      <comment type="block">/* ob_size */</comment>
	<expr>"rangeiterator"</expr>,                        <comment type="block">/* tp_name */</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>rangeiterobject</name></expr></argument>)</argument_list></sizeof></expr>,                <comment type="block">/* tp_basicsize */</comment>
	<expr>0</expr>,                                      <comment type="block">/* tp_itemsize */</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>)<name>PyObject_Del</name></expr>,		<comment type="block">/* tp_dealloc */</comment>
	<expr>0</expr>,                                      <comment type="block">/* tp_print */</comment>
	<expr>0</expr>,                                      <comment type="block">/* tp_getattr */</comment>
	<expr>0</expr>,                                      <comment type="block">/* tp_setattr */</comment>
	<expr>0</expr>,                                      <comment type="block">/* tp_compare */</comment>
	<expr>0</expr>,                                      <comment type="block">/* tp_repr */</comment>
	<expr>0</expr>,                                      <comment type="block">/* tp_as_number */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_sequence */</comment>
	<expr>0</expr>,                                      <comment type="block">/* tp_as_mapping */</comment>
	<expr>0</expr>,                                      <comment type="block">/* tp_hash */</comment>
	<expr>0</expr>,                                      <comment type="block">/* tp_call */</comment>
	<expr>0</expr>,                                      <comment type="block">/* tp_str */</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>,                <comment type="block">/* tp_getattro */</comment>
	<expr>0</expr>,                                      <comment type="block">/* tp_setattro */</comment>
	<expr>0</expr>,                                      <comment type="block">/* tp_as_buffer */</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name></expr>,			<comment type="block">/* tp_flags */</comment>
	<expr>0</expr>,                                      <comment type="block">/* tp_doc */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_traverse */</comment>
	<expr>0</expr>,                                      <comment type="block">/* tp_clear */</comment>
	<expr>0</expr>,                                      <comment type="block">/* tp_richcompare */</comment>
	<expr>0</expr>,                                      <comment type="block">/* tp_weaklistoffset */</comment>
	<expr><name>PyObject_SelfIter</name></expr>,			<comment type="block">/* tp_iter */</comment>
	<expr>(<name>iternextfunc</name>)<name>rangeiter_next</name></expr>,		<comment type="block">/* tp_iternext */</comment>
	<expr><name>rangeiter_methods</name></expr>,			<comment type="block">/* tp_methods */</comment>
	<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>range_iter</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>seq</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>rangeiterobject</name> *</type><name>it</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyRange_Check</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>it</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>rangeiterobject</name></expr></argument>, <argument><expr>&amp;<name>Pyrangeiter_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>index</name></name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>start</name></name> = ((<name>rangeobject</name> *)<name>seq</name>)-&gt;<name>start</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>step</name></name> = ((<name>rangeobject</name> *)<name>seq</name>)-&gt;<name>step</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>len</name></name> = ((<name>rangeobject</name> *)<name>seq</name>)-&gt;<name>len</name></expr>;</expr_stmt>
	<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>range_reverse</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>seq</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>rangeiterobject</name> *</type><name>it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>step</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyRange_Check</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>it</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>rangeiterobject</name></expr></argument>, <argument><expr>&amp;<name>Pyrangeiter_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>start</name> = ((<name>rangeobject</name> *)<name>seq</name>)-&gt;<name>start</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>step</name> = ((<name>rangeobject</name> *)<name>seq</name>)-&gt;<name>step</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> = ((<name>rangeobject</name> *)<name>seq</name>)-&gt;<name>len</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>it</name>-&gt;<name>index</name></name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>start</name></name> = <name>start</name> + (<name>len</name>-1) * <name>step</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>step</name></name> = -<name>step</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name>-&gt;<name>len</name></name> = <name>len</name></expr>;</expr_stmt>

	<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>
</unit>
