<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Demo/embed/demo.c"><comment type="block">/* Example of embedding Python in another program */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>initxyzzy</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl> <comment type="block">/* Forward */</comment>

<function><name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>)</parameter_list>
<block>{
	<comment type="block">/* Pass argv[0] to the Python interpreter */</comment>
	<expr_stmt><expr><call><name>Py_SetProgramName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Initialize the Python interpreter.  Required. */</comment>
	<expr_stmt><expr><call><name>Py_Initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Add a static module */</comment>
	<expr_stmt><expr><call><name>initxyzzy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Define sys.argv.  It is up to the application if you
	   want this; you can also let it undefined (since the Python 
	   code is generally not a main program it has no business
	   touching sys.argv...) */</comment>
	<expr_stmt><expr><call><name>PySys_SetArgv</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Do some application specific code */</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Hello, brave new world\n\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Execute some Python statements (in module __main__) */</comment>
	<expr_stmt><expr><call><name>PyRun_SimpleString</name><argument_list>(<argument><expr>"import sys\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyRun_SimpleString</name><argument_list>(<argument><expr>"print sys.builtin_module_names\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyRun_SimpleString</name><argument_list>(<argument><expr>"print sys.modules.keys()\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyRun_SimpleString</name><argument_list>(<argument><expr>"print sys.executable\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyRun_SimpleString</name><argument_list>(<argument><expr>"print sys.argv\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Note that you can call any public function of the Python
	   interpreter here, e.g. call_object(). */</comment>

	<comment type="block">/* Some more application specific code */</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\nGoodbye, cruel world\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Exit, cleaning up the interpreter */</comment>
	<expr_stmt><expr><call><name>Py_Exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*NOTREACHED*/</comment>
}</block></function>

<comment type="block">/* A static module */</comment>

<comment type="block">/* 'self' is not used */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>xyzzy_foo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>42L</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>xyzzy_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"foo"</expr>,		<expr><name>xyzzy_foo</name></expr>,	<expr><name>METH_NOARGS</name></expr>,
	 <expr>"Return the meaning of everything."</expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>initxyzzy</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>PyImport_AddModule</name><argument_list>(<argument><expr>"xyzzy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_InitModule</name><argument_list>(<argument><expr>"xyzzy"</expr></argument>, <argument><expr><name>xyzzy_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
