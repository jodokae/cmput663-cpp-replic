<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/PC/pyconfig.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_CONFIG_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_CONFIG_H</name></cpp:macro></cpp:define>

<comment type="block">/* pyconfig.h.  NOT Generated automatically by configure.

This is a manually maintained version used for the Watcom,
Borland and Microsoft Visual C++ compilers.  It is a
standard part of the Python distribution.

WINDOWS DEFINES:
The code specific to Windows should be wrapped around one of
the following #defines

MS_WIN64 - Code specific to the MS Win64 API
MS_WIN32 - Code specific to the MS Win32 (and Win64) API (obsolete, this covers all supported APIs)
MS_WINDOWS - Code specific to Windows, but all versions.
MS_WINCE - Code specific to Windows CE
Py_ENABLE_SHARED - Code if the Python core is built as a DLL.

Also note that neither "_M_IX86" or "_MSC_VER" should be used for
any purpose other than "Windows Intel x86 specific" and "Microsoft
compiler specific".  Therefore, these should be very rare.


NOTE: The following symbols are deprecated:
NT, USE_DL_EXPORT, USE_DL_IMPORT, DL_EXPORT, DL_IMPORT
MS_CORE_DLL.

WIN32 is still required for the locale module.

*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32_WCE</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS_WINCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Deprecated USE_DL_EXPORT macro - please use Py_BUILD_CORE */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_DL_EXPORT</name></cpp:ifdef>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_BUILD_CORE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_DL_EXPORT */</comment>

<comment type="block">/* Visual Studio 2005 introduces deprecation warnings for
   "insecure" and POSIX functions. The insecure functions should
   be replaced by *_s versions (according to Microsoft); the
   POSIX functions by _* versions (which, according to Microsoft,
   would be ISO C conforming). Neither renaming is feasible, so
   we just silence the warnings. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_CRT_SECURE_NO_DEPRECATE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_DEPRECATE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_CRT_NONSTDC_NO_DEPRECATE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_NONSTDC_NO_DEPRECATE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Windows CE does not have these */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MS_WINCE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_IO_H</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SYS_UTIME_H</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TEMPNAM</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TMPFILE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TMPNAM</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_CLOCK</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_STRERROR</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_IO_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_HYPOT</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_STRFTIME</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DONT_HAVE_SIG_ALARM</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DONT_HAVE_SIG_PAUSE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_BIT</name></cpp:macro>	<cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORD_BIT</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXEC_PREFIX</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS_WIN32</name></cpp:macro></cpp:define> <comment type="block">/* only support win32 and greater. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS_WINDOWS</name></cpp:macro></cpp:define>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PYTHONPATH</name></cpp:ifndef>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PYTHONPATH</name></cpp:macro> <cpp:value>".\\DLLs;.\\lib;.\\lib\\plat-win;.\\lib\\lib-tk"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_THREADS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITH_THREAD</name></cpp:macro></cpp:define>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETSCAPE_PI</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_SOCKET</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MS_WINCE</name></cpp:ifdef>
<comment type="block">/* Python uses GetVersion() to distinguish between
 * Windows NT and 9x/ME where OS Unicode support is concerned.
 * Windows CE supports Unicode in the same way as NT so we
 * define the missing GetVersion() accordingly.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetVersion</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(4)</cpp:value></cpp:define>
<comment type="block">/* Windows CE does not support environment variables */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getenv</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>environ</name></cpp:macro> <cpp:value>(NULL)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Compiler specific defines */</comment>

<comment type="block">/* ------------------------------------------------------------------------*/</comment>
<comment type="block">/* Microsoft C defines _MSC_VER */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>

<comment type="block">/* We want COMPILER to expand to a string containing _MSC_VER's *value*.
 * This is horridly tricky, because the stringization operator only works
 * on macro arguments, and doesn't evaluate macros passed *as* arguments.
 * Attempts simpler than the following appear doomed to produce "_MSC_VER"
 * literally in the string.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_PASTE_VERSION</name><parameter_list>(<param><type><name>SUFFIX</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value>("[MSC v." _Py_STRINGIZE(_MSC_VER) " " SUFFIX "]")</cpp:value></cpp:define>
<comment type="block">/* e.g., this produces, after compile-time string catenation,
 * 	("[MSC v.1200 32 bit (Intel)]")
 *
 * _Py_STRINGIZE(_MSC_VER) expands to
 * _Py_STRINGIZE1((_MSC_VER)) expands to
 * _Py_STRINGIZE2(_MSC_VER) but as this call is the result of token-pasting
 *      it's scanned again for macros and so further expands to (under MSVC 6)
 * _Py_STRINGIZE2(1200) which then expands to
 * "1200"
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_STRINGIZE</name><parameter_list>(<param><type><name>X</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_STRINGIZE1((X))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_STRINGIZE1</name><parameter_list>(<param><type><name>X</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_STRINGIZE2 ## X</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_STRINGIZE2</name><parameter_list>(<param><type><name>X</name></type></param>)</parameter_list></cpp:macro> <cpp:value>#X</cpp:value></cpp:define>

<comment type="block">/* MSVC defines _WINxx to differentiate the windows platform types

   Note that for compatibility reasons _WIN32 is defined on Win32
   *and* on Win64. For the same reasons, in Python, MS_WIN32 is
   defined on Win32 *and* Win64. Win32 only code must therefore be
   guarded as follows:
   	#if defined(MS_WIN32) &amp;&amp; !defined(MS_WIN64)
   Some modules are disabled on Itanium processors, therefore we
   have MS_WINI64 set for those targets, otherwise MS_WINX64
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN64</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS_WIN64</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* set the COMPILER */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MS_WIN64</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_IA64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER</name></cpp:macro> <cpp:value>_Py_PASTE_VERSION("64 bit (Itanium)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS_WINI64</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>_M_AMD64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER</name></cpp:macro> <cpp:value>_Py_PASTE_VERSION("64 bit (AMD64)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS_WINX64</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER</name></cpp:macro> <cpp:value>_Py_PASTE_VERSION("64 bit (Unknown)")</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MS_WIN64 */</comment>

<comment type="block">/* set the version macros for the windows headers */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MS_WINX64</name></cpp:ifdef>
<comment type="block">/* 64 bit only runs on XP or greater */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_WINVER</name></cpp:macro> <cpp:value>_WIN32_WINNT_WINXP</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_NTDDI</name></cpp:macro> <cpp:value>NTDDI_WINXP</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/* Python 2.6+ requires Windows 2000 or greater */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32_WINNT_WIN2K</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_WINVER</name></cpp:macro> <cpp:value>_WIN32_WINNT_WIN2K</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_WINVER</name></cpp:macro> <cpp:value>0x0500</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_NTDDI</name></cpp:macro> <cpp:value>NTDDI_WIN2KSP4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* We only set these values when building Python - we don't want to force
   these values on extensions, as that will affect the prototypes and
   structures exposed in the Windows headers. Even when building Python, we
   allow a single source file to override this - they may need access to
   structures etc so it can optionally use new Windows features if it
   determines at runtime they are available.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_BUILD_CORE</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>Py_BUILD_CORE_MODULE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NTDDI_VERSION</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTDDI_VERSION</name></cpp:macro> <cpp:value>Py_NTDDI</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WINVER</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINVER</name></cpp:macro> <cpp:value>Py_WINVER</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32_WINNT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>Py_WINVER</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* _W64 is not defined for VC6 or eVC4 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_W64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_W64</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Define like size_t, omitting the "unsigned" */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MS_WIN64</name></cpp:ifdef>
<typedef>typedef <type><name>__int64</name></type> <name>ssize_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>_W64</name> <name>int</name></type> <name>ssize_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SSIZE_T</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WIN32</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>MS_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_M_IX86</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER</name></cpp:macro> <cpp:value>_Py_PASTE_VERSION("32 bit (Intel)")</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER</name></cpp:macro> <cpp:value>_Py_PASTE_VERSION("32 bit (Unknown)")</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MS_WIN32 &amp;&amp; !MS_WIN64 */</comment>

<typedef>typedef <type><name>int</name></type> <name>pid_t</name>;</typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_IS_NAN</name></cpp:macro> <cpp:value>_isnan</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_IS_INFINITY</name><parameter_list>(<param><type><name>X</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(!_finite(X) &amp;&amp; !_isnan(X))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_IS_FINITE</name><parameter_list>(<param><type><name>X</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_finite(X)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>copysign</name></cpp:macro> <cpp:value>_copysign</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hypot</name></cpp:macro> <cpp:value>_hypot</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _MSC_VER */</comment>

<comment type="block">/* define some ANSI types that are not defined in earlier Win headers */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> &amp;&amp; <name>_MSC_VER</name> &gt;= 1200</expr></cpp:if>
<comment type="block">/* This file only exists in VC 6.0 or higher */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;basetsd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* ------------------------------------------------------------------------*/</comment>
<comment type="block">/* The Borland compiler defines __BORLANDC__ */</comment>
<comment type="block">/* XXX These defines are likely incomplete, but should be easy to fix. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__BORLANDC__</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER</name></cpp:macro> <cpp:value>"[Borland]"</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<comment type="block">/* tested with BCC 5.5 (__BORLANDC__ &gt;= 0x0550)
 */</comment>

<typedef>typedef <type><name>int</name></type> <name>pid_t</name>;</typedef>
<comment type="block">/* BCC55 seems to understand __declspec(dllimport), it is used in its
   own header files (winnt.h, ...) - so we can do nothing and get the default*/</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_SYS_UTIME_H</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_UTIME_H</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DIRENT_H</name></cpp:macro></cpp:define>

<comment type="block">/* rename a few functions for the Borland compiler */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_chsize</name></cpp:macro> <cpp:value>chsize</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_setmode</name></cpp:macro> <cpp:value>setmode</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !_WIN32 */</comment>
<cpp:error>#<cpp:directive>error</cpp:directive> "Only Win32 and later are supported"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !_WIN32 */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BORLANDC */</comment>

<comment type="block">/* ------------------------------------------------------------------------*/</comment>
<comment type="block">/* egcs/gnu-win32 defines __GNUC__ and _WIN32 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* XXX These defines are likely incomplete, but should be easy to fix.
   They should be complete enough to build extension modules. */</comment>
<comment type="block">/* Suggested by Rene Liebscher &lt;R.Liebscher@gmx.de&gt; to avoid a GCC 2.91.*
   bug that requires structure imports.  More recent versions of the
   compiler don't exhibit this bug.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>__GNUC__</name>==2) &amp;&amp; (<name>__GNUC_MINOR__</name>&lt;=91)</expr></cpp:if>
<cpp:error>#<cpp:directive>warning</cpp:directive> "Please use an up-to-date version of gcc! (&gt;2.91 recommended)"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER</name></cpp:macro> <cpp:value>"[gcc]"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hypot</name></cpp:macro> <cpp:value>_hypot</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_LONG_LONG</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_LLONG_MIN</name></cpp:macro> <cpp:value>LLONG_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_LLONG_MAX</name></cpp:macro> <cpp:value>LLONG_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_ULLONG_MAX</name></cpp:macro> <cpp:value>ULLONG_MAX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* GNUC */</comment>

<comment type="block">/* ------------------------------------------------------------------------*/</comment>
<comment type="block">/* lcc-win32 defines __LCC__ */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LCC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* XXX These defines are likely incomplete, but should be easy to fix.
   They should be complete enough to build extension modules. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER</name></cpp:macro> <cpp:value>"[lcc-win32]"</cpp:value></cpp:define>
<typedef>typedef <type><name>int</name></type> <name>pid_t</name>;</typedef>
<comment type="block">/* __declspec() is supported here too - do nothing to get the defaults */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* LCC */</comment>

<comment type="block">/* ------------------------------------------------------------------------*/</comment>
<comment type="block">/* End of compilers - finish up */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_STDIO_H</name></cpp:ifndef>
<cpp:include>#	<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* 64 bit ints are usually spelt __int64 unless compiler has overridden */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_LONG_LONG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PY_LONG_LONG</name></cpp:ifndef>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_LONG_LONG</name></cpp:macro> <cpp:value>__int64</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_LLONG_MAX</name></cpp:macro> <cpp:value>_I64_MAX</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_LLONG_MIN</name></cpp:macro> <cpp:value>_I64_MIN</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_ULLONG_MAX</name></cpp:macro> <cpp:value>_UI64_MAX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* For Windows the Python core is in a DLL by default.  Test
Py_NO_ENABLE_SHARED to find out.  Also support MS_NO_COREDLL for b/w compat */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MS_NO_COREDLL</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>Py_NO_ENABLE_SHARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_ENABLE_SHARED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* standard symbol for shared library */</comment>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>MS_COREDLL</name></cpp:macro></cpp:define>	<comment type="block">/* deprecated old symbol */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MS_NO_COREDLL &amp;&amp; ... */</comment>

<comment type="block">/*  All windows compilers that use this header support __declspec */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DECLSPEC_DLL</name></cpp:macro></cpp:define>

<comment type="block">/* For an MSVC DLL, we can nominate the .lib files used by extensions */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MS_COREDLL</name></cpp:ifdef>
<cpp:ifndef>#	<cpp:directive>ifndef</cpp:directive> <name>Py_BUILD_CORE</name></cpp:ifndef> <comment type="block">/* not building the core - must be an ext */</comment>
<cpp:if>#		<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<comment type="block">/* So MSVC users need not specify the .lib file in
			their Makefile (other compilers are generally
			taken care of by distutils.) */</comment>
<cpp:ifdef>#			<cpp:directive>ifdef</cpp:directive> <name>_DEBUG</name></cpp:ifdef>
<cpp:pragma>#				<cpp:directive>pragma</cpp:directive> comment(lib,"python26_d.lib")</cpp:pragma>
<cpp:else>#			<cpp:directive>else</cpp:directive></cpp:else>
<cpp:pragma>#				<cpp:directive>pragma</cpp:directive> comment(lib,"python26.lib")</cpp:pragma>
<cpp:endif>#			<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _DEBUG */</comment>
<cpp:endif>#		<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _MSC_VER */</comment>
<cpp:endif>#	<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* Py_BUILD_CORE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MS_COREDLL */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* maintain "win32" sys.platform for backward compatibility of Python code,
   the Win64 API should be close enough to the Win32 API to make this
   preferable */</comment>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM</name></cpp:macro> <cpp:value>"win32"</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_VOID_P</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_TIME_T</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_OFF_T</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_FPOS_T</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_HKEY</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_SIZE_T</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<comment type="block">/* configure.in defines HAVE_LARGEFILE_SUPPORT iff HAVE_LONG_LONG,
   sizeof(off_t) &gt; sizeof(long), and sizeof(PY_LONG_LONG) &gt;= sizeof(off_t).
   On Win64 the second condition is not true, but if fpos_t replaces off_t
   then this is true. The uses of HAVE_LARGEFILE_SUPPORT imply that Win64
   should define this. */</comment>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_LARGEFILE_SUPPORT</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM</name></cpp:macro> <cpp:value>"win32"</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_LARGEFILE_SUPPORT</name></cpp:macro></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_VOID_P</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_OFF_T</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_FPOS_T</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_HKEY</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_SIZE_T</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
	<comment type="block">/* MS VS2005 changes time_t to an 64-bit type on all platforms */</comment>
<cpp:if>#	<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> &amp;&amp; <name>_MSC_VER</name> &gt;= 1400</expr></cpp:if>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_TIME_T</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:else>#	<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_TIME_T</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:endif>#	<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_DEBUG</name></cpp:ifdef>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_DEBUG</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MS_WIN32</name></cpp:ifdef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_SHORT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_INT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_LONG</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_LONG_LONG</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_DOUBLE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_FLOAT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<comment type="block">/* VC 7.1 has them and VC 6.0 does not.  VC 6.0 has a version number of 1200.
   Microsoft eMbedded Visual C++ 4.0 has a version number of 1201 and doesn't
   define these.
   If some compiler does not provide them, modify the #if appropriately. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> &gt; 1300</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_UINTPTR_T</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_INTPTR_T</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/* VC6, VS 2002 and eVC4 don't support the C99 LL suffix for 64-bit integer literals */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_LL</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>x##I64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* _MSC_VER &gt; 1200  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* _MSC_VER */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Fairly standard from here! */</comment>

<comment type="block">/* Define to 1 if you have the `copysign' function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_COPYSIGN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define to 1 if you have the `isinf' function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_ISINF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define to 1 if you have the `isnan' function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_ISNAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if on AIX 3.
   System headers sometimes define this.
   We just want to avoid a redefinition error message.  */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_ALL_SOURCE</name></cpp:ifndef>
<comment type="block">/* #undef _ALL_SOURCE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Define to empty if the keyword does not work.  */</comment>
<comment type="block">/* #define const  */</comment>

<comment type="block">/* Define to 1 if you have the &lt;conio.h&gt; header file. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MS_WINCE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_CONIO_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Define to 1 if you have the &lt;direct.h&gt; header file. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MS_WINCE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DIRECT_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Define if you have dirent.h.  */</comment>
<comment type="block">/* #define DIRENT 1 */</comment>

<comment type="block">/* Define to the type of elements in the array set by `getgroups'.
   Usually this is either `int' or `gid_t'.  */</comment>
<comment type="block">/* #undef GETGROUPS_T */</comment>

<comment type="block">/* Define to `int' if &lt;sys/types.h&gt; doesn't define.  */</comment>
<comment type="block">/* #undef gid_t */</comment>

<comment type="block">/* Define if your struct tm has tm_zone.  */</comment>
<comment type="block">/* #undef HAVE_TM_ZONE */</comment>

<comment type="block">/* Define if you don't have tm_zone but do have the external array
   tzname.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TZNAME</name></cpp:macro></cpp:define>

<comment type="block">/* Define to `int' if &lt;sys/types.h&gt; doesn't define.  */</comment>
<comment type="block">/* #undef mode_t */</comment>

<comment type="block">/* Define if you don't have dirent.h, but have ndir.h.  */</comment>
<comment type="block">/* #undef NDIR */</comment>

<comment type="block">/* Define to `long' if &lt;sys/types.h&gt; doesn't define.  */</comment>
<comment type="block">/* #undef off_t */</comment>

<comment type="block">/* Define to `int' if &lt;sys/types.h&gt; doesn't define.  */</comment>
<comment type="block">/* #undef pid_t */</comment>

<comment type="block">/* Define if the system does not provide POSIX.1 features except
   with this defined.  */</comment>
<comment type="block">/* #undef _POSIX_1_SOURCE */</comment>

<comment type="block">/* Define if you need to in order for stat and other things to work.  */</comment>
<comment type="block">/* #undef _POSIX_SOURCE */</comment>

<comment type="block">/* Define as the return type of signal handlers (int or void).  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETSIGTYPE</name></cpp:macro> <cpp:value>void</cpp:value></cpp:define>

<comment type="block">/* Define to `unsigned' if &lt;sys/types.h&gt; doesn't define.  */</comment>
<comment type="block">/* #undef size_t */</comment>

<comment type="block">/* Define if you have the ANSI C header files.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDC_HEADERS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you don't have dirent.h, but have sys/dir.h.  */</comment>
<comment type="block">/* #undef SYSDIR */</comment>

<comment type="block">/* Define if you don't have dirent.h, but have sys/ndir.h.  */</comment>
<comment type="block">/* #undef SYSNDIR */</comment>

<comment type="block">/* Define if you can safely include both &lt;sys/time.h&gt; and &lt;time.h&gt;.  */</comment>
<comment type="block">/* #undef TIME_WITH_SYS_TIME */</comment>

<comment type="block">/* Define if your &lt;sys/time.h&gt; declares struct tm.  */</comment>
<comment type="block">/* #define TM_IN_SYS_TIME 1 */</comment>

<comment type="block">/* Define to `int' if &lt;sys/types.h&gt; doesn't define.  */</comment>
<comment type="block">/* #undef uid_t */</comment>

<comment type="block">/* Define if the closedir function returns void instead of int.  */</comment>
<comment type="block">/* #undef VOID_CLOSEDIR */</comment>

<comment type="block">/* Define if getpgrp() must be called as getpgrp(0)
   and (consequently) setpgrp() as setpgrp(0, 0). */</comment>
<comment type="block">/* #undef GETPGRP_HAVE_ARGS */</comment>

<comment type="block">/* Define this if your time.h defines altzone */</comment>
<comment type="block">/* #define HAVE_ALTZONE */</comment>

<comment type="block">/* Define if you have the putenv function.  */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MS_WINCE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PUTENV</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Define if your compiler supports function prototypes */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PROTOTYPES</name></cpp:macro></cpp:define>

<comment type="block">/* Define if  you can safely include both &lt;sys/select.h&gt; and &lt;sys/time.h&gt;
   (which you can't on SCO ODT 3.0). */</comment>
<comment type="block">/* #undef SYS_SELECT_WITH_SYS_TIME */</comment>

<comment type="block">/* Define if you want documentation strings in extension modules */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITH_DOC_STRINGS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you want to compile in rudimentary thread support */</comment>
<comment type="block">/* #undef WITH_THREAD */</comment>

<comment type="block">/* Define if you want to use the GNU readline library */</comment>
<comment type="block">/* #define WITH_READLINE 1 */</comment>

<comment type="block">/* Define if you want to have a Unicode type. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_USING_UNICODE</name></cpp:macro></cpp:define>

<comment type="block">/* Define as the size of the unicode type. */</comment>
<comment type="block">/* This is enough for unicodeobject.h to do the "right thing" on Windows. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_SIZE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<comment type="block">/* Define to indicate that the Python Unicode representation can be passed
   as-is to Win32 Wide API.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_WIN_WIDE_FILENAMES</name></cpp:macro></cpp:define>

<comment type="block">/* Use Python's own small-block memory-allocator. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITH_PYMALLOC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have clock.  */</comment>
<comment type="block">/* #define HAVE_CLOCK */</comment>

<comment type="block">/* Define when any dynamic module loading is enabled */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DYNAMIC_LOADING</name></cpp:macro></cpp:define>

<comment type="block">/* Define if you have ftime.  */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MS_WINCE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_FTIME</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Define if you have getpeername.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GETPEERNAME</name></cpp:macro></cpp:define>

<comment type="block">/* Define if you have getpgrp.  */</comment>
<comment type="block">/* #undef HAVE_GETPGRP */</comment>

<comment type="block">/* Define if you have getpid.  */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MS_WINCE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GETPID</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Define if you have gettimeofday.  */</comment>
<comment type="block">/* #undef HAVE_GETTIMEOFDAY */</comment>

<comment type="block">/* Define if you have getwd.  */</comment>
<comment type="block">/* #undef HAVE_GETWD */</comment>

<comment type="block">/* Define if you have lstat.  */</comment>
<comment type="block">/* #undef HAVE_LSTAT */</comment>

<comment type="block">/* Define if you have the mktime function.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MKTIME</name></cpp:macro></cpp:define>

<comment type="block">/* Define if you have nice.  */</comment>
<comment type="block">/* #undef HAVE_NICE */</comment>

<comment type="block">/* Define if you have readlink.  */</comment>
<comment type="block">/* #undef HAVE_READLINK */</comment>

<comment type="block">/* Define if you have select.  */</comment>
<comment type="block">/* #undef HAVE_SELECT */</comment>

<comment type="block">/* Define if you have setpgid.  */</comment>
<comment type="block">/* #undef HAVE_SETPGID */</comment>

<comment type="block">/* Define if you have setpgrp.  */</comment>
<comment type="block">/* #undef HAVE_SETPGRP */</comment>

<comment type="block">/* Define if you have setsid.  */</comment>
<comment type="block">/* #undef HAVE_SETSID */</comment>

<comment type="block">/* Define if you have setvbuf.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SETVBUF</name></cpp:macro></cpp:define>

<comment type="block">/* Define if you have siginterrupt.  */</comment>
<comment type="block">/* #undef HAVE_SIGINTERRUPT */</comment>

<comment type="block">/* Define if you have symlink.  */</comment>
<comment type="block">/* #undef HAVE_SYMLINK */</comment>

<comment type="block">/* Define if you have tcgetpgrp.  */</comment>
<comment type="block">/* #undef HAVE_TCGETPGRP */</comment>

<comment type="block">/* Define if you have tcsetpgrp.  */</comment>
<comment type="block">/* #undef HAVE_TCSETPGRP */</comment>

<comment type="block">/* Define if you have times.  */</comment>
<comment type="block">/* #undef HAVE_TIMES */</comment>

<comment type="block">/* Define if you have uname.  */</comment>
<comment type="block">/* #undef HAVE_UNAME */</comment>

<comment type="block">/* Define if you have waitpid.  */</comment>
<comment type="block">/* #undef HAVE_WAITPID */</comment>

<comment type="block">/* Define to 1 if you have the `wcscoll' function. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MS_WINCE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_WCSCOLL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Define if you have the &lt;dlfcn.h&gt; header file.  */</comment>
<comment type="block">/* #undef HAVE_DLFCN_H */</comment>

<comment type="block">/* Define to 1 if you have the &lt;errno.h&gt; header file. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MS_WINCE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_ERRNO_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Define if you have the &lt;fcntl.h&gt; header file.  */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MS_WINCE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_FCNTL_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Define to 1 if you have the &lt;process.h&gt; header file. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MS_WINCE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PROCESS_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Define to 1 if you have the &lt;signal.h&gt; header file. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MS_WINCE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SIGNAL_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Define if you have the &lt;stdarg.h&gt; prototypes.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_STDARG_PROTOTYPES</name></cpp:macro></cpp:define>

<comment type="block">/* Define if you have the &lt;stddef.h&gt; header file.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_STDDEF_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the &lt;sys/audioio.h&gt; header file.  */</comment>
<comment type="block">/* #undef HAVE_SYS_AUDIOIO_H */</comment>

<comment type="block">/* Define if you have the &lt;sys/param.h&gt; header file.  */</comment>
<comment type="block">/* #define HAVE_SYS_PARAM_H 1 */</comment>

<comment type="block">/* Define if you have the &lt;sys/select.h&gt; header file.  */</comment>
<comment type="block">/* #define HAVE_SYS_SELECT_H 1 */</comment>

<comment type="block">/* Define to 1 if you have the &lt;sys/stat.h&gt; header file.  */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MS_WINCE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SYS_STAT_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Define if you have the &lt;sys/time.h&gt; header file.  */</comment>
<comment type="block">/* #define HAVE_SYS_TIME_H 1 */</comment>

<comment type="block">/* Define if you have the &lt;sys/times.h&gt; header file.  */</comment>
<comment type="block">/* #define HAVE_SYS_TIMES_H 1 */</comment>

<comment type="block">/* Define to 1 if you have the &lt;sys/types.h&gt; header file.  */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MS_WINCE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SYS_TYPES_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Define if you have the &lt;sys/un.h&gt; header file.  */</comment>
<comment type="block">/* #define HAVE_SYS_UN_H 1 */</comment>

<comment type="block">/* Define if you have the &lt;sys/utime.h&gt; header file.  */</comment>
<comment type="block">/* #define HAVE_SYS_UTIME_H 1 */</comment>

<comment type="block">/* Define if you have the &lt;sys/utsname.h&gt; header file.  */</comment>
<comment type="block">/* #define HAVE_SYS_UTSNAME_H 1 */</comment>

<comment type="block">/* Define if you have the &lt;thread.h&gt; header file.  */</comment>
<comment type="block">/* #undef HAVE_THREAD_H */</comment>

<comment type="block">/* Define if you have the &lt;unistd.h&gt; header file.  */</comment>
<comment type="block">/* #define HAVE_UNISTD_H 1 */</comment>

<comment type="block">/* Define if you have the &lt;utime.h&gt; header file.  */</comment>
<comment type="block">/* #define HAVE_UTIME_H 1 */</comment>

<comment type="block">/* Define if the compiler provides a wchar.h header file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_WCHAR_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the dl library (-ldl).  */</comment>
<comment type="block">/* #undef HAVE_LIBDL */</comment>

<comment type="block">/* Define if you have the mpc library (-lmpc).  */</comment>
<comment type="block">/* #undef HAVE_LIBMPC */</comment>

<comment type="block">/* Define if you have the nsl library (-lnsl).  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_LIBNSL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the seq library (-lseq).  */</comment>
<comment type="block">/* #undef HAVE_LIBSEQ */</comment>

<comment type="block">/* Define if you have the socket library (-lsocket).  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_LIBSOCKET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the sun library (-lsun).  */</comment>
<comment type="block">/* #undef HAVE_LIBSUN */</comment>

<comment type="block">/* Define if you have the termcap library (-ltermcap).  */</comment>
<comment type="block">/* #undef HAVE_LIBTERMCAP */</comment>

<comment type="block">/* Define if you have the termlib library (-ltermlib).  */</comment>
<comment type="block">/* #undef HAVE_LIBTERMLIB */</comment>

<comment type="block">/* Define if you have the thread library (-lthread).  */</comment>
<comment type="block">/* #undef HAVE_LIBTHREAD */</comment>

<comment type="block">/* WinSock does not use a bitmask in select, and uses
   socket handles greater than FD_SETSIZE */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_SOCKET_FD_CAN_BE_GE_FD_SETSIZE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_CONFIG_H */</comment>
</unit>
