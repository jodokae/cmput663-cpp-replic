<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/PC/os2emx/pyconfig.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_CONFIG_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_CONFIG_H</name></cpp:macro></cpp:define>

<comment type="block">/* config.h.
 * At some time in the past, generated automatically by/from configure.
 * now maintained manually.
 */</comment>

<comment type="block">/* build environment */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM</name></cpp:macro>	<cpp:value>"os2emx"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER</name></cpp:macro>	<cpp:value>"[EMX GCC " __VERSION__ "]"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYOS_OS2</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYCC_GCC</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* default location(s) */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PREFIX</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX</name></cpp:macro>		<cpp:value>""</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PYTHONPATH</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYTHONPATH</name></cpp:macro>	<cpp:value>"./Lib;./Lib/plat-" PLATFORM \
			";./Lib/lib-dynload;./Lib/site-packages"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Debugging */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_DEBUG</name></cpp:ifndef>
<comment type="block">/*#define Py_DEBUG 1*/</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* if building an extension or wrapper executable,
 * mark Python API symbols "extern" so that symbols
 * imported from the Python core DLL aren't duplicated.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_BUILD_CORE</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>PyAPI_FUNC</name><parameter_list>(<param><type><name>RTYPE</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>RTYPE</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>PyAPI_FUNC</name><parameter_list>(<param><type><name>RTYPE</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>extern RTYPE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyAPI_DATA</name><parameter_list>(<param><type><name>RTYPE</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>extern RTYPE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMODINIT_FUNC</name></cpp:macro>	<cpp:value>void</cpp:value></cpp:define>

<comment type="block">/* Use OS/2 flavour of threads */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITH_THREAD</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS2_THREADS</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* We want sockets */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCPIPV4</name></cpp:macro>		<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_SOCKET</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>socklen_t</name></cpp:macro>	<cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_SETSIZE</name></cpp:macro>	<cpp:value>1024</cpp:value></cpp:define>

<comment type="block">/* enable the Python object allocator */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>WITH_PYMALLOC</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* enable the GC module */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITH_CYCLE_GC</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you want documentation strings in extension modules */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITH_DOC_STRINGS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Unicode related */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_USING_UNICODE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_UNICODE_TYPE</name></cpp:macro>	<cpp:value>wchar_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_SIZE</name></cpp:macro> <cpp:value>SIZEOF_SHORT</cpp:value></cpp:define>

<comment type="block">/* EMX defines ssize_t */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SSIZE_T</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* system capabilities */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TTYNAME</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_WAIT</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GETEGID</name></cpp:macro>    <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GETEUID</name></cpp:macro>    <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GETGID</name></cpp:macro>     <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GETPPID</name></cpp:macro>    <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GETUID</name></cpp:macro>     <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_OPENDIR</name></cpp:macro>    <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PIPE</name></cpp:macro>       <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_POPEN</name></cpp:macro>      <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SYSTEM</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TTYNAME</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DYNAMIC_LOADING</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* if port of GDBM installed, it includes NDBM emulation */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_NDBM_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* need this for spawnv code in posixmodule (cloned from WIN32 def'n) */</comment>
<typedef>typedef <type><name>long</name></type> <name>intptr_t</name>;</typedef>

<comment type="block">/* we don't have tm_zone but do have the external array tzname */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TZNAME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define as the return type of signal handlers (int or void). */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETSIGTYPE</name></cpp:macro> <cpp:value>void</cpp:value></cpp:define>

<comment type="block">/* Define if you have the ANSI C header files. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDC_HEADERS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you can safely include both &lt;sys/time.h&gt; and &lt;time.h&gt;. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_WITH_SYS_TIME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define this if you have the type long long. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_LONG_LONG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if your compiler supports function prototypes. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PROTOTYPES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if your compiler supports variable length function prototypes
 * (e.g. void fprintf(FILE *, char *, ...);) *and* &lt;stdarg.h&gt;.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_STDARG_PROTOTYPES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if malloc(0) returns a NULL pointer. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_ZERO_RETURNS_NULL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define to force use of thread-safe errno, h_errno, and other functions. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REENTRANT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you can safely include both &lt;sys/select.h&gt; and &lt;sys/time.h&gt;
 * (which you can't on SCO ODT 3.0).
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYS_SELECT_WITH_SYS_TIME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* The number of bytes in an off_t. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_OFF_T</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<comment type="block">/* The number of bytes in an time_t. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_TIME_T</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<comment type="block">/* The number of bytes in a short. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_SHORT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<comment type="block">/* The number of bytes in a int. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_INT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<comment type="block">/* The number of bytes in a long. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_LONG</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<comment type="block">/* The number of bytes in a long long. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_LONG_LONG</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<comment type="block">/* The number of bytes in a void *. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_VOID_P</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<comment type="block">/* The number of bytes in a size_t. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_SIZE_T</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<comment type="block">/* Define if you have the alarm function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_ALARM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the clock function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_CLOCK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the dup2 function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DUP2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the execv function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_EXECV</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the spawnv function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SPAWNV</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the flock function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_FLOCK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the fork function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_FORK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the fsync function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_FSYNC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the ftime function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_FTIME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the ftruncate function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_FTRUNCATE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the getcwd function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GETCWD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the getpeername function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GETPEERNAME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the getpgrp function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GETPGRP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the getpid function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GETPID</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the getpwent function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GETPWENT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the gettimeofday function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GETTIMEOFDAY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the getwd function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GETWD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the hypot function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_HYPOT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the kill function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_KILL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the memmove function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MEMMOVE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the mktime function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MKTIME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the pause function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PAUSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the putenv function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PUTENV</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the select function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SELECT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the setgid function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SETGID</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the setlocale function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SETLOCALE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the setpgid function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SETPGID</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the setuid function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SETUID</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the setvbuf function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SETVBUF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the sigaction function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SIGACTION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the strerror function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_STRERROR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the strftime function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_STRFTIME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the tcgetpgrp function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TCGETPGRP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the tcsetpgrp function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TCSETPGRP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the tmpfile function.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TMPFILE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the times function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TIMES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the truncate function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TRUNCATE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the uname function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_UNAME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the waitpid function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_WAITPID</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the &lt;conio.h&gt; header file. */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_CONIO_H</name></cpp:undef>

<comment type="block">/* Define to 1 if you have the `copysign' function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_COPYSIGN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the &lt;direct.h&gt; header file. */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_DIRECT_H</name></cpp:undef>

<comment type="block">/* Define if you have the &lt;dirent.h&gt; header file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DIRENT_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the &lt;errno.h&gt; header file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_ERRNO_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the &lt;fcntl.h&gt; header file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_FCNTL_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the &lt;io.h&gt; header file. */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_IO_H</name></cpp:undef>

<comment type="block">/* Define if you have the &lt;ncurses.h&gt; header file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_NCURSES_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define to 1 if you have the &lt;process.h&gt; header file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PROCESS_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the &lt;signal.h&gt; header file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SIGNAL_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the &lt;sys/file.h&gt; header file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SYS_FILE_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the &lt;sys/param.h&gt; header file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SYS_PARAM_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the &lt;sys/select.h&gt; header file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SYS_SELECT_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the &lt;sys/stat.h&gt; header file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SYS_STAT_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the &lt;sys/time.h&gt; header file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SYS_TIME_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the &lt;sys/times.h&gt; header file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SYS_TIMES_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the &lt;sys/types.h&gt; header file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SYS_TYPES_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the &lt;sys/un.h&gt; header file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SYS_UN_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the &lt;sys/utsname.h&gt; header file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SYS_UTSNAME_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the &lt;sys/wait.h&gt; header file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SYS_WAIT_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the &lt;unistd.h&gt; header file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_UNISTD_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if you have the &lt;utime.h&gt; header file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_UTIME_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* EMX has an snprintf(). */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SNPRINTF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_CONFIG_H */</comment>

</unit>
