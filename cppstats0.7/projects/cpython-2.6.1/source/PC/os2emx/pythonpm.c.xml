<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/PC/os2emx/pythonpm.c"><comment type="block">/* OS/2 PM main program - creates a hidden window, and starts Python
 * interpreter in a separate thread, so that Python scripts can be
 * run in PM process space without a console Window.  The interpreter
 * is incorporated by linking in the Python DLL.
 *
 * As it stands, I don't think this is adequate for supporting Python
 * GUI modules, as the Python thread doesn't have its own message
 * queue - which is required of threads that want to create/use
 * PM windows.
 *
 * This code owes a lot to "OS/2 Presentation Manager Programming", by
 * Charles Petzold.
 *
 * Andrew MacIntyre &lt;andymac@bullseye.apana.org.au&gt;, August 2001.
 * Released under the terms of the Python 2.1.1 licence - see the LICENCE
 * file in the Python v2.1.1 (or later) source distribution.
 * Copyright assigned to the Python Software Foundation, 2001.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCL_DOS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCL_WIN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;os2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>

<comment type="block">/* use structure to pass command line to Python thread */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> **</type><name>argv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HWND</name></type> <name>Frame</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>running</name></decl>;</decl_stmt>
}</block></struct></type> <name>arglist</name>;</typedef>

<comment type="block">/* make this a global to simplify access.
 * it should only be set from the Python thread, or by the code that
 * initiates the Python thread when the thread cannot be created.
 */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>PythonRC</name></decl>;</decl_stmt>

<extern>extern DL_EXPORT(int</extern>) <expr_stmt><expr><call><name>Py_Main</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>char</name> **</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>PythonThread</name><parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ULONG</name></type> <name>FrameFlags</name> <init>= <expr><name>FCF_TITLEBAR</name> |
			   <name>FCF_SYSMENU</name> |
			   <name>FCF_SIZEBORDER</name> |
			   <name>FCF_HIDEBUTTON</name> |
			   <name>FCF_SHELLPOSITION</name> |
			   <name>FCF_TASKLIST</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HAB</name></type> <name>hab</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HMQ</name></type> <name>hmq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HWND</name></type> <name>Client</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QMSG</name></type> <name>qmsg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>arglist</name></type> <name>args</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>python_tid</name></decl>;</decl_stmt>

	<comment type="block">/* init PM and create message queue */</comment>
	<expr_stmt><expr><name>hab</name> = <call><name>WinInitialize</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>hmq</name> = <call><name>WinCreateMsgQueue</name><argument_list>(<argument><expr><name>hab</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* create a (hidden) Window to house the window procedure */</comment>
	<expr_stmt><expr><name><name>args</name>.<name>Frame</name></name> = <call><name>WinCreateStdWindow</name><argument_list>(<argument><expr><name>HWND_DESKTOP</name></expr></argument>,
					<argument><expr>0</expr></argument>,
					<argument><expr>&amp;<name>FrameFlags</name></expr></argument>,
					<argument><expr><name>NULL</name></expr></argument>,
					<argument><expr>"PythonPM"</expr></argument>,
					<argument><expr>0L</expr></argument>,
					<argument><expr>0</expr></argument>,
					<argument><expr>0</expr></argument>,
					<argument><expr>&amp;<name>Client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* run Python interpreter in a thread */</comment>
	<expr_stmt><expr><name><name>args</name>.<name>argc</name></name> = <name>argc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name>.<name>argv</name></name> = <name>argv</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name>.<name>running</name></name> = 0</expr>;</expr_stmt>
	<if>if <condition>(<expr>-1 == (<name>python_tid</name> = <call><name>_beginthread</name><argument_list>(<argument><expr><name>PythonThread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1024 * 1024</expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
	<block>{
		<comment type="block">/* couldn't start thread */</comment>
		<expr_stmt><expr><call><name>WinAlarm</name><argument_list>(<argument><expr><name>HWND_DESKTOP</name></expr></argument>, <argument><expr><name>WA_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>PythonRC</name> = 1</expr>;</expr_stmt>
	}</block></then>
	<else>else
	<block>{
		<comment type="block">/* process PM messages, until Python exits */</comment>
		<while>while <condition>(<expr><call><name>WinGetMsg</name><argument_list>(<argument><expr><name>hab</name></expr></argument>, <argument><expr>&amp;<name>qmsg</name></expr></argument>, <argument><expr><name>NULLHANDLE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition>
			<expr_stmt><expr><call><name>WinDispatchMsg</name><argument_list>(<argument><expr><name>hab</name></expr></argument>, <argument><expr>&amp;<name>qmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
		<if>if <condition>(<expr><name><name>args</name>.<name>running</name></name> &gt; 0</expr>)</condition><then>
			<expr_stmt><expr><call><name>DosKillThread</name><argument_list>(<argument><expr><name>python_tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></else></if>
		
	<comment type="block">/* destroy window, shutdown message queue and PM */</comment>
	<expr_stmt><expr><call><name>WinDestroyWindow</name><argument_list>(<argument><expr><name><name>args</name>.<name>Frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WinDestroyMsgQueue</name><argument_list>(<argument><expr><name>hmq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WinTerminate</name><argument_list>(<argument><expr><name>hab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>PythonRC</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>PythonThread</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>argl</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>HAB</name></type> <name>hab</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>arglist</name> *</type><name>args</name></decl>;</decl_stmt>

	<comment type="block">/* PM initialisation */</comment>
	<expr_stmt><expr><name>hab</name> = <call><name>WinInitialize</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* start Python */</comment>
	<expr_stmt><expr><name>args</name> = (<name>arglist</name> *)<name>argl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name>-&gt;<name>running</name></name> = 1</expr>;</expr_stmt>
	<expr_stmt><expr><name>PythonRC</name> = <call><name>Py_Main</name><argument_list>(<argument><expr><name><name>args</name>-&gt;<name>argc</name></name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* enter a critical section and send the termination message */</comment>
	<expr_stmt><expr><call><name>DosEnterCritSec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name>-&gt;<name>running</name></name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WinPostMsg</name><argument_list>(<argument><expr><name><name>args</name>-&gt;<name>Frame</name></name></expr></argument>, <argument><expr><name>WM_QUIT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* shutdown PM and terminate thread */</comment>
	<expr_stmt><expr><call><name>WinTerminate</name><argument_list>(<argument><expr><name>hab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_endthread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
