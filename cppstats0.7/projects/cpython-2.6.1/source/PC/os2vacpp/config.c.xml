<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/PC/os2vacpp/config.c"><comment type="block">/* -*- C -*- ***********************************************
Copyright (c) 2000, BeOpen.com.
Copyright (c) 1995-2000, Corporation for National Research Initiatives.
Copyright (c) 1990-1995, Stichting Mathematisch Centrum.
All rights reserved.

See the file "Misc/COPYRIGHT" for information on usage and
redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.
******************************************************************/</comment>

<comment type="block">/* Module configuration */</comment>

<comment type="block">/* This file contains the table of built-in modules.
   See init_builtin() in import.c. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initarray</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initaudioop</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initbinascii</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initcmath</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initerrno</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initimageop</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initmath</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initmd5</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initnt</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initos2</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initoperator</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initposix</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initrgbimg</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initsignal</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initselect</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_socket</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initstrop</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initstruct</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>inittime</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initthread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initcStringIO</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initcPickle</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initpcre</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initmsvcrt</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* -- ADDMODULE MARKER 1 -- */</comment>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>PyMarshal_Init</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>initimp</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>

<decl_stmt><decl><type>struct <name>_inittab</name></type> <name><name>_PyImport_Inittab</name><index>[]</index></name> <init>= <expr><block>{

        <expr><block>{<expr>"array"</expr>, <expr><name>initarray</name></expr>}</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>M_I386</name></cpp:ifdef>
        <expr><block>{<expr>"audioop"</expr>, <expr><name>initaudioop</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr><block>{<expr>"binascii"</expr>, <expr><name>initbinascii</name></expr>}</block></expr>,
        <expr><block>{<expr>"cmath"</expr>, <expr><name>initcmath</name></expr>}</block></expr>,
        <expr><block>{<expr>"errno"</expr>, <expr><name>initerrno</name></expr>}</block></expr>,
<comment type="line">//        {"imageop", initimageop},</comment>
        <expr><block>{<expr>"math"</expr>, <expr><name>initmath</name></expr>}</block></expr>,
        <expr><block>{<expr>"md5"</expr>, <expr><name>initmd5</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__WATCOMC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr><block>{<expr>"nt"</expr>, <expr><name>initnt</name></expr>}</block></expr>, <comment type="block">/* Use the NT os functions, not posix */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PYOS_OS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr><block>{<expr>"os2"</expr>, <expr><name>initos2</name></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr><block>{<expr>"posix"</expr>, <expr><name>initposix</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr><block>{<expr>"operator"</expr>, <expr><name>initoperator</name></expr>}</block></expr>,
<comment type="line">//        {"rgbimg", initrgbimg},</comment>
        <expr><block>{<expr>"signal"</expr>, <expr><name>initsignal</name></expr>}</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SOCKET</name></cpp:ifdef>
        <expr><block>{<expr>"_socket"</expr>, <expr><name>init_socket</name></expr>}</block></expr>,
        <expr><block>{<expr>"select"</expr>, <expr><name>initselect</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr><block>{<expr>"strop"</expr>, <expr><name>initstrop</name></expr>}</block></expr>,
        <expr><block>{<expr>"struct"</expr>, <expr><name>initstruct</name></expr>}</block></expr>,
        <expr><block>{<expr>"time"</expr>, <expr><name>inittime</name></expr>}</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WITH_THREAD</name></cpp:ifdef>
        <expr><block>{<expr>"thread"</expr>, <expr><name>initthread</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr><block>{<expr>"cStringIO"</expr>, <expr><name>initcStringIO</name></expr>}</block></expr>,
        <expr><block>{<expr>"cPickle"</expr>, <expr><name>initcPickle</name></expr>}</block></expr>,
        <expr><block>{<expr>"pcre"</expr>, <expr><name>initpcre</name></expr>}</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
        <expr><block>{<expr>"msvcrt"</expr>, <expr><name>initmsvcrt</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* -- ADDMODULE MARKER 2 -- */</comment>

        <comment type="block">/* This module "lives in" with marshal.c */</comment>
        <expr><block>{<expr>"marshal"</expr>, <expr><name>PyMarshal_Init</name></expr>}</block></expr>,

        <comment type="block">/* This lives it with import.c */</comment>
        <expr><block>{<expr>"imp"</expr>, <expr><name>initimp</name></expr>}</block></expr>,

        <comment type="block">/* These entries are here for sys.builtin_module_names */</comment>
        <expr><block>{<expr>"__main__"</expr>, <expr><name>NULL</name></expr>}</block></expr>,
        <expr><block>{<expr>"__builtin__"</expr>, <expr><name>NULL</name></expr>}</block></expr>,
        <expr><block>{<expr>"sys"</expr>, <expr><name>NULL</name></expr>}</block></expr>,

        <comment type="block">/* Sentinel */</comment>
        <expr><block>{<expr>0</expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
