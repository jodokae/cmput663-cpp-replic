<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/PC/os2vacpp/pyconfig.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_CONFIG_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_CONFIG_H</name></cpp:macro></cpp:define>

<comment type="block">/**********************************************************************
 * pyconfig.h.  NOT Generated automatically by configure.
 *
 * This is a manually maintained version used for the IBM VisualAge
 * C/C++ compiler on the OS/2 platform.  It is a standard part of
 * the Python distribution.
 *
 * FILESYSTEM DEFINES:
 * The code specific to a particular way of naming files and
 * directory paths should be wrapped around one of the following
 * #defines:
 *
 *     DOSFILESYS   PCDOS-Style (for PCDOS, Windows and OS/2)
 *     MACFILESYS   Macintosh-Style
 *     UNIXFILESYS  Unix-Style
 *     AMIGAFILESYS AmigaDOS-Style
 * 
 * Because of the different compilers and operating systems in
 * use on the Intel platform, neither the compiler name nor
 * the operating system name is sufficient.
 *
 * OS/2 DEFINES:
 * The code specific to OS/2's Program API should be wrapped around
 *
 * __TOS_OS2__   Target Operating System, OS/2
 *
 * Any code specific to the compiler itself should be wrapped with
 *
 * __IBMC__      IBM C Compiler
 * __IBMCPP__    IBM C++ Compiler
 *
 * Note that since the VisualAge C/C++ compiler is also available
 * for the Windows platform, it may be necessary to use both a
 * __TOS_OS2__ and a __IBMC__ to select a very specific environment.
 *
 **********************************************************************/</comment>

<comment type="block">/*
 * Some systems require special declarations for data items imported
 * or exported from dynamic link libraries.  Note that the definition
 * of DL_IMPORT covers both cases.  Define USE_DL_IMPORT for the client
 * of a DLL.  Define USE_DL_EXPORT when making a DLL.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Configuration Options for Finding Modules */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX</name></cpp:macro>                 <cpp:value>""</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXEC_PREFIX</name></cpp:macro>            <cpp:value>""</cpp:value></cpp:define>

<comment type="block">/* Provide a default library so writers of extension modules
 * won't have to explicitly specify it anymore
 */</comment>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> library("Python24.lib")</cpp:pragma>

<comment type="block">/***************************************************/</comment>
<comment type="block">/*    32-Bit IBM VisualAge C/C++ v3.0 for OS/2     */</comment>
<comment type="block">/*  (Convert Compiler Flags into Useful Switches)  */</comment>
<comment type="block">/***************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM</name></cpp:macro>    <cpp:value>"os2"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER</name></cpp:macro>    <cpp:value>"[VisualAge C/C++]"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYOS_OS2</name></cpp:macro></cpp:define>    <comment type="block">/* Define Indicator of Operating System */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYCC_VACPP</name></cpp:macro></cpp:define>  <comment type="block">/* Define Indicator of C Compiler */</comment>

  <comment type="block">/* Platform Filesystem */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYTHONPATH</name></cpp:macro>  <cpp:value>".;.\\lib;.\\lib\\plat-win;.\\lib\\lib-tk"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOSFILESYS</name></cpp:macro></cpp:define>  <comment type="block">/* OS/2 Uses the DOS File Naming Conventions */</comment>
<comment type="block">/* #define IMPORT_8x3_NAMES (let's move up to long filenames) */</comment>

  <comment type="block">/* Platform CPU-Mode Dependencies */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORD_BIT</name></cpp:macro>                <cpp:value>32</cpp:value></cpp:define> <comment type="block">/* OS/2 is a 32-Bit Operating System */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_BIT</name></cpp:macro>                <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_INT</name></cpp:macro>               <cpp:value>4</cpp:value></cpp:define> <comment type="block">/* Count of Bytes in an (int)            */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_LONG</name></cpp:macro>              <cpp:value>4</cpp:value></cpp:define> <comment type="block">/* Count of Bytes in a (long)            */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_VOID_P</name></cpp:macro>            <cpp:value>4</cpp:value></cpp:define> <comment type="block">/* Count of Bytes in a (void *)          */</comment>
<comment type="block">/* #define HAVE_LONG_LONG     1 */</comment> <comment type="block">/* VAC++ does not support (long long)    */</comment>
<comment type="block">/* #define SIZEOF_LONG_LONG   8 */</comment> <comment type="block">/* Count of Bytes in a (long long)       */</comment>

<comment type="block">/* unicode definines */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_USING_UNICODE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_UNICODE_TYPE</name></cpp:macro>    <cpp:value>wchar_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_SIZE</name></cpp:macro> <cpp:value>SIZEOF_SHORT</cpp:value></cpp:define>

<comment type="block">/* dynamic loading */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DYNAMIC_LOADING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define if type char is unsigned and you are not using gcc.  */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__CHAR_UNSIGNED__</name></cpp:ifndef>
<comment type="block">/* #undef __CHAR_UNSIGNED__ */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>int</name></type> <name>mode_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>uid_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>gid_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>pid_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MULTI__</name></expr></argument>)</argument_list></call></expr></cpp:if>     <comment type="block">/* If Compiler /Gt+ Multithread Option Enabled,  */</comment>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITH_THREAD</name></cpp:macro>            <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* Enable Threading Throughout Python    */</comment>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS2_THREADS</name></cpp:macro>            <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* And Use the OS/2 Flavor of Threads    */</comment>
<comment type="block">/* #define _REENTRANT 1 */</comment> <comment type="block">/* Use thread-safe errno, h_errno, and other fns */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Compiler Runtime Library Capabilities */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;direct.h&gt;</cpp:file></cpp:include>
<comment type="block">/* #undef BAD_STATIC_FORWARD */</comment> <comment type="block">/* if compiler botches static fwd decls */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDC_HEADERS</name></cpp:macro>             <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* VAC++ is an ANSI C Compiler           */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_HYPOT</name></cpp:macro>               <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* hypot()                               */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PUTENV</name></cpp:macro>              <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* putenv()                              */</comment>
<comment type="block">/* #define VA_LIST_IS_ARRAY   1 */</comment> <comment type="block">/* if va_list is an array of some kind   */</comment>
<comment type="block">/* #define HAVE_CONIO_H       1 */</comment> <comment type="block">/* #include &lt;conio.h&gt;                    */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_ERRNO_H</name></cpp:macro>             <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* #include &lt;errno.h&gt;                    */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SYS_STAT_H</name></cpp:macro>          <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* #include &lt;sys/stat.h&gt;                 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SYS_TYPES_H</name></cpp:macro>         <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* #include &lt;sys/types.h&gt;                */</comment>

  <comment type="block">/* Variable-Arguments/Prototypes */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PROTOTYPES</name></cpp:macro>          <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* VAC++ supports C Function Prototypes  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_STDARG_PROTOTYPES</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* Our &lt;stdarg.h&gt; has prototypes         */</comment>

  <comment type="block">/* String/Memory/Locale Operations */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MEMMOVE</name></cpp:macro>             <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* memmove()                             */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_STRERROR</name></cpp:macro>            <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* strerror()                            */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SETLOCALE</name></cpp:macro>           <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* setlocale()                           */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_ZERO_RETURNS_NULL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* Our malloc(0) returns a NULL ptr      */</comment>

  <comment type="block">/* Signal Handling */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SIGNAL_H</name></cpp:macro>            <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* signal.h                              */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETSIGTYPE</name></cpp:macro>            <cpp:value>void</cpp:value></cpp:define> <comment type="block">/* Return type of handlers (int or void) */</comment>
<comment type="block">/* #undef WANT_SIGFPE_HANDLER   */</comment> <comment type="block">/* Handle SIGFPE (see Include/pyfpe.h)   */</comment>
<comment type="block">/* #define HAVE_ALARM         1 */</comment> <comment type="block">/* alarm()                               */</comment>
<comment type="block">/* #define HAVE_SIGINTERRUPT  1 */</comment> <comment type="block">/* siginterrupt()                        */</comment>
<comment type="block">/* #define HAVE_SIGRELSE      1 */</comment> <comment type="block">/* sigrelse()                            */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DONT_HAVE_SIG_ALARM</name></cpp:macro>      <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DONT_HAVE_SIG_PAUSE</name></cpp:macro>      <cpp:value>1</cpp:value></cpp:define>

  <comment type="block">/* Clock/Time Support */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_FTIME</name></cpp:macro>               <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* We have ftime() in &lt;sys/timeb.h&gt;      */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_CLOCK</name></cpp:macro>               <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* clock()                               */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_STRFTIME</name></cpp:macro>            <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* strftime()                            */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MKTIME</name></cpp:macro>              <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* mktime()                              */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TZNAME</name></cpp:macro>              <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* No tm_zone but do have tzname[]       */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TIMES</name></cpp:macro>               <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* #include &lt;sys/times.h&gt;                */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SYS_UTIME_H</name></cpp:macro>         <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* #include &lt;sys/utime.h&gt;                */</comment>
<comment type="block">/* #define HAVE_UTIME_H       1 */</comment> <comment type="block">/* #include &lt;utime.h&gt;                    */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SYS_TIME_H</name></cpp:macro>          <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* #include &lt;sys/time.h&gt;                 */</comment>
<comment type="block">/* #define TM_IN_SYS_TIME     1 */</comment> <comment type="block">/* &lt;sys/time.h&gt; declares struct tm       */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GETTIMEOFDAY</name></cpp:macro>        <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* gettimeofday()                        */</comment>
<comment type="block">/* #define GETTIMEOFDAY_NO_TZ 1 */</comment> <comment type="block">/* gettimeofday() does not have 2nd arg  */</comment>
<comment type="block">/* #define HAVE_TIMEGM        1 */</comment> <comment type="block">/* timegm()                              */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_WITH_SYS_TIME</name></cpp:macro>       <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* Mix &lt;sys/time.h&gt; and &lt;time.h&gt;         */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYS_SELECT_WITH_SYS_TIME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* Mix &lt;sys/select.h&gt; and &lt;sys/time.h&gt;   */</comment>
<comment type="block">/* #define HAVE_ALTZONE       1 */</comment> <comment type="block">/* if &lt;time.h&gt; defines altzone           */</comment>

  <comment type="block">/* Network/Sockets Support */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SYS_SELECT_H</name></cpp:macro>       <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* #include &lt;sys/select.h&gt;                */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSD_SELECT</name></cpp:macro>              <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* Use BSD versus OS/2 form of select()   */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SELECT</name></cpp:macro>             <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* select()                               */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GETPEERNAME</name></cpp:macro>        <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* getpeername()                          */</comment>
<comment type="block">/* #undef HAVE_GETHOSTNAME_R 1 */</comment> <comment type="block">/* gethostname_r()                        */</comment>

  <comment type="block">/* File I/O */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DUP2</name></cpp:macro>                <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* dup2()                                */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_EXECV</name></cpp:macro>               <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* execv()                               */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SETVBUF</name></cpp:macro>             <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* setvbuf()                             */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GETCWD</name></cpp:macro>              <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* getcwd()                              */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PIPE</name></cpp:macro>                <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* pipe()     [OS/2-specific code added] */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_IO_H</name></cpp:macro>                <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* #include &lt;io.h&gt;                       */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_FCNTL_H</name></cpp:macro>             <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* #include &lt;fcntl.h&gt;                    */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DIRECT_H</name></cpp:macro>            <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* #include &lt;direct.h&gt;                   */</comment>
<comment type="block">/* #define HAVE_FLOCK         1 */</comment> <comment type="block">/* flock()                               */</comment>
<comment type="block">/* #define HAVE_TRUNCATE      1 */</comment> <comment type="block">/* truncate()                            */</comment>
<comment type="block">/* #define HAVE_FTRUNCATE     1 */</comment> <comment type="block">/* ftruncate()                           */</comment>
<comment type="block">/* #define HAVE_LSTAT         1 */</comment> <comment type="block">/* lstat()                               */</comment>
<comment type="block">/* #define HAVE_DIRENT_H      1 */</comment> <comment type="block">/* #include &lt;dirent.h&gt;                   */</comment>
<comment type="block">/* #define HAVE_OPENDIR       1 */</comment> <comment type="block">/* opendir()                             */</comment>

  <comment type="block">/* Process Operations */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PROCESS_H</name></cpp:macro>           <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* #include &lt;process.h&gt;                  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GETPID</name></cpp:macro>              <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* getpid()                              */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SYSTEM</name></cpp:macro>              <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* system()                              */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_WAIT</name></cpp:macro>                <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* wait()                                */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_KILL</name></cpp:macro>                <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* kill()     [OS/2-specific code added] */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_POPEN</name></cpp:macro>               <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* popen()    [OS/2-specific code added] */</comment>
<comment type="block">/* #define HAVE_GETPPID       1 */</comment> <comment type="block">/* getppid()                             */</comment>
<comment type="block">/* #define HAVE_WAITPID       1 */</comment> <comment type="block">/* waitpid()                             */</comment>
<comment type="block">/* #define HAVE_FORK          1 */</comment> <comment type="block">/* fork()                                */</comment>

  <comment type="block">/* User/Group ID Queries */</comment>
<comment type="block">/* #define HAVE_GETEGID       1 */</comment>
<comment type="block">/* #define HAVE_GETEUID       1 */</comment>
<comment type="block">/* #define HAVE_GETGID        1 */</comment>
<comment type="block">/* #define HAVE_GETUID        1 */</comment>

  <comment type="block">/* Unix-Specific */</comment>
<comment type="block">/* #define HAVE_SYS_UN_H            1 /* #include &lt;sys/un.h&gt;                   */</comment>
<comment type="block">/* #define HAVE_SYS_UTSNAME_H 1 */</comment> <comment type="block">/* #include &lt;sys/utsname.h&gt;              */</comment>
<comment type="block">/* #define HAVE_SYS_WAIT_H    1 */</comment> <comment type="block">/* #include &lt;sys/wait.h&gt;                 */</comment>
<comment type="block">/* #define HAVE_UNISTD_H      1 */</comment> <comment type="block">/* #include &lt;unistd.h&gt;                   */</comment>
<comment type="block">/* #define HAVE_UNAME         1 */</comment> <comment type="block">/* uname ()                              */</comment>

<comment type="block">/* Define if you want documentation strings in extension modules */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITH_DOC_STRINGS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_DL_EXPORT</name></cpp:ifdef>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_IMPORT</name><parameter_list>(<param><type><name>RTYPE</name></type></param>)</parameter_list></cpp:macro> <cpp:value>RTYPE _System</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_CONFIG_H */</comment>

</unit>
