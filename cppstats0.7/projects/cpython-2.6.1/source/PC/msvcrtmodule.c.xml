<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/PC/msvcrtmodule.c"><comment type="block">/*********************************************************

	msvcrtmodule.c

	A Python interface to the Microsoft Visual C Runtime
	Library, providing access to those non-portable, but
	still useful routines.

	Only ever compiled with an MS compiler, so no attempt
	has been made to avoid MS language extensions, etc...

	This may only work on NT or 95...

	Author: Mark Hammond and Guido van Rossum.
	Maintenance: Guido van Rossum.

***********************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"malloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;conio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/locking.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> &gt;= 1500</expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crtassem.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// Force the malloc heap to clean itself up, and free unused blocks</comment>
<comment type="line">// back to the OS.  (According to the docs, only works on NT.)</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>msvcrt_heapmin</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":heapmin"</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><call><name>_heapmin</name><argument_list>()</argument_list></call> != 0</expr>)</condition><then>
		<return>return <expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>PyExc_IOError</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<comment type="line">// Perform locking operations on a C runtime file descriptor.</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>msvcrt_locking</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>nbytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iil:locking"</expr></argument>, <argument><expr>&amp;<name>fd</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>, <argument><expr>&amp;<name>nbytes</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
	<name>err</name> <init>= <expr><call><name>_locking</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<macro><name>Py_END_ALLOW_THREADS</name></macro>
	<if>if <condition>(<expr><name>err</name> != 0</expr>)</condition><then>
		<return>return <expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>PyExc_IOError</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<comment type="line">// Set the file translation mode for a C runtime file descriptor.</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>msvcrt_setmode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ii:setmode"</expr></argument>, <argument><expr>&amp;<name>fd</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>flags</name> = <call><name>_setmode</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>flags</name> == -1</expr>)</condition><then>
		<return>return <expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>PyExc_IOError</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">// Convert an OS file handle to a C runtime file descriptor.</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>msvcrt_open_osfhandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>handle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"li:open_osfhandle"</expr></argument>, <argument><expr>&amp;<name>handle</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>fd</name> = <call><name>_open_osfhandle</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>fd</name> == -1</expr>)</condition><then>
		<return>return <expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>PyExc_IOError</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">// Convert a C runtime file descriptor to an OS file handle.</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>msvcrt_get_osfhandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Py_intptr_t</name></type> <name>handle</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i:get_osfhandle"</expr></argument>, <argument><expr>&amp;<name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>handle</name> = <call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>handle</name> == -1</expr>)</condition><then>
		<return>return <expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>PyExc_IOError</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

	<comment type="block">/* technically 'handle' is not a pointer, but a integer as
	   large as a pointer, Python's *VoidPtr interface is the
	   most appropriate here */</comment>
	<return>return <expr><call><name>PyLong_FromVoidPtr</name><argument_list>(<argument><expr>(<name>void</name>*)<name>handle</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Console I/O */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>msvcrt_kbhit</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":kbhit"</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>ok</name> = <call><name>_kbhit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>msvcrt_getch</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":getch"</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
	<name>ch</name> <init>= <expr><call><name>_getch</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Py_END_ALLOW_THREADS</name></type>
	<name><name>s</name><index>[<expr>0</expr>]</index></name> <init>= <expr><name>ch</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WCONIO_DEFINED</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>msvcrt_getwch</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Py_UNICODE</name></type> <name><name>u</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":getwch"</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
	<name>ch</name> <init>= <expr><call><name>_getwch</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Py_END_ALLOW_THREADS</name></type>
	<name><name>u</name><index>[<expr>0</expr>]</index></name> <init>= <expr><name>ch</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>PyUnicode_FromUnicode</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>msvcrt_getche</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":getche"</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
	<name>ch</name> <init>= <expr><call><name>_getche</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Py_END_ALLOW_THREADS</name></type>
	<name><name>s</name><index>[<expr>0</expr>]</index></name> <init>= <expr><name>ch</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WCONIO_DEFINED</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>msvcrt_getwche</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Py_UNICODE</name></type> <name><name>s</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":getwche"</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
	<name>ch</name> <init>= <expr><call><name>_getwche</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Py_END_ALLOW_THREADS</name></type>
	<name><name>s</name><index>[<expr>0</expr>]</index></name> <init>= <expr><name>ch</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>PyUnicode_FromUnicode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>msvcrt_putch</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"c:putch"</expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><call><name>_putch</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WCONIO_DEFINED</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>msvcrt_putwch</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>Py_UNICODE</name> *</type><name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"u#:putwch"</expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><name>size</name> == 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
			<argument><expr>"Expected unicode string of length 1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>_putwch</name><argument_list>(<argument><expr>*<name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>

}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>msvcrt_ungetch</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"c:ungetch"</expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><call><name>_ungetch</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> == <name>EOF</name></expr>)</condition><then>
		<return>return <expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>PyExc_IOError</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WCONIO_DEFINED</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>msvcrt_ungetwch</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>ch</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"u:ungetwch"</expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><call><name>_ungetch</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> == <name>EOF</name></expr>)</condition><then>
		<return>return <expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>PyExc_IOError</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>insertint</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>d</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>int</name></type> <name>value</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<comment type="block">/* Don't bother reporting this error */</comment>
		<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else>else <block>{
		<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>


<comment type="block">/* List of functions exported by this module */</comment>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>msvcrt_functions</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"heapmin"</expr>,		<expr><name>msvcrt_heapmin</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"locking"</expr>,             <expr><name>msvcrt_locking</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"setmode"</expr>,		<expr><name>msvcrt_setmode</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"open_osfhandle"</expr>,	<expr><name>msvcrt_open_osfhandle</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_osfhandle"</expr>,	<expr><name>msvcrt_get_osfhandle</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"kbhit"</expr>,		<expr><name>msvcrt_kbhit</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"getch"</expr>,		<expr><name>msvcrt_getch</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"getche"</expr>,		<expr><name>msvcrt_getche</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"putch"</expr>,		<expr><name>msvcrt_putch</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"ungetch"</expr>,		<expr><name>msvcrt_ungetch</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WCONIO_DEFINED</name></cpp:ifdef>
	<expr><block>{<expr>"getwch"</expr>,		<expr><name>msvcrt_getwch</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"getwche"</expr>,		<expr><name>msvcrt_getwche</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"putwch"</expr>,		<expr><name>msvcrt_putwch</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"ungetwch"</expr>,		<expr><name>msvcrt_ungetwch</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><name>NULL</name></expr>,			<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>PyMODINIT_FUNC</name></type>
<name>initmsvcrt</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name> <init>= <expr><call><name>Py_InitModule</name><argument_list>(<argument><expr>"msvcrt"</expr></argument>, <argument><expr><name>msvcrt_functions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* constants for the locking() function's mode argument */</comment>
	<expr_stmt><expr><call><name>insertint</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"LK_LOCK"</expr></argument>, <argument><expr><name>_LK_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>insertint</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"LK_NBLCK"</expr></argument>, <argument><expr><name>_LK_NBLCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>insertint</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"LK_NBRLCK"</expr></argument>, <argument><expr><name>_LK_NBRLCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>insertint</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"LK_RLCK"</expr></argument>, <argument><expr><name>_LK_RLCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>insertint</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"LK_UNLCK"</expr></argument>, <argument><expr><name>_LK_UNLCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* constants for the crt versions */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_VC_ASSEMBLY_PUBLICKEYTOKEN</name></cpp:ifdef>
	<expr_stmt><expr><name>st</name> = <call><name>PyModule_AddStringConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"VC_ASSEMBLY_PUBLICKEYTOKEN"</expr></argument>,
					<argument><expr><name>_VC_ASSEMBLY_PUBLICKEYTOKEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>st</name> &lt; 0</expr>)</condition><then><return>return;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_CRT_ASSEMBLY_VERSION</name></cpp:ifdef>
	<expr_stmt><expr><name>st</name> = <call><name>PyModule_AddStringConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"CRT_ASSEMBLY_VERSION"</expr></argument>,
					<argument><expr><name>_CRT_ASSEMBLY_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>st</name> &lt; 0</expr>)</condition><then><return>return;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__LIBRARIES_ASSEMBLY_NAME_PREFIX</name></cpp:ifdef>
	<expr_stmt><expr><name>st</name> = <call><name>PyModule_AddStringConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LIBRARIES_ASSEMBLY_NAME_PREFIX"</expr></argument>,
					<argument><expr><name>__LIBRARIES_ASSEMBLY_NAME_PREFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>st</name> &lt; 0</expr>)</condition><then><return>return;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
</unit>
