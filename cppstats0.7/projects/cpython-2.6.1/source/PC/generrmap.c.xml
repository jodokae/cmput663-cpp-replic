<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/PC/generrmap.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Extract the mapping of Win32 error codes to errno */</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"/* Generated file. Do not edit. */\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"int winerror_to_errno(int winerror)\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"{\n\tswitch(winerror) {\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for(<init><expr><name>i</name>=1</expr>;</init> <condition><expr><name>i</name> &lt; 65000</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
		<expr_stmt><expr><call><name>_dosmaperr</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>errno</name> == <name>EINVAL</name></expr>)</condition><then>
			<continue>continue;</continue></then></if>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\t\tcase %d: return %d;\n"</expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\t\tdefault: return EINVAL;\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\t}\n}\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
