<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/PC/import_nt.c"><comment type="block">/********************************************************************

 import_nt.c 

  Win32 specific import code.

*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"osdefs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"importdl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"malloc.h"</cpp:file></cpp:include> <comment type="block">/* for alloca */</comment>

<comment type="block">/* a string loaded from the DLL at startup */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> *</type><name>PyWin_DLLVersionString</name></decl>;</decl_stmt>

<function><type><name>FILE</name> *</type><name>PyWin_FindRegisteredModule</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>moduleName</name></decl></param>,
				 <param><decl><type>struct <name>filedescr</name> **</type><name>ppFileDesc</name></decl></param>,
				 <param><decl><type><name>char</name> *</type><name>pathBuf</name></decl></param>,
				 <param><decl><type><name>Py_ssize_t</name></type> <name>pathLen</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>moduleKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>keyPrefix</name><index>[]</index></name> <init>= <expr>"Software\\Python\\PythonCore\\"</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>keySuffix</name><index>[]</index></name> <init>= <expr>"\\Modules\\"</expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_DEBUG</name></cpp:ifdef>
	<comment type="block">/* In debugging builds, we _must_ have the debug version
	 * registered.
	 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>debugString</name><index>[]</index></name> <init>= <expr>"\\Debug"</expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>debugString</name><index>[]</index></name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type>struct <name>filedescr</name> *</type><name>fdp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name> *</type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HKEY</name></type> <name>keyBase</name> <init>= <expr><name>HKEY_CURRENT_USER</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>modNameSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>regStat</name></decl>;</decl_stmt>

	<comment type="block">/* Calculate the size for the sprintf buffer.
	 * Get the size of the chars only, plus 1 NULL.
	 */</comment>
	<decl_stmt><decl><type><name>size_t</name></type> <name>bufSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>keyPrefix</name></expr></argument>)</argument_list></sizeof>-1 +
	                 <call><name>strlen</name><argument_list>(<argument><expr><name>PyWin_DLLVersionString</name></expr></argument>)</argument_list></call> +
	                 <sizeof>sizeof<argument_list>(<argument><expr><name>keySuffix</name></expr></argument>)</argument_list></sizeof> +
	                 <call><name>strlen</name><argument_list>(<argument><expr><name>moduleName</name></expr></argument>)</argument_list></call> +
	                 <sizeof>sizeof<argument_list>(<argument><expr><name>debugString</name></expr></argument>)</argument_list></sizeof> - 1</expr></init></decl>;</decl_stmt>
	<comment type="block">/* alloca == no free required, but memory only local to fn,
	 * also no heap fragmentation!
	 */</comment>
	<expr_stmt><expr><name>moduleKey</name> = <call><name>alloca</name><argument_list>(<argument><expr><name>bufSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>moduleKey</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>,
		      <argument><expr>"Software\\Python\\PythonCore\\%s\\Modules\\%s%s"</expr></argument>,
		      <argument><expr><name>PyWin_DLLVersionString</name></expr></argument>, <argument><expr><name>moduleName</name></expr></argument>, <argument><expr><name>debugString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pathLen</name> &lt; <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>modNameSize</name> = (<name>int</name>)<name>pathLen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>regStat</name> = <call><name>RegQueryValue</name><argument_list>(<argument><expr><name>keyBase</name></expr></argument>, <argument><expr><name>moduleKey</name></expr></argument>, <argument><expr><name>pathBuf</name></expr></argument>, <argument><expr>&amp;<name>modNameSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>regStat</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then> <block>{
		<comment type="block">/* No user setting - lookup in machine settings */</comment>
		<expr_stmt><expr><name>keyBase</name> = <name>HKEY_LOCAL_MACHINE</name></expr>;</expr_stmt>
		<comment type="block">/* be anal - failure may have reset size param */</comment>
		<expr_stmt><expr><name>modNameSize</name> = (<name>int</name>)<name>pathLen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>regStat</name> = <call><name>RegQueryValue</name><argument_list>(<argument><expr><name>keyBase</name></expr></argument>, <argument><expr><name>moduleKey</name></expr></argument>, 
		                        <argument><expr><name>pathBuf</name></expr></argument>, <argument><expr>&amp;<name>modNameSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><name>regStat</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
			<return>return <expr><name>NULL</name></expr>;</return></then></if>
	}</block></then></if>
	<comment type="block">/* use the file extension to locate the type entry. */</comment>
	<for>for (<init><expr><name>fdp</name> = <name>_PyImport_Filetab</name></expr>;</init> <condition><expr><name><name>fdp</name>-&gt;<name>suffix</name></name> != <name>NULL</name></expr>;</condition> <incr><expr><name>fdp</name>++</expr></incr>) <block>{
		<decl_stmt><decl><type><name>size_t</name></type> <name>extLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>fdp</name>-&gt;<name>suffix</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>modNameSize</name> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* else cast to size_t is wrong */</comment>
		<if>if <condition>(<expr>(<name>size_t</name>)<name>modNameSize</name> &gt; <name>extLen</name> &amp;&amp;
		    <call><name>strnicmp</name><argument_list>(<argument><expr><name>pathBuf</name> + ((<name>size_t</name>)<name>modNameSize</name>-<name>extLen</name>-1)</expr></argument>,
		             <argument><expr><name><name>fdp</name>-&gt;<name>suffix</name></name></expr></argument>,
		             <argument><expr><name>extLen</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
			<break>break;</break></then></if>
	}</block></for>
	<if>if <condition>(<expr><name><name>fdp</name>-&gt;<name>suffix</name></name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>fp</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>pathBuf</name></expr></argument>, <argument><expr><name><name>fdp</name>-&gt;<name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>fp</name> != <name>NULL</name></expr>)</condition><then>
		<expr_stmt><expr>*<name>ppFileDesc</name> = <name>fdp</name></expr>;</expr_stmt></then></if>
	<return>return <expr><name>fp</name></expr>;</return>
}</block></function>
</unit>
