<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/RISCOS/unixstuff.c"><comment type="block">/* Fudge unix isatty and fileno for RISCOS */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unixstuff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oslib/osfile.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>fileno</name><parameter_list>(<param><decl><type><name>FILE</name> *</type><name>f</name></decl></param>)</parameter_list>
<block>{ <return>return <expr>(<name>int</name>)<name>f</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>isatty</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fn</name></decl></param>)</parameter_list>
<block>{ <return>return <expr>(<name>fn</name>==<call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></function>

<function><type><name>bits</name></type> <name>unixtime</name><parameter_list>(<param><decl><type><name>bits</name></type> <name>ld</name></decl></param>,<param><decl><type><name>bits</name></type> <name>ex</name></decl></param>)</parameter_list>
<block>{ <expr_stmt><expr><name>ld</name>&amp;=0xFF</expr>;</expr_stmt>
  <expr_stmt><expr><name>ld</name>-=51</expr>;</expr_stmt>
  <if>if<condition>(<expr><name>ex</name>&lt;1855547904U</expr>)</condition><then> <expr_stmt><expr><name>ld</name>--</expr>;</expr_stmt></then></if>
  <expr_stmt><expr><name>ex</name>-=1855548004U</expr>;</expr_stmt>
  <return>return <expr><name>ex</name>/100+42949673U*<name>ld</name>-<name>ld</name>/25</expr>;</return>
}</block></function>


<comment type="block">/* from RISC OS infozip, preserves filetype in ld */</comment>
<function><type><name>int</name></type> <name>acorntime</name><parameter_list>(<param><decl><type><name>bits</name> *</type><name>ex</name></decl></param>, <param><decl><type><name>bits</name> *</type><name>ld</name></decl></param>, <param><decl><type><name>time_t</name></type> <name>utime</name></decl></param>)</parameter_list>
<block>{
   <decl_stmt><decl><type><name>unsigned</name></type> <name>timlo</name></decl>;</decl_stmt>      <comment type="block">/* 3 lower bytes of acorn file-time plus carry byte */</comment>
   <decl_stmt><decl><type><name>unsigned</name></type> <name>timhi</name></decl>;</decl_stmt>      <comment type="block">/* 2 high bytes of acorn file-time */</comment>

   <expr_stmt><expr><name>timlo</name> = ((<name>unsigned</name>)<name>utime</name> &amp; 0x00ffffffU) * 100 + 0x00996a00U</expr>;</expr_stmt>
   <expr_stmt><expr><name>timhi</name> = ((<name>unsigned</name>)<name>utime</name> &gt;&gt; 24)</expr>;</expr_stmt>
   <expr_stmt><expr><name>timhi</name> = <name>timhi</name> * 100 + 0x0000336eU + (<name>timlo</name> &gt;&gt; 24)</expr>;</expr_stmt>
   <if>if <condition>(<expr><name>timhi</name> &amp; 0xffff0000U</expr>)</condition><then>
       <return>return <expr>1</expr>;</return></then></if>        <comment type="block">/* calculation overflow, do not change time */</comment>

   <comment type="block">/* insert the five time bytes into loadaddr and execaddr variables */</comment>
   <expr_stmt><expr>*<name>ex</name> = (<name>timlo</name> &amp; 0x00ffffffU) | ((<name>timhi</name> &amp; 0x000000ffU) &lt;&lt; 24)</expr>;</expr_stmt>
   <expr_stmt><expr>*<name>ld</name> = (*<name>ld</name> &amp; 0xffffff00U)   | ((<name>timhi</name> &gt;&gt; 8) &amp; 0x000000ffU)</expr>;</expr_stmt>

   <return>return <expr>0</expr>;</return>            <comment type="block">/* subject to future extension to signal overflow */</comment>
}</block></function>


<function><type><name>int</name></type> <name>isdir</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>fn</name></decl></param>)</parameter_list>
<block>{ <decl_stmt><decl><type><name>int</name></type> <name>ob</name></decl>;</decl_stmt>
  <if>if<condition>(<expr><call><name>xosfile_read_stamped_no_path</name><argument_list>(<argument><expr><name>fn</name></expr></argument>,<argument><expr>&amp;<name>ob</name></expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
  <switch>switch <condition>(<expr><name>ob</name></expr>)</condition>
  <block>{   <case>case <expr><name>osfile_IS_DIR</name></expr>:<return>return <expr>1</expr>;</return>
    </case><case>case <expr><name>osfile_IS_IMAGE</name></expr>:<return>return <expr>1</expr>;</return>
  </case>}</block></switch>
  <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>isfile</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>fn</name></decl></param>)</parameter_list>
<block>{ <decl_stmt><decl><type><name>int</name></type> <name>ob</name></decl>;</decl_stmt>
  <if>if<condition>(<expr><call><name>xosfile_read_stamped_no_path</name><argument_list>(<argument><expr><name>fn</name></expr></argument>,<argument><expr>&amp;<name>ob</name></expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
  <switch>switch <condition>(<expr><name>ob</name></expr>)</condition>
  <block>{  <case>case <expr><name>osfile_IS_FILE</name></expr>:<return>return <expr>1</expr>;</return>
    </case><case>case <expr><name>osfile_IS_IMAGE</name></expr>:<return>return <expr>1</expr>;</return>
  </case>}</block></switch>
  <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>object_exists</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>fn</name></decl></param>)</parameter_list>
<block>{ <decl_stmt><decl><type><name>int</name></type> <name>ob</name></decl>;</decl_stmt>
  <if>if<condition>(<expr><call><name>xosfile_read_stamped_no_path</name><argument_list>(<argument><expr><name>fn</name></expr></argument>,<argument><expr>&amp;<name>ob</name></expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
  <switch>switch <condition>(<expr><name>ob</name></expr>)</condition>
  <block>{  <case>case <expr><name>osfile_IS_FILE</name></expr>:<return>return <expr>1</expr>;</return>
      </case><case>case <expr><name>osfile_IS_DIR</name></expr>:<return>return <expr>1</expr>;</return>
    </case><case>case <expr><name>osfile_IS_IMAGE</name></expr>:<return>return <expr>1</expr>;</return>
  </case>}</block></switch>
  <return>return <expr>0</expr>;</return>
}</block></function>
</unit>
