<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Doc/includes/shoddy.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Python.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>PyListObject</name></type> <name>list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>
}</block></struct></type> <name>Shoddy</name>;</typedef>


<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>Shoddy_increment</name><parameter_list>(<param><decl><type><name>Shoddy</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>self</name>-&gt;<name>state</name></name>++</expr>;</expr_stmt>
    <return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>state</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>Shoddy_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"increment"</expr>, <expr>(<name>PyCFunction</name>)<name>Shoddy_increment</name></expr>, <expr><name>METH_NOARGS</name></expr>,
     <macro><name>PyDoc_STR</name><argument_list>(<argument>"increment state counter"</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>,	<expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>Shoddy_init</name><parameter_list>(<param><decl><type><name>Shoddy</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><call><name><name>PyList_Type</name>.<name>tp_init</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
        <return>return <expr>-1</expr>;</return></then></if>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>state</name></name> = 0</expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>ShoddyType</name> <init>= <expr><block>{
    <expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
    0</expr>,                       <comment type="block">/* ob_size */</comment>
    <expr>"shoddy.Shoddy"</expr>,         <comment type="block">/* tp_name */</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Shoddy</name></expr></argument>)</argument_list></sizeof></expr>,          <comment type="block">/* tp_basicsize */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_itemsize */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_dealloc */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_print */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_getattr */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_setattr */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_compare */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_repr */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_as_number */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_as_sequence */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_as_mapping */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_hash */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_call */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_str */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_getattro */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_setattro */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_as_buffer */</comment>
    <expr><name>Py_TPFLAGS_DEFAULT</name> |
      <name>Py_TPFLAGS_BASETYPE</name></expr>,   <comment type="block">/* tp_flags */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_doc */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_traverse */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_clear */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_richcompare */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_weaklistoffset */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_iter */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_iternext */</comment>
    <expr><name>Shoddy_methods</name></expr>,          <comment type="block">/* tp_methods */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_members */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_getset */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_base */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_dict */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_descr_get */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_descr_set */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_dictoffset */</comment>
    <expr>(<name>initproc</name>)<name>Shoddy_init</name></expr>,   <comment type="block">/* tp_init */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_alloc */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_new */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>PyMODINIT_FUNC</name></type>
<name>initshoddy</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>ShoddyType</name>.<name>tp_base</name></name> = &amp;<name>PyList_Type</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>ShoddyType</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
        <return>return;</return></then></if>

    <expr_stmt><expr><name>m</name> = <call><name>Py_InitModule3</name><argument_list>(<argument><expr>"shoddy"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Shoddy module"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
        <return>return;</return></then></if>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>ShoddyType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"Shoddy"</expr></argument>, <argument><expr>(<name>PyObject</name> *) &amp;<name>ShoddyType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
