<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Doc/includes/noddy2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Python.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>
    <name>PyObject</name> *</type><name>first</name></decl>;</decl_stmt> <comment type="block">/* first name */</comment>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>last</name></decl>;</decl_stmt>  <comment type="block">/* last name */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>number</name></decl>;</decl_stmt>
}</block></struct></type> <name>Noddy</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>Noddy_dealloc</name><parameter_list>(<param><decl><type><name>Noddy</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr>(<name>PyObject</name>*)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>Noddy_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Noddy</name> *</type><name>self</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>self</name> = (<name>Noddy</name> *)<call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>self</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>self</name>-&gt;<name>first</name></name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>self</name>-&gt;<name>first</name></name> == <name>NULL</name></expr>)</condition><then>
          <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
          }</block></then></if>
        
        <expr_stmt><expr><name><name>self</name>-&gt;<name>last</name></name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>self</name>-&gt;<name>last</name></name> == <name>NULL</name></expr>)</condition><then>
          <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
          }</block></then></if>

        <expr_stmt><expr><name><name>self</name>-&gt;<name>number</name></name> = 0</expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr>(<name>PyObject</name> *)<name>self</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>Noddy_init</name><parameter_list>(<param><decl><type><name>Noddy</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>first</name><init>=<expr><name>NULL</name></expr></init>, *<name>last</name><init>=<expr><name>NULL</name></expr></init>, *<name>tmp</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr>"first"</expr>, <expr>"last"</expr>, <expr>"number"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>! <call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>, <argument><expr>"|OOi"</expr></argument>, <argument><expr><name>kwlist</name></expr></argument>, 
                                      <argument><expr>&amp;<name>first</name></expr></argument>, <argument><expr>&amp;<name>last</name></expr></argument>, 
                                      <argument><expr>&amp;<name><name>self</name>-&gt;<name>number</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr>-1</expr>;</return></then></if> 

    <if>if <condition>(<expr><name>first</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>tmp</name> = <name><name>self</name>-&gt;<name>first</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>first</name></name> = <name>first</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>last</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>tmp</name> = <name><name>self</name>-&gt;<name>last</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>last</name></name> = <name>last</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr>0</expr>;</return>
}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>Noddy_members</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"first"</expr>, <expr><name>T_OBJECT_EX</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>Noddy</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
     <expr>"first name"</expr>}</block></expr>,
    <expr><block>{<expr>"last"</expr>, <expr><name>T_OBJECT_EX</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>Noddy</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
     <expr>"last name"</expr>}</block></expr>,
    <expr><block>{<expr>"number"</expr>, <expr><name>T_INT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>Noddy</name></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
     <expr>"noddy number"</expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>  <comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>Noddy_name</name><parameter_list>(<param><decl><type><name>Noddy</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>format</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>, *<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>format</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>format</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>"%s %s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>format</name> == <name>NULL</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>first</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr>"first"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>last</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr>"last"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>args</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"OO"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>first</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>args</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>result</name> = <call><name>PyString_Format</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>Noddy_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"name"</expr>, <expr>(<name>PyCFunction</name>)<name>Noddy_name</name></expr>, <expr><name>METH_NOARGS</name></expr>,
     <expr>"Return the name, combining the first and last name"</expr>
    }</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>  <comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>NoddyType</name> <init>= <expr><block>{
    <expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
    0</expr>,                         <comment type="block">/*ob_size*/</comment>
    <expr>"noddy.Noddy"</expr>,             <comment type="block">/*tp_name*/</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Noddy</name></expr></argument>)</argument_list></sizeof></expr>,             <comment type="block">/*tp_basicsize*/</comment>
    <expr>0</expr>,                         <comment type="block">/*tp_itemsize*/</comment>
    <expr>(<name>destructor</name>)<name>Noddy_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
    <expr>0</expr>,                         <comment type="block">/*tp_print*/</comment>
    <expr>0</expr>,                         <comment type="block">/*tp_getattr*/</comment>
    <expr>0</expr>,                         <comment type="block">/*tp_setattr*/</comment>
    <expr>0</expr>,                         <comment type="block">/*tp_compare*/</comment>
    <expr>0</expr>,                         <comment type="block">/*tp_repr*/</comment>
    <expr>0</expr>,                         <comment type="block">/*tp_as_number*/</comment>
    <expr>0</expr>,                         <comment type="block">/*tp_as_sequence*/</comment>
    <expr>0</expr>,                         <comment type="block">/*tp_as_mapping*/</comment>
    <expr>0</expr>,                         <comment type="block">/*tp_hash */</comment>
    <expr>0</expr>,                         <comment type="block">/*tp_call*/</comment>
    <expr>0</expr>,                         <comment type="block">/*tp_str*/</comment>
    <expr>0</expr>,                         <comment type="block">/*tp_getattro*/</comment>
    <expr>0</expr>,                         <comment type="block">/*tp_setattro*/</comment>
    <expr>0</expr>,                         <comment type="block">/*tp_as_buffer*/</comment>
    <expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/*tp_flags*/</comment>
    <expr>"Noddy objects"</expr>,           <comment type="block">/* tp_doc */</comment>
    <expr>0</expr>,		               <comment type="block">/* tp_traverse */</comment>
    <expr>0</expr>,		               <comment type="block">/* tp_clear */</comment>
    <expr>0</expr>,		               <comment type="block">/* tp_richcompare */</comment>
    <expr>0</expr>,		               <comment type="block">/* tp_weaklistoffset */</comment>
    <expr>0</expr>,		               <comment type="block">/* tp_iter */</comment>
    <expr>0</expr>,		               <comment type="block">/* tp_iternext */</comment>
    <expr><name>Noddy_methods</name></expr>,             <comment type="block">/* tp_methods */</comment>
    <expr><name>Noddy_members</name></expr>,             <comment type="block">/* tp_members */</comment>
    <expr>0</expr>,                         <comment type="block">/* tp_getset */</comment>
    <expr>0</expr>,                         <comment type="block">/* tp_base */</comment>
    <expr>0</expr>,                         <comment type="block">/* tp_dict */</comment>
    <expr>0</expr>,                         <comment type="block">/* tp_descr_get */</comment>
    <expr>0</expr>,                         <comment type="block">/* tp_descr_set */</comment>
    <expr>0</expr>,                         <comment type="block">/* tp_dictoffset */</comment>
    <expr>(<name>initproc</name>)<name>Noddy_init</name></expr>,      <comment type="block">/* tp_init */</comment>
    <expr>0</expr>,                         <comment type="block">/* tp_alloc */</comment>
    <expr><name>Noddy_new</name></expr>,                 <comment type="block">/* tp_new */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>module_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>  <comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PyMODINIT_FUNC</name></cpp:ifndef>	<comment type="block">/* declarations for DLL import/export */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMODINIT_FUNC</name></cpp:macro> <cpp:value>void</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>PyMODINIT_FUNC</name></type>
<name>initnoddy2</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>m</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>NoddyType</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
        <return>return;</return></then></if>

    <expr_stmt><expr><name>m</name> = <call><name>Py_InitModule3</name><argument_list>(<argument><expr>"noddy2"</expr></argument>, <argument><expr><name>module_methods</name></expr></argument>,
                       <argument><expr>"Example module that creates an extension type."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
      <return>return;</return></then></if>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>NoddyType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"Noddy"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>NoddyType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
