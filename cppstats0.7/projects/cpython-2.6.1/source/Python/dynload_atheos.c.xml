<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Python/dynload_atheos.c">
<comment type="block">/* Support for dynamic loading of extension modules */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atheos/image.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"importdl.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>const</specifier> struct <name>filedescr</name></type> <name><name>_PyImport_DynLoadFiletab</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>".so"</expr>, <expr>"rb"</expr>, <expr><name>C_EXTENSION</name></expr>}</block></expr>,
	<expr><block>{<expr>"module.so"</expr>, <expr>"rb"</expr>, <expr><name>C_EXTENSION</name></expr>}</block></expr>,
	<expr><block>{<expr>0</expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>dl_funcptr</name></type> <name>_PyImport_GetDynLoadFunc</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fqname</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>shortname</name></decl></param>,
				    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pathname</name></decl></param>, <param><decl><type><name>FILE</name> *</type><name>fp</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>void</name> *</type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>lib</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>funcname</name><index>[<expr>258</expr>]</index></name></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>Py_VerboseFlag</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"load_library %s\n"</expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<expr_stmt><expr><name>lib</name> = <call><name>load_library</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>lib</name> &lt; 0</expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>512</expr>]</index></name></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>Py_VerboseFlag</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"Failed to load %.200s: %.200s"</expr></argument>,
			      <argument><expr><name>pathname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ImportError</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>funcname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"init%.200s"</expr></argument>, <argument><expr><name>shortname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>Py_VerboseFlag</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"get_symbol_address %s\n"</expr></argument>, <argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if>if <condition>(<expr><call><name>get_symbol_address</name><argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>&amp;<name>p</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><name>p</name> = <name>NULL</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>Py_VerboseFlag</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></then></if>

	<return>return <expr>(<name>dl_funcptr</name>) <name>p</name></expr>;</return>
}</block></function>
</unit>
