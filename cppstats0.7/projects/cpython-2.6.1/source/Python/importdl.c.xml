<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Python/importdl.c">
<comment type="block">/* Support for dynamic loading of extension modules */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>

<comment type="block">/* ./configure sets HAVE_DYNAMIC_LOADING if dynamic loading of modules is
   supported on this platform. configure will then compile and link in one
   of the dynload_*.c files, as appropriate. We will call a function in
   those modules to get a function pointer to the module's init function.
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DYNAMIC_LOADING</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"importdl.h"</cpp:file></cpp:include>

<function_decl><type><specifier>extern</specifier> <name>dl_funcptr</name></type> <name>_PyImport_GetDynLoadFunc</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
					   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>shortname</name></decl></param>,
					   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pathname</name></decl></param>, <param><decl><type><name>FILE</name> *</type><name>fp</name></decl></param>)</parameter_list>;</function_decl>



<function><type><name>PyObject</name> *</type>
<name>_PyImport_LoadDynamicModule</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>char</name> *</type><name>pathname</name></decl></param>, <param><decl><type><name>FILE</name> *</type><name>fp</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>lastdot</name></decl>, *<decl><type ref="prev"/><name>shortname</name></decl>, *<decl><type ref="prev"/><name>packagecontext</name></decl>, *<decl><type ref="prev"/><name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>dl_funcptr</name></type> <name>p</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>(<name>m</name> = <call><name>_PyImport_FindExtension</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>m</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>lastdot</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>lastdot</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>packagecontext</name> = <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>shortname</name> = <name>name</name></expr>;</expr_stmt>
	}</block></then>
	<else>else <block>{
		<expr_stmt><expr><name>packagecontext</name> = <name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>shortname</name> = <name>lastdot</name>+1</expr>;</expr_stmt>
	}</block></else></if>

	<expr_stmt><expr><name>p</name> = <call><name>_PyImport_GetDynLoadFunc</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>shortname</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ImportError</name></expr></argument>,
		   <argument><expr>"dynamic module does not define init function (init%.200s)"</expr></argument>,
			     <argument><expr><name>shortname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
        <expr_stmt><expr><name>oldcontext</name> = <name>_Py_PackageContext</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_Py_PackageContext</name> = <name>packagecontext</name></expr>;</expr_stmt>
	<expr_stmt><expr><call>(*<name>p</name>)<argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_Py_PackageContext</name> = <name>oldcontext</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>m</name> = <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><call><name>PyImport_GetModuleDict</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_SystemError</name></expr></argument>,
				<argument><expr>"dynamic module not initialized properly"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<comment type="block">/* Remember the filename as the __file__ attribute */</comment>
	<if>if <condition>(<expr><call><name>PyModule_AddStringConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"__file__"</expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if> <comment type="block">/* Not important enough to report */</comment>

	<if>if <condition>(<expr><call><name>_PyImport_FixupExtension</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr><name>Py_VerboseFlag</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>PySys_WriteStderr</name><argument_list>(
			<argument><expr>"import %s # dynamically loaded from %s\n"</expr></argument>,
			<argument><expr><name>name</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>m</name></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_DYNAMIC_LOADING */</comment>
</unit>
