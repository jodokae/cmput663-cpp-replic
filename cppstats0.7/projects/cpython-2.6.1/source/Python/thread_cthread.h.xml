<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Python/thread_cthread.h">
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MACH_C_THREADS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/cthreads.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HURD_C_THREADS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cthreads.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Initialization.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PyThread__init_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HURD_C_THREADS</name></cpp:ifndef>
	<comment type="block">/* Roland McGrath said this should not be used since this is
	done while linking to threads */</comment>
	<expr_stmt><expr><call><name>cthread_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/* do nothing */</comment>
	<empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<comment type="block">/*
 * Thread support.
 */</comment>
<function><type><name>long</name></type>
<name>PyThread_start_new_thread</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>success</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>	<comment type="block">/* init not needed when SOLARIS_THREADS and */</comment>
				<comment type="block">/* C_THREADS implemented properly */</comment>

	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_start_new_thread called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>PyThread_init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
	<comment type="block">/* looks like solaris detaches the thread to never rejoin
	 * so well do it here
	 */</comment>
	<expr_stmt><expr><call><name>cthread_detach</name><argument_list>(<argument><expr><call><name>cthread_fork</name><argument_list>(<argument><expr>(<name>cthread_fn_t</name>) <name>func</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>success</name> &lt; 0 ? -1 : 0</expr>;</return>
}</block></function>

<function><type><name>long</name></type>
<name>PyThread_get_thread_ident</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>PyThread_init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
	<return>return <expr>(<name>long</name>) <call><name>cthread_self</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_PyThread_exit_thread</name><parameter_list>(<param><decl><type><name>int</name></type> <name>no_cleanup</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_exit_thread called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
		<if>if <condition>(<expr><name>no_cleanup</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else>else
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></then></if>
	<expr_stmt><expr><call><name>cthread_exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>PyThread_exit_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>do_PyThread_exit_thread</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>PyThread__exit_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>do_PyThread_exit_thread</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_EXIT_PROG</name></cpp:ifndef>
<function><type><specifier>static</specifier>
<name>void</name></type> <name>do_PyThread_exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>, <param><decl><type><name>int</name></type> <name>no_cleanup</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_exit_prog(%d) called\n", <name>status</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
		<if>if <condition>(<expr><name>no_cleanup</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else>else
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></then></if>
	<if>if <condition>(<expr><name>no_cleanup</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else>else
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></function>

<function><type><name>void</name></type>
<name>PyThread_exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>do_PyThread_exit_prog</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>PyThread__exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>do_PyThread_exit_prog</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NO_EXIT_PROG */</comment>

<comment type="block">/*
 * Lock support.
 */</comment>
<function><type><name>PyThread_type_lock</name></type>
<name>PyThread_allocate_lock</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_allocate_lock called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>PyThread_init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

	<expr_stmt><expr><name>lock</name> = <call><name>mutex_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>mutex_init</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"mutex_init"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr>(<name>void</name> *) <name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>lock</name> = 0</expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_allocate_lock() -&gt; %p\n", <name>lock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>(<name>PyThread_type_lock</name>) <name>lock</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name>PyThread_free_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>lock</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_free_lock(%p) called\n", <name>lock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mutex_free</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type>
<name>PyThread_acquire_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>lock</name></decl></param>, <param><decl><type><name>int</name></type> <name>waitflag</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>success</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_acquire_lock(%p, %d) called\n", <name>lock</name>, <name>waitflag</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>waitflag</name></expr>)</condition><then> <block>{ 	<comment type="block">/* blocking */</comment>
		<expr_stmt><expr><call><name>mutex_lock</name><argument_list>(<argument><expr>(<name>mutex_t</name>)<name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>success</name> = <name>TRUE</name></expr>;</expr_stmt>
	}</block></then> <else>else <block>{		<comment type="block">/* non blocking */</comment>
		<expr_stmt><expr><name>success</name> = <call><name>mutex_try_lock</name><argument_list>(<argument><expr>(<name>mutex_t</name>)<name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_acquire_lock(%p, %d) -&gt; %d\n", <name>lock</name>, <name>waitflag</name>, <name>success</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>success</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name>PyThread_release_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>lock</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_release_lock(%p) called\n", <name>lock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mutex_unlock</name><argument_list>(<argument><expr>(<name>mutex_t</name> )<name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
