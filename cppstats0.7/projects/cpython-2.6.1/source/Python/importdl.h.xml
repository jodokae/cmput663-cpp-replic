<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Python/importdl.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_IMPORTDL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_IMPORTDL_H</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* Definitions for dynamic loading of extension modules */</comment>
<enum>enum <name>filetype</name> <block>{
	<decl><name>SEARCH_ERROR</name></decl>,
	<decl><name>PY_SOURCE</name></decl>,
	<decl><name>PY_COMPILED</name></decl>,
	<decl><name>C_EXTENSION</name></decl>,
	<decl><name>PY_RESOURCE</name></decl>, <comment type="block">/* Mac only */</comment>
	<decl><name>PKG_DIRECTORY</name></decl>,
	<decl><name>C_BUILTIN</name></decl>,
	<decl><name>PY_FROZEN</name></decl>,
	<decl><name>PY_CODERESOURCE</name></decl>, <comment type="block">/* Mac only */</comment>
	<decl><name>IMP_HOOK</name></decl>
}</block>;</enum>

<struct>struct <name>filedescr</name> <block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>suffix</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>mode</name></decl>;</decl_stmt>
	<enum>enum <name>filetype</name> <name>type</name>;</enum>
}</block>;</struct>
<decl_stmt><decl><type><specifier>extern</specifier> struct <name>filedescr</name> *</type> <name>_PyImport_Filetab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> struct <name>filedescr</name></type> <name><name>_PyImport_DynLoadFiletab</name><index>[]</index></name></decl>;</decl_stmt>

<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>_PyImport_LoadDynamicModule</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>char</name> *</type><name>pathname</name></decl></param>,
					     <param><decl><type><name>FILE</name> *</type></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Max length of module suffix searched for -- accommodates "module.slb" */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXSUFFIXSIZE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MS_WINDOWS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>FARPROC</name></type> <name>dl_funcptr</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PYOS_OS2</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>PYCC_GCC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;os2def.h&gt;</cpp:file></cpp:include>
<typedef>typedef <function_decl><type><name>int</name></type> (* <name>APIENTRY</name> <name>dl_funcptr</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <function_decl><type><name>void</name></type> (*<name>dl_funcptr</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_IMPORTDL_H */</comment>
</unit>
