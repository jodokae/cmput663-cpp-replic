<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Python/frozen.c">
<comment type="block">/* Dummy frozen modules initializer */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>

<comment type="block">/* In order to test the support for frozen modules, by default we
   define a single frozen module, __hello__.  Loading it will print
   some famous words... */</comment>

<comment type="block">/* To regenerate this data after the bytecode or marshal format has changed,
   go to ../Tools/freeze/ and freeze the hello.py file; then copy and paste
   the appropriate bytes from M___main__.c. */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>M___hello__</name><index>[]</index></name> <init>= <expr><block>{
	<expr>99</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>1</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,
	<expr>0</expr>,<expr>115</expr>,<expr>9</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>100</expr>,<expr>0</expr>,<expr>0</expr>,<expr>71</expr>,<expr>72</expr>,<expr>100</expr>,<expr>1</expr>,<expr>0</expr>,<expr>83</expr>,<expr>40</expr>,
	<expr>2</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>115</expr>,<expr>14</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>72</expr>,<expr>101</expr>,<expr>108</expr>,<expr>108</expr>,<expr>111</expr>,<expr>32</expr>,<expr>119</expr>,
	<expr>111</expr>,<expr>114</expr>,<expr>108</expr>,<expr>100</expr>,<expr>46</expr>,<expr>46</expr>,<expr>46</expr>,<expr>78</expr>,<expr>40</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>40</expr>,<expr>0</expr>,<expr>0</expr>,
	<expr>0</expr>,<expr>0</expr>,<expr>40</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>40</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>115</expr>,<expr>8</expr>,<expr>0</expr>,<expr>0</expr>,
	<expr>0</expr>,<expr>104</expr>,<expr>101</expr>,<expr>108</expr>,<expr>108</expr>,<expr>111</expr>,<expr>46</expr>,<expr>112</expr>,<expr>121</expr>,<expr>115</expr>,<expr>1</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>63</expr>,<expr>1</expr>,
	<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>115</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name></cpp:macro> <cpp:value>(int)sizeof(M___hello__)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> struct <name>_frozen</name></type> <name><name>_PyImport_FrozenModules</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* Test module */</comment>
	<expr><block>{<expr>"__hello__"</expr>, <expr><name>M___hello__</name></expr>, <expr><name>SIZE</name></expr>}</block></expr>,
	<comment type="block">/* Test package (negative size indicates package-ness) */</comment>
	<expr><block>{<expr>"__phello__"</expr>, <expr><name>M___hello__</name></expr>, <expr>-<name>SIZE</name></expr>}</block></expr>,
	<expr><block>{<expr>"__phello__.spam"</expr>, <expr><name>M___hello__</name></expr>, <expr><name>SIZE</name></expr>}</block></expr>,
	<expr><block>{<expr>0</expr>, <expr>0</expr>, <expr>0</expr>}</block></expr> <comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Embedding apps may change this pointer to point to their favorite
   collection of frozen modules: */</comment>

<decl_stmt><decl><type>struct <name>_frozen</name> *</type><name>PyImport_FrozenModules</name> <init>= <expr><name>_PyImport_FrozenModules</name></expr></init></decl>;</decl_stmt>
</unit>
