<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Python/thread_lwp.h">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lwp/lwp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lwp/stackdep.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACKSIZE</name></cpp:macro>	<cpp:value>1000</cpp:value></cpp:define>	<comment type="block">/* stacksize for a thread */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSTACKS</name></cpp:macro>		<cpp:value>2</cpp:value></cpp:define>	<comment type="block">/* # stacks to be put in cache initially */</comment>

<struct>struct <name>lock</name> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>lock_locked</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>cv_t</name></type> <name>lock_condvar</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mon_t</name></type> <name>lock_monitor</name></decl>;</decl_stmt>
}</block>;</struct>


<comment type="block">/*
 * Initialization.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>PyThread__init_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>lwp_setstkcache</name><argument_list>(<argument><expr><name>STACKSIZE</name></expr></argument>, <argument><expr><name>NSTACKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * Thread support.
 */</comment>


<function><type><name>long</name></type> <name>PyThread_start_new_thread</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>thread_t</name></type> <name>tid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>success</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_start_new_thread called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>PyThread_init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name>success</name> = <call><name>lwp_create</name><argument_list>(<argument><expr>&amp;<name>tid</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>MINPRIO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>lwp_newstk</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>success</name> &lt; 0 ? -1 : 0</expr>;</return>
}</block></function>

<function><type><name>long</name></type> <name>PyThread_get_thread_ident</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>thread_t</name></type> <name>tid</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>PyThread_init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
	<if>if <condition>(<expr><call><name>lwp_self</name><argument_list>(<argument><expr>&amp;<name>tid</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return <expr>-1</expr>;</return></then></if>
	<return>return <expr><name><name>tid</name>.<name>thread_id</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_PyThread_exit_thread</name><parameter_list>(<param><decl><type><name>int</name></type> <name>no_cleanup</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_exit_thread called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
		<if>if <condition>(<expr><name>no_cleanup</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else>else
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></then></if>
	<expr_stmt><expr><call><name>lwp_destroy</name><argument_list>(<argument><expr><name>SELF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>PyThread_exit_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>do_PyThread_exit_thread</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>PyThread__exit_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>do_PyThread_exit_thread</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_EXIT_PROG</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_PyThread_exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>, <param><decl><type><name>int</name></type> <name>no_cleanup</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_exit_prog(%d) called\n", <name>status</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
		<if>if <condition>(<expr><name>no_cleanup</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else>else
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></then></if>
	<expr_stmt><expr><call><name>pod_exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>PyThread_exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>do_PyThread_exit_prog</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>PyThread__exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>do_PyThread_exit_prog</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NO_EXIT_PROG */</comment>

<comment type="block">/*
 * Lock support.
 */</comment>
<function><type><name>PyThread_type_lock</name></type> <name>PyThread_allocate_lock</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type>struct <name>lock</name> *</type><name>lock</name></decl>;</decl_stmt>
	<function_decl><type><specifier>extern</specifier> <name>char</name> *</type><name>malloc</name><parameter_list>(<param><decl><type><name>size_t</name></type></decl></param>)</parameter_list>;</function_decl>

	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_allocate_lock called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>PyThread_init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

	<expr_stmt><expr><name>lock</name> = (struct <name>lock</name> *) <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>lock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>lock</name>-&gt;<name>lock_locked</name></name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr>(<name>void</name>) <call><name>mon_create</name><argument_list>(<argument><expr>&amp;<name><name>lock</name>-&gt;<name>lock_monitor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr>(<name>void</name>) <call><name>cv_create</name><argument_list>(<argument><expr>&amp;<name><name>lock</name>-&gt;<name>lock_condvar</name></name></expr></argument>, <argument><expr><name><name>lock</name>-&gt;<name>lock_monitor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_allocate_lock() -&gt; %p\n", <name>lock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>(<name>PyThread_type_lock</name>) <name>lock</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>PyThread_free_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>lock</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_free_lock(%p) called\n", <name>lock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mon_destroy</name><argument_list>(<argument><expr>((struct <name>lock</name> *) <name>lock</name>)-&gt;<name>lock_monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr>(<name>char</name> *) <name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>PyThread_acquire_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>lock</name></decl></param>, <param><decl><type><name>int</name></type> <name>waitflag</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>success</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_acquire_lock(%p, %d) called\n", <name>lock</name>, <name>waitflag</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>success</name> = 0</expr>;</expr_stmt>

	<expr_stmt><expr>(<name>void</name>) <call><name>mon_enter</name><argument_list>(<argument><expr>((struct <name>lock</name> *) <name>lock</name>)-&gt;<name>lock_monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>waitflag</name></expr>)</condition><then>
		<while>while <condition>(<expr>((struct <name>lock</name> *) <name>lock</name>)-&gt;<name>lock_locked</name></expr>)</condition>
			<expr_stmt><expr><call><name>cv_wait</name><argument_list>(<argument><expr>((struct <name>lock</name> *) <name>lock</name>)-&gt;<name>lock_condvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></while></then></if>
	<if>if <condition>(<expr>!((struct <name>lock</name> *) <name>lock</name>)-&gt;<name>lock_locked</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>success</name> = 1</expr>;</expr_stmt>
		<expr_stmt><expr>((struct <name>lock</name> *) <name>lock</name>)-&gt;<name>lock_locked</name> = 1</expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name>cv_broadcast</name><argument_list>(<argument><expr>((struct <name>lock</name> *) <name>lock</name>)-&gt;<name>lock_condvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mon_exit</name><argument_list>(<argument><expr>((struct <name>lock</name> *) <name>lock</name>)-&gt;<name>lock_monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_acquire_lock(%p, %d) -&gt; %d\n", <name>lock</name>, <name>waitflag</name>, <name>success</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>success</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>PyThread_release_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>lock</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_release_lock(%p) called\n", <name>lock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr>(<name>void</name>) <call><name>mon_enter</name><argument_list>(<argument><expr>((struct <name>lock</name> *) <name>lock</name>)-&gt;<name>lock_monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr>((struct <name>lock</name> *) <name>lock</name>)-&gt;<name>lock_locked</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cv_broadcast</name><argument_list>(<argument><expr>((struct <name>lock</name> *) <name>lock</name>)-&gt;<name>lock_condvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mon_exit</name><argument_list>(<argument><expr>((struct <name>lock</name> *) <name>lock</name>)-&gt;<name>lock_monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
