<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Python/thread_wince.h">
<comment type="block">/* This code implemented by Mark Hammond (MHammond@skippinet.com.au) */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pydebug.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>long</name></type> <name>PyThread_get_thread_ident</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Change all headers to pure ANSI as no one will use K&amp;R style on an
 * NT
 */</comment>

<comment type="block">/*
 * Initialization of the C package, should not be needed.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>PyThread__init_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
}</block></function>

<comment type="block">/*
 * Thread support.
 */</comment>
<function><type><name>long</name></type> <name>PyThread_start_new_thread</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>success</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_start_new_thread called\n", <call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>PyThread_init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

	<expr_stmt><expr><name>rv</name> = <call><name>_beginthread</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* use default stack size */</comment>
 
	<if>if <condition>(<expr><name>rv</name> != -1</expr>)</condition><then> <block>{
		<expr_stmt><expr><name>success</name> = 0</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_start_new_thread succeeded:\n", <call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<return>return <expr><name>success</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Return the thread Id instead of an handle. The Id is said to uniquely identify the
 * thread in the system
 */</comment>
<function><type><name>long</name></type> <name>PyThread_get_thread_ident</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>PyThread_init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        
	<return>return <expr><call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_PyThread_exit_thread</name><parameter_list>(<param><decl><type><name>int</name></type> <name>no_cleanup</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: do_PyThread_exit_thread called\n", <call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
		<if>if <condition>(<expr><name>no_cleanup</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then> <comment type="block">/* XXX - was _exit()!! */</comment>
		<else>else
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></then></if>
	<expr_stmt><expr><call><name>_endthread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>PyThread_exit_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>do_PyThread_exit_thread</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>PyThread__exit_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>do_PyThread_exit_thread</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_EXIT_PROG</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_PyThread_exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>, <param><decl><type><name>int</name></type> <name>no_cleanup</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_exit_prog(%d) called\n", <name>status</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
		<if>if <condition>(<expr><name>no_cleanup</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else>else
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></then></if>
}</block></function>

<function><type><name>void</name></type> <name>PyThread_exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>do_PyThread_exit_prog</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>PyThread__exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>do_PyThread_exit_prog</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NO_EXIT_PROG */</comment>

<comment type="block">/*
 * Lock support. It has to be implemented using Mutexes, as
 * CE doesnt support semaphores.  Therefore we use some hacks to
 * simulate the non reentrant requirements of Python locks
 */</comment>
<function><type><name>PyThread_type_lock</name></type> <name>PyThread_allocate_lock</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>HANDLE</name></type> <name>aLock</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_allocate_lock called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>PyThread_init_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name>aLock</name> = <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,           <comment type="block">/* Security attributes      */</comment>
                        <argument><expr>0</expr></argument>,              <comment type="block">/* Manual-Reset               */</comment>
						<argument><expr>1</expr></argument>,              <comment type="block">/* Is initially signalled  */</comment>
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="block">/* Name of event            */</comment>

    <expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_allocate_lock() -&gt; %p\n", <call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>, <name>aLock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr>(<name>PyThread_type_lock</name>) <name>aLock</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>PyThread_free_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>aLock</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_free_lock(%p) called\n", <call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>,<name>aLock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>aLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * Return 1 on success if the lock was acquired
 *
 * and 0 if the lock was not acquired. This means a 0 is returned
 * if the lock has already been acquired by this thread!
 */</comment>
<function><type><name>int</name></type> <name>PyThread_acquire_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>aLock</name></decl></param>, <param><decl><type><name>int</name></type> <name>waitflag</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>success</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>waitResult</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_acquire_lock(%p, %d) called\n", <call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>,<name>aLock</name>, <name>waitflag</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DEBUG</name></cpp:ifndef>
    <expr_stmt><expr><name>waitResult</name> = <call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>aLock</name></expr></argument>, <argument><expr>(<name>waitflag</name> ? <name>INFINITE</name> : 0)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/* To aid in debugging, we regularly wake up.  This allows us to
	break into the debugger */</comment>
	<while>while <condition>(<expr><name>TRUE</name></expr>)</condition> <block>{
		<expr_stmt><expr><name>waitResult</name> = <call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>aLock</name></expr></argument>, <argument><expr><name>waitflag</name> ? 3000 : 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>waitflag</name>==0 || (<name>waitflag</name> &amp;&amp; <name>waitResult</name> == <name>WAIT_OBJECT_0</name>)</expr>)</condition><then>
			<break>break;</break></then></if>
	}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr><name>waitResult</name> != <name>WAIT_OBJECT_0</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>success</name> = 0</expr>;</expr_stmt>    <comment type="block">/* We failed */</comment>
    }</block></then></if>

	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_acquire_lock(%p, %d) -&gt; %d\n", <call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>,<name>aLock</name>, <name>waitflag</name>, <name>success</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>success</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>PyThread_release_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>aLock</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: PyThread_release_lock(%p) called\n", <call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>,<name>aLock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>SetEvent</name><argument_list>(<argument><expr><name>aLock</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("%ld: Could not PyThread_release_lock(%p) error: %l\n", <call><name>PyThread_get_thread_ident</name><argument_list>()</argument_list></call>, <name>aLock</name>, <call><name>GetLastError</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>


</unit>
