<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Python/Python-ast.c"><comment type="block">/* File automatically generated by Parser/asdl_c.py. */</comment>


<comment type="block">/*
   __version__ 62047.

   This module must be committed separately after each AST grammar change;
   The __version__ number is set to the revision number of the commit
   containing the grammar change.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python-ast.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>AST_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>mod_type</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>ast2obj_mod</name><parameter_list>(<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Module_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Module_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"body"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Interactive_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Interactive_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"body"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Expression_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Expression_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"body"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Suite_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Suite_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"body"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>stmt_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>stmt_attributes</name><index>[]</index></name> <init>= <expr><block>{
        <expr>"lineno"</expr>,
        <expr>"col_offset"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>ast2obj_stmt</name><parameter_list>(<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>FunctionDef_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>FunctionDef_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"name"</expr>,
        <expr>"args"</expr>,
        <expr>"body"</expr>,
        <expr>"decorator_list"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>ClassDef_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>ClassDef_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"name"</expr>,
        <expr>"bases"</expr>,
        <expr>"body"</expr>,
        <expr>"decorator_list"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Return_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Return_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"value"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Delete_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Delete_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"targets"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Assign_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Assign_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"targets"</expr>,
        <expr>"value"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>AugAssign_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>AugAssign_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"target"</expr>,
        <expr>"op"</expr>,
        <expr>"value"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Print_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Print_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"dest"</expr>,
        <expr>"values"</expr>,
        <expr>"nl"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>For_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>For_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"target"</expr>,
        <expr>"iter"</expr>,
        <expr>"body"</expr>,
        <expr>"orelse"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>While_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>While_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"test"</expr>,
        <expr>"body"</expr>,
        <expr>"orelse"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>If_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>If_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"test"</expr>,
        <expr>"body"</expr>,
        <expr>"orelse"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>With_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>With_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"context_expr"</expr>,
        <expr>"optional_vars"</expr>,
        <expr>"body"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Raise_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Raise_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"type"</expr>,
        <expr>"inst"</expr>,
        <expr>"tback"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>TryExcept_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>TryExcept_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"body"</expr>,
        <expr>"handlers"</expr>,
        <expr>"orelse"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>TryFinally_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>TryFinally_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"body"</expr>,
        <expr>"finalbody"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Assert_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Assert_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"test"</expr>,
        <expr>"msg"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Import_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Import_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"names"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>ImportFrom_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>ImportFrom_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"module"</expr>,
        <expr>"names"</expr>,
        <expr>"level"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Exec_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Exec_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"body"</expr>,
        <expr>"globals"</expr>,
        <expr>"locals"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Global_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Global_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"names"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Expr_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Expr_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"value"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Pass_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Break_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Continue_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>expr_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>expr_attributes</name><index>[]</index></name> <init>= <expr><block>{
        <expr>"lineno"</expr>,
        <expr>"col_offset"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>ast2obj_expr</name><parameter_list>(<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>BoolOp_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>BoolOp_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"op"</expr>,
        <expr>"values"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>BinOp_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>BinOp_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"left"</expr>,
        <expr>"op"</expr>,
        <expr>"right"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>UnaryOp_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>UnaryOp_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"op"</expr>,
        <expr>"operand"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Lambda_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Lambda_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"args"</expr>,
        <expr>"body"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>IfExp_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>IfExp_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"test"</expr>,
        <expr>"body"</expr>,
        <expr>"orelse"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Dict_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Dict_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"keys"</expr>,
        <expr>"values"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>ListComp_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>ListComp_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"elt"</expr>,
        <expr>"generators"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>GeneratorExp_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>GeneratorExp_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"elt"</expr>,
        <expr>"generators"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Yield_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Yield_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"value"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Compare_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Compare_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"left"</expr>,
        <expr>"ops"</expr>,
        <expr>"comparators"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Call_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Call_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"func"</expr>,
        <expr>"args"</expr>,
        <expr>"keywords"</expr>,
        <expr>"starargs"</expr>,
        <expr>"kwargs"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Repr_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Repr_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"value"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Num_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Num_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"n"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Str_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Str_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"s"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Attribute_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Attribute_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"value"</expr>,
        <expr>"attr"</expr>,
        <expr>"ctx"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Subscript_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Subscript_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"value"</expr>,
        <expr>"slice"</expr>,
        <expr>"ctx"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Name_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Name_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"id"</expr>,
        <expr>"ctx"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>List_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>List_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"elts"</expr>,
        <expr>"ctx"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Tuple_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Tuple_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"elts"</expr>,
        <expr>"ctx"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>expr_context_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Load_singleton</name></decl>, *<decl><type ref="prev"/><name>Store_singleton</name></decl>, *<decl><type ref="prev"/><name>Del_singleton</name></decl>,
*<decl><type ref="prev"/><name>AugLoad_singleton</name></decl>, *<decl><type ref="prev"/><name>AugStore_singleton</name></decl>, *<decl><type ref="prev"/><name>Param_singleton</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>ast2obj_expr_context</name><parameter_list>(<param><decl><type><name>expr_context_ty</name></type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Load_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Store_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Del_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>AugLoad_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>AugStore_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Param_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>slice_type</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>ast2obj_slice</name><parameter_list>(<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Ellipsis_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Slice_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Slice_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"lower"</expr>,
        <expr>"upper"</expr>,
        <expr>"step"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>ExtSlice_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>ExtSlice_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"dims"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Index_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>Index_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"value"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>boolop_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>And_singleton</name></decl>, *<decl><type ref="prev"/><name>Or_singleton</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>ast2obj_boolop</name><parameter_list>(<param><decl><type><name>boolop_ty</name></type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>And_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Or_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>operator_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Add_singleton</name></decl>, *<decl><type ref="prev"/><name>Sub_singleton</name></decl>, *<decl><type ref="prev"/><name>Mult_singleton</name></decl>,
*<decl><type ref="prev"/><name>Div_singleton</name></decl>, *<decl><type ref="prev"/><name>Mod_singleton</name></decl>, *<decl><type ref="prev"/><name>Pow_singleton</name></decl>, *<decl><type ref="prev"/><name>LShift_singleton</name></decl>,
*<decl><type ref="prev"/><name>RShift_singleton</name></decl>, *<decl><type ref="prev"/><name>BitOr_singleton</name></decl>, *<decl><type ref="prev"/><name>BitXor_singleton</name></decl>, *<decl><type ref="prev"/><name>BitAnd_singleton</name></decl>,
*<decl><type ref="prev"/><name>FloorDiv_singleton</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>ast2obj_operator</name><parameter_list>(<param><decl><type><name>operator_ty</name></type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Add_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Sub_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Mult_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Div_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Mod_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Pow_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>LShift_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>RShift_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>BitOr_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>BitXor_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>BitAnd_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>FloorDiv_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>unaryop_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Invert_singleton</name></decl>, *<decl><type ref="prev"/><name>Not_singleton</name></decl>, *<decl><type ref="prev"/><name>UAdd_singleton</name></decl>,
*<decl><type ref="prev"/><name>USub_singleton</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>ast2obj_unaryop</name><parameter_list>(<param><decl><type><name>unaryop_ty</name></type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Invert_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Not_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>UAdd_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>USub_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>cmpop_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Eq_singleton</name></decl>, *<decl><type ref="prev"/><name>NotEq_singleton</name></decl>, *<decl><type ref="prev"/><name>Lt_singleton</name></decl>, *<decl><type ref="prev"/><name>LtE_singleton</name></decl>,
*<decl><type ref="prev"/><name>Gt_singleton</name></decl>, *<decl><type ref="prev"/><name>GtE_singleton</name></decl>, *<decl><type ref="prev"/><name>Is_singleton</name></decl>, *<decl><type ref="prev"/><name>IsNot_singleton</name></decl>, *<decl><type ref="prev"/><name>In_singleton</name></decl>,
*<decl><type ref="prev"/><name>NotIn_singleton</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>ast2obj_cmpop</name><parameter_list>(<param><decl><type><name>cmpop_ty</name></type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Eq_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>NotEq_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Lt_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>LtE_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Gt_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>GtE_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>Is_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>IsNot_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>In_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>NotIn_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>comprehension_type</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>ast2obj_comprehension</name><parameter_list>(<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>comprehension_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"target"</expr>,
        <expr>"iter"</expr>,
        <expr>"ifs"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>excepthandler_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>excepthandler_attributes</name><index>[]</index></name> <init>= <expr><block>{
        <expr>"lineno"</expr>,
        <expr>"col_offset"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>ast2obj_excepthandler</name><parameter_list>(<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>ExceptHandler_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>ExceptHandler_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"type"</expr>,
        <expr>"name"</expr>,
        <expr>"body"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>arguments_type</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>ast2obj_arguments</name><parameter_list>(<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>arguments_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"args"</expr>,
        <expr>"vararg"</expr>,
        <expr>"kwarg"</expr>,
        <expr>"defaults"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>keyword_type</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>ast2obj_keyword</name><parameter_list>(<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>keyword_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"arg"</expr>,
        <expr>"value"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name> *</type><name>alias_type</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>ast2obj_alias</name><parameter_list>(<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>alias_fields</name><index>[]</index></name><init>=<expr><block>{
        <expr>"name"</expr>,
        <expr>"asname"</expr>,
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>ast_type_init</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>numfields</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name></decl>, *<decl><type ref="prev"/><name>value</name></decl>, *<decl><type ref="prev"/><name>fields</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>fields</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr>(<name>PyObject</name>*)<call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"_fields"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>fields</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>fields</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>numfields</name> = <call><name>PySequence_Size</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>numfields</name> == -1</expr>)</condition><then>
            <goto>goto <name>cleanup</name>;</goto></then></if>
    }</block></then></if>
    <expr_stmt><expr><name>res</name> = 0</expr>;</expr_stmt> <comment type="block">/* if no error occurs, this stays 0 to the end */</comment>
    <if>if <condition>(<expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>numfields</name> != <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"%.400s constructor takes %s"
                         "%zd positional argument%s"</expr></argument>,
                         <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>,
                         <argument><expr><name>numfields</name> == 0 ? "" : "either 0 or "</expr></argument>,
                         <argument><expr><name>numfields</name></expr></argument>, <argument><expr><name>numfields</name> == 1 ? "" : "s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>res</name> = -1</expr>;</expr_stmt>
            <goto>goto <name>cleanup</name>;</goto>
        }</block></then></if>
        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <comment type="block">/* cannot be reached when fields is NULL */</comment>
            <decl_stmt><decl><type><name>PyObject</name> *</type><name>name</name> <init>= <expr><call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<name>name</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>res</name> = -1</expr>;</expr_stmt>
                <goto>goto <name>cleanup</name>;</goto>
            }</block></then></if>
            <expr_stmt><expr><name>res</name> = <call><name>PyObject_SetAttr</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>res</name> &lt; 0</expr>)</condition><then>
                <goto>goto <name>cleanup</name>;</goto></then></if>
        }</block></for>
    }</block></then></if>
    <if>if <condition>(<expr><name>kw</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>  <comment type="block">/* needed by PyDict_Next */</comment>
        <while>while <condition>(<expr><call><name>PyDict_Next</name><argument_list>(<argument><expr><name>kw</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><name>res</name> = <call><name>PyObject_SetAttr</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>res</name> &lt; 0</expr>)</condition><then>
                <goto>goto <name>cleanup</name>;</goto></then></if>
        }</block></while>
    }</block></then></if>
  <label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<comment type="block">/* Pickling support */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>ast_type_reduce</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name> <init>= <expr><call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>"__dict__"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>dict</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <return>return <expr><name>NULL</name></expr>;</return></else></if>
    }</block></then></if>
    <if>if <condition>(<expr><name>dict</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O()O"</expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O()"</expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>ast_type_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"__reduce__"</expr>, <expr><name>ast_type_reduce</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>AST_type</name> <init>= <expr><block>{
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
    "_ast.AST"</expr>,
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyObject</name></expr></argument>)</argument_list></sizeof></expr>,
    <expr>0</expr>,
    <expr>0</expr>,                       <comment type="block">/* tp_dealloc */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_print */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_getattr */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_setattr */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_compare */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_repr */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_as_number */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_as_sequence */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_as_mapping */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_hash */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_call */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_str */</comment>
    <expr><name>PyObject_GenericGetAttr</name></expr>, <comment type="block">/* tp_getattro */</comment>
    <expr><name>PyObject_GenericSetAttr</name></expr>, <comment type="block">/* tp_setattro */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_as_buffer */</comment>
    <expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/* tp_flags */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_doc */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_traverse */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_clear */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_richcompare */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_weaklistoffset */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_iter */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_iternext */</comment>
    <expr><name>ast_type_methods</name></expr>,        <comment type="block">/* tp_methods */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_members */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_getset */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_base */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_dict */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_descr_get */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_descr_set */</comment>
    <expr>0</expr>,                       <comment type="block">/* tp_dictoffset */</comment>
    <expr>(<name>initproc</name>)<name>ast_type_init</name></expr>, <comment type="block">/* tp_init */</comment>
    <expr><name>PyType_GenericAlloc</name></expr>,     <comment type="block">/* tp_alloc */</comment>
    <expr><name>PyType_GenericNew</name></expr>,       <comment type="block">/* tp_new */</comment>
    <expr><name>PyObject_Del</name></expr>,            <comment type="block">/* tp_free */</comment>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>PyTypeObject</name>*</type> <name>make_type</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyTypeObject</name>*</type> <name>base</name></decl></param>, <param><decl><type><name>char</name>**</type><name>fields</name></decl></param>, <param><decl><type><name>int</name></type> <name>num_fields</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>fnames</name></decl>, *<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>fnames</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr><name>num_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>fnames</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_fields</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>field</name> <init>= <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>field</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>fnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>fnames</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr>(<name>PyObject</name>*)&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>"s(O){sOss}"</expr></argument>,
                    <argument><expr><name>type</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr>"_fields"</expr></argument>, <argument><expr><name>fnames</name></expr></argument>, <argument><expr>"__module__"</expr></argument>, <argument><expr>"_ast"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>fnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>(<name>PyTypeObject</name>*)<name>result</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_attributes</name><parameter_list>(<param><decl><type><name>PyTypeObject</name>*</type> <name>type</name></decl></param>, <param><decl><type><name>char</name>**</type><name>attrs</name></decl></param>, <param><decl><type><name>int</name></type> <name>num_fields</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>s</name></decl>, *<decl><type ref="prev"/><name>l</name> <init>= <expr><call><name>PyTuple_New</name><argument_list>(<argument><expr><name>num_fields</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>l</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
    <for>for(<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_fields</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>s</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>s</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>result</name> = <call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr>(<name>PyObject</name>*)<name>type</name></expr></argument>, <argument><expr>"_attributes"</expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> &gt;= 0</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<comment type="block">/* Conversion AST -&gt; Python */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>ast2obj_list</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type><name>seq</name></decl></param>, <param><function_decl><type><name>PyObject</name>*</type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>asdl_seq_LEN</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>value</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>value</name> = <call><name>func</name><argument_list>(<argument><expr><call><name>asdl_seq_GET</name><argument_list>(<argument><expr><name>seq</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>ast2obj_object</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>o</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>o</name></expr>)</condition><then>
        <expr_stmt><expr><name>o</name> = <name>Py_None</name></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>(<name>PyObject</name>*)<name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>(<name>PyObject</name>*)<name>o</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ast2obj_identifier</name></cpp:macro> <cpp:value>ast2obj_object</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ast2obj_string</name></cpp:macro> <cpp:value>ast2obj_object</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>ast2obj_bool</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>b</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>PyBool_FromLong</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>ast2obj_int</name><parameter_list>(<param><decl><type><name>long</name></type> <name>b</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Conversion Python -&gt; AST */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>obj2ast_object</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>PyObject</name>**</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>obj</name> == <name>Py_None</name></expr>)</condition><then>
        <expr_stmt><expr><name>obj</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>obj</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>PyArena_AddPyObject</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>out</name> = <name>obj</name></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>obj2ast_identifier</name></cpp:macro> <cpp:value>obj2ast_object</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>obj2ast_string</name></cpp:macro> <cpp:value>obj2ast_object</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>obj2ast_int</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>int</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyInt_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>PyLong_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>s</name> <init>= <expr><call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>s</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr>1</expr>;</return></then></if>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"invalid integer value: %.400s"</expr></argument>,
                     <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>i</name> = (<name>int</name>)<call><name>PyLong_AsLong</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>i</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <return>return <expr>1</expr>;</return></then></if>
    <expr_stmt><expr>*<name>out</name> = <name>i</name></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>obj2ast_bool</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>bool</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<call><name>PyBool_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>s</name> <init>= <expr><call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>s</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr>1</expr>;</return></then></if>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"invalid boolean value: %.400s"</expr></argument>,
                     <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
    }</block></then></if>

    <expr_stmt><expr>*<name>out</name> = (<name>obj</name> == <name>Py_True</name>)</expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_ast_fields</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>empty_tuple</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>AST_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
        <return>return <expr>-1</expr>;</return></then></if>
    <expr_stmt><expr><name>d</name> = <name><name>AST_type</name>.<name>tp_dict</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>empty_tuple</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>empty_tuple</name> ||
        <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"_fields"</expr></argument>, <argument><expr><name>empty_tuple</name></expr></argument>)</argument_list></call> &lt; 0 ||
        <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"_attributes"</expr></argument>, <argument><expr><name>empty_tuple</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>empty_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>-1</expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>empty_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>init_types</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialized</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>initialized</name></expr>)</condition><then> <return>return <expr>1</expr>;</return></then></if>
        <if>if <condition>(<expr><call><name>add_ast_fields</name><argument_list>()</argument_list></call> &lt; 0</expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>mod_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"mod"</expr></argument>, <argument><expr>&amp;<name>AST_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>mod_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <if>if <condition>(<expr>!<call><name>add_attributes</name><argument_list>(<argument><expr><name>mod_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Module_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Module"</expr></argument>, <argument><expr><name>mod_type</name></expr></argument>, <argument><expr><name>Module_fields</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Module_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Interactive_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Interactive"</expr></argument>, <argument><expr><name>mod_type</name></expr></argument>,
                                     <argument><expr><name>Interactive_fields</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Interactive_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Expression_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Expression"</expr></argument>, <argument><expr><name>mod_type</name></expr></argument>, <argument><expr><name>Expression_fields</name></expr></argument>,
                                    <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Expression_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Suite_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Suite"</expr></argument>, <argument><expr><name>mod_type</name></expr></argument>, <argument><expr><name>Suite_fields</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Suite_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>stmt_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"stmt"</expr></argument>, <argument><expr>&amp;<name>AST_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>stmt_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <if>if <condition>(<expr>!<call><name>add_attributes</name><argument_list>(<argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>stmt_attributes</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>FunctionDef_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"FunctionDef"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>,
                                     <argument><expr><name>FunctionDef_fields</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>FunctionDef_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>ClassDef_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"ClassDef"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>ClassDef_fields</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ClassDef_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Return_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Return"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>Return_fields</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Return_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Delete_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Delete"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>Delete_fields</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Delete_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Assign_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Assign"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>Assign_fields</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Assign_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>AugAssign_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"AugAssign"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>AugAssign_fields</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>AugAssign_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Print_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Print"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>Print_fields</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Print_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>For_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"For"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>For_fields</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>For_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>While_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"While"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>While_fields</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>While_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>If_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"If"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>If_fields</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>If_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>With_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"With"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>With_fields</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>With_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Raise_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Raise"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>Raise_fields</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Raise_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>TryExcept_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"TryExcept"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>TryExcept_fields</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>TryExcept_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>TryFinally_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"TryFinally"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>TryFinally_fields</name></expr></argument>,
                                    <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>TryFinally_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Assert_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Assert"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>Assert_fields</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Assert_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Import_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Import"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>Import_fields</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Import_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>ImportFrom_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"ImportFrom"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>ImportFrom_fields</name></expr></argument>,
                                    <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ImportFrom_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Exec_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Exec"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>Exec_fields</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Exec_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Global_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Global"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>Global_fields</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Global_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Expr_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Expr"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>Expr_fields</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Expr_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Pass_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Pass"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Pass_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Break_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Break"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Break_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Continue_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Continue"</expr></argument>, <argument><expr><name>stmt_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Continue_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>expr_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"expr"</expr></argument>, <argument><expr>&amp;<name>AST_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>expr_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <if>if <condition>(<expr>!<call><name>add_attributes</name><argument_list>(<argument><expr><name>expr_type</name></expr></argument>, <argument><expr><name>expr_attributes</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>BoolOp_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"BoolOp"</expr></argument>, <argument><expr><name>expr_type</name></expr></argument>, <argument><expr><name>BoolOp_fields</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>BoolOp_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>BinOp_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"BinOp"</expr></argument>, <argument><expr><name>expr_type</name></expr></argument>, <argument><expr><name>BinOp_fields</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>BinOp_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>UnaryOp_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"UnaryOp"</expr></argument>, <argument><expr><name>expr_type</name></expr></argument>, <argument><expr><name>UnaryOp_fields</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>UnaryOp_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Lambda_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Lambda"</expr></argument>, <argument><expr><name>expr_type</name></expr></argument>, <argument><expr><name>Lambda_fields</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Lambda_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>IfExp_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"IfExp"</expr></argument>, <argument><expr><name>expr_type</name></expr></argument>, <argument><expr><name>IfExp_fields</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>IfExp_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Dict_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Dict"</expr></argument>, <argument><expr><name>expr_type</name></expr></argument>, <argument><expr><name>Dict_fields</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Dict_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>ListComp_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"ListComp"</expr></argument>, <argument><expr><name>expr_type</name></expr></argument>, <argument><expr><name>ListComp_fields</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ListComp_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>GeneratorExp_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"GeneratorExp"</expr></argument>, <argument><expr><name>expr_type</name></expr></argument>,
                                      <argument><expr><name>GeneratorExp_fields</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>GeneratorExp_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Yield_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Yield"</expr></argument>, <argument><expr><name>expr_type</name></expr></argument>, <argument><expr><name>Yield_fields</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Yield_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Compare_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Compare"</expr></argument>, <argument><expr><name>expr_type</name></expr></argument>, <argument><expr><name>Compare_fields</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Compare_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Call_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Call"</expr></argument>, <argument><expr><name>expr_type</name></expr></argument>, <argument><expr><name>Call_fields</name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Call_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Repr_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Repr"</expr></argument>, <argument><expr><name>expr_type</name></expr></argument>, <argument><expr><name>Repr_fields</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Repr_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Num_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Num"</expr></argument>, <argument><expr><name>expr_type</name></expr></argument>, <argument><expr><name>Num_fields</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Num_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Str_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Str"</expr></argument>, <argument><expr><name>expr_type</name></expr></argument>, <argument><expr><name>Str_fields</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Str_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Attribute_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Attribute"</expr></argument>, <argument><expr><name>expr_type</name></expr></argument>, <argument><expr><name>Attribute_fields</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Attribute_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Subscript_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Subscript"</expr></argument>, <argument><expr><name>expr_type</name></expr></argument>, <argument><expr><name>Subscript_fields</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Subscript_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Name_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Name"</expr></argument>, <argument><expr><name>expr_type</name></expr></argument>, <argument><expr><name>Name_fields</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Name_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>List_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"List"</expr></argument>, <argument><expr><name>expr_type</name></expr></argument>, <argument><expr><name>List_fields</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>List_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Tuple_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Tuple"</expr></argument>, <argument><expr><name>expr_type</name></expr></argument>, <argument><expr><name>Tuple_fields</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Tuple_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>expr_context_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"expr_context"</expr></argument>, <argument><expr>&amp;<name>AST_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>expr_context_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <if>if <condition>(<expr>!<call><name>add_attributes</name><argument_list>(<argument><expr><name>expr_context_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Load_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Load"</expr></argument>, <argument><expr><name>expr_context_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Load_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Load_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Load_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Load_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Store_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Store"</expr></argument>, <argument><expr><name>expr_context_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Store_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Store_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Store_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Store_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Del_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Del"</expr></argument>, <argument><expr><name>expr_context_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Del_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Del_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Del_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Del_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>AugLoad_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"AugLoad"</expr></argument>, <argument><expr><name>expr_context_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>AugLoad_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>AugLoad_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>AugLoad_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>AugLoad_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>AugStore_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"AugStore"</expr></argument>, <argument><expr><name>expr_context_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>AugStore_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>AugStore_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>AugStore_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>AugStore_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Param_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Param"</expr></argument>, <argument><expr><name>expr_context_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Param_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Param_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Param_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Param_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>slice_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"slice"</expr></argument>, <argument><expr>&amp;<name>AST_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>slice_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <if>if <condition>(<expr>!<call><name>add_attributes</name><argument_list>(<argument><expr><name>slice_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Ellipsis_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Ellipsis"</expr></argument>, <argument><expr><name>slice_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Ellipsis_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Slice_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Slice"</expr></argument>, <argument><expr><name>slice_type</name></expr></argument>, <argument><expr><name>Slice_fields</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Slice_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>ExtSlice_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"ExtSlice"</expr></argument>, <argument><expr><name>slice_type</name></expr></argument>, <argument><expr><name>ExtSlice_fields</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ExtSlice_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Index_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Index"</expr></argument>, <argument><expr><name>slice_type</name></expr></argument>, <argument><expr><name>Index_fields</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Index_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>boolop_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"boolop"</expr></argument>, <argument><expr>&amp;<name>AST_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>boolop_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <if>if <condition>(<expr>!<call><name>add_attributes</name><argument_list>(<argument><expr><name>boolop_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>And_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"And"</expr></argument>, <argument><expr><name>boolop_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>And_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>And_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>And_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>And_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Or_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Or"</expr></argument>, <argument><expr><name>boolop_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Or_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Or_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Or_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Or_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>operator_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"operator"</expr></argument>, <argument><expr>&amp;<name>AST_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>operator_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <if>if <condition>(<expr>!<call><name>add_attributes</name><argument_list>(<argument><expr><name>operator_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Add_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Add"</expr></argument>, <argument><expr><name>operator_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Add_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Add_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Add_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Add_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Sub_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Sub"</expr></argument>, <argument><expr><name>operator_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Sub_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Sub_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Sub_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Sub_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Mult_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Mult"</expr></argument>, <argument><expr><name>operator_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Mult_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Mult_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Mult_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Mult_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Div_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Div"</expr></argument>, <argument><expr><name>operator_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Div_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Div_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Div_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Div_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Mod_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Mod"</expr></argument>, <argument><expr><name>operator_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Mod_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Mod_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Mod_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Mod_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Pow_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Pow"</expr></argument>, <argument><expr><name>operator_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Pow_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Pow_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Pow_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Pow_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>LShift_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"LShift"</expr></argument>, <argument><expr><name>operator_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>LShift_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>LShift_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>LShift_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>LShift_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>RShift_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"RShift"</expr></argument>, <argument><expr><name>operator_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>RShift_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>RShift_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>RShift_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>RShift_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>BitOr_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"BitOr"</expr></argument>, <argument><expr><name>operator_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>BitOr_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>BitOr_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>BitOr_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>BitOr_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>BitXor_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"BitXor"</expr></argument>, <argument><expr><name>operator_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>BitXor_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>BitXor_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>BitXor_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>BitXor_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>BitAnd_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"BitAnd"</expr></argument>, <argument><expr><name>operator_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>BitAnd_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>BitAnd_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>BitAnd_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>BitAnd_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>FloorDiv_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"FloorDiv"</expr></argument>, <argument><expr><name>operator_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>FloorDiv_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>FloorDiv_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>FloorDiv_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>FloorDiv_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>unaryop_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"unaryop"</expr></argument>, <argument><expr>&amp;<name>AST_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>unaryop_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <if>if <condition>(<expr>!<call><name>add_attributes</name><argument_list>(<argument><expr><name>unaryop_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Invert_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Invert"</expr></argument>, <argument><expr><name>unaryop_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Invert_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Invert_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Invert_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Invert_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Not_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Not"</expr></argument>, <argument><expr><name>unaryop_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Not_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Not_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Not_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Not_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>UAdd_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"UAdd"</expr></argument>, <argument><expr><name>unaryop_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>UAdd_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>UAdd_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>UAdd_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>UAdd_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>USub_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"USub"</expr></argument>, <argument><expr><name>unaryop_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>USub_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>USub_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>USub_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>USub_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>cmpop_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"cmpop"</expr></argument>, <argument><expr>&amp;<name>AST_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>cmpop_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <if>if <condition>(<expr>!<call><name>add_attributes</name><argument_list>(<argument><expr><name>cmpop_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Eq_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Eq"</expr></argument>, <argument><expr><name>cmpop_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Eq_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Eq_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Eq_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Eq_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>NotEq_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"NotEq"</expr></argument>, <argument><expr><name>cmpop_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>NotEq_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>NotEq_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>NotEq_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>NotEq_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Lt_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Lt"</expr></argument>, <argument><expr><name>cmpop_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Lt_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Lt_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Lt_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Lt_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>LtE_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"LtE"</expr></argument>, <argument><expr><name>cmpop_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>LtE_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>LtE_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>LtE_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>LtE_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Gt_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Gt"</expr></argument>, <argument><expr><name>cmpop_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Gt_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Gt_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Gt_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Gt_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>GtE_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"GtE"</expr></argument>, <argument><expr><name>cmpop_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>GtE_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>GtE_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>GtE_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>GtE_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Is_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"Is"</expr></argument>, <argument><expr><name>cmpop_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Is_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>Is_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Is_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>Is_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>IsNot_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"IsNot"</expr></argument>, <argument><expr><name>cmpop_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>IsNot_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>IsNot_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>IsNot_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>IsNot_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>In_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"In"</expr></argument>, <argument><expr><name>cmpop_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>In_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>In_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>In_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>In_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>NotIn_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"NotIn"</expr></argument>, <argument><expr><name>cmpop_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>NotIn_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>NotIn_singleton</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>NotIn_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>NotIn_singleton</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>comprehension_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"comprehension"</expr></argument>, <argument><expr>&amp;<name>AST_type</name></expr></argument>,
                                       <argument><expr><name>comprehension_fields</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>comprehension_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>excepthandler_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"excepthandler"</expr></argument>, <argument><expr>&amp;<name>AST_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>excepthandler_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <if>if <condition>(<expr>!<call><name>add_attributes</name><argument_list>(<argument><expr><name>excepthandler_type</name></expr></argument>, <argument><expr><name>excepthandler_attributes</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>ExceptHandler_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"ExceptHandler"</expr></argument>, <argument><expr><name>excepthandler_type</name></expr></argument>,
                                       <argument><expr><name>ExceptHandler_fields</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ExceptHandler_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>arguments_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"arguments"</expr></argument>, <argument><expr>&amp;<name>AST_type</name></expr></argument>, <argument><expr><name>arguments_fields</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>arguments_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>keyword_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"keyword"</expr></argument>, <argument><expr>&amp;<name>AST_type</name></expr></argument>, <argument><expr><name>keyword_fields</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>keyword_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>alias_type</name> = <call><name>make_type</name><argument_list>(<argument><expr>"alias"</expr></argument>, <argument><expr>&amp;<name>AST_type</name></expr></argument>, <argument><expr><name>alias_fields</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>alias_type</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
        <expr_stmt><expr><name>initialized</name> = 1</expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>obj2ast_mod</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>mod_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>obj2ast_stmt</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>stmt_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>obj2ast_expr</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>expr_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>obj2ast_expr_context</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>expr_context_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type>
                                <name>arena</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>obj2ast_slice</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>slice_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>obj2ast_boolop</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>boolop_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>obj2ast_operator</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>operator_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>obj2ast_unaryop</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>unaryop_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>obj2ast_cmpop</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>cmpop_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>obj2ast_comprehension</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>comprehension_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type>
                                 <name>arena</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>obj2ast_excepthandler</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>excepthandler_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type>
                                 <name>arena</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>obj2ast_arguments</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>arguments_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>obj2ast_keyword</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>keyword_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>obj2ast_alias</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>alias_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>;</function_decl>

<function><type><name>mod_ty</name></type>
<name>Module</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>mod_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> = (<name>mod_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Module_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Module</name>.<name>body</name></name> = <name>body</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>mod_ty</name></type>
<name>Interactive</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>mod_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> = (<name>mod_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Interactive_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Interactive</name>.<name>body</name></name> = <name>body</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>mod_ty</name></type>
<name>Expression</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>body</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>mod_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>body</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field body is required for Expression"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>mod_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Expression_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Expression</name>.<name>body</name></name> = <name>body</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>mod_ty</name></type>
<name>Suite</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>mod_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> = (<name>mod_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Suite_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Suite</name>.<name>body</name></name> = <name>body</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>FunctionDef</name><parameter_list>(<param><decl><type><name>identifier</name></type> <name>name</name></decl></param>, <param><decl><type><name>arguments_ty</name></type> <name>args</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type>
            <name>decorator_list</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>name</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field name is required for FunctionDef"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>args</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field args is required for FunctionDef"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>FunctionDef_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>FunctionDef</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>FunctionDef</name>.<name>args</name></name> = <name>args</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>FunctionDef</name>.<name>body</name></name> = <name>body</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>FunctionDef</name>.<name>decorator_list</name></name> = <name>decorator_list</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>ClassDef</name><parameter_list>(<param><decl><type><name>identifier</name></type> <name>name</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>bases</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type>
         <name>decorator_list</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>name</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field name is required for ClassDef"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>ClassDef_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>ClassDef</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>ClassDef</name>.<name>bases</name></name> = <name>bases</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>ClassDef</name>.<name>body</name></name> = <name>body</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>ClassDef</name>.<name>decorator_list</name></name> = <name>decorator_list</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>Return</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>value</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Return_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Return</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>Delete</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>targets</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Delete_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Delete</name>.<name>targets</name></name> = <name>targets</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>Assign</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>targets</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>value</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name>
       *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field value is required for Assign"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Assign_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Assign</name>.<name>targets</name></name> = <name>targets</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Assign</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>AugAssign</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>target</name></decl></param>, <param><decl><type><name>operator_ty</name></type> <name>op</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>value</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type>
          <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>target</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field target is required for AugAssign"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>op</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field op is required for AugAssign"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field value is required for AugAssign"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>AugAssign_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>AugAssign</name>.<name>target</name></name> = <name>target</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>AugAssign</name>.<name>op</name></name> = <name>op</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>AugAssign</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>Print</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>dest</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>values</name></decl></param>, <param><decl><type><name>bool</name></type> <name>nl</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>,
      <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Print_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Print</name>.<name>dest</name></name> = <name>dest</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Print</name>.<name>values</name></name> = <name>values</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Print</name>.<name>nl</name></name> = <name>nl</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>For</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>target</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>iter</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>orelse</name></decl></param>, <param><decl><type><name>int</name></type>
    <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>target</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field target is required for For"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>iter</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field iter is required for For"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>For_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>For</name>.<name>target</name></name> = <name>target</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>For</name>.<name>iter</name></name> = <name>iter</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>For</name>.<name>body</name></name> = <name>body</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>For</name>.<name>orelse</name></name> = <name>orelse</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>While</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>test</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>orelse</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type>
      <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>test</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field test is required for While"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>While_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>While</name>.<name>test</name></name> = <name>test</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>While</name>.<name>body</name></name> = <name>body</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>While</name>.<name>orelse</name></name> = <name>orelse</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>If</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>test</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>orelse</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type>
   <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>test</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field test is required for If"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>If_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>If</name>.<name>test</name></name> = <name>test</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>If</name>.<name>body</name></name> = <name>body</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>If</name>.<name>orelse</name></name> = <name>orelse</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>With</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>context_expr</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>optional_vars</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>,
     <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>context_expr</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field context_expr is required for With"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>With_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>With</name>.<name>context_expr</name></name> = <name>context_expr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>With</name>.<name>optional_vars</name></name> = <name>optional_vars</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>With</name>.<name>body</name></name> = <name>body</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>Raise</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>type</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>inst</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>tback</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>,
      <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Raise_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Raise</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Raise</name>.<name>inst</name></name> = <name>inst</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Raise</name>.<name>tback</name></name> = <name>tback</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>TryExcept</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>handlers</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>orelse</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>,
          <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>TryExcept_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>TryExcept</name>.<name>body</name></name> = <name>body</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>TryExcept</name>.<name>handlers</name></name> = <name>handlers</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>TryExcept</name>.<name>orelse</name></name> = <name>orelse</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>TryFinally</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>finalbody</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>,
           <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>TryFinally_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>TryFinally</name>.<name>body</name></name> = <name>body</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>TryFinally</name>.<name>finalbody</name></name> = <name>finalbody</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>Assert</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>test</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>msg</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>test</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field test is required for Assert"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Assert_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Assert</name>.<name>test</name></name> = <name>test</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Assert</name>.<name>msg</name></name> = <name>msg</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>Import</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>names</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Import_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Import</name>.<name>names</name></name> = <name>names</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>ImportFrom</name><parameter_list>(<param><decl><type><name>identifier</name></type> <name>module</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>names</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type>
           <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>module</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field module is required for ImportFrom"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>ImportFrom_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>ImportFrom</name>.<name>module</name></name> = <name>module</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>ImportFrom</name>.<name>names</name></name> = <name>names</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>ImportFrom</name>.<name>level</name></name> = <name>level</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>Exec</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>body</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>globals</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>locals</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>,
     <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>body</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field body is required for Exec"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Exec_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Exec</name>.<name>body</name></name> = <name>body</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Exec</name>.<name>globals</name></name> = <name>globals</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Exec</name>.<name>locals</name></name> = <name>locals</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>Global</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>names</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Global_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Global</name>.<name>names</name></name> = <name>names</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>Expr</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>value</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field value is required for Expr"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Expr_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Expr</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>Pass</name><parameter_list>(<param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Pass_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>Break</name><parameter_list>(<param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Break_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>stmt_ty</name></type>
<name>Continue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> = (<name>stmt_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Continue_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>expr_ty</name></type>
<name>BoolOp</name><parameter_list>(<param><decl><type><name>boolop_ty</name></type> <name>op</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>values</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name>
       *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>op</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field op is required for BoolOp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>expr_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>BoolOp_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>BoolOp</name>.<name>op</name></name> = <name>op</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>BoolOp</name>.<name>values</name></name> = <name>values</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>expr_ty</name></type>
<name>BinOp</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>left</name></decl></param>, <param><decl><type><name>operator_ty</name></type> <name>op</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>right</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>,
      <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>left</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field left is required for BinOp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>op</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field op is required for BinOp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>right</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field right is required for BinOp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>expr_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>BinOp_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>BinOp</name>.<name>left</name></name> = <name>left</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>BinOp</name>.<name>op</name></name> = <name>op</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>BinOp</name>.<name>right</name></name> = <name>right</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>expr_ty</name></type>
<name>UnaryOp</name><parameter_list>(<param><decl><type><name>unaryop_ty</name></type> <name>op</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>operand</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name>
        *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>op</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field op is required for UnaryOp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>operand</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field operand is required for UnaryOp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>expr_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>UnaryOp_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>UnaryOp</name>.<name>op</name></name> = <name>op</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>UnaryOp</name>.<name>operand</name></name> = <name>operand</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>expr_ty</name></type>
<name>Lambda</name><parameter_list>(<param><decl><type><name>arguments_ty</name></type> <name>args</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>body</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name>
       *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>args</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field args is required for Lambda"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>body</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field body is required for Lambda"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>expr_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Lambda_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Lambda</name>.<name>args</name></name> = <name>args</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Lambda</name>.<name>body</name></name> = <name>body</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>expr_ty</name></type>
<name>IfExp</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>test</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>body</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>orelse</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>,
      <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>test</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field test is required for IfExp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>body</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field body is required for IfExp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>orelse</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field orelse is required for IfExp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>expr_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>IfExp_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>IfExp</name>.<name>test</name></name> = <name>test</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>IfExp</name>.<name>body</name></name> = <name>body</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>IfExp</name>.<name>orelse</name></name> = <name>orelse</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>expr_ty</name></type>
<name>Dict</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>keys</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>values</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name>
     *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> = (<name>expr_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Dict_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Dict</name>.<name>keys</name></name> = <name>keys</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Dict</name>.<name>values</name></name> = <name>values</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>expr_ty</name></type>
<name>ListComp</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>elt</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>generators</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>,
         <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>elt</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field elt is required for ListComp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>expr_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>ListComp_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>ListComp</name>.<name>elt</name></name> = <name>elt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>ListComp</name>.<name>generators</name></name> = <name>generators</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>expr_ty</name></type>
<name>GeneratorExp</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>elt</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>generators</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>,
             <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>elt</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field elt is required for GeneratorExp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>expr_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>GeneratorExp_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>GeneratorExp</name>.<name>elt</name></name> = <name>elt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>GeneratorExp</name>.<name>generators</name></name> = <name>generators</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>expr_ty</name></type>
<name>Yield</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>value</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> = (<name>expr_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Yield_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Yield</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>expr_ty</name></type>
<name>Compare</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>left</name></decl></param>, <param><decl><type><name>asdl_int_seq</name> *</type> <name>ops</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>comparators</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>,
        <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>left</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field left is required for Compare"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>expr_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Compare_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Compare</name>.<name>left</name></name> = <name>left</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Compare</name>.<name>ops</name></name> = <name>ops</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Compare</name>.<name>comparators</name></name> = <name>comparators</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>expr_ty</name></type>
<name>Call</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>func</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>args</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>keywords</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>starargs</name></decl></param>,
     <param><decl><type><name>expr_ty</name></type> <name>kwargs</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>func</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field func is required for Call"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>expr_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Call_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Call</name>.<name>func</name></name> = <name>func</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Call</name>.<name>args</name></name> = <name>args</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Call</name>.<name>keywords</name></name> = <name>keywords</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Call</name>.<name>starargs</name></name> = <name>starargs</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Call</name>.<name>kwargs</name></name> = <name>kwargs</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>expr_ty</name></type>
<name>Repr</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>value</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field value is required for Repr"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>expr_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Repr_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Repr</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>expr_ty</name></type>
<name>Num</name><parameter_list>(<param><decl><type><name>object</name></type> <name>n</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>n</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field n is required for Num"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>expr_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Num_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Num</name>.<name>n</name></name> = <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>expr_ty</name></type>
<name>Str</name><parameter_list>(<param><decl><type><name>string</name></type> <name>s</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>s</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field s is required for Str"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>expr_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Str_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Str</name>.<name>s</name></name> = <name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>expr_ty</name></type>
<name>Attribute</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>value</name></decl></param>, <param><decl><type><name>identifier</name></type> <name>attr</name></decl></param>, <param><decl><type><name>expr_context_ty</name></type> <name>ctx</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type>
          <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field value is required for Attribute"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>attr</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field attr is required for Attribute"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field ctx is required for Attribute"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>expr_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Attribute_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Attribute</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Attribute</name>.<name>attr</name></name> = <name>attr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Attribute</name>.<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>expr_ty</name></type>
<name>Subscript</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>value</name></decl></param>, <param><decl><type><name>slice_ty</name></type> <name>slice</name></decl></param>, <param><decl><type><name>expr_context_ty</name></type> <name>ctx</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type>
          <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field value is required for Subscript"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>slice</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field slice is required for Subscript"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field ctx is required for Subscript"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>expr_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Subscript_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Subscript</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Subscript</name>.<name>slice</name></name> = <name>slice</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Subscript</name>.<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>expr_ty</name></type>
<name>Name</name><parameter_list>(<param><decl><type><name>identifier</name></type> <name>id</name></decl></param>, <param><decl><type><name>expr_context_ty</name></type> <name>ctx</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name>
     *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>id</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field id is required for Name"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field ctx is required for Name"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>expr_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Name_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Name</name>.<name>id</name></name> = <name>id</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Name</name>.<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>expr_ty</name></type>
<name>List</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>elts</name></decl></param>, <param><decl><type><name>expr_context_ty</name></type> <name>ctx</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name>
     *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field ctx is required for List"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>expr_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>List_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>List</name>.<name>elts</name></name> = <name>elts</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>List</name>.<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>expr_ty</name></type>
<name>Tuple</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>elts</name></decl></param>, <param><decl><type><name>expr_context_ty</name></type> <name>ctx</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name>
      *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field ctx is required for Tuple"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>expr_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Tuple_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Tuple</name>.<name>elts</name></name> = <name>elts</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Tuple</name>.<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>slice_ty</name></type>
<name>Ellipsis</name><parameter_list>(<param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>slice_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> = (<name>slice_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Ellipsis_kind</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>slice_ty</name></type>
<name>Slice</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>lower</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>upper</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>step</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>slice_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> = (<name>slice_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Slice_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Slice</name>.<name>lower</name></name> = <name>lower</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Slice</name>.<name>upper</name></name> = <name>upper</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Slice</name>.<name>step</name></name> = <name>step</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>slice_ty</name></type>
<name>ExtSlice</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>dims</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>slice_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> = (<name>slice_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>ExtSlice_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>ExtSlice</name>.<name>dims</name></name> = <name>dims</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>slice_ty</name></type>
<name>Index</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>value</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>slice_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field value is required for Index"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>slice_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>Index_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>Index</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>comprehension_ty</name></type>
<name>comprehension</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>target</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>iter</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>ifs</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>comprehension_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>target</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field target is required for comprehension"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>iter</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field iter is required for comprehension"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>comprehension_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>target</name></name> = <name>target</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>iter</name></name> = <name>iter</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>ifs</name></name> = <name>ifs</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>excepthandler_ty</name></type>
<name>ExceptHandler</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>type</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>name</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type>
              <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>excepthandler_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> = (<name>excepthandler_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kind</name></name> = <name>ExceptHandler_kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>ExceptHandler</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>ExceptHandler</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>v</name>.<name>ExceptHandler</name>.<name>body</name></name> = <name>body</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>arguments_ty</name></type>
<name>arguments</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>args</name></decl></param>, <param><decl><type><name>identifier</name></type> <name>vararg</name></decl></param>, <param><decl><type><name>identifier</name></type> <name>kwarg</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type>
          <name>defaults</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>arguments_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> = (<name>arguments_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>args</name></name> = <name>args</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>vararg</name></name> = <name>vararg</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>kwarg</name></name> = <name>kwarg</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>defaults</name></name> = <name>defaults</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>keyword_ty</name></type>
<name>keyword</name><parameter_list>(<param><decl><type><name>identifier</name></type> <name>arg</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>value</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>keyword_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>arg</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field arg is required for keyword"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field value is required for keyword"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>keyword_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>arg</name></name> = <name>arg</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<function><type><name>alias_ty</name></type>
<name>alias</name><parameter_list>(<param><decl><type><name>identifier</name></type> <name>name</name></decl></param>, <param><decl><type><name>identifier</name></type> <name>asname</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>alias_ty</name></type> <name>p</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>name</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr>"field name is required for alias"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>p</name> = (<name>alias_ty</name>)<call><name>PyArena_Malloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name>-&gt;<name>asname</name></name> = <name>asname</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
}</block></function>


<function><type><name>PyObject</name>*</type>
<name>ast2obj_mod</name><parameter_list>(<param><decl><type><name>void</name>*</type> <name>_o</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>mod_ty</name></type> <name>o</name> <init>= <expr>(<name>mod_ty</name>)<name>_o</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init>, *<name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>o</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>Py_None</name></expr>;</return>
        }</block></then></if>

        <switch>switch <condition>(<expr><name><name>o</name>-&gt;<name>kind</name></name></expr>)</condition> <block>{
        <case>case <expr><name>Module_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Module_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Module</name>.<name>body</name></name></expr></argument>, <argument><expr><name>ast2obj_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"body"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Interactive_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Interactive_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Interactive</name>.<name>body</name></name></expr></argument>, <argument><expr><name>ast2obj_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"body"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Expression_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Expression_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Expression</name>.<name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"body"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Suite_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Suite_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Suite</name>.<name>body</name></name></expr></argument>, <argument><expr><name>ast2obj_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"body"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case>}</block></switch>
        <return>return <expr><name>result</name></expr>;</return>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name>*</type>
<name>ast2obj_stmt</name><parameter_list>(<param><decl><type><name>void</name>*</type> <name>_o</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>stmt_ty</name></type> <name>o</name> <init>= <expr>(<name>stmt_ty</name>)<name>_o</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init>, *<name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>o</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>Py_None</name></expr>;</return>
        }</block></then></if>

        <switch>switch <condition>(<expr><name><name>o</name>-&gt;<name>kind</name></name></expr>)</condition> <block>{
        <case>case <expr><name>FunctionDef_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>FunctionDef_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_identifier</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>FunctionDef</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"name"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_arguments</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>FunctionDef</name>.<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"args"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>FunctionDef</name>.<name>body</name></name></expr></argument>, <argument><expr><name>ast2obj_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"body"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>FunctionDef</name>.<name>decorator_list</name></name></expr></argument>,
                                     <argument><expr><name>ast2obj_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"decorator_list"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> ==
                    -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>ClassDef_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>ClassDef_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_identifier</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>ClassDef</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"name"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>ClassDef</name>.<name>bases</name></name></expr></argument>, <argument><expr><name>ast2obj_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"bases"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>ClassDef</name>.<name>body</name></name></expr></argument>, <argument><expr><name>ast2obj_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"body"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>ClassDef</name>.<name>decorator_list</name></name></expr></argument>,
                                     <argument><expr><name>ast2obj_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"decorator_list"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> ==
                    -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Return_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Return_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Return</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"value"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Delete_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Delete_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Delete</name>.<name>targets</name></name></expr></argument>, <argument><expr><name>ast2obj_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"targets"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Assign_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Assign_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Assign</name>.<name>targets</name></name></expr></argument>, <argument><expr><name>ast2obj_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"targets"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Assign</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"value"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>AugAssign_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>AugAssign_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>AugAssign</name>.<name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"target"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_operator</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>AugAssign</name>.<name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"op"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>AugAssign</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"value"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Print_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Print_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Print</name>.<name>dest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"dest"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Print</name>.<name>values</name></name></expr></argument>, <argument><expr><name>ast2obj_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"values"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_bool</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Print</name>.<name>nl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"nl"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>For_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>For_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>For</name>.<name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"target"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>For</name>.<name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"iter"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>For</name>.<name>body</name></name></expr></argument>, <argument><expr><name>ast2obj_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"body"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>For</name>.<name>orelse</name></name></expr></argument>, <argument><expr><name>ast2obj_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"orelse"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>While_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>While_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>While</name>.<name>test</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"test"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>While</name>.<name>body</name></name></expr></argument>, <argument><expr><name>ast2obj_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"body"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>While</name>.<name>orelse</name></name></expr></argument>, <argument><expr><name>ast2obj_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"orelse"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>If_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>If_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>If</name>.<name>test</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"test"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>If</name>.<name>body</name></name></expr></argument>, <argument><expr><name>ast2obj_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"body"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>If</name>.<name>orelse</name></name></expr></argument>, <argument><expr><name>ast2obj_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"orelse"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>With_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>With_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>With</name>.<name>context_expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"context_expr"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>With</name>.<name>optional_vars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"optional_vars"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> ==
                    -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>With</name>.<name>body</name></name></expr></argument>, <argument><expr><name>ast2obj_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"body"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Raise_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Raise_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Raise</name>.<name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"type"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Raise</name>.<name>inst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"inst"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Raise</name>.<name>tback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"tback"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>TryExcept_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>TryExcept_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>TryExcept</name>.<name>body</name></name></expr></argument>, <argument><expr><name>ast2obj_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"body"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>TryExcept</name>.<name>handlers</name></name></expr></argument>,
                                     <argument><expr><name>ast2obj_excepthandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"handlers"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>TryExcept</name>.<name>orelse</name></name></expr></argument>, <argument><expr><name>ast2obj_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"orelse"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>TryFinally_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>TryFinally_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>TryFinally</name>.<name>body</name></name></expr></argument>, <argument><expr><name>ast2obj_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"body"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>TryFinally</name>.<name>finalbody</name></name></expr></argument>, <argument><expr><name>ast2obj_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"finalbody"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Assert_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Assert_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Assert</name>.<name>test</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"test"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Assert</name>.<name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"msg"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Import_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Import_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Import</name>.<name>names</name></name></expr></argument>, <argument><expr><name>ast2obj_alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"names"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>ImportFrom_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>ImportFrom_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_identifier</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>ImportFrom</name>.<name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"module"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>ImportFrom</name>.<name>names</name></name></expr></argument>, <argument><expr><name>ast2obj_alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"names"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_int</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>ImportFrom</name>.<name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"level"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Exec_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Exec_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Exec</name>.<name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"body"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Exec</name>.<name>globals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"globals"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Exec</name>.<name>locals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"locals"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Global_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Global_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Global</name>.<name>names</name></name></expr></argument>, <argument><expr><name>ast2obj_identifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"names"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Expr_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Expr_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Expr</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"value"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Pass_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Pass_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <break>break;</break>
        </case><case>case <expr><name>Break_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Break_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <break>break;</break>
        </case><case>case <expr><name>Continue_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Continue_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <break>break;</break>
        </case>}</block></switch>
        <expr_stmt><expr><name>value</name> = <call><name>ast2obj_int</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"lineno"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
                <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> = <call><name>ast2obj_int</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>col_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"col_offset"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
                <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name>*</type>
<name>ast2obj_expr</name><parameter_list>(<param><decl><type><name>void</name>*</type> <name>_o</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>o</name> <init>= <expr>(<name>expr_ty</name>)<name>_o</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init>, *<name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>o</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>Py_None</name></expr>;</return>
        }</block></then></if>

        <switch>switch <condition>(<expr><name><name>o</name>-&gt;<name>kind</name></name></expr>)</condition> <block>{
        <case>case <expr><name>BoolOp_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>BoolOp_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_boolop</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>BoolOp</name>.<name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"op"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>BoolOp</name>.<name>values</name></name></expr></argument>, <argument><expr><name>ast2obj_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"values"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>BinOp_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>BinOp_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>BinOp</name>.<name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"left"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_operator</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>BinOp</name>.<name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"op"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>BinOp</name>.<name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"right"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>UnaryOp_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>UnaryOp_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_unaryop</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>UnaryOp</name>.<name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"op"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>UnaryOp</name>.<name>operand</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"operand"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Lambda_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Lambda_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_arguments</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Lambda</name>.<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"args"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Lambda</name>.<name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"body"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>IfExp_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>IfExp_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>IfExp</name>.<name>test</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"test"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>IfExp</name>.<name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"body"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>IfExp</name>.<name>orelse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"orelse"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Dict_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Dict_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Dict</name>.<name>keys</name></name></expr></argument>, <argument><expr><name>ast2obj_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"keys"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Dict</name>.<name>values</name></name></expr></argument>, <argument><expr><name>ast2obj_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"values"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>ListComp_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>ListComp_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>ListComp</name>.<name>elt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"elt"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>ListComp</name>.<name>generators</name></name></expr></argument>,
                                     <argument><expr><name>ast2obj_comprehension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"generators"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>GeneratorExp_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>GeneratorExp_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>GeneratorExp</name>.<name>elt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"elt"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>GeneratorExp</name>.<name>generators</name></name></expr></argument>,
                                     <argument><expr><name>ast2obj_comprehension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"generators"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Yield_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Yield_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Yield</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"value"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Compare_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Compare_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Compare</name>.<name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"left"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>asdl_seq_LEN</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Compare</name>.<name>ops</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>value</name> = <call><name>PyList_New</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for(<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                                <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>ast2obj_cmpop</name><argument_list>(<argument><expr>(<name>cmpop_ty</name>)<call><name>asdl_seq_GET</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Compare</name>.<name>ops</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
                }</block>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"ops"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Compare</name>.<name>comparators</name></name></expr></argument>, <argument><expr><name>ast2obj_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"comparators"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Call_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Call_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Call</name>.<name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"func"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Call</name>.<name>args</name></name></expr></argument>, <argument><expr><name>ast2obj_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"args"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Call</name>.<name>keywords</name></name></expr></argument>, <argument><expr><name>ast2obj_keyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"keywords"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Call</name>.<name>starargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"starargs"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Call</name>.<name>kwargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"kwargs"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Repr_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Repr_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Repr</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"value"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Num_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Num_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_object</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Num</name>.<name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"n"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Str_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Str_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_string</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Str</name>.<name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"s"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Attribute_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Attribute_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Attribute</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"value"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_identifier</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Attribute</name>.<name>attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"attr"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr_context</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Attribute</name>.<name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"ctx"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Subscript_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Subscript_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Subscript</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"value"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_slice</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Subscript</name>.<name>slice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"slice"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr_context</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Subscript</name>.<name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"ctx"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Name_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Name_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_identifier</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Name</name>.<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"id"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr_context</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Name</name>.<name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"ctx"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>List_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>List_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>List</name>.<name>elts</name></name></expr></argument>, <argument><expr><name>ast2obj_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"elts"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr_context</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>List</name>.<name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"ctx"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Tuple_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Tuple_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Tuple</name>.<name>elts</name></name></expr></argument>, <argument><expr><name>ast2obj_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"elts"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr_context</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Tuple</name>.<name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"ctx"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case>}</block></switch>
        <expr_stmt><expr><name>value</name> = <call><name>ast2obj_int</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"lineno"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
                <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> = <call><name>ast2obj_int</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>col_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"col_offset"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
                <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name>*</type> <name>ast2obj_expr_context</name><parameter_list>(<param><decl><type><name>expr_context_ty</name></type> <name>o</name></decl></param>)</parameter_list>
<block>{
        <switch>switch<condition>(<expr><name>o</name></expr>)</condition> <block>{
                <case>case <expr><name>Load</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Load_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>Load_singleton</name></expr>;</return>
                </case><case>case <expr><name>Store</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Store_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>Store_singleton</name></expr>;</return>
                </case><case>case <expr><name>Del</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Del_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>Del_singleton</name></expr>;</return>
                </case><case>case <expr><name>AugLoad</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>AugLoad_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>AugLoad_singleton</name></expr>;</return>
                </case><case>case <expr><name>AugStore</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>AugStore_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>AugStore_singleton</name></expr>;</return>
                </case><case>case <expr><name>Param</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Param_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>Param_singleton</name></expr>;</return>
                </case><default>default:
                        <comment type="block">/* should never happen, but just in case ... */</comment>
                        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_SystemError</name></expr></argument>, <argument><expr>"unknown expr_context found"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>NULL</name></expr>;</return>
        </default>}</block></switch>
}</block></function>
<function><type><name>PyObject</name>*</type>
<name>ast2obj_slice</name><parameter_list>(<param><decl><type><name>void</name>*</type> <name>_o</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>slice_ty</name></type> <name>o</name> <init>= <expr>(<name>slice_ty</name>)<name>_o</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init>, *<name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>o</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>Py_None</name></expr>;</return>
        }</block></then></if>

        <switch>switch <condition>(<expr><name><name>o</name>-&gt;<name>kind</name></name></expr>)</condition> <block>{
        <case>case <expr><name>Ellipsis_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Ellipsis_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <break>break;</break>
        </case><case>case <expr><name>Slice_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Slice_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Slice</name>.<name>lower</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"lower"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Slice</name>.<name>upper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"upper"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Slice</name>.<name>step</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"step"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>ExtSlice_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>ExtSlice_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>ExtSlice</name>.<name>dims</name></name></expr></argument>, <argument><expr><name>ast2obj_slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"dims"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case><case>case <expr><name>Index_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>Index_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>Index</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"value"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case>}</block></switch>
        <return>return <expr><name>result</name></expr>;</return>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name>*</type> <name>ast2obj_boolop</name><parameter_list>(<param><decl><type><name>boolop_ty</name></type> <name>o</name></decl></param>)</parameter_list>
<block>{
        <switch>switch<condition>(<expr><name>o</name></expr>)</condition> <block>{
                <case>case <expr><name>And</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>And_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>And_singleton</name></expr>;</return>
                </case><case>case <expr><name>Or</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Or_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>Or_singleton</name></expr>;</return>
                </case><default>default:
                        <comment type="block">/* should never happen, but just in case ... */</comment>
                        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_SystemError</name></expr></argument>, <argument><expr>"unknown boolop found"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>NULL</name></expr>;</return>
        </default>}</block></switch>
}</block></function>
<function><type><name>PyObject</name>*</type> <name>ast2obj_operator</name><parameter_list>(<param><decl><type><name>operator_ty</name></type> <name>o</name></decl></param>)</parameter_list>
<block>{
        <switch>switch<condition>(<expr><name>o</name></expr>)</condition> <block>{
                <case>case <expr><name>Add</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Add_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>Add_singleton</name></expr>;</return>
                </case><case>case <expr><name>Sub</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Sub_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>Sub_singleton</name></expr>;</return>
                </case><case>case <expr><name>Mult</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Mult_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>Mult_singleton</name></expr>;</return>
                </case><case>case <expr><name>Div</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Div_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>Div_singleton</name></expr>;</return>
                </case><case>case <expr><name>Mod</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Mod_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>Mod_singleton</name></expr>;</return>
                </case><case>case <expr><name>Pow</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Pow_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>Pow_singleton</name></expr>;</return>
                </case><case>case <expr><name>LShift</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>LShift_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>LShift_singleton</name></expr>;</return>
                </case><case>case <expr><name>RShift</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>RShift_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>RShift_singleton</name></expr>;</return>
                </case><case>case <expr><name>BitOr</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>BitOr_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>BitOr_singleton</name></expr>;</return>
                </case><case>case <expr><name>BitXor</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>BitXor_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>BitXor_singleton</name></expr>;</return>
                </case><case>case <expr><name>BitAnd</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>BitAnd_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>BitAnd_singleton</name></expr>;</return>
                </case><case>case <expr><name>FloorDiv</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>FloorDiv_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>FloorDiv_singleton</name></expr>;</return>
                </case><default>default:
                        <comment type="block">/* should never happen, but just in case ... */</comment>
                        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_SystemError</name></expr></argument>, <argument><expr>"unknown operator found"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>NULL</name></expr>;</return>
        </default>}</block></switch>
}</block></function>
<function><type><name>PyObject</name>*</type> <name>ast2obj_unaryop</name><parameter_list>(<param><decl><type><name>unaryop_ty</name></type> <name>o</name></decl></param>)</parameter_list>
<block>{
        <switch>switch<condition>(<expr><name>o</name></expr>)</condition> <block>{
                <case>case <expr><name>Invert</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Invert_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>Invert_singleton</name></expr>;</return>
                </case><case>case <expr><name>Not</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Not_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>Not_singleton</name></expr>;</return>
                </case><case>case <expr><name>UAdd</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>UAdd_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>UAdd_singleton</name></expr>;</return>
                </case><case>case <expr><name>USub</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>USub_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>USub_singleton</name></expr>;</return>
                </case><default>default:
                        <comment type="block">/* should never happen, but just in case ... */</comment>
                        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_SystemError</name></expr></argument>, <argument><expr>"unknown unaryop found"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>NULL</name></expr>;</return>
        </default>}</block></switch>
}</block></function>
<function><type><name>PyObject</name>*</type> <name>ast2obj_cmpop</name><parameter_list>(<param><decl><type><name>cmpop_ty</name></type> <name>o</name></decl></param>)</parameter_list>
<block>{
        <switch>switch<condition>(<expr><name>o</name></expr>)</condition> <block>{
                <case>case <expr><name>Eq</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Eq_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>Eq_singleton</name></expr>;</return>
                </case><case>case <expr><name>NotEq</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>NotEq_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>NotEq_singleton</name></expr>;</return>
                </case><case>case <expr><name>Lt</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Lt_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>Lt_singleton</name></expr>;</return>
                </case><case>case <expr><name>LtE</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>LtE_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>LtE_singleton</name></expr>;</return>
                </case><case>case <expr><name>Gt</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Gt_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>Gt_singleton</name></expr>;</return>
                </case><case>case <expr><name>GtE</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>GtE_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>GtE_singleton</name></expr>;</return>
                </case><case>case <expr><name>Is</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Is_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>Is_singleton</name></expr>;</return>
                </case><case>case <expr><name>IsNot</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>IsNot_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>IsNot_singleton</name></expr>;</return>
                </case><case>case <expr><name>In</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>In_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>In_singleton</name></expr>;</return>
                </case><case>case <expr><name>NotIn</name></expr>:
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>NotIn_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>NotIn_singleton</name></expr>;</return>
                </case><default>default:
                        <comment type="block">/* should never happen, but just in case ... */</comment>
                        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_SystemError</name></expr></argument>, <argument><expr>"unknown cmpop found"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>NULL</name></expr>;</return>
        </default>}</block></switch>
}</block></function>
<function><type><name>PyObject</name>*</type>
<name>ast2obj_comprehension</name><parameter_list>(<param><decl><type><name>void</name>*</type> <name>_o</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>comprehension_ty</name></type> <name>o</name> <init>= <expr>(<name>comprehension_ty</name>)<name>_o</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init>, *<name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>o</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>Py_None</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>comprehension_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"target"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"iter"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>ifs</name></name></expr></argument>, <argument><expr><name>ast2obj_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"ifs"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name>*</type>
<name>ast2obj_excepthandler</name><parameter_list>(<param><decl><type><name>void</name>*</type> <name>_o</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>excepthandler_ty</name></type> <name>o</name> <init>= <expr>(<name>excepthandler_ty</name>)<name>_o</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init>, *<name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>o</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>Py_None</name></expr>;</return>
        }</block></then></if>

        <switch>switch <condition>(<expr><name><name>o</name>-&gt;<name>kind</name></name></expr>)</condition> <block>{
        <case>case <expr><name>ExceptHandler_kind</name></expr>:
                <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>ExceptHandler_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>ExceptHandler</name>.<name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"type"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>ExceptHandler</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"name"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>v</name>.<name>ExceptHandler</name>.<name>body</name></name></expr></argument>, <argument><expr><name>ast2obj_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"body"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                        <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case>}</block></switch>
        <expr_stmt><expr><name>value</name> = <call><name>ast2obj_int</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"lineno"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
                <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> = <call><name>ast2obj_int</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>col_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"col_offset"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
                <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name>*</type>
<name>ast2obj_arguments</name><parameter_list>(<param><decl><type><name>void</name>*</type> <name>_o</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>arguments_ty</name></type> <name>o</name> <init>= <expr>(<name>arguments_ty</name>)<name>_o</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init>, *<name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>o</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>Py_None</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>arguments_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr><name>ast2obj_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"args"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> = <call><name>ast2obj_identifier</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>vararg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"vararg"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> = <call><name>ast2obj_identifier</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>kwarg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"kwarg"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> = <call><name>ast2obj_list</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>defaults</name></name></expr></argument>, <argument><expr><name>ast2obj_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"defaults"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name>*</type>
<name>ast2obj_keyword</name><parameter_list>(<param><decl><type><name>void</name>*</type> <name>_o</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>keyword_ty</name></type> <name>o</name> <init>= <expr>(<name>keyword_ty</name>)<name>_o</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init>, *<name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>o</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>Py_None</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>keyword_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name>value</name> = <call><name>ast2obj_identifier</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"arg"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> = <call><name>ast2obj_expr</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"value"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name>*</type>
<name>ast2obj_alias</name><parameter_list>(<param><decl><type><name>void</name>*</type> <name>_o</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>alias_ty</name></type> <name>o</name> <init>= <expr>(<name>alias_ty</name>)<name>_o</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init>, *<name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>o</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>Py_None</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>result</name> = <call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>alias_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name>value</name> = <call><name>ast2obj_identifier</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"name"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> = <call><name>ast2obj_identifier</name><argument_list>(<argument><expr><name><name>o</name>-&gt;<name>asname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"asname"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
                <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>


<function><type><name>int</name></type>
<name>obj2ast_mod</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>mod_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


        <if>if <condition>(<expr><name>obj</name> == <name>Py_None</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>NULL</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Module_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>body</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Module field \"body\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>body</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>body</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>stmt_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_stmt</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"body\" missing from Module"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Module</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Interactive_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>body</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Interactive field \"body\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>body</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>body</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>stmt_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_stmt</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"body\" missing from Interactive"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Interactive</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Expression_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>body</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>body</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"body\" missing from Expression"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Expression</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Suite_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>body</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Suite field \"body\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>body</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>body</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>stmt_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_stmt</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"body\" missing from Suite"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Suite</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"expected some sort of mod, but got %.400s"</expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>obj2ast_stmt</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>stmt_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>lineno</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>col_offset</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>obj</name> == <name>Py_None</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>NULL</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"lineno"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"lineno"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_int</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>lineno</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"lineno\" missing from stmt"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
        }</block></else></if>
        <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"col_offset"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"col_offset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_int</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"col_offset\" missing from stmt"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
        }</block></else></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>FunctionDef_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>identifier</name></type> <name>name</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>arguments_ty</name></type> <name>args</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>body</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>decorator_list</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"name"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"name"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_identifier</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"name\" missing from FunctionDef"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"args"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"args"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_arguments</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"args\" missing from FunctionDef"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"FunctionDef field \"body\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>body</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>body</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>stmt_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_stmt</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"body\" missing from FunctionDef"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"decorator_list"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"decorator_list"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"FunctionDef field \"decorator_list\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>decorator_list</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>decorator_list</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>decorator_list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"decorator_list\" missing from FunctionDef"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>FunctionDef</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>decorator_list</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>,
                                   <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>ClassDef_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>identifier</name></type> <name>name</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>bases</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>body</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>decorator_list</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"name"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"name"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_identifier</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"name\" missing from ClassDef"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"bases"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"bases"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"ClassDef field \"bases\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>bases</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>bases</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>bases</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"bases\" missing from ClassDef"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"ClassDef field \"body\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>body</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>body</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>stmt_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_stmt</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"body\" missing from ClassDef"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"decorator_list"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"decorator_list"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"ClassDef field \"decorator_list\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>decorator_list</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>decorator_list</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>decorator_list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"decorator_list\" missing from ClassDef"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>ClassDef</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>bases</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>decorator_list</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>,
                                <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Return_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>value</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Return</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Delete_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>targets</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"targets"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"targets"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Delete field \"targets\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>targets</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>targets</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"targets\" missing from Delete"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Delete</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Assign_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>targets</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"targets"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"targets"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Assign field \"targets\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>targets</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>targets</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"targets\" missing from Assign"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"value\" missing from Assign"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Assign</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>AugAssign_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>target</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>operator_ty</name></type> <name>op</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"target"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"target"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>target</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"target\" missing from AugAssign"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"op"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"op"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_operator</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>op</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"op\" missing from AugAssign"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"value\" missing from AugAssign"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>AugAssign</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Print_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>dest</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>values</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>bool</name></type> <name>nl</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"dest"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"dest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>dest</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>dest</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"values"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"values"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Print field \"values\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>values</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>values</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"values\" missing from Print"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"nl"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"nl"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_bool</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>nl</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"nl\" missing from Print"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Print</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nl</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>For_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>target</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>iter</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>body</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>orelse</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"target"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"target"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>target</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"target\" missing from For"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"iter"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"iter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>iter</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"iter\" missing from For"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"For field \"body\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>body</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>body</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>stmt_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_stmt</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"body\" missing from For"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"orelse"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"orelse"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"For field \"orelse\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>orelse</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>orelse</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>stmt_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_stmt</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>orelse</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"orelse\" missing from For"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>For</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>orelse</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>,
                           <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>While_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>test</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>body</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>orelse</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>test</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"test\" missing from While"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"While field \"body\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>body</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>body</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>stmt_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_stmt</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"body\" missing from While"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"orelse"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"orelse"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"While field \"orelse\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>orelse</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>orelse</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>stmt_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_stmt</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>orelse</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"orelse\" missing from While"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>While</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>orelse</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>If_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>test</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>body</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>orelse</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>test</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"test\" missing from If"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"If field \"body\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>body</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>body</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>stmt_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_stmt</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"body\" missing from If"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"orelse"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"orelse"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"If field \"orelse\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>orelse</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>orelse</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>stmt_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_stmt</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>orelse</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"orelse\" missing from If"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>If</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>orelse</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>With_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>context_expr</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>optional_vars</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>body</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"context_expr"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"context_expr"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>context_expr</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"context_expr\" missing from With"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"optional_vars"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"optional_vars"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>optional_vars</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>optional_vars</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"With field \"body\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>body</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>body</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>stmt_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_stmt</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"body\" missing from With"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>With</name><argument_list>(<argument><expr><name>context_expr</name></expr></argument>, <argument><expr><name>optional_vars</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>,
                            <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Raise_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>type</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>inst</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>tback</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"type"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>type</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"inst"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"inst"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>inst</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>inst</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"tback"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"tback"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>tback</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>tback</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Raise</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>inst</name></expr></argument>, <argument><expr><name>tback</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>TryExcept_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>body</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>handlers</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>orelse</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"TryExcept field \"body\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>body</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>body</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>stmt_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_stmt</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"body\" missing from TryExcept"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"handlers"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"handlers"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"TryExcept field \"handlers\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>handlers</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>handlers</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>excepthandler_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_excepthandler</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>handlers</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"handlers\" missing from TryExcept"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"orelse"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"orelse"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"TryExcept field \"orelse\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>orelse</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>orelse</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>stmt_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_stmt</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>orelse</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"orelse\" missing from TryExcept"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>TryExcept</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>handlers</name></expr></argument>, <argument><expr><name>orelse</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>,
                                 <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>TryFinally_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>body</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>finalbody</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"TryFinally field \"body\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>body</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>body</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>stmt_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_stmt</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"body\" missing from TryFinally"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"finalbody"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"finalbody"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"TryFinally field \"finalbody\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>finalbody</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>finalbody</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>stmt_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_stmt</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>finalbody</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"finalbody\" missing from TryFinally"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>TryFinally</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>finalbody</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Assert_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>test</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>msg</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>test</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"test\" missing from Assert"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"msg"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"msg"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>msg</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>msg</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Assert</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Import_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>names</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"names"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"names"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Import field \"names\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>names</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>names</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>alias_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_alias</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"names\" missing from Import"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Import</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>ImportFrom_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>identifier</name></type> <name>module</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>names</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"module"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"module"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_identifier</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>module</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"module\" missing from ImportFrom"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"names"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"names"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"ImportFrom field \"names\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>names</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>names</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>alias_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_alias</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"names\" missing from ImportFrom"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"level"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"level"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_int</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>level</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>level</name> = 0</expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>ImportFrom</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>names</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>,
                                  <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Exec_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>body</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>globals</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>locals</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>body</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"body\" missing from Exec"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"globals"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"globals"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>globals</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>globals</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"locals"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"locals"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>locals</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>locals</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Exec</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>globals</name></expr></argument>, <argument><expr><name>locals</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Global_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>names</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"names"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"names"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Global field \"names\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>names</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>names</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>identifier</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_identifier</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"names\" missing from Global"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Global</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Expr_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"value\" missing from Expr"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Expr</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Pass_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

                <expr_stmt><expr>*<name>out</name> = <call><name>Pass</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Break_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

                <expr_stmt><expr>*<name>out</name> = <call><name>Break</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Continue_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

                <expr_stmt><expr>*<name>out</name> = <call><name>Continue</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"expected some sort of stmt, but got %.400s"</expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>obj2ast_expr</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>expr_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>lineno</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>col_offset</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>obj</name> == <name>Py_None</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>NULL</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"lineno"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"lineno"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_int</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>lineno</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"lineno\" missing from expr"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
        }</block></else></if>
        <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"col_offset"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"col_offset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_int</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"col_offset\" missing from expr"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
        }</block></else></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>BoolOp_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>boolop_ty</name></type> <name>op</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>values</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"op"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"op"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_boolop</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>op</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"op\" missing from BoolOp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"values"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"values"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"BoolOp field \"values\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>values</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>values</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"values\" missing from BoolOp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>BoolOp</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>BinOp_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>left</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>operator_ty</name></type> <name>op</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>right</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"left"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"left"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>left</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"left\" missing from BinOp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"op"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"op"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_operator</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>op</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"op\" missing from BinOp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"right"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"right"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>right</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"right\" missing from BinOp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>BinOp</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>UnaryOp_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>unaryop_ty</name></type> <name>op</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>operand</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"op"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"op"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_unaryop</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>op</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"op\" missing from UnaryOp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"operand"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"operand"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>operand</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"operand\" missing from UnaryOp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>UnaryOp</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Lambda_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>arguments_ty</name></type> <name>args</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>body</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"args"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"args"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_arguments</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"args\" missing from Lambda"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>body</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"body\" missing from Lambda"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Lambda</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>IfExp_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>test</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>body</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>orelse</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>test</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"test\" missing from IfExp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>body</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"body\" missing from IfExp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"orelse"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"orelse"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>orelse</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"orelse\" missing from IfExp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>IfExp</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>orelse</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Dict_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>keys</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>values</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"keys"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"keys"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Dict field \"keys\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>keys</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>keys</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"keys\" missing from Dict"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"values"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"values"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Dict field \"values\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>values</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>values</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"values\" missing from Dict"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Dict</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>ListComp_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>elt</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>generators</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"elt"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"elt"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>elt</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"elt\" missing from ListComp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"generators"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"generators"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"ListComp field \"generators\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>generators</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>generators</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>comprehension_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_comprehension</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>generators</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"generators\" missing from ListComp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>ListComp</name><argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><name>generators</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>GeneratorExp_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>elt</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>generators</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"elt"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"elt"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>elt</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"elt\" missing from GeneratorExp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"generators"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"generators"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"GeneratorExp field \"generators\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>generators</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>generators</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>comprehension_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_comprehension</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>generators</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"generators\" missing from GeneratorExp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>GeneratorExp</name><argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><name>generators</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Yield_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>value</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Yield</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Compare_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>left</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_int_seq</name>*</type> <name>ops</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>comparators</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"left"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"left"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>left</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"left\" missing from Compare"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"ops"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"ops"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Compare field \"ops\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>ops</name> = <call><name>asdl_int_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>ops</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>cmpop_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_cmpop</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>ops</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"ops\" missing from Compare"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"comparators"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"comparators"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Compare field \"comparators\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>comparators</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>comparators</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>comparators</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"comparators\" missing from Compare"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Compare</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>ops</name></expr></argument>, <argument><expr><name>comparators</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>,
                               <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Call_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>func</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>args</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>keywords</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>starargs</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>kwargs</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"func"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"func"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>func</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"func\" missing from Call"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"args"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"args"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Call field \"args\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>args</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>args</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"args\" missing from Call"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"keywords"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"keywords"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Call field \"keywords\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>keywords</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>keywords</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>keyword_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_keyword</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"keywords\" missing from Call"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"starargs"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"starargs"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>starargs</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>starargs</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"kwargs"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"kwargs"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>kwargs</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>kwargs</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Call</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>starargs</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>,
                            <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Repr_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"value\" missing from Repr"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Repr</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Num_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>object</name></type> <name>n</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"n"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_object</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"n\" missing from Num"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Num</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Str_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"s"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_string</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"s\" missing from Str"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Str</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Attribute_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>identifier</name></type> <name>attr</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_context_ty</name></type> <name>ctx</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"value\" missing from Attribute"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"attr"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"attr"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_identifier</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>attr</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"attr\" missing from Attribute"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"ctx"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"ctx"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr_context</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"ctx\" missing from Attribute"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Attribute</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Subscript_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>slice_ty</name></type> <name>slice</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_context_ty</name></type> <name>ctx</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"value\" missing from Subscript"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"slice"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"slice"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_slice</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>slice</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"slice\" missing from Subscript"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"ctx"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"ctx"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr_context</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"ctx\" missing from Subscript"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Subscript</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>slice</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Name_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>identifier</name></type> <name>id</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_context_ty</name></type> <name>ctx</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"id"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"id"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_identifier</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>id</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"id\" missing from Name"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"ctx"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"ctx"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr_context</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"ctx\" missing from Name"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Name</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>List_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>elts</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_context_ty</name></type> <name>ctx</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"elts"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"elts"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"List field \"elts\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>elts</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>elts</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>elts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"elts\" missing from List"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"ctx"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"ctx"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr_context</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"ctx\" missing from List"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>List</name><argument_list>(<argument><expr><name>elts</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Tuple_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>elts</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_context_ty</name></type> <name>ctx</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"elts"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"elts"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Tuple field \"elts\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>elts</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>elts</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>elts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"elts\" missing from Tuple"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"ctx"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"ctx"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr_context</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"ctx\" missing from Tuple"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Tuple</name><argument_list>(<argument><expr><name>elts</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"expected some sort of expr, but got %.400s"</expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>obj2ast_expr_context</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>expr_context_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Load_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>Load</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Store_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>Store</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Del_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>Del</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>AugLoad_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>AugLoad</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>AugStore_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>AugStore</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Param_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>Param</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"expected some sort of expr_context, but got %.400s"</expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>obj2ast_slice</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>slice_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


        <if>if <condition>(<expr><name>obj</name> == <name>Py_None</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>NULL</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Ellipsis_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

                <expr_stmt><expr>*<name>out</name> = <call><name>Ellipsis</name><argument_list>(<argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Slice_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>lower</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>upper</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>step</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"lower"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"lower"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>lower</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>lower</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"upper"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"upper"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>upper</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>upper</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"step"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"step"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>step</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>step</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Slice</name><argument_list>(<argument><expr><name>lower</name></expr></argument>, <argument><expr><name>upper</name></expr></argument>, <argument><expr><name>step</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>ExtSlice_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>dims</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"dims"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"dims"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"ExtSlice field \"dims\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>dims</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>dims</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>slice_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_slice</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>dims</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"dims\" missing from ExtSlice"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>ExtSlice</name><argument_list>(<argument><expr><name>dims</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Index_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"value\" missing from Index"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>Index</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"expected some sort of slice, but got %.400s"</expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>obj2ast_boolop</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>boolop_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>And_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>And</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Or_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>Or</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"expected some sort of boolop, but got %.400s"</expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>obj2ast_operator</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>operator_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Add_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>Add</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Sub_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>Sub</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Mult_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>Mult</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Div_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>Div</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Mod_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>Mod</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Pow_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>Pow</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>LShift_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>LShift</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>RShift_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>RShift</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>BitOr_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>BitOr</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>BitXor_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>BitXor</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>BitAnd_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>BitAnd</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>FloorDiv_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>FloorDiv</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"expected some sort of operator, but got %.400s"</expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>obj2ast_unaryop</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>unaryop_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Invert_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>Invert</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Not_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>Not</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>UAdd_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>UAdd</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>USub_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>USub</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"expected some sort of unaryop, but got %.400s"</expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>obj2ast_cmpop</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>cmpop_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Eq_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>Eq</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>NotEq_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>NotEq</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Lt_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>Lt</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>LtE_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>LtE</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Gt_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>Gt</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>GtE_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>GtE</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Is_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>Is</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>IsNot_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>IsNot</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>In_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>In</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>NotIn_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>NotIn</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"expected some sort of cmpop, but got %.400s"</expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>obj2ast_comprehension</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>comprehension_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>target</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>iter</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>ifs</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"target"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"target"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>target</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"target\" missing from comprehension"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
        }</block></else></if>
        <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"iter"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"iter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>iter</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"iter\" missing from comprehension"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
        }</block></else></if>
        <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"ifs"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"ifs"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"comprehension field \"ifs\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <goto>goto <name>failed</name>;</goto>
                }</block></then></if>
                <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>ifs</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>ifs</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                        <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>ifs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"ifs\" missing from comprehension"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
        }</block></else></if>
        <expr_stmt><expr>*<name>out</name> = <call><name>comprehension</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>, <argument><expr><name>ifs</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>obj2ast_excepthandler</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>excepthandler_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>lineno</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>col_offset</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>obj</name> == <name>Py_None</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>out</name> = <name>NULL</name></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"lineno"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"lineno"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_int</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>lineno</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"lineno\" missing from excepthandler"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
        }</block></else></if>
        <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"col_offset"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"col_offset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_int</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>col_offset</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"col_offset\" missing from excepthandler"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
        }</block></else></if>
        <if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>ExceptHandler_type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>type</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>expr_ty</name></type> <name>name</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>body</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"type"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>type</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"name"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"name"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>name</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></else></if>
                <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"ExceptHandler field \"body\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <goto>goto <name>failed</name>;</goto>
                        }</block></then></if>
                        <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>body</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>body</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <decl_stmt><decl><type><name>stmt_ty</name></type> <name>value</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_stmt</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                                <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"body\" missing from ExceptHandler"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>1</expr>;</return>
                }</block></else></if>
                <expr_stmt><expr>*<name>out</name> = <call><name>ExceptHandler</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>col_offset</name></expr></argument>,
                                     <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>out</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <return>return <expr>0</expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"expected some sort of excepthandler, but got %.400s"</expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>obj2ast_arguments</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>arguments_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>args</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>identifier</name></type> <name>vararg</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>identifier</name></type> <name>kwarg</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>asdl_seq</name>*</type> <name>defaults</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"args"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"args"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"arguments field \"args\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <goto>goto <name>failed</name>;</goto>
                }</block></then></if>
                <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>args</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>args</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                        <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"args\" missing from arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
        }</block></else></if>
        <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"vararg"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"vararg"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_identifier</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>vararg</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
                <expr_stmt><expr><name>vararg</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"kwarg"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"kwarg"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_identifier</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>kwarg</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
                <expr_stmt><expr><name>kwarg</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"defaults"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"defaults"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"arguments field \"defaults\" must be a list, not a %.200s"</expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <goto>goto <name>failed</name>;</goto>
                }</block></then></if>
                <expr_stmt><expr><name>len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>defaults</name> = <call><name>asdl_seq_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>defaults</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                        <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                        <expr_stmt><expr><call><name>asdl_seq_SET</name><argument_list>(<argument><expr><name>defaults</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"defaults\" missing from arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
        }</block></else></if>
        <expr_stmt><expr>*<name>out</name> = <call><name>arguments</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vararg</name></expr></argument>, <argument><expr><name>kwarg</name></expr></argument>, <argument><expr><name>defaults</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>obj2ast_keyword</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>keyword_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>identifier</name></type> <name>arg</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"arg"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"arg"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_identifier</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"arg\" missing from keyword"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
        }</block></else></if>
        <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_expr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"value\" missing from keyword"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
        }</block></else></if>
        <expr_stmt><expr>*<name>out</name> = <call><name>keyword</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>obj2ast_alias</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>alias_ty</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>identifier</name></type> <name>name</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>identifier</name></type> <name>asname</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"name"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"name"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_identifier</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"required field \"name\" missing from alias"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
        }</block></else></if>
        <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"asname"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>tmp</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"asname"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><name>res</name> = <call><name>obj2ast_identifier</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>asname</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <goto>goto <name>failed</name>;</goto></then></if>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
                <expr_stmt><expr><name>asname</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr>*<name>out</name> = <call><name>alias</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>asname</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
<label><name>failed</name>:</label>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
}</block></function>


<function><type><name>PyMODINIT_FUNC</name></type>
<name>init_ast</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name>init_types</name><argument_list>()</argument_list></call></expr>)</condition><then> <return>return;</return></then></if>
        <expr_stmt><expr><name>m</name> = <call><name>Py_InitModule3</name><argument_list>(<argument><expr>"_ast"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>m</name></expr>)</condition><then> <return>return;</return></then></if>
        <expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AST"</expr></argument>, <argument><expr>(<name>PyObject</name>*)&amp;<name>AST_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"PyCF_ONLY_AST"</expr></argument>, <argument><expr><name>PyCF_ONLY_AST</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
                <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyModule_AddStringConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"__version__"</expr></argument>, <argument><expr>"62047"</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
                <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"mod"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>mod_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Module"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Module_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Interactive"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Interactive_type</name></expr></argument>)</argument_list></call>
            &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Expression"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Expression_type</name></expr></argument>)</argument_list></call> &lt;
            0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Suite"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Suite_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"stmt"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>stmt_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FunctionDef"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>FunctionDef_type</name></expr></argument>)</argument_list></call>
            &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ClassDef"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>ClassDef_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Return"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Return_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Delete"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Delete_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Assign"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Assign_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AugAssign"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>AugAssign_type</name></expr></argument>)</argument_list></call> &lt;
            0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Print"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Print_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"For"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>For_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"While"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>While_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"If"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>If_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"With"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>With_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Raise"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Raise_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"TryExcept"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>TryExcept_type</name></expr></argument>)</argument_list></call> &lt;
            0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"TryFinally"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>TryFinally_type</name></expr></argument>)</argument_list></call> &lt;
            0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Assert"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Assert_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Import"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Import_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ImportFrom"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>ImportFrom_type</name></expr></argument>)</argument_list></call> &lt;
            0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Exec"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Exec_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Global"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Global_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Expr"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Expr_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Pass"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Pass_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Break"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Break_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Continue"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Continue_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"expr"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>expr_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BoolOp"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>BoolOp_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BinOp"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>BinOp_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"UnaryOp"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>UnaryOp_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Lambda"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Lambda_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"IfExp"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>IfExp_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Dict"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Dict_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ListComp"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>ListComp_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"GeneratorExp"</expr></argument>,
            <argument><expr>(<name>PyObject</name>*)<name>GeneratorExp_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Yield"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Yield_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Compare"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Compare_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Call"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Call_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Repr"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Repr_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Num"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Num_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Str"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Str_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Attribute"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Attribute_type</name></expr></argument>)</argument_list></call> &lt;
            0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Subscript"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Subscript_type</name></expr></argument>)</argument_list></call> &lt;
            0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Name"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Name_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"List"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>List_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Tuple"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Tuple_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"expr_context"</expr></argument>,
            <argument><expr>(<name>PyObject</name>*)<name>expr_context_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Load"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Load_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Store"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Store_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Del"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Del_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AugLoad"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>AugLoad_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AugStore"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>AugStore_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Param"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Param_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"slice"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>slice_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Ellipsis"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Ellipsis_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Slice"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Slice_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ExtSlice"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>ExtSlice_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Index"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Index_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"boolop"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>boolop_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"And"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>And_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Or"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Or_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"operator"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>operator_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Add"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Add_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Sub"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Sub_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Mult"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Mult_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Div"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Div_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Mod"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Mod_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Pow"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Pow_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"LShift"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>LShift_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"RShift"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>RShift_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BitOr"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>BitOr_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BitXor"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>BitXor_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BitAnd"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>BitAnd_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FloorDiv"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>FloorDiv_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"unaryop"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>unaryop_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Invert"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Invert_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Not"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Not_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"UAdd"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>UAdd_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"USub"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>USub_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"cmpop"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>cmpop_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Eq"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Eq_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"NotEq"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>NotEq_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Lt"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Lt_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"LtE"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>LtE_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Gt"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Gt_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"GtE"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>GtE_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Is"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>Is_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"IsNot"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>IsNot_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"In"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>In_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"NotIn"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>NotIn_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"comprehension"</expr></argument>,
            <argument><expr>(<name>PyObject</name>*)<name>comprehension_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"excepthandler"</expr></argument>,
            <argument><expr>(<name>PyObject</name>*)<name>excepthandler_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ExceptHandler"</expr></argument>,
            <argument><expr>(<name>PyObject</name>*)<name>ExceptHandler_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"arguments"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>arguments_type</name></expr></argument>)</argument_list></call> &lt;
            0</expr>)</condition><then> <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"keyword"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>keyword_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"alias"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>alias_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
}</block></function>


<function><type><name>PyObject</name>*</type> <name>PyAST_mod2obj</name><parameter_list>(<param><decl><type><name>mod_ty</name></type> <name>t</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>init_types</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>ast2obj_mod</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* mode is 0 for "exec", 1 for "eval" and 2 for "single" input */</comment>
<function><type><name>mod_ty</name></type> <name>PyAST_obj2mod</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>ast</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>, <param><decl><type><name>int</name></type> <name>mode</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>mod_ty</name></type> <name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name><name>req_type</name><index>[]</index></name> <init>= <expr><block>{<expr>(<name>PyObject</name>*)<name>Module_type</name></expr>, <expr>(<name>PyObject</name>*)<name>Expression_type</name></expr>,
                            <expr>(<name>PyObject</name>*)<name>Interactive_type</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name><name>req_name</name><index>[]</index></name> <init>= <expr><block>{<expr>"Module"</expr>, <expr>"Expression"</expr>, <expr>"Interactive"</expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>0 &lt;= <name>mode</name> &amp;&amp; <name>mode</name> &lt;= 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>init_types</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>req_type</name><index>[<expr><name>mode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"expected %s node, got %.400s"</expr></argument>,
                     <argument><expr><name><name>req_name</name><index>[<expr><name>mode</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><call><name>obj2ast_mod</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr>&amp;<name>res</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then>
    <else>else
        <return>return <expr><name>res</name></expr>;</return></else></if>
}</block></function>

<function><type><name>int</name></type> <name>PyAST_Check</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>init_types</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)&amp;<name>AST_type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


</unit>
