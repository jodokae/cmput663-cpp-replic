<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Python/dynload_next.c">
<comment type="block">/* Support for dynamic loading of extension modules on Mac OS X
** All references to "NeXT" are for historical reasons.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"importdl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach-o/dyld.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> struct <name>filedescr</name></type> <name><name>_PyImport_DynLoadFiletab</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>".so"</expr>, <expr>"rb"</expr>, <expr><name>C_EXTENSION</name></expr>}</block></expr>,
	<expr><block>{<expr>"module.so"</expr>, <expr>"rb"</expr>, <expr><name>C_EXTENSION</name></expr>}</block></expr>,
	<expr><block>{<expr>0</expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
** Python modules are Mach-O MH_BUNDLE files. The best way to load these
** is each in a private namespace, so you can load, say, a module bar and a
** module foo.bar. If we load everything in the global namespace the two
** initbar() symbols will conflict.
** However, it seems some extension packages depend upon being able to access
** each others' global symbols. There seems to be no way to eat our cake and
** have it, so the USE_DYLD_GLOBAL_NAMESPACE define determines which behaviour
** you get.
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_DYLD_GLOBAL_NAMESPACE</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKOPTIONS</name></cpp:macro> <cpp:value>NSLINKMODULE_OPTION_BINDNOW|NSLINKMODULE_OPTION_RETURN_ON_ERROR</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKOPTIONS</name></cpp:macro> <cpp:value>NSLINKMODULE_OPTION_BINDNOW| \
	NSLINKMODULE_OPTION_RETURN_ON_ERROR|NSLINKMODULE_OPTION_PRIVATE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>dl_funcptr</name></type> <name>_PyImport_GetDynLoadFunc</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fqname</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>shortname</name></decl></param>,
					<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pathname</name></decl></param>, <param><decl><type><name>FILE</name> *</type><name>fp</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>dl_funcptr</name></type> <name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>funcname</name><index>[<expr>258</expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NSObjectFileImageReturnCode</name></type> <name>rc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NSObjectFileImage</name></type> <name>image</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NSModule</name></type> <name>newModule</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NSSymbol</name></type> <name>theSym</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errString</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>errBuf</name><index>[<expr>512</expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>funcname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"_init%.200s"</expr></argument>, <argument><expr><name>shortname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_DYLD_GLOBAL_NAMESPACE</name></cpp:ifdef>
	<if>if <condition>(<expr><call><name>NSIsSymbolNameDefined</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>theSym</name> = <call><name>NSLookupAndBindSymbol</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> = (<name>dl_funcptr</name>)<call><name>NSAddressOfSymbol</name><argument_list>(<argument><expr><name>theSym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>p</name></expr>;</return>
	}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>rc</name> = <call><name>NSCreateObjectFileImageFromFile</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr>&amp;<name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch<condition>(<expr><name>rc</name></expr>)</condition> <block>{
		<default>default:
		</default><case>case <expr><name>NSObjectFileImageFailure</name></expr>:
		</case><case>case <expr><name>NSObjectFileImageFormat</name></expr>:
			<comment type="block">/* for these a message is printed on stderr by dyld */</comment>
			<expr_stmt><expr><name>errString</name> = "Can't create object file image"</expr>;</expr_stmt>
		<break>break;</break>
		</case><case>case <expr><name>NSObjectFileImageSuccess</name></expr>:
			<expr_stmt><expr><name>errString</name> = <name>NULL</name></expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>NSObjectFileImageInappropriateFile</name></expr>:
			<expr_stmt><expr><name>errString</name> = "Inappropriate file type for dynamic loading"</expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>NSObjectFileImageArch</name></expr>:
			<expr_stmt><expr><name>errString</name> = "Wrong CPU type in object file"</expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>NSObjectFileImageAccess</name></expr>:
			<expr_stmt><expr><name>errString</name> = "Can't read object file (no access)"</expr>;</expr_stmt>
			<break>break;</break>
	</case>}</block></switch>
	<if>if <condition>(<expr><name>errString</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>newModule</name> = <call><name>NSLinkModule</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>LINKOPTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>newModule</name> == <name>NULL</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>errNo</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fileName</name></decl>, *<decl><type ref="prev"/><name>moreErrorStr</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>NSLinkEditErrors</name></type> <name>c</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>NSLinkEditError</name><argument_list>( <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>&amp;<name>errNo</name></expr></argument>, <argument><expr>&amp;<name>fileName</name></expr></argument>, <argument><expr>&amp;<name>moreErrorStr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>errBuf</name></expr></argument>, <argument><expr>512</expr></argument>, <argument><expr>"Failure linking new module: %s: %s"</expr></argument>, 
					<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>moreErrorStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>errString</name> = <name>errBuf</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<if>if <condition>(<expr><name>errString</name> != <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ImportError</name></expr></argument>, <argument><expr><name>errString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_DYLD_GLOBAL_NAMESPACE</name></cpp:ifdef>
	<if>if <condition>(<expr>!<call><name>NSIsSymbolNameDefined</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<comment type="block">/* UnlinkModule() isn't implemented in current versions, but calling it does no harm */</comment>
		<comment type="block">/* NSUnLinkModule(newModule, FALSE); removed: causes problems for ObjC code */</comment>
		<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ImportError</name></expr></argument>,
				 <argument><expr>"Loaded module does not contain symbol %.200s"</expr></argument>,
				 <argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>theSym</name> = <call><name>NSLookupAndBindSymbol</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>theSym</name> = <call><name>NSLookupSymbolInModule</name><argument_list>(<argument><expr><name>newModule</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>( <expr><name>theSym</name> == <name>NULL</name></expr> )</condition><then> <block>{
		<comment type="block">/* NSUnLinkModule(newModule, FALSE); removed: causes problems for ObjC code */</comment>
		<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ImportError</name></expr></argument>,
				 <argument><expr>"Loaded module does not contain symbol %.200s"</expr></argument>,
				 <argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>p</name> = (<name>dl_funcptr</name>)<call><name>NSAddressOfSymbol</name><argument_list>(<argument><expr><name>theSym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>p</name></expr>;</return>
}</block></function>
</unit>
