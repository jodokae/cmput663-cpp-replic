<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Python/atof.c">
<comment type="block">/* Just in case you haven't got an atof() around...
   This one doesn't check for bad syntax or overflow,
   and is slow and inaccurate.
   But it's good enough for the occasional string literal... */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pyconfig.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<function><type><name>double</name></type> <name>atof</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>double</name></type> <name>a</name> <init>= <expr>0.0</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
	<while>while <condition>(<expr>(<name>c</name> = *<name>s</name>++) != '\0' &amp;&amp; <call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
		<expr_stmt><expr><name>a</name> = <name>a</name>*10.0 + (<name>c</name> - '0')</expr>;</expr_stmt>
	}</block></while>
	<if>if <condition>(<expr><name>c</name> == '.'</expr>)</condition><then> <block>{
		<while>while <condition>(<expr>(<name>c</name> = *<name>s</name>++) != '\0' &amp;&amp; <call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
			<expr_stmt><expr><name>a</name> = <name>a</name>*10.0 + (<name>c</name> - '0')</expr>;</expr_stmt>
			<expr_stmt><expr><name>e</name> = <name>e</name>-1</expr>;</expr_stmt>
		}</block></while>
	}</block></then></if>
	<if>if <condition>(<expr><name>c</name> == 'e' || <name>c</name> == 'E'</expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>c</name> = *<name>s</name>++</expr>;</expr_stmt>
		<if>if <condition>(<expr><name>c</name> == '+'</expr>)</condition><then>
			<expr_stmt><expr><name>c</name> = *<name>s</name>++</expr>;</expr_stmt></then>
		<else>else <if>if <condition>(<expr><name>c</name> == '-'</expr>)</condition><then> <block>{
			<expr_stmt><expr><name>c</name> = *<name>s</name>++</expr>;</expr_stmt>
			<expr_stmt><expr><name>sign</name> = -1</expr>;</expr_stmt>
		}</block></then></if></else></if>
		<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
			<expr_stmt><expr><name>i</name> = <name>i</name>*10 + (<name>c</name> - '0')</expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name> = *<name>s</name>++</expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><name>e</name> += <name>i</name>*<name>sign</name></expr>;</expr_stmt>
	}</block></then></if>
	<while>while <condition>(<expr><name>e</name> &gt; 0</expr>)</condition> <block>{
		<expr_stmt><expr><name>a</name> *= 10.0</expr>;</expr_stmt>
		<expr_stmt><expr><name>e</name>--</expr>;</expr_stmt>
	}</block></while>
	<while>while <condition>(<expr><name>e</name> &lt; 0</expr>)</condition> <block>{
		<expr_stmt><expr><name>a</name> *= 0.1</expr>;</expr_stmt>
		<expr_stmt><expr><name>e</name>++</expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>a</name></expr>;</return>
}</block></function>
</unit>
