<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Python/pyfpe.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pyconfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pyfpe.h"</cpp:file></cpp:include>
<comment type="block">/* 
 * The signal handler for SIGFPE is actually declared in an external
 * module fpectl, or as preferred by the user.  These variable
 * definitions are required in order to compile Python without
 * getting missing externals, but to actually handle SIGFPE requires
 * defining a handler and enabling generation of SIGFPE.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WANT_SIGFPE_HANDLER</name></cpp:ifdef>
<decl_stmt><decl><type><name>jmp_buf</name></type> <name>PyFPE_jbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>PyFPE_counter</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Have this outside the above #ifdef, since some picky ANSI compilers issue a 
   warning when compiling an empty file. */</comment>

<function><type><name>double</name></type>
<name>PyFPE_dummy</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr>1.0</expr>;</return>
}</block></function>
</unit>
