<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Python/thread_beos.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;kernel/OS.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;support/SupportDefs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<comment type="block">/* ----------------------------------------------------------------------
 * Fast locking mechanism described by Benoit Schillings (benoit@be.com)
 * in the Be Developer's Newsletter, Issue #26 (http://www.be.com/).
 */</comment>
<typedef>typedef <type><struct>struct <name>benaphore</name> <block>{
	<decl_stmt><decl><type><name>sem_id</name></type> <name>_sem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>  <name>_atom</name></decl>;</decl_stmt>
}</block></struct></type> <name>benaphore_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>status_t</name></type> <name>benaphore_create</name><parameter_list>( <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>benaphore_t</name> *</type><name>ben</name></decl></param> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>status_t</name></type> <name>benaphore_destroy</name><parameter_list>( <param><decl><type><name>benaphore_t</name> *</type><name>ben</name></decl></param> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>status_t</name></type> <name>benaphore_lock</name><parameter_list>( <param><decl><type><name>benaphore_t</name> *</type><name>ben</name></decl></param> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>status_t</name></type> <name>benaphore_timedlock</name><parameter_list>( <param><decl><type><name>benaphore_t</name> *</type><name>ben</name></decl></param>, <param><decl><type><name>bigtime_t</name></type> <name>micros</name></decl></param> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>status_t</name></type> <name>benaphore_unlock</name><parameter_list>( <param><decl><type><name>benaphore_t</name> *</type><name>ben</name></decl></param> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>status_t</name></type> <name>benaphore_create</name><parameter_list>( <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>benaphore_t</name> *</type><name>ben</name></decl></param> )</parameter_list>
<block>{
	<if>if<condition>( <expr><name>ben</name> != <name>NULL</name></expr> )</condition><then> <block>{
		<expr_stmt><expr><name><name>ben</name>-&gt;<name>_atom</name></name> = 0</expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ben</name>-&gt;<name>_sem</name></name> = <call><name>create_sem</name><argument_list>( <argument><expr>0</expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		
		<if>if<condition>( <expr><name><name>ben</name>-&gt;<name>_sem</name></name> &lt; <name>B_NO_ERROR</name></expr> )</condition><then> <block>{
			<return>return <expr><name>B_BAD_SEM_ID</name></expr>;</return>
		}</block></then></if>
	}</block></then> <else>else <block>{
		<return>return <expr><name>EFAULT</name></expr>;</return>
	}</block></else></if>
	
	<return>return <expr><name>EOK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>status_t</name></type> <name>benaphore_destroy</name><parameter_list>( <param><decl><type><name>benaphore_t</name> *</type><name>ben</name></decl></param> )</parameter_list>
<block>{
	<if>if<condition>( <expr><name><name>ben</name>-&gt;<name>_sem</name></name> &gt;= <name>B_NO_ERROR</name></expr> )</condition><then> <block>{
		<decl_stmt><decl><type><name>status_t</name></type> <name>retval</name> <init>= <expr><call><name>benaphore_timedlock</name><argument_list>( <argument><expr><name>ben</name></expr></argument>, <argument><expr>0</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if>if<condition>( <expr><name>retval</name> == <name>EOK</name> || <name>retval</name> == <name>EWOULDBLOCK</name></expr> )</condition><then> <block>{
			<decl_stmt><decl><type><name>status_t</name></type> <name>del_retval</name> <init>= <expr><call><name>delete_sem</name><argument_list>( <argument><expr><name><name>ben</name>-&gt;<name>_sem</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<return>return <expr><name>del_retval</name></expr>;</return>
		}</block></then></if>
	}</block></then></if>

	<return>return <expr><name>B_BAD_SEM_ID</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>status_t</name></type> <name>benaphore_lock</name><parameter_list>( <param><decl><type><name>benaphore_t</name> *</type><name>ben</name></decl></param> )</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int32</name></type> <name>prev</name> <init>= <expr><call><name>atomic_add</name><argument_list>( <argument><expr>&amp;(<name><name>ben</name>-&gt;<name>_atom</name></name>)</expr></argument>, <argument><expr>1</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<if>if<condition>( <expr><name>prev</name> &gt; 0</expr> )</condition><then> <block>{
		<return>return <expr><call><name>acquire_sem</name><argument_list>( <argument><expr><name><name>ben</name>-&gt;<name>_sem</name></name></expr></argument> )</argument_list></call></expr>;</return>
	}</block></then></if>
	
	<return>return <expr><name>EOK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>status_t</name></type> <name>benaphore_timedlock</name><parameter_list>( <param><decl><type><name>benaphore_t</name> *</type><name>ben</name></decl></param>, <param><decl><type><name>bigtime_t</name></type> <name>micros</name></decl></param> )</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int32</name></type> <name>prev</name> <init>= <expr><call><name>atomic_add</name><argument_list>( <argument><expr>&amp;(<name><name>ben</name>-&gt;<name>_atom</name></name>)</expr></argument>, <argument><expr>1</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<if>if<condition>( <expr><name>prev</name> &gt; 0</expr> )</condition><then> <block>{
		<decl_stmt><decl><type><name>status_t</name></type> <name>retval</name> <init>= <expr><call><name>acquire_sem_etc</name><argument_list>( <argument><expr><name><name>ben</name>-&gt;<name>_sem</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>B_TIMEOUT</name></expr></argument>, <argument><expr><name>micros</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<switch>switch<condition>( <expr><name>retval</name></expr> )</condition> <block>{
		<case>case <expr><name>B_WOULD_BLOCK</name></expr>:	<comment type="block">/* Fall through... */</comment>
		</case><case>case <expr><name>B_TIMED_OUT</name></expr>:
			<return>return <expr><name>EWOULDBLOCK</name></expr>;</return>
			<break>break;</break>
		</case><case>case <expr><name>B_OK</name></expr>:
			<return>return <expr><name>EOK</name></expr>;</return>
			<break>break;</break>
		</case><default>default:
			<return>return <expr><name>retval</name></expr>;</return>
			<break>break;</break>
		</default>}</block></switch>
	}</block></then></if>
	
	<return>return <expr><name>EOK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>status_t</name></type> <name>benaphore_unlock</name><parameter_list>( <param><decl><type><name>benaphore_t</name> *</type><name>ben</name></decl></param> )</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int32</name></type> <name>prev</name> <init>= <expr><call><name>atomic_add</name><argument_list>( <argument><expr>&amp;(<name><name>ben</name>-&gt;<name>_atom</name></name>)</expr></argument>, <argument><expr>-1</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<if>if<condition>( <expr><name>prev</name> &gt; 1</expr> )</condition><then> <block>{
		<return>return <expr><call><name>release_sem</name><argument_list>( <argument><expr><name><name>ben</name>-&gt;<name>_sem</name></name></expr></argument> )</argument_list></call></expr>;</return>
	}</block></then></if>
	
	<return>return <expr><name>EOK</name></expr>;</return>
}</block></function>

<comment type="block">/* ----------------------------------------------------------------------
 * Initialization.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>PyThread__init_thread</name><parameter_list>( <param><decl><type><name>void</name></type></decl></param> )</parameter_list>
<block>{
	<comment type="block">/* Do nothing. */</comment>
	<return>return;</return>
}</block></function>

<comment type="block">/* ----------------------------------------------------------------------
 * Thread support.
 *
 * Only ANSI C, renamed functions here; you can't use K&amp;R on BeOS,
 * and there's no legacy thread module to support.
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>int32</name></type> <name>thread_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

<function><type><name>long</name></type> <name>PyThread_start_new_thread</name><parameter_list>( <param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param> )</parameter_list>
<block>{
	<decl_stmt><decl><type><name>status_t</name></type> <name>success</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>thread_id</name></type> <name>tid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>B_OS_NAME_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>this_thread</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_start_new_thread called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We are so very thread-safe... */</comment>
	<expr_stmt><expr><name>this_thread</name> = <call><name>atomic_add</name><argument_list>( <argument><expr>&amp;<name>thread_count</name></expr></argument>, <argument><expr>1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>,
		      <argument><expr>"python thread (%d)"</expr></argument>, <argument><expr><name>this_thread</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tid</name> = <call><name>spawn_thread</name><argument_list>( <argument><expr>(<name>thread_func</name>)<name>func</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
	                    <argument><expr><name>B_NORMAL_PRIORITY</name></expr></argument>, <argument><expr><name>arg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>( <expr><name>tid</name> &gt; <name>B_NO_ERROR</name></expr> )</condition><then> <block>{
		<expr_stmt><expr><name>success</name> = <call><name>resume_thread</name><argument_list>( <argument><expr><name>tid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<return>return <expr>( <name>success</name> == <name>B_NO_ERROR</name> ? <name>tid</name> : -1 )</expr>;</return>
}</block></function>

<function><type><name>long</name></type> <name>PyThread_get_thread_ident</name><parameter_list>( <param><decl><type><name>void</name></type></decl></param> )</parameter_list>
<block>{
	<comment type="block">/* Presumed to return the current thread's ID... */</comment>
	<decl_stmt><decl><type><name>thread_id</name></type> <name>tid</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>tid</name> = <call><name>find_thread</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	
	<return>return <expr>( <name>tid</name> != <name>B_NAME_NOT_FOUND</name> ? <name>tid</name> : -1 )</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_PyThread_exit_thread</name><parameter_list>( <param><decl><type><name>int</name></type> <name>no_cleanup</name></decl></param> )</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int32</name></type> <name>threads</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_exit_thread called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Thread-safe way to read a variable without a mutex: */</comment>
	<expr_stmt><expr><name>threads</name> = <call><name>atomic_add</name><argument_list>( <argument><expr>&amp;<name>thread_count</name></expr></argument>, <argument><expr>0</expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<if>if<condition>( <expr><name>threads</name> == 0</expr> )</condition><then> <block>{
		<comment type="block">/* No threads around, so exit main(). */</comment>
		<if>if<condition>( <expr><name>no_cleanup</name></expr> )</condition><then> <block>{
			<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then> <else>else <block>{
		<comment type="block">/* Oh, we're a thread, let's try to exit gracefully... */</comment>
		<expr_stmt><expr><call><name>exit_thread</name><argument_list>( <argument><expr><name>B_NO_ERROR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>PyThread_exit_thread</name><parameter_list>( <param><decl><type><name>void</name></type></decl></param> )</parameter_list>
<block>{
	<expr_stmt><expr><call><name>do_PyThread_exit_thread</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>PyThread__exit_thread</name><parameter_list>( <param><decl><type><name>void</name></type></decl></param> )</parameter_list>
<block>{
	<expr_stmt><expr><call><name>do_PyThread_exit_thread</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_EXIT_PROG</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_PyThread_exit_prog</name><parameter_list>( <param><decl><type><name>int</name></type> <name>status</name></decl></param>, <param><decl><type><name>int</name></type> <name>no_cleanup</name></decl></param> )</parameter_list>
<block>{
	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_exit_prog(%d) called\n", <name>status</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* No need to do anything, the threads get torn down if main() exits. */</comment>

	<if>if <condition>(<expr><name>no_cleanup</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>PyThread_exit_prog</name><parameter_list>( <param><decl><type><name>int</name></type> <name>status</name></decl></param> )</parameter_list>
<block>{
	<expr_stmt><expr><call><name>do_PyThread_exit_prog</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>PyThread__exit_prog</name><parameter_list>( <param><decl><type><name>int</name></type> <name>status</name></decl></param> )</parameter_list>
<block>{
	<expr_stmt><expr><call><name>do_PyThread_exit_prog</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NO_EXIT_PROG */</comment>

<comment type="block">/* ----------------------------------------------------------------------
 * Lock support.
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>int32</name></type> <name>lock_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

<function><type><name>PyThread_type_lock</name></type> <name>PyThread_allocate_lock</name><parameter_list>( <param><decl><type><name>void</name></type></decl></param> )</parameter_list>
<block>{
	<decl_stmt><decl><type><name>benaphore_t</name> *</type><name>lock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>status_t</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>B_OS_NAME_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>this_lock</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_allocate_lock called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>lock</name> = (<name>benaphore_t</name> *)<call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>benaphore_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>( <expr><name>lock</name> == <name>NULL</name></expr> )</condition><then> <block>{
		<comment type="block">/* TODO: that's bad, raise MemoryError */</comment>
		<return>return <expr>(<name>PyThread_type_lock</name>)<name>NULL</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><name>this_lock</name> = <call><name>atomic_add</name><argument_list>( <argument><expr>&amp;<name>lock_count</name></expr></argument>, <argument><expr>1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"python lock (%d)"</expr></argument>, <argument><expr><name>this_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>retval</name> = <call><name>benaphore_create</name><argument_list>( <argument><expr><name>name</name></expr></argument>, <argument><expr><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>( <expr><name>retval</name> != <name>EOK</name></expr> )</condition><then> <block>{
		<comment type="block">/* TODO: that's bad, raise an exception */</comment>
		<return>return <expr>(<name>PyThread_type_lock</name>)<name>NULL</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_allocate_lock() -&gt; %p\n", <name>lock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>(<name>PyThread_type_lock</name>) <name>lock</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>PyThread_free_lock</name><parameter_list>( <param><decl><type><name>PyThread_type_lock</name></type> <name>lock</name></decl></param> )</parameter_list>
<block>{
	<decl_stmt><decl><type><name>status_t</name></type> <name>retval</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_free_lock(%p) called\n", <name>lock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>retval</name> = <call><name>benaphore_destroy</name><argument_list>( <argument><expr>(<name>benaphore_t</name> *)<name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>( <expr><name>retval</name> != <name>EOK</name></expr> )</condition><then> <block>{
		<comment type="block">/* TODO: that's bad, raise an exception */</comment>
		<return>return;</return>
	}</block></then></if>
}</block></function>

<function><type><name>int</name></type> <name>PyThread_acquire_lock</name><parameter_list>( <param><decl><type><name>PyThread_type_lock</name></type> <name>lock</name></decl></param>, <param><decl><type><name>int</name></type> <name>waitflag</name></decl></param> )</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>success</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>status_t</name></type> <name>retval</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_acquire_lock(%p, %d) called\n", <name>lock</name>, <name>waitflag</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if<condition>( <expr><name>waitflag</name></expr> )</condition><then> <block>{
		<expr_stmt><expr><name>retval</name> = <call><name>benaphore_lock</name><argument_list>( <argument><expr>(<name>benaphore_t</name> *)<name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
		<expr_stmt><expr><name>retval</name> = <call><name>benaphore_timedlock</name><argument_list>( <argument><expr>(<name>benaphore_t</name> *)<name>lock</name></expr></argument>, <argument><expr>0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	
	<if>if<condition>( <expr><name>retval</name> == <name>EOK</name></expr> )</condition><then> <block>{
		<expr_stmt><expr><name>success</name> = 1</expr>;</expr_stmt>
	}</block></then> <else>else <block>{
		<expr_stmt><expr><name>success</name> = 0</expr>;</expr_stmt>
		
		<comment type="block">/* TODO: that's bad, raise an exception */</comment>
	}</block></else></if>

	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_acquire_lock(%p, %d) -&gt; %d\n", <name>lock</name>, <name>waitflag</name>, <name>success</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>success</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>PyThread_release_lock</name><parameter_list>( <param><decl><type><name>PyThread_type_lock</name></type> <name>lock</name></decl></param> )</parameter_list>
<block>{
	<decl_stmt><decl><type><name>status_t</name></type> <name>retval</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_release_lock(%p) called\n", <name>lock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>retval</name> = <call><name>benaphore_unlock</name><argument_list>( <argument><expr>(<name>benaphore_t</name> *)<name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>( <expr><name>retval</name> != <name>EOK</name></expr> )</condition><then> <block>{
		<comment type="block">/* TODO: that's bad, raise an exception */</comment>
		<return>return;</return>
	}</block></then></if>
}</block></function>
</unit>
