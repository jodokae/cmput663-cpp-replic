<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Python/mactoolboxglue.c"><comment type="block">/***********************************************************
Copyright 1991-1997 by Stichting Mathematisch Centrum, Amsterdam,
The Netherlands.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Stichting Mathematisch
Centrum or CWI not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior permission.

STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO
THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS, IN NO EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE
FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

******************************************************************/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pymactoolbox.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>	<comment type="block">/* for ntohl, htonl */</comment>


<comment type="block">/* Like strerror() but for Mac OS error numbers */</comment>
<function><type><name>char</name> *</type>
<name>PyMac_StrError</name><parameter_list>(<param><decl><type><name>int</name></type> <name>err</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>m</name> = <call><name>PyImport_ImportModuleNoBlock</name><argument_list>(<argument><expr>"MacOS"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>m</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name>Py_VerboseFlag</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> = <name>NULL</name></expr>;</expr_stmt>
	}</block></then>
	<else>else <block>{
		<expr_stmt><expr><name>rv</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"GetErrorString"</expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr>!<name>rv</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></else></if>
	<if>if <condition>(<expr>!<name>rv</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>buf</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt>
	}</block></then>
	<else>else <block>{
		<decl_stmt><decl><type><name>char</name> *</type><name>input</name> <init>= <expr><call><name>PyString_AsString</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr>!<name>input</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>buf</name></expr>;</return>
}</block></function>

<comment type="block">/* Exception object shared by all Mac specific modules for Mac OS errors */</comment>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>PyMac_OSErrException</name></decl>;</decl_stmt>

<comment type="block">/* Initialize and return PyMac_OSErrException */</comment>
<function><type><name>PyObject</name> *</type>
<name>PyMac_GetOSErrException</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>PyMac_OSErrException</name> == <name>NULL</name></expr>)</condition><then>
		<expr_stmt><expr><name>PyMac_OSErrException</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"MacOS.Error"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<return>return <expr><name>PyMac_OSErrException</name></expr>;</return>
}</block></function>

<comment type="block">/* Set a MAC-specific error from errno, and return NULL; return None if no error */</comment>
<function><type><name>PyObject</name> *</type> 
<name>PyErr_Mac</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>eobj</name></decl></param>, <param><decl><type><name>int</name></type> <name>err</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>msg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr><name>err</name> == 0 &amp;&amp; !<call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>Py_None</name></expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr><name>err</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>msg</name> = <call><name>PyMac_StrError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>v</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(is)"</expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>eobj</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<comment type="block">/* Call PyErr_Mac with PyMac_OSErrException */</comment>
<function><type><name>PyObject</name> *</type>
<name>PyMac_Error</name><parameter_list>(<param><decl><type><name>OSErr</name></type> <name>err</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyErr_Mac</name><argument_list>(<argument><expr><call><name>PyMac_GetOSErrException</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<function><type><name>OSErr</name></type>
<name>PyMac_GetFullPathname</name><parameter_list>(<param><decl><type><name>FSSpec</name> *</type><name>fss</name></decl></param>, <param><decl><type><name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>fs</name></decl>, *<decl><type ref="prev"/><name>exc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>input</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr>*<name>path</name> = '\0'</expr>;</expr_stmt>

	<expr_stmt><expr><name>fs</name> = <call><name>PyMac_BuildFSSpec</name><argument_list>(<argument><expr><name>fss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>fs</name></expr>)</condition><then>
		<goto>goto <name>error</name>;</goto></then></if>

	<expr_stmt><expr><name>rv</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"as_pathname"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>rv</name></expr>)</condition><then>
		<goto>goto <name>error</name>;</goto></then></if>

	<expr_stmt><expr><name>input</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>input</name></expr>)</condition><then>
		<goto>goto <name>error</name>;</goto></then></if>

	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>path</name><index>[<expr><name>len</name> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>err</name></expr>;</return>

  <label><name>error</name>:</label>
	<expr_stmt><expr><name>exc</name> = <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>exc</name>  &amp;&amp; <call><name>PyErr_GivenExceptionMatches</name><argument_list>(<argument><expr><name>exc</name></expr></argument>,
						<argument><expr><call><name>PyMac_GetOSErrException</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name> <init>= <expr><call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr>"args"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>args</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>char</name> *</type><name>ignore</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"is"</expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>, <argument><expr>&amp;<name>ignore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<if>if <condition>(<expr><name>err</name> == <name>noErr</name></expr>)</condition><then>
		<expr_stmt><expr><name>err</name> = -1</expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

<comment type="block">/* Convert a 4-char string object argument to an OSType value */</comment>
<function><type><name>int</name></type>
<name>PyMac_GetOSType</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>OSType</name> *</type><name>pr</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyString_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> || <call><name>PyString_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> != 4</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
			<argument><expr>"OSType arg must be string of 4 chars"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>0</expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>(<name>char</name> *)&amp;<name>tmp</name></expr></argument>, <argument><expr><call><name>PyString_AsString</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr>*<name>pr</name> = (<name>OSType</name>)<call><name>ntohl</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/* Convert an OSType value to a 4-char string object */</comment>
<function><type><name>PyObject</name> *</type>
<name>PyMac_BuildOSType</name><parameter_list>(<param><decl><type><name>OSType</name></type> <name>t</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr>(<name>uint32_t</name>)<name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)&amp;<name>tmp</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Convert an NumVersion value to a 4-element tuple */</comment>
<function><type><name>PyObject</name> *</type>
<name>PyMac_BuildNumVersion</name><parameter_list>(<param><decl><type><name>NumVersion</name></type> <name>t</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(hhhh)"</expr></argument>, <argument><expr><name><name>t</name>.<name>majorRev</name></name></expr></argument>, <argument><expr><name><name>t</name>.<name>minorAndBugRev</name></name></expr></argument>, <argument><expr><name><name>t</name>.<name>stage</name></name></expr></argument>, <argument><expr><name><name>t</name>.<name>nonRelRev</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* Convert a Python string object to a Str255 */</comment>
<function><type><name>int</name></type>
<name>PyMac_GetStr255</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>Str255</name></type> <name>pbuf</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyString_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> || (<name>len</name> = <call><name>PyString_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call>) &gt; 255</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
			<argument><expr>"Str255 arg must be string of at most 255 chars"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>0</expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name><name>pbuf</name><index>[<expr>0</expr>]</index></name> = <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call>(<name>char</name> *)<argument_list>(<argument><expr><name>pbuf</name>+1</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PyString_AsString</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/* Convert a Str255 to a Python string object */</comment>
<function><type><name>PyObject</name> *</type>
<name>PyMac_BuildStr255</name><parameter_list>(<param><decl><type><name>Str255</name></type> <name>s</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>( <expr><name>s</name> == <name>NULL</name></expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_SystemError</name></expr></argument>, <argument><expr>"Str255 pointer is NULL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)&amp;<name><name>s</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>s</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PyObject</name> *</type>
<name>PyMac_BuildOptStr255</name><parameter_list>(<param><decl><type><name>Str255</name></type> <name>s</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>( <expr><name>s</name> == <name>NULL</name></expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>Py_None</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)&amp;<name><name>s</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>s</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>



<comment type="block">/* Convert a Python object to a Rect.
   The object must be a (left, top, right, bottom) tuple.
   (This differs from the order in the struct but is consistent with
   the arguments to SetRect(), and also with STDWIN). */</comment>
<function><type><name>int</name></type>
<name>PyMac_GetRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>Rect</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"(hhhh)"</expr></argument>, <argument><expr>&amp;<name><name>r</name>-&gt;<name>left</name></name></expr></argument>, <argument><expr>&amp;<name><name>r</name>-&gt;<name>top</name></name></expr></argument>, <argument><expr>&amp;<name><name>r</name>-&gt;<name>right</name></name></expr></argument>, <argument><expr>&amp;<name><name>r</name>-&gt;<name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Convert a Rect to a Python object */</comment>
<function><type><name>PyObject</name> *</type>
<name>PyMac_BuildRect</name><parameter_list>(<param><decl><type><name>Rect</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(hhhh)"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>left</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>top</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>right</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* Convert a Python object to a Point.
   The object must be a (h, v) tuple.
   (This differs from the order in the struct but is consistent with
   the arguments to SetPoint(), and also with STDWIN). */</comment>
<function><type><name>int</name></type>
<name>PyMac_GetPoint</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>Point</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"(hh)"</expr></argument>, <argument><expr>&amp;<name><name>p</name>-&gt;<name>h</name></name></expr></argument>, <argument><expr>&amp;<name><name>p</name>-&gt;<name>v</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Convert a Point to a Python object */</comment>
<function><type><name>PyObject</name> *</type>
<name>PyMac_BuildPoint</name><parameter_list>(<param><decl><type><name>Point</name></type> <name>p</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(hh)"</expr></argument>, <argument><expr><name><name>p</name>.<name>h</name></name></expr></argument>, <argument><expr><name><name>p</name>.<name>v</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* Convert a Python object to an EventRecord.
   The object must be a (what, message, when, (v, h), modifiers) tuple. */</comment>
<function><type><name>int</name></type>
<name>PyMac_GetEventRecord</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>EventRecord</name> *</type><name>e</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"(Hkk(hh)H)"</expr></argument>,
	                   <argument><expr>&amp;<name><name>e</name>-&gt;<name>what</name></name></expr></argument>,
	                   <argument><expr>&amp;<name><name>e</name>-&gt;<name>message</name></name></expr></argument>,
	                   <argument><expr>&amp;<name><name>e</name>-&gt;<name>when</name></name></expr></argument>,
	                   <argument><expr>&amp;<name><name>e</name>-&gt;<name>where</name>.<name>h</name></name></expr></argument>,
	                   <argument><expr>&amp;<name><name>e</name>-&gt;<name>where</name>.<name>v</name></name></expr></argument>,                   
	                   <argument><expr>&amp;<name><name>e</name>-&gt;<name>modifiers</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Convert a Rect to an EventRecord object */</comment>
<function><type><name>PyObject</name> *</type>
<name>PyMac_BuildEventRecord</name><parameter_list>(<param><decl><type><name>EventRecord</name> *</type><name>e</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(hll(hh)h)"</expr></argument>,
	                     <argument><expr><name><name>e</name>-&gt;<name>what</name></name></expr></argument>,
	                     <argument><expr><name><name>e</name>-&gt;<name>message</name></name></expr></argument>,
	                     <argument><expr><name><name>e</name>-&gt;<name>when</name></name></expr></argument>,
	                     <argument><expr><name><name>e</name>-&gt;<name>where</name>.<name>h</name></name></expr></argument>,
	                     <argument><expr><name><name>e</name>-&gt;<name>where</name>.<name>v</name></name></expr></argument>,
	                     <argument><expr><name><name>e</name>-&gt;<name>modifiers</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Convert Python object to Fixed */</comment>
<function><type><name>int</name></type>
<name>PyMac_GetFixed</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>Fixed</name> *</type><name>f</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
	
	<if>if<condition>( <expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"d"</expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr>0</expr>;</return></then></if>
	<expr_stmt><expr>*<name>f</name> = <call>(<name>Fixed</name>)<argument_list>(<argument><expr><name>d</name> * 0x10000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/* Convert a Fixed to a Python object */</comment>
<function><type><name>PyObject</name> *</type>
<name>PyMac_BuildFixed</name><parameter_list>(<param><decl><type><name>Fixed</name></type> <name>f</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>d</name> = <name>f</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> = <name>d</name> / 0x10000</expr>;</expr_stmt>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"d"</expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Convert wide to/from Python int or (hi, lo) tuple. XXXX Should use Python longs */</comment>
<function><type><name>int</name></type>
<name>PyMac_Getwide</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>wide</name> *</type><name>rv</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>rv</name>-&gt;<name>hi</name></name> = 0</expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rv</name>-&gt;<name>lo</name></name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>( <expr><name><name>rv</name>-&gt;<name>lo</name></name> &amp; 0x80000000</expr> )</condition><then>
			<expr_stmt><expr><name><name>rv</name>-&gt;<name>hi</name></name> = -1</expr>;</expr_stmt></then></if>
		<return>return <expr>1</expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"(kk)"</expr></argument>, <argument><expr>&amp;<name><name>rv</name>-&gt;<name>hi</name></name></expr></argument>, <argument><expr>&amp;<name><name>rv</name>-&gt;<name>lo</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>PyObject</name> *</type>
<name>PyMac_Buildwide</name><parameter_list>(<param><decl><type><name>wide</name> *</type><name>w</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>( <expr>(<name><name>w</name>-&gt;<name>hi</name></name> == 0 &amp;&amp; (<name><name>w</name>-&gt;<name>lo</name></name> &amp; 0x80000000) == 0) ||
	     (<name><name>w</name>-&gt;<name>hi</name></name> == -1 &amp;&amp; (<name><name>w</name>-&gt;<name>lo</name></name> &amp; 0x80000000) )</expr> )</condition><then>
		<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>w</name>-&gt;<name>lo</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(ll)"</expr></argument>, <argument><expr><name><name>w</name>-&gt;<name>hi</name></name></expr></argument>, <argument><expr><name><name>w</name>-&gt;<name>lo</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TOOLBOX_OBJECT_GLUE</name></cpp:ifdef>
<comment type="block">/*
** Glue together the toolbox objects.
**
** Because toolbox modules interdepend on each other, they use each others
** object types, on MacOSX/MachO this leads to the situation that they
** cannot be dynamically loaded (or they would all have to be lumped into
** a single .so, but this would be bad for extensibility).
**
** This file defines wrappers for all the _New and _Convert functions,
** which are the Py_BuildValue and PyArg_ParseTuple helpers. The wrappers
** check an indirection function pointer, and if it isn't filled in yet
** they import the appropriate module, whose init routine should fill in
** the pointer.
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLUE_NEW</name><parameter_list>(<param><type><name>object</name></type></param>, <param><type><name>routinename</name></type></param>, <param><type><name>module</name></type></param>)</parameter_list></cpp:macro> \
<cpp:value>PyObject *(*PyMacGluePtr_##routinename)(object); \
\
PyObject *routinename(object cobj) { \
    if (!PyMacGluePtr_##routinename) { \
       if (!PyImport_ImportModule(module)) return NULL; \
       if (!PyMacGluePtr_##routinename) { \
           PyErr_SetString(PyExc_ImportError, "Module did not provide routine: " module ": " #routinename); \
           return NULL; \
       } \
    } \
    return (*PyMacGluePtr_##routinename)(cobj); \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLUE_CONVERT</name><parameter_list>(<param><type><name>object</name></type></param>, <param><type><name>routinename</name></type></param>, <param><type><name>module</name></type></param>)</parameter_list></cpp:macro> \
<cpp:value>int (*PyMacGluePtr_##routinename)(PyObject *, object *); \
\
int routinename(PyObject *pyobj, object *cobj) { \
    if (!PyMacGluePtr_##routinename) { \
       if (!PyImport_ImportModule(module)) return 0; \
       if (!PyMacGluePtr_##routinename) { \
           PyErr_SetString(PyExc_ImportError, "Module did not provide routine: " module ": " #routinename); \
           return 0; \
       } \
    } \
    return (*PyMacGluePtr_##routinename)(pyobj, cobj); \
}</cpp:value></cpp:define>

<macro><name>GLUE_NEW</name><argument_list>(<argument>FSSpec *</argument>, <argument>PyMac_BuildFSSpec</argument>, <argument>"Carbon.File"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>FSSpec</argument>, <argument>PyMac_GetFSSpec</argument>, <argument>"Carbon.File"</argument>)</argument_list></macro>
<macro><name>GLUE_NEW</name><argument_list>(<argument>FSRef *</argument>, <argument>PyMac_BuildFSRef</argument>, <argument>"Carbon.File"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>FSRef</argument>, <argument>PyMac_GetFSRef</argument>, <argument>"Carbon.File"</argument>)</argument_list></macro>

<macro><name>GLUE_NEW</name><argument_list>(<argument>AppleEvent *</argument>, <argument>AEDesc_New</argument>, <argument>"Carbon.AE"</argument>)</argument_list></macro> <comment type="block">/* XXXX Why by address? */</comment>
<macro><name>GLUE_NEW</name><argument_list>(<argument>AppleEvent *</argument>, <argument>AEDesc_NewBorrowed</argument>, <argument>"Carbon.AE"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>AppleEvent</argument>, <argument>AEDesc_Convert</argument>, <argument>"Carbon.AE"</argument>)</argument_list></macro>

<macro><name>GLUE_NEW</name><argument_list>(<argument>Component</argument>, <argument>CmpObj_New</argument>, <argument>"Carbon.Cm"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>Component</argument>, <argument>CmpObj_Convert</argument>, <argument>"Carbon.Cm"</argument>)</argument_list></macro>
<macro><name>GLUE_NEW</name><argument_list>(<argument>ComponentInstance</argument>, <argument>CmpInstObj_New</argument>, <argument>"Carbon.Cm"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>ComponentInstance</argument>, <argument>CmpInstObj_Convert</argument>, <argument>"Carbon.Cm"</argument>)</argument_list></macro>

<macro><name>GLUE_NEW</name><argument_list>(<argument>ControlHandle</argument>, <argument>CtlObj_New</argument>, <argument>"Carbon.Ctl"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>ControlHandle</argument>, <argument>CtlObj_Convert</argument>, <argument>"Carbon.Ctl"</argument>)</argument_list></macro>

<macro><name>GLUE_NEW</name><argument_list>(<argument>DialogPtr</argument>, <argument>DlgObj_New</argument>, <argument>"Carbon.Dlg"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>DialogPtr</argument>, <argument>DlgObj_Convert</argument>, <argument>"Carbon.Dlg"</argument>)</argument_list></macro>
<macro><name>GLUE_NEW</name><argument_list>(<argument>DialogPtr</argument>, <argument>DlgObj_WhichDialog</argument>, <argument>"Carbon.Dlg"</argument>)</argument_list></macro>

<macro><name>GLUE_NEW</name><argument_list>(<argument>DragReference</argument>, <argument>DragObj_New</argument>, <argument>"Carbon.Drag"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>DragReference</argument>, <argument>DragObj_Convert</argument>, <argument>"Carbon.Drag"</argument>)</argument_list></macro>

<macro><name>GLUE_NEW</name><argument_list>(<argument>ListHandle</argument>, <argument>ListObj_New</argument>, <argument>"Carbon.List"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>ListHandle</argument>, <argument>ListObj_Convert</argument>, <argument>"Carbon.List"</argument>)</argument_list></macro>

<macro><name>GLUE_NEW</name><argument_list>(<argument>MenuHandle</argument>, <argument>MenuObj_New</argument>, <argument>"Carbon.Menu"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>MenuHandle</argument>, <argument>MenuObj_Convert</argument>, <argument>"Carbon.Menu"</argument>)</argument_list></macro>

<macro><name>GLUE_NEW</name><argument_list>(<argument>GrafPtr</argument>, <argument>GrafObj_New</argument>, <argument>"Carbon.Qd"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>GrafPtr</argument>, <argument>GrafObj_Convert</argument>, <argument>"Carbon.Qd"</argument>)</argument_list></macro>
<macro><name>GLUE_NEW</name><argument_list>(<argument>BitMapPtr</argument>, <argument>BMObj_New</argument>, <argument>"Carbon.Qd"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>BitMapPtr</argument>, <argument>BMObj_Convert</argument>, <argument>"Carbon.Qd"</argument>)</argument_list></macro>
<macro><name>GLUE_NEW</name><argument_list>(<argument>RGBColor *</argument>, <argument>QdRGB_New</argument>, <argument>"Carbon.Qd"</argument>)</argument_list></macro> <comment type="block">/* XXXX Why? */</comment>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>RGBColor</argument>, <argument>QdRGB_Convert</argument>, <argument>"Carbon.Qd"</argument>)</argument_list></macro>

<macro><name>GLUE_NEW</name><argument_list>(<argument>GWorldPtr</argument>, <argument>GWorldObj_New</argument>, <argument>"Carbon.Qdoffs"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>GWorldPtr</argument>, <argument>GWorldObj_Convert</argument>, <argument>"Carbon.Qdoffs"</argument>)</argument_list></macro>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__LP64__</name></cpp:ifndef>
<macro><name>GLUE_NEW</name><argument_list>(<argument>Track</argument>, <argument>TrackObj_New</argument>, <argument>"Carbon.Qt"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>Track</argument>, <argument>TrackObj_Convert</argument>, <argument>"Carbon.Qt"</argument>)</argument_list></macro>
<macro><name>GLUE_NEW</name><argument_list>(<argument>Movie</argument>, <argument>MovieObj_New</argument>, <argument>"Carbon.Qt"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>Movie</argument>, <argument>MovieObj_Convert</argument>, <argument>"Carbon.Qt"</argument>)</argument_list></macro>
<macro><name>GLUE_NEW</name><argument_list>(<argument>MovieController</argument>, <argument>MovieCtlObj_New</argument>, <argument>"Carbon.Qt"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>MovieController</argument>, <argument>MovieCtlObj_Convert</argument>, <argument>"Carbon.Qt"</argument>)</argument_list></macro>
<macro><name>GLUE_NEW</name><argument_list>(<argument>TimeBase</argument>, <argument>TimeBaseObj_New</argument>, <argument>"Carbon.Qt"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>TimeBase</argument>, <argument>TimeBaseObj_Convert</argument>, <argument>"Carbon.Qt"</argument>)</argument_list></macro>
<macro><name>GLUE_NEW</name><argument_list>(<argument>UserData</argument>, <argument>UserDataObj_New</argument>, <argument>"Carbon.Qt"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>UserData</argument>, <argument>UserDataObj_Convert</argument>, <argument>"Carbon.Qt"</argument>)</argument_list></macro>
<macro><name>GLUE_NEW</name><argument_list>(<argument>Media</argument>, <argument>MediaObj_New</argument>, <argument>"Carbon.Qt"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>Media</argument>, <argument>MediaObj_Convert</argument>, <argument>"Carbon.Qt"</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__LP64__ */</comment>

<macro><name>GLUE_NEW</name><argument_list>(<argument>Handle</argument>, <argument>ResObj_New</argument>, <argument>"Carbon.Res"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>Handle</argument>, <argument>ResObj_Convert</argument>, <argument>"Carbon.Res"</argument>)</argument_list></macro>
<macro><name>GLUE_NEW</name><argument_list>(<argument>Handle</argument>, <argument>OptResObj_New</argument>, <argument>"Carbon.Res"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>Handle</argument>, <argument>OptResObj_Convert</argument>, <argument>"Carbon.Res"</argument>)</argument_list></macro>

<macro><name>GLUE_NEW</name><argument_list>(<argument>TEHandle</argument>, <argument>TEObj_New</argument>, <argument>"Carbon.TE"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>TEHandle</argument>, <argument>TEObj_Convert</argument>, <argument>"Carbon.TE"</argument>)</argument_list></macro>

<macro><name>GLUE_NEW</name><argument_list>(<argument>WindowPtr</argument>, <argument>WinObj_New</argument>, <argument>"Carbon.Win"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>WindowPtr</argument>, <argument>WinObj_Convert</argument>, <argument>"Carbon.Win"</argument>)</argument_list></macro>
<macro><name>GLUE_NEW</name><argument_list>(<argument>WindowPtr</argument>, <argument>WinObj_WhichWindow</argument>, <argument>"Carbon.Win"</argument>)</argument_list></macro>

<macro><name>GLUE_CONVERT</name><argument_list>(<argument>CFTypeRef</argument>, <argument>CFObj_Convert</argument>, <argument>"Carbon.CF"</argument>)</argument_list></macro>
<macro><name>GLUE_NEW</name><argument_list>(<argument>CFTypeRef</argument>, <argument>CFObj_New</argument>, <argument>"Carbon.CF"</argument>)</argument_list></macro>

<macro><name>GLUE_CONVERT</name><argument_list>(<argument>CFTypeRef</argument>, <argument>CFTypeRefObj_Convert</argument>, <argument>"Carbon.CF"</argument>)</argument_list></macro>
<macro><name>GLUE_NEW</name><argument_list>(<argument>CFTypeRef</argument>, <argument>CFTypeRefObj_New</argument>, <argument>"Carbon.CF"</argument>)</argument_list></macro>

<macro><name>GLUE_CONVERT</name><argument_list>(<argument>CFStringRef</argument>, <argument>CFStringRefObj_Convert</argument>, <argument>"Carbon.CF"</argument>)</argument_list></macro>
<macro><name>GLUE_NEW</name><argument_list>(<argument>CFStringRef</argument>, <argument>CFStringRefObj_New</argument>, <argument>"Carbon.CF"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>CFMutableStringRef</argument>, <argument>CFMutableStringRefObj_Convert</argument>, <argument>"Carbon.CF"</argument>)</argument_list></macro>
<macro><name>GLUE_NEW</name><argument_list>(<argument>CFMutableStringRef</argument>, <argument>CFMutableStringRefObj_New</argument>, <argument>"Carbon.CF"</argument>)</argument_list></macro>

<macro><name>GLUE_CONVERT</name><argument_list>(<argument>CFArrayRef</argument>, <argument>CFArrayRefObj_Convert</argument>, <argument>"Carbon.CF"</argument>)</argument_list></macro>
<macro><name>GLUE_NEW</name><argument_list>(<argument>CFArrayRef</argument>, <argument>CFArrayRefObj_New</argument>, <argument>"Carbon.CF"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>CFMutableArrayRef</argument>, <argument>CFMutableArrayRefObj_Convert</argument>, <argument>"Carbon.CF"</argument>)</argument_list></macro>
<macro><name>GLUE_NEW</name><argument_list>(<argument>CFMutableArrayRef</argument>, <argument>CFMutableArrayRefObj_New</argument>, <argument>"Carbon.CF"</argument>)</argument_list></macro>

<macro><name>GLUE_CONVERT</name><argument_list>(<argument>CFDictionaryRef</argument>, <argument>CFDictionaryRefObj_Convert</argument>, <argument>"Carbon.CF"</argument>)</argument_list></macro>
<macro><name>GLUE_NEW</name><argument_list>(<argument>CFDictionaryRef</argument>, <argument>CFDictionaryRefObj_New</argument>, <argument>"Carbon.CF"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>CFMutableDictionaryRef</argument>, <argument>CFMutableDictionaryRefObj_Convert</argument>, <argument>"Carbon.CF"</argument>)</argument_list></macro>
<macro><name>GLUE_NEW</name><argument_list>(<argument>CFMutableDictionaryRef</argument>, <argument>CFMutableDictionaryRefObj_New</argument>, <argument>"Carbon.CF"</argument>)</argument_list></macro>

<macro><name>GLUE_CONVERT</name><argument_list>(<argument>CFURLRef</argument>, <argument>CFURLRefObj_Convert</argument>, <argument>"Carbon.CF"</argument>)</argument_list></macro>
<macro><name>GLUE_CONVERT</name><argument_list>(<argument>CFURLRef</argument>, <argument>OptionalCFURLRefObj_Convert</argument>, <argument>"Carbon.CF"</argument>)</argument_list></macro>
<macro><name>GLUE_NEW</name><argument_list>(<argument>CFURLRef</argument>, <argument>CFURLRefObj_New</argument>, <argument>"Carbon.CF"</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_TOOLBOX_OBJECT_GLUE */</comment>
</unit>
