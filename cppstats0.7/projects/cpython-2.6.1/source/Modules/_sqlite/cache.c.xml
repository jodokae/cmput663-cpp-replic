<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_sqlite/cache.c"><comment type="block">/* cache .c - a LRU cache
 *
 * Copyright (C) 2004-2007 Gerhard HÃ¤ring &lt;gh@ghaering.de&gt;
 *
 * This file is part of pysqlite.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty.  In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<comment type="block">/* only used internally */</comment>
<function><type><name>pysqlite_Node</name>*</type> <name>pysqlite_new_node</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>key</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>data</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>pysqlite_Node</name>*</type> <name>node</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>node</name> = <call>(<name>pysqlite_Node</name>*) <argument_list>(<argument><expr><call><name><name>pysqlite_NodeType</name>.<name>tp_alloc</name></name><argument_list>(<argument><expr>&amp;<name>pysqlite_NodeType</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>node</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name>-&gt;<name>key</name></name> = <name>key</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name>-&gt;<name>data</name></name> = <name>data</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>node</name>-&gt;<name>prev</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <return>return <expr><name>node</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>pysqlite_node_dealloc</name><parameter_list>(<param><decl><type><name>pysqlite_Node</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr>(<name>PyObject</name>*)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>pysqlite_cache_init</name><parameter_list>(<param><decl><type><name>pysqlite_Cache</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>factory</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr>10</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>factory</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O|i"</expr></argument>, <argument><expr>&amp;<name>factory</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr>-1</expr>;</return>
    }</block></then></if>

    <comment type="block">/* minimum cache size is 5 entries */</comment>
    <if>if <condition>(<expr><name>size</name> &lt; 5</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> = 5</expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>size</name></name> = <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>first</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>last</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>mapping</name></name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>mapping</name></name></expr>)</condition><then> <block>{
        <return>return <expr>-1</expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>factory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>factory</name></name> = <name>factory</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>decref_factory</name></name> = 1</expr>;</expr_stmt>

    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>pysqlite_cache_dealloc</name><parameter_list>(<param><decl><type><name>pysqlite_Cache</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>pysqlite_Node</name>*</type> <name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pysqlite_Node</name>*</type> <name>delete_node</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>factory</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* constructor failed, just get out of here */</comment>
        <return>return;</return>
    }</block></then></if>

    <comment type="block">/* iterate over all nodes and deallocate them */</comment>
    <expr_stmt><expr><name>node</name> = <name><name>self</name>-&gt;<name>first</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>node</name></expr>)</condition> <block>{
        <expr_stmt><expr><name>delete_node</name> = <name>node</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>node</name> = <name><name>node</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>delete_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>decref_factory</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>factory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mapping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr>(<name>PyObject</name>*)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>PyObject</name>*</type> <name>pysqlite_cache_get</name><parameter_list>(<param><decl><type><name>pysqlite_Cache</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>key</name> <init>= <expr><name>args</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pysqlite_Node</name>*</type> <name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pysqlite_Node</name>*</type> <name>ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>data</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>node</name> = (<name>pysqlite_Node</name>*)<call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mapping</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>node</name></expr>)</condition><then> <block>{
        <comment type="block">/* an entry for this key already exists in the cache */</comment>

        <comment type="block">/* increase usage counter of the node found */</comment>
        <if>if <condition>(<expr><name><name>node</name>-&gt;<name>count</name></name> &lt; <name>LONG_MAX</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>node</name>-&gt;<name>count</name></name>++</expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/* if necessary, reorder entries in the cache by swapping positions */</comment>
        <if>if <condition>(<expr><name><name>node</name>-&gt;<name>prev</name></name> &amp;&amp; <name><name>node</name>-&gt;<name>count</name></name> &gt; <name><name>node</name>-&gt;<name>prev</name>-&gt;<name>count</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ptr</name> = <name><name>node</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>

            <while>while <condition>(<expr><name><name>ptr</name>-&gt;<name>prev</name></name> &amp;&amp; <name><name>node</name>-&gt;<name>count</name></name> &gt; <name><name>ptr</name>-&gt;<name>prev</name>-&gt;<name>count</name></name></expr>)</condition> <block>{
                <expr_stmt><expr><name>ptr</name> = <name><name>ptr</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
            }</block></while>

            <if>if <condition>(<expr><name><name>node</name>-&gt;<name>next</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>node</name>-&gt;<name>next</name>-&gt;<name>prev</name></name> = <name><name>node</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name><name>self</name>-&gt;<name>last</name></name> = <name><name>node</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
            }</block></else></if>
            <if>if <condition>(<expr><name><name>node</name>-&gt;<name>prev</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>node</name>-&gt;<name>prev</name>-&gt;<name>next</name></name> = <name><name>node</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name><name>ptr</name>-&gt;<name>prev</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>ptr</name>-&gt;<name>prev</name>-&gt;<name>next</name></name> = <name>node</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name><name>self</name>-&gt;<name>first</name></name> = <name>node</name></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><name><name>node</name>-&gt;<name>next</name></name> = <name>ptr</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>node</name>-&gt;<name>prev</name></name> = <name><name>ptr</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name><name>node</name>-&gt;<name>prev</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>self</name>-&gt;<name>first</name></name> = <name>node</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name><name>ptr</name>-&gt;<name>prev</name></name> = <name>node</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then> <else>else <block>{
        <comment type="block">/* There is no entry for this key in the cache, yet. We'll insert a new
         * entry in the cache, and make space if necessary by throwing the
         * least used item out of the cache. */</comment>

        <if>if <condition>(<expr><call><name>PyDict_Size</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mapping</name></name></expr></argument>)</argument_list></call> == <name><name>self</name>-&gt;<name>size</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>self</name>-&gt;<name>last</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>node</name> = <name><name>self</name>-&gt;<name>last</name></name></expr>;</expr_stmt>

                <if>if <condition>(<expr><call><name>PyDict_DelItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mapping</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>last</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
                    <return>return <expr><name>NULL</name></expr>;</return>
                }</block></then></if>

                <if>if <condition>(<expr><name><name>node</name>-&gt;<name>prev</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>node</name>-&gt;<name>prev</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name><name>self</name>-&gt;<name>last</name></name> = <name><name>node</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>node</name>-&gt;<name>prev</name></name> = <name>NULL</name></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <expr_stmt><expr><name>data</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>factory</name></name></expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<name>data</name></expr>)</condition><then> <block>{
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>node</name> = <call><name>pysqlite_new_node</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>node</name></expr>)</condition><then> <block>{
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name><name>node</name>-&gt;<name>prev</name></name> = <name><name>self</name>-&gt;<name>last</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mapping</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>node</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>self</name>-&gt;<name>last</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>self</name>-&gt;<name>last</name>-&gt;<name>next</name></name> = <name>node</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>self</name>-&gt;<name>first</name></name> = <name>node</name></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>last</name></name> = <name>node</name></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>node</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>node</name>-&gt;<name>data</name></name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name>*</type> <name>pysqlite_cache_display</name><parameter_list>(<param><decl><type><name>pysqlite_Cache</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>pysqlite_Node</name>*</type> <name>ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>prevkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>nextkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>fmt_args</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>template</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>display_str</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ptr</name> = <name><name>self</name>-&gt;<name>first</name></name></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>ptr</name></expr>)</condition> <block>{
        <if>if <condition>(<expr><name><name>ptr</name>-&gt;<name>prev</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>prevkey</name> = <name><name>ptr</name>-&gt;<name>prev</name>-&gt;<name>key</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>prevkey</name> = <name>Py_None</name></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>prevkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>ptr</name>-&gt;<name>next</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>nextkey</name> = <name><name>ptr</name>-&gt;<name>next</name>-&gt;<name>key</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>nextkey</name> = <name>Py_None</name></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>nextkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fmt_args</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"OOO"</expr></argument>, <argument><expr><name>prevkey</name></expr></argument>, <argument><expr><name><name>ptr</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name>nextkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>fmt_args</name></expr>)</condition><then> <block>{
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>template</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>"%s &lt;- %s -&gt;%s\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>template</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>fmt_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>display_str</name> = <call><name>PyString_Format</name><argument_list>(<argument><expr><name>template</name></expr></argument>, <argument><expr><name>fmt_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>template</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>fmt_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>display_str</name></expr>)</condition><then> <block>{
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>PyObject_Print</name><argument_list>(<argument><expr><name>display_str</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>Py_PRINT_RAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>display_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>prevkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>nextkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>ptr</name> = <name><name>ptr</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
    }</block></while>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>cache_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"get"</expr>, <expr>(<name>PyCFunction</name>)<name>pysqlite_cache_get</name></expr>, <expr><name>METH_O</name></expr>,
        <macro><name>PyDoc_STR</name><argument_list>(<argument>"Gets an entry from the cache or calls the factory function to produce one."</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr>"display"</expr>, <expr>(<name>PyCFunction</name>)<name>pysqlite_cache_display</name></expr>, <expr><name>METH_NOARGS</name></expr>,
        <macro><name>PyDoc_STR</name><argument_list>(<argument>"For debugging only."</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>pysqlite_NodeType</name> <init>= <expr><block>{
        <macro><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument>NULL</argument>, <argument>0</argument>)</argument_list></macro>
        <expr><name>MODULE_NAME</name> "Node"</expr>,                             <comment type="block">/* tp_name */</comment>
        <expr><sizeof>sizeof<argument_list>(<argument><expr><name>pysqlite_Node</name></expr></argument>)</argument_list></sizeof></expr>,                          <comment type="block">/* tp_basicsize */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_itemsize */</comment>
        <expr>(<name>destructor</name>)<name>pysqlite_node_dealloc</name></expr>,              <comment type="block">/* tp_dealloc */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_print */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_getattr */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_setattr */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_compare */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_repr */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_as_number */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_as_sequence */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_as_mapping */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_hash */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_call */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_str */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_getattro */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_setattro */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_as_buffer */</comment>
        <expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>,         <comment type="block">/* tp_flags */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_doc */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_traverse */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_clear */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_richcompare */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_weaklistoffset */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_iter */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_iternext */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_methods */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_members */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_getset */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_base */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_dict */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_descr_get */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_descr_set */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_dictoffset */</comment>
        <expr>(<name>initproc</name>)0</expr>,                                    <comment type="block">/* tp_init */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_alloc */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_new */</comment>
        <expr>0</expr>                                               <comment type="block">/* tp_free */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>pysqlite_CacheType</name> <init>= <expr><block>{
        <macro><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument>NULL</argument>, <argument>0</argument>)</argument_list></macro>
        <expr><name>MODULE_NAME</name> ".Cache"</expr>,                           <comment type="block">/* tp_name */</comment>
        <expr><sizeof>sizeof<argument_list>(<argument><expr><name>pysqlite_Cache</name></expr></argument>)</argument_list></sizeof></expr>,                         <comment type="block">/* tp_basicsize */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_itemsize */</comment>
        <expr>(<name>destructor</name>)<name>pysqlite_cache_dealloc</name></expr>,             <comment type="block">/* tp_dealloc */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_print */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_getattr */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_setattr */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_compare */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_repr */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_as_number */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_as_sequence */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_as_mapping */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_hash */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_call */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_str */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_getattro */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_setattro */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_as_buffer */</comment>
        <expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>,         <comment type="block">/* tp_flags */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_doc */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_traverse */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_clear */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_richcompare */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_weaklistoffset */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_iter */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_iternext */</comment>
        <expr><name>cache_methods</name></expr>,                                  <comment type="block">/* tp_methods */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_members */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_getset */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_base */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_dict */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_descr_get */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_descr_set */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_dictoffset */</comment>
        <expr>(<name>initproc</name>)<name>pysqlite_cache_init</name></expr>,                  <comment type="block">/* tp_init */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_alloc */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_new */</comment>
        <expr>0</expr>                                               <comment type="block">/* tp_free */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>pysqlite_cache_setup_types</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pysqlite_NodeType</name>.<name>tp_new</name></name> = <name>PyType_GenericNew</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pysqlite_CacheType</name>.<name>tp_new</name></name> = <name>PyType_GenericNew</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> = <call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>pysqlite_NodeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rc</name> &lt; 0</expr>)</condition><then> <block>{
        <return>return <expr><name>rc</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>rc</name> = <call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>pysqlite_CacheType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
}</block></function>
</unit>
