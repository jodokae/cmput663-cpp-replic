<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_sqlite/prepare_protocol.c"><comment type="block">/* prepare_protocol.c - the protocol for preparing values for SQLite
 *
 * Copyright (C) 2005-2006 Gerhard HÃ¤ring &lt;gh@ghaering.de&gt;
 *
 * This file is part of pysqlite.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty.  In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prepare_protocol.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>pysqlite_prepare_protocol_init</name><parameter_list>(<param><decl><type><name>pysqlite_PrepareProtocol</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>pysqlite_prepare_protocol_dealloc</name><parameter_list>(<param><decl><type><name>pysqlite_PrepareProtocol</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr>(<name>PyObject</name>*)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>pysqlite_PrepareProtocolType</name><init>= <expr><block>{
        <macro><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument>NULL</argument>, <argument>0</argument>)</argument_list></macro>
        <expr><name>MODULE_NAME</name> ".PrepareProtocol"</expr>,                 <comment type="block">/* tp_name */</comment>
        <expr><sizeof>sizeof<argument_list>(<argument><expr><name>pysqlite_PrepareProtocol</name></expr></argument>)</argument_list></sizeof></expr>,               <comment type="block">/* tp_basicsize */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_itemsize */</comment>
        <expr>(<name>destructor</name>)<name>pysqlite_prepare_protocol_dealloc</name></expr>,  <comment type="block">/* tp_dealloc */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_print */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_getattr */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_setattr */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_compare */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_repr */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_as_number */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_as_sequence */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_as_mapping */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_hash */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_call */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_str */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_getattro */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_setattro */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_as_buffer */</comment>
        <expr><name>Py_TPFLAGS_DEFAULT</name></expr>,                             <comment type="block">/* tp_flags */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_doc */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_traverse */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_clear */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_richcompare */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_weaklistoffset */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_iter */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_iternext */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_methods */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_members */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_getset */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_base */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_dict */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_descr_get */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_descr_set */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_dictoffset */</comment>
        <expr>(<name>initproc</name>)<name>pysqlite_prepare_protocol_init</name></expr>,       <comment type="block">/* tp_init */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_alloc */</comment>
        <expr>0</expr>,                                              <comment type="block">/* tp_new */</comment>
        <expr>0</expr>                                               <comment type="block">/* tp_free */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>pysqlite_prepare_protocol_setup_types</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>pysqlite_PrepareProtocolType</name>.<name>tp_new</name></name> = <name>PyType_GenericNew</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr>&amp;<name>pysqlite_PrepareProtocolType</name></expr></argument>)</argument_list></call>= &amp;<name>PyType_Type</name></expr>;</expr_stmt>
    <return>return <expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>pysqlite_PrepareProtocolType</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
