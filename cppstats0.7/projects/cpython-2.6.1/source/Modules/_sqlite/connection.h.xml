<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_sqlite/connection.h"><comment type="block">/* connection.h - definitions for the connection type
 *
 * Copyright (C) 2004-2007 Gerhard HÃ¤ring &lt;gh@ghaering.de&gt;
 *
 * This file is part of pysqlite.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty.  In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PYSQLITE_CONNECTION_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYSQLITE_CONNECTION_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pythread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"module.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>
    <name>sqlite3</name>*</type> <name>db</name></decl>;</decl_stmt>

    <comment type="block">/* 1 if we are currently within a transaction, i. e. if a BEGIN has been
     * issued */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>inTransaction</name></decl>;</decl_stmt>

    <comment type="block">/* the type detection mode. Only 0, PARSE_DECLTYPES, PARSE_COLNAMES or a
     * bitwise combination thereof makes sense */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>detect_types</name></decl>;</decl_stmt>

    <comment type="block">/* the timeout value in seconds for database locks */</comment>
    <decl_stmt><decl><type><name>double</name></type> <name>timeout</name></decl>;</decl_stmt>

    <comment type="block">/* for internal use in the timeout handler: when did the timeout handler
     * first get called with count=0? */</comment>
    <decl_stmt><decl><type><name>double</name></type> <name>timeout_started</name></decl>;</decl_stmt>

    <comment type="block">/* None for autocommit, otherwise a PyString with the isolation level */</comment>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>isolation_level</name></decl>;</decl_stmt>

    <comment type="block">/* NULL for autocommit, otherwise a string with the BEGIN statment; will be
     * freed in connection destructor */</comment>
    <decl_stmt><decl><type><name>char</name>*</type> <name>begin_statement</name></decl>;</decl_stmt>

    <comment type="block">/* 1 if a check should be performed for each API call if the connection is
     * used from the same thread it was created in */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>check_same_thread</name></decl>;</decl_stmt>

    <comment type="block">/* thread identification of the thread the connection was created in */</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>thread_ident</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>pysqlite_Cache</name>*</type> <name>statement_cache</name></decl>;</decl_stmt>

    <comment type="block">/* A list of weak references to statements used within this connection */</comment>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>statements</name></decl>;</decl_stmt>

    <comment type="block">/* a counter for how many statements were created in the connection. May be
     * reset to 0 at certain intervals */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>created_statements</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>row_factory</name></decl>;</decl_stmt>

    <comment type="block">/* Determines how bytestrings from SQLite are converted to Python objects:
     * - PyUnicode_Type:        Python Unicode objects are constructed from UTF-8 bytestrings
     * - OptimizedUnicode:      Like before, but for ASCII data, only PyStrings are created.
     * - PyString_Type:         PyStrings are created as-is.
     * - Any custom callable:   Any object returned from the callable called with the bytestring
     *                          as single parameter.
     */</comment>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>text_factory</name></decl>;</decl_stmt>

    <comment type="block">/* remember references to functions/classes used in
     * create_function/create/aggregate, use these as dictionary keys, so we
     * can keep the total system refcount constant by clearing that dictionary
     * in connection_dealloc */</comment>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>function_pinboard</name></decl>;</decl_stmt>

    <comment type="block">/* a dictionary of registered collation name =&gt; collation callable mappings */</comment>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>collations</name></decl>;</decl_stmt>

    <comment type="block">/* if our connection was created from a APSW connection, we keep a
     * reference to the APSW connection around and get rid of it in our
     * destructor */</comment>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>apsw_connection</name></decl>;</decl_stmt>

    <comment type="block">/* Exception objects */</comment>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>Warning</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>Error</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>InterfaceError</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>DatabaseError</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>DataError</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>OperationalError</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>IntegrityError</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>InternalError</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>ProgrammingError</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>NotSupportedError</name></decl>;</decl_stmt>
}</block></struct></type> <name>pysqlite_Connection</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>PyTypeObject</name></type> <name>pysqlite_ConnectionType</name></decl>;</decl_stmt>

<function_decl><type><name>PyObject</name>*</type> <name>pysqlite_connection_alloc</name><parameter_list>(<param><decl><type><name>PyTypeObject</name>*</type> <name>type</name></decl></param>, <param><decl><type><name>int</name></type> <name>aware</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>pysqlite_connection_dealloc</name><parameter_list>(<param><decl><type><name>pysqlite_Connection</name>*</type> <name>self</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>PyObject</name>*</type> <name>pysqlite_connection_cursor</name><parameter_list>(<param><decl><type><name>pysqlite_Connection</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>PyObject</name>*</type> <name>pysqlite_connection_close</name><parameter_list>(<param><decl><type><name>pysqlite_Connection</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>PyObject</name>*</type> <name>_pysqlite_connection_begin</name><parameter_list>(<param><decl><type><name>pysqlite_Connection</name>*</type> <name>self</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>PyObject</name>*</type> <name>pysqlite_connection_commit</name><parameter_list>(<param><decl><type><name>pysqlite_Connection</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>PyObject</name>*</type> <name>pysqlite_connection_rollback</name><parameter_list>(<param><decl><type><name>pysqlite_Connection</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>PyObject</name>*</type> <name>pysqlite_connection_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name>*</type> <name>type</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kw</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>pysqlite_connection_init</name><parameter_list>(<param><decl><type><name>pysqlite_Connection</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>pysqlite_check_thread</name><parameter_list>(<param><decl><type><name>pysqlite_Connection</name>*</type> <name>self</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>pysqlite_check_connection</name><parameter_list>(<param><decl><type><name>pysqlite_Connection</name>*</type> <name>con</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>pysqlite_connection_setup_types</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
