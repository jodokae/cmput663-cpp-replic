<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_sqlite/cache.h"><comment type="block">/* cache.h - definitions for the LRU cache
 *
 * Copyright (C) 2004-2007 Gerhard HÃ¤ring &lt;gh@ghaering.de&gt;
 *
 * This file is part of pysqlite.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty.  In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PYSQLITE_CACHE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYSQLITE_CACHE_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>

<comment type="block">/* The LRU cache is implemented as a combination of a doubly-linked with a
 * dictionary. The list items are of type 'Node' and the dictionary has the
 * nodes as values. */</comment>

<typedef>typedef <type><struct>struct <name>_pysqlite_Node</name>
<block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>
    <name>PyObject</name>*</type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>_pysqlite_Node</name>*</type> <name>prev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>_pysqlite_Node</name>*</type> <name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>pysqlite_Node</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>
    <name>int</name></type> <name>size</name></decl>;</decl_stmt>

    <comment type="block">/* a dictionary mapping keys to Node entries */</comment>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>mapping</name></decl>;</decl_stmt>

    <comment type="block">/* the factory callable */</comment>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>factory</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>pysqlite_Node</name>*</type> <name>first</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pysqlite_Node</name>*</type> <name>last</name></decl>;</decl_stmt>

    <comment type="block">/* if set, decrement the factory function when the Cache is deallocated.
     * this is almost always desirable, but not in the pysqlite context */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>decref_factory</name></decl>;</decl_stmt>
}</block></struct></type> <name>pysqlite_Cache</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>PyTypeObject</name></type> <name>pysqlite_NodeType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>PyTypeObject</name></type> <name>pysqlite_CacheType</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>pysqlite_node_init</name><parameter_list>(<param><decl><type><name>pysqlite_Node</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>pysqlite_node_dealloc</name><parameter_list>(<param><decl><type><name>pysqlite_Node</name>*</type> <name>self</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>pysqlite_cache_init</name><parameter_list>(<param><decl><type><name>pysqlite_Cache</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>pysqlite_cache_dealloc</name><parameter_list>(<param><decl><type><name>pysqlite_Cache</name>*</type> <name>self</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>PyObject</name>*</type> <name>pysqlite_cache_get</name><parameter_list>(<param><decl><type><name>pysqlite_Cache</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>pysqlite_cache_setup_types</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
