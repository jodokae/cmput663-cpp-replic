<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_elementtree.c"><comment type="block">/*
 * ElementTree
 * $Id: _elementtree.c 2657 2006-03-12 20:50:32Z fredrik $
 *
 * elementtree accelerator
 *
 * History:
 * 1999-06-20 fl  created (as part of sgmlop)
 * 2001-05-29 fl  effdom edition
 * 2001-06-05 fl  backported to unix; fixed bogus free in clear
 * 2001-07-10 fl  added findall helper
 * 2003-02-27 fl  elementtree edition (alpha)
 * 2004-06-03 fl  updates for elementtree 1.2
 * 2005-01-05 fl  added universal name cache, Element/SubElement factories
 * 2005-01-06 fl  moved python helpers into C module; removed 1.5.2 support
 * 2005-01-07 fl  added 2.1 support; work around broken __copy__ in 2.3
 * 2005-01-08 fl  added makeelement method; fixed path support
 * 2005-01-10 fl  optimized memory usage
 * 2005-01-11 fl  first public release (cElementTree 0.8)
 * 2005-01-12 fl  split element object into base and extras
 * 2005-01-13 fl  use tagged pointers for tail/text (cElementTree 0.9)
 * 2005-01-17 fl  added treebuilder close method
 * 2005-01-17 fl  fixed crash in getchildren
 * 2005-01-18 fl  removed observer api, added iterparse (cElementTree 0.9.3)
 * 2005-01-23 fl  revised iterparse api; added namespace event support (0.9.8)
 * 2005-01-26 fl  added VERSION module property (cElementTree 1.0)
 * 2005-01-28 fl  added remove method (1.0.1)
 * 2005-03-01 fl  added iselement function; fixed makeelement aliasing (1.0.2)
 * 2005-03-13 fl  export Comment and ProcessingInstruction/PI helpers
 * 2005-03-26 fl  added Comment and PI support to XMLParser
 * 2005-03-27 fl  event optimizations; complain about bogus events
 * 2005-08-08 fl  fixed read error handling in parse
 * 2005-08-11 fl  added runtime test for copy workaround (1.0.3)
 * 2005-12-13 fl  added expat_capi support (for xml.etree) (1.0.4)
 * 2005-12-16 fl  added support for non-standard encodings
 * 2006-03-08 fl  fixed a couple of potential null-refs and leaks
 * 2006-03-12 fl  merge in 2.5 ssize_t changes
 *
 * Copyright (c) 1999-2006 by Secret Labs AB.  All rights reserved.
 * Copyright (c) 1999-2006 by Fredrik Lundh.
 *
 * info@pythonware.com
 * http://www.pythonware.com
 */</comment>

<comment type="block">/* Licensed to PSF under a Contributor Agreement. */</comment>
<comment type="block">/* See http://www.python.org/2.4/license for licensing details. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERSION</name></cpp:macro> <cpp:value>"1.0.6"</cpp:value></cpp:define>

<comment type="block">/* -------------------------------------------------------------------- */</comment>
<comment type="block">/* configuration */</comment>

<comment type="block">/* Leave defined to include the expat-based XMLParser type */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_EXPAT</name></cpp:macro></cpp:define>

<comment type="block">/* Define to to all expat calls via pyexpat's embedded expat library */</comment>
<comment type="block">/* #define USE_PYEXPAT_CAPI */</comment>

<comment type="block">/* An element can hold this many children without extra memory
   allocations. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATIC_CHILDREN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<comment type="block">/* For best performance, chose a value so that 80-90% of all nodes
   have no more than the given number of children.  Set this to zero
   to minimize the size of the element structure itself (this only
   helps if you have lots of leaf nodes with attributes). */</comment>

<comment type="block">/* Also note that pymalloc always allocates blocks in multiples of
   eight bytes.  For the current version of cElementTree, this means
   that the number of children should be an even number, at least on
   32-bit platforms. */</comment>

<comment type="block">/* -------------------------------------------------------------------- */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
static int memory = 0;
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOC</name><parameter_list>(<param><type><name>size</name></type></param>, <param><type><name>comment</name></type></param>)</parameter_list></cpp:macro>\
<cpp:value>do { memory += size; printf("%8d - %s\n", memory, comment); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELEASE</name><parameter_list>(<param><type><name>size</name></type></param>, <param><type><name>comment</name></type></param>)</parameter_list></cpp:macro>\
<cpp:value>do { memory -= size; printf("%8d - %s\n", memory, comment); } while (0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOC</name><parameter_list>(<param><type><name>size</name></type></param>, <param><type><name>comment</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELEASE</name><parameter_list>(<param><type><name>size</name></type></param>, <param><type><name>comment</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* compiler tweaks */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static __inline type __fastcall</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static type</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* compatibility macros */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x02050000)</expr></cpp:if>
<typedef>typedef <type><name>int</name></type> <name>Py_ssize_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lenfunc</name></cpp:macro> <cpp:value>inquiry</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x02040000)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDict_CheckExact</name></cpp:macro> <cpp:value>PyDict_Check</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x02020000)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyList_CheckExact</name></cpp:macro> <cpp:value>PyList_Check</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyString_CheckExact</name></cpp:macro> <cpp:value>PyString_Check</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &gt;= 0x01060000)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_USING_UNICODE</name></cpp:macro></cpp:define> <comment type="block">/* always enabled for 2.0 and 2.1 */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_RETURN_NONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_RETURN_NONE</name></cpp:macro> <cpp:value>return Py_INCREF(Py_None), Py_None</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* macros used to store 'join' flags in string object pointers.  note
   that all use of text and tail as object pointers must be wrapped in
   JOIN_OBJ.  see comments in the ElementObject definition for more
   info. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JOIN_GET</name><parameter_list>(<param><type><name>p</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((Py_uintptr_t) (p) &amp; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JOIN_SET</name><parameter_list>(<param><type><name>p</name></type></param>, <param><type><name>flag</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((void*) ((Py_uintptr_t) (JOIN_OBJ(p)) | (flag)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JOIN_OBJ</name><parameter_list>(<param><type><name>p</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((PyObject*) ((Py_uintptr_t) (p) &amp; ~1))</cpp:value></cpp:define>

<comment type="block">/* glue functions (see the init function for details) */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>elementtree_copyelement_obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>elementtree_deepcopy_obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>elementtree_getiterator_obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>elementpath_obj</name></decl>;</decl_stmt>

<comment type="block">/* helpers */</comment>

<macro><name>LOCAL</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro>
<macro><name>deepcopy</name><argument_list>(<argument>PyObject* object</argument>, <argument>PyObject* memo</argument>)</argument_list></macro>
<block>{
    <comment type="block">/* do a deep copy of the given object */</comment>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>args</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>result</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>elementtree_deepcopy_obj</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
            <argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
            <argument><expr>"deepcopy helper not found"</expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>args</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>args</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> = <call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name>elementtree_deepcopy_obj</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
}</block>

<macro><name>LOCAL</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro>
<macro><name>list_join</name><argument_list>(<argument>PyObject* list</argument>)</argument_list></macro>
<block>{
    <comment type="block">/* join list elements (destroying the list in the process) */</comment>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>joiner</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>function</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>args</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>result</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
    <case>case <expr>0</expr>:
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</return>
    </case><case>case <expr>1</expr>:
        <expr_stmt><expr><name>result</name> = <call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </case>}</block></switch>

    <comment type="block">/* two or more elements: slice out a suitable separator from the
       first member, and use that to join the entire list */</comment>

    <expr_stmt><expr><name>joiner</name> = <call><name>PySequence_GetSlice</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>joiner</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>function</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>joiner</name></expr></argument>, <argument><expr>"join"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>function</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>joiner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>args</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>args</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> = <call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name>function</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* also removes list */</comment>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>joiner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x02020000)</expr></cpp:if>
<macro><name>LOCAL</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>PyDict_Update</name><argument_list>(<argument>PyObject* dict</argument>, <argument>PyObject* other</argument>)</argument_list></macro>
<block>{
    <comment type="block">/* PyDict_Update emulation for 2.1 and earlier */</comment>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>res</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>res</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr>"update"</expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>res</name></expr>)</condition><then>
        <return>return <expr>-1</expr>;</return></then></if>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* -------------------------------------------------------------------- */</comment>
<comment type="block">/* the element type */</comment>

<typedef>typedef <type><struct>struct <block>{

    <comment type="block">/* attributes (a dictionary object), or None if no attributes */</comment>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>attrib</name></decl>;</decl_stmt>

    <comment type="block">/* child elements */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt> <comment type="block">/* actual number of items */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>allocated</name></decl>;</decl_stmt> <comment type="block">/* allocated items */</comment>

    <comment type="block">/* this either points to _children or to a malloced buffer */</comment>
    <decl_stmt><decl><type><name>PyObject</name>* *</type><name>children</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name><name>_children</name><index>[<expr><name>STATIC_CHILDREN</name></expr>]</index></name></decl>;</decl_stmt>
    
}</block></struct></type> <name>ElementObjectExtra</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>

    <comment type="block">/* element tag (a string). */</comment>
    <name>PyObject</name>*</type> <name>tag</name></decl>;</decl_stmt>

    <comment type="block">/* text before first child.  note that this is a tagged pointer;
       use JOIN_OBJ to get the object pointer.  the join flag is used
       to distinguish lists created by the tree builder from lists
       assigned to the attribute by application code; the former
       should be joined before being returned to the user, the latter
       should be left intact. */</comment>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>text</name></decl>;</decl_stmt>

    <comment type="block">/* text after this element, in parent.  note that this is a tagged
       pointer; use JOIN_OBJ to get the object pointer. */</comment>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tail</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ElementObjectExtra</name>*</type> <name>extra</name></decl>;</decl_stmt>

}</block></struct></type> <name>ElementObject</name>;</typedef>

<decl_stmt><decl><type><name>staticforward</name> <name>PyTypeObject</name></type> <name>Element_Type</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Element_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;Element_Type)</cpp:value></cpp:define>

<comment type="block">/* -------------------------------------------------------------------- */</comment>
<comment type="block">/* element constructor and destructor */</comment>

<macro><name>LOCAL</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>element_new_extra</name><argument_list>(<argument>ElementObject* self</argument>, <argument>PyObject* attrib</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name></name> = <call><name>PyObject_Malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ElementObjectExtra</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>extra</name></name></expr>)</condition><then>
        <return>return <expr>-1</expr>;</return></then></if>

    <if>if <condition>(<expr>!<name>attrib</name></expr>)</condition><then>
        <expr_stmt><expr><name>attrib</name> = <name>Py_None</name></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>attrib</name></name> = <name>attrib</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>allocated</name></name> = <name>STATIC_CHILDREN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name></name> = <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>_children</name></name></expr>;</expr_stmt>

    <return>return <expr>0</expr>;</return>
}</block>

<macro><name>LOCAL</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>element_dealloc_extra</name><argument_list>(<argument>ElementObject* self</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>attrib</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name></name> != <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>_children</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>PyObject_Free</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><call><name>PyObject_Free</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>LOCAL</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro>
<macro><name>element_new</name><argument_list>(<argument>PyObject* tag</argument>, <argument>PyObject* attrib</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>ElementObject</name>*</type> <name>self</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>self</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>ElementObject</name></expr></argument>, <argument><expr>&amp;<name>Element_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <comment type="block">/* use None for empty dictionaries */</comment>
    <if>if <condition>(<expr><call><name>PyDict_CheckExact</name><argument_list>(<argument><expr><name>attrib</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>PyDict_Size</name><argument_list>(<argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>attrib</name> = <name>Py_None</name></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>attrib</name> != <name>Py_None</name></expr>)</condition><then> <block>{

        <if>if <condition>(<expr><call><name>element_new_extra</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>attrib</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

        <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>allocated</name></name> = <name>STATIC_CHILDREN</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name></name> = <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>_children</name></name></expr>;</expr_stmt>

    }</block></then></if>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>tag</name></name> = <name>tag</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>text</name></name> = <name>Py_None</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>tail</name></name> = <name>Py_None</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ElementObject</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"create element"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr>(<name>PyObject</name>*) <name>self</name></expr>;</return>
}</block>

<macro><name>LOCAL</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>element_resize</name><argument_list>(<argument>ElementObject* self</argument>, <argument>int extra</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>* *</type><name>children</name></decl>;</decl_stmt>

    <comment type="block">/* make sure self-&gt;children can hold the given number of extra
       elements.  set an exception and return -1 if allocation failed */</comment>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>extra</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>element_new_extra</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name>size</name> = <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name> + <name>extra</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>size</name> &gt; <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>allocated</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* use Python 2.4's list growth strategy */</comment>
        <expr_stmt><expr><name>size</name> = (<name>size</name> &gt;&gt; 3) + (<name>size</name> &lt; 9 ? 3 : 6) + <name>size</name></expr>;</expr_stmt>
        <comment type="block">/* Coverity CID #182 size_error: Allocating 1 bytes to pointer "children"
         * which needs at least 4 bytes. 
         * Although it's a false alarm always assume at least one child to 
         * be safe.
         */</comment>
        <expr_stmt><expr><name>size</name> = <name>size</name> ? <name>size</name> : 1</expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name></name> != <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>_children</name></name></expr>)</condition><then> <block>{
            <comment type="block">/* Coverity CID #182 size_error: Allocating 1 bytes to pointer
             * "children", which needs at least 4 bytes. Although it's a 
             * false alarm always assume at least one child to be safe.
             */</comment>
            <expr_stmt><expr><name>children</name> = <call><name>PyObject_Realloc</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name></name></expr></argument>,
                                        <argument><expr><name>size</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>PyObject</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>children</name></expr>)</condition><then>
                <goto>goto <name>nomemory</name>;</goto></then></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>children</name> = <call><name>PyObject_Malloc</name><argument_list>(<argument><expr><name>size</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>PyObject</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>children</name></expr>)</condition><then>
                <goto>goto <name>nomemory</name>;</goto></then></if>
            <comment type="block">/* copy existing children from static area to malloc buffer */</comment>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>children</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name></name></expr></argument>,
                   <argument><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name> * <sizeof>sizeof<argument_list>(<argument><expr><name>PyObject</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name></name> = <name>children</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>allocated</name></name> = <name>size</name></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr>0</expr>;</return>

  <label><name>nomemory</name>:</label>
    <expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>-1</expr>;</return>
}</block>

<macro><name>LOCAL</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>element_add_subelement</name><argument_list>(<argument>ElementObject* self</argument>, <argument>PyObject* element</argument>)</argument_list></macro>
<block>{
    <comment type="block">/* add a child element to a parent */</comment>

    <if>if <condition>(<expr><call><name>element_resize</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
        <return>return <expr>-1</expr>;</return></then></if>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>]</index></name> = <name>element</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name>++</expr>;</expr_stmt>

    <return>return <expr>0</expr>;</return>
}</block>

<macro><name>LOCAL</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro>
<macro><name>element_get_attrib</name><argument_list>(<argument>ElementObject* self</argument>)</argument_list></macro>
<block>{
    <comment type="block">/* return borrowed reference to attrib dictionary */</comment>
    <comment type="block">/* note: this function assumes that the extra section exists */</comment>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>res</name> <init>= <expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>attrib</name></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>res</name> == <name>Py_None</name></expr>)</condition><then> <block>{
        <comment type="block">/* create missing dictionary */</comment>
        <expr_stmt><expr><name>res</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>res</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>attrib</name></name> = <name>res</name></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>res</name></expr>;</return>
}</block>

<macro><name>LOCAL</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro>
<macro><name>element_get_text</name><argument_list>(<argument>ElementObject* self</argument>)</argument_list></macro>
<block>{
    <comment type="block">/* return borrowed reference to text attribute */</comment>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>res</name> <init>= <expr><name><name>self</name>-&gt;<name>text</name></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>JOIN_GET</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>res</name> = <call><name>JOIN_OBJ</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>PyList_CheckExact</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>res</name> = <call><name>list_join</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>res</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
            <expr_stmt><expr><name><name>self</name>-&gt;<name>text</name></name> = <name>res</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <return>return <expr><name>res</name></expr>;</return>
}</block>

<macro><name>LOCAL</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro>
<macro><name>element_get_tail</name><argument_list>(<argument>ElementObject* self</argument>)</argument_list></macro>
<block>{
    <comment type="block">/* return borrowed reference to text attribute */</comment>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>res</name> <init>= <expr><name><name>self</name>-&gt;<name>tail</name></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>JOIN_GET</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>res</name> = <call><name>JOIN_OBJ</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>PyList_CheckExact</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>res</name> = <call><name>list_join</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>res</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
            <expr_stmt><expr><name><name>self</name>-&gt;<name>tail</name></name> = <name>res</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <return>return <expr><name>res</name></expr>;</return>
}</block>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>element</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>elem</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>attrib</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O|O!:Element"</expr></argument>, <argument><expr>&amp;<name>tag</name></expr></argument>,
                          <argument><expr>&amp;<name>PyDict_Type</name></expr></argument>, <argument><expr>&amp;<name>attrib</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>attrib</name> || <name>kw</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>attrib</name> = (<name>attrib</name>) ? <call><name>PyDict_Copy</name><argument_list>(<argument><expr><name>attrib</name></expr></argument>)</argument_list></call> : <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>attrib</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <if>if <condition>(<expr><name>kw</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>PyDict_Update</name><argument_list>(<argument><expr><name>attrib</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>attrib</name> = <name>Py_None</name></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name>elem</name> = <call><name>element_new</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>elem</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>subelement</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>elem</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ElementObject</name>*</type> <name>parent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>attrib</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!O|O!:SubElement"</expr></argument>,
                          <argument><expr>&amp;<name>Element_Type</name></expr></argument>, <argument><expr>&amp;<name>parent</name></expr></argument>, <argument><expr>&amp;<name>tag</name></expr></argument>,
                          <argument><expr>&amp;<name>PyDict_Type</name></expr></argument>, <argument><expr>&amp;<name>attrib</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>attrib</name> || <name>kw</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>attrib</name> = (<name>attrib</name>) ? <call><name>PyDict_Copy</name><argument_list>(<argument><expr><name>attrib</name></expr></argument>)</argument_list></call> : <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>attrib</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <if>if <condition>(<expr><name>kw</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>PyDict_Update</name><argument_list>(<argument><expr><name>attrib</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>attrib</name> = <name>Py_None</name></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name>elem</name> = <call><name>element_new</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>element_add_subelement</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>elem</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>element_dealloc</name><parameter_list>(<param><decl><type><name>ElementObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>extra</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>element_dealloc_extra</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <comment type="block">/* discard attributes */</comment>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><call><name>JOIN_OBJ</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><call><name>JOIN_OBJ</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>tail</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RELEASE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ElementObject</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"destroy element"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* -------------------------------------------------------------------- */</comment>
<comment type="block">/* methods (in alphabetical order) */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>element_append</name><parameter_list>(<param><decl><type><name>ElementObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>element</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!:append"</expr></argument>, <argument><expr>&amp;<name>Element_Type</name></expr></argument>, <argument><expr>&amp;<name>element</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name>element_add_subelement</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>element</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>element_clear</name><parameter_list>(<param><decl><type><name>ElementObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":clear"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>extra</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>element_dealloc_extra</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><call><name>JOIN_OBJ</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>text</name></name> = <name>Py_None</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><call><name>JOIN_OBJ</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>tail</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>tail</name></name> = <name>Py_None</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>element_copy</name><parameter_list>(<param><decl><type><name>ElementObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ElementObject</name>*</type> <name>element</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":__copy__"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>element</name> = (<name>ElementObject</name>*) <call><name>element_new</name><argument_list>(
        <argument><expr><name><name>self</name>-&gt;<name>tag</name></name></expr></argument>, <argument><expr>(<name><name>self</name>-&gt;<name>extra</name></name>) ? <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>attrib</name></name> : <name>Py_None</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>element</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><call><name>JOIN_OBJ</name><argument_list>(<argument><expr><name><name>element</name>-&gt;<name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>element</name>-&gt;<name>text</name></name> = <name><name>self</name>-&gt;<name>text</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><call><name>JOIN_OBJ</name><argument_list>(<argument><expr><name><name>element</name>-&gt;<name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><call><name>JOIN_OBJ</name><argument_list>(<argument><expr><name><name>element</name>-&gt;<name>tail</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>element</name>-&gt;<name>tail</name></name> = <name><name>self</name>-&gt;<name>tail</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><call><name>JOIN_OBJ</name><argument_list>(<argument><expr><name><name>element</name>-&gt;<name>tail</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>extra</name></name></expr>)</condition><then> <block>{
        
        <if>if <condition>(<expr><call><name>element_resize</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>

        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>element</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><name><name>element</name>-&gt;<name>extra</name>-&gt;<name>length</name></name> = <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
        
    }</block></then></if>

    <return>return <expr>(<name>PyObject</name>*) <name>element</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>element_deepcopy</name><parameter_list>(<param><decl><type><name>ElementObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ElementObject</name>*</type> <name>element</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>attrib</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>text</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tail</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>id</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>memo</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O:__deepcopy__"</expr></argument>, <argument><expr>&amp;<name>memo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>tag</name> = <call><name>deepcopy</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>tag</name></name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>tag</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>extra</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>attrib</name> = <call><name>deepcopy</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>attrib</name></name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>attrib</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>attrib</name> = <name>Py_None</name></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name>element</name> = (<name>ElementObject</name>*) <call><name>element_new</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<name>element</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    
    <expr_stmt><expr><name>text</name> = <call><name>deepcopy</name><argument_list>(<argument><expr><call><name>JOIN_OBJ</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>text</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>text</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>element</name>-&gt;<name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>element</name>-&gt;<name>text</name></name> = <call><name>JOIN_SET</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>JOIN_GET</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>tail</name> = <call><name>deepcopy</name><argument_list>(<argument><expr><call><name>JOIN_OBJ</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>tail</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>tail</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>element</name>-&gt;<name>tail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>element</name>-&gt;<name>tail</name></name> = <call><name>JOIN_SET</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr><call><name>JOIN_GET</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>tail</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>extra</name></name></expr>)</condition><then> <block>{
        
        <if>if <condition>(<expr><call><name>element_resize</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>

        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>PyObject</name>*</type> <name>child</name> <init>= <expr><call><name>deepcopy</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<name>child</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>element</name>-&gt;<name>extra</name>-&gt;<name>length</name></name> = <name>i</name></expr>;</expr_stmt>
                <goto>goto <name>error</name>;</goto>
            }</block></then></if>
            <expr_stmt><expr><name><name>element</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name> = <name>child</name></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><name><name>element</name>-&gt;<name>extra</name>-&gt;<name>length</name></name> = <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
        
    }</block></then></if>

    <comment type="block">/* add object to memo dictionary (so deepcopy won't visit it again) */</comment>
    <expr_stmt><expr><name>id</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>Py_uintptr_t</name>) <name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name> = <call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>

    <return>return <expr>(<name>PyObject</name>*) <name>element</name></expr>;</return>

  <label><name>error</name>:</label>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<macro><name>LOCAL</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>checkpath</name><argument_list>(<argument>PyObject* tag</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>check</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>

    <comment type="block">/* check if a tag contains an xpath character */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATHCHAR</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(ch == '/' || ch == '*' || ch == '[' || ch == '@')</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if>if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>Py_UNICODE</name> *</type><name>p</name> <init>= <expr><call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> == '{'</expr>)</condition><then>
                <expr_stmt><expr><name>check</name> = 0</expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> == '}'</expr>)</condition><then>
                <expr_stmt><expr><name>check</name> = 1</expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><name>check</name> &amp;&amp; <call><name>PATHCHAR</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr>1</expr>;</return></then></if></else></if></else></if>
        }</block></for>
        <return>return <expr>0</expr>;</return>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name> *</type><name>p</name> <init>= <expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> == '{'</expr>)</condition><then>
                <expr_stmt><expr><name>check</name> = 0</expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> == '}'</expr>)</condition><then>
                <expr_stmt><expr><name>check</name> = 1</expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><name>check</name> &amp;&amp; <call><name>PATHCHAR</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr>1</expr>;</return></then></if></else></if></else></if>
        }</block></for>
        <return>return <expr>0</expr>;</return>
    }</block></then></if>

    <return>return <expr>1</expr>;</return> <comment type="block">/* unknown type; might be path expression */</comment>
}</block>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>element_find</name><parameter_list>(<param><decl><type><name>ElementObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tag</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O:find"</expr></argument>, <argument><expr>&amp;<name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name>checkpath</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><call><name>PyObject_CallMethod</name><argument_list>(
            <argument><expr><name>elementpath_obj</name></expr></argument>, <argument><expr>"find"</expr></argument>, <argument><expr>"OO"</expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>
            )</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>extra</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt></then></if>
        
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>item</name> <init>= <expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>Element_CheckExact</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> &amp;&amp;
            <call><name>PyObject_Compare</name><argument_list>(<argument><expr>((<name>ElementObject</name>*)<name>item</name>)-&gt;<name>tag</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>item</name></expr>;</return>
        }</block></then></if>
    }</block></for>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>element_findtext</name><parameter_list>(<param><decl><type><name>ElementObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>default_value</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O|O:findtext"</expr></argument>, <argument><expr>&amp;<name>tag</name></expr></argument>, <argument><expr>&amp;<name>default_value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name>checkpath</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><call><name>PyObject_CallMethod</name><argument_list>(
            <argument><expr><name>elementpath_obj</name></expr></argument>, <argument><expr>"findtext"</expr></argument>, <argument><expr>"OOO"</expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>default_value</name></expr></argument>
            )</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>extra</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>default_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>default_value</name></expr>;</return>
    }</block></then></if>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>ElementObject</name>*</type> <name>item</name> <init>= <expr>(<name>ElementObject</name>*) <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>Element_CheckExact</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>PyObject_Compare</name><argument_list>(<argument><expr><name><name>item</name>-&gt;<name>tag</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>PyObject</name>*</type> <name>text</name> <init>= <expr><call><name>element_get_text</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>text</name> == <name>Py_None</name></expr>)</condition><then>
                <return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</return></then></if>
            <expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>text</name></expr>;</return>
        }</block></then></if>
    }</block></for>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>default_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>default_value</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>element_findall</name><parameter_list>(<param><decl><type><name>ElementObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>out</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tag</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O:findall"</expr></argument>, <argument><expr>&amp;<name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name>checkpath</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><call><name>PyObject_CallMethod</name><argument_list>(
            <argument><expr><name>elementpath_obj</name></expr></argument>, <argument><expr>"findall"</expr></argument>, <argument><expr>"OO"</expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>
            )</argument_list></call></expr>;</return></then></if>

    <expr_stmt><expr><name>out</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>out</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>extra</name></name></expr>)</condition><then>
        <return>return <expr><name>out</name></expr>;</return></then></if>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>item</name> <init>= <expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>Element_CheckExact</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> &amp;&amp;
            <call><name>PyObject_Compare</name><argument_list>(<argument><expr>((<name>ElementObject</name>*)<name>item</name>)-&gt;<name>tag</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>
    }</block></for>

    <return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>element_get</name><parameter_list>(<param><decl><type><name>ElementObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>value</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>default_value</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O|O:get"</expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>default_value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>extra</name></name> || <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>attrib</name></name> == <name>Py_None</name></expr>)</condition><then>
        <expr_stmt><expr><name>value</name> = <name>default_value</name></expr>;</expr_stmt></then>
    <else>else <block>{
        <expr_stmt><expr><name>value</name> = <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>attrib</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then>
            <expr_stmt><expr><name>value</name> = <name>default_value</name></expr>;</expr_stmt></then></if>
    }</block></else></if>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>value</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>element_getchildren</name><parameter_list>(<param><decl><type><name>ElementObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>list</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":getchildren"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>extra</name></name></expr>)</condition><then>
        <return>return <expr><call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <expr_stmt><expr><name>list</name> = <call><name>PyList_New</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>list</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>item</name> <init>= <expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><name>list</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>element_getiterator</name><parameter_list>(<param><decl><type><name>ElementObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>result</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tag</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|O:getiterator"</expr></argument>, <argument><expr>&amp;<name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name>elementtree_getiterator_obj</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
            <argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
            <argument><expr>"getiterator helper not found"</expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>args</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>args</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> = <call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name>elementtree_getiterator_obj</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>element_getitem</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self_</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>index</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ElementObject</name>*</type> <name>self</name> <init>= <expr>(<name>ElementObject</name>*) <name>self_</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>extra</name></name> || <name>index</name> &lt; 0 || <name>index</name> &gt;= <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
            <argument><expr><name>PyExc_IndexError</name></expr></argument>,
            <argument><expr>"child index out of range"</expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>element_getslice</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self_</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>start</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>end</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ElementObject</name>*</type> <name>self</name> <init>= <expr>(<name>ElementObject</name>*) <name>self_</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>list</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>extra</name></name></expr>)</condition><then>
        <return>return <expr><call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <comment type="block">/* standard clamping */</comment>
    <if>if <condition>(<expr><name>start</name> &lt; 0</expr>)</condition><then>
        <expr_stmt><expr><name>start</name> = 0</expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>end</name> &lt; 0</expr>)</condition><then>
        <expr_stmt><expr><name>end</name> = 0</expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>end</name> &gt; <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>end</name> = <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>start</name> &gt; <name>end</name></expr>)</condition><then>
        <expr_stmt><expr><name>start</name> = <name>end</name></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name>list</name> = <call><name>PyList_New</name><argument_list>(<argument><expr><name>end</name> - <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>list</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <for>for (<init><expr><name>i</name> = <name>start</name></expr>;</init> <condition><expr><name>i</name> &lt; <name>end</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>item</name> <init>= <expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name> - <name>start</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><name>list</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>element_insert</name><parameter_list>(<param><decl><type><name>ElementObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>element</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iO!:insert"</expr></argument>, <argument><expr>&amp;<name>index</name></expr></argument>,
                          <argument><expr>&amp;<name>Element_Type</name></expr></argument>, <argument><expr>&amp;<name>element</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>extra</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>element_new_extra</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <if>if <condition>(<expr><name>index</name> &lt; 0</expr>)</condition><then>
        <expr_stmt><expr><name>index</name> = 0</expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>index</name> &gt; <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>index</name> = <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>;</expr_stmt></then></if>

    <if>if <condition>(<expr><call><name>element_resize</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <for>for (<init><expr><name>i</name> = <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &gt; <name>index</name></expr>;</condition> <incr><expr><name>i</name>--</expr></incr>)
        <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name>-1</expr>]</index></name></expr>;</expr_stmt></for>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>index</name></expr>]</index></name> = <name>element</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name>++</expr>;</expr_stmt>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>element_items</name><parameter_list>(<param><decl><type><name>ElementObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":items"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>extra</name></name> || <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>attrib</name></name> == <name>Py_None</name></expr>)</condition><then>
        <return>return <expr><call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <return>return <expr><call><name>PyDict_Items</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>attrib</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>element_keys</name><parameter_list>(<param><decl><type><name>ElementObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":keys"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>extra</name></name> || <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>attrib</name></name> == <name>Py_None</name></expr>)</condition><then>
        <return>return <expr><call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <return>return <expr><call><name>PyDict_Keys</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>attrib</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>element_length</name><parameter_list>(<param><decl><type><name>ElementObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>extra</name></name></expr>)</condition><then>
        <return>return <expr>0</expr>;</return></then></if>

    <return>return <expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>element_makeelement</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>elem</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>attrib</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"OO:makeelement"</expr></argument>, <argument><expr>&amp;<name>tag</name></expr></argument>, <argument><expr>&amp;<name>attrib</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>attrib</name> = <call><name>PyDict_Copy</name><argument_list>(<argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>attrib</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>elem</name> = <call><name>element_new</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>elem</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>element_reduce</name><parameter_list>(<param><decl><type><name>ElementObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":__reduce__"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <comment type="block">/* Hack alert: This method is used to work around a __copy__
       problem on certain 2.3 and 2.4 versions.  To save time and
       simplify the code, we create the copy in here, and use a dummy
       copyelement helper to trick the copy module into doing the
       right thing. */</comment>

    <if>if <condition>(<expr>!<name>elementtree_copyelement_obj</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
            <argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
            <argument><expr>"copyelement helper not found"</expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><call><name>Py_BuildValue</name><argument_list>(
        <argument><expr>"O(N)"</expr></argument>, <argument><expr><name>elementtree_copyelement_obj</name></expr></argument>, <argument><expr><call><name>element_copy</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>element_remove</name><parameter_list>(<param><decl><type><name>ElementObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>element</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!:remove"</expr></argument>, <argument><expr>&amp;<name>Element_Type</name></expr></argument>, <argument><expr>&amp;<name>element</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>extra</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* element has no children, so raise exception */</comment>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
            <argument><expr><name>PyExc_ValueError</name></expr></argument>,
            <argument><expr>"list.remove(x): x not in list"</expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name> == <name>element</name></expr>)</condition><then>
            <break>break;</break></then></if>
        <if>if <condition>(<expr><call><name>PyObject_Compare</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>element</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <break>break;</break></then></if>
    }</block></for>

    <if>if <condition>(<expr><name>i</name> == <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* element is not in children, so raise exception */</comment>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
            <argument><expr><name>PyExc_ValueError</name></expr></argument>,
            <argument><expr>"list.remove(x): x not in list"</expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name>--</expr>;</expr_stmt>

    <for>for (<init>;</init> <condition><expr><name>i</name> &lt; <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name>+1</expr>]</index></name></expr>;</expr_stmt></for>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>element_repr</name><parameter_list>(<param><decl><type><name>ElementObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>repr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>repr</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>"&lt;Element "</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PyString_ConcatAndDel</name><argument_list>(<argument><expr>&amp;<name>repr</name></expr></argument>, <argument><expr><call><name>PyObject_Repr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>tag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>" at %p&gt;"</expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyString_ConcatAndDel</name><argument_list>(<argument><expr>&amp;<name>repr</name></expr></argument>, <argument><expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>repr</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>element_set</name><parameter_list>(<param><decl><type><name>ElementObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>attrib</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>value</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"OO:set"</expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>extra</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>element_new_extra</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name>attrib</name> = <call><name>element_get_attrib</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>attrib</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>attrib</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>element_setslice</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self_</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>start</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>end</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>item</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ElementObject</name>*</type> <name>self</name> <init>= <expr>(<name>ElementObject</name>*) <name>self_</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>new</name></decl>, <decl><type ref="prev"/><name>old</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>recycle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>extra</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>element_new_extra</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <comment type="block">/* standard clamping */</comment>
    <if>if <condition>(<expr><name>start</name> &lt; 0</expr>)</condition><then>
        <expr_stmt><expr><name>start</name> = 0</expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>end</name> &lt; 0</expr>)</condition><then>
        <expr_stmt><expr><name>end</name> = 0</expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>end</name> &gt; <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>end</name> = <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>start</name> &gt; <name>end</name></expr>)</condition><then>
        <expr_stmt><expr><name>start</name> = <name>end</name></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name>old</name> = <name>end</name> - <name>start</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>item</name> == <name>NULL</name></expr>)</condition><then>
        <expr_stmt><expr><name>new</name> = 0</expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>PyList_CheckExact</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>new</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <comment type="block">/* FIXME: support arbitrary sequences? */</comment>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(
            <argument><expr><name>PyExc_TypeError</name></expr></argument>,
            <argument><expr>"expected list, not \"%.200s\""</expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>-1</expr>;</return>
    }</block></else></if></else></if>

    <if>if <condition>(<expr><name>old</name> &gt; 0</expr>)</condition><then> <block>{
        <comment type="block">/* to avoid recursive calls to this method (via decref), move
           old items to the recycle bin here, and get rid of them when
           we're done modifying the element */</comment>
        <expr_stmt><expr><name>recycle</name> = <call><name>PyList_New</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>old</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>recycle</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name> + <name>start</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
    }</block></then></if>

    <if>if <condition>(<expr><name>new</name> &lt; <name>old</name></expr>)</condition><then> <block>{
        <comment type="block">/* delete slice */</comment>
        <for>for (<init><expr><name>i</name> = <name>end</name></expr>;</init> <condition><expr><name>i</name> &lt; <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name> + <name>new</name> - <name>old</name></expr>]</index></name> = <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></for>
    }</block></then> <else>else <if>if <condition>(<expr><name>new</name> &gt; <name>old</name></expr>)</condition><then> <block>{
        <comment type="block">/* insert slice */</comment>
        <if>if <condition>(<expr><call><name>element_resize</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>new</name> - <name>old</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return <expr>-1</expr>;</return></then></if>
        <for>for (<init><expr><name>i</name> = <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name>-1</expr>;</init> <condition><expr><name>i</name> &gt;= <name>end</name></expr>;</condition> <incr><expr><name>i</name>--</expr></incr>)
            <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name> + <name>new</name> - <name>old</name></expr>]</index></name> = <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></for>
    }</block></then></if></else></if>

    <comment type="block">/* replace the slice */</comment>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>new</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>element</name> <init>= <expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name> + <name>start</name></expr>]</index></name> = <name>element</name></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name> += <name>new</name> - <name>old</name></expr>;</expr_stmt>

    <comment type="block">/* discard the recycle bin, and everything in it */</comment>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>recycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>element_setitem</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self_</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>index</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>item</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ElementObject</name>*</type> <name>self</name> <init>= <expr>(<name>ElementObject</name>*) <name>self_</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>old</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>extra</name></name> || <name>index</name> &lt; 0 || <name>index</name> &gt;= <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
            <argument><expr><name>PyExc_IndexError</name></expr></argument>,
            <argument><expr>"child assignment index out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>-1</expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>old</name> = <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>item</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>index</name></expr>]</index></name> = <name>item</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name>--</expr>;</expr_stmt>
        <for>for (<init><expr><name>i</name> = <name>index</name></expr>;</init> <condition><expr><name>i</name> &lt; <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>self</name>-&gt;<name>extra</name>-&gt;<name>children</name><index>[<expr><name>i</name>+1</expr>]</index></name></expr>;</expr_stmt></for>
    }</block></else></if>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr>0</expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>element_methods</name><index>[]</index></name> <init>= <expr><block>{

    <expr><block>{<expr>"clear"</expr>, <expr>(<name>PyCFunction</name>) <name>element_clear</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,

    <expr><block>{<expr>"get"</expr>, <expr>(<name>PyCFunction</name>) <name>element_get</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set"</expr>, <expr>(<name>PyCFunction</name>) <name>element_set</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,

    <expr><block>{<expr>"find"</expr>, <expr>(<name>PyCFunction</name>) <name>element_find</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"findtext"</expr>, <expr>(<name>PyCFunction</name>) <name>element_findtext</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"findall"</expr>, <expr>(<name>PyCFunction</name>) <name>element_findall</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,

    <expr><block>{<expr>"append"</expr>, <expr>(<name>PyCFunction</name>) <name>element_append</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"insert"</expr>, <expr>(<name>PyCFunction</name>) <name>element_insert</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"remove"</expr>, <expr>(<name>PyCFunction</name>) <name>element_remove</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,

    <expr><block>{<expr>"getiterator"</expr>, <expr>(<name>PyCFunction</name>) <name>element_getiterator</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"getchildren"</expr>, <expr>(<name>PyCFunction</name>) <name>element_getchildren</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,

    <expr><block>{<expr>"items"</expr>, <expr>(<name>PyCFunction</name>) <name>element_items</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"keys"</expr>, <expr>(<name>PyCFunction</name>) <name>element_keys</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,

    <expr><block>{<expr>"makeelement"</expr>, <expr>(<name>PyCFunction</name>) <name>element_makeelement</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,

    <expr><block>{<expr>"__copy__"</expr>, <expr>(<name>PyCFunction</name>) <name>element_copy</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"__deepcopy__"</expr>, <expr>(<name>PyCFunction</name>) <name>element_deepcopy</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,

    <comment type="block">/* Some 2.3 and 2.4 versions do not handle the __copy__ method on
       C objects correctly, so we have to fake it using a __reduce__-
       based hack (see the element_reduce implementation above for
       details). */</comment>

    <comment type="block">/* The behaviour has been changed in 2.3.5 and 2.4.1, so we're
       using a runtime test to figure out if we need to fake things
       or now (see the init code below).  The following entry is
       enabled only if the hack is needed. */</comment>

    <expr><block>{<expr>"!__reduce__"</expr>, <expr>(<name>PyCFunction</name>) <name>element_reduce</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,

    <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>  
<name>element_getattr</name><parameter_list>(<param><decl><type><name>ElementObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>char</name>*</type> <name>name</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>res</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>res</name> = <call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>element_methods</name></expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>res</name></expr>)</condition><then>
	<return>return <expr><name>res</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"tag"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
	<expr_stmt><expr><name>res</name> = <name><name>self</name>-&gt;<name>tag</name></name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"text"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <expr_stmt><expr><name>res</name> = <call><name>element_get_text</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"tail"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>res</name> = <call><name>element_get_tail</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"attrib"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>extra</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>element_new_extra</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name>res</name> = <call><name>element_get_attrib</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></else></if></else></if></else></if></else></if>

    <if>if <condition>(<expr>!<name>res</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>element_setattr</name><parameter_list>(<param><decl><type><name>ElementObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>name</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>value</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>value</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
            <argument><expr><name>PyExc_AttributeError</name></expr></argument>,
            <argument><expr>"can't delete element attributes"</expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>-1</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"tag"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>tag</name></name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"text"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><call><name>JOIN_OBJ</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>text</name></name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"tail"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><call><name>JOIN_OBJ</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>tail</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>tail</name></name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>tail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"attrib"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>extra</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>element_new_extra</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>attrib</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>attrib</name></name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>extra</name>-&gt;<name>attrib</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>-1</expr>;</return>
    }</block></else></if></else></if></else></if></else></if>

    <return>return <expr>0</expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>element_as_sequence</name> <init>= <expr><block>{
    <expr>(<name>lenfunc</name>) <name>element_length</name></expr>,
    <expr>0</expr>, <comment type="block">/* sq_concat */</comment>
    <expr>0</expr>, <comment type="block">/* sq_repeat */</comment>
    <expr><name>element_getitem</name></expr>,
    <expr><name>element_getslice</name></expr>,
    <expr><name>element_setitem</name></expr>,
    <expr><name>element_setslice</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>statichere</name> <name>PyTypeObject</name></type> <name>Element_Type</name> <init>= <expr><block>{
    <expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
    0</expr>, <expr>"Element"</expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ElementObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr>0</expr>,
    <comment type="block">/* methods */</comment>
    <expr>(<name>destructor</name>)<name>element_dealloc</name></expr>, <comment type="block">/* tp_dealloc */</comment>
    <expr>0</expr>, <comment type="block">/* tp_print */</comment>
    <expr>(<name>getattrfunc</name>)<name>element_getattr</name></expr>, <comment type="block">/* tp_getattr */</comment>
    <expr>(<name>setattrfunc</name>)<name>element_setattr</name></expr>, <comment type="block">/* tp_setattr */</comment>
    <expr>0</expr>, <comment type="block">/* tp_compare */</comment>
    <expr>(<name>reprfunc</name>)<name>element_repr</name></expr>, <comment type="block">/* tp_repr */</comment>
    <expr>0</expr>, <comment type="block">/* tp_as_number */</comment>
    <expr>&amp;<name>element_as_sequence</name></expr>, <comment type="block">/* tp_as_sequence */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* ==================================================================== */</comment>
<comment type="block">/* the tree builder type */</comment>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>

    <name>PyObject</name>*</type> <name>root</name></decl>;</decl_stmt> <comment type="block">/* root node (first created node) */</comment>

    <decl_stmt><decl><type><name>ElementObject</name>*</type> <name>this</name></decl>;</decl_stmt> <comment type="block">/* current node */</comment>
    <decl_stmt><decl><type><name>ElementObject</name>*</type> <name>last</name></decl>;</decl_stmt> <comment type="block">/* most recently created node */</comment>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>data</name></decl>;</decl_stmt> <comment type="block">/* data collector (string or list), or NULL */</comment>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>stack</name></decl>;</decl_stmt> <comment type="block">/* element stack */</comment>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>index</name></decl>;</decl_stmt> <comment type="block">/* current stack size (0=empty) */</comment>

    <comment type="block">/* element tracing */</comment>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>events</name></decl>;</decl_stmt> <comment type="block">/* list of events, or NULL if not collecting */</comment>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>start_event_obj</name></decl>;</decl_stmt> <comment type="block">/* event objects (NULL to ignore) */</comment>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>end_event_obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>start_ns_event_obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>end_ns_event_obj</name></decl>;</decl_stmt>

}</block></struct></type> <name>TreeBuilderObject</name>;</typedef>

<decl_stmt><decl><type><name>staticforward</name> <name>PyTypeObject</name></type> <name>TreeBuilder_Type</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TreeBuilder_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;TreeBuilder_Type)</cpp:value></cpp:define>

<comment type="block">/* -------------------------------------------------------------------- */</comment>
<comment type="block">/* constructor and destructor */</comment>

<macro><name>LOCAL</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro>
<macro><name>treebuilder_new</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>TreeBuilderObject</name>*</type> <name>self</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>self</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>TreeBuilderObject</name></expr></argument>, <argument><expr>&amp;<name>TreeBuilder_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>root</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>this</name></name> = (<name>ElementObject</name>*) <name>Py_None</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>last</name></name> = (<name>ElementObject</name>*) <name>Py_None</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>data</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>stack</name></name> = <call><name>PyList_New</name><argument_list>(<argument><expr>20</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>index</name></name> = 0</expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>events</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>start_event_obj</name></name> = <name><name>self</name>-&gt;<name>end_event_obj</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>start_ns_event_obj</name></name> = <name><name>self</name>-&gt;<name>end_ns_event_obj</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TreeBuilderObject</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"create treebuilder"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr>(<name>PyObject</name>*) <name>self</name></expr>;</return>
}</block>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>treebuilder</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self_</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":TreeBuilder"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <return>return <expr><call><name>treebuilder_new</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>treebuilder_dealloc</name><parameter_list>(<param><decl><type><name>TreeBuilderObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>end_ns_event_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>start_ns_event_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>end_event_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>start_event_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RELEASE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TreeBuilderObject</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"destroy treebuilder"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* -------------------------------------------------------------------- */</comment>
<comment type="block">/* handlers */</comment>

<macro><name>LOCAL</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro>
<macro><name>treebuilder_handle_xml</name><argument_list>(<argument>TreeBuilderObject* self</argument>, <argument>PyObject* encoding</argument>,
                       <argument>PyObject* standalone</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block>

<macro><name>LOCAL</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro>
<macro><name>treebuilder_handle_start</name><argument_list>(<argument>TreeBuilderObject* self</argument>, <argument>PyObject* tag</argument>,
                         <argument>PyObject* attrib</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>this</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>data</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>self</name>-&gt;<name>this</name></name> == <name><name>self</name>-&gt;<name>last</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><call><name>JOIN_OBJ</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>last</name>-&gt;<name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name>-&gt;<name>last</name>-&gt;<name>text</name></name> = <call><name>JOIN_SET</name><argument_list>(
                <argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><call><name>PyList_CheckExact</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><call><name>JOIN_OBJ</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>last</name>-&gt;<name>tail</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name>-&gt;<name>last</name>-&gt;<name>tail</name></name> = <call><name>JOIN_SET</name><argument_list>(
                <argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><call><name>PyList_CheckExact</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>data</name></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>node</name> = <call><name>element_new</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>node</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>this</name> = (<name>PyObject</name>*) <name><name>self</name>-&gt;<name>this</name></name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>this</name> != <name>Py_None</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>element_add_subelement</name><argument_list>(<argument><expr>(<name>ElementObject</name>*) <name>this</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr><name><name>self</name>-&gt;<name>root</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
                <argument><expr><name>PyExc_SyntaxError</name></expr></argument>,
                <argument><expr>"multiple elements on top level"</expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>error</name>;</goto>
        }</block></then></if>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>root</name></name> = <name>node</name></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>index</name></name> &lt; <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>index</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block></else></if>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>index</name></name>++</expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>this</name></name> = (<name>ElementObject</name>*) <name>node</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>last</name></name> = (<name>ElementObject</name>*) <name>node</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>start_event_obj</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>res</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>action</name> <init>= <expr><name><name>self</name>-&gt;<name>start_event_obj</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>res</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>res</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>events</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else
            <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if> <comment type="block">/* FIXME: propagate error */</comment>
    }</block></then></if>

    <return>return <expr><name>node</name></expr>;</return>

  <label><name>error</name>:</label>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block>

<macro><name>LOCAL</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro>
<macro><name>treebuilder_handle_data</name><argument_list>(<argument>TreeBuilderObject* self</argument>, <argument>PyObject* data</argument>)</argument_list></macro>
<block>{
    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>data</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>self</name>-&gt;<name>last</name></name> == (<name>ElementObject</name>*) <name>Py_None</name></expr>)</condition><then> <block>{
            <comment type="block">/* ignore calls to data before the first call to start */</comment>
            <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="block">/* store the first item as is */</comment>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>self</name>-&gt;<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <comment type="block">/* more than one item; use a list to collect items */</comment>
        <if>if <condition>(<expr><call><name>PyString_CheckExact</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>Py_REFCNT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call> == 1 &amp;&amp;
            <call><name>PyString_CheckExact</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> == 1</expr>)</condition><then> <block>{
            <comment type="block">/* expat often generates single character data sections; handle
               the most common case by resizing the existing string... */</comment>
            <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name> <init>= <expr><call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>_PyString_Resize</name><argument_list>(<argument><expr>&amp;<name><name>self</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>size</name> + 1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
            <expr_stmt><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call><index>[<expr><name>size</name></expr>]</index> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>PyList_CheckExact</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>PyObject</name>*</type> <name>list</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<name>list</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
            <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name>-&gt;<name>data</name></name> = <name>list</name></expr>;</expr_stmt>
        }</block></else></if></else></if>
    }</block></else></if>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block>

<macro><name>LOCAL</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro>
<macro><name>treebuilder_handle_end</name><argument_list>(<argument>TreeBuilderObject* self</argument>, <argument>PyObject* tag</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>item</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>data</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>self</name>-&gt;<name>this</name></name> == <name><name>self</name>-&gt;<name>last</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><call><name>JOIN_OBJ</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>last</name>-&gt;<name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name>-&gt;<name>last</name>-&gt;<name>text</name></name> = <call><name>JOIN_SET</name><argument_list>(
                <argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><call><name>PyList_CheckExact</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><call><name>JOIN_OBJ</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>last</name>-&gt;<name>tail</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name>-&gt;<name>last</name>-&gt;<name>tail</name></name> = <call><name>JOIN_SET</name><argument_list>(
                <argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><call><name>PyList_CheckExact</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>data</name></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>index</name></name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
            <argument><expr><name>PyExc_IndexError</name></expr></argument>,
            <argument><expr>"pop from empty stack"</expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>index</name></name>--</expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> = <call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>last</name></name> = (<name>ElementObject</name>*) <name><name>self</name>-&gt;<name>this</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>this</name></name> = (<name>ElementObject</name>*) <name>item</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>end_event_obj</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>res</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>action</name> <init>= <expr><name><name>self</name>-&gt;<name>end_event_obj</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>node</name> <init>= <expr>(<name>PyObject</name>*) <name><name>self</name>-&gt;<name>last</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>res</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>res</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>events</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else
            <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if> <comment type="block">/* FIXME: propagate error */</comment>
    }</block></then></if>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>(<name>PyObject</name>*) <name><name>self</name>-&gt;<name>last</name></name></expr>;</return>
}</block>

<macro><name>LOCAL</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>treebuilder_handle_namespace</name><argument_list>(<argument>TreeBuilderObject* self</argument>, <argument>int start</argument>,
                             <argument>const char* prefix</argument>, <argument>const char *uri</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>action</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>parcel</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>events</name></name></expr>)</condition><then>
        <return>return;</return></then></if>

    <if>if <condition>(<expr><name>start</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>start_ns_event_obj</name></name></expr>)</condition><then>
            <return>return;</return></then></if>
        <expr_stmt><expr><name>action</name> = <name><name>self</name>-&gt;<name>start_ns_event_obj</name></name></expr>;</expr_stmt>
        <comment type="block">/* FIXME: prefix and uri use utf-8 encoding! */</comment>
        <expr_stmt><expr><name>parcel</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ss"</expr></argument>, <argument><expr>(<name>prefix</name>) ? <name>prefix</name> : ""</expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>parcel</name></expr>)</condition><then>
            <return>return;</return></then></if>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>end_ns_event_obj</name></name></expr>)</condition><then>
            <return>return;</return></then></if>
        <expr_stmt><expr><name>action</name> = <name><name>self</name>-&gt;<name>end_ns_event_obj</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>parcel</name> = <name>Py_None</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>parcel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name>res</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>res</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>parcel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>events</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else
        <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if> <comment type="block">/* FIXME: propagate error */</comment>
}</block>

<comment type="block">/* -------------------------------------------------------------------- */</comment>
<comment type="block">/* methods (in alphabetical order) */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>treebuilder_data</name><parameter_list>(<param><decl><type><name>TreeBuilderObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>data</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O:data"</expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <return>return <expr><call><name>treebuilder_handle_data</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>treebuilder_end</name><parameter_list>(<param><decl><type><name>TreeBuilderObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tag</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O:end"</expr></argument>, <argument><expr>&amp;<name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <return>return <expr><call><name>treebuilder_handle_end</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<macro><name>LOCAL</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro>
<macro><name>treebuilder_done</name><argument_list>(<argument>TreeBuilderObject* self</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>res</name></decl>;</decl_stmt>

    <comment type="block">/* FIXME: check stack size? */</comment>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>root</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>res</name> = <name><name>self</name>-&gt;<name>root</name></name></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><name>res</name> = <name>Py_None</name></expr>;</expr_stmt></else></if>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
}</block>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>treebuilder_close</name><parameter_list>(<param><decl><type><name>TreeBuilderObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":close"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <return>return <expr><call><name>treebuilder_done</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>treebuilder_start</name><parameter_list>(<param><decl><type><name>TreeBuilderObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>attrib</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O|O:start"</expr></argument>, <argument><expr>&amp;<name>tag</name></expr></argument>, <argument><expr>&amp;<name>attrib</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <return>return <expr><call><name>treebuilder_handle_start</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>treebuilder_xml</name><parameter_list>(<param><decl><type><name>TreeBuilderObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>encoding</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>standalone</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"OO:xml"</expr></argument>, <argument><expr>&amp;<name>encoding</name></expr></argument>, <argument><expr>&amp;<name>standalone</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <return>return <expr><call><name>treebuilder_handle_xml</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>standalone</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>treebuilder_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"data"</expr>, <expr>(<name>PyCFunction</name>) <name>treebuilder_data</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"start"</expr>, <expr>(<name>PyCFunction</name>) <name>treebuilder_start</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"end"</expr>, <expr>(<name>PyCFunction</name>) <name>treebuilder_end</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"xml"</expr>, <expr>(<name>PyCFunction</name>) <name>treebuilder_xml</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"close"</expr>, <expr>(<name>PyCFunction</name>) <name>treebuilder_close</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>  
<name>treebuilder_getattr</name><parameter_list>(<param><decl><type><name>TreeBuilderObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>char</name>*</type> <name>name</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>treebuilder_methods</name></expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>statichere</name> <name>PyTypeObject</name></type> <name>TreeBuilder_Type</name> <init>= <expr><block>{
    <expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
    0</expr>, <expr>"TreeBuilder"</expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>TreeBuilderObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr>0</expr>,
    <comment type="block">/* methods */</comment>
    <expr>(<name>destructor</name>)<name>treebuilder_dealloc</name></expr>, <comment type="block">/* tp_dealloc */</comment>
    <expr>0</expr>, <comment type="block">/* tp_print */</comment>
    <expr>(<name>getattrfunc</name>)<name>treebuilder_getattr</name></expr>, <comment type="block">/* tp_getattr */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* ==================================================================== */</comment>
<comment type="block">/* the expat interface */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_EXPAT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"expat.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PYEXPAT_CAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pyexpat.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyExpat_CAPI</name>*</type> <name>expat_capi</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPAT</name><parameter_list>(<param><type><name>func</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(expat_capi-&gt;func)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPAT</name><parameter_list>(<param><type><name>func</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(XML_##func)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>

    <name>XML_Parser</name></type> <name>parser</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>target</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>entity</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>names</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>handle_xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>handle_start</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>handle_data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>handle_end</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>handle_comment</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>handle_pi</name></decl>;</decl_stmt>

}</block></struct></type> <name>XMLParserObject</name>;</typedef>

<decl_stmt><decl><type><name>staticforward</name> <name>PyTypeObject</name></type> <name>XMLParser_Type</name></decl>;</decl_stmt>

<comment type="block">/* helpers */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>LOCAL</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>checkstring</name><argument_list>(<argument>const char* string</argument>, <argument>int size</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* check if an 8-bit string contains UTF-8 characters */</comment>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <if>if <condition>(<expr><name><name>string</name><index>[<expr><name>i</name></expr>]</index></name> &amp; 0x80</expr>)</condition><then>
            <return>return <expr>1</expr>;</return></then></if></for>

    <return>return <expr>0</expr>;</return>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>LOCAL</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro>
<macro><name>makestring</name><argument_list>(<argument>const char* string</argument>, <argument>int size</argument>)</argument_list></macro>
<block>{
    <comment type="block">/* convert a UTF-8 string to either a 7-bit ascii string or a
       Unicode string */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if>if <condition>(<expr><call><name>checkstring</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><call><name>PyUnicode_DecodeUTF8</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr>"strict"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>LOCAL</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro>
<macro><name>makeuniversal</name><argument_list>(<argument>XMLParserObject* self</argument>, <argument>const char* string</argument>)</argument_list></macro>
<block>{
    <comment type="block">/* convert a UTF-8 tag/attribute name from the expat parser
       to a universal name string */</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>value</name></decl>;</decl_stmt>

    <comment type="block">/* look the 'raw' name up in the names dictionary */</comment>
    <expr_stmt><expr><name>key</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>key</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>value</name> = <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>names</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>value</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <comment type="block">/* new name.  convert to universal name, and decode as
           necessary */</comment>

        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tag</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>*</type> <name>p</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

        <comment type="block">/* look for namespace separator */</comment>
        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <if>if <condition>(<expr><name><name>string</name><index>[<expr><name>i</name></expr>]</index></name> == '}'</expr>)</condition><then>
                <break>break;</break></then></if></for>
        <if>if <condition>(<expr><name>i</name> != <name>size</name></expr>)</condition><then> <block>{
            <comment type="block">/* convert to universal name */</comment>
            <expr_stmt><expr><name>tag</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><index>[<expr>0</expr>]</index></name> = '{'</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name>+1</expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name>++</expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="block">/* plain name; use key as tag */</comment>
            <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tag</name> = <name>key</name></expr>;</expr_stmt>
        }</block></else></if>
        
        <comment type="block">/* decode universal name */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <comment type="block">/* inline makestring, to avoid duplicating the source string if
           it's not an utf-8 string */</comment>
        <expr_stmt><expr><name>p</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>checkstring</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>value</name> = <call><name>PyUnicode_DecodeUTF8</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr>"strict"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
            }</block></then></if>
        }</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name>value</name> = <name>tag</name></expr>;</expr_stmt></else></if> <comment type="block">/* use tag as is */</comment>

        <comment type="block">/* add to names dictionary */</comment>
        <if>if <condition>(<expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>names</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
    }</block></else></if>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>value</name></expr>;</return>
}</block>

<comment type="block">/* -------------------------------------------------------------------- */</comment>
<comment type="block">/* handlers */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>expat_default_handler</name><parameter_list>(<param><decl><type><name>XMLParserObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>XML_Char</name>*</type> <name>data_in</name></decl></param>,
                      <param><decl><type><name>int</name></type> <name>data_len</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>res</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>data_len</name> &lt; 2 || <name><name>data_in</name><index>[<expr>0</expr>]</index></name> != '&amp;'</expr>)</condition><then>
        <return>return;</return></then></if>

    <expr_stmt><expr><name>key</name> = <call><name>makestring</name><argument_list>(<argument><expr><name>data_in</name> + 1</expr></argument>, <argument><expr><name>data_len</name> - 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>key</name></expr>)</condition><then>
        <return>return;</return></then></if>

    <expr_stmt><expr><name>value</name> = <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>entity</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>value</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>TreeBuilder_CheckExact</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>target</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>res</name> = <call><name>treebuilder_handle_data</name><argument_list>(
                <argument><expr>(<name>TreeBuilderObject</name>*) <name><name>self</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>
                )</argument_list></call></expr>;</expr_stmt></then>
        <else>else <if>if <condition>(<expr><name><name>self</name>-&gt;<name>handle_data</name></name></expr>)</condition><then>
            <expr_stmt><expr><name>res</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>handle_data</name></name></expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name>res</name> = <name>NULL</name></expr>;</expr_stmt></else></if></else></if>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(
            <argument><expr><name>PyExc_SyntaxError</name></expr></argument>, <argument><expr>"undefined entity &amp;%s;: line %ld, column %ld"</expr></argument>,
            <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><call><name>EXPAT</name><argument_list>(<argument><expr><name>GetErrorLineNumber</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>parser</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><call><name>EXPAT</name><argument_list>(<argument><expr><name>GetErrorColumnNumber</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>parser</name></name></expr></argument>)</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>expat_start_handler</name><parameter_list>(<param><decl><type><name>XMLParserObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>XML_Char</name>*</type> <name>tag_in</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>XML_Char</name> **</type><name>attrib_in</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>attrib</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>

    <comment type="block">/* tag name */</comment>
    <expr_stmt><expr><name>tag</name> = <call><name>makeuniversal</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tag_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>tag</name></expr>)</condition><then>
        <return>return;</return></then></if> <comment type="block">/* parser will look for errors */</comment>

    <comment type="block">/* attributes */</comment>
    <if>if <condition>(<expr><name><name>attrib_in</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>attrib</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>attrib</name></expr>)</condition><then>
            <return>return;</return></then></if>
        <while>while <condition>(<expr><name><name>attrib_in</name><index>[<expr>0</expr>]</index></name> &amp;&amp; <name><name>attrib_in</name><index>[<expr>1</expr>]</index></name></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>PyObject</name>*</type> <name>key</name> <init>= <expr><call><name>makeuniversal</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>attrib_in</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PyObject</name>*</type> <name>value</name> <init>= <expr><call><name>makestring</name><argument_list>(<argument><expr><name><name>attrib_in</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>attrib_in</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<name>key</name> || !<name>value</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>
            <expr_stmt><expr><name>ok</name> = <call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>attrib</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ok</name> &lt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>
            <expr_stmt><expr><name>attrib_in</name> += 2</expr>;</expr_stmt>
        }</block></while>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>attrib</name> = <name>Py_None</name></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><call><name>TreeBuilder_CheckExact</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>target</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <comment type="block">/* shortcut */</comment>
        <expr_stmt><expr><name>res</name> = <call><name>treebuilder_handle_start</name><argument_list>(<argument><expr>(<name>TreeBuilderObject</name>*) <name><name>self</name>-&gt;<name>target</name></name></expr></argument>,
                                       <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name><name>self</name>-&gt;<name>handle_start</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>res</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>handle_start</name></name></expr></argument>, <argument><expr>"OO"</expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><name>res</name> = <name>NULL</name></expr>;</expr_stmt></else></if></else></if>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>expat_data_handler</name><parameter_list>(<param><decl><type><name>XMLParserObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>XML_Char</name>*</type> <name>data_in</name></decl></param>,
                   <param><decl><type><name>int</name></type> <name>data_len</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>res</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>data</name> = <call><name>makestring</name><argument_list>(<argument><expr><name>data_in</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>data</name></expr>)</condition><then>
        <return>return;</return></then></if> <comment type="block">/* parser will look for errors */</comment>

    <if>if <condition>(<expr><call><name>TreeBuilder_CheckExact</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>target</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <comment type="block">/* shortcut */</comment>
        <expr_stmt><expr><name>res</name> = <call><name>treebuilder_handle_data</name><argument_list>(<argument><expr>(<name>TreeBuilderObject</name>*) <name><name>self</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name><name>self</name>-&gt;<name>handle_data</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>res</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>handle_data</name></name></expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><name>res</name> = <name>NULL</name></expr>;</expr_stmt></else></if></else></if>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>expat_end_handler</name><parameter_list>(<param><decl><type><name>XMLParserObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>XML_Char</name>*</type> <name>tag_in</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>tag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>TreeBuilder_CheckExact</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>target</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <comment type="block">/* shortcut */</comment>
        <comment type="block">/* the standard tree builder doesn't look at the end tag */</comment>
        <expr_stmt><expr><name>res</name> = <call><name>treebuilder_handle_end</name><argument_list>(
            <argument><expr>(<name>TreeBuilderObject</name>*) <name><name>self</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>
            )</argument_list></call></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name><name>self</name>-&gt;<name>handle_end</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>tag</name> = <call><name>makeuniversal</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tag_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>tag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>res</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>handle_end</name></name></expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if></else></if>

    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>expat_start_ns_handler</name><parameter_list>(<param><decl><type><name>XMLParserObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>XML_Char</name>*</type> <name>prefix</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>XML_Char</name> *</type><name>uri</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>treebuilder_handle_namespace</name><argument_list>(
        <argument><expr>(<name>TreeBuilderObject</name>*) <name><name>self</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>expat_end_ns_handler</name><parameter_list>(<param><decl><type><name>XMLParserObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>XML_Char</name>*</type> <name>prefix_in</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>treebuilder_handle_namespace</name><argument_list>(
        <argument><expr>(<name>TreeBuilderObject</name>*) <name><name>self</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>expat_comment_handler</name><parameter_list>(<param><decl><type><name>XMLParserObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>XML_Char</name>*</type> <name>comment_in</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>comment</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>res</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>handle_comment</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>comment</name> = <call><name>makestring</name><argument_list>(<argument><expr><name>comment_in</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>comment_in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>comment</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>res</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>handle_comment</name></name></expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>expat_pi_handler</name><parameter_list>(<param><decl><type><name>XMLParserObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>XML_Char</name>*</type> <name>target_in</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>XML_Char</name>*</type> <name>data_in</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>target</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>res</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>handle_pi</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>target</name> = <call><name>makestring</name><argument_list>(<argument><expr><name>target_in</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>target_in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>data</name> = <call><name>makestring</name><argument_list>(<argument><expr><name>data_in</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data_in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>target</name> &amp;&amp; <name>data</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>res</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>handle_pi</name></name></expr></argument>, <argument><expr>"OO"</expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>expat_unknown_encoding_handler</name><parameter_list>(<param><decl><type><name>XMLParserObject</name> *</type><name>self</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>XML_Char</name> *</type><name>name</name></decl></param>,
                               <param><decl><type><name>XML_Encoding</name> *</type><name>info</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>u</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_UNICODE</name>*</type> <name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>s</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XML_Encoding</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 256</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> = <name>i</name></expr>;</expr_stmt></for>
    
    <expr_stmt><expr><name>u</name> = <call><name>PyUnicode_Decode</name><argument_list>(<argument><expr>(<name>char</name>*) <name>s</name></expr></argument>, <argument><expr>256</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>"replace"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>u</name></expr>)</condition><then>
        <return>return <expr><name>XML_STATUS_ERROR</name></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> != 256</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>XML_STATUS_ERROR</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>p</name> = <call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 256</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
	<if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> != <name>Py_UNICODE_REPLACEMENT_CHARACTER</name></expr>)</condition><then>
	    <expr_stmt><expr><name><name>info</name>-&gt;<name>map</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></then>
        <else>else
	    <expr_stmt><expr><name><name>info</name>-&gt;<name>map</name><index>[<expr><name>i</name></expr>]</index></name> = -1</expr>;</expr_stmt></else></if>
    }</block></for>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>XML_STATUS_OK</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* -------------------------------------------------------------------- */</comment>
<comment type="block">/* constructor and destructor */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>xmlparser</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self_</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XMLParserObject</name>*</type> <name>self</name></decl>;</decl_stmt>
    <comment type="block">/* FIXME: does this need to be static? */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <name>XML_Memory_Handling_Suite</name></type> <name>memory_handler</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>target</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>*</type> <name>encoding</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{ <expr>"target"</expr>, <expr>"encoding"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"|Oz:XMLParser"</expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
                                     <argument><expr>&amp;<name>target</name></expr></argument>, <argument><expr>&amp;<name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PYEXPAT_CAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if>if <condition>(<expr>!<name>expat_capi</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
            <argument><expr><name>PyExc_RuntimeError</name></expr></argument>, <argument><expr>"cannot load dispatch table from pyexpat"</expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>self</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>XMLParserObject</name></expr></argument>, <argument><expr>&amp;<name>XMLParser_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>entity</name></name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>entity</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
     
    <expr_stmt><expr><name><name>self</name>-&gt;<name>names</name></name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>names</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>entity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>memory_handler</name>.<name>malloc_fcn</name></name> = <name>PyObject_Malloc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>memory_handler</name>.<name>realloc_fcn</name></name> = <name>PyObject_Realloc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>memory_handler</name>.<name>free_fcn</name></name> = <name>PyObject_Free</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>parser</name></name> = <call><call><name>EXPAT</name><argument_list>(<argument><expr><name>ParserCreate_MM</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr>&amp;<name>memory_handler</name></expr></argument>, <argument><expr>"}"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>parser</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>entity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* setup target handlers */</comment>
    <if>if <condition>(<expr>!<name>target</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>target</name> = <call><name>treebuilder_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>target</name></expr>)</condition><then> <block>{
            <function_decl><type><name>EXPAT</name></type>(<name>ParserFree</name>)<parameter_list>(<param><decl><type><name><name>self</name>-&gt;<name>parser</name></name></type></decl></param>)</parameter_list>;</function_decl>
            <expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>entity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
    }</block></then> <else>else
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>target</name></name> = <name>target</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>handle_xml</name></name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr>"xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>handle_start</name></name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr>"start"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>handle_data</name></name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr>"data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>handle_end</name></name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr>"end"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>handle_comment</name></name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr>"comment"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>handle_pi</name></name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr>"pi"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* configure parser */</comment>
    <function_decl><type><name>EXPAT</name></type>(<name>SetUserData</name>)<parameter_list>(<param><decl><type><name><name>self</name>-&gt;<name>parser</name></name></type></decl></param>, <param><decl><type><name>self</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><call><name>EXPAT</name><argument_list>(<argument><expr><name>SetElementHandler</name></expr></argument>)</argument_list></call><argument_list>(
        <argument><expr><name><name>self</name>-&gt;<name>parser</name></name></expr></argument>,
        <argument><expr>(<name>XML_StartElementHandler</name>) <name>expat_start_handler</name></expr></argument>,
        <argument><expr>(<name>XML_EndElementHandler</name>) <name>expat_end_handler</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><call><name>EXPAT</name><argument_list>(<argument><expr><name>SetDefaultHandlerExpand</name></expr></argument>)</argument_list></call><argument_list>(
        <argument><expr><name><name>self</name>-&gt;<name>parser</name></name></expr></argument>,
        <argument><expr>(<name>XML_DefaultHandler</name>) <name>expat_default_handler</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><call><name>EXPAT</name><argument_list>(<argument><expr><name>SetCharacterDataHandler</name></expr></argument>)</argument_list></call><argument_list>(
        <argument><expr><name><name>self</name>-&gt;<name>parser</name></name></expr></argument>,
        <argument><expr>(<name>XML_CharacterDataHandler</name>) <name>expat_data_handler</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>handle_comment</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><call><name>EXPAT</name><argument_list>(<argument><expr><name>SetCommentHandler</name></expr></argument>)</argument_list></call><argument_list>(
            <argument><expr><name><name>self</name>-&gt;<name>parser</name></name></expr></argument>,
            <argument><expr>(<name>XML_CommentHandler</name>) <name>expat_comment_handler</name></expr></argument>
            )</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>handle_pi</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><call><name>EXPAT</name><argument_list>(<argument><expr><name>SetProcessingInstructionHandler</name></expr></argument>)</argument_list></call><argument_list>(
            <argument><expr><name><name>self</name>-&gt;<name>parser</name></name></expr></argument>,
            <argument><expr>(<name>XML_ProcessingInstructionHandler</name>) <name>expat_pi_handler</name></expr></argument>
            )</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><call><name>EXPAT</name><argument_list>(<argument><expr><name>SetUnknownEncodingHandler</name></expr></argument>)</argument_list></call><argument_list>(
        <argument><expr><name><name>self</name>-&gt;<name>parser</name></name></expr></argument>,
        <argument><expr>(<name>XML_UnknownEncodingHandler</name>) <name>expat_unknown_encoding_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>ALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XMLParserObject</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"create expatparser"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr>(<name>PyObject</name>*) <name>self</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xmlparser_dealloc</name><parameter_list>(<param><decl><type><name>XMLParserObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <function_decl><type><name>EXPAT</name></type>(<name>ParserFree</name>)<parameter_list>(<param><decl><type><name><name>self</name>-&gt;<name>parser</name></name></type></decl></param>)</parameter_list>;</function_decl>

    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>handle_pi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>handle_comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>handle_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>handle_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>handle_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>handle_xml</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>entity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RELEASE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XMLParserObject</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"destroy expatparser"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* -------------------------------------------------------------------- */</comment>
<comment type="block">/* methods (in alphabetical order) */</comment>

<macro><name>LOCAL</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro>
<macro><name>expat_parse</name><argument_list>(<argument>XMLParserObject* self</argument>, <argument>char* data</argument>, <argument>int data_len</argument>, <argument>int final</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ok</name> = <call><call><name>EXPAT</name><argument_list>(<argument><expr><name>Parse</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>parser</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>, <argument><expr><name>final</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(
            <argument><expr><name>PyExc_SyntaxError</name></expr></argument>, <argument><expr>"%s: line %ld, column %ld"</expr></argument>,
            <argument><expr><call><call><name>EXPAT</name><argument_list>(<argument><expr><name>ErrorString</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><call><call><name>EXPAT</name><argument_list>(<argument><expr><name>GetErrorCode</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>parser</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><call><name>EXPAT</name><argument_list>(<argument><expr><name>GetErrorLineNumber</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>parser</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><call><name>EXPAT</name><argument_list>(<argument><expr><name>GetErrorColumnNumber</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>parser</name></name></expr></argument>)</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>xmlparser_close</name><parameter_list>(<param><decl><type><name>XMLParserObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* end feeding data to parser */</comment>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>res</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":close"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>res</name> = <call><name>expat_parse</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>res</name> &amp;&amp; <call><name>TreeBuilder_CheckExact</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>target</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>treebuilder_done</name><argument_list>(<argument><expr>(<name>TreeBuilderObject</name>*) <name><name>self</name>-&gt;<name>target</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>xmlparser_feed</name><parameter_list>(<param><decl><type><name>XMLParserObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* feed data to parser */</comment>

    <decl_stmt><decl><type><name>char</name>*</type> <name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>data_len</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#:feed"</expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>data_len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <return>return <expr><call><name>expat_parse</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>xmlparser_parse</name><parameter_list>(<param><decl><type><name>XMLParserObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* (internal) parse until end of input stream */</comment>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>reader</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>buffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>res</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>fileobj</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O:_parse"</expr></argument>, <argument><expr>&amp;<name>fileobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>reader</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>fileobj</name></expr></argument>, <argument><expr>"read"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>reader</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    
    <comment type="block">/* read from open file object */</comment>
    <for>for (<init>;</init><condition>;</condition><incr/>) <block>{

        <expr_stmt><expr><name>buffer</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>64*1024</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<name>buffer</name></expr>)</condition><then> <block>{
            <comment type="block">/* read failed (e.g. due to KeyboardInterrupt) */</comment>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name>PyString_CheckExact</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> || <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>

        <expr_stmt><expr><name>res</name> = <call><name>expat_parse</name><argument_list>(
            <argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>
            )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<name>res</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></for>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>res</name> = <call><name>expat_parse</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>res</name> &amp;&amp; <call><name>TreeBuilder_CheckExact</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>target</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>treebuilder_done</name><argument_list>(<argument><expr>(<name>TreeBuilderObject</name>*) <name><name>self</name>-&gt;<name>target</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>xmlparser_setevents</name><parameter_list>(<param><decl><type><name>XMLParserObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* activate element event reporting */</comment>

    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TreeBuilderObject</name>*</type> <name>target</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>events</name></decl>;</decl_stmt> <comment type="block">/* event collector */</comment>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>event_set</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!|O:_setevents"</expr></argument>,  <argument><expr>&amp;<name>PyList_Type</name></expr></argument>, <argument><expr>&amp;<name>events</name></expr></argument>,
                          <argument><expr>&amp;<name>event_set</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<call><name>TreeBuilder_CheckExact</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>target</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
            <argument><expr><name>PyExc_TypeError</name></expr></argument>,
            <argument><expr>"event handling only supported for cElementTree.Treebuilder "
            "targets"</expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>target</name> = (<name>TreeBuilderObject</name>*) <name><name>self</name>-&gt;<name>target</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>target</name>-&gt;<name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>target</name>-&gt;<name>events</name></name> = <name>events</name></expr>;</expr_stmt>

    <comment type="block">/* clear out existing events */</comment>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>target</name>-&gt;<name>start_event_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>target</name>-&gt;<name>start_event_obj</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>target</name>-&gt;<name>end_event_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>target</name>-&gt;<name>end_event_obj</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>target</name>-&gt;<name>start_ns_event_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>target</name>-&gt;<name>start_ns_event_obj</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>target</name>-&gt;<name>end_ns_event_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>target</name>-&gt;<name>end_ns_event_obj</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>event_set</name> == <name>Py_None</name></expr>)</condition><then> <block>{
        <comment type="block">/* default is "end" only */</comment>
        <expr_stmt><expr><name><name>target</name>-&gt;<name>end_event_obj</name></name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>"end"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr>!<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>event_set</name></expr></argument>)</argument_list></call></expr>)</condition><then> <comment type="block">/* FIXME: handle arbitrary sequences */</comment>
        <goto>goto <name>error</name>;</goto></then></if>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>event_set</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>item</name> <init>= <expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>event_set</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>*</type> <name>event</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name>PyString_Check</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
        <expr_stmt><expr><name>event</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr>"start"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>target</name>-&gt;<name>start_event_obj</name></name> = <name>item</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr>"end"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>target</name>-&gt;<name>end_event_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>target</name>-&gt;<name>end_event_obj</name></name> = <name>item</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr>"start-ns"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>target</name>-&gt;<name>start_ns_event_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>target</name>-&gt;<name>start_ns_event_obj</name></name> = <name>item</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><call><name>EXPAT</name><argument_list>(<argument><expr><name>SetNamespaceDeclHandler</name></expr></argument>)</argument_list></call><argument_list>(
                <argument><expr><name><name>self</name>-&gt;<name>parser</name></name></expr></argument>,
                <argument><expr>(<name>XML_StartNamespaceDeclHandler</name>) <name>expat_start_ns_handler</name></expr></argument>,
                <argument><expr>(<name>XML_EndNamespaceDeclHandler</name>) <name>expat_end_ns_handler</name></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr>"end-ns"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>target</name>-&gt;<name>end_ns_event_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>target</name>-&gt;<name>end_ns_event_obj</name></name> = <name>item</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><call><name>EXPAT</name><argument_list>(<argument><expr><name>SetNamespaceDeclHandler</name></expr></argument>)</argument_list></call><argument_list>(
                <argument><expr><name><name>self</name>-&gt;<name>parser</name></name></expr></argument>,
                <argument><expr>(<name>XML_StartNamespaceDeclHandler</name>) <name>expat_start_ns_handler</name></expr></argument>,
                <argument><expr>(<name>XML_EndNamespaceDeclHandler</name>) <name>expat_end_ns_handler</name></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(
                <argument><expr><name>PyExc_ValueError</name></expr></argument>,
                <argument><expr>"unknown event '%s'"</expr></argument>, <argument><expr><name>event</name></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></else></if></else></if></else></if></else></if>
    }</block></for>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>

  <label><name>error</name>:</label>
    <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
        <argument><expr><name>PyExc_TypeError</name></expr></argument>,
        <argument><expr>"invalid event tuple"</expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>xmlparser_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"feed"</expr>, <expr>(<name>PyCFunction</name>) <name>xmlparser_feed</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"close"</expr>, <expr>(<name>PyCFunction</name>) <name>xmlparser_close</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"_parse"</expr>, <expr>(<name>PyCFunction</name>) <name>xmlparser_parse</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"_setevents"</expr>, <expr>(<name>PyCFunction</name>) <name>xmlparser_setevents</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>  
<name>xmlparser_getattr</name><parameter_list>(<param><decl><type><name>XMLParserObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>char</name>*</type> <name>name</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>res</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>res</name> = <call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>xmlparser_methods</name></expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>res</name></expr>)</condition><then>
	<return>return <expr><name>res</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"entity"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
	<expr_stmt><expr><name>res</name> = <name><name>self</name>-&gt;<name>entity</name></name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"target"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
	<expr_stmt><expr><name>res</name> = <name><name>self</name>-&gt;<name>target</name></name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"version"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"Expat %d.%d.%d"</expr></argument>, <argument><expr><name>XML_MAJOR_VERSION</name></expr></argument>,
                <argument><expr><name>XML_MINOR_VERSION</name></expr></argument>, <argument><expr><name>XML_MICRO_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></else></if></else></if></else></if>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>statichere</name> <name>PyTypeObject</name></type> <name>XMLParser_Type</name> <init>= <expr><block>{
    <expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
    0</expr>, <expr>"XMLParser"</expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>XMLParserObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr>0</expr>,
    <comment type="block">/* methods */</comment>
    <expr>(<name>destructor</name>)<name>xmlparser_dealloc</name></expr>, <comment type="block">/* tp_dealloc */</comment>
    <expr>0</expr>, <comment type="block">/* tp_print */</comment>
    <expr>(<name>getattrfunc</name>)<name>xmlparser_getattr</name></expr>, <comment type="block">/* tp_getattr */</comment>
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* ==================================================================== */</comment>
<comment type="block">/* python module interface */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>_functions</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"Element"</expr>, <expr>(<name>PyCFunction</name>) <name>element</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"SubElement"</expr>, <expr>(<name>PyCFunction</name>) <name>subelement</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"TreeBuilder"</expr>, <expr>(<name>PyCFunction</name>) <name>treebuilder</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_EXPAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{<expr>"XMLParser"</expr>, <expr>(<name>PyCFunction</name>) <name>xmlparser</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"XMLTreeBuilder"</expr>, <expr>(<name>PyCFunction</name>) <name>xmlparser</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<macro><name>DL_EXPORT</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>init_elementtree</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>g</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>*</type> <name>bootstrap</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PYEXPAT_CAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type>struct <name>PyExpat_CAPI</name>*</type> <name>capi</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Patch object type */</comment>
    <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr>&amp;<name>Element_Type</name></expr></argument>)</argument_list></call> = <call><name>Py_TYPE</name><argument_list>(<argument><expr>&amp;<name>TreeBuilder_Type</name></expr></argument>)</argument_list></call> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_EXPAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr>&amp;<name>XMLParser_Type</name></expr></argument>)</argument_list></call> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_elementtree"</expr></argument>, <argument><expr><name>_functions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>m</name></expr>)</condition><then>
        <return>return;</return></then></if>

    <comment type="block">/* python glue code */</comment>

    <expr_stmt><expr><name>g</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>g</name></expr>)</condition><then>
        <return>return;</return></then></if>

    <expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr>"__builtins__"</expr></argument>, <argument><expr><call><name>PyEval_GetBuiltins</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>bootstrap</name> = (

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &gt;= 0x02020000 &amp;&amp; <name>PY_VERSION_HEX</name> &lt; 0x02030000)</expr></cpp:if>
        "from __future__ import generators\n" <comment type="block">/* enable yield under 2.2 */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        "from copy import copy, deepcopy\n"

        "try:\n"
        "  from xml.etree import ElementTree\n"
        "except ImportError:\n"
        "  import ElementTree\n"
        "ET = ElementTree\n"
        "del ElementTree\n"

        "import _elementtree as cElementTree\n"

        "try:\n" <comment type="block">/* check if copy works as is */</comment>
        "  copy(cElementTree.Element('x'))\n"
        "except:\n"
        "  def copyelement(elem):\n"
        "    return elem\n"

        "def Comment(text=None):\n" <comment type="block">/* public */</comment>
        "  element = cElementTree.Element(ET.Comment)\n"
        "  element.text = text\n"
        "  return element\n"
        "cElementTree.Comment = Comment\n"

        "class ElementTree(ET.ElementTree):\n" <comment type="block">/* public */</comment>
        "  def parse(self, source, parser=None):\n"
        "    if not hasattr(source, 'read'):\n"
        "      source = open(source, 'rb')\n"
        "    if parser is not None:\n"
        "      while 1:\n"
        "        data = source.read(65536)\n"
        "        if not data:\n"
        "          break\n"
        "        parser.feed(data)\n"
        "      self._root = parser.close()\n"
        "    else:\n" 
        "      parser = cElementTree.XMLParser()\n"
        "      self._root = parser._parse(source)\n"
        "    return self._root\n"
        "cElementTree.ElementTree = ElementTree\n"

        "def getiterator(node, tag=None):\n" <comment type="block">/* helper */</comment>
        "  if tag == '*':\n"
        "    tag = None\n"
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x02020000)</expr></cpp:if>
        "  nodes = []\n" <comment type="block">/* 2.1 doesn't have yield */</comment>
        "  if tag is None or node.tag == tag:\n"
        "    nodes.append(node)\n"
        "  for node in node:\n"
        "    nodes.extend(getiterator(node, tag))\n"
        "  return nodes\n"
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        "  if tag is None or node.tag == tag:\n"
        "    yield node\n"
        "  for node in node:\n"
        "    for node in getiterator(node, tag):\n"
        "      yield node\n"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        "def parse(source, parser=None):\n" <comment type="block">/* public */</comment>
        "  tree = ElementTree()\n"
        "  tree.parse(source, parser)\n"
        "  return tree\n"
        "cElementTree.parse = parse\n"

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x02020000)</expr></cpp:if>
        "if hasattr(ET, 'iterparse'):\n"
        "    cElementTree.iterparse = ET.iterparse\n" <comment type="block">/* delegate on 2.1 */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        "class iterparse(object):\n"
        " root = None\n"
        " def __init__(self, file, events=None):\n"
        "  if not hasattr(file, 'read'):\n"
        "    file = open(file, 'rb')\n"
        "  self._file = file\n"
        "  self._events = events\n"
        " def __iter__(self):\n" 
        "  events = []\n"
        "  b = cElementTree.TreeBuilder()\n"
        "  p = cElementTree.XMLParser(b)\n"
        "  p._setevents(events, self._events)\n"
        "  while 1:\n"
        "    data = self._file.read(16384)\n"
        "    if not data:\n"
        "      break\n"
        "    p.feed(data)\n"
        "    for event in events:\n"
        "      yield event\n"
        "    del events[:]\n"
        "  root = p.close()\n"
        "  for event in events:\n"
        "    yield event\n"
        "  self.root = root\n"
        "cElementTree.iterparse = iterparse\n"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        "def PI(target, text=None):\n" <comment type="block">/* public */</comment>
        "  element = cElementTree.Element(ET.ProcessingInstruction)\n"
        "  element.text = target\n"
        "  if text:\n"
        "    element.text = element.text + ' ' + text\n"
        "  return element\n"

        "  elem = cElementTree.Element(ET.PI)\n"
        "  elem.text = text\n"
        "  return elem\n"
        "cElementTree.PI = cElementTree.ProcessingInstruction = PI\n"

        "def XML(text):\n" <comment type="block">/* public */</comment>
        "  parser = cElementTree.XMLParser()\n"
        "  parser.feed(text)\n"
        "  return parser.close()\n"
        "cElementTree.XML = cElementTree.fromstring = XML\n"

        "def XMLID(text):\n" <comment type="block">/* public */</comment>
        "  tree = XML(text)\n"
        "  ids = {}\n"
        "  for elem in tree.getiterator():\n"
        "    id = elem.get('id')\n"
        "    if id:\n"
        "      ids[id] = elem\n"
        "  return tree, ids\n"
        "cElementTree.XMLID = XMLID\n"

        "cElementTree.dump = ET.dump\n"
        "cElementTree.ElementPath = ElementPath = ET.ElementPath\n"
        "cElementTree.iselement = ET.iselement\n"
        "cElementTree.QName = ET.QName\n"
        "cElementTree.tostring = ET.tostring\n"
        "cElementTree.VERSION = '" <name>VERSION</name> "'\n"
        "cElementTree.__version__ = '" <name>VERSION</name> "'\n"
        "cElementTree.XMLParserError = SyntaxError\n"

       )</expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PyRun_String</name><argument_list>(<argument><expr><name>bootstrap</name></expr></argument>, <argument><expr><name>Py_file_input</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>elementpath_obj</name> = <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr>"ElementPath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>elementtree_copyelement_obj</name> = <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr>"copyelement"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>elementtree_copyelement_obj</name></expr>)</condition><then> <block>{
        <comment type="block">/* reduce hack needed; enable reduce method */</comment>
        <decl_stmt><decl><type><name>PyMethodDef</name>*</type> <name>mp</name></decl>;</decl_stmt>
        <for>for (<init><expr><name>mp</name> = <name>element_methods</name></expr>;</init> <condition><expr><name><name>mp</name>-&gt;<name>ml_name</name></name></expr>;</condition> <incr><expr><name>mp</name>++</expr></incr>)
            <if>if <condition>(<expr><name><name>mp</name>-&gt;<name>ml_meth</name></name> == (<name>PyCFunction</name>) <name>element_reduce</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>mp</name>-&gt;<name>ml_name</name></name> = "__reduce__"</expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if></for>
    }</block></then> <else>else
        <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if>
    <expr_stmt><expr><name>elementtree_deepcopy_obj</name> = <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr>"deepcopy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>elementtree_getiterator_obj</name> = <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr>"getiterator"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PYEXPAT_CAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* link against pyexpat, if possible */</comment>
    <expr_stmt><expr><name>capi</name> = <call><name>PyCObject_Import</name><argument_list>(<argument><expr>"pyexpat"</expr></argument>, <argument><expr>"expat_CAPI"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>capi</name> &amp;&amp;
        <call><name>strcmp</name><argument_list>(<argument><expr><name><name>capi</name>-&gt;<name>magic</name></name></expr></argument>, <argument><expr><name>PyExpat_CAPI_MAGIC</name></expr></argument>)</argument_list></call> == 0 &amp;&amp;
        <name><name>capi</name>-&gt;<name>size</name></name> &lt;= <sizeof>sizeof<argument_list>(<argument><expr>*<name>expat_capi</name></expr></argument>)</argument_list></sizeof> &amp;&amp;
        <name><name>capi</name>-&gt;<name>MAJOR_VERSION</name></name> == <name>XML_MAJOR_VERSION</name> &amp;&amp;
        <name><name>capi</name>-&gt;<name>MINOR_VERSION</name></name> == <name>XML_MINOR_VERSION</name> &amp;&amp;
        <name><name>capi</name>-&gt;<name>MICRO_VERSION</name></name> == <name>XML_MICRO_VERSION</name></expr>)</condition><then>
        <expr_stmt><expr><name>expat_capi</name> = <name>capi</name></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><name>expat_capi</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block>
</unit>
