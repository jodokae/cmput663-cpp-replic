<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/bsddb.h"><comment type="block">/*----------------------------------------------------------------------
  Copyright (c) 1999-2001, Digital Creations, Fredericksburg, VA, USA
  and Andrew Kuchling. All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:

    o Redistributions of source code must retain the above copyright
      notice, this list of conditions, and the disclaimer that follows.

    o Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions, and the following disclaimer in
      the documentation and/or other materials provided with the
      distribution.

    o Neither the name of Digital Creations nor the names of its
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY DIGITAL CREATIONS AND CONTRIBUTORS *AS
  IS* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL DIGITAL
  CREATIONS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
  DAMAGE.
------------------------------------------------------------------------*/</comment>


<comment type="block">/*
 * Handwritten code to wrap version 3.x of the Berkeley DB library,
 * written to replace a SWIG-generated file.  It has since been updated
 * to compile with Berkeley DB versions 3.2 through 4.2.
 *
 * This module was started by Andrew Kuchling to remove the dependency
 * on SWIG in a package by Gregory P. Smith who based his work on a
 * similar package by Robin Dunn &lt;robin@alldunn.com&gt; which wrapped
 * Berkeley DB 2.7.x.
 *
 * Development of this module then returned full circle back to Robin Dunn
 * who worked on behalf of Digital Creations to complete the wrapping of
 * the DB 3.x API and to build a solid unit test suite.  Robin has
 * since gone onto other projects (wxPython).
 *
 * Gregory P. Smith &lt;greg@krypto.org&gt; is once again the maintainer.
 *
 * Use the pybsddb-users@lists.sf.net mailing list for all questions.
 * Things can change faster than the header of this file is updated.  This
 * file is shared with the PyBSDDB project at SourceForge:
 *
 * http://pybsddb.sf.net
 *
 * This file should remain backward compatible with Python 2.1, but see PEP
 * 291 for the most current backward compatibility requirements:
 *
 * http://www.python.org/peps/pep-0291.html
 *
 * This module contains 6 types:
 *
 * DB           (Database)
 * DBCursor     (Database Cursor)
 * DBEnv        (database environment)
 * DBTxn        (An explicit database transaction)
 * DBLock       (A lock handle)
 * DBSequence   (Sequence)
 *
 */</comment>

<comment type="block">/* --------------------------------------------------------------------- */</comment>

<comment type="block">/*
 * Portions of this module, associated unit tests and build scripts are the
 * result of a contract with The Written Word (http://thewrittenword.com/)
 * Many thanks go out to them for causing me to raise the bar on quality and
 * functionality, resulting in a better bsddb3 package for all of us to use.
 *
 * --Robin
 */</comment>

<comment type="block">/* --------------------------------------------------------------------- */</comment>

<comment type="block">/*
 * Work to split it up into a separate header and to add a C API was
 * contributed by Duncan Grisby &lt;duncan@tideway.com&gt;.   See here:
 *  http://sourceforge.net/tracker/index.php?func=detail&amp;aid=1551895&amp;group_id=13900&amp;atid=313900
 */</comment>

<comment type="block">/* --------------------------------------------------------------------- */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_BSDDB_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_BSDDB_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;db.h&gt;</cpp:file></cpp:include>


<comment type="block">/* 40 = 4.0, 33 = 3.3; this will break if the minor revision is &gt; 9 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBVER</name></cpp:macro> <cpp:value>(DB_VERSION_MAJOR * 10 + DB_VERSION_MINOR)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MINOR</name> &gt; 9</expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> "eek! DBVER can't handle minor versions &gt; 9"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_BSDDB_VERSION</name></cpp:macro> <cpp:value>"4.7.3"</cpp:value></cpp:define>

<comment type="block">/* Python object definitions */</comment>

<struct>struct <name>behaviourFlags</name> <block>{
    <comment type="block">/* What is the default behaviour when DB-&gt;get or DBCursor-&gt;get returns a
       DB_NOTFOUND || DB_KEYEMPTY error?  Return None or raise an exception? */</comment>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>getReturnsNone</name> : 1</expr>;</expr_stmt>
    <comment type="block">/* What is the default behaviour for DBCursor.set* methods when DBCursor-&gt;get
     * returns a DB_NOTFOUND || DB_KEYEMPTY  error?  Return None or raise? */</comment>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>cursorSetReturnsNone</name> : 1</expr>;</expr_stmt>
}</block>;</struct>



<struct_decl>struct <name>DBObject</name>;</struct_decl>          <comment type="block">/* Forward declaration */</comment>
<struct_decl>struct <name>DBCursorObject</name>;</struct_decl>    <comment type="block">/* Forward declaration */</comment>
<struct_decl>struct <name>DBTxnObject</name>;</struct_decl>       <comment type="block">/* Forward declaration */</comment>
<struct_decl>struct <name>DBSequenceObject</name>;</struct_decl>  <comment type="block">/* Forward declaration */</comment>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>
    <name>DB_ENV</name>*</type>     <name>db_env</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_int32_t</name></type>   <name>flags</name></decl>;</decl_stmt>             <comment type="block">/* saved flags from open() */</comment>
    <decl_stmt><decl><type><name>int</name></type>         <name>closed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>behaviourFlags</name></type> <name>moduleFlags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type>       <name>event_notifyCallback</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBObject</name> *</type><name>children_dbs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBTxnObject</name> *</type><name>children_txns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>        *</type><name>private_obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>        *</type><name>rep_transport</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>        *</type><name>in_weakreflist</name></decl>;</decl_stmt> <comment type="block">/* List of weak references */</comment>
}</block></struct></type> <name>DBEnvObject</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DBObject</name> <block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>
    <name>DB</name>*</type>             <name>db</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBEnvObject</name>*</type>    <name>myenvobj</name></decl>;</decl_stmt>  <comment type="block">/* PyObject containing the DB_ENV */</comment>
    <decl_stmt><decl><type><name>u_int32_t</name></type>       <name>flags</name></decl>;</decl_stmt>     <comment type="block">/* saved flags from open() */</comment>
    <decl_stmt><decl><type><name>u_int32_t</name></type>       <name>setflags</name></decl>;</decl_stmt>  <comment type="block">/* saved flags from set_flags() */</comment>
    <decl_stmt><decl><type><name>int</name></type>             <name>haveStat</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>behaviourFlags</name></type> <name>moduleFlags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBTxnObject</name> *</type><name>txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBCursorObject</name> *</type><name>children_cursors</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;=43)</expr></cpp:if>
    <decl_stmt><decl><type>struct <name>DBSequenceObject</name> *</type><name>children_sequences</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type>struct <name>DBObject</name> **</type><name>sibling_prev_p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBObject</name> *</type><name>sibling_next</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBObject</name> **</type><name>sibling_prev_p_txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBObject</name> *</type><name>sibling_next_txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type>       <name>associateCallback</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type>       <name>btCompareCallback</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>             <name>primaryDBType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>        *</type><name>private_obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>        *</type><name>in_weakreflist</name></decl>;</decl_stmt> <comment type="block">/* List of weak references */</comment>
}</block></struct></type> <name>DBObject</name>;</typedef>


<typedef>typedef <type><struct>struct <name>DBCursorObject</name> <block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>
    <name>DBC</name>*</type>            <name>dbc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBCursorObject</name> **</type><name>sibling_prev_p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBCursorObject</name> *</type><name>sibling_next</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBCursorObject</name> **</type><name>sibling_prev_p_txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBCursorObject</name> *</type><name>sibling_next_txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBObject</name>*</type>       <name>mydb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBTxnObject</name> *</type><name>txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>        *</type><name>in_weakreflist</name></decl>;</decl_stmt> <comment type="block">/* List of weak references */</comment>
}</block></struct></type> <name>DBCursorObject</name>;</typedef>


<typedef>typedef <type><struct>struct <name>DBTxnObject</name> <block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>
    <name>DB_TXN</name>*</type>         <name>txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBEnvObject</name>*</type>    <name>env</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>             <name>flag_prepare</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBTxnObject</name> *</type><name>parent_txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBTxnObject</name> **</type><name>sibling_prev_p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBTxnObject</name> *</type><name>sibling_next</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBTxnObject</name> *</type><name>children_txns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBObject</name> *</type><name>children_dbs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBSequenceObject</name> *</type><name>children_sequences</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBCursorObject</name> *</type><name>children_cursors</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>        *</type><name>in_weakreflist</name></decl>;</decl_stmt> <comment type="block">/* List of weak references */</comment>
}</block></struct></type> <name>DBTxnObject</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>
    <name>DB_LOCK</name></type>         <name>lock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>        *</type><name>in_weakreflist</name></decl>;</decl_stmt> <comment type="block">/* List of weak references */</comment>
}</block></struct></type> <name>DBLockObject</name>;</typedef>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
<typedef>typedef <type><struct>struct <name>DBSequenceObject</name> <block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>
    <name>DB_SEQUENCE</name>*</type>     <name>sequence</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBObject</name>*</type>        <name>mydb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBTxnObject</name> *</type><name>txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBSequenceObject</name> **</type><name>sibling_prev_p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBSequenceObject</name> *</type><name>sibling_next</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBSequenceObject</name> **</type><name>sibling_prev_p_txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>DBSequenceObject</name> *</type><name>sibling_next_txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>        *</type><name>in_weakreflist</name></decl>;</decl_stmt> <comment type="block">/* List of weak references */</comment>
}</block></struct></type> <name>DBSequenceObject</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* API structure for use by C code */</comment>

<comment type="block">/* To access the structure from an external module, use code like the
   following (error checking missed out for clarity):

     BSDDB_api* bsddb_api;
     PyObject*  mod;
     PyObject*  cobj;

     mod  = PyImport_ImportModule("bsddb._bsddb");
     // Use "bsddb3._pybsddb" if you're using the standalone pybsddb add-on.
     cobj = PyObject_GetAttrString(mod, "api");
     api  = (BSDDB_api*)PyCObject_AsVoidPtr(cobj);
     Py_DECREF(cobj);
     Py_DECREF(mod);

   The structure's members must not be changed.
*/</comment>

<typedef>typedef <type><struct>struct <block>{
    <comment type="block">/* Type objects */</comment>
    <decl_stmt><decl><type><name>PyTypeObject</name>*</type> <name>db_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyTypeObject</name>*</type> <name>dbcursor_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyTypeObject</name>*</type> <name>dbenv_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyTypeObject</name>*</type> <name>dbtxn_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyTypeObject</name>*</type> <name>dblock_type</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
    <decl_stmt><decl><type><name>PyTypeObject</name>*</type> <name>dbsequence_type</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Functions */</comment>
    <function_decl><type><name>int</name></type> (*<name>makeDBError</name>)<parameter_list>(<param><decl><type><name>int</name></type> <name>err</name></decl></param>)</parameter_list>;</function_decl>

}</block></struct></type> <name>BSDDB_api</name>;</typedef>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>COMPILING_BSDDB_C</name></cpp:ifndef>

<comment type="block">/* If not inside _bsddb.c, define type check macros that use the api
   structure.  The calling code must have a value named bsddb_api
   pointing to the api structure.
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBObject_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>((v)-&gt;ob_type == bsddb_api-&gt;db_type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCursorObject_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((v)-&gt;ob_type == bsddb_api-&gt;dbcursor_type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBEnvObject_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>((v)-&gt;ob_type == bsddb_api-&gt;dbenv_type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBTxnObject_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>((v)-&gt;ob_type == bsddb_api-&gt;dbtxn_type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBLockObject_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro>   <cpp:value>((v)-&gt;ob_type == bsddb_api-&gt;dblock_type)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBSequenceObject_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>((v)-&gt;ob_type == bsddb_api-&gt;dbsequence_type)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* COMPILING_BSDDB_C */</comment>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _BSDDB_H_ */</comment>
</unit>
