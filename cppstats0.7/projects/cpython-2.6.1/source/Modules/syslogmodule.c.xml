<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/syslogmodule.c"><comment type="block">/***********************************************************
Copyright 1994 by Lance Ellinghouse,
Cathedral City, California Republic, United States of America.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the name of Lance Ellinghouse
not be used in advertising or publicity pertaining to distribution 
of the software without specific, written prior permission.

LANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO
THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE BE LIABLE FOR ANY SPECIAL, 
INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING 
FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, 
NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION 
WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

******************************************************************/</comment>

<comment type="block">/******************************************************************

Revision history:

1998/04/28 (Sean Reifschneider)
  - When facility not specified to syslog() method, use default from openlog()
    (This is how it was claimed to work in the documentation)
  - Potential resource leak of o_ident, now cleaned up in closelog()
  - Minor comment accuracy fix.

95/06/29 (Steve Clift)
  - Changed arg parsing to use PyArg_ParseTuple.
  - Added PyErr_Clear() call(s) where needed.
  - Fix core dumps if user message contains format specifiers.
  - Change openlog arg defaults to match normal syslog behavior.
  - Plug memory leak in openlog().
  - Fix setlogmask() to return previous mask value.

******************************************************************/</comment>

<comment type="block">/* syslog module */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syslog.h&gt;</cpp:file></cpp:include>

<comment type="block">/*  only one instance, only one syslog, so globals should be ok  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>S_ident_o</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>			<comment type="block">/*  identifier, held by openlog()  */</comment>


<function><type><specifier>static</specifier> <name>PyObject</name> *</type> 
<name>syslog_openlog</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type> <name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>logopt</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>facility</name> <init>= <expr><name>LOG_USER</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>new_S_ident_o</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,
			      <argument><expr>"S|ll;ident string [, logoption [, facility]]"</expr></argument>,
			      <argument><expr>&amp;<name>new_S_ident_o</name></expr></argument>, <argument><expr>&amp;<name>logopt</name></expr></argument>, <argument><expr>&amp;<name>facility</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<comment type="block">/* This is needed because openlog() does NOT make a copy
	 * and syslog() later uses it.. cannot trash it.
	 */</comment>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>S_ident_o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>S_ident_o</name> = <name>new_S_ident_o</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>S_ident_o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>openlog</name><argument_list>(<argument><expr><call><name>PyString_AsString</name><argument_list>(<argument><expr><name>S_ident_o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>logopt</name></expr></argument>, <argument><expr><name>facility</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name> *</type> 
<name>syslog_syslog</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type> <name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>message</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>priority</name> <init>= <expr><name>LOG_INFO</name></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"is;[priority,] message string"</expr></argument>,
			      <argument><expr>&amp;<name>priority</name></expr></argument>, <argument><expr>&amp;<name>message</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s;[priority,] message string"</expr></argument>,
				      <argument><expr>&amp;<name>message</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<return>return <expr><name>NULL</name></expr>;</return></then></if>
	}</block></then></if>

	<expr_stmt><expr><name>Py_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>priority</name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>Py_END_ALLOW_THREADS</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type> 
<name>syslog_closelog</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>closelog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>S_ident_o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>S_ident_o</name> = <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type> 
<name>syslog_setlogmask</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>maskpri</name></decl>, <decl><type ref="prev"/><name>omaskpri</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l;mask for priority"</expr></argument>, <argument><expr>&amp;<name>maskpri</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>omaskpri</name> = <call><name>setlogmask</name><argument_list>(<argument><expr><name>maskpri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>omaskpri</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type> 
<name>syslog_log_mask</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>pri</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l:LOG_MASK"</expr></argument>, <argument><expr>&amp;<name>pri</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>mask</name> = <call><name>LOG_MASK</name><argument_list>(<argument><expr><name>pri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type> 
<name>syslog_log_upto</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>pri</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l:LOG_UPTO"</expr></argument>, <argument><expr>&amp;<name>pri</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>mask</name> = <call><name>LOG_UPTO</name><argument_list>(<argument><expr><name>pri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* List of functions defined in the module */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>syslog_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"openlog"</expr>,	<expr><name>syslog_openlog</name></expr>,		<expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"closelog"</expr>,	<expr><name>syslog_closelog</name></expr>,	<expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"syslog"</expr>,	<expr><name>syslog_syslog</name></expr>,		<expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"setlogmask"</expr>,	<expr><name>syslog_setlogmask</name></expr>,	<expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"LOG_MASK"</expr>,	<expr><name>syslog_log_mask</name></expr>,	<expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"LOG_UPTO"</expr>,	<expr><name>syslog_log_upto</name></expr>,	<expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr>,			<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Initialization function for the module */</comment>

<function><type><name>PyMODINIT_FUNC</name></type>
<name>initsyslog</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>

	<comment type="block">/* Create the module and add the functions */</comment>
	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"syslog"</expr></argument>, <argument><expr><name>syslog_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
		<return>return;</return></then></if>

	<comment type="block">/* Add some symbolic constants to the module */</comment>

	<comment type="block">/* Priorities */</comment>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_EMERG"</expr></argument>,	  <argument><expr><name>LOG_EMERG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_ALERT"</expr></argument>,	  <argument><expr><name>LOG_ALERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_CRIT"</expr></argument>,	  <argument><expr><name>LOG_CRIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_ERR"</expr></argument>,	  <argument><expr><name>LOG_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_WARNING"</expr></argument>, <argument><expr><name>LOG_WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_NOTICE"</expr></argument>,  <argument><expr><name>LOG_NOTICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_INFO"</expr></argument>,	  <argument><expr><name>LOG_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_DEBUG"</expr></argument>,	  <argument><expr><name>LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* openlog() option flags */</comment>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_PID"</expr></argument>,	  <argument><expr><name>LOG_PID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_CONS"</expr></argument>,	  <argument><expr><name>LOG_CONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_NDELAY"</expr></argument>,  <argument><expr><name>LOG_NDELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOG_NOWAIT</name></cpp:ifdef>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_NOWAIT"</expr></argument>,  <argument><expr><name>LOG_NOWAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOG_PERROR</name></cpp:ifdef>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_PERROR"</expr></argument>,  <argument><expr><name>LOG_PERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Facilities */</comment>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_KERN"</expr></argument>,	  <argument><expr><name>LOG_KERN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_USER"</expr></argument>,	  <argument><expr><name>LOG_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_MAIL"</expr></argument>,	  <argument><expr><name>LOG_MAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_DAEMON"</expr></argument>,  <argument><expr><name>LOG_DAEMON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_AUTH"</expr></argument>,	  <argument><expr><name>LOG_AUTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_LPR"</expr></argument>,	  <argument><expr><name>LOG_LPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_LOCAL0"</expr></argument>,  <argument><expr><name>LOG_LOCAL0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_LOCAL1"</expr></argument>,  <argument><expr><name>LOG_LOCAL1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_LOCAL2"</expr></argument>,  <argument><expr><name>LOG_LOCAL2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_LOCAL3"</expr></argument>,  <argument><expr><name>LOG_LOCAL3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_LOCAL4"</expr></argument>,  <argument><expr><name>LOG_LOCAL4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_LOCAL5"</expr></argument>,  <argument><expr><name>LOG_LOCAL5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_LOCAL6"</expr></argument>,  <argument><expr><name>LOG_LOCAL6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_LOCAL7"</expr></argument>,  <argument><expr><name>LOG_LOCAL7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LOG_SYSLOG</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_SYSLOG</name></cpp:macro>		<cpp:value>LOG_DAEMON</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LOG_NEWS</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_NEWS</name></cpp:macro>		<cpp:value>LOG_MAIL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LOG_UUCP</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_UUCP</name></cpp:macro>		<cpp:value>LOG_MAIL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LOG_CRON</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_CRON</name></cpp:macro>		<cpp:value>LOG_DAEMON</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_SYSLOG"</expr></argument>,  <argument><expr><name>LOG_SYSLOG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_CRON"</expr></argument>,	  <argument><expr><name>LOG_CRON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_UUCP"</expr></argument>,	  <argument><expr><name>LOG_UUCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LOG_NEWS"</expr></argument>,	  <argument><expr><name>LOG_NEWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
