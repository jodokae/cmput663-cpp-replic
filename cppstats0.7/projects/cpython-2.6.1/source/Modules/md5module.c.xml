<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/md5module.c">
<comment type="block">/* MD5 module */</comment>

<comment type="block">/* This module provides an interface to the RSA Data Security,
   Inc. MD5 Message-Digest Algorithm, described in RFC 1321.
   It requires the files md5c.c and md5.h (which are slightly changed
   from the versions in the RFC to avoid the "global.h" file.) */</comment>


<comment type="block">/* MD5 objects */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md5.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
        <name>md5_state_t</name></type>	<name>md5</name></decl>;</decl_stmt>		<comment type="block">/* the context holder */</comment>
}</block></struct></type> <name>md5object</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>MD5type</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_md5object</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro>		<cpp:value>((v)-&gt;ob_type == &amp;MD5type)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>md5object</name> *</type>
<name>newmd5object</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>md5object</name> *</type><name>md5p</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>md5p</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>md5object</name></expr></argument>, <argument><expr>&amp;<name>MD5type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>md5p</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><call><name>md5_init</name><argument_list>(<argument><expr>&amp;<name><name>md5p</name>-&gt;<name>md5</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* actual initialisation */</comment>
	<return>return <expr><name>md5p</name></expr>;</return>
}</block></function>


<comment type="block">/* MD5 methods */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>md5_dealloc</name><parameter_list>(<param><decl><type><name>md5object</name> *</type><name>md5p</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>md5p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="block">/* MD5 methods-as-attributes */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>md5_update</name><parameter_list>(<param><decl><type><name>md5object</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#:update"</expr></argument>, <argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><call><name>md5_append</name><argument_list>(<argument><expr>&amp;<name><name>self</name>-&gt;<name>md5</name></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>update_doc</name></expr></argument>,
<argument><expr>"update (arg)\n\
\n\
Update the md5 object with the string arg. Repeated calls are\n\
equivalent to a single call with the concatenation of all the\n\
arguments."</expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>md5_digest</name><parameter_list>(<param><decl><type><name>md5object</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
 	<decl_stmt><decl><type><name>md5_state_t</name></type> <name>mdContext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>aDigest</name><index>[<expr>16</expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* make a temporary copy, and perform the final */</comment>
	<expr_stmt><expr><name>mdContext</name> = <name><name>self</name>-&gt;<name>md5</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>md5_finish</name><argument_list>(<argument><expr>&amp;<name>mdContext</name></expr></argument>, <argument><expr><name>aDigest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)<name>aDigest</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>digest_doc</name></expr></argument>,
<argument><expr>"digest() -&gt; string\n\
\n\
Return the digest of the strings passed to the update() method so\n\
far. This is a 16-byte string which may contain non-ASCII characters,\n\
including null bytes."</expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>md5_hexdigest</name><parameter_list>(<param><decl><type><name>md5object</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
 	<decl_stmt><decl><type><name>md5_state_t</name></type> <name>mdContext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr>16</expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hexdigest</name><index>[<expr>32</expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

	<comment type="block">/* make a temporary copy, and perform the final */</comment>
	<expr_stmt><expr><name>mdContext</name> = <name><name>self</name>-&gt;<name>md5</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>md5_finish</name><argument_list>(<argument><expr>&amp;<name>mdContext</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Make hex version of the digest */</comment>
	<for>for(<init><expr><name>i</name>=<name>j</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;16</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
		<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>c</name> = (<name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name> &gt;&gt; 4) &amp; 0xf</expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name> = (<name>c</name>&gt;9) ? <name>c</name>+'a'-10 : <name>c</name> + '0'</expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hexdigest</name><index>[<expr><name>j</name>++</expr>]</index></name> = <name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name> = (<name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name> &amp; 0xf)</expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name> = (<name>c</name>&gt;9) ? <name>c</name>+'a'-10 : <name>c</name> + '0'</expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hexdigest</name><index>[<expr><name>j</name>++</expr>]</index></name> = <name>c</name></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name>*)<name>hexdigest</name></expr></argument>, <argument><expr>32</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>hexdigest_doc</name></expr></argument>,
<argument><expr>"hexdigest() -&gt; string\n\
\n\
Like digest(), but returns the digest as a string of hexadecimal digits."</expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>md5_copy</name><parameter_list>(<param><decl><type><name>md5object</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>md5object</name> *</type><name>md5p</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>(<name>md5p</name> = <call><name>newmd5object</name><argument_list>()</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name><name>md5p</name>-&gt;<name>md5</name></name> = <name><name>self</name>-&gt;<name>md5</name></name></expr>;</expr_stmt>

	<return>return <expr>(<name>PyObject</name> *)<name>md5p</name></expr>;</return>
}</block></function>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>copy_doc</name></expr></argument>,
<argument><expr>"copy() -&gt; md5 object\n\
\n\
Return a copy (``clone'') of the md5 object."</expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>md5_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"update"</expr>,    <expr>(<name>PyCFunction</name>)<name>md5_update</name></expr>,    <expr><name>METH_VARARGS</name></expr>, <expr><name>update_doc</name></expr>}</block></expr>,
	<expr><block>{<expr>"digest"</expr>,    <expr>(<name>PyCFunction</name>)<name>md5_digest</name></expr>,    <expr><name>METH_NOARGS</name></expr>,  <expr><name>digest_doc</name></expr>}</block></expr>,
	<expr><block>{<expr>"hexdigest"</expr>, <expr>(<name>PyCFunction</name>)<name>md5_hexdigest</name></expr>, <expr><name>METH_NOARGS</name></expr>,  <expr><name>hexdigest_doc</name></expr>}</block></expr>,
	<expr><block>{<expr>"copy"</expr>,      <expr>(<name>PyCFunction</name>)<name>md5_copy</name></expr>,      <expr><name>METH_NOARGS</name></expr>,  <expr><name>copy_doc</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>			     <comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>md5_get_block_size</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>64</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>md5_get_digest_size</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>16</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>md5_get_name</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>"MD5"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>md5_getseters</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"digest_size"</expr>,
     <expr>(<name>getter</name>)<name>md5_get_digest_size</name></expr>, <expr><name>NULL</name></expr>,
     <expr><name>NULL</name></expr>,
     <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr>"block_size"</expr>,
     <expr>(<name>getter</name>)<name>md5_get_block_size</name></expr>, <expr><name>NULL</name></expr>,
     <expr><name>NULL</name></expr>,
     <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr>"name"</expr>,
     <expr>(<name>getter</name>)<name>md5_get_name</name></expr>, <expr><name>NULL</name></expr>,
     <expr><name>NULL</name></expr>,
     <expr><name>NULL</name></expr>}</block></expr>,
    <comment type="block">/* the old md5 and sha modules support 'digest_size' as in PEP 247.
     * the old sha module also supported 'digestsize'.  ugh. */</comment>
    <expr><block>{<expr>"digestsize"</expr>,
     <expr>(<name>getter</name>)<name>md5_get_digest_size</name></expr>, <expr><name>NULL</name></expr>,
     <expr><name>NULL</name></expr>,
     <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>  <comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>module_doc</name></expr></argument>,
<argument><expr>"This module implements the interface to RSA's MD5 message digest\n\
algorithm (see also Internet RFC 1321). Its use is quite\n\
straightforward: use the new() to create an md5 object. You can now\n\
feed this object with arbitrary strings using the update() method, and\n\
at any point you can ask it for the digest (a strong kind of 128-bit\n\
checksum, a.k.a. ``fingerprint'') of the concatenation of the strings\n\
fed to it so far using the digest() method.\n\
\n\
Functions:\n\
\n\
new([arg]) -- return a new md5 object, initialized with arg if provided\n\
md5([arg]) -- DEPRECATED, same as new, but for compatibility\n\
\n\
Special Objects:\n\
\n\
MD5Type -- type object for md5 objects"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>md5type_doc</name></expr></argument>,
<argument><expr>"An md5 represents the object used to calculate the MD5 checksum of a\n\
string of information.\n\
\n\
Methods:\n\
\n\
update() -- updates the current digest with an additional string\n\
digest() -- return the current digest value\n\
hexdigest() -- return the current digest as a string of hexadecimal digits\n\
copy() -- return a copy of the current md5 object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>MD5type</name> <init>= <expr><block>{
	<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
	"_md5.md5"</expr>,		  <comment type="block">/*tp_name*/</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>md5object</name></expr></argument>)</argument_list></sizeof></expr>,	  <comment type="block">/*tp_size*/</comment>
	<expr>0</expr>,			  <comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>)<name>md5_dealloc</name></expr>,  <comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>,			  <comment type="block">/*tp_print*/</comment>
	<expr>0</expr>,                        <comment type="block">/*tp_getattr*/</comment>
	<expr>0</expr>,			  <comment type="block">/*tp_setattr*/</comment>
	<expr>0</expr>,			  <comment type="block">/*tp_compare*/</comment>
	<expr>0</expr>,			  <comment type="block">/*tp_repr*/</comment>
        <expr>0</expr>,			  <comment type="block">/*tp_as_number*/</comment>
	<expr>0</expr>,                        <comment type="block">/*tp_as_sequence*/</comment>
	<expr>0</expr>,			  <comment type="block">/*tp_as_mapping*/</comment>
	<expr>0</expr>, 			  <comment type="block">/*tp_hash*/</comment>
	<expr>0</expr>,			  <comment type="block">/*tp_call*/</comment>
	<expr>0</expr>,			  <comment type="block">/*tp_str*/</comment>
	<expr>0</expr>,			  <comment type="block">/*tp_getattro*/</comment>
	<expr>0</expr>,			  <comment type="block">/*tp_setattro*/</comment>
	<expr>0</expr>,	                  <comment type="block">/*tp_as_buffer*/</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name></expr>,	  <comment type="block">/*tp_flags*/</comment>
	<expr><name>md5type_doc</name></expr>,		  <comment type="block">/*tp_doc*/</comment>
        <expr>0</expr>,                        <comment type="block">/*tp_traverse*/</comment>
        <expr>0</expr>,			  <comment type="block">/*tp_clear*/</comment>
        <expr>0</expr>,			  <comment type="block">/*tp_richcompare*/</comment>
        <expr>0</expr>,			  <comment type="block">/*tp_weaklistoffset*/</comment>
        <expr>0</expr>,			  <comment type="block">/*tp_iter*/</comment>
        <expr>0</expr>,			  <comment type="block">/*tp_iternext*/</comment>
        <expr><name>md5_methods</name></expr>,	          <comment type="block">/*tp_methods*/</comment>
        <expr>0</expr>,      	          <comment type="block">/*tp_members*/</comment>
        <expr><name>md5_getseters</name></expr>,            <comment type="block">/*tp_getset*/</comment>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* MD5 functions */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>MD5_new</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>md5object</name> *</type><name>md5p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>cp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|s#:new"</expr></argument>, <argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr>(<name>md5p</name> = <call><name>newmd5object</name><argument_list>()</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><name>cp</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>md5_append</name><argument_list>(<argument><expr>&amp;<name><name>md5p</name>-&gt;<name>md5</name></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<return>return <expr>(<name>PyObject</name> *)<name>md5p</name></expr>;</return>
}</block></function>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>new_doc</name></expr></argument>,
<argument><expr>"new([arg]) -&gt; md5 object\n\
\n\
Return a new md5 object. If arg is present, the method call update(arg)\n\
is made."</expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block">/* List of functions exported by this module */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>md5_functions</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"new"</expr>,		<expr>(<name>PyCFunction</name>)<name>MD5_new</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>new_doc</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr>}</block></expr>	<comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* Initialize this module. */</comment>

<function><type><name>PyMODINIT_FUNC</name></type>
<name>init_md5</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr>&amp;<name>MD5type</name></expr></argument>)</argument_list></call> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>MD5type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>
	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule3</name><argument_list>(<argument><expr>"_md5"</expr></argument>, <argument><expr><name>md5_functions</name></expr></argument>, <argument><expr><name>module_doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
	    <return>return;</return></then></if>
	<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MD5Type"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>MD5type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"digest_size"</expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* No need to check the error here, the caller will do that */</comment>
}</block></function>
</unit>
