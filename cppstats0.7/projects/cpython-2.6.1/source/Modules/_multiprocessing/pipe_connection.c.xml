<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_multiprocessing/pipe_connection.c"><comment type="block">/*
 * A type which wraps a pipe handle in message oriented mode
 *
 * pipe_connection.c
 *
 * Copyright (c) 2006-2008, R Oudkerk --- see COPYING.txt
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiprocessing.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLOSE</name><parameter_list>(<param><type><name>h</name></type></param>)</parameter_list></cpp:macro> <cpp:value>CloseHandle(h)</cpp:value></cpp:define>

<comment type="block">/*
 * Send string to the pipe; assumes in message oriented mode
 */</comment>

<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>conn_send_string</name><parameter_list>(<param><decl><type><name>ConnectionObject</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>char</name> *</type><name>string</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>length</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>DWORD</name></type> <name>amount_written</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>ret</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
	<name>ret</name> <init>= <expr><call><name>WriteFile</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr>&amp;<name>amount_written</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<macro><name>Py_END_ALLOW_THREADS</name></macro>
	<return>return <expr><name>ret</name> ? <name>MP_SUCCESS</name> : <name>MP_STANDARD_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Attempts to read into buffer, or if buffer too small into *newbuffer.
 *
 * Returns number of bytes read.  Assumes in message oriented mode.
 */</comment>

<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>conn_recv_string</name><parameter_list>(<param><decl><type><name>ConnectionObject</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buffer</name></decl></param>, 
		 <param><decl><type><name>size_t</name></type> <name>buflength</name></decl></param>, <param><decl><type><name>char</name> **</type><name>newbuffer</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>maxlength</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>DWORD</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>length</name></decl>, <decl><type ref="prev"/><name>full_length</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>ret</name></decl>;</decl_stmt>
	<expr_stmt><expr>*<name>newbuffer</name> = <name>NULL</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
	<name>ret</name> <init>= <expr><call><name>ReadFile</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>buflength</name></expr></argument>, <argument><expr><name>maxlength</name></expr></argument>)</argument_list></call></expr></argument>, 
		      <argument><expr>&amp;<name>length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<macro><name>Py_END_ALLOW_THREADS</name></macro>
	<if>if <condition>(<expr><name>ret</name></expr>)</condition><then>
		<return>return <expr><name>length</name></expr>;</return></then></if>

	<expr_stmt><expr><name>err</name> = <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>err</name> != <name>ERROR_MORE_DATA</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name>err</name> == <name>ERROR_BROKEN_PIPE</name></expr>)</condition><then>
			<return>return <expr><name>MP_END_OF_FILE</name></expr>;</return></then></if>
		<return>return <expr><name>MP_STANDARD_ERROR</name></expr>;</return>
	}</block></then></if>

	<if>if <condition>(<expr>!<call><name>PeekNamedPipe</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>left</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>MP_STANDARD_ERROR</name></expr>;</return></then></if>

	<expr_stmt><expr><name>full_length</name> = <name>length</name> + <name>left</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>full_length</name> &gt; <name>maxlength</name></expr>)</condition><then>
		<return>return <expr><name>MP_BAD_MESSAGE_LENGTH</name></expr>;</return></then></if>

	<expr_stmt><expr>*<name>newbuffer</name> = <call><name>PyMem_Malloc</name><argument_list>(<argument><expr><name>full_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>*<name>newbuffer</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>MP_MEMORY_ERROR</name></expr>;</return></then></if>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>*<name>newbuffer</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
	<name>ret</name> <init>= <expr><call><name>ReadFile</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr>*<name>newbuffer</name>+<name>length</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<macro><name>Py_END_ALLOW_THREADS</name></macro>
	<if>if <condition>(<expr><name>ret</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>length</name> == <name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>full_length</name></expr>;</return>
	}</block></then> <else>else <block>{
		<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr>*<name>newbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>MP_STANDARD_ERROR</name></expr>;</return>
	}</block></else></if>
}</block></function>

<comment type="block">/*
 * Check whether any data is available for reading
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conn_poll</name><parameter_list>(<param><type><name>conn</name></type></param>, <param><type><name>timeout</name></type></param>)</parameter_list></cpp:macro> <cpp:value>conn_poll_save(conn, timeout, _save)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>conn_poll_save</name><parameter_list>(<param><decl><type><name>ConnectionObject</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>double</name></type> <name>timeout</name></decl></param>, <param><decl><type><name>PyThreadState</name> *</type><name>_save</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>DWORD</name></type> <name>bytes</name></decl>, <decl><type ref="prev"/><name>deadline</name></decl>, <decl><type ref="prev"/><name>delay</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>difference</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>block</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PeekNamedPipe</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>MP_STANDARD_ERROR</name></expr>;</return></then></if>

	<if>if <condition>(<expr><name>timeout</name> == 0.0</expr>)</condition><then>
		<return>return <expr><name>bytes</name> &gt; 0</expr>;</return></then></if>

	<if>if <condition>(<expr><name>timeout</name> &lt; 0.0</expr>)</condition><then>
		<expr_stmt><expr><name>block</name> = <name>TRUE</name></expr>;</expr_stmt></then>
	<else>else
		<comment type="block">/* XXX does not check for overflow */</comment>
		<expr_stmt><expr><name>deadline</name> = <call><name>GetTickCount</name><argument_list>()</argument_list></call> + <call>(<name>DWORD</name>)<argument_list>(<argument><expr>1000 * <name>timeout</name> + 0.5</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

	<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for (<init><expr><name>delay</name> = 1</expr> ;</init> <condition>;</condition> <incr><expr><name>delay</name> += 1</expr></incr>) <block>{
		<if>if <condition>(<expr>!<call><name>PeekNamedPipe</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<return>return <expr><name>MP_STANDARD_ERROR</name></expr>;</return></then>
		<else>else <if>if <condition>(<expr><name>bytes</name> &gt; 0</expr>)</condition><then>
			<return>return <expr><name>TRUE</name></expr>;</return></then></if></else></if>

		<if>if <condition>(<expr>!<name>block</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>difference</name> = <name>deadline</name> - <call><name>GetTickCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>difference</name> &lt; 0</expr>)</condition><then>
				<return>return <expr><name>FALSE</name></expr>;</return></then></if>
			<if>if <condition>(<expr>(<name>int</name>)<name>delay</name> &gt; <name>difference</name></expr>)</condition><then>
				<expr_stmt><expr><name>delay</name> = <name>difference</name></expr>;</expr_stmt></then></if>
		}</block></then></if>

		<if>if <condition>(<expr><name>delay</name> &gt; 20</expr>)</condition><then>
			<expr_stmt><expr><name>delay</name> = 20</expr>;</expr_stmt></then></if>

		<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* check for signals */</comment>
		<decl_stmt><decl><type><name>Py_BLOCK_THREADS</name></type> 
		<name>res</name> <init>= <expr><call><name>PyErr_CheckSignals</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<macro><name>Py_UNBLOCK_THREADS</name></macro>

		<if>if <condition>(<expr><name>res</name></expr>)</condition><then>
			<return>return <expr><name>MP_EXCEPTION_HAS_BEEN_SET</name></expr>;</return></then></if>
	}</block></for>
}</block></function>

<comment type="block">/*
 * "connection.h" defines the PipeConnection type using the definitions above
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONNECTION_NAME</name></cpp:macro> <cpp:value>"PipeConnection"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONNECTION_TYPE</name></cpp:macro> <cpp:value>PipeConnectionType</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection.h"</cpp:file></cpp:include>
</unit>
