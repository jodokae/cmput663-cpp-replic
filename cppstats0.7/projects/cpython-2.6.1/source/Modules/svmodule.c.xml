<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/svmodule.c"><comment type="block">/* SV module -- interface to the Indigo video board */</comment>

<comment type="block">/* WARNING! This module is for hardware that we don't have any more,
   so it hasn't been tested.  It has been converted to the new coding
   style, and it is possible that this conversion has broken something
   -- user beware! */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;svideo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yuv.h"</cpp:file></cpp:include>		<comment type="block">/* for YUV conversion functions */</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>SV_nodeP</name></type> <name>ob_svideo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>svCaptureInfo</name></type> <name>ob_info</name></decl>;</decl_stmt>
}</block></struct></type> <name>svobject</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>void</name> *</type><name>ob_capture</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ob_mustunlock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>svCaptureInfo</name></type> <name>ob_info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>svobject</name> *</type><name>ob_svideo</name></decl>;</decl_stmt>
}</block></struct></type> <name>captureobject</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>SvError</name></decl>;</decl_stmt>		<comment type="block">/* exception sv.error */</comment>

<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>newcaptureobject</name><parameter_list>(<param><decl><type><name>svobject</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set a SV-specific error from svideo_errno and return NULL */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_error</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>SvError</name></expr></argument>, <argument><expr><call><name>svStrerror</name><argument_list>(<argument><expr><name>svideo_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>svc_conversion</name><parameter_list>(<param><decl><type><name>captureobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>function</name>)<parameter_list>()</parameter_list></function_decl></param>,	<param><decl><type><name>float</name></type> <name>factor</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>output</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>invert</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>*</type> <name>outstr</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>&amp;<name>invert</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr>!(<name>output</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_info</name>.<name>width</name></name> * <name><name>self</name>-&gt;<name>ob_info</name>.<name>height</name></name> * <name>factor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then>
	<block>{
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr>!(<name>outstr</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><call>(*<name>function</name>)<argument_list>(<argument><expr>(<name>boolean</name>)<name>invert</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_capture</name></name></expr></argument>,
		    <argument><expr><name>outstr</name></expr></argument>,
		    <argument><expr><name><name>self</name>-&gt;<name>ob_info</name>.<name>width</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_info</name>.<name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>output</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * 3 functions to convert from Starter Video YUV 4:1:1 format to
 * Compression Library 4:2:2 Duplicate Chroma format.
 */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>svc_YUVtoYUV422DC</name><parameter_list>(<param><decl><type><name>captureobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_info</name>.<name>format</name></name> != <name>SV_YUV411_FRAMES</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>SvError</name></expr></argument>, <argument><expr>"data has bad format"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>svc_conversion</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>yuv_sv411_to_cl422dc</name></expr></argument>, <argument><expr>2.0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>svc_YUVtoYUV422DC_quarter</name><parameter_list>(<param><decl><type><name>captureobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_info</name>.<name>format</name></name> != <name>SV_YUV411_FRAMES</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>SvError</name></expr></argument>, <argument><expr>"data has bad format"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>svc_conversion</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>,
			      <argument><expr><name>yuv_sv411_to_cl422dc_quartersize</name></expr></argument>, <argument><expr>0.5</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>svc_YUVtoYUV422DC_sixteenth</name><parameter_list>(<param><decl><type><name>captureobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_info</name>.<name>format</name></name> != <name>SV_YUV411_FRAMES</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>SvError</name></expr></argument>, <argument><expr>"data has bad format"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>svc_conversion</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>,
			      <argument><expr><name>yuv_sv411_to_cl422dc_sixteenthsize</name></expr></argument>, <argument><expr>0.125</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>svc_YUVtoRGB</name><parameter_list>(<param><decl><type><name>captureobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<switch>switch <condition>(<expr><name><name>self</name>-&gt;<name>ob_info</name>.<name>format</name></name></expr>)</condition> <block>{
	<case>case <expr><name>SV_YUV411_FRAMES</name></expr>:
	</case><case>case <expr><name>SV_YUV411_FRAMES_AND_BLANKING_BUFFER</name></expr>:
		<break>break;</break>
	</case><default>default:
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>SvError</name></expr></argument>, <argument><expr>"data had bad format"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</default>}</block></switch>
	<return>return <expr><call><name>svc_conversion</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>svYUVtoRGB</name></expr></argument>, <argument><expr>(<name>float</name>) <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>svc_RGB8toRGB32</name><parameter_list>(<param><decl><type><name>captureobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_info</name>.<name>format</name></name> != <name>SV_RGB8_FRAMES</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>SvError</name></expr></argument>, <argument><expr>"data has bad format"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>svc_conversion</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>svRGB8toRGB32</name></expr></argument>, <argument><expr>(<name>float</name>) <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>svc_InterleaveFields</name><parameter_list>(<param><decl><type><name>captureobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_info</name>.<name>format</name></name> != <name>SV_RGB8_FRAMES</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>SvError</name></expr></argument>, <argument><expr>"data has bad format"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>svc_conversion</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>svInterleaveFields</name></expr></argument>, <argument><expr>1.0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>svc_GetFields</name><parameter_list>(<param><decl><type><name>captureobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>f1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>f2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fieldsize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>*</type> <name>obcapture</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_info</name>.<name>format</name></name> != <name>SV_RGB8_FRAMES</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>SvError</name></expr></argument>, <argument><expr>"data has bad format"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><name>fieldsize</name> = <name><name>self</name>-&gt;<name>ob_info</name>.<name>width</name></name> * <name><name>self</name>-&gt;<name>ob_info</name>.<name>height</name></name> / 2</expr>;</expr_stmt>
	<expr_stmt><expr><name>obcapture</name> = (<name>char</name>*)<name><name>self</name>-&gt;<name>ob_capture</name></name></expr>;</expr_stmt>
	
	<if>if <condition>(<expr>!(<name>f1</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>obcapture</name></expr></argument>, <argument><expr><name>fieldsize</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
		<goto>goto <name>finally</name>;</goto></then></if>
	<if>if <condition>(<expr>!(<name>f2</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>obcapture</name> + <name>fieldsize</name></expr></argument>,
					      <argument><expr><name>fieldsize</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
		<goto>goto <name>finally</name>;</goto></then></if>
	<expr_stmt><expr><name>ret</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <label><name>finally</name>:</label>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
	
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>svc_UnlockCaptureData</name><parameter_list>(<param><decl><type><name>captureobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>ob_mustunlock</name></name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>SvError</name></expr></argument>, <argument><expr>"buffer should not be unlocked"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<if>if <condition>(<expr><call><name>svUnlockCaptureData</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name>-&gt;<name>ob_svideo</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_capture</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</return></then></if>

	<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_mustunlock</name></name> = 0</expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_GL</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gl.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>svc_lrectwrite</name><parameter_list>(<param><decl><type><name>captureobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>Screencoord</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(hhhh)"</expr></argument>, <argument><expr>&amp;<name>x1</name></expr></argument>, <argument><expr>&amp;<name>x2</name></expr></argument>, <argument><expr>&amp;<name>y1</name></expr></argument>, <argument><expr>&amp;<name>y2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><call><name>lrectwrite</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>long</name> *) <name><name>self</name>-&gt;<name>ob_capture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>svc_writefile</name><parameter_list>(<param><decl><type><name>captureobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>file</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>*</type> <name>fp</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr>&amp;<name>file</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr>!<call><name>PyFile_Check</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>SvError</name></expr></argument>, <argument><expr>"not a file object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<if>if <condition>(<expr>!(<name>fp</name> = <call><name>PyFile_AsFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>size</name> = <name><name>self</name>-&gt;<name>ob_info</name>.<name>width</name></name> * <name><name>self</name>-&gt;<name>ob_info</name>.<name>height</name></name></expr>;</expr_stmt>

	<if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_capture</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> != <name>size</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>SvError</name></expr></argument>, <argument><expr>"writing failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>svc_FindVisibleRegion</name><parameter_list>(<param><decl><type><name>captureobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>void</name> *</type><name>visible</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><call><name>svFindVisibleRegion</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name>-&gt;<name>ob_svideo</name></name></expr></argument>,
				<argument><expr><name><name>self</name>-&gt;<name>ob_capture</name></name></expr></argument>, <argument><expr>&amp;<name>visible</name></expr></argument>,
				<argument><expr><name><name>self</name>-&gt;<name>ob_info</name>.<name>width</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</return></then></if>

	<if>if <condition>(<expr><name>visible</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>SvError</name></expr></argument>, <argument><expr>"data in wrong format"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<return>return <expr><call><name>newcaptureobject</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>, <argument><expr><name>visible</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>capture_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"YUVtoRGB"</expr>,		<expr>(<name>PyCFunction</name>)<name>svc_YUVtoRGB</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"RGB8toRGB32"</expr>,		<expr>(<name>PyCFunction</name>)<name>svc_RGB8toRGB32</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"InterleaveFields"</expr>,	<expr>(<name>PyCFunction</name>)<name>svc_InterleaveFields</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"UnlockCaptureData"</expr>,	<expr>(<name>PyCFunction</name>)<name>svc_UnlockCaptureData</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"FindVisibleRegion"</expr>,	<expr>(<name>PyCFunction</name>)<name>svc_FindVisibleRegion</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"GetFields"</expr>,		<expr>(<name>PyCFunction</name>)<name>svc_GetFields</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"YUVtoYUV422DC"</expr>,	<expr>(<name>PyCFunction</name>)<name>svc_YUVtoYUV422DC</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"YUVtoYUV422DC_quarter"</expr>,<expr>(<name>PyCFunction</name>)<name>svc_YUVtoYUV422DC_quarter</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"YUVtoYUV422DC_sixteenth"</expr>,<expr>(<name>PyCFunction</name>)<name>svc_YUVtoYUV422DC_sixteenth</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_GL</name></cpp:ifdef>
	<expr><block>{<expr>"lrectwrite"</expr>,		<expr>(<name>PyCFunction</name>)<name>svc_lrectwrite</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr>"writefile"</expr>,		<expr>(<name>PyCFunction</name>)<name>svc_writefile</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,			<expr><name>NULL</name></expr>}</block></expr> 		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>capture_dealloc</name><parameter_list>(<param><decl><type><name>captureobject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_capture</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_mustunlock</name></name></expr>)</condition><then>
			<expr_stmt><expr>(<name>void</name>)<call><name>svUnlockCaptureData</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name>-&gt;<name>ob_svideo</name></name></expr></argument>,
						  <argument><expr><name><name>self</name>-&gt;<name>ob_capture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_capture</name></name> = <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name> = <name>NULL</name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>capture_getattr</name><parameter_list>(<param><decl><type><name>svobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>capture_methods</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>Capturetype</name> <init>= <expr><block>{
	<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>)</argument_list></call>
	0</expr>,				<comment type="block">/*ob_size*/</comment>
	<expr>"sv.capture"</expr>,			<comment type="block">/*tp_name*/</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>captureobject</name></expr></argument>)</argument_list></sizeof></expr>,		<comment type="block">/*tp_size*/</comment>
	<expr>0</expr>,				<comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>)<name>capture_dealloc</name></expr>,	<comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>,				<comment type="block">/*tp_print*/</comment>
	<expr>(<name>getattrfunc</name>)<name>capture_getattr</name></expr>,	<comment type="block">/*tp_getattr*/</comment>
	<expr>0</expr>,				<comment type="block">/*tp_setattr*/</comment>
	<expr>0</expr>,				<comment type="block">/*tp_compare*/</comment>
	<expr>0</expr>,				<comment type="block">/*tp_repr*/</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>newcaptureobject</name><parameter_list>(<param><decl><type><name>svobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ptr</name></decl></param>, <param><decl><type><name>int</name></type> <name>mustunlock</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>captureobject</name> *</type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>p</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>captureobject</name></expr></argument>, <argument><expr>&amp;<name>Capturetype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>p</name>-&gt;<name>ob_svideo</name></name> = <name>self</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name>-&gt;<name>ob_capture</name></name> = <name>ptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name>-&gt;<name>ob_mustunlock</name></name> = <name>mustunlock</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name>-&gt;<name>ob_info</name></name> = <name><name>self</name>-&gt;<name>ob_info</name></name></expr>;</expr_stmt>
	<return>return <expr>(<name>PyObject</name> *) <name>p</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_GetCaptureData</name><parameter_list>(<param><decl><type><name>svobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>void</name> *</type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>fieldID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name></decl>, *<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><call><name>svGetCaptureData</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>, <argument><expr>&amp;<name>ptr</name></expr></argument>, <argument><expr>&amp;<name>fieldID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</return></then></if>

	<if>if <condition>(<expr><name>ptr</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>SvError</name></expr></argument>, <argument><expr>"no data available"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><name>c</name> = <call><name>newcaptureobject</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>c</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(Oi)"</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_BindGLWindow</name><parameter_list>(<param><decl><type><name>svobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>wid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(ii)"</expr></argument>, <argument><expr>&amp;<name>wid</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><call><name>svBindGLWindow</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>, <argument><expr><name>wid</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</return></then></if>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_EndContinuousCapture</name><parameter_list>(<param><decl><type><name>svobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><call><name>svEndContinuousCapture</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</return></then></if>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_IsVideoDisplayed</name><parameter_list>(<param><decl><type><name>svobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>v</name> = <call><name>svIsVideoDisplayed</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>v</name> == -1</expr>)</condition><then>
		<return>return <expr><call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</return></then></if>

	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_OutputOffset</name><parameter_list>(<param><decl><type><name>svobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x_offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>y_offset</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(ii)"</expr></argument>, <argument><expr>&amp;<name>x_offset</name></expr></argument>, <argument><expr>&amp;<name>y_offset</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><call><name>svOutputOffset</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>, <argument><expr><name>x_offset</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</return></then></if>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_PutFrame</name><parameter_list>(<param><decl><type><name>svobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>buffer</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s"</expr></argument>, <argument><expr>&amp;<name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><call><name>svPutFrame</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</return></then></if>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_QuerySize</name><parameter_list>(<param><decl><type><name>svobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rw</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rh</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(ii)"</expr></argument>, <argument><expr>&amp;<name>w</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><call><name>svQuerySize</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr>&amp;<name>rw</name></expr></argument>, <argument><expr>&amp;<name>rh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</return></then></if>

	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(ii)"</expr></argument>, <argument><expr>(<name>long</name>) <name>rw</name></expr></argument>, <argument><expr>(<name>long</name>) <name>rh</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_SetSize</name><parameter_list>(<param><decl><type><name>svobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(ii)"</expr></argument>, <argument><expr>&amp;<name>w</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><call><name>svSetSize</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</return></then></if>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_SetStdDefaults</name><parameter_list>(<param><decl><type><name>svobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><call><name>svSetStdDefaults</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</return></then></if>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_UseExclusive</name><parameter_list>(<param><decl><type><name>svobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>boolean</name></type> <name>onoff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(ii)"</expr></argument>, <argument><expr>&amp;<name>onoff</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><call><name>svUseExclusive</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>, <argument><expr><name>onoff</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</return></then></if>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_WindowOffset</name><parameter_list>(<param><decl><type><name>svobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x_offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>y_offset</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(ii)"</expr></argument>, <argument><expr>&amp;<name>x_offset</name></expr></argument>, <argument><expr>&amp;<name>y_offset</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><call><name>svWindowOffset</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>, <argument><expr><name>x_offset</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</return></then></if>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_CaptureBurst</name><parameter_list>(<param><decl><type><name>svobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>bytes</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>svCaptureInfo</name></type> <name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> *</type><name>bitvector</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>videodata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>bitvecobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>evenitem</name></decl>, *<decl><type ref="prev"/><name>odditem</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(iiiii)"</expr></argument>, <argument><expr>&amp;<name><name>info</name>.<name>format</name></name></expr></argument>,
			 <argument><expr>&amp;<name><name>info</name>.<name>width</name></name></expr></argument>, <argument><expr>&amp;<name><name>info</name>.<name>height</name></name></expr></argument>,
			 <argument><expr>&amp;<name><name>info</name>.<name>size</name></name></expr></argument>, <argument><expr>&amp;<name><name>info</name>.<name>samplingrate</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<switch>switch <condition>(<expr><name><name>info</name>.<name>format</name></name></expr>)</condition> <block>{
	<case>case <expr><name>SV_RGB8_FRAMES</name></expr>:
		<expr_stmt><expr><name>bitvector</name> = <call><name>malloc</name><argument_list>(<argument><expr><call><name>SV_BITVEC_SIZE</name><argument_list>(<argument><expr><name><name>info</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</case><case>case <expr><name>SV_YUV411_FRAMES_AND_BLANKING_BUFFER</name></expr>:
		<break>break;</break>
	</case><default>default:
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>SvError</name></expr></argument>, <argument><expr>"illegal format specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</default>}</block></switch>

	<if>if <condition>(<expr><call><name>svQueryCaptureBufferSize</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>, <argument><expr>&amp;<name>info</name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>res</name> = <call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>finally</name>;</goto>
	}</block></then></if>

	<if>if <condition>(<expr>!(<name>videodata</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
		<goto>goto <name>finally</name>;</goto></then></if>

	<comment type="block">/* XXX -- need to do something about the bitvector */</comment>
	<block>{
		<decl_stmt><decl><type><name>char</name>*</type> <name>str</name> <init>= <expr><call><name>PyString_AsString</name><argument_list>(<argument><expr><name>videodata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
			<goto>goto <name>finally</name>;</goto></then></if>
		
		<if>if <condition>(<expr><call><name>svCaptureBurst</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>, <argument><expr>&amp;<name>info</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>bitvector</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>res</name> = <call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>finally</name>;</goto>
		}</block></then></if>
	}</block>

	<if>if <condition>(<expr><name>bitvector</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name>evenitem</name> == <name>NULL</name></expr>)</condition><then> <block>{
			<if>if <condition>(<expr>!(<name>evenitem</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>)</expr>)</condition><then>
				<goto>goto <name>finally</name>;</goto></then></if>
		}</block></then></if>
		<if>if <condition>(<expr><name>odditem</name> == <name>NULL</name></expr>)</condition><then> <block>{
			<if>if <condition>(<expr>!(<name>odditem</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>)</expr>)</condition><then>
				<goto>goto <name>finally</name>;</goto></then></if>
		}</block></then></if>
		<if>if <condition>(<expr>!(<name>bitvecobj</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>2 * <name><name>info</name>.<name>size</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
			<goto>goto <name>finally</name>;</goto></then></if>

		<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 2 * <name><name>info</name>.<name>size</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>sts</name></decl>;</decl_stmt>

			<if>if <condition>(<expr><call><name>SV_GET_FIELD</name><argument_list>(<argument><expr><name>bitvector</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> == <name>SV_EVEN_FIELD</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>evenitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>sts</name> = <call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>bitvecobj</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>evenitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>odditem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>sts</name> = <call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>bitvecobj</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>odditem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<if>if <condition>(<expr><name>sts</name> &lt; 0</expr>)</condition><then>
				<goto>goto <name>finally</name>;</goto></then></if>
		}</block></for>
	}</block></then> <else>else <block>{
		<expr_stmt><expr><name>bitvecobj</name> = <name>Py_None</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>

	<expr_stmt><expr><name>res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"((iiiii)OO)"</expr></argument>, <argument><expr><name><name>info</name>.<name>format</name></name></expr></argument>,
			    <argument><expr><name><name>info</name>.<name>width</name></name></expr></argument>, <argument><expr><name><name>info</name>.<name>height</name></name></expr></argument>,
			    <argument><expr><name><name>info</name>.<name>size</name></name></expr></argument>, <argument><expr><name><name>info</name>.<name>samplingrate</name></name></expr></argument>,
			    <argument><expr><name>videodata</name></expr></argument>, <argument><expr><name>bitvecobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <label><name>finally</name>:</label>
	<if>if <condition>(<expr><name>bitvector</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bitvector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>videodata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>bitvecobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_CaptureOneFrame</name><parameter_list>(<param><decl><type><name>svobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>svCaptureInfo</name></type> <name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>bytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>videodata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(iii)"</expr></argument>, <argument><expr>&amp;<name>format</name></expr></argument>, <argument><expr>&amp;<name>width</name></expr></argument>, <argument><expr>&amp;<name>height</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name><name>info</name>.<name>format</name></name> = <name>format</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name>.<name>width</name></name> = <name>width</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name>.<name>height</name></name> = <name>height</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name>.<name>size</name></name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name>.<name>samplingrate</name></name> = 0</expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>svQueryCaptureBufferSize</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>, <argument><expr>&amp;<name>info</name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</return></then></if>

	<if>if <condition>(<expr>!(<name>videodata</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<expr_stmt><expr><name>str</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>videodata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
		<goto>goto <name>finally</name>;</goto></then></if>

	<if>if <condition>(<expr><call><name>svCaptureOneFrame</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr>&amp;<name>width</name></expr></argument>, <argument><expr>&amp;<name>height</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>res</name> = <call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>finally</name>;</goto>
	}</block></then></if>

	<expr_stmt><expr><name>res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(iiO)"</expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>videodata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <label><name>finally</name>:</label>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>videodata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_InitContinuousCapture</name><parameter_list>(<param><decl><type><name>svobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>svCaptureInfo</name></type> <name>info</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(iiiii)"</expr></argument>, <argument><expr>&amp;<name><name>info</name>.<name>format</name></name></expr></argument>,
			 <argument><expr>&amp;<name><name>info</name>.<name>width</name></name></expr></argument>, <argument><expr>&amp;<name><name>info</name>.<name>height</name></name></expr></argument>,
			 <argument><expr>&amp;<name><name>info</name>.<name>size</name></name></expr></argument>, <argument><expr>&amp;<name><name>info</name>.<name>samplingrate</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><call><name>svInitContinuousCapture</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>, <argument><expr>&amp;<name>info</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</return></then></if>

	<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_info</name></name> = <name>info</name></expr>;</expr_stmt>

	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(iiiii)"</expr></argument>, <argument><expr><name><name>info</name>.<name>format</name></name></expr></argument>, <argument><expr><name><name>info</name>.<name>width</name></name></expr></argument>, <argument><expr><name><name>info</name>.<name>height</name></name></expr></argument>,
			     <argument><expr><name><name>info</name>.<name>size</name></name></expr></argument>, <argument><expr><name><name>info</name>.<name>samplingrate</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_LoadMap</name><parameter_list>(<param><decl><type><name>svobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>rgb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rgb_tuple</name> *</type><name>mapp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>maptype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>			     <comment type="block">/* indices */</comment>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(iO)"</expr></argument>, <argument><expr>&amp;<name>maptype</name></expr></argument>, <argument><expr>&amp;<name>rgb</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>rgb</name></expr></argument>)</argument_list></call> || <call><name>PyList_Size</name><argument_list>(<argument><expr><name>rgb</name></expr></argument>)</argument_list></call> != 256</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<if>if <condition>(<expr>!(<name>mapp</name> = <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>rgb_tuple</name></expr></argument>, <argument><expr>256</expr></argument>)</argument_list></call>)</expr>)</condition><then>
		<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>

	<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 256</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
		<decl_stmt><decl><type><name>PyObject</name>*</type> <name>v</name> <init>= <expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>rgb</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr>!<name>v</name></expr>)</condition><then>
			<goto>goto <name>finally</name>;</goto></then></if>

		<if>if <condition>(<expr>!<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> || <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> != 3</expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>finally</name>;</goto>
		}</block></then></if>
		<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; 3</expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
			<decl_stmt><decl><type><name>PyObject</name>*</type> <name>cell</name> <init>= <expr><call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr>!<name>cell</name></expr>)</condition><then>
				<goto>goto <name>finally</name>;</goto></then></if>

			<if>if <condition>(<expr>!<call><name>PyInt_Check</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>finally</name>;</goto>
			}</block></then></if>
			<switch>switch <condition>(<expr><name>j</name></expr>)</condition> <block>{
			<case>case <expr>0</expr>: <expr_stmt><expr><name><name>mapp</name><index>[<expr><name>i</name></expr>]</index></name>.<name>red</name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
			</case><case>case <expr>1</expr>: <expr_stmt><expr><name><name>mapp</name><index>[<expr><name>i</name></expr>]</index></name>.<name>blue</name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
			</case><case>case <expr>2</expr>: <expr_stmt><expr><name><name>mapp</name><index>[<expr><name>i</name></expr>]</index></name>.<name>green</name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
			</case>}</block></switch>
			<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
				<goto>goto <name>finally</name>;</goto></then></if>
		}</block></for>
	}</block></for>

	<if>if <condition>(<expr><call><name>svLoadMap</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>, <argument><expr><name>maptype</name></expr></argument>, <argument><expr><name>mapp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>res</name> = <call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>finally</name>;</goto>
	}</block></then></if>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> = <name>Py_None</name></expr>;</expr_stmt>

  <label><name>finally</name>:</label>
	<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>mapp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>
		
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_CloseVideo</name><parameter_list>(<param><decl><type><name>svobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><call><name>svCloseVideo</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</return></then></if>

	<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>doParams</name><parameter_list>(<param><decl><type><name>svobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>,
         <param><function_decl><type><name>int</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>SV_nodeP</name></type></decl></param>, <param><decl><type><name>long</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>int</name></type> <name>modified</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> *</type><name>PVbuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr>&amp;<name>list</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<if>if <condition>(<expr>(<name>length</name> = <call><name>PyList_Size</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>PVbuffer</name> = <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>long</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>PVbuffer</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>

	<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
		<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr>!<name>v</name></expr>)</condition><then>
			<goto>goto <name>finally</name>;</goto></then></if>

		<if>if <condition>(<expr>!<call><name>PyInt_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>finally</name>;</goto>
		}</block></then></if>
		<expr_stmt><expr><name><name>PVbuffer</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* can't just test the return value, because what if the
		   value was -1?!
		*/</comment>
		<if>if <condition>(<expr><name><name>PVbuffer</name><index>[<expr><name>i</name></expr>]</index></name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
			<goto>goto <name>finally</name>;</goto></then></if>
	}</block></for>

	<if>if <condition>(<expr><call>(*<name>func</name>)<argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>, <argument><expr><name>PVbuffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>res</name> = <call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>finally</name>;</goto>
	}</block></then></if>

	<if>if <condition>(<expr><name>modified</name></expr>)</condition><then> <block>{
		<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
			<decl_stmt><decl><type><name>PyObject</name>*</type> <name>v</name> <init>= <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>PVbuffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr>!<name>v</name> || <call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
				<goto>goto <name>finally</name>;</goto></then></if>
		}</block></for>
	}</block></then></if>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> = <name>Py_None</name></expr>;</expr_stmt>

  <label><name>finally</name>:</label>
	<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>PVbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_GetParam</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>doParams</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>svGetParam</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_GetParamRange</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>doParams</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>svGetParamRange</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_SetParam</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>doParams</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>svSetParam</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>svideo_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"BindGLWindow"</expr>,	<expr>(<name>PyCFunction</name>)<name>sv_BindGLWindow</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"EndContinuousCapture"</expr>,<expr>(<name>PyCFunction</name>)<name>sv_EndContinuousCapture</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"IsVideoDisplayed"</expr>,	<expr>(<name>PyCFunction</name>)<name>sv_IsVideoDisplayed</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"OutputOffset"</expr>,	<expr>(<name>PyCFunction</name>)<name>sv_OutputOffset</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"PutFrame"</expr>,		<expr>(<name>PyCFunction</name>)<name>sv_PutFrame</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"QuerySize"</expr>,		<expr>(<name>PyCFunction</name>)<name>sv_QuerySize</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"SetSize"</expr>,		<expr>(<name>PyCFunction</name>)<name>sv_SetSize</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"SetStdDefaults"</expr>,	<expr>(<name>PyCFunction</name>)<name>sv_SetStdDefaults</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"UseExclusive"</expr>,	<expr>(<name>PyCFunction</name>)<name>sv_UseExclusive</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"WindowOffset"</expr>,	<expr>(<name>PyCFunction</name>)<name>sv_WindowOffset</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"InitContinuousCapture"</expr>,<expr>(<name>PyCFunction</name>)<name>sv_InitContinuousCapture</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"CaptureBurst"</expr>,	<expr>(<name>PyCFunction</name>)<name>sv_CaptureBurst</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"CaptureOneFrame"</expr>,	<expr>(<name>PyCFunction</name>)<name>sv_CaptureOneFrame</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"GetCaptureData"</expr>,	<expr>(<name>PyCFunction</name>)<name>sv_GetCaptureData</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"CloseVideo"</expr>,		<expr>(<name>PyCFunction</name>)<name>sv_CloseVideo</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"LoadMap"</expr>,		<expr>(<name>PyCFunction</name>)<name>sv_LoadMap</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"GetParam"</expr>,		<expr>(<name>PyCFunction</name>)<name>sv_GetParam</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"GetParamRange"</expr>,	<expr>(<name>PyCFunction</name>)<name>sv_GetParamRange</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"SetParam"</expr>,		<expr>(<name>PyCFunction</name>)<name>sv_SetParam</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,			<expr><name>NULL</name></expr>}</block></expr> 		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_conversion</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>function</name>)<parameter_list>()</parameter_list></function_decl></param>,
              <param><decl><type><name>int</name></type> <name>inputfactor</name></decl></param>, <param><decl><type><name>float</name></type> <name>factor</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>invert</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>inputlength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>input</name></decl>, *<decl><type ref="prev"/><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>output</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(is#ii)"</expr></argument>, <argument><expr>&amp;<name>invert</name></expr></argument>,
			 <argument><expr>&amp;<name>input</name></expr></argument>, <argument><expr>&amp;<name>inputlength</name></expr></argument>, <argument><expr>&amp;<name>width</name></expr></argument>, <argument><expr>&amp;<name>height</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><name>width</name> * <name>height</name> * <name>inputfactor</name> &gt; <name>inputlength</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>SvError</name></expr></argument>, <argument><expr>"input buffer not long enough"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<if>if <condition>(<expr>!(<name>output</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
					      <argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><name>width</name> * <name>height</name> * <name>factor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>str</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>str</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><call>(*<name>function</name>)<argument_list>(<argument><expr><name>invert</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>output</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_InterleaveFields</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>sv_conversion</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>svInterleaveFields</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1.0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_RGB8toRGB32</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>sv_conversion</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>svRGB8toRGB32</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>(<name>float</name>) <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_YUVtoRGB</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>sv_conversion</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>svYUVtoRGB</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>(<name>float</name>) <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>svideo_dealloc</name><parameter_list>(<param><decl><type><name>svobject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_svideo</name></name> != <name>NULL</name></expr>)</condition><then>
		<expr_stmt><expr>(<name>void</name>) <call><name>svCloseVideo</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_svideo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>svideo_getattr</name><parameter_list>(<param><decl><type><name>svobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>svideo_methods</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>Svtype</name> <init>= <expr><block>{
	<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>)</argument_list></call>
	0</expr>,			<comment type="block">/*ob_size*/</comment>
	<expr>"sv.sv"</expr>,		<comment type="block">/*tp_name*/</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>svobject</name></expr></argument>)</argument_list></sizeof></expr>,	<comment type="block">/*tp_size*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>)<name>svideo_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_print*/</comment>
	<expr>(<name>getattrfunc</name>)<name>svideo_getattr</name></expr>, <comment type="block">/*tp_getattr*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_setattr*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_compare*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_repr*/</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>newsvobject</name><parameter_list>(<param><decl><type><name>SV_nodeP</name></type> <name>svp</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>svobject</name> *</type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>p</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>svobject</name></expr></argument>, <argument><expr>&amp;<name>Svtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>p</name>-&gt;<name>ob_svideo</name></name> = <name>svp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name>-&gt;<name>ob_info</name>.<name>format</name></name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name>-&gt;<name>ob_info</name>.<name>size</name></name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name>-&gt;<name>ob_info</name>.<name>width</name></name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name>-&gt;<name>ob_info</name>.<name>height</name></name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name>-&gt;<name>ob_info</name>.<name>samplingrate</name></name> = 0</expr>;</expr_stmt>
	<return>return <expr>(<name>PyObject</name> *) <name>p</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sv_OpenVideo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>SV_nodeP</name></type> <name>svp</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>svp</name> = <call><name>svOpenVideo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>svp</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><call><name>sv_error</name><argument_list>()</argument_list></call></expr>;</return></then></if>

	<return>return <expr><call><name>newsvobject</name><argument_list>(<argument><expr><name>svp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>sv_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"InterleaveFields"</expr>,	<expr>(<name>PyCFunction</name>)<name>sv_InterleaveFields</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"RGB8toRGB32"</expr>,		<expr>(<name>PyCFunction</name>)<name>sv_RGB8toRGB32</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"YUVtoRGB"</expr>,		<expr>(<name>PyCFunction</name>)<name>sv_YUVtoRGB</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"OpenVideo"</expr>,		<expr>(<name>PyCFunction</name>)<name>sv_OpenVideo</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,			<expr><name>NULL</name></expr>}</block></expr>	<comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>initsv</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"the sv module has been removed in "
	                   "Python 3.0"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
	    <return>return;</return></then></if>

	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"sv"</expr></argument>, <argument><expr><name>sv_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>SvError</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"sv.error"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>SvError</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"error"</expr></argument>, <argument><expr><name>SvError</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
		<return>return;</return></then></if>
}</block></function>
</unit>
