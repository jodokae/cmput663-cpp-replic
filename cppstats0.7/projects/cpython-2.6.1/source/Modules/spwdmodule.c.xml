<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/spwdmodule.c">
<comment type="block">/* UNIX shadow password file access module */</comment>
<comment type="block">/* A lot of code has been taken from pwdmodule.c */</comment>
<comment type="block">/* For info also see http://www.unixpapa.com/incnote/passwd.html */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structseq.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SHADOW_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shadow.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>spwd__doc__</name></expr></argument>,
<argument><expr>"This module provides access to the Unix shadow password database.\n\
It is available on various Unix versions.\n\
\n\
Shadow password database entries are reported as 9-tuples of type struct_spwd,\n\
containing the following items from the password database (see `&lt;shadow.h&gt;'):\n\
sp_namp, sp_pwdp, sp_lstchg, sp_min, sp_max, sp_warn, sp_inact, sp_expire, sp_flag.\n\
The sp_namp and sp_pwdp are strings, the rest are integers.\n\
An exception is raised if the entry asked for cannot be found.\n\
You have to be root to be able to use this module."</expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETSPNAM</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETSPENT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyStructSequence_Field</name></type> <name><name>struct_spwd_type_fields</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"sp_nam"</expr>, <expr>"login name"</expr>}</block></expr>,
	<expr><block>{<expr>"sp_pwd"</expr>, <expr>"encrypted password"</expr>}</block></expr>,
	<expr><block>{<expr>"sp_lstchg"</expr>, <expr>"date of last change"</expr>}</block></expr>,
	<expr><block>{<expr>"sp_min"</expr>, <expr>"min #days between changes"</expr>}</block></expr>, 
	<expr><block>{<expr>"sp_max"</expr>, <expr>"max #days between changes"</expr>}</block></expr>, 
	<expr><block>{<expr>"sp_warn"</expr>, <expr>"#days before pw expires to warn user about it"</expr>}</block></expr>, 
	<expr><block>{<expr>"sp_inact"</expr>, <expr>"#days after pw expires until account is blocked"</expr>}</block></expr>,
	<expr><block>{<expr>"sp_expire"</expr>, <expr>"#days since 1970-01-01 until account is disabled"</expr>}</block></expr>,
	<expr><block>{<expr>"sp_flag"</expr>, <expr>"reserved"</expr>}</block></expr>,
	<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>struct_spwd__doc__</name></expr></argument>,
<argument><expr>"spwd.struct_spwd: Results from getsp*() routines.\n\n\
This object may be accessed either as a 9-tuple of\n\
  (sp_nam,sp_pwd,sp_lstchg,sp_min,sp_max,sp_warn,sp_inact,sp_expire,sp_flag)\n\
or via the object attributes as named in the above tuple."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyStructSequence_Desc</name></type> <name>struct_spwd_type_desc</name> <init>= <expr><block>{
	<expr>"spwd.struct_spwd"</expr>,
	<expr><name>struct_spwd__doc__</name></expr>,
	<expr><name>struct_spwd_type_fields</name></expr>,
	<expr>9</expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>StructSpwdType</name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>sets</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>char</name>*</type> <name>val</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>val</name></expr>)</condition><then>
	  <expr_stmt><expr><call><name>PyStructSequence_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else <block>{
	  <expr_stmt><expr><call><name>PyStructSequence_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>mkspent</name><parameter_list>(<param><decl><type>struct <name>spwd</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>setIndex</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyStructSequence_New</name><argument_list>(<argument><expr>&amp;<name>StructSpwdType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETI</name><parameter_list>(<param><type><name>i</name></type></param>,<param><type><name>val</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyStructSequence_SET_ITEM(v, i, PyInt_FromLong((long) val))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETS</name><parameter_list>(<param><type><name>i</name></type></param>,<param><type><name>val</name></type></param>)</parameter_list></cpp:macro> <cpp:value>sets(v, i, val)</cpp:value></cpp:define>

	<expr_stmt><expr><call><name>SETS</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>sp_namp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SETS</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>sp_pwdp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SETI</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>sp_lstchg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SETI</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>sp_min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SETI</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>sp_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SETI</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>sp_warn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SETI</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>sp_inact</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SETI</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>sp_expire</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SETI</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>sp_flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SETS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SETI</name></cpp:undef>

	<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<return>return <expr><name>v</name></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* HAVE_GETSPNAM || HAVE_GETSPENT */</comment>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_GETSPNAM</name></cpp:ifdef>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>spwd_getspnam__doc__</name></expr></argument>,
<argument><expr>"getspnam(name) -&gt; (sp_namp, sp_pwdp, sp_lstchg, sp_min, sp_max,\n\
                    sp_warn, sp_inact, sp_expire, sp_flag)\n\
Return the shadow password database entry for the given user name.\n\
See spwd.__doc__ for more on shadow password database entries."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>spwd_getspnam</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type>struct <name>spwd</name> *</type><name>p</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s:getspnam"</expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr>(<name>p</name> = <call><name>getspnam</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>, <argument><expr>"getspnam(): name not found"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>mkspent</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_GETSPNAM */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_GETSPENT</name></cpp:ifdef>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>spwd_getspall__doc__</name></expr></argument>,
<argument><expr>"getspall() -&gt; list_of_entries\n\
Return a list of all available shadow password database entries, \
in arbitrary order.\n\
See spwd.__doc__ for more on shadow password database entries."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>spwd_getspall</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type>struct <name>spwd</name> *</type><name>p</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>(<name>d</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>setspent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr>(<name>p</name> = <call><name>getspent</name><argument_list>()</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>mkspent</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>v</name> == <name>NULL</name> || <call><name>PyList_Append</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>endspent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><call><name>endspent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>d</name></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_GETSPENT */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>spwd_methods</name><index>[]</index></name> <init>= <expr><block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_GETSPNAM</name></cpp:ifdef>	
	<expr><block>{<expr>"getspnam"</expr>,	<expr><name>spwd_getspnam</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>spwd_getspnam__doc__</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_GETSPENT</name></cpp:ifdef>
	<expr><block>{<expr>"getspall"</expr>,	<expr><name>spwd_getspall</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>spwd_getspall__doc__</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>


<function><type><name>PyMODINIT_FUNC</name></type>
<name>initspwd</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>m</name>=<call><name>Py_InitModule3</name><argument_list>(<argument><expr>"spwd"</expr></argument>, <argument><expr><name>spwd_methods</name></expr></argument>, <argument><expr><name>spwd__doc__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
		<return>return;</return></then></if>
	<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>PyStructSequence_InitType</name><argument_list>(<argument><expr>&amp;<name>StructSpwdType</name></expr></argument>, 
					  <argument><expr>&amp;<name>struct_spwd_type_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>(<name>PyObject</name> *) &amp;<name>StructSpwdType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"struct_spwd"</expr></argument>, <argument><expr>(<name>PyObject</name> *) &amp;<name>StructSpwdType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>initialized</name> = 1</expr>;</expr_stmt>
}</block></function>
</unit>
