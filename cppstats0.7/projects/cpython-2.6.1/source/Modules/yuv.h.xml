<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/yuv.h">
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_YUV_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_YUV_H</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * SVideo YUV 4:1:1 format.
 *
 * 4 consecutive quadwords describe 8 pixels on 2 lines, as depicted
 * below.  An array of (width/4) of the below structure describes 2
 * scan lines.
 *
 * +-------------------+
 * | 00 | 01 | 02 | 03 | . . .
 * +-------------------+
 * | 10 | 11 | 12 | 13 | . . .
 * +-------------------+
 */</comment>
<struct>struct <name>yuv411</name> <block>{
	<struct>struct <block>{
		<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>dummy</name>:8</expr>;</expr_stmt>
		<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>y0</name>:8</expr>;</expr_stmt>
		<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>u0</name>:2</expr>;</expr_stmt>
		<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>v0</name>:2</expr>;</expr_stmt>
		<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>y1</name>:8</expr>;</expr_stmt>
		<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>u1</name>:2</expr>;</expr_stmt>
		<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>v1</name>:2</expr>;</expr_stmt>
	}</block> <decl><name><name>v</name><index>[<expr>4</expr>]</index></name></decl>;</struct>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_Y00</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>(y).v[0].y0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_Y01</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>(y).v[1].y0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_Y02</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>(y).v[2].y0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_Y03</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>(y).v[3].y0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_Y10</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>(y).v[0].y1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_Y11</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>(y).v[1].y1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_Y12</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>(y).v[2].y1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_Y13</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>(y).v[3].y1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_U00</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>((y).v[0].u0&lt;&lt;6|(y).v[1].u0&lt;&lt;4|(y).v[2].u0&lt;&lt;2|(y).v[3].u0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_U01</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>YUV411_U00(y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_U02</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>YUV411_U00(y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_U03</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>YUV411_U00(y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_U10</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>((y).v[0].u1&lt;&lt;6|(y).v[1].u1&lt;&lt;4|(y).v[2].u1&lt;&lt;2|(y).v[3].u1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_U11</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>YUV411_U10(y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_U12</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>YUV411_U10(y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_U13</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>YUV411_U10(y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_V00</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>((y).v[0].v0&lt;&lt;6|(y).v[1].v0&lt;&lt;4|(y).v[2].v0&lt;&lt;2|(y).v[3].v0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_V01</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>YUV411_V00(y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_V02</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>YUV411_V00(y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_V03</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>YUV411_V00(y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_V10</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>((y).v[0].v1&lt;&lt;6|(y).v[1].v1&lt;&lt;4|(y).v[2].v1&lt;&lt;2|(y).v[3].v1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_V11</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>YUV411_V10(y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_V12</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>YUV411_V10(y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV411_V13</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>YUV411_V10(y)</cpp:value></cpp:define>

<comment type="block">/*
 * Compression Library YUV 4:2:2 format.
 *
 * 1 longword describes 2 pixels.
 *
 * +-------+
 * | 0 | 1 |
 * +-------+
 */</comment>
<struct>struct <name>yuv422</name> <block>{
	<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>u</name>:8</expr>;</expr_stmt>
	<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>y0</name>:8</expr>;</expr_stmt>
	<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>v</name>:8</expr>;</expr_stmt>
	<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>y1</name>:8</expr>;</expr_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV422_Y0</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>(y).y0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV422_Y1</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>(y).y1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV422_U0</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>(y).u</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV422_U1</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>(y).u</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV422_V0</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>(y).v</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV422_V1</name><parameter_list>(<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>(y).v</cpp:value></cpp:define>

<comment type="block">/*
 * Compression library YUV 4:2:2 Duplicate Chroma format.
 *
 * This is like the previous format, but the U and V values are
 * duplicated vertically (and hence there is some redundancy in the
 * data).  With other words, lines 2*n and 2*n+1 have the same U and V
 * values but different Y values.
 */</comment>

<comment type="block">/*
 * Conversion functions.
 */</comment>
<function_decl><type><name>void</name></type> <name>yuv_sv411_to_cl422dc</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>yuv_sv411_to_cl422dc_quartersize</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>yuv_sv411_to_cl422dc_sixteenthsize</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Py_YUV_H */</comment>
</unit>
