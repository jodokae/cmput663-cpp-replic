<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/sgimodule.c">
<comment type="block">/* SGI module -- random SGI-specific things */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sgi_nap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>ticks</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l:nap"</expr></argument>, <argument><expr>&amp;<name>ticks</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<function_decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
	<name>sginap</name><parameter_list>(<param><decl><type><name>ticks</name></type></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name>Py_END_ALLOW_THREADS</name></type>
	<name>Py_INCREF</name><parameter_list>(<param><decl><type><name>Py_None</name></type></decl></param>)</parameter_list>;</function_decl>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function_decl><type><specifier>extern</specifier> <name>char</name> *</type><name>_getpty</name><parameter_list>(<param><decl><type><name>int</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>mode_t</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sgi__getpty</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>oflag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nofork</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fildes</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iii:_getpty"</expr></argument>, <argument><expr>&amp;<name>oflag</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>, <argument><expr>&amp;<name>nofork</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name>name</name> = <call><name>_getpty</name><argument_list>(<argument><expr>&amp;<name>fildes</name></expr></argument>, <argument><expr><name>oflag</name></expr></argument>, <argument><expr>(<name>mode_t</name>)<name>mode</name></expr></argument>, <argument><expr><name>nofork</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>name</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>PyExc_IOError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(si)"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>fildes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>sgi_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"nap"</expr>,		<expr><name>sgi_nap</name></expr>,	<expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"_getpty"</expr>,	<expr><name>sgi__getpty</name></expr>,	<expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>


<function><type><name>void</name></type>
<name>initsgi</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>Py_InitModule</name><argument_list>(<argument><expr>"sgi"</expr></argument>, <argument><expr><name>sgi_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
