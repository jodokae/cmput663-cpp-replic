<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/xxmodule.c">
<comment type="block">/* Use this file as a template to start implementing a module that
   also declares object types. All occurrences of 'Xxo' should be changed
   to something reasonable for your objects. After that, all other
   occurrences of 'xx' should be changed to something reasonable for your
   module. If your module is named foo your sourcefile should be named
   foomodule.c.

   You will probably want to delete all references to 'x_attr' and add
   your own types of attributes instead.  Maybe you want to name your
   local variables other than 'self'.  If your object type is needed in
   other files, you'll have to create a file "foobarobject.h"; see
   intobject.h for an example. */</comment>

<comment type="block">/* Xxo objects */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ErrorObject</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>PyObject</name>	*</type><name>x_attr</name></decl>;</decl_stmt>	<comment type="block">/* Attributes dictionary */</comment>
}</block></struct></type> <name>XxoObject</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Xxo_Type</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XxoObject_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>(Py_TYPE(v) == &amp;Xxo_Type)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>XxoObject</name> *</type>
<name>newXxoObject</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>XxoObject</name> *</type><name>self</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>self</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>XxoObject</name></expr></argument>, <argument><expr>&amp;<name>Xxo_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>self</name>-&gt;<name>x_attr</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><name>self</name></expr>;</return>
}</block></function>

<comment type="block">/* Xxo methods */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>Xxo_dealloc</name><parameter_list>(<param><decl><type><name>XxoObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>Xxo_demo</name><parameter_list>(<param><decl><type><name>XxoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":demo"</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>Xxo_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"demo"</expr>,	<expr>(<name>PyCFunction</name>)<name>Xxo_demo</name></expr>,	<expr><name>METH_VARARGS</name></expr>,
		<macro><name>PyDoc_STR</name><argument_list>(<argument>"demo() -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>Xxo_getattr</name><parameter_list>(<param><decl><type><name>XxoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>self</name>-&gt;<name>x_attr</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_attr</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>v</name> != <name>NULL</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>v</name></expr>;</return>
		}</block></then></if>
	}</block></then></if>
	<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>Xxo_methods</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>Xxo_setattr</name><parameter_list>(<param><decl><type><name>XxoObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>self</name>-&gt;<name>x_attr</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>self</name>-&gt;<name>x_attr</name></name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>self</name>-&gt;<name>x_attr</name></name> == <name>NULL</name></expr>)</condition><then>
			<return>return <expr>-1</expr>;</return></then></if>
	}</block></then></if>
	<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>PyDict_DelItemString</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_attr</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>rv</name> &lt; 0</expr>)</condition><then>
			<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>,
			        <argument><expr>"delete non-existing Xxo attribute"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<return>return <expr><name>rv</name></expr>;</return>
	}</block></then>
	<else>else
		<return>return <expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_attr</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Xxo_Type</name> <init>= <expr><block>{
	<comment type="block">/* The ob_type field must be initialized in the module init function
	 * to be portable to Windows without using C++. */</comment>
	<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
	"xxmodule.Xxo"</expr>,		<comment type="block">/*tp_name*/</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>XxoObject</name></expr></argument>)</argument_list></sizeof></expr>,	<comment type="block">/*tp_basicsize*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>)<name>Xxo_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_print*/</comment>
	<expr>(<name>getattrfunc</name>)<name>Xxo_getattr</name></expr>, <comment type="block">/*tp_getattr*/</comment>
	<expr>(<name>setattrfunc</name>)<name>Xxo_setattr</name></expr>, <comment type="block">/*tp_setattr*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_compare*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_repr*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_as_number*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_as_sequence*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_as_mapping*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_hash*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_call*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_str*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_getattro*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_setattro*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_as_buffer*/</comment>
        <expr><name>Py_TPFLAGS_DEFAULT</name></expr>,     <comment type="block">/*tp_flags*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_doc*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_traverse*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_clear*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_richcompare*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_weaklistoffset*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_iter*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_iternext*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_methods*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_members*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_getset*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_base*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_dict*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_descr_get*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_descr_set*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_dictoffset*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_init*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_alloc*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_new*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_free*/</comment>
        <expr>0</expr>,                      <comment type="block">/*tp_is_gc*/</comment>
}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<comment type="block">/* Function of two integers returning integer */</comment>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>xx_foo_doc</name></expr></argument>,
<argument><expr>"foo(i,j)\n\
\n\
Return the sum of i and j."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>xx_foo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>res</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"ll:foo"</expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>, <argument><expr>&amp;<name>j</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>res</name> = <name>i</name>+<name>j</name></expr>;</expr_stmt> <comment type="block">/* XXX Do something here */</comment>
	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* Function of no arguments returning new Xxo object */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>xx_new</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>XxoObject</name> *</type><name>rv</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":new"</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>rv</name> = <call><name>newXxoObject</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>rv</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<return>return <expr>(<name>PyObject</name> *)<name>rv</name></expr>;</return>
}</block></function>

<comment type="block">/* Example with subtle bug from extensions manual ("Thin Ice"). */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>xx_bug</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>list</name></decl>, *<decl><type ref="prev"/><name>item</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O:bug"</expr></argument>, <argument><expr>&amp;<name>list</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>item</name> = <call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Py_INCREF(item); */</comment>
	<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>0L</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyObject_Print</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Py_DECREF(item); */</comment>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<comment type="block">/* Test bad format character */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>xx_roj</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>a</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>b</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O#:roj"</expr></argument>, <argument><expr>&amp;<name>a</name></expr></argument>, <argument><expr>&amp;<name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>


<comment type="block">/* ---------- */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Str_Type</name> <init>= <expr><block>{
	<comment type="block">/* The ob_type field must be initialized in the module init function
	 * to be portable to Windows without using C++. */</comment>
	<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
	"xxmodule.Str"</expr>,		<comment type="block">/*tp_name*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_basicsize*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>0</expr>,			<comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_print*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_getattr*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_setattr*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_compare*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_repr*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_as_number*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_as_sequence*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_as_mapping*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_hash*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_call*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_str*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_getattro*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_setattro*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_as_buffer*/</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/*tp_flags*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_doc*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_traverse*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_clear*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_richcompare*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_weaklistoffset*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_iter*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_iternext*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_methods*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_members*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_getset*/</comment>
	<expr>0</expr>, <comment type="block">/* see initxx */</comment>	<comment type="block">/*tp_base*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_dict*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_descr_get*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_descr_set*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_dictoffset*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_init*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_alloc*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_new*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_free*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_is_gc*/</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* ---------- */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>null_richcompare</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>other</name></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_NotImplemented</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_NotImplemented</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Null_Type</name> <init>= <expr><block>{
	<comment type="block">/* The ob_type field must be initialized in the module init function
	 * to be portable to Windows without using C++. */</comment>
	<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
	"xxmodule.Null"</expr>,	<comment type="block">/*tp_name*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_basicsize*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>0</expr>,			<comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_print*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_getattr*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_setattr*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_compare*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_repr*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_as_number*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_as_sequence*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_as_mapping*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_hash*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_call*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_str*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_getattro*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_setattro*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_as_buffer*/</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/*tp_flags*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_doc*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_traverse*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_clear*/</comment>
	<expr><name>null_richcompare</name></expr>,	<comment type="block">/*tp_richcompare*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_weaklistoffset*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_iter*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_iternext*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_methods*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_members*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_getset*/</comment>
	<expr>0</expr>, <comment type="block">/* see initxx */</comment>	<comment type="block">/*tp_base*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_dict*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_descr_get*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_descr_set*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_dictoffset*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_init*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_alloc*/</comment>
	<expr>0</expr>, <comment type="block">/* see initxx */</comment>	<comment type="block">/*tp_new*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_free*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_is_gc*/</comment>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* ---------- */</comment>


<comment type="block">/* List of functions defined in the module */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>xx_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"roj"</expr>,		<expr><name>xx_roj</name></expr>,		<expr><name>METH_VARARGS</name></expr>,
		<macro><name>PyDoc_STR</name><argument_list>(<argument>"roj(a,b) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"foo"</expr>,		<expr><name>xx_foo</name></expr>,		<expr><name>METH_VARARGS</name></expr>,
	 	<expr><name>xx_foo_doc</name></expr>}</block></expr>,
	<expr><block>{<expr>"new"</expr>,		<expr><name>xx_new</name></expr>,		<expr><name>METH_VARARGS</name></expr>,
		<macro><name>PyDoc_STR</name><argument_list>(<argument>"new() -&gt; new Xx object"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"bug"</expr>,		<expr><name>xx_bug</name></expr>,		<expr><name>METH_VARARGS</name></expr>,
		<macro><name>PyDoc_STR</name><argument_list>(<argument>"bug(o) -&gt; None"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>module_doc</name></expr></argument>,
<argument><expr>"This is a template module just for instruction."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Initialization function for the module (*must* be called initxx) */</comment>

<function><type><name>PyMODINIT_FUNC</name></type>
<name>initxx</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>

	<comment type="block">/* Due to cross platform compiler issues the slots must be filled
	 * here. It's required for portability to Windows without requiring
	 * C++. */</comment>
	<expr_stmt><expr><name><name>Null_Type</name>.<name>tp_base</name></name> = &amp;<name>PyBaseObject_Type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>Null_Type</name>.<name>tp_new</name></name> = <name>PyType_GenericNew</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>Str_Type</name>.<name>tp_base</name></name> = &amp;<name>PyUnicode_Type</name></expr>;</expr_stmt>

	<comment type="block">/* Finalize the type object including setting type of the new type
	 * object; doing it here is required for portability, too. */</comment>
	<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>Xxo_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>

	<comment type="block">/* Create the module and add the functions */</comment>
	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule3</name><argument_list>(<argument><expr>"xx"</expr></argument>, <argument><expr><name>xx_methods</name></expr></argument>, <argument><expr><name>module_doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
		<return>return;</return></then></if>

	<comment type="block">/* Add some symbolic constants to the module */</comment>
	<if>if <condition>(<expr><name>ErrorObject</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>ErrorObject</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"xx.error"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>ErrorObject</name> == <name>NULL</name></expr>)</condition><then>
			<return>return;</return></then></if>
	}</block></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>ErrorObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"error"</expr></argument>, <argument><expr><name>ErrorObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Add Str */</comment>
	<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>Str_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"Str"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>Str_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Add Null */</comment>
	<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>Null_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"Null"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>Null_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
