<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/xxsubtype.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>xxsubtype__doc__</name></expr></argument>,
<argument><expr>"xxsubtype is an example module showing how to subtype builtin types from C.\n"
"test_descr.py in the standard test suite requires it in order to complete.\n"
"If you don't care about the examples, and don't intend to run the Python\n"
"test suite, you can recompile Python without Modules/xxsubtype.c."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* We link this module statically for convenience.  If compiled as a shared
   library instead, some compilers don't allow addresses of Python objects
   defined in other libraries to be used in static initializers here.  The
   DEFERRED_ADDRESS macro is used to tag the slots where such addresses
   appear; the module init function must fill in the tagged slots at runtime.
   The argument is for documentation -- the macro ignores it.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFERRED_ADDRESS</name><parameter_list>(<param><type><name>ADDR</name></type></param>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<comment type="block">/* spamlist -- a list subtype */</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>PyListObject</name></type> <name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>
}</block></struct></type> <name>spamlistobject</name>;</typedef>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>spamlist_getstate</name><parameter_list>(<param><decl><type><name>spamlistobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":getstate"</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>state</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>spamlist_setstate</name><parameter_list>(<param><decl><type><name>spamlistobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:setstate"</expr></argument>, <argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>self</name>-&gt;<name>state</name></name> = <name>state</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>spamlist_specialmeth</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><call><name>PyTuple_New</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>result</name> != <name>NULL</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
			<expr_stmt><expr><name>self</name> = <name>Py_None</name></expr>;</expr_stmt></then></if>
		<if>if <condition>(<expr><name>kw</name> == <name>NULL</name></expr>)</condition><then>
			<expr_stmt><expr><name>kw</name> = <name>Py_None</name></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return>return <expr><name>result</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>spamlist_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"getstate"</expr>, <expr>(<name>PyCFunction</name>)<name>spamlist_getstate</name></expr>, <expr><name>METH_VARARGS</name></expr>,
	 	<macro><name>PyDoc_STR</name><argument_list>(<argument>"getstate() -&gt; state"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"setstate"</expr>, <expr>(<name>PyCFunction</name>)<name>spamlist_setstate</name></expr>, <expr><name>METH_VARARGS</name></expr>,
	 	<macro><name>PyDoc_STR</name><argument_list>(<argument>"setstate(state)"</argument>)</argument_list></macro>}</block></expr>,
	<comment type="block">/* These entries differ only in the flags; they are used by the tests
	   in test.test_descr. */</comment>
	<expr><block>{<expr>"classmeth"</expr>, <expr>(<name>PyCFunction</name>)<name>spamlist_specialmeth</name></expr>,
		<expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name> | <name>METH_CLASS</name></expr>,
	 	<macro><name>PyDoc_STR</name><argument_list>(<argument>"classmeth(*args, **kw)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"staticmeth"</expr>, <expr>(<name>PyCFunction</name>)<name>spamlist_specialmeth</name></expr>,
		<expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name> | <name>METH_STATIC</name></expr>,
	 	<macro><name>PyDoc_STR</name><argument_list>(<argument>"staticmeth(*args, **kw)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,	<expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>spamlist_init</name><parameter_list>(<param><decl><type><name>spamlistobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><call><name><name>PyList_Type</name>.<name>tp_init</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return <expr>-1</expr>;</return></then></if>
	<expr_stmt><expr><name><name>self</name>-&gt;<name>state</name></name> = 0</expr>;</expr_stmt>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>spamlist_state_get</name><parameter_list>(<param><decl><type><name>spamlistobject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>state</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>spamlist_getsets</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"state"</expr>, <expr>(<name>getter</name>)<name>spamlist_state_get</name></expr>, <expr><name>NULL</name></expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"an int variable for demonstration purposes"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>spamlist_type</name> <init>= <expr><block>{
	<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><call><name>DEFERRED_ADDRESS</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
	"xxsubtype.spamlist"</expr>,
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>spamlistobject</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr>0</expr>,
	<expr>0</expr>,					<comment type="block">/* tp_dealloc */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_print */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_getattr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_setattr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_compare */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_repr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_number */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_sequence */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_mapping */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_hash */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_call */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_str */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_getattro */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_setattro */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_buffer */</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/* tp_flags */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_doc */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_traverse */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_clear */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_richcompare */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_weaklistoffset */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_iter */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_iternext */</comment>
	<expr><name>spamlist_methods</name></expr>,			<comment type="block">/* tp_methods */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_members */</comment>
	<expr><name>spamlist_getsets</name></expr>,			<comment type="block">/* tp_getset */</comment>
	<expr><call><name>DEFERRED_ADDRESS</name><argument_list>(<argument><expr>&amp;<name>PyList_Type</name></expr></argument>)</argument_list></call></expr>,		<comment type="block">/* tp_base */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_dict */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_descr_get */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_descr_set */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_dictoffset */</comment>
	<expr>(<name>initproc</name>)<name>spamlist_init</name></expr>,		<comment type="block">/* tp_init */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_alloc */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_new */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* spamdict -- a dict subtype */</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>PyDictObject</name></type> <name>dict</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>
}</block></struct></type> <name>spamdictobject</name>;</typedef>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>spamdict_getstate</name><parameter_list>(<param><decl><type><name>spamdictobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":getstate"</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>state</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>spamdict_setstate</name><parameter_list>(<param><decl><type><name>spamdictobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:setstate"</expr></argument>, <argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>self</name>-&gt;<name>state</name></name> = <name>state</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>spamdict_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"getstate"</expr>, <expr>(<name>PyCFunction</name>)<name>spamdict_getstate</name></expr>, <expr><name>METH_VARARGS</name></expr>,
	 	<macro><name>PyDoc_STR</name><argument_list>(<argument>"getstate() -&gt; state"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"setstate"</expr>, <expr>(<name>PyCFunction</name>)<name>spamdict_setstate</name></expr>, <expr><name>METH_VARARGS</name></expr>,
	 	<macro><name>PyDoc_STR</name><argument_list>(<argument>"setstate(state)"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,	<expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>spamdict_init</name><parameter_list>(<param><decl><type><name>spamdictobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><call><name><name>PyDict_Type</name>.<name>tp_init</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return <expr>-1</expr>;</return></then></if>
	<expr_stmt><expr><name><name>self</name>-&gt;<name>state</name></name> = 0</expr>;</expr_stmt>
	<return>return <expr>0</expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>spamdict_members</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"state"</expr>, <expr><name>T_INT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>spamdictobject</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
	 <macro><name>PyDoc_STR</name><argument_list>(<argument>"an int variable for demonstration purposes"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>spamdict_type</name> <init>= <expr><block>{
	<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><call><name>DEFERRED_ADDRESS</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
	"xxsubtype.spamdict"</expr>,
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>spamdictobject</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr>0</expr>,
	<expr>0</expr>,					<comment type="block">/* tp_dealloc */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_print */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_getattr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_setattr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_compare */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_repr */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_number */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_sequence */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_mapping */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_hash */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_call */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_str */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_getattro */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_setattro */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_as_buffer */</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/* tp_flags */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_doc */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_traverse */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_clear */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_richcompare */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_weaklistoffset */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_iter */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_iternext */</comment>
	<expr><name>spamdict_methods</name></expr>,			<comment type="block">/* tp_methods */</comment>
	<expr><name>spamdict_members</name></expr>,			<comment type="block">/* tp_members */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_getset */</comment>
	<expr><call><name>DEFERRED_ADDRESS</name><argument_list>(<argument><expr>&amp;<name>PyDict_Type</name></expr></argument>)</argument_list></call></expr>,		<comment type="block">/* tp_base */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_dict */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_descr_get */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_descr_set */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_dictoffset */</comment>
	<expr>(<name>initproc</name>)<name>spamdict_init</name></expr>,		<comment type="block">/* tp_init */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_alloc */</comment>
	<expr>0</expr>,					<comment type="block">/* tp_new */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>spam_bench</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>obj</name></decl>, *<decl><type ref="prev"/><name>name</name></decl>, *<decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr>1000</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"OS|i"</expr></argument>, <argument><expr>&amp;<name>obj</name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>t0</name> = <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr>--<name>n</name> &gt;= 0</expr>)</condition> <block>{
		<expr_stmt><expr><name>res</name> = <call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>res</name> == <name>NULL</name></expr>)</condition><then>
			<return>return <expr><name>NULL</name></expr>;</return></then></if>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name>t1</name> = <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr><call>(<name>double</name>)<argument_list>(<argument><expr><name>t1</name>-<name>t0</name></expr></argument>)</argument_list></call> / <name>CLOCKS_PER_SEC</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>xxsubtype_functions</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"bench"</expr>,	<expr><name>spam_bench</name></expr>, 	<expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>PyMODINIT_FUNC</name></type>
<name>initxxsubtype</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>

	<comment type="block">/* Fill in deferred data addresses.  This must be done before
	   PyType_Ready() is called.  Note that PyType_Ready() automatically
	   initializes the ob.ob_type field to &amp;PyType_Type if it's NULL,
	   so it's not necessary to fill in ob_type first. */</comment>
	<expr_stmt><expr><name><name>spamdict_type</name>.<name>tp_base</name></name> = &amp;<name>PyDict_Type</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>spamdict_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>

	<expr_stmt><expr><name><name>spamlist_type</name>.<name>tp_base</name></name> = &amp;<name>PyList_Type</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>spamlist_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>

	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule3</name><argument_list>(<argument><expr>"xxsubtype"</expr></argument>,
			   <argument><expr><name>xxsubtype_functions</name></expr></argument>,
			   <argument><expr><name>xxsubtype__doc__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
		<return>return;</return></then></if>

	<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>spamlist_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>spamdict_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>spamlist_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"spamlist"</expr></argument>,
			       <argument><expr>(<name>PyObject</name> *) &amp;<name>spamlist_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>spamdict_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"spamdict"</expr></argument>,
			       <argument><expr>(<name>PyObject</name> *) &amp;<name>spamdict_type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
}</block></function>
</unit>
