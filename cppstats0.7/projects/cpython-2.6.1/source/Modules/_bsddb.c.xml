<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_bsddb.c"><comment type="block">/*----------------------------------------------------------------------
  Copyright (c) 1999-2001, Digital Creations, Fredericksburg, VA, USA
  and Andrew Kuchling. All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:

    o Redistributions of source code must retain the above copyright
      notice, this list of conditions, and the disclaimer that follows.

    o Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions, and the following disclaimer in
      the documentation and/or other materials provided with the
      distribution.

    o Neither the name of Digital Creations nor the names of its
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY DIGITAL CREATIONS AND CONTRIBUTORS *AS
  IS* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL DIGITAL
  CREATIONS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
  DAMAGE.
------------------------------------------------------------------------*/</comment>


<comment type="block">/*
 * Handwritten code to wrap version 3.x of the Berkeley DB library,
 * written to replace a SWIG-generated file.  It has since been updated
 * to compile with Berkeley DB versions 3.2 through 4.2.
 *
 * This module was started by Andrew Kuchling to remove the dependency
 * on SWIG in a package by Gregory P. Smith who based his work on a
 * similar package by Robin Dunn &lt;robin@alldunn.com&gt; which wrapped
 * Berkeley DB 2.7.x.
 *
 * Development of this module then returned full circle back to Robin Dunn
 * who worked on behalf of Digital Creations to complete the wrapping of
 * the DB 3.x API and to build a solid unit test suite.  Robin has
 * since gone onto other projects (wxPython).
 *
 * Gregory P. Smith &lt;greg@krypto.org&gt; was once again the maintainer.
 *
 * Since January 2008, new maintainer is Jesus Cea &lt;jcea@jcea.es&gt;.
 * Jesus Cea licenses this code to PSF under a Contributor Agreement.
 *
 * Use the pybsddb-users@lists.sf.net mailing list for all questions.
 * Things can change faster than the header of this file is updated.  This
 * file is shared with the PyBSDDB project at SourceForge:
 *
 * http://pybsddb.sf.net
 *
 * This file should remain backward compatible with Python 2.1, but see PEP
 * 291 for the most current backward compatibility requirements:
 *
 * http://www.python.org/peps/pep-0291.html
 *
 * This module contains 6 types:
 *
 * DB           (Database)
 * DBCursor     (Database Cursor)
 * DBEnv        (database environment)
 * DBTxn        (An explicit database transaction)
 * DBLock       (A lock handle)
 * DBSequence   (Sequence)
 *
 */</comment>

<comment type="block">/* --------------------------------------------------------------------- */</comment>

<comment type="block">/*
 * Portions of this module, associated unit tests and build scripts are the
 * result of a contract with The Written Word (http://thewrittenword.com/)
 * Many thanks go out to them for causing me to raise the bar on quality and
 * functionality, resulting in a better bsddb3 package for all of us to use.
 *
 * --Robin
 */</comment>

<comment type="block">/* --------------------------------------------------------------------- */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>   <comment type="block">/* for offsetof() */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Python.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILING_BSDDB_C</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsddb.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPILING_BSDDB_C</name></cpp:undef>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>rcs_id</name> <init>= <expr>"$Id$"</expr></init></decl>;</decl_stmt>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/* Various macro definitions */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x02050000)</expr></cpp:if>
<typedef>typedef <type><name>int</name></type> <name>Py_ssize_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x02060000)</expr></cpp:if>  <comment type="block">/* really: before python trunk r63675 */</comment>
<comment type="block">/* This code now uses PyBytes* API function names instead of PyString*.
 * These #defines map to their equivalent on earlier python versions.    */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBytes_FromStringAndSize</name></cpp:macro> <cpp:value>PyString_FromStringAndSize</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBytes_FromString</name></cpp:macro> <cpp:value>PyString_FromString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBytes_AsStringAndSize</name></cpp:macro> <cpp:value>PyString_AsStringAndSize</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBytes_Check</name></cpp:macro> <cpp:value>PyString_Check</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBytes_GET_SIZE</name></cpp:macro> <cpp:value>PyString_GET_SIZE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBytes_AS_STRING</name></cpp:macro> <cpp:value>PyString_AS_STRING</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &gt;= 0x03000000)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMBER_Check</name></cpp:macro>    <cpp:value>PyLong_Check</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMBER_AsLong</name></cpp:macro>   <cpp:value>PyLong_AsLong</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMBER_FromLong</name></cpp:macro> <cpp:value>PyLong_FromLong</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMBER_Check</name></cpp:macro>    <cpp:value>PyInt_Check</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMBER_AsLong</name></cpp:macro>   <cpp:value>PyInt_AsLong</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMBER_FromLong</name></cpp:macro> <cpp:value>PyInt_FromLong</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WITH_THREAD</name></cpp:ifdef>

<comment type="block">/* These are for when calling Python --&gt; C */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MYDB_BEGIN_ALLOW_THREADS</name></cpp:macro> <cpp:value>Py_BEGIN_ALLOW_THREADS;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MYDB_END_ALLOW_THREADS</name></cpp:macro> <cpp:value>Py_END_ALLOW_THREADS;</cpp:value></cpp:define>

<comment type="block">/* For 2.3, use the PyGILState_ calls */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &gt;= 0x02030000)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MYDB_USE_GILSTATE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* and these are for calling C --&gt; Python */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MYDB_USE_GILSTATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MYDB_BEGIN_BLOCK_THREADS</name></cpp:macro> \
		<cpp:value>PyGILState_STATE __savestate = PyGILState_Ensure();</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MYDB_END_BLOCK_THREADS</name></cpp:macro> \
		<cpp:value>PyGILState_Release(__savestate);</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* MYDB_USE_GILSTATE */</comment>
<comment type="block">/* Pre GILState API - do it the long old way */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyInterpreterState</name>*</type> <name>_db_interpreterState</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MYDB_BEGIN_BLOCK_THREADS</name></cpp:macro> <cpp:value>{                              \
        PyThreadState* prevState;                               \
        PyThreadState* newState;                                \
        PyEval_AcquireLock();                                   \
        newState  = PyThreadState_New(_db_interpreterState);    \
        prevState = PyThreadState_Swap(newState);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MYDB_END_BLOCK_THREADS</name></cpp:macro>                                  \
        <cpp:value>newState = PyThreadState_Swap(prevState);               \
        PyThreadState_Clear(newState);                          \
        PyEval_ReleaseLock();                                   \
        PyThreadState_Delete(newState);                         \
        }</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MYDB_USE_GILSTATE */</comment>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/* Compiled without threads - avoid all this cruft */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MYDB_BEGIN_ALLOW_THREADS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MYDB_END_ALLOW_THREADS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MYDB_BEGIN_BLOCK_THREADS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MYDB_END_BLOCK_THREADS</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Should DB_INCOMPLETE be turned into a warning or an exception? */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCOMPLETE_IS_WARNING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/* Exceptions */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBError</name></decl>;</decl_stmt>               <comment type="block">/* Base class, all others derive from this */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBCursorClosedError</name></decl>;</decl_stmt>   <comment type="block">/* raised when trying to use a closed cursor object */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBKeyEmptyError</name></decl>;</decl_stmt>       <comment type="block">/* DB_KEYEMPTY: also derives from KeyError */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBKeyExistError</name></decl>;</decl_stmt>       <comment type="block">/* DB_KEYEXIST */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBLockDeadlockError</name></decl>;</decl_stmt>   <comment type="block">/* DB_LOCK_DEADLOCK */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBLockNotGrantedError</name></decl>;</decl_stmt> <comment type="block">/* DB_LOCK_NOTGRANTED */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBNotFoundError</name></decl>;</decl_stmt>       <comment type="block">/* DB_NOTFOUND: also derives from KeyError */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBOldVersionError</name></decl>;</decl_stmt>     <comment type="block">/* DB_OLD_VERSION */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBRunRecoveryError</name></decl>;</decl_stmt>    <comment type="block">/* DB_RUNRECOVERY */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBVerifyBadError</name></decl>;</decl_stmt>      <comment type="block">/* DB_VERIFY_BAD */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBNoServerError</name></decl>;</decl_stmt>       <comment type="block">/* DB_NOSERVER */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBNoServerHomeError</name></decl>;</decl_stmt>   <comment type="block">/* DB_NOSERVER_HOME */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBNoServerIDError</name></decl>;</decl_stmt>     <comment type="block">/* DB_NOSERVER_ID */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBPageNotFoundError</name></decl>;</decl_stmt>   <comment type="block">/* DB_PAGE_NOTFOUND */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBSecondaryBadError</name></decl>;</decl_stmt>   <comment type="block">/* DB_SECONDARY_BAD */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>INCOMPLETE_IS_WARNING</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBIncompleteError</name></decl>;</decl_stmt>     <comment type="block">/* DB_INCOMPLETE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBInvalidArgError</name></decl>;</decl_stmt>     <comment type="block">/* EINVAL */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBAccessError</name></decl>;</decl_stmt>         <comment type="block">/* EACCES */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBNoSpaceError</name></decl>;</decl_stmt>        <comment type="block">/* ENOSPC */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBNoMemoryError</name></decl>;</decl_stmt>       <comment type="block">/* DB_BUFFER_SMALL (ENOMEM when &lt; 4.3) */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBAgainError</name></decl>;</decl_stmt>          <comment type="block">/* EAGAIN */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBBusyError</name></decl>;</decl_stmt>           <comment type="block">/* EBUSY  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBFileExistsError</name></decl>;</decl_stmt>     <comment type="block">/* EEXIST */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBNoSuchFileError</name></decl>;</decl_stmt>     <comment type="block">/* ENOENT */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBPermissionsError</name></decl>;</decl_stmt>    <comment type="block">/* EPERM  */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 42)</expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBRepHandleDeadError</name></decl>;</decl_stmt>  <comment type="block">/* DB_REP_HANDLE_DEAD */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>DBRepUnavailError</name></decl>;</decl_stmt>     <comment type="block">/* DB_REP_UNAVAIL */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &lt; 43)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>DB_BUFFER_SMALL</name></cpp:macro>		<cpp:value>ENOMEM</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/* Structure definitions */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PYTHON_API_VERSION</name> &lt; 1010</expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> "Python 2.1 or later required"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* Defaults for moduleFlags in DBEnvObject and DBObject. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_GET_RETURNS_NONE</name></cpp:macro>                <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CURSOR_SET_RETURNS_NONE</name></cpp:macro>         <cpp:value>1</cpp:value></cpp:define>   <comment type="block">/* 0 in pybsddb &lt; 4.2, python &lt; 2.4 */</comment>


<comment type="block">/* See comment in Python 2.6 "object.h" */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>staticforward</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>staticforward</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>statichere</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>statichere</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>staticforward</name> <name>PyTypeObject</name></type> <name>DB_Type</name></decl>, <decl><type ref="prev"/><name>DBCursor_Type</name></decl>, <decl><type ref="prev"/><name>DBEnv_Type</name></decl>, <decl><type ref="prev"/><name>DBTxn_Type</name></decl>,
              <decl><type ref="prev"/><name>DBLock_Type</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
<decl_stmt><decl><type><name>staticforward</name> <name>PyTypeObject</name></type> <name>DBSequence_Type</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_TYPE</name></cpp:ifndef>
<comment type="block">/* for compatibility with Python 2.5 and earlier */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TYPE</name><parameter_list>(<param><type><name>ob</name></type></param>)</parameter_list></cpp:macro>              <cpp:value>(((PyObject*)(ob))-&gt;ob_type)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBObject_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro>           <cpp:value>(Py_TYPE(v) == &amp;DB_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCursorObject_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro>     <cpp:value>(Py_TYPE(v) == &amp;DBCursor_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBEnvObject_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro>        <cpp:value>(Py_TYPE(v) == &amp;DBEnv_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBTxnObject_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro>        <cpp:value>(Py_TYPE(v) == &amp;DBTxn_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBLockObject_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>(Py_TYPE(v) == &amp;DBLock_Type)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBSequenceObject_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro>   <cpp:value>(Py_TYPE(v) == &amp;DBSequence_Type)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &lt; 46)</expr></cpp:if>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DBC_close</name><parameter_list>(<param><type><name>dbc</name></type></param>)</parameter_list></cpp:macro>           <cpp:value>dbc-&gt;c_close(dbc)</cpp:value></cpp:define>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DBC_count</name><parameter_list>(<param><type><name>dbc</name></type></param>,<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>dbc-&gt;c_count(dbc,a,b)</cpp:value></cpp:define>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DBC_del</name><parameter_list>(<param><type><name>dbc</name></type></param>,<param><type><name>a</name></type></param>)</parameter_list></cpp:macro>           <cpp:value>dbc-&gt;c_del(dbc,a)</cpp:value></cpp:define>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DBC_dup</name><parameter_list>(<param><type><name>dbc</name></type></param>,<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>)</parameter_list></cpp:macro>         <cpp:value>dbc-&gt;c_dup(dbc,a,b)</cpp:value></cpp:define>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DBC_get</name><parameter_list>(<param><type><name>dbc</name></type></param>,<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>,<param><type><name>c</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>dbc-&gt;c_get(dbc,a,b,c)</cpp:value></cpp:define>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DBC_pget</name><parameter_list>(<param><type><name>dbc</name></type></param>,<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>,<param><type><name>c</name></type></param>,<param><type><name>d</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>dbc-&gt;c_pget(dbc,a,b,c,d)</cpp:value></cpp:define>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DBC_put</name><parameter_list>(<param><type><name>dbc</name></type></param>,<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>,<param><type><name>c</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>dbc-&gt;c_put(dbc,a,b,c)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DBC_close</name><parameter_list>(<param><type><name>dbc</name></type></param>)</parameter_list></cpp:macro>           <cpp:value>dbc-&gt;close(dbc)</cpp:value></cpp:define>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DBC_count</name><parameter_list>(<param><type><name>dbc</name></type></param>,<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>dbc-&gt;count(dbc,a,b)</cpp:value></cpp:define>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DBC_del</name><parameter_list>(<param><type><name>dbc</name></type></param>,<param><type><name>a</name></type></param>)</parameter_list></cpp:macro>           <cpp:value>dbc-&gt;del(dbc,a)</cpp:value></cpp:define>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DBC_dup</name><parameter_list>(<param><type><name>dbc</name></type></param>,<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>)</parameter_list></cpp:macro>         <cpp:value>dbc-&gt;dup(dbc,a,b)</cpp:value></cpp:define>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DBC_get</name><parameter_list>(<param><type><name>dbc</name></type></param>,<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>,<param><type><name>c</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>dbc-&gt;get(dbc,a,b,c)</cpp:value></cpp:define>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DBC_pget</name><parameter_list>(<param><type><name>dbc</name></type></param>,<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>,<param><type><name>c</name></type></param>,<param><type><name>d</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>dbc-&gt;pget(dbc,a,b,c,d)</cpp:value></cpp:define>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DBC_put</name><parameter_list>(<param><type><name>dbc</name></type></param>,<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>,<param><type><name>c</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>dbc-&gt;put(dbc,a,b,c)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/* Utility macros and functions */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT_IN_DOUBLE_LINKED_LIST</name><parameter_list>(<param><type><name>backlink</name></type></param>,<param><type><name>object</name></type></param>)</parameter_list></cpp:macro>                   \
    <cpp:value>{                                                                   \
        object-&gt;sibling_next=backlink;                                  \
        object-&gt;sibling_prev_p=&amp;(backlink);                             \
        backlink=object;                                                \
        if (object-&gt;sibling_next) {                                     \
          object-&gt;sibling_next-&gt;sibling_prev_p=&amp;(object-&gt;sibling_next); \
        }                                                               \
    }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_FROM_DOUBLE_LINKED_LIST</name><parameter_list>(<param><type><name>object</name></type></param>)</parameter_list></cpp:macro>                          \
    <cpp:value>{                                                                    \
        if (object-&gt;sibling_next) {                                      \
            object-&gt;sibling_next-&gt;sibling_prev_p=object-&gt;sibling_prev_p; \
        }                                                                \
        *(object-&gt;sibling_prev_p)=object-&gt;sibling_next;                  \
    }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_FROM_DOUBLE_LINKED_LIST_MAYBE_NULL</name><parameter_list>(<param><type><name>object</name></type></param>)</parameter_list></cpp:macro>               \
    <cpp:value>{                                                                    \
        if (object-&gt;sibling_next) {                                      \
            object-&gt;sibling_next-&gt;sibling_prev_p=object-&gt;sibling_prev_p; \
        }                                                                \
        if (object-&gt;sibling_prev_p) {                                    \
            *(object-&gt;sibling_prev_p)=object-&gt;sibling_next;              \
        }                                                                \
    }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT_IN_DOUBLE_LINKED_LIST_TXN</name><parameter_list>(<param><type><name>backlink</name></type></param>,<param><type><name>object</name></type></param>)</parameter_list></cpp:macro>  \
    <cpp:value>{                                                      \
        object-&gt;sibling_next_txn=backlink;                 \
        object-&gt;sibling_prev_p_txn=&amp;(backlink);            \
        backlink=object;                                   \
        if (object-&gt;sibling_next_txn) {                    \
            object-&gt;sibling_next_txn-&gt;sibling_prev_p_txn=  \
                &amp;(object-&gt;sibling_next_txn);               \
        }                                                  \
    }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_FROM_DOUBLE_LINKED_LIST_TXN</name><parameter_list>(<param><type><name>object</name></type></param>)</parameter_list></cpp:macro>             \
    <cpp:value>{                                                           \
        if (object-&gt;sibling_next_txn) {                         \
            object-&gt;sibling_next_txn-&gt;sibling_prev_p_txn=       \
                object-&gt;sibling_prev_p_txn;                     \
        }                                                       \
        *(object-&gt;sibling_prev_p_txn)=object-&gt;sibling_next_txn; \
    }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN_IF_ERR</name><parameter_list>()</parameter_list></cpp:macro>          \
    <cpp:value>if (makeDBError(err)) {      \
        return NULL;             \
    }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN_NONE</name><parameter_list>()</parameter_list></cpp:macro>  <cpp:value>Py_INCREF(Py_None); return Py_None;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CHECK_OBJECT_NOT_CLOSED</name><parameter_list>(<param><type><name>nonNull</name></type></param>, <param><type><name>pyErrObj</name></type></param>, <param><type><name>name</name></type></param>)</parameter_list></cpp:macro> \
    <cpp:value>if ((nonNull) == NULL) {          \
        PyObject *errTuple = NULL;    \
        errTuple = Py_BuildValue("(is)", 0, #name " object has been closed"); \
        if (errTuple) { \
            PyErr_SetObject((pyErrObj), errTuple);  \
            Py_DECREF(errTuple);          \
        } \
        return NULL;                  \
    }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_DB_NOT_CLOSED</name><parameter_list>(<param><type><name>dbobj</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>_CHECK_OBJECT_NOT_CLOSED(dbobj-&gt;db, DBError, DB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_ENV_NOT_CLOSED</name><parameter_list>(<param><type><name>env</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>_CHECK_OBJECT_NOT_CLOSED(env-&gt;db_env, DBError, DBEnv)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_CURSOR_NOT_CLOSED</name><parameter_list>(<param><type><name>curs</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>_CHECK_OBJECT_NOT_CLOSED(curs-&gt;dbc, DBCursorClosedError, DBCursor)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_SEQUENCE_NOT_CLOSED</name><parameter_list>(<param><type><name>curs</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>_CHECK_OBJECT_NOT_CLOSED(curs-&gt;sequence, DBError, DBSequence)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_DBFLAG</name><parameter_list>(<param><type><name>mydb</name></type></param>, <param><type><name>flag</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>(((mydb)-&gt;flags &amp; (flag)) || \
                                     (((mydb)-&gt;myenvobj != NULL) &amp;&amp; ((mydb)-&gt;myenvobj-&gt;flags &amp; (flag))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAR_DBT</name><parameter_list>(<param><type><name>dbt</name></type></param>)</parameter_list></cpp:macro>              <cpp:value>(memset(&amp;(dbt), 0, sizeof(dbt)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DBT</name><parameter_list>(<param><type><name>dbt</name></type></param>)</parameter_list></cpp:macro>               <cpp:value>if ((dbt.flags &amp; (DB_DBT_MALLOC|DB_DBT_REALLOC)) &amp;&amp; \
                                         dbt.data != NULL) { free(dbt.data); dbt.data = NULL; }</cpp:value></cpp:define>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>makeDBError</name><parameter_list>(<param><decl><type><name>int</name></type> <name>err</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Return the access method type of the DBObject */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_DB_get_type</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>DBTYPE</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>get_type</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>makeDBError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr>-1</expr>;</return>
    }</block></then></if>
    <return>return <expr><name>type</name></expr>;</return>
}</block></function>


<comment type="block">/* Create a DBT structure (containing key and data values) from Python
   strings.  Returns 1 on success, 0 on an error. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>make_dbt</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>DBT</name>*</type> <name>dbt</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr>*<name>dbt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>obj</name> == <name>Py_None</name></expr>)</condition><then> <block>{
        <comment type="block">/* no need to do anything, the structure has already been zeroed */</comment>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"s#"</expr></argument>, <argument><expr>&amp;<name><name>dbt</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name><name>dbt</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
                        <argument><expr>"Data values must be of type string or None."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr>"Data values must be of type bytes or None."</expr></expr_stmt>)</block><empty_stmt>;</empty_stmt></then></if></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return <expr>0</expr>;</return>
    }</block></function>
    <return>return <expr>1</expr>;</return>
}


<comment type="block">/* Recno and Queue DBs can have integer keys.  This function figures out
   what's been given, verifies that it's allowed, and then makes the DBT.

   Caller MUST call FREE_DBT(key) when done. */</comment>
static <function><type><name>int</name></type>
<name>make_key_dbt</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>keyobj</name></decl></param>, <param><decl><type><name>DBT</name>*</type> <name>key</name></decl></param>, <param><decl><type><name>int</name>*</type> <name>pflags</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>db_recno_t</name></type> <name>recno</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr>*<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>keyobj</name> == <name>Py_None</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>type</name> = <call><name>_DB_get_type</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>type</name> == -1</expr>)</condition><then>
            <return>return <expr>0</expr>;</return></then></if>
        <if>if <condition>(<expr><name>type</name> == <name>DB_RECNO</name> || <name>type</name> == <name>DB_QUEUE</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
                <argument><expr><name>PyExc_TypeError</name></expr></argument>,
                <argument><expr>"None keys not allowed for Recno and Queue DB's"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <comment type="block">/* no need to do anything, the structure has already been zeroed */</comment>
    }</block></then>

    <else>else <if>if <condition>(<expr><call><name>PyBytes_Check</name><argument_list>(<argument><expr><name>keyobj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* verify access method type */</comment>
        <expr_stmt><expr><name>type</name> = <call><name>_DB_get_type</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>type</name> == -1</expr>)</condition><then>
            <return>return <expr>0</expr>;</return></then></if>
        <if>if <condition>(<expr><name>type</name> == <name>DB_RECNO</name> || <name>type</name> == <name>DB_QUEUE</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
                <argument><expr><name>PyExc_TypeError</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
                <argument><expr>"String keys not allowed for Recno and Queue DB's"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <expr_stmt><expr>"Bytes keys not allowed for Recno and Queue DB's"</expr></expr_stmt>)</block><empty_stmt>;</empty_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <return>return <expr>0</expr>;</return>
        }</block></then></if></else></if>

        <comment type="block">/*
         * NOTE(gps): I don't like doing a data copy here, it seems
         * wasteful.  But without a clean way to tell FREE_DBT if it
         * should free key-&gt;data or not we have to.  Other places in
         * the code check for DB_THREAD and forceably set DBT_MALLOC
         * when we otherwise would leave flags 0 to indicate that.
         */</comment>
        <expr_stmt><expr><name><name>key</name>-&gt;<name>data</name></name> = <call><name>malloc</name><argument_list>(<argument><expr><call><name>PyBytes_GET_SIZE</name><argument_list>(<argument><expr><name>keyobj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>key</name>-&gt;<name>data</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_MemoryError</name></expr></argument>, <argument><expr>"Key memory allocation failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>key</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><call><name>PyBytes_AS_STRING</name><argument_list>(<argument><expr><name>keyobj</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><call><name>PyBytes_GET_SIZE</name><argument_list>(<argument><expr><name>keyobj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>key</name>-&gt;<name>flags</name></name> = <name>DB_DBT_REALLOC</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>key</name>-&gt;<name>size</name></name> = <call><name>PyBytes_GET_SIZE</name><argument_list>(<argument><expr><name>keyobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <else>else <if>if <condition>(<expr><call><name>NUMBER_Check</name><argument_list>(<argument><expr><name>keyobj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* verify access method type */</comment>
        <expr_stmt><expr><name>type</name> = <call><name>_DB_get_type</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>type</name> == -1</expr>)</condition><then>
            <return>return <expr>0</expr>;</return></then></if>
        <if>if <condition>(<expr><name>type</name> == <name>DB_BTREE</name> &amp;&amp; <name>pflags</name> != <name>NULL</name></expr>)</condition><then> <block>{
            <comment type="block">/* if BTREE then an Integer key is allowed with the
             * DB_SET_RECNO flag */</comment>
            <expr_stmt><expr>*<name>pflags</name> |= <name>DB_SET_RECNO</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>type</name> != <name>DB_RECNO</name> &amp;&amp; <name>type</name> != <name>DB_QUEUE</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
                <argument><expr><name>PyExc_TypeError</name></expr></argument>,
                <argument><expr>"Integer keys only allowed for Recno and Queue DB's"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>0</expr>;</return>
        }</block></then></if></else></if>

        <comment type="block">/* Make a key out of the requested recno, use allocated space so DB
         * will be able to realloc room for the real key if needed. */</comment>
        <expr_stmt><expr><name>recno</name> = <call><name>NUMBER_AsLong</name><argument_list>(<argument><expr><name>keyobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>key</name>-&gt;<name>data</name></name> = <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>db_recno_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>key</name>-&gt;<name>data</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_MemoryError</name></expr></argument>, <argument><expr>"Key memory allocation failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name><name>key</name>-&gt;<name>ulen</name></name> = <name><name>key</name>-&gt;<name>size</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>db_recno_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>key</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>recno</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>db_recno_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>key</name>-&gt;<name>flags</name></name> = <name>DB_DBT_REALLOC</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
                     <argument><expr>"String or Integer object expected for key, %s found"</expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                     <argument><expr>"Bytes or Integer object expected for key, %s found"</expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                     <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>keyobj</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
    }</block></else></if></else>

    <return>return <expr>1</expr>;</return>
}


<comment type="block">/* Add partial record access to an existing DBT data struct.
   If dlen and doff are set, then the DB_DBT_PARTIAL flag will be set
   and the data storage/retrieval will be done using dlen and doff. */</comment>
static <function><type><name>int</name></type> <name>add_partial_dbt</name><parameter_list>(<param><decl><type><name>DBT</name>*</type> <name>d</name></decl></param>, <param><decl><type><name>int</name></type> <name>dlen</name></decl></param>, <param><decl><type><name>int</name></type> <name>doff</name></decl></param>)</parameter_list> <block>{
    <comment type="block">/* if neither were set we do nothing (-1 is the default value) */</comment>
    <if>if <condition>(<expr>(<name>dlen</name> == -1) &amp;&amp; (<name>doff</name> == -1)</expr>)</condition><then> <block>{
        <return>return <expr>1</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>(<name>dlen</name> &lt; 0) || (<name>doff</name> &lt; 0)</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"dlen and doff must both be &gt;= 0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>d</name>-&gt;<name>flags</name></name> = <name><name>d</name>-&gt;<name>flags</name></name> | <name>DB_DBT_PARTIAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>d</name>-&gt;<name>dlen</name></name> = (<name>unsigned</name> <name>int</name>) <name>dlen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>d</name>-&gt;<name>doff</name></name> = (<name>unsigned</name> <name>int</name>) <name>doff</name></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/* a safe strcpy() without the zeroing behaviour and semantics of strncpy. */</comment>
<comment type="block">/* TODO: make this use the native libc strlcpy() when available (BSD)      */</comment>
<function><type><name>unsigned</name> <name>int</name></type> <name>our_strlcpy</name><parameter_list>(<param><decl><type><name>char</name>*</type> <name>dest</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>src</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>srclen</name></decl>, <decl><type ref="prev"/><name>copylen</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>srclen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>n</name> &lt;= 0</expr>)</condition><then>
	<return>return <expr><name>srclen</name></expr>;</return></then></if>
    <expr_stmt><expr><name>copylen</name> = (<name>srclen</name> &gt; <name>n</name>-1) ? <name>n</name>-1 : <name>srclen</name></expr>;</expr_stmt>
    <comment type="block">/* populate dest[0] thru dest[copylen-1] */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>copylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* guarantee null termination */</comment>
    <expr_stmt><expr><name><name>dest</name><index>[<expr><name>copylen</name></expr>]</index></name> = 0</expr>;</expr_stmt>

    <return>return <expr><name>srclen</name></expr>;</return>
}</block></function>

<comment type="block">/* Callback used to save away more information about errors from the DB
 * library. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>_db_errmsg</name><index>[<expr>1024</expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &lt;= 42)</expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_db_errorCallback</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>prefix</name></decl></param>, <param><decl><type><name>char</name>*</type> <name>msg</name></decl></param>)</parameter_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
static void _db_errorCallback<parameter_list>(<param><decl><type><specifier>const</specifier> <name>DB_ENV</name> *</type><name>db_env</name></decl></param>,
	<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>prefix</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>msg</name></decl></param>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
    <expr_stmt><expr><call><name>our_strlcpy</name><argument_list>(<argument><expr><name>_db_errmsg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_db_errmsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="block">/*
** We need these functions because some results
** are undefined if pointer is NULL. Some other
** give None instead of "".
**
** This functions are static and will be
** -I hope- inlined.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>DummyString</name> <init>= <expr>"This string is a simple placeholder"</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Build_PyString</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name></decl></param>,<param><decl><type><name>int</name></type> <name>s</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>p</name>=<name>DummyString</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name>==0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><call><name>PyBytes_FromStringAndSize</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>BuildValue_S</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>p</name></decl></param>,<param><decl><type><name>int</name></type> <name>s</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>p</name>=<name>DummyString</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name>==0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><call><name>PyBytes_FromStringAndSize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>BuildValue_SS</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>p1</name></decl></param>,<param><decl><type><name>int</name></type> <name>s1</name></decl></param>,<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>p2</name></decl></param>,<param><decl><type><name>int</name></type> <name>s2</name></decl></param>)</parameter_list>
<block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>a</name></decl>, *<decl><type ref="prev"/><name>b</name></decl>, *<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>p1</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>p1</name>=<name>DummyString</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s1</name>==0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr>!<name>p2</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>p2</name>=<name>DummyString</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s2</name>==0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr>!(<name>a</name> = <call><name>PyBytes_FromStringAndSize</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
      <return>return <expr><name>NULL</name></expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr>!(<name>b</name> = <call><name>PyBytes_FromStringAndSize</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
  }</block></then></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &gt;= 0x02040000)</expr></cpp:if>
  <expr_stmt><expr><name>r</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>r</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"OO"</expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>r</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>BuildValue_IS</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>,<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>p</name></decl></param>,<param><decl><type><name>int</name></type> <name>s</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>a</name></decl>, *<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>p</name>=<name>DummyString</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name>==0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr>!(<name>a</name> = <call><name>PyBytes_FromStringAndSize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
      <return>return <expr><name>NULL</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>r</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"iO"</expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>r</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>BuildValue_LS</name><parameter_list>(<param><decl><type><name>long</name></type> <name>l</name></decl></param>,<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>p</name></decl></param>,<param><decl><type><name>int</name></type> <name>s</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>a</name></decl>, *<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>p</name>=<name>DummyString</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name>==0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr>!(<name>a</name> = <call><name>PyBytes_FromStringAndSize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
      <return>return <expr><name>NULL</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>r</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO"</expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>r</name></expr>;</return>
}</block></function>



<comment type="block">/* make a nice exception object to raise for errors. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>makeDBError</name><parameter_list>(<param><decl><type><name>int</name></type> <name>err</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name></type> <name><name>errTxt</name><index>[<expr>2048</expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* really big, just in case... */</comment>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>errObj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>errTuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>exceptionRaised</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bytes_left</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{
        <case>case <expr>0</expr>:                     <comment type="block">/* successful, no error */</comment>      <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &lt; 41)</expr></cpp:if>
        </case><case>case <expr><name>DB_INCOMPLETE</name></expr>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>INCOMPLETE_IS_WARNING</name></expr></cpp:if>
            <expr_stmt><expr><name>bytes_left</name> = <call><name>our_strlcpy</name><argument_list>(<argument><expr><name>errTxt</name></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errTxt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* Ensure that bytes_left never goes negative */</comment>
            <if>if <condition>(<expr><name><name>_db_errmsg</name><index>[<expr>0</expr>]</index></name> &amp;&amp; <name>bytes_left</name> &lt; (<sizeof>sizeof<argument_list>(<argument><expr><name>errTxt</name></expr></argument>)</argument_list></sizeof> - 4)</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>bytes_left</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>errTxt</name></expr></argument>)</argument_list></sizeof> - <name>bytes_left</name> - 4 - 1</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bytes_left</name> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>errTxt</name></expr></argument>, <argument><expr>" -- "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>errTxt</name></expr></argument>, <argument><expr><name>_db_errmsg</name></expr></argument>, <argument><expr><name>bytes_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name><name>_db_errmsg</name><index>[<expr>0</expr>]</index></name> = 0</expr>;</expr_stmt>
            <expr_stmt><expr><name>exceptionRaised</name> = <call><name>PyErr_Warn</name><argument_list>(<argument><expr><name>PyExc_RuntimeWarning</name></expr></argument>, <argument><expr><name>errTxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  <comment type="block">/* do an exception instead */</comment>
        <expr_stmt><expr><name>errObj</name> = <name>DBIncompleteError</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DBVER &lt; 41 */</comment>

        </case><case>case <expr><name>DB_KEYEMPTY</name></expr>:           <expr_stmt><expr><name>errObj</name> = <name>DBKeyEmptyError</name></expr>;</expr_stmt>       <break>break;</break>
        </case><case>case <expr><name>DB_KEYEXIST</name></expr>:           <expr_stmt><expr><name>errObj</name> = <name>DBKeyExistError</name></expr>;</expr_stmt>       <break>break;</break>
        </case><case>case <expr><name>DB_LOCK_DEADLOCK</name></expr>:      <expr_stmt><expr><name>errObj</name> = <name>DBLockDeadlockError</name></expr>;</expr_stmt>   <break>break;</break>
        </case><case>case <expr><name>DB_LOCK_NOTGRANTED</name></expr>:    <expr_stmt><expr><name>errObj</name> = <name>DBLockNotGrantedError</name></expr>;</expr_stmt> <break>break;</break>
        </case><case>case <expr><name>DB_NOTFOUND</name></expr>:           <expr_stmt><expr><name>errObj</name> = <name>DBNotFoundError</name></expr>;</expr_stmt>       <break>break;</break>
        </case><case>case <expr><name>DB_OLD_VERSION</name></expr>:        <expr_stmt><expr><name>errObj</name> = <name>DBOldVersionError</name></expr>;</expr_stmt>     <break>break;</break>
        </case><case>case <expr><name>DB_RUNRECOVERY</name></expr>:        <expr_stmt><expr><name>errObj</name> = <name>DBRunRecoveryError</name></expr>;</expr_stmt>    <break>break;</break>
        </case><case>case <expr><name>DB_VERIFY_BAD</name></expr>:         <expr_stmt><expr><name>errObj</name> = <name>DBVerifyBadError</name></expr>;</expr_stmt>      <break>break;</break>
        </case><case>case <expr><name>DB_NOSERVER</name></expr>:           <expr_stmt><expr><name>errObj</name> = <name>DBNoServerError</name></expr>;</expr_stmt>       <break>break;</break>
        </case><case>case <expr><name>DB_NOSERVER_HOME</name></expr>:      <expr_stmt><expr><name>errObj</name> = <name>DBNoServerHomeError</name></expr>;</expr_stmt>   <break>break;</break>
        </case><case>case <expr><name>DB_NOSERVER_ID</name></expr>:        <expr_stmt><expr><name>errObj</name> = <name>DBNoServerIDError</name></expr>;</expr_stmt>     <break>break;</break>
        </case><case>case <expr><name>DB_PAGE_NOTFOUND</name></expr>:      <expr_stmt><expr><name>errObj</name> = <name>DBPageNotFoundError</name></expr>;</expr_stmt>   <break>break;</break>
        </case><case>case <expr><name>DB_SECONDARY_BAD</name></expr>:      <expr_stmt><expr><name>errObj</name> = <name>DBSecondaryBadError</name></expr>;</expr_stmt>   <break>break;</break>
        </case><case>case <expr><name>DB_BUFFER_SMALL</name></expr>:       <expr_stmt><expr><name>errObj</name> = <name>DBNoMemoryError</name></expr>;</expr_stmt>       <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
	<comment type="block">/* ENOMEM and DB_BUFFER_SMALL were one and the same until 4.3 */</comment>
	</case><case>case <expr><name>ENOMEM</name></expr>:  <expr_stmt><expr><name>errObj</name> = <name>PyExc_MemoryError</name></expr>;</expr_stmt>   <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </case><case>case <expr><name>EINVAL</name></expr>:  <expr_stmt><expr><name>errObj</name> = <name>DBInvalidArgError</name></expr>;</expr_stmt>   <break>break;</break>
        </case><case>case <expr><name>EACCES</name></expr>:  <expr_stmt><expr><name>errObj</name> = <name>DBAccessError</name></expr>;</expr_stmt>       <break>break;</break>
        </case><case>case <expr><name>ENOSPC</name></expr>:  <expr_stmt><expr><name>errObj</name> = <name>DBNoSpaceError</name></expr>;</expr_stmt>      <break>break;</break>
        </case><case>case <expr><name>EAGAIN</name></expr>:  <expr_stmt><expr><name>errObj</name> = <name>DBAgainError</name></expr>;</expr_stmt>        <break>break;</break>
        </case><case>case <expr><name>EBUSY</name></expr> :  <expr_stmt><expr><name>errObj</name> = <name>DBBusyError</name></expr>;</expr_stmt>         <break>break;</break>
        </case><case>case <expr><name>EEXIST</name></expr>:  <expr_stmt><expr><name>errObj</name> = <name>DBFileExistsError</name></expr>;</expr_stmt>   <break>break;</break>
        </case><case>case <expr><name>ENOENT</name></expr>:  <expr_stmt><expr><name>errObj</name> = <name>DBNoSuchFileError</name></expr>;</expr_stmt>   <break>break;</break>
        </case><case>case <expr><name>EPERM</name></expr> :  <expr_stmt><expr><name>errObj</name> = <name>DBPermissionsError</name></expr>;</expr_stmt>  <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 42)</expr></cpp:if>
        </case><case>case <expr><name>DB_REP_HANDLE_DEAD</name></expr> : <expr_stmt><expr><name>errObj</name> = <name>DBRepHandleDeadError</name></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        </case><case>case <expr><name>DB_REP_UNAVAIL</name></expr> : <expr_stmt><expr><name>errObj</name> = <name>DBRepUnavailError</name></expr>;</expr_stmt> <break>break;</break>

        </case><default>default:      <expr_stmt><expr><name>errObj</name> = <name>DBError</name></expr>;</expr_stmt>             <break>break;</break>
    </default>}</block></switch>

    <if>if <condition>(<expr><name>errObj</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>bytes_left</name> = <call><name>our_strlcpy</name><argument_list>(<argument><expr><name>errTxt</name></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errTxt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Ensure that bytes_left never goes negative */</comment>
        <if>if <condition>(<expr><name><name>_db_errmsg</name><index>[<expr>0</expr>]</index></name> &amp;&amp; <name>bytes_left</name> &lt; (<sizeof>sizeof<argument_list>(<argument><expr><name>errTxt</name></expr></argument>)</argument_list></sizeof> - 4)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>bytes_left</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>errTxt</name></expr></argument>)</argument_list></sizeof> - <name>bytes_left</name> - 4 - 1</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bytes_left</name> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>errTxt</name></expr></argument>, <argument><expr>" -- "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>errTxt</name></expr></argument>, <argument><expr><name>_db_errmsg</name></expr></argument>, <argument><expr><name>bytes_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>_db_errmsg</name><index>[<expr>0</expr>]</index></name> = 0</expr>;</expr_stmt>

        <expr_stmt><expr><name>errTuple</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(is)"</expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>errTxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>errTuple</name> == <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>errObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>!0</expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>errObj</name></expr></argument>, <argument><expr><name>errTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>errTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr>((<name>errObj</name> != <name>NULL</name>) || <name>exceptionRaised</name>)</expr>;</return>
}</block></function>



<comment type="block">/* set a type exception */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>makeTypeError</name><parameter_list>(<param><decl><type><name>char</name>*</type> <name>expected</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>found</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Expected %s argument, %s found."</expr></argument>,
                 <argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="block">/* verify that an obj is either None or a DBTxn, and set the txn pointer */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>checkTxnObj</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>txnobj</name></decl></param>, <param><decl><type><name>DB_TXN</name>**</type> <name>txn</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>txnobj</name> == <name>Py_None</name> || <name>txnobj</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>txn</name> = <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><call><name>DBTxnObject_Check</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>txn</name> = ((<name>DBTxnObject</name>*)<name>txnobj</name>)-&gt;<name>txn</name></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
    }</block></then>
    <else>else
        <expr_stmt><expr><call><name>makeTypeError</name><argument_list>(<argument><expr>"DBTxn"</expr></argument>, <argument><expr><name>txnobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    <return>return <expr>0</expr>;</return>
}</block></function>


<comment type="block">/* Delete a key from a database
  Returns 0 on success, -1 on an error.  */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_DB_delete</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>DB_TXN</name> *</type><name>txn</name></decl></param>, <param><decl><type><name>DBT</name> *</type><name>key</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>del</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>makeDBError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr>-1</expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>haveStat</name></name> = 0</expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>


<comment type="block">/* Store a key into a database
   Returns 0 on success, -1 on an error.  */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_DB_put</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>DB_TXN</name> *</type><name>txn</name></decl></param>, <param><decl><type><name>DBT</name> *</type><name>key</name></decl></param>, <param><decl><type><name>DBT</name> *</type><name>data</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>put</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>makeDBError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr>-1</expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>haveStat</name></name> = 0</expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/* Get a key/data pair from a cursor */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>_DBCursor_get</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>int</name></type> <name>extra_flags</name></decl></param>,
			       <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>, <param><decl><type><name>char</name> *</type><name>format</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>retval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dlen</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>doff</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"flags"</expr>, <expr>"dlen"</expr>, <expr>"doff"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
				     <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>dlen</name></expr></argument>, <argument><expr>&amp;<name>doff</name></expr></argument>)</argument_list></call></expr>)</condition><then> 
      <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_CURSOR_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>flags</name> |= <name>extra_flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>add_partial_dbt</name><argument_list>(<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>doff</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name>_DBC_get</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dbc</name></name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <if>if <condition>(<expr>(<name>err</name> == <name>DB_NOTFOUND</name> || <name>err</name> == <name>DB_KEYEMPTY</name>)
	    &amp;&amp; <name><name>self</name>-&gt;<name>mydb</name>-&gt;<name>moduleFlags</name>.<name>getReturnsNone</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retval</name> = <name>Py_None</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>makeDBError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>retval</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{  <comment type="block">/* otherwise, success! */</comment>

        <comment type="block">/* if Recno or Queue, return the key as an Int */</comment>
        <switch>switch <condition>(<expr><call><name>_DB_get_type</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mydb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
        <case>case <expr>-1</expr>:
            <expr_stmt><expr><name>retval</name> = <name>NULL</name></expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr><name>DB_RECNO</name></expr>:
        </case><case>case <expr><name>DB_QUEUE</name></expr>:
            <expr_stmt><expr><name>retval</name> = <call><name>BuildValue_IS</name><argument_list>(<argument><expr>*((<name>db_recno_t</name>*)<name><name>key</name>.<name>data</name></name>)</expr></argument>, <argument><expr><name><name>data</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>DB_HASH</name></expr>:
        </case><case>case <expr><name>DB_BTREE</name></expr>:
        </case><default>default:
            <expr_stmt><expr><name>retval</name> = <call><name>BuildValue_SS</name><argument_list>(<argument><expr><name><name>key</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>key</name>.<name>size</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </default>}</block></switch>
    }</block></else></if></else></if>
    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>


<comment type="block">/* add an integer to a dictionary using the given name as a key */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_addIntToDict</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>dict</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>int</name></type> <name>value</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>v</name> <init>= <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>v</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* The same, when the value is a time_t */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_addTimeTToDict</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>dict</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>time_t</name></type> <name>value</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>v</name></decl>;</decl_stmt>
	<comment type="block">/* if the value fits in regular int, use that. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PY_LONG_LONG</name></cpp:ifdef>
	<if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>time_t</name></expr></argument>)</argument_list></sizeof> &gt; <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
		<expr_stmt><expr><name>v</name> = <call><name>PyLong_FromLongLong</name><argument_list>(<argument><expr>(<name>PY_LONG_LONG</name>) <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>v</name> = <call><name>NUMBER_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    <if>if <condition>(<expr>!<name>v</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
<comment type="block">/* add an db_seq_t to a dictionary using the given name as a key */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_addDb_seq_tToDict</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>dict</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>db_seq_t</name></type> <name>value</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>v</name> <init>= <expr><call><name>PyLong_FromLongLong</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>v</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_addDB_lsnToDict</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>dict</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>DB_LSN</name></type> <name>value</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(ll)"</expr></argument>,<argument><expr><name><name>value</name>.<name>file</name></name></expr></argument>,<argument><expr><name><name>value</name>.<name>offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>v</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/* Allocators and deallocators */</comment>

<function><type><specifier>static</specifier> <name>DBObject</name>*</type>
<name>newDBObject</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>arg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>DBObject</name>*</type> <name>self</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_ENV</name>*</type> <name>db_env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>self</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>DBObject</name></expr></argument>, <argument><expr>&amp;<name>DB_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>haveStat</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>flags</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>setflags</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>myenvobj</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>db</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>children_cursors</name></name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;=43)</expr></cpp:if>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>children_sequences</name></name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>associateCallback</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>btCompareCallback</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>primaryDBType</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>private_obj</name></name> = <name>Py_None</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>in_weakreflist</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* keep a reference to our python DBEnv object */</comment>
    <if>if <condition>(<expr><name>arg</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>myenvobj</name></name> = <name>arg</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>db_env</name> = <name><name>arg</name>-&gt;<name>db_env</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>INSERT_IN_DOUBLE_LINKED_LIST</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>myenvobj</name>-&gt;<name>children_dbs</name></name></expr></argument>,<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name><name>self</name>-&gt;<name>sibling_prev_p</name></name>=<name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>self</name>-&gt;<name>sibling_next</name></name>=<name>NULL</name></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>txn</name></name>=<name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>sibling_prev_p_txn</name></name>=<name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>sibling_next_txn</name></name>=<name>NULL</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>myenvobj</name></name></expr>)</condition><then>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>moduleFlags</name></name> = <name><name>self</name>-&gt;<name>myenvobj</name>-&gt;<name>moduleFlags</name></name></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><name><name>self</name>-&gt;<name>moduleFlags</name>.<name>getReturnsNone</name></name> = <name>DEFAULT_GET_RETURNS_NONE</name></expr>;</expr_stmt></else></if>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>moduleFlags</name>.<name>cursorSetReturnsNone</name></name> = <name>DEFAULT_CURSOR_SET_RETURNS_NONE</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name>db_create</name><argument_list>(<argument><expr>&amp;<name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>db_env</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>db</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>set_errcall</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>_db_errorCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>db</name>-&gt;<name>app_private</name></name> = (<name>void</name>*)<name>self</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <comment type="block">/* TODO add a weakref(self) to the self-&gt;myenvobj-&gt;open_child_weakrefs
     * list so that a DBEnv can refuse to close without aborting any open
     * DBTxns and closing any open DBs first. */</comment>
    <if>if <condition>(<expr><call><name>makeDBError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>self</name>-&gt;<name>myenvobj</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>myenvobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name>-&gt;<name>myenvobj</name></name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>self</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>self</name></expr>;</return>
}</block></function>


<comment type="block">/* Forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DB_close_internal</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>, <param><decl><type><name>int</name></type> <name>do_not_close</name></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DB_dealloc</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>dummy</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>db</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>dummy</name>=<call><name>DB_close_internal</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
        ** Raising exceptions while doing
        ** garbage collection is a fatal error.
        */</comment>
        <if>if <condition>(<expr><name>dummy</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>in_weakreflist</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyObject_ClearWeakRefs</name><argument_list>(<argument><expr>(<name>PyObject</name> *) <name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>myenvobj</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>myenvobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>myenvobj</name></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>associateCallback</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>associateCallback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>associateCallback</name></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>btCompareCallback</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>btCompareCallback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>btCompareCallback</name></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>private_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>DBCursorObject</name>*</type>
<name>newDBCursorObject</name><parameter_list>(<param><decl><type><name>DBC</name>*</type> <name>dbc</name></decl></param>, <param><decl><type><name>DBTxnObject</name> *</type><name>txn</name></decl></param>, <param><decl><type><name>DBObject</name>*</type> <name>db</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>DBCursorObject</name>*</type> <name>self</name> <init>= <expr><call><name>PyObject_New</name><argument_list>(<argument><expr><name>DBCursorObject</name></expr></argument>, <argument><expr>&amp;<name>DBCursor_Type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>dbc</name></name> = <name>dbc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>mydb</name></name> = <name>db</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>INSERT_IN_DOUBLE_LINKED_LIST</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mydb</name>-&gt;<name>children_cursors</name></name></expr></argument>,<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>txn</name> &amp;&amp; ((<name>PyObject</name> *)<name>txn</name>!=<name>Py_None</name>)</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>INSERT_IN_DOUBLE_LINKED_LIST_TXN</name><argument_list>(<argument><expr><name><name>txn</name>-&gt;<name>children_cursors</name></name></expr></argument>,<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>self</name>-&gt;<name>txn</name></name>=<name>txn</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	    <expr_stmt><expr><name><name>self</name>-&gt;<name>txn</name></name>=<name>NULL</name></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>in_weakreflist</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mydb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>self</name></expr>;</return>
}</block></function>


<comment type="block">/* Forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DBC_close_internal</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DBCursor_dealloc</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>dummy</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>dbc</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>dummy</name>=<call><name>DBC_close_internal</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
        ** Raising exceptions while doing
        ** garbage collection is a fatal error.
        */</comment>
        <if>if <condition>(<expr><name>dummy</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>in_weakreflist</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyObject_ClearWeakRefs</name><argument_list>(<argument><expr>(<name>PyObject</name> *) <name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mydb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>DBEnvObject</name>*</type>
<name>newDBEnvObject</name><parameter_list>(<param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBEnvObject</name>*</type> <name>self</name> <init>= <expr><call><name>PyObject_New</name><argument_list>(<argument><expr><name>DBEnvObject</name></expr></argument>, <argument><expr>&amp;<name>DBEnv_Type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>db_env</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>closed</name></name> = 1</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>flags</name></name> = <name>flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>moduleFlags</name>.<name>getReturnsNone</name></name> = <name>DEFAULT_GET_RETURNS_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>moduleFlags</name>.<name>cursorSetReturnsNone</name></name> = <name>DEFAULT_CURSOR_SET_RETURNS_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>children_dbs</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>children_txns</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>private_obj</name></name> = <name>Py_None</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>rep_transport</name></name> = <name>Py_None</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>in_weakreflist</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>event_notifyCallback</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name>db_env_create</name><argument_list>(<argument><expr>&amp;<name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>makeDBError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>self</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_errcall</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>_db_errorCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>app_private</name></name> = <name>self</name></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>self</name></expr>;</return>
}</block></function>

<comment type="block">/* Forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DBEnv_close_internal</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DBEnv_dealloc</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>dummy</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>db_env</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>dummy</name>=<call><name>DBEnv_close_internal</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
        ** Raising exceptions while doing
        ** garbage collection is a fatal error.
        */</comment>
        <if>if <condition>(<expr><name>dummy</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then></if>

    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>event_notifyCallback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>event_notifyCallback</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>in_weakreflist</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyObject_ClearWeakRefs</name><argument_list>(<argument><expr>(<name>PyObject</name> *) <name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>private_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>rep_transport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>DBTxnObject</name>*</type>
<name>newDBTxnObject</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>myenv</name></decl></param>, <param><decl><type><name>DBTxnObject</name> *</type><name>parent</name></decl></param>, <param><decl><type><name>DB_TXN</name> *</type><name>txn</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>parent_txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>DBTxnObject</name>*</type> <name>self</name> <init>= <expr><call><name>PyObject_New</name><argument_list>(<argument><expr><name>DBTxnObject</name></expr></argument>, <argument><expr>&amp;<name>DBTxn_Type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>in_weakreflist</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>children_txns</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>children_dbs</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>children_cursors</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>children_sequences</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>flag_prepare</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>parent_txn</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>env</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>parent</name> &amp;&amp; ((<name>PyObject</name> *)<name>parent</name>!=<name>Py_None</name>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>parent_txn</name> = <name><name>parent</name>-&gt;<name>txn</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>txn</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>self</name>-&gt;<name>txn</name></name> = <name>txn</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> = <call><name><name>myenv</name>-&gt;<name>db_env</name>-&gt;<name>txn_begin</name></name><argument_list>(<argument><expr><name><name>myenv</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>parent_txn</name></expr></argument>, <argument><expr>&amp;(<name><name>self</name>-&gt;<name>txn</name></name>)</expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>makeDBError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
    }</block></else></if>

    <comment type="block">/* Can't use 'parent' because could be 'parent==Py_None' */</comment>
    <if>if <condition>(<expr><name>parent_txn</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>self</name>-&gt;<name>parent_txn</name></name> = <name>parent</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>env</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>INSERT_IN_DOUBLE_LINKED_LIST</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>children_txns</name></name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name><name>self</name>-&gt;<name>parent_txn</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>myenv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>env</name></name> = <name>myenv</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>INSERT_IN_DOUBLE_LINKED_LIST</name><argument_list>(<argument><expr><name><name>myenv</name>-&gt;<name>children_txns</name></name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr><name>self</name></expr>;</return>
}</block></function>

<comment type="block">/* Forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>DBTxn_abort_discard_internal</name><parameter_list>(<param><decl><type><name>DBTxnObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>int</name></type> <name>discard</name></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DBTxn_dealloc</name><parameter_list>(<param><decl><type><name>DBTxnObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>dummy</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>txn</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>flag_prepare</name> <init>= <expr><name><name>self</name>-&gt;<name>flag_prepare</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>dummy</name>=<call><name>DBTxn_abort_discard_internal</name><argument_list>(<argument><expr><name>self</name></expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
        ** Raising exceptions while doing
        ** garbage collection is a fatal error.
        */</comment>
        <if>if <condition>(<expr><name>dummy</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if>

        <if>if <condition>(<expr>!<name>flag_prepare</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PyErr_Warn</name><argument_list>(<argument><expr><name>PyExc_RuntimeWarning</name></expr></argument>,
              <argument><expr>"DBTxn aborted in destructor.  No prior commit() or abort()."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>in_weakreflist</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyObject_ClearWeakRefs</name><argument_list>(<argument><expr>(<name>PyObject</name> *) <name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>env</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>parent_txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>DBLockObject</name>*</type>
<name>newDBLockObject</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>myenv</name></decl></param>, <param><decl><type><name>u_int32_t</name></type> <name>locker</name></decl></param>, <param><decl><type><name>DBT</name>*</type> <name>obj</name></decl></param>,
                <param><decl><type><name>db_lockmode_t</name></type> <name>lock_mode</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBLockObject</name>*</type> <name>self</name> <init>= <expr><call><name>PyObject_New</name><argument_list>(<argument><expr><name>DBLockObject</name></expr></argument>, <argument><expr>&amp;<name>DBLock_Type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>in_weakreflist</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>myenv</name>-&gt;<name>db_env</name>-&gt;<name>lock_get</name></name><argument_list>(<argument><expr><name><name>myenv</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>locker</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>lock_mode</name></expr></argument>,
                                  <argument><expr>&amp;<name><name>self</name>-&gt;<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>makeDBError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>self</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>self</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>DBLock_dealloc</name><parameter_list>(<param><decl><type><name>DBLockObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>in_weakreflist</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyObject_ClearWeakRefs</name><argument_list>(<argument><expr>(<name>PyObject</name> *) <name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <comment type="block">/* TODO: is this lock held? should we release it? */</comment>

    <expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
<function><type><specifier>static</specifier> <name>DBSequenceObject</name>*</type>
<name>newDBSequenceObject</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>mydb</name></decl></param>,  <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBSequenceObject</name>*</type> <name>self</name> <init>= <expr><call><name>PyObject_New</name><argument_list>(<argument><expr><name>DBSequenceObject</name></expr></argument>, <argument><expr>&amp;<name>DBSequence_Type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>mydb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>mydb</name></name> = <name>mydb</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>INSERT_IN_DOUBLE_LINKED_LIST</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mydb</name>-&gt;<name>children_sequences</name></name></expr></argument>,<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>txn</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>in_weakreflist</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name>db_sequence_create</name><argument_list>(<argument><expr>&amp;<name><name>self</name>-&gt;<name>sequence</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>mydb</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>makeDBError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>self</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>self</name></expr>;</return>
}</block></function>

<comment type="block">/* Forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <name>PyObject</name>
*</type><name>DBSequence_close_internal</name><parameter_list>(<param><decl><type><name>DBSequenceObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>, <param><decl><type><name>int</name></type> <name>do_not_close</name></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DBSequence_dealloc</name><parameter_list>(<param><decl><type><name>DBSequenceObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>dummy</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>sequence</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>dummy</name>=<call><name>DBSequence_close_internal</name><argument_list>(<argument><expr><name>self</name></expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
        ** Raising exceptions while doing
        ** garbage collection is a fatal error.
        */</comment>
        <if>if <condition>(<expr><name>dummy</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>in_weakreflist</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyObject_ClearWeakRefs</name><argument_list>(<argument><expr>(<name>PyObject</name> *) <name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mydb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/* DB methods */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_append</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>dataobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>db_recno_t</name></type> <name>recno</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"data"</expr>, <expr>"txn"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"O|O:append"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
                                     <argument><expr>&amp;<name>dataobj</name></expr></argument>, <argument><expr>&amp;<name>txnobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* make a dummy key out of a recno */</comment>
    <expr_stmt><expr><name>recno</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name>.<name>data</name></name> = &amp;<name>recno</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name>.<name>size</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>recno</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name>.<name>ulen</name></name> = <name><name>key</name>.<name>size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name>.<name>flags</name></name> = <name>DB_DBT_USERMEM</name></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>make_dbt</name><argument_list>(<argument><expr><name>dataobj</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr>-1 == <call><name>_DB_put</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>DB_APPEND</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr><name>recno</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>_db_associateCallback</name><parameter_list>(<param><decl><type><name>DB</name>*</type> <name>db</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>DBT</name>*</type> <name>priKey</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>DBT</name>*</type> <name>priData</name></decl></param>,
                      <param><decl><type><name>DBT</name>*</type> <name>secKey</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type>       <name>retval</name> <init>= <expr><name>DB_DONOTINDEX</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBObject</name>*</type> <name>secondaryDB</name> <init>= <expr>(<name>DBObject</name>*)<name><name>db</name>-&gt;<name>app_private</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>callback</name> <init>= <expr><name><name>secondaryDB</name>-&gt;<name>associateCallback</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>       <name>type</name> <init>= <expr><name><name>secondaryDB</name>-&gt;<name>primaryDBType</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>args</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


    <if>if <condition>(<expr><name>callback</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>MYDB_BEGIN_BLOCK_THREADS</name></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>type</name> == <name>DB_RECNO</name> || <name>type</name> == <name>DB_QUEUE</name></expr>)</condition><then>
            <expr_stmt><expr><name>args</name> = <call><name>BuildValue_LS</name><argument_list>(<argument><expr>*((<name>db_recno_t</name>*)<name><name>priKey</name>-&gt;<name>data</name></name>)</expr></argument>, <argument><expr><name><name>priData</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>priData</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name>args</name> = <call><name>BuildValue_SS</name><argument_list>(<argument><expr><name><name>priKey</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>priKey</name>-&gt;<name>size</name></name></expr></argument>, <argument><expr><name><name>priData</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>priData</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        <if>if <condition>(<expr><name>args</name> != <name>NULL</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <call><name>PyEval_CallObject</name><argument_list>(<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>args</name> == <name>NULL</name> || <name>result</name> == <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>result</name> == <name>Py_None</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>retval</name> = <name>DB_DONOTINDEX</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name>NUMBER_Check</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>retval</name> = <call><name>NUMBER_AsLong</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name>PyBytes_Check</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>char</name>*</type> <name>data</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr>*<name>secKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PyBytes_AsStringAndSize</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>secKey</name>-&gt;<name>flags</name></name> = <name>DB_DBT_APPMALLOC</name></expr>;</expr_stmt>   <comment type="block">/* DB will free */</comment>
            <expr_stmt><expr><name><name>secKey</name>-&gt;<name>data</name></name> = <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block">/* TODO, check this */</comment>
	    <if>if <condition>(<expr><name><name>secKey</name>-&gt;<name>data</name></name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>secKey</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>secKey</name>-&gt;<name>size</name></name> = <name>size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> = 0</expr>;</expr_stmt>
	    }</block></then>
	    <else>else <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_MemoryError</name></expr></argument>,
                                <argument><expr>"malloc failed in _db_associateCallback"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    }</block></else></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
               <argument><expr><name>PyExc_TypeError</name></expr></argument>,
               <argument><expr>"DB associate callback should return DB_DONOTINDEX or string."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if></else></if></else></if>

        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>MYDB_END_BLOCK_THREADS</name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_associate</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBObject</name>*</type> <name>secondaryDB</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>callback</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 41)</expr></cpp:if>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{<expr>"secondaryDB"</expr>, <expr>"callback"</expr>, <expr>"flags"</expr>, <expr>"txn"</expr>,
                                    <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{<expr>"secondaryDB"</expr>, <expr>"callback"</expr>, <expr>"flags"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 41)</expr></cpp:if>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"OO|iO:associate"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
                                     <argument><expr>&amp;<name>secondaryDB</name></expr></argument>, <argument><expr>&amp;<name>callback</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>,
                                     <argument><expr>&amp;<name>txnobj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"OO|i:associate"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
                                     <argument><expr>&amp;<name>secondaryDB</name></expr></argument>, <argument><expr>&amp;<name>callback</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 41)</expr></cpp:if>
    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>DBObject_Check</name><argument_list>(<argument><expr><name>secondaryDB</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>makeTypeError</name><argument_list>(<argument><expr>"DB"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>secondaryDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>secondaryDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>callback</name> == <name>Py_None</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>callback</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>PyCallable_Check</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>makeTypeError</name><argument_list>(<argument><expr>"Callable"</expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if></else></if>

    <comment type="block">/* Save a reference to the callback in the secondary DB. */</comment>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>secondaryDB</name>-&gt;<name>associateCallback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>secondaryDB</name>-&gt;<name>associateCallback</name></name> = <name>callback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>secondaryDB</name>-&gt;<name>primaryDBType</name></name> = <call><name>_DB_get_type</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* PyEval_InitThreads is called here due to a quirk in python 1.5
     * - 2.2.1 (at least) according to Russell Williamson &lt;merel@wt.net&gt;:
     * The global interepreter lock is not initialized until the first
     * thread is created using thread.start_new_thread() or fork() is
     * called.  that would cause the ALLOW_THREADS here to segfault due
     * to a null pointer reference if no threads or child processes
     * have been created.  This works around that and is a no-op if
     * threads have already been initialized.
     *  (see pybsddb-users mailing list post on 2002-08-07)
     */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WITH_THREAD</name></cpp:ifdef>
    <expr_stmt><expr><call><name>PyEval_InitThreads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 41)</expr></cpp:if>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>associate</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>,
	                      <argument><expr><name>txn</name></expr></argument>,
                              <argument><expr><name><name>secondaryDB</name>-&gt;<name>db</name></name></expr></argument>,
                              <argument><expr><name>_db_associateCallback</name></expr></argument>,
                              <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>associate</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>,
                              <argument><expr><name><name>secondaryDB</name>-&gt;<name>db</name></name></expr></argument>,
                              <argument><expr><name>_db_associateCallback</name></expr></argument>,
                              <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>secondaryDB</name>-&gt;<name>associateCallback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>secondaryDB</name>-&gt;<name>associateCallback</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>secondaryDB</name>-&gt;<name>primaryDBType</name></name> = 0</expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_close_internal</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>, <param><decl><type><name>int</name></type> <name>do_not_close</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>dummy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>db</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* Can be NULL if db is not in an environment */</comment>
        <expr_stmt><expr><call><name>EXTRACT_FROM_DOUBLE_LINKED_LIST_MAYBE_NULL</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>self</name>-&gt;<name>txn</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>EXTRACT_FROM_DOUBLE_LINKED_LIST_TXN</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name>-&gt;<name>txn</name></name>=<name>NULL</name></expr>;</expr_stmt>
        }</block></then></if>

        <while>while<condition>(<expr><name><name>self</name>-&gt;<name>children_cursors</name></name></expr>)</condition> <block>{
          <expr_stmt><expr><name>dummy</name>=<call><name>DBC_close_internal</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>children_cursors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
        <while>while<condition>(<expr><name><name>self</name>-&gt;<name>children_sequences</name></name></expr>)</condition> <block>{
            <expr_stmt><expr><name>dummy</name>=<call><name>DBSequence_close_internal</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>children_sequences</name></name></expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="block">/*
        ** "do_not_close" is used to dispose all related objects in the
        ** tree, without actually releasing the "root" object.
        ** This is done, for example, because function calls like
        ** "DB.verify()" implicitly close the underlying handle. So
        ** the handle doesn't need to be closed, but related objects
        ** must be cleaned up.
        */</comment>
        <if>if <condition>(<expr>!<name>do_not_close</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>close</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name>-&gt;<name>db</name></name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_close</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"|i:close"</expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><call><name>DB_close_internal</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>_DB_consume</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>, <param><decl><type><name>int</name></type> <name>consume_flag</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init>, <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>retval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"txn"</expr>, <expr>"flags"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"|Oi:consume"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
                                     <argument><expr>&amp;<name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>type</name> = <call><name>_DB_get_type</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>type</name> == -1</expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name>type</name> != <name>DB_QUEUE</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                        <argument><expr>"Consume methods only allowed for Queue DB's"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>CHECK_DBFLAG</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>DB_THREAD</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* Tell Berkeley DB to malloc the return value (thread safe) */</comment>
        <expr_stmt><expr><name><name>data</name>.<name>flags</name></name> = <name>DB_DBT_MALLOC</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>key</name>.<name>flags</name></name> = <name>DB_DBT_MALLOC</name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>get</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>flags</name>|<name>consume_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <if>if <condition>(<expr>(<name>err</name> == <name>DB_NOTFOUND</name> || <name>err</name> == <name>DB_KEYEMPTY</name>)
	    &amp;&amp; <name><name>self</name>-&gt;<name>moduleFlags</name>.<name>getReturnsNone</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retval</name> = <name>Py_None</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<name>err</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>retval</name> = <call><name>BuildValue_SS</name><argument_list>(<argument><expr><name><name>key</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>key</name>.<name>size</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_consume</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>, <param><decl><type><name>int</name></type> <name>consume_flag</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>_DB_consume</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><name>DB_CONSUME</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_consume_wait</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>,
                <param><decl><type><name>int</name></type> <name>consume_flag</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>_DB_consume</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><name>DB_CONSUME_WAIT</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_cursor</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBC</name>*</type> <name>dbc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"txn"</expr>, <expr>"flags"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"|Oi:cursor"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
                                     <argument><expr>&amp;<name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>cursor</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>&amp;<name>dbc</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>(<name>PyObject</name>*) <call><name>newDBCursorObject</name><argument_list>(<argument><expr><name>dbc</name></expr></argument>, <argument><expr>(<name>DBTxnObject</name> *)<name>txnobj</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_delete</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>keyobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"key"</expr>, <expr>"txn"</expr>, <expr>"flags"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"O|Oi:delete"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
                                     <argument><expr>&amp;<name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>make_key_dbt</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>-1 == <call><name>_DB_delete</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_fd</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>the_fd</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>fd</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr>&amp;<name>the_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr><name>the_fd</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_get</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>keyobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>dfltobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>retval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dlen</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>doff</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{<expr>"key"</expr>, <expr>"default"</expr>, <expr>"txn"</expr>, <expr>"flags"</expr>, <expr>"dlen"</expr>,
                                    <expr>"doff"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"O|OOiii:get"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
                                     <argument><expr>&amp;<name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>dfltobj</name></expr></argument>, <argument><expr>&amp;<name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>dlen</name></expr></argument>,
                                     <argument><expr>&amp;<name>doff</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>make_key_dbt</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>CHECK_DBFLAG</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>DB_THREAD</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* Tell Berkeley DB to malloc the return value (thread safe) */</comment>
        <expr_stmt><expr><name><name>data</name>.<name>flags</name></name> = <name>DB_DBT_MALLOC</name></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr>!<call><name>add_partial_dbt</name><argument_list>(<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>doff</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>get</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <if>if <condition>(<expr>(<name>err</name> == <name>DB_NOTFOUND</name> || <name>err</name> == <name>DB_KEYEMPTY</name>) &amp;&amp; (<name>dfltobj</name> != <name>NULL</name>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>dfltobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retval</name> = <name>dfltobj</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>(<name>err</name> == <name>DB_NOTFOUND</name> || <name>err</name> == <name>DB_KEYEMPTY</name>)
	     &amp;&amp; <name><name>self</name>-&gt;<name>moduleFlags</name>.<name>getReturnsNone</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retval</name> = <name>Py_None</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<name>err</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>flags</name> &amp; <name>DB_SET_RECNO</name></expr>)</condition><then> <comment type="block">/* return both key and data */</comment>
            <expr_stmt><expr><name>retval</name> = <call><name>BuildValue_SS</name><argument_list>(<argument><expr><name><name>key</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>key</name>.<name>size</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else <comment type="block">/* return just the data */</comment>
            <expr_stmt><expr><name>retval</name> = <call><name>Build_PyString</name><argument_list>(<argument><expr><name><name>data</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if></else></if>
    <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_pget</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>keyobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>dfltobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>retval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dlen</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>doff</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>pkey</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{<expr>"key"</expr>, <expr>"default"</expr>, <expr>"txn"</expr>, <expr>"flags"</expr>, <expr>"dlen"</expr>,
                                    <expr>"doff"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"O|OOiii:pget"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
                                     <argument><expr>&amp;<name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>dfltobj</name></expr></argument>, <argument><expr>&amp;<name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>dlen</name></expr></argument>,
                                     <argument><expr>&amp;<name>doff</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>make_key_dbt</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>CHECK_DBFLAG</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>DB_THREAD</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* Tell Berkeley DB to malloc the return value (thread safe) */</comment>
        <expr_stmt><expr><name><name>data</name>.<name>flags</name></name> = <name>DB_DBT_MALLOC</name></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr>!<call><name>add_partial_dbt</name><argument_list>(<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>doff</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pkey</name>.<name>flags</name></name> = <name>DB_DBT_MALLOC</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>pget</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>pkey</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <if>if <condition>(<expr>(<name>err</name> == <name>DB_NOTFOUND</name> || <name>err</name> == <name>DB_KEYEMPTY</name>) &amp;&amp; (<name>dfltobj</name> != <name>NULL</name>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>dfltobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retval</name> = <name>dfltobj</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>(<name>err</name> == <name>DB_NOTFOUND</name> || <name>err</name> == <name>DB_KEYEMPTY</name>)
	     &amp;&amp; <name><name>self</name>-&gt;<name>moduleFlags</name>.<name>getReturnsNone</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retval</name> = <name>Py_None</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<name>err</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>pkeyObj</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>dataObj</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>dataObj</name> = <call><name>Build_PyString</name><argument_list>(<argument><expr><name><name>data</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>self</name>-&gt;<name>primaryDBType</name></name> == <name>DB_RECNO</name> ||
            <name><name>self</name>-&gt;<name>primaryDBType</name></name> == <name>DB_QUEUE</name></expr>)</condition><then>
            <expr_stmt><expr><name>pkeyObj</name> = <call><name>NUMBER_FromLong</name><argument_list>(<argument><expr>*(<name>int</name> *)<name><name>pkey</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name>pkeyObj</name> = <call><name>Build_PyString</name><argument_list>(<argument><expr><name><name>pkey</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>pkey</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

        <if>if <condition>(<expr><name>flags</name> &amp; <name>DB_SET_RECNO</name></expr>)</condition><then> <comment type="block">/* return key , pkey and data */</comment>
        <block>{
            <decl_stmt><decl><type><name>PyObject</name> *</type><name>keyObj</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>_DB_get_type</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>type</name> == <name>DB_RECNO</name> || <name>type</name> == <name>DB_QUEUE</name></expr>)</condition><then>
                <expr_stmt><expr><name>keyObj</name> = <call><name>NUMBER_FromLong</name><argument_list>(<argument><expr>*(<name>int</name> *)<name><name>key</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><name>keyObj</name> = <call><name>Build_PyString</name><argument_list>(<argument><expr><name><name>key</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>key</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &gt;= 0x02040000)</expr></cpp:if>
            <expr_stmt><expr><name>retval</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><name>keyObj</name></expr></argument>, <argument><expr><name>pkeyObj</name></expr></argument>, <argument><expr><name>dataObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <expr_stmt><expr><name>retval</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"OOO"</expr></argument>, <argument><expr><name>keyObj</name></expr></argument>, <argument><expr><name>pkeyObj</name></expr></argument>, <argument><expr><name>dataObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keyObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <comment type="block">/* return just the pkey and data */</comment>
        <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &gt;= 0x02040000)</expr></cpp:if>
            <expr_stmt><expr><name>retval</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>pkeyObj</name></expr></argument>, <argument><expr><name>dataObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <expr_stmt><expr><name>retval</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"OO"</expr></argument>, <argument><expr><name>pkeyObj</name></expr></argument>, <argument><expr><name>dataObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        }</block></else></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dataObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pkeyObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if></else></if>
    <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>


<comment type="block">/* Return size of entry */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_get_size</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>keyobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>retval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"key"</expr>, <expr>"txn"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"O|O:get_size"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
                                     <argument><expr>&amp;<name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>txnobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>make_key_dbt</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* We don't allocate any memory, forcing a DB_BUFFER_SMALL error and
       thus getting the record size. */</comment>
    <expr_stmt><expr><name><name>data</name>.<name>flags</name></name> = <name>DB_DBT_USERMEM</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name>.<name>ulen</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>get</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> == <name>DB_BUFFER_SMALL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>retval</name> = <call><name>NUMBER_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> = 0</expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_get_both</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>keyobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>dataobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>retval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> *</type><name>orig_data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"key"</expr>, <expr>"data"</expr>, <expr>"txn"</expr>, <expr>"flags"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"OO|Oi:get_both"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
                                     <argument><expr>&amp;<name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>dataobj</name></expr></argument>, <argument><expr>&amp;<name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>make_key_dbt</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>( <expr>!<call><name>make_dbt</name><argument_list>(<argument><expr><name>dataobj</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call> ||
         !<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr> )</condition><then>
    <block>{
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>flags</name> |= <name>DB_GET_BOTH</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>orig_data</name> = <name><name>data</name>.<name>data</name></name></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>CHECK_DBFLAG</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>DB_THREAD</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* Tell Berkeley DB to malloc the return value (thread safe) */</comment>
        <comment type="block">/* XXX(nnorwitz): At least 4.4.20 and 4.5.20 require this flag. */</comment>
        <expr_stmt><expr><name><name>data</name>.<name>flags</name></name> = <name>DB_DBT_MALLOC</name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>get</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <if>if <condition>(<expr>(<name>err</name> == <name>DB_NOTFOUND</name> || <name>err</name> == <name>DB_KEYEMPTY</name>)
	    &amp;&amp; <name><name>self</name>-&gt;<name>moduleFlags</name>.<name>getReturnsNone</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retval</name> = <name>Py_None</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<name>err</name></expr>)</condition><then> <block>{
        <comment type="block">/* XXX(nnorwitz): can we do: retval = dataobj; Py_INCREF(retval); */</comment>
        <expr_stmt><expr><name>retval</name> = <call><name>Build_PyString</name><argument_list>(<argument><expr><name><name>data</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Even though the flags require DB_DBT_MALLOC, data is not always
           allocated.  4.4: allocated, 4.5: *not* allocated. :-( */</comment>
        <if>if <condition>(<expr><name><name>data</name>.<name>data</name></name> != <name>orig_data</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if></else></if>

    <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_get_byteswapped</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>get_byteswapped</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr>&amp;<name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_get_type</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>type</name> = <call><name>_DB_get_type</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>type</name> == -1</expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_join</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>cursorsObj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBC</name>**</type> <name>cursors</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBC</name>*</type>  <name>dbc</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"O|i:join"</expr></argument>, <argument><expr>&amp;<name>cursorsObj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>PySequence_Check</name><argument_list>(<argument><expr><name>cursorsObj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                        <argument><expr>"Sequence of DBCursor objects expected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>length</name> = <call><name>PyObject_Length</name><argument_list>(<argument><expr><name>cursorsObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cursors</name> = <call><name>malloc</name><argument_list>(<argument><expr>(<name>length</name>+1) * <sizeof>sizeof<argument_list>(<argument><expr><name>DBC</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>cursors</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>cursors</name><index>[<expr><name>length</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
    <for>for (<init><expr><name>x</name>=0</expr>;</init> <condition><expr><name>x</name>&lt;<name>length</name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>item</name> <init>= <expr><call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>cursorsObj</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>item</name> == <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cursors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>DBCursorObject_Check</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                            <argument><expr>"Sequence of DBCursor objects expected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cursors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name><name>cursors</name><index>[<expr><name>x</name></expr>]</index></name> = ((<name>DBCursorObject</name>*)<name>item</name>)-&gt;<name>dbc</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>join</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>cursors</name></expr></argument>, <argument><expr>&amp;<name>dbc</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cursors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* FIXME: this is a buggy interface.  The returned cursor
       contains internal references to the passed in cursors
       but does not hold python references to them or prevent
       them from being closed prematurely.  This can cause
       python to crash when things are done in the wrong order. */</comment>
    <return>return <expr>(<name>PyObject</name>*) <call><name>newDBCursorObject</name><argument_list>(<argument><expr><name>dbc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_key_range</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>keyobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_KEY_RANGE</name></type> <name>range</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"key"</expr>, <expr>"txn"</expr>, <expr>"flags"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"O|Oi:key_range"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
                                     <argument><expr>&amp;<name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>make_dbt</name><argument_list>(<argument><expr><name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <comment type="block">/* BTree only, don't need to allow for an int key */</comment>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>key_range</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>range</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ddd"</expr></argument>, <argument><expr><name><name>range</name>.<name>less</name></name></expr></argument>, <argument><expr><name><name>range</name>.<name>equal</name></name></expr></argument>, <argument><expr><name><name>range</name>.<name>greater</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_open</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>type</name> <init>= <expr><name>DB_UNKNOWN</name></expr></init>, <name>flags</name><init>=<expr>0</expr></init>, <name>mode</name><init>=<expr>0660</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>*</type> <name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>*</type> <name>dbname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 41)</expr></cpp:if>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* with dbname */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{
        <expr>"filename"</expr>, <expr>"dbname"</expr>, <expr>"dbtype"</expr>, <expr>"flags"</expr>, <expr>"mode"</expr>, <expr>"txn"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <comment type="block">/* without dbname */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames_basic</name><index>[]</index></name> <init>= <expr><block>{
        <expr>"filename"</expr>, <expr>"dbtype"</expr>, <expr>"flags"</expr>, <expr>"mode"</expr>, <expr>"txn"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* with dbname */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{
        <expr>"filename"</expr>, <expr>"dbname"</expr>, <expr>"dbtype"</expr>, <expr>"flags"</expr>, <expr>"mode"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <comment type="block">/* without dbname */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames_basic</name><index>[]</index></name> <init>= <expr><block>{
        <expr>"filename"</expr>, <expr>"dbtype"</expr>, <expr>"flags"</expr>, <expr>"mode"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 41)</expr></cpp:if>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"z|ziiiO:open"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
				     <argument><expr>&amp;<name>filename</name></expr></argument>, <argument><expr>&amp;<name>dbname</name></expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>,
                                     <argument><expr>&amp;<name>txnobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"z|ziii:open"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
				     <argument><expr>&amp;<name>filename</name></expr></argument>, <argument><expr>&amp;<name>dbname</name></expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>,
                                     <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{
	<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>type</name> = <name>DB_UNKNOWN</name></expr>;</expr_stmt> <expr_stmt><expr><name>flags</name> = 0</expr>;</expr_stmt> <expr_stmt><expr><name>mode</name> = 0660</expr>;</expr_stmt>
	<expr_stmt><expr><name>filename</name> = <name>NULL</name></expr>;</expr_stmt> <expr_stmt><expr><name>dbname</name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 41)</expr></cpp:if>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>,<argument><expr>"z|iiiO:open"</expr></argument>,
                                         <argument><expr><name>kwnames_basic</name></expr></argument>,
					 <argument><expr>&amp;<name>filename</name></expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>,
                                         <argument><expr>&amp;<name>txnobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	    <return>return <expr><name>NULL</name></expr>;</return></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>,<argument><expr>"z|iii:open"</expr></argument>,
                                         <argument><expr><name>kwnames_basic</name></expr></argument>,
					 <argument><expr>&amp;<name>filename</name></expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	    <return>return <expr><name>NULL</name></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then></if></then></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 41)</expr></cpp:if>
    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr><name>NULL</name> == <name><name>self</name>-&gt;<name>db</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>t</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(is)"</expr></argument>, <argument><expr>0</expr></argument>,
                                <argument><expr>"Cannot call open() twice for DB object"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>t</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>DBError</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 41)</expr></cpp:if>
    <if>if <condition>(<expr><name>txn</name></expr>)</condition><then> <block>{  <comment type="block">/* Can't use 'txnobj' because could be 'txnobj==Py_None' */</comment>
        <expr_stmt><expr><call><name>INSERT_IN_DOUBLE_LINKED_LIST_TXN</name><argument_list>(<argument><expr>((<name>DBTxnObject</name> *)<name>txnobj</name>)-&gt;<name>children_dbs</name></expr></argument>,<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>txn</name></name>=(<name>DBTxnObject</name> *)<name>txnobj</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name><name>self</name>-&gt;<name>txn</name></name>=<name>NULL</name></expr>;</expr_stmt>
    }</block></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>txn</name></name>=<name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 41)</expr></cpp:if>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>open</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>open</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>makeDBError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>dummy</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>dummy</name>=<call><name>DB_close_internal</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 42)</expr></cpp:if>
    <expr_stmt><expr><call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>get_flags</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>setflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>flags</name></name> = <name>flags</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_put</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dlen</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>doff</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>keyobj</name></decl>, *<decl><type ref="prev"/><name>dataobj</name></decl>, *<decl><type ref="prev"/><name>retval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"key"</expr>, <expr>"data"</expr>, <expr>"txn"</expr>, <expr>"flags"</expr>, <expr>"dlen"</expr>,
                                     <expr>"doff"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"OO|Oiii:put"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
                         <argument><expr>&amp;<name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>dataobj</name></expr></argument>, <argument><expr>&amp;<name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>dlen</name></expr></argument>, <argument><expr>&amp;<name>doff</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>make_key_dbt</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>( <expr>!<call><name>make_dbt</name><argument_list>(<argument><expr><name>dataobj</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call> ||
         !<call><name>add_partial_dbt</name><argument_list>(<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>doff</name></expr></argument>)</argument_list></call> ||
         !<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr> )</condition><then>
    <block>{
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>-1 == <call><name>_DB_put</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>flags</name> &amp; <name>DB_APPEND</name></expr>)</condition><then>
        <expr_stmt><expr><name>retval</name> = <call><name>NUMBER_FromLong</name><argument_list>(<argument><expr>*((<name>db_recno_t</name>*)<name><name>key</name>.<name>data</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <block>{
        <expr_stmt><expr><name>retval</name> = <name>Py_None</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>



<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_remove</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name>*</type> <name>filename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>*</type> <name>database</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"filename"</expr>, <expr>"dbname"</expr>, <expr>"flags"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"s|zi:remove"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
                                     <argument><expr>&amp;<name>filename</name></expr></argument>, <argument><expr>&amp;<name>database</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>EXTRACT_FROM_DOUBLE_LINKED_LIST_MAYBE_NULL</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>remove</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>db</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>



<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_rename</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name>*</type> <name>filename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>*</type> <name>database</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>*</type> <name>newname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"sss|i:rename"</expr></argument>, <argument><expr>&amp;<name>filename</name></expr></argument>, <argument><expr>&amp;<name>database</name></expr></argument>, <argument><expr>&amp;<name>newname</name></expr></argument>,
                          <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>rename</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_get_private</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* We can give out the private field even if db is closed */</comment>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>private_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>self</name>-&gt;<name>private_obj</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_set_private</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>private_obj</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* We can set the private field even if db is closed */</comment>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>private_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>private_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>private_obj</name></name> = <name>private_obj</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_set_bt_minkey</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>minkey</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i:set_bt_minkey"</expr></argument>, <argument><expr>&amp;<name>minkey</name></expr></argument> )</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>set_bt_minkey</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>minkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_default_cmp</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>DBT</name> *</type><name>leftKey</name></decl></param>,
	     <param><decl><type><specifier>const</specifier> <name>DBT</name> *</type><name>rightKey</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>lsize</name> <init>= <expr><name><name>leftKey</name>-&gt;<name>size</name></name></expr></init>, <name>rsize</name> <init>= <expr><name><name>rightKey</name>-&gt;<name>size</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>res</name> = <call><name>memcmp</name><argument_list>(<argument><expr><name><name>leftKey</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>rightKey</name>-&gt;<name>data</name></name></expr></argument>,
	       <argument><expr><name>lsize</name> &lt; <name>rsize</name> ? <name>lsize</name> : <name>rsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>res</name> == 0</expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>lsize</name> &lt; <name>rsize</name></expr>)</condition><then> <block>{
	  <expr_stmt><expr><name>res</name> = -1</expr>;</expr_stmt>
      }</block></then>
      <else>else <if>if <condition>(<expr><name>lsize</name> &gt; <name>rsize</name></expr>)</condition><then> <block>{
	  <expr_stmt><expr><name>res</name> = 1</expr>;</expr_stmt>
      }</block></then></if></else></if>
  }</block></then></if>
  <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_db_compareCallback</name><parameter_list>(<param><decl><type><name>DB</name>*</type> <name>db</name></decl></param>,
		    <param><decl><type><specifier>const</specifier> <name>DBT</name> *</type><name>leftKey</name></decl></param>,
		    <param><decl><type><specifier>const</specifier> <name>DBT</name> *</type><name>rightKey</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBObject</name> *</type><name>self</name> <init>= <expr>(<name>DBObject</name> *)<name><name>db</name>-&gt;<name>app_private</name></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>self</name> == <name>NULL</name> || <name><name>self</name>-&gt;<name>btCompareCallback</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>MYDB_BEGIN_BLOCK_THREADS</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
			<argument><expr>(<name>self</name> == 0
			 ? "DB_bt_compare db is NULL."
			 : "DB_bt_compare callback is NULL.")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* we're in a callback within the DB code, we can't raise */</comment>
	<expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> = <call><name>_default_cmp</name><argument_list>(<argument><expr><name>leftKey</name></expr></argument>, <argument><expr><name>rightKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>MYDB_END_BLOCK_THREADS</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><name>MYDB_BEGIN_BLOCK_THREADS</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>args</name> = <call><name>BuildValue_SS</name><argument_list>(<argument><expr><name><name>leftKey</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>leftKey</name>-&gt;<name>size</name></name></expr></argument>, <argument><expr><name><name>rightKey</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>rightKey</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>args</name> != <name>NULL</name></expr>)</condition><then> <block>{
		<comment type="block">/* XXX(twouters) I highly doubt this INCREF is correct */</comment>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> = <call><name>PyEval_CallObject</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>btCompareCallback</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if>if <condition>(<expr><name>args</name> == <name>NULL</name> || <name>result</name> == <name>NULL</name></expr>)</condition><then> <block>{
	    <comment type="block">/* we're in a callback within the DB code, we can't raise */</comment>
	    <expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>res</name> = <call><name>_default_cmp</name><argument_list>(<argument><expr><name>leftKey</name></expr></argument>, <argument><expr><name>rightKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <if>if <condition>(<expr><call><name>NUMBER_Check</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>res</name> = <call><name>NUMBER_AsLong</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
	    <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
			    <argument><expr>"DB_bt_compare callback MUST return an int."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <comment type="block">/* we're in a callback within the DB code, we can't raise */</comment>
	    <expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>res</name> = <call><name>_default_cmp</name><argument_list>(<argument><expr><name>leftKey</name></expr></argument>, <argument><expr><name>rightKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if></else></if>

	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>MYDB_END_BLOCK_THREADS</name></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_set_bt_compare</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>comparator</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>tuple</name></decl>, *<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>PyCallable_Check</name><argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>makeTypeError</name><argument_list>(<argument><expr>"Callable"</expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * Perform a test call of the comparator function with two empty
     * string objects here.  verify that it returns an int (0).
     * err if not.
     */</comment>
    <expr_stmt><expr><name>tuple</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(ss)"</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> = <call><name>PyEval_CallObject</name><argument_list>(<argument><expr><name>comparator</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>NUMBER_Check</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
		        <argument><expr>"callback MUST return an int"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>NUMBER_AsLong</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
		        <argument><expr>"callback failed to return 0 on two empty strings"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if></else></if>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* We don't accept multiple set_bt_compare operations, in order to
     * simplify the code. This would have no real use, as one cannot
     * change the function once the db is opened anyway */</comment>
    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>btCompareCallback</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>, <argument><expr>"set_bt_compare() cannot be called more than once"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>btCompareCallback</name></name> = <name>comparator</name></expr>;</expr_stmt>

    <comment type="block">/* This is to workaround a problem with un-initialized threads (see
       comment in DB_associate) */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WITH_THREAD</name></cpp:ifdef>
    <expr_stmt><expr><call><name>PyEval_InitThreads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>set_bt_compare</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>_db_compareCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
	<comment type="block">/* restore the old state in case of error */</comment>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name>-&gt;<name>btCompareCallback</name></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_set_cachesize</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>gbytes</name> <init>= <expr>0</expr></init>, <name>bytes</name> <init>= <expr>0</expr></init>, <name>ncache</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ii|i:set_cachesize"</expr></argument>,
                          <argument><expr>&amp;<name>gbytes</name></expr></argument>,<argument><expr>&amp;<name>bytes</name></expr></argument>,<argument><expr>&amp;<name>ncache</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>set_cachesize</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>gbytes</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>ncache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_set_flags</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i:set_flags"</expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>set_flags</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>setflags</name></name> |= <name>flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_set_h_ffactor</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>ffactor</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i:set_h_ffactor"</expr></argument>, <argument><expr>&amp;<name>ffactor</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>set_h_ffactor</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>ffactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_set_h_nelem</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>nelem</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i:set_h_nelem"</expr></argument>, <argument><expr>&amp;<name>nelem</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>set_h_nelem</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>nelem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_set_lorder</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>lorder</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i:set_lorder"</expr></argument>, <argument><expr>&amp;<name>lorder</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>set_lorder</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>lorder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_set_pagesize</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>pagesize</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i:set_pagesize"</expr></argument>, <argument><expr>&amp;<name>pagesize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>set_pagesize</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>pagesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_set_re_delim</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>delim</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"b:set_re_delim"</expr></argument>, <argument><expr>&amp;<name>delim</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"c:set_re_delim"</expr></argument>, <argument><expr>&amp;<name>delim</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>set_re_delim</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_set_re_len</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i:set_re_len"</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>set_re_len</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_set_re_pad</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>pad</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"b:set_re_pad"</expr></argument>, <argument><expr>&amp;<name>pad</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"c:set_re_pad"</expr></argument>, <argument><expr>&amp;<name>pad</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
    }</block></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>set_re_pad</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_set_re_source</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>re_source</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"s:set_re_source"</expr></argument>, <argument><expr>&amp;<name>re_source</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>set_re_source</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>re_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_set_q_extentsize</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>extentsize</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i:set_q_extentsize"</expr></argument>, <argument><expr>&amp;<name>extentsize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>set_q_extentsize</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>extentsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_stat</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr>0</expr></init>, <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>*</type> <name>sp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>d</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"flags"</expr>, <expr>"txn"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"flags"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"|iO:stat"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
                                     <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>txnobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"|i:stat"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>stat</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>&amp;<name>sp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>stat</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr>&amp;<name>sp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>haveStat</name></name> = 1</expr>;</expr_stmt>

    <comment type="block">/* Turn the stat structure into a dictionary */</comment>
    <expr_stmt><expr><name>type</name> = <call><name>_DB_get_type</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name>type</name> == -1) || ((<name>d</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call>) == <name>NULL</name>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_HASH_ENTRY</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>_addIntToDict(d, #name, ((DB_HASH_STAT*)sp)-&gt;hash_##name)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_BT_ENTRY</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>_addIntToDict(d, #name, ((DB_BTREE_STAT*)sp)-&gt;bt_##name)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_QUEUE_ENTRY</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_addIntToDict(d, #name, ((DB_QUEUE_STAT*)sp)-&gt;qs_##name)</cpp:value></cpp:define>

    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
    <case>case <expr><name>DB_HASH</name></expr>:
        <expr_stmt><expr><call><name>MAKE_HASH_ENTRY</name><argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_HASH_ENTRY</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_HASH_ENTRY</name><argument_list>(<argument><expr><name>nkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_HASH_ENTRY</name><argument_list>(<argument><expr><name>ndata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 46)</expr></cpp:if>
        <expr_stmt><expr><call><name>MAKE_HASH_ENTRY</name><argument_list>(<argument><expr><name>pagecnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>MAKE_HASH_ENTRY</name><argument_list>(<argument><expr><name>pagesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &lt; 41)</expr></cpp:if>
        <expr_stmt><expr><call><name>MAKE_HASH_ENTRY</name><argument_list>(<argument><expr><name>nelem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>MAKE_HASH_ENTRY</name><argument_list>(<argument><expr><name>ffactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_HASH_ENTRY</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_HASH_ENTRY</name><argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_HASH_ENTRY</name><argument_list>(<argument><expr><name>bfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_HASH_ENTRY</name><argument_list>(<argument><expr><name>bigpages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_HASH_ENTRY</name><argument_list>(<argument><expr><name>big_bfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_HASH_ENTRY</name><argument_list>(<argument><expr><name>overflows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_HASH_ENTRY</name><argument_list>(<argument><expr><name>ovfl_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_HASH_ENTRY</name><argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_HASH_ENTRY</name><argument_list>(<argument><expr><name>dup_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

    </case><case>case <expr><name>DB_BTREE</name></expr>:
    </case><case>case <expr><name>DB_RECNO</name></expr>:
        <expr_stmt><expr><call><name>MAKE_BT_ENTRY</name><argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_BT_ENTRY</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_BT_ENTRY</name><argument_list>(<argument><expr><name>nkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_BT_ENTRY</name><argument_list>(<argument><expr><name>ndata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 46)</expr></cpp:if>
        <expr_stmt><expr><call><name>MAKE_BT_ENTRY</name><argument_list>(<argument><expr><name>pagecnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>MAKE_BT_ENTRY</name><argument_list>(<argument><expr><name>pagesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_BT_ENTRY</name><argument_list>(<argument><expr><name>minkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_BT_ENTRY</name><argument_list>(<argument><expr><name>re_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_BT_ENTRY</name><argument_list>(<argument><expr><name>re_pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_BT_ENTRY</name><argument_list>(<argument><expr><name>levels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_BT_ENTRY</name><argument_list>(<argument><expr><name>int_pg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_BT_ENTRY</name><argument_list>(<argument><expr><name>leaf_pg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_BT_ENTRY</name><argument_list>(<argument><expr><name>dup_pg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_BT_ENTRY</name><argument_list>(<argument><expr><name>over_pg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
        <expr_stmt><expr><call><name>MAKE_BT_ENTRY</name><argument_list>(<argument><expr><name>empty_pg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>MAKE_BT_ENTRY</name><argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_BT_ENTRY</name><argument_list>(<argument><expr><name>int_pgfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_BT_ENTRY</name><argument_list>(<argument><expr><name>leaf_pgfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_BT_ENTRY</name><argument_list>(<argument><expr><name>dup_pgfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_BT_ENTRY</name><argument_list>(<argument><expr><name>over_pgfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

    </case><case>case <expr><name>DB_QUEUE</name></expr>:
        <expr_stmt><expr><call><name>MAKE_QUEUE_ENTRY</name><argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_QUEUE_ENTRY</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_QUEUE_ENTRY</name><argument_list>(<argument><expr><name>nkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_QUEUE_ENTRY</name><argument_list>(<argument><expr><name>ndata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_QUEUE_ENTRY</name><argument_list>(<argument><expr><name>pagesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 41)</expr></cpp:if>
        <expr_stmt><expr><call><name>MAKE_QUEUE_ENTRY</name><argument_list>(<argument><expr><name>extentsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>MAKE_QUEUE_ENTRY</name><argument_list>(<argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_QUEUE_ENTRY</name><argument_list>(<argument><expr><name>re_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_QUEUE_ENTRY</name><argument_list>(<argument><expr><name>re_pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_QUEUE_ENTRY</name><argument_list>(<argument><expr><name>pgfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> == 31)</expr></cpp:if>
        <expr_stmt><expr><call><name>MAKE_QUEUE_ENTRY</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>MAKE_QUEUE_ENTRY</name><argument_list>(<argument><expr><name>first_recno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_QUEUE_ENTRY</name><argument_list>(<argument><expr><name>cur_recno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

    </case><default>default:
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Unknown DB type, unable to stat"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>d</name> = <name>NULL</name></expr>;</expr_stmt>
    </default>}</block></switch>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAKE_HASH_ENTRY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAKE_BT_ENTRY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAKE_QUEUE_ENTRY</name></cpp:undef>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>d</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_sync</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"|i:sync"</expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument> )</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>sync</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_truncate</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_int32_t</name></type> <name>count</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"txn"</expr>, <expr>"flags"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"|Oi:cursor"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
                                     <argument><expr>&amp;<name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>truncate</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>&amp;<name>count</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_upgrade</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>filename</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"s|i:upgrade"</expr></argument>, <argument><expr>&amp;<name>filename</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>upgrade</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_verify</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>*</type> <name>fileName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>*</type> <name>dbName</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>*</type> <name>outFileName</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name>*</type> <name>outFile</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"filename"</expr>, <expr>"dbname"</expr>, <expr>"outfile"</expr>, <expr>"flags"</expr>,
                                     <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"s|zzi:verify"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
                                     <argument><expr>&amp;<name>fileName</name></expr></argument>, <argument><expr>&amp;<name>dbName</name></expr></argument>, <argument><expr>&amp;<name>outFileName</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>outFileName</name></expr>)</condition><then>
        <expr_stmt><expr><name>outFile</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>outFileName</name></expr></argument>, <argument><expr>"w"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<comment type="block">/* XXX(nnorwitz): it should probably be an exception if outFile
	   can't be opened. */</comment>

    <block>{  <comment type="block">/* DB.verify acts as a DB handle destructor (like close) */</comment>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>error</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>error</name>=<call><name>DB_close_internal</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>error</name></expr> )</condition><then> <block>{
          <return>return <expr><name>error</name></expr>;</return>
        }</block></then></if>
     }</block>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>verify</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><name>outFile</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>db</name></name> = <name>NULL</name></expr>;</expr_stmt>  <comment type="block">/* Implicit close; related objects already released */</comment>

    <if>if <condition>(<expr><name>outFile</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>outFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_set_get_returns_none</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>oldValue</name><init>=<expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i:set_get_returns_none"</expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>moduleFlags</name>.<name>getReturnsNone</name></name></expr>)</condition><then>
        <expr_stmt><expr>++<name>oldValue</name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>moduleFlags</name>.<name>cursorSetReturnsNone</name></name></expr>)</condition><then>
        <expr_stmt><expr>++<name>oldValue</name></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>moduleFlags</name>.<name>getReturnsNone</name></name> = (<name>flags</name> &gt;= 1)</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>moduleFlags</name>.<name>cursorSetReturnsNone</name></name> = (<name>flags</name> &gt;= 2)</expr>;</expr_stmt>
    <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr><name>oldValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 41)</expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_set_encrypt</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_int32_t</name></type> <name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>passwd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"passwd"</expr>, <expr>"flags"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"s|i:set_encrypt"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
		<argument><expr>&amp;<name>passwd</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>set_encrypt</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>passwd</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DBVER &gt;= 41 */</comment>


<comment type="block">/*-------------------------------------------------------------- */</comment>
<comment type="block">/* Mapping and Dictionary-like access routines */</comment>

<function><type><name>Py_ssize_t</name></type> <name>DB_length</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>_self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>*</type> <name>sp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBObject</name>*</type> <name>self</name> <init>= <expr>(<name>DBObject</name>*)<name>_self</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>db</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>t</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(is)"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"DB object has been closed"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>t</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>DBError</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr>-1</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>haveStat</name></name></expr>)</condition><then> <block>{  <comment type="block">/* Has the stat function been called recently?  If
                              so, we can use the cached value. */</comment>
        <expr_stmt><expr><name>flags</name> = <name>DB_FAST_STAT</name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
<label><name>redo_stat_for_length</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>stat</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <comment type="block">/*txnid*/</comment> <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>sp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>stat</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr>&amp;<name>sp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* All the stat structures have matching fields upto the ndata field,
       so we can use any of them for the type cast */</comment>
    <expr_stmt><expr><name>size</name> = ((<name>DB_BTREE_STAT</name>*)<name>sp</name>)-&gt;<name>bt_ndata</name></expr>;</expr_stmt>

    <comment type="block">/* A size of 0 could mean that Berkeley DB no longer had the stat values cached.
     * redo a full stat to make sure.
     *   Fixes SF python bug 1493322, pybsddb bug 1184012
     */</comment>
    <if>if <condition>(<expr><name>size</name> == 0 &amp;&amp; (<name>flags</name> &amp; <name>DB_FAST_STAT</name>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>flags</name> = 0</expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>err</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <goto>goto <name>redo_stat_for_length</name>;</goto>
    }</block></then></if>

    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <return>return <expr>-1</expr>;</return></then></if>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>haveStat</name></name> = 1</expr>;</expr_stmt>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>size</name></expr>;</return>
}</block></function>


<function><type><name>PyObject</name>*</type> <name>DB_subscript</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>keyobj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>retval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>data</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>make_key_dbt</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>CHECK_DBFLAG</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>DB_THREAD</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* Tell Berkeley DB to malloc the return value (thread safe) */</comment>
        <expr_stmt><expr><name><name>data</name>.<name>flags</name></name> = <name>DB_DBT_MALLOC</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>get</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> == <name>DB_NOTFOUND</name> || <name>err</name> == <name>DB_KEYEMPTY</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>, <argument><expr><name>keyobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retval</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>makeDBError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>retval</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name>retval</name> = <call><name>Build_PyString</name><argument_list>(<argument><expr><name><name>data</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if>

    <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>DB_ass_sub</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>keyobj</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>dataobj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>db</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>t</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(is)"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"DB object has been closed"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>t</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>DBError</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr>-1</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<call><name>make_key_dbt</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr>-1</expr>;</return></then></if>

    <if>if <condition>(<expr><name>dataobj</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name>make_dbt</name><argument_list>(<argument><expr><name>dataobj</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>retval</name> =  -1</expr>;</expr_stmt></then>
        <else>else <block>{
            <if>if <condition>(<expr><name><name>self</name>-&gt;<name>setflags</name></name> &amp; (<name>DB_DUP</name>|<name>DB_DUPSORT</name>)</expr>)</condition><then>
                <comment type="block">/* dictionaries shouldn't have duplicate keys */</comment>
                <expr_stmt><expr><name>flags</name> = <name>DB_NOOVERWRITE</name></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><name>retval</name> = <call><name>_DB_put</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr>(<name>retval</name> == -1) &amp;&amp;  (<name><name>self</name>-&gt;<name>setflags</name></name> &amp; (<name>DB_DUP</name>|<name>DB_DUPSORT</name>))</expr>)</condition><then> <block>{
                <comment type="block">/* try deleting any old record that matches and then PUT it
                 * again... */</comment>
                <expr_stmt><expr><call><name>_DB_delete</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>retval</name> = <call><name>_DB_put</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
    }</block></then>
    <else>else <block>{
        <comment type="block">/* dataobj == NULL, so delete the key */</comment>
        <expr_stmt><expr><name>retval</name> = <call><name>_DB_delete</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_has_key</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>keyobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{<expr>"key"</expr>,<expr>"txn"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"O|O:has_key"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
                <argument><expr>&amp;<name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>txnobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>make_key_dbt</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* This causes DB_BUFFER_SMALL to be returned when the db has the key because
       it has a record but can't allocate a buffer for the data.  This saves
       having to deal with data we won't be using.
     */</comment>
    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name>.<name>flags</name></name> = <name>DB_DBT_USERMEM</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>get</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>err</name> == <name>DB_BUFFER_SMALL</name> || <name>err</name> == 0</expr>)</condition><then> <block>{
        <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <if>if <condition>(<expr><name>err</name> == <name>DB_NOTFOUND</name> || <name>err</name> == <name>DB_KEYEMPTY</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></else></if>

    <expr_stmt><expr><call><name>makeDBError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_KEYS_LIST</name></cpp:macro>      <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_VALUES_LIST</name></cpp:macro>    <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ITEMS_LIST</name></cpp:macro>     <cpp:value>3</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>_DB_make_list</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>DB_TXN</name>*</type> <name>txn</name></decl></param>, <param><decl><type><name>int</name></type> <name>type</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>dbtype</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBC</name> *</type><name>cursor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_DB_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>dbtype</name> = <call><name>_DB_get_type</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>dbtype</name> == -1</expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>list</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>list</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <comment type="block">/* get a cursor */</comment>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db</name>-&gt;<name>cursor</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>makeDBError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <while>while <condition>(<expr>1</expr>)</condition> <block>{ <comment type="block">/* use the cursor to traverse the DB, collecting items */</comment>
        <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> = <call><name>_DBC_get</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>DB_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
            <comment type="block">/* for any error, break out of the loop */</comment>
            <break>break;</break>
        }</block></then></if>

        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
        <case>case <expr><name>_KEYS_LIST</name></expr>:
            <switch>switch<condition>(<expr><name>dbtype</name></expr>)</condition> <block>{
            <case>case <expr><name>DB_BTREE</name></expr>:
            </case><case>case <expr><name>DB_HASH</name></expr>:
            </case><default>default:
                <expr_stmt><expr><name>item</name> = <call><name>Build_PyString</name><argument_list>(<argument><expr><name><name>key</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>key</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </default><case>case <expr><name>DB_RECNO</name></expr>:
            </case><case>case <expr><name>DB_QUEUE</name></expr>:
                <expr_stmt><expr><name>item</name> = <call><name>NUMBER_FromLong</name><argument_list>(<argument><expr>*((<name>db_recno_t</name>*)<name><name>key</name>.<name>data</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case>}</block></switch>
            <break>break;</break>

        </case><case>case <expr><name>_VALUES_LIST</name></expr>:
            <expr_stmt><expr><name>item</name> = <call><name>Build_PyString</name><argument_list>(<argument><expr><name><name>data</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr><name>_ITEMS_LIST</name></expr>:
            <switch>switch<condition>(<expr><name>dbtype</name></expr>)</condition> <block>{
            <case>case <expr><name>DB_BTREE</name></expr>:
            </case><case>case <expr><name>DB_HASH</name></expr>:
            </case><default>default:
                <expr_stmt><expr><name>item</name> = <call><name>BuildValue_SS</name><argument_list>(<argument><expr><name><name>key</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>key</name>.<name>size</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </default><case>case <expr><name>DB_RECNO</name></expr>:
            </case><case>case <expr><name>DB_QUEUE</name></expr>:
                <expr_stmt><expr><name>item</name> = <call><name>BuildValue_IS</name><argument_list>(<argument><expr>*((<name>db_recno_t</name>*)<name><name>key</name>.<name>data</name></name>)</expr></argument>, <argument><expr><name><name>data</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case>}</block></switch>
            <break>break;</break>
        </case><default>default:
            <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"Unknown key type 0x%x"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>item</name> = <name>NULL</name></expr>;</expr_stmt>
            <break>break;</break>
        </default>}</block></switch>
        <if>if <condition>(<expr><name>item</name> == <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>list</name> = <name>NULL</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>list</name> = <name>NULL</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        }</block></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <comment type="block">/* DB_NOTFOUND || DB_KEYEMPTY is okay, it means we got to the end */</comment>
    <if>if <condition>(<expr><name>err</name> != <name>DB_NOTFOUND</name> &amp;&amp; <name>err</name> != <name>DB_KEYEMPTY</name> &amp;&amp; <call><name>makeDBError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>list</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>

 <label><name>done</name>:</label>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_DBC_close</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <return>return <expr><name>list</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_keys</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"keys"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>txnobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><call><name>_DB_make_list</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>_KEYS_LIST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_items</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"items"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>txnobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><call><name>_DB_make_list</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>_ITEMS_LIST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_values</name><parameter_list>(<param><decl><type><name>DBObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"values"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>txnobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><call><name>_DB_make_list</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>_VALUES_LIST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/* DBCursor methods */</comment>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_close_internal</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>dbc</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>EXTRACT_FROM_DOUBLE_LINKED_LIST</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>self</name>-&gt;<name>txn</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>EXTRACT_FROM_DOUBLE_LINKED_LIST_TXN</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name>-&gt;<name>txn</name></name>=<name>NULL</name></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> = <call><name>_DBC_close</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>dbc</name></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_close</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>DBC_close_internal</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_count</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>db_recno_t</name></type> <name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|i:count"</expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_CURSOR_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name>_DBC_count</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dbc</name></name></expr></argument>, <argument><expr>&amp;<name>count</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_current</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>_DBCursor_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>,<argument><expr><name>DB_CURRENT</name></expr></argument>,<argument><expr><name>args</name></expr></argument>,<argument><expr><name>kwargs</name></expr></argument>,<argument><expr>"|iii:current"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_delete</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|i:delete"</expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_CURSOR_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name>_DBC_del</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dbc</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>mydb</name>-&gt;<name>haveStat</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_dup</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBC</name>*</type> <name>dbc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|i:dup"</expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_CURSOR_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name>_DBC_dup</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dbc</name></name></expr></argument>, <argument><expr>&amp;<name>dbc</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr>(<name>PyObject</name>*) <call><name>newDBCursorObject</name><argument_list>(<argument><expr><name>dbc</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>txn</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>mydb</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_first</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>_DBCursor_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>,<argument><expr><name>DB_FIRST</name></expr></argument>,<argument><expr><name>args</name></expr></argument>,<argument><expr><name>kwargs</name></expr></argument>,<argument><expr>"|iii:first"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_get</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>keyobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>dataobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>retval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dlen</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>doff</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"key"</expr>,<expr>"data"</expr>, <expr>"flags"</expr>, <expr>"dlen"</expr>, <expr>"doff"</expr>,
                                     <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"i|ii:get"</expr></argument>, <argument><expr>&amp;<name><name>kwnames</name><index>[<expr>2</expr>]</index></name></expr></argument>,
				     <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>dlen</name></expr></argument>, <argument><expr>&amp;<name>doff</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"Oi|ii:get"</expr></argument>,
                                         <argument><expr>&amp;<name><name>kwnames</name><index>[<expr>1</expr>]</index></name></expr></argument>,
					 <argument><expr>&amp;<name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>dlen</name></expr></argument>, <argument><expr>&amp;<name>doff</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"OOi|ii:get"</expr></argument>,
                                             <argument><expr><name>kwnames</name></expr></argument>, <argument><expr>&amp;<name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>dataobj</name></expr></argument>,
                                             <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>dlen</name></expr></argument>, <argument><expr>&amp;<name>doff</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <return>return <expr><name>NULL</name></expr>;</return>
	    }</block></then></if>
	}</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name>CHECK_CURSOR_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>keyobj</name> &amp;&amp; !<call><name>make_key_dbt</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mydb</name></name></expr></argument>, <argument><expr><name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>( <expr>(<name>dataobj</name> &amp;&amp; !<call><name>make_dbt</name><argument_list>(<argument><expr><name>dataobj</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call>) ||
         (!<call><name>add_partial_dbt</name><argument_list>(<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>doff</name></expr></argument>)</argument_list></call>)</expr> )</condition><then>
    <block>{
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 'make_key_dbt' could do a 'malloc' */</comment>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name>_DBC_get</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dbc</name></name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <if>if <condition>(<expr>(<name>err</name> == <name>DB_NOTFOUND</name> || <name>err</name> == <name>DB_KEYEMPTY</name>)
	    &amp;&amp; <name><name>self</name>-&gt;<name>mydb</name>-&gt;<name>moduleFlags</name>.<name>getReturnsNone</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retval</name> = <name>Py_None</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>makeDBError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>retval</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <switch>switch <condition>(<expr><call><name>_DB_get_type</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mydb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
        <case>case <expr>-1</expr>:
            <expr_stmt><expr><name>retval</name> = <name>NULL</name></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>DB_BTREE</name></expr>:
        </case><case>case <expr><name>DB_HASH</name></expr>:
        </case><default>default:
            <expr_stmt><expr><name>retval</name> = <call><name>BuildValue_SS</name><argument_list>(<argument><expr><name><name>key</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>key</name>.<name>size</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </default><case>case <expr><name>DB_RECNO</name></expr>:
        </case><case>case <expr><name>DB_QUEUE</name></expr>:
            <expr_stmt><expr><name>retval</name> = <call><name>BuildValue_IS</name><argument_list>(<argument><expr>*((<name>db_recno_t</name>*)<name><name>key</name>.<name>data</name></name>)</expr></argument>, <argument><expr><name><name>data</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case>}</block></switch>
    }</block></else></if></else></if>
    <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 'make_key_dbt' could do a 'malloc' */</comment>
    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_pget</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>keyobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>dataobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>retval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dlen</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>doff</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>pkey</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames_keyOnly</name><index>[]</index></name> <init>= <expr><block>{ <expr>"key"</expr>, <expr>"flags"</expr>, <expr>"dlen"</expr>, <expr>"doff"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"key"</expr>, <expr>"data"</expr>, <expr>"flags"</expr>, <expr>"dlen"</expr>, <expr>"doff"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"i|ii:pget"</expr></argument>, <argument><expr>&amp;<name><name>kwnames</name><index>[<expr>2</expr>]</index></name></expr></argument>,
				     <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>dlen</name></expr></argument>, <argument><expr>&amp;<name>doff</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"Oi|ii:pget"</expr></argument>,
                                         <argument><expr><name>kwnames_keyOnly</name></expr></argument>, 
					 <argument><expr>&amp;<name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>dlen</name></expr></argument>, <argument><expr>&amp;<name>doff</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"OOi|ii:pget"</expr></argument>,
                                             <argument><expr><name>kwnames</name></expr></argument>, <argument><expr>&amp;<name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>dataobj</name></expr></argument>,
                                             <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>dlen</name></expr></argument>, <argument><expr>&amp;<name>doff</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <return>return <expr><name>NULL</name></expr>;</return>
	    }</block></then></if>
	}</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name>CHECK_CURSOR_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>keyobj</name> &amp;&amp; !<call><name>make_key_dbt</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mydb</name></name></expr></argument>, <argument><expr><name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>( <expr>(<name>dataobj</name> &amp;&amp; !<call><name>make_dbt</name><argument_list>(<argument><expr><name>dataobj</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call>) ||
         (!<call><name>add_partial_dbt</name><argument_list>(<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>doff</name></expr></argument>)</argument_list></call>)</expr> )</condition><then> <block>{
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 'make_key_dbt' could do a 'malloc' */</comment>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pkey</name>.<name>flags</name></name> = <name>DB_DBT_MALLOC</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name>_DBC_pget</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dbc</name></name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>pkey</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <if>if <condition>(<expr>(<name>err</name> == <name>DB_NOTFOUND</name> || <name>err</name> == <name>DB_KEYEMPTY</name>)
	    &amp;&amp; <name><name>self</name>-&gt;<name>mydb</name>-&gt;<name>moduleFlags</name>.<name>getReturnsNone</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retval</name> = <name>Py_None</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>makeDBError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>retval</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>pkeyObj</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>dataObj</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>dataObj</name> = <call><name>Build_PyString</name><argument_list>(<argument><expr><name><name>data</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>self</name>-&gt;<name>mydb</name>-&gt;<name>primaryDBType</name></name> == <name>DB_RECNO</name> ||
            <name><name>self</name>-&gt;<name>mydb</name>-&gt;<name>primaryDBType</name></name> == <name>DB_QUEUE</name></expr>)</condition><then>
            <expr_stmt><expr><name>pkeyObj</name> = <call><name>NUMBER_FromLong</name><argument_list>(<argument><expr>*(<name>int</name> *)<name><name>pkey</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name>pkeyObj</name> = <call><name>Build_PyString</name><argument_list>(<argument><expr><name><name>pkey</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>pkey</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

        <if>if <condition>(<expr><name><name>key</name>.<name>data</name></name> &amp;&amp; <name><name>key</name>.<name>size</name></name></expr>)</condition><then> <comment type="block">/* return key, pkey and data */</comment>
        <block>{
            <decl_stmt><decl><type><name>PyObject</name> *</type><name>keyObj</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>_DB_get_type</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mydb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>type</name> == <name>DB_RECNO</name> || <name>type</name> == <name>DB_QUEUE</name></expr>)</condition><then>
                <expr_stmt><expr><name>keyObj</name> = <call><name>NUMBER_FromLong</name><argument_list>(<argument><expr>*(<name>int</name> *)<name><name>key</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><name>keyObj</name> = <call><name>Build_PyString</name><argument_list>(<argument><expr><name><name>key</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>key</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &gt;= 0x02040000)</expr></cpp:if>
            <expr_stmt><expr><name>retval</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><name>keyObj</name></expr></argument>, <argument><expr><name>pkeyObj</name></expr></argument>, <argument><expr><name>dataObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <expr_stmt><expr><name>retval</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"OOO"</expr></argument>, <argument><expr><name>keyObj</name></expr></argument>, <argument><expr><name>pkeyObj</name></expr></argument>, <argument><expr><name>dataObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keyObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 'make_key_dbt' could do a 'malloc' */</comment>
        }</block></then>
        <else>else <comment type="block">/* return just the pkey and data */</comment>
        <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &gt;= 0x02040000)</expr></cpp:if>
            <expr_stmt><expr><name>retval</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>pkeyObj</name></expr></argument>, <argument><expr><name>dataObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <expr_stmt><expr><name>retval</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"OO"</expr></argument>, <argument><expr><name>pkeyObj</name></expr></argument>, <argument><expr><name>dataObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        }</block></else></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dataObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pkeyObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if>
    <comment type="block">/* the only time REALLOC should be set is if we used an integer
     * key that make_key_dbt malloc'd for us.  always free these. */</comment>
    <if>if <condition>(<expr><name><name>key</name>.<name>flags</name></name> &amp; <name>DB_DBT_REALLOC</name></expr>)</condition><then> <block>{  <comment type="block">/* 'make_key_dbt' could do a 'malloc' */</comment>
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_get_recno</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>db_recno_t</name></type> <name>recno</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>data</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_CURSOR_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name>_DBC_get</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dbc</name></name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>DB_GET_RECNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>recno</name> = *((<name>db_recno_t</name>*)<name><name>data</name>.<name>data</name></name>)</expr>;</expr_stmt>
    <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr><name>recno</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_last</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>_DBCursor_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>,<argument><expr><name>DB_LAST</name></expr></argument>,<argument><expr><name>args</name></expr></argument>,<argument><expr><name>kwargs</name></expr></argument>,<argument><expr>"|iii:last"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_next</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>_DBCursor_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>,<argument><expr><name>DB_NEXT</name></expr></argument>,<argument><expr><name>args</name></expr></argument>,<argument><expr><name>kwargs</name></expr></argument>,<argument><expr>"|iii:next"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_prev</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>_DBCursor_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>,<argument><expr><name>DB_PREV</name></expr></argument>,<argument><expr><name>args</name></expr></argument>,<argument><expr><name>kwargs</name></expr></argument>,<argument><expr>"|iii:prev"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_put</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>keyobj</name></decl>, *<decl><type ref="prev"/><name>dataobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"key"</expr>, <expr>"data"</expr>, <expr>"flags"</expr>, <expr>"dlen"</expr>, <expr>"doff"</expr>,
                                     <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dlen</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>doff</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"OO|iii:put"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
				     <argument><expr>&amp;<name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>dataobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>dlen</name></expr></argument>, <argument><expr>&amp;<name>doff</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_CURSOR_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>make_key_dbt</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mydb</name></name></expr></argument>, <argument><expr><name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>make_dbt</name><argument_list>(<argument><expr><name>dataobj</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call> ||
        !<call><name>add_partial_dbt</name><argument_list>(<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>doff</name></expr></argument>)</argument_list></call></expr> )</condition><then>
    <block>{
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 'make_key_dbt' could do a 'malloc' */</comment>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name>_DBC_put</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dbc</name></name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 'make_key_dbt' could do a 'malloc' */</comment>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>mydb</name>-&gt;<name>haveStat</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_set</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>retval</name></decl>, *<decl><type ref="prev"/><name>keyobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"key"</expr>, <expr>"flags"</expr>, <expr>"dlen"</expr>, <expr>"doff"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dlen</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>doff</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"O|iii:set"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
				     <argument><expr>&amp;<name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>dlen</name></expr></argument>, <argument><expr>&amp;<name>doff</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_CURSOR_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>make_key_dbt</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mydb</name></name></expr></argument>, <argument><expr><name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>add_partial_dbt</name><argument_list>(<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>doff</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 'make_key_dbt' could do a 'malloc' */</comment>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name>_DBC_get</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dbc</name></name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>flags</name>|<name>DB_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name>err</name> == <name>DB_NOTFOUND</name> || <name>err</name> == <name>DB_KEYEMPTY</name>)
	    &amp;&amp; <name><name>self</name>-&gt;<name>mydb</name>-&gt;<name>moduleFlags</name>.<name>cursorSetReturnsNone</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retval</name> = <name>Py_None</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>makeDBError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>retval</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <switch>switch <condition>(<expr><call><name>_DB_get_type</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mydb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
        <case>case <expr>-1</expr>:
            <expr_stmt><expr><name>retval</name> = <name>NULL</name></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>DB_BTREE</name></expr>:
        </case><case>case <expr><name>DB_HASH</name></expr>:
        </case><default>default:
            <expr_stmt><expr><name>retval</name> = <call><name>BuildValue_SS</name><argument_list>(<argument><expr><name><name>key</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>key</name>.<name>size</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </default><case>case <expr><name>DB_RECNO</name></expr>:
        </case><case>case <expr><name>DB_QUEUE</name></expr>:
            <expr_stmt><expr><name>retval</name> = <call><name>BuildValue_IS</name><argument_list>(<argument><expr>*((<name>db_recno_t</name>*)<name><name>key</name>.<name>data</name></name>)</expr></argument>, <argument><expr><name><name>data</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case>}</block></switch>
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 'make_key_dbt' could do a 'malloc' */</comment>
    }</block></else></if></else></if>
    <comment type="block">/* the only time REALLOC should be set is if we used an integer
     * key that make_key_dbt malloc'd for us.  always free these. */</comment>
    <if>if <condition>(<expr><name><name>key</name>.<name>flags</name></name> &amp; <name>DB_DBT_REALLOC</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 'make_key_dbt' could do a 'malloc' */</comment>
    }</block></then></if>

    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_set_range</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>retval</name></decl>, *<decl><type ref="prev"/><name>keyobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"key"</expr>, <expr>"flags"</expr>, <expr>"dlen"</expr>, <expr>"doff"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dlen</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>doff</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"O|iii:set_range"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
				     <argument><expr>&amp;<name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>dlen</name></expr></argument>, <argument><expr>&amp;<name>doff</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_CURSOR_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>make_key_dbt</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mydb</name></name></expr></argument>, <argument><expr><name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>add_partial_dbt</name><argument_list>(<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>doff</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 'make_key_dbt' could do a 'malloc' */</comment>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name>_DBC_get</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dbc</name></name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>flags</name>|<name>DB_SET_RANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name>err</name> == <name>DB_NOTFOUND</name> || <name>err</name> == <name>DB_KEYEMPTY</name>)
	    &amp;&amp; <name><name>self</name>-&gt;<name>mydb</name>-&gt;<name>moduleFlags</name>.<name>cursorSetReturnsNone</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retval</name> = <name>Py_None</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>makeDBError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>retval</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <switch>switch <condition>(<expr><call><name>_DB_get_type</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mydb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
        <case>case <expr>-1</expr>:
            <expr_stmt><expr><name>retval</name> = <name>NULL</name></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>DB_BTREE</name></expr>:
        </case><case>case <expr><name>DB_HASH</name></expr>:
        </case><default>default:
            <expr_stmt><expr><name>retval</name> = <call><name>BuildValue_SS</name><argument_list>(<argument><expr><name><name>key</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>key</name>.<name>size</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </default><case>case <expr><name>DB_RECNO</name></expr>:
        </case><case>case <expr><name>DB_QUEUE</name></expr>:
            <expr_stmt><expr><name>retval</name> = <call><name>BuildValue_IS</name><argument_list>(<argument><expr>*((<name>db_recno_t</name>*)<name><name>key</name>.<name>data</name></name>)</expr></argument>, <argument><expr><name><name>data</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case>}</block></switch>
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 'make_key_dbt' could do a 'malloc' */</comment>
    }</block></else></if></else></if>
    <comment type="block">/* the only time REALLOC should be set is if we used an integer
     * key that make_key_dbt malloc'd for us.  always free these. */</comment>
    <if>if <condition>(<expr><name><name>key</name>.<name>flags</name></name> &amp; <name>DB_DBT_REALLOC</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 'make_key_dbt' could do a 'malloc' */</comment>
    }</block></then></if>

    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>_DBC_get_set_both</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>keyobj</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>dataobj</name></decl></param>,
                  <param><decl><type><name>int</name></type> <name>flags</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>returnsNone</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>retval</name></decl>;</decl_stmt>

    <comment type="block">/* the caller did this:  CHECK_CURSOR_NOT_CLOSED(self); */</comment>
    <if>if <condition>(<expr>!<call><name>make_key_dbt</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mydb</name></name></expr></argument>, <argument><expr><name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>make_dbt</name><argument_list>(<argument><expr><name>dataobj</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 'make_key_dbt' could do a 'malloc' */</comment>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name>_DBC_get</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dbc</name></name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>flags</name>|<name>DB_GET_BOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name>err</name> == <name>DB_NOTFOUND</name> || <name>err</name> == <name>DB_KEYEMPTY</name>) &amp;&amp; <name>returnsNone</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retval</name> = <name>Py_None</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>makeDBError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>retval</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <switch>switch <condition>(<expr><call><name>_DB_get_type</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mydb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
        <case>case <expr>-1</expr>:
            <expr_stmt><expr><name>retval</name> = <name>NULL</name></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>DB_BTREE</name></expr>:
        </case><case>case <expr><name>DB_HASH</name></expr>:
        </case><default>default:
            <expr_stmt><expr><name>retval</name> = <call><name>BuildValue_SS</name><argument_list>(<argument><expr><name><name>key</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>key</name>.<name>size</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </default><case>case <expr><name>DB_RECNO</name></expr>:
        </case><case>case <expr><name>DB_QUEUE</name></expr>:
            <expr_stmt><expr><name>retval</name> = <call><name>BuildValue_IS</name><argument_list>(<argument><expr>*((<name>db_recno_t</name>*)<name><name>key</name>.<name>data</name></name>)</expr></argument>, <argument><expr><name><name>data</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case>}</block></switch>
    }</block></else></if></else></if>

    <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 'make_key_dbt' could do a 'malloc' */</comment>
    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_get_both</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>keyobj</name></decl>, *<decl><type ref="prev"/><name>dataobj</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"OO|i:get_both"</expr></argument>, <argument><expr>&amp;<name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>dataobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <comment type="block">/* if the cursor is closed, self-&gt;mydb may be invalid */</comment>
    <expr_stmt><expr><call><name>CHECK_CURSOR_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>_DBC_get_set_both</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>keyobj</name></expr></argument>, <argument><expr><name>dataobj</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
                <argument><expr><name><name>self</name>-&gt;<name>mydb</name>-&gt;<name>moduleFlags</name>.<name>getReturnsNone</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Return size of entry */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_get_current_size</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr><name>DB_CURRENT</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>retval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_CURSOR_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* We don't allocate any memory, forcing a DB_BUFFER_SMALL error and thus
       getting the record size. */</comment>
    <expr_stmt><expr><name><name>data</name>.<name>flags</name></name> = <name>DB_DBT_USERMEM</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name>.<name>ulen</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name>_DBC_get</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dbc</name></name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> == <name>DB_BUFFER_SMALL</name> || !<name>err</name></expr>)</condition><then> <block>{
        <comment type="block">/* DB_BUFFER_SMALL means positive size, !err means zero length value */</comment>
        <expr_stmt><expr><name>retval</name> = <call><name>NUMBER_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> = 0</expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_set_both</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>keyobj</name></decl>, *<decl><type ref="prev"/><name>dataobj</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"OO|i:set_both"</expr></argument>, <argument><expr>&amp;<name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>dataobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <comment type="block">/* if the cursor is closed, self-&gt;mydb may be invalid */</comment>
    <expr_stmt><expr><call><name>CHECK_CURSOR_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>_DBC_get_set_both</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>keyobj</name></expr></argument>, <argument><expr><name>dataobj</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
                <argument><expr><name><name>self</name>-&gt;<name>mydb</name>-&gt;<name>moduleFlags</name>.<name>cursorSetReturnsNone</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_set_recno</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>irecno</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>db_recno_t</name></type> <name>recno</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>retval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dlen</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>doff</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"recno"</expr>,<expr>"flags"</expr>, <expr>"dlen"</expr>, <expr>"doff"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"i|iii:set_recno"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
				     <argument><expr>&amp;<name>irecno</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>dlen</name></expr></argument>, <argument><expr>&amp;<name>doff</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_CURSOR_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>recno</name> = (<name>db_recno_t</name>) <name>irecno</name></expr>;</expr_stmt>
    <comment type="block">/* use allocated space so DB will be able to realloc room for the real
     * key */</comment>
    <expr_stmt><expr><name><name>key</name>.<name>data</name></name> = <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>db_recno_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>key</name>.<name>data</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_MemoryError</name></expr></argument>, <argument><expr>"Key memory allocation failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>key</name>.<name>size</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>db_recno_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name>.<name>ulen</name></name> = <name><name>key</name>.<name>size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>key</name>.<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>recno</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>db_recno_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name>.<name>flags</name></name> = <name>DB_DBT_REALLOC</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>add_partial_dbt</name><argument_list>(<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>doff</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name>_DBC_get</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dbc</name></name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>flags</name>|<name>DB_SET_RECNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name>err</name> == <name>DB_NOTFOUND</name> || <name>err</name> == <name>DB_KEYEMPTY</name>)
	    &amp;&amp; <name><name>self</name>-&gt;<name>mydb</name>-&gt;<name>moduleFlags</name>.<name>cursorSetReturnsNone</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retval</name> = <name>Py_None</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>makeDBError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>retval</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{  <comment type="block">/* Can only be used for BTrees, so no need to return int key */</comment>
        <expr_stmt><expr><name>retval</name> = <call><name>BuildValue_SS</name><argument_list>(<argument><expr><name><name>key</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>key</name>.<name>size</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>data</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if>
    <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_consume</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>_DBCursor_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>,<argument><expr><name>DB_CONSUME</name></expr></argument>,<argument><expr><name>args</name></expr></argument>,<argument><expr><name>kwargs</name></expr></argument>,<argument><expr>"|iii:consume"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_next_dup</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>_DBCursor_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>,<argument><expr><name>DB_NEXT_DUP</name></expr></argument>,<argument><expr><name>args</name></expr></argument>,<argument><expr><name>kwargs</name></expr></argument>,<argument><expr>"|iii:next_dup"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_next_nodup</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>_DBCursor_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>,<argument><expr><name>DB_NEXT_NODUP</name></expr></argument>,<argument><expr><name>args</name></expr></argument>,<argument><expr><name>kwargs</name></expr></argument>,<argument><expr>"|iii:next_nodup"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_prev_nodup</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>_DBCursor_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>,<argument><expr><name>DB_PREV_NODUP</name></expr></argument>,<argument><expr><name>args</name></expr></argument>,<argument><expr><name>kwargs</name></expr></argument>,<argument><expr>"|iii:prev_nodup"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBC_join_item</name><parameter_list>(<param><decl><type><name>DBCursorObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>retval</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|i:join_item"</expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_CURSOR_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_DBT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name>_DBC_get</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dbc</name></name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>flags</name> | <name>DB_JOIN_ITEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name>err</name> == <name>DB_NOTFOUND</name> || <name>err</name> == <name>DB_KEYEMPTY</name>)
	    &amp;&amp; <name><name>self</name>-&gt;<name>mydb</name>-&gt;<name>moduleFlags</name>.<name>getReturnsNone</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retval</name> = <name>Py_None</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>makeDBError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>retval</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name>retval</name> = <call><name>BuildValue_S</name><argument_list>(<argument><expr><name><name>key</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>key</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if>

    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>



<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/* DBEnv methods */</comment>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_close_internal</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>dummy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>closed</name></name></expr>)</condition><then> <block>{      <comment type="block">/* Don't close more than once */</comment>
        <while>while<condition>(<expr><name><name>self</name>-&gt;<name>children_txns</name></name></expr>)</condition> <block>{
          <expr_stmt><expr><name>dummy</name>=<call><name>DBTxn_abort_discard_internal</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>children_txns</name></name></expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <while>while<condition>(<expr><name><name>self</name>-&gt;<name>children_dbs</name></name></expr>)</condition> <block>{
          <expr_stmt><expr><name>dummy</name>=<call><name>DB_close_internal</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>children_dbs</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></then></if>

    <expr_stmt><expr><name><name>self</name>-&gt;<name>closed</name></name> = 1</expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>db_env</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>close</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
        <comment type="block">/* after calling DBEnv-&gt;close, regardless of error, this DBEnv
         * may not be accessed again (Berkeley DB docs). */</comment>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>db_env</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_close</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|i:close"</expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><call><name>DBEnv_close_internal</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_open</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init>, <name>mode</name><init>=<expr>0660</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>db_home</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"z|ii:open"</expr></argument>, <argument><expr>&amp;<name>db_home</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>open</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>db_home</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>closed</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>flags</name></name> = <name>flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_remove</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>db_home</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s|i:remove"</expr></argument>, <argument><expr>&amp;<name>db_home</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>remove</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>db_home</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 41)</expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_dbremove</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_int32_t</name></type> <name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>database</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"file"</expr>, <expr>"database"</expr>, <expr>"txn"</expr>, <expr>"flags"</expr>,
                                     <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"s|zOi:dbremove"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
		<argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr>&amp;<name>database</name></expr></argument>, <argument><expr>&amp;<name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>dbremove</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_dbrename</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_int32_t</name></type> <name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>database</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>newname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"file"</expr>, <expr>"database"</expr>, <expr>"newname"</expr>, <expr>"txn"</expr>,
                                     <expr>"flags"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"szs|Oi:dbrename"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
		<argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr>&amp;<name>database</name></expr></argument>, <argument><expr>&amp;<name>newname</name></expr></argument>, <argument><expr>&amp;<name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>dbrename</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>newname</name></expr></argument>,
                                 <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_encrypt</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_int32_t</name></type> <name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>passwd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"passwd"</expr>, <expr>"flags"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"s|i:set_encrypt"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
		<argument><expr>&amp;<name>passwd</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_encrypt</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>passwd</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DBVER &gt;= 41 */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_timeout</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_int32_t</name></type> <name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_int32_t</name></type> <name>timeout</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"timeout"</expr>, <expr>"flags"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"ii:set_timeout"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
		<argument><expr>&amp;<name>timeout</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_timeout</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>(<name>db_timeout_t</name>)<name>timeout</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_shm_key</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>shm_key</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l:set_shm_key"</expr></argument>, <argument><expr>&amp;<name>shm_key</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_shm_key</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>shm_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_cachesize</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>gbytes</name><init>=<expr>0</expr></init>, <name>bytes</name><init>=<expr>0</expr></init>, <name>ncache</name><init>=<expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"ii|i:set_cachesize"</expr></argument>,
                          <argument><expr>&amp;<name>gbytes</name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>, <argument><expr>&amp;<name>ncache</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_cachesize</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>gbytes</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>ncache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_flags</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init>, <name>onoff</name><init>=<expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"ii:set_flags"</expr></argument>,
                          <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>onoff</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_flags</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>onoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 47)</expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_log_set_config</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>onoff</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"ii:log_set_config"</expr></argument>,
                          <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>onoff</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>log_set_config</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>onoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DBVER &gt;= 47 */</comment>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_data_dir</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>dir</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s:set_data_dir"</expr></argument>, <argument><expr>&amp;<name>dir</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_data_dir</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_lg_bsize</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>lg_bsize</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:set_lg_bsize"</expr></argument>, <argument><expr>&amp;<name>lg_bsize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_lg_bsize</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>lg_bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_lg_dir</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>dir</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s:set_lg_dir"</expr></argument>, <argument><expr>&amp;<name>dir</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_lg_dir</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_lg_max</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>lg_max</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:set_lg_max"</expr></argument>, <argument><expr>&amp;<name>lg_max</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_lg_max</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>lg_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 42)</expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_get_lg_max</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_int32_t</name></type> <name>lg_max</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>get_lg_max</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>&amp;<name>lg_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr><name>lg_max</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_lg_regionmax</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>lg_max</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:set_lg_regionmax"</expr></argument>, <argument><expr>&amp;<name>lg_max</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_lg_regionmax</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>lg_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_lk_detect</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>lk_detect</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:set_lk_detect"</expr></argument>, <argument><expr>&amp;<name>lk_detect</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_lk_detect</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>lk_detect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &lt; 45)</expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_lk_max</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:set_lk_max"</expr></argument>, <argument><expr>&amp;<name>max</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_lk_max</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_lk_max_locks</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:set_lk_max_locks"</expr></argument>, <argument><expr>&amp;<name>max</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_lk_max_locks</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_lk_max_lockers</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:set_lk_max_lockers"</expr></argument>, <argument><expr>&amp;<name>max</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_lk_max_lockers</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_lk_max_objects</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:set_lk_max_objects"</expr></argument>, <argument><expr>&amp;<name>max</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_lk_max_objects</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_mp_mmapsize</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>mp_mmapsize</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:set_mp_mmapsize"</expr></argument>, <argument><expr>&amp;<name>mp_mmapsize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_mp_mmapsize</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>mp_mmapsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_tmp_dir</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>dir</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s:set_tmp_dir"</expr></argument>, <argument><expr>&amp;<name>dir</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_tmp_dir</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_txn_recover</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>DB_FIRST</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>list</name></decl>, *<decl><type ref="prev"/><name>tuple</name></decl>, *<decl><type ref="prev"/><name>gid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBTxnObject</name> *</type><name>txn</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREPLIST_LEN</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>DB_PREPLIST</name></type> <name><name>preplist</name><index>[<expr><name>PREPLIST_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>retp</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>list</name>=<call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>list</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <while>while <condition>(<expr>!0</expr>)</condition> <block>{
        <decl_stmt><decl><type><name>MYDB_BEGIN_ALLOW_THREADS</name></type>
        <name>err</name><init>=<expr><call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>txn_recover</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>,
                        <argument><expr><name>preplist</name></expr></argument>, <argument><expr><name>PREPLIST_LEN</name></expr></argument>, <argument><expr>&amp;<name>retp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PREPLIST_LEN</name></cpp:undef>
        <macro><name>MYDB_END_ALLOW_THREADS</name></macro>
        <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>retp</name></expr>)</condition><then> <break>break;</break></then></if>
        <expr_stmt><expr><name>flags</name>=<name>DB_NEXT</name></expr>;</expr_stmt>  <comment type="block">/* Prepare for next loop pass */</comment>
        <for>for (<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>retp</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>gid</name>=<call><name>PyBytes_FromStringAndSize</name><argument_list>(<argument><expr><call>(<name>char</name> *)<argument_list>(<argument><expr><name><name>preplist</name><index>[<expr><name>i</name></expr>]</index></name>.<name>gid</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>DB_XIDDATASIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>gid</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>txn</name>=<call><name>newDBTxnObject</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>preplist</name><index>[<expr><name>i</name></expr>]</index></name>.<name>txn</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>txn</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name><name>txn</name>-&gt;<name>flag_prepare</name></name>=1</expr>;</expr_stmt>  <comment type="block">/* Recover state */</comment>
            <expr_stmt><expr><name>tuple</name>=<call><name>PyTuple_New</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>tuple</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* This delete the "gid" also */</comment>
                <return>return <expr><name>NULL</name></expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="block">/* This delete the "gid" and the "txn" also */</comment>
                <return>return <expr><name>NULL</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></while>
    <return>return <expr><name>list</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_txn_begin</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"parent"</expr>, <expr>"flags"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"|Oi:txn_begin"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
                                     <argument><expr>&amp;<name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr>(<name>PyObject</name>*)<call><name>newDBTxnObject</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>(<name>DBTxnObject</name> *)<name>txnobj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_txn_checkpoint</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>kbyte</name><init>=<expr>0</expr></init>, <name>min</name><init>=<expr>0</expr></init>, <name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|iii:txn_checkpoint"</expr></argument>, <argument><expr>&amp;<name>kbyte</name></expr></argument>, <argument><expr>&amp;<name>min</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>txn_checkpoint</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>kbyte</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_tx_max</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:set_tx_max"</expr></argument>, <argument><expr>&amp;<name>max</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_tx_max</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_tx_timestamp</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>stamp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>timestamp</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l:set_tx_timestamp"</expr></argument>, <argument><expr>&amp;<name>stamp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>timestamp</name> = (<name>time_t</name>)<name>stamp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_tx_timestamp</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>&amp;<name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_lock_detect</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>atype</name></decl>, <decl><type ref="prev"/><name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>aborted</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i|i:lock_detect"</expr></argument>, <argument><expr>&amp;<name>atype</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>lock_detect</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr>&amp;<name>aborted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr><name>aborted</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_lock_get</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>locker</name></decl>, <decl><type ref="prev"/><name>lock_mode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>objobj</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iOi|i:lock_get"</expr></argument>, <argument><expr>&amp;<name>locker</name></expr></argument>, <argument><expr>&amp;<name>objobj</name></expr></argument>, <argument><expr>&amp;<name>lock_mode</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>


    <if>if <condition>(<expr>!<call><name>make_dbt</name><argument_list>(<argument><expr><name>objobj</name></expr></argument>, <argument><expr>&amp;<name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <return>return <expr>(<name>PyObject</name>*)<call><name>newDBLockObject</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>locker</name></expr></argument>, <argument><expr>&amp;<name>obj</name></expr></argument>, <argument><expr><name>lock_mode</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_lock_id</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_int32_t</name></type> <name>theID</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>lock_id</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>&amp;<name>theID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name>theID</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_lock_id_free</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_int32_t</name></type> <name>theID</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"I:lock_id_free"</expr></argument>, <argument><expr>&amp;<name>theID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>lock_id_free</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>theID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_lock_put</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBLockObject</name>*</type> <name>dblockobj</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!:lock_put"</expr></argument>, <argument><expr>&amp;<name>DBLock_Type</name></expr></argument>, <argument><expr>&amp;<name>dblockobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>lock_put</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>&amp;<name><name>dblockobj</name>-&gt;<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 44)</expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_lsn_reset</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_int32_t</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"file"</expr>, <expr>"flags"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"z|i:lsn_reset"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
                                     <argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>lsn_reset</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DBVER &gt;= 4.4 */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_log_stat</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_LOG_STAT</name>*</type> <name>statp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_int32_t</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|i:log_stat"</expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>log_stat</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>&amp;<name>statp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Turn the stat structure into a dictionary */</comment>
    <expr_stmt><expr><name>d</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>d</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>statp</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>statp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_ENTRY</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>_addIntToDict(d, #name, statp-&gt;st_##name)</cpp:value></cpp:define>

    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>lg_bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 44)</expr></cpp:if>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>lg_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &lt; 41)</expr></cpp:if>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>lg_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>w_mbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>w_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>wc_mbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>wc_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>wcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>wcount_fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 44)</expr></cpp:if>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>rcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>scount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>cur_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>cur_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>disk_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>disk_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>maxcommitperflush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>mincommitperflush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>regsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>region_wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>region_nowait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAKE_ENTRY</name></cpp:undef>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>statp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>d</name></expr>;</return>
}</block></function> <comment type="block">/* DBEnv_log_stat */</comment>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_lock_stat</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_LOCK_STAT</name>*</type> <name>sp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_int32_t</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|i:lock_stat"</expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>lock_stat</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>&amp;<name>sp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Turn the stat structure into a dictionary */</comment>
    <expr_stmt><expr><name>d</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>d</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_ENTRY</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>_addIntToDict(d, #name, sp-&gt;st_##name)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &lt; 41)</expr></cpp:if>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>lastid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;=41)</expr></cpp:if>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>cur_maxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>nmodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>maxlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>maxlockers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>maxobjects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>nlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>maxnlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>nlockers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>maxnlockers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>nobjects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>maxnobjects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>nrequests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>nreleases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 44)</expr></cpp:if>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>nupgrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>ndowngrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &lt; 44)</expr></cpp:if>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>nnowaits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block">/* these were renamed in 4.4 */</comment>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>nconflicts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>lock_nowait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>lock_wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>ndeadlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 41)</expr></cpp:if>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>locktimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>txntimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>nlocktimeouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>ntxntimeouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 46)</expr></cpp:if>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>objs_wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>objs_nowait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>lockers_wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>lockers_nowait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 47)</expr></cpp:if>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>lock_wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>lock_nowait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>locks_wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>locks_nowait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>hash_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>regsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>region_wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>region_nowait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAKE_ENTRY</name></cpp:undef>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>d</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_log_flush</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>MYDB_BEGIN_ALLOW_THREADS</name></type>
    <name>err</name> <init>= <expr><call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>log_flush</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>MYDB_END_ALLOW_THREADS</name></type>

    <name>RETURN_IF_ERR</name><parameter_list>()</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_log_archive</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> **</type><name>log_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|i:log_archive"</expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>log_archive</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>&amp;<name>log_list</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>list</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>list</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>log_list</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>log_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>log_list</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name> **</type><name>log_list_start</name></decl>;</decl_stmt>
        <for>for (<init><expr><name>log_list_start</name> = <name>log_list</name></expr>;</init> <condition><expr>*<name>log_list</name> != <name>NULL</name></expr>;</condition> <incr><expr>++<name>log_list</name></expr></incr>) <block>{
            <expr_stmt><expr><name>item</name> = <call><name>PyBytes_FromString</name> <argument_list>(<argument><expr>*<name>log_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>item</name> == <name>NULL</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>list</name> = <name>NULL</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
            <if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>list</name> = <name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>log_list_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>list</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_txn_stat</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN_STAT</name>*</type> <name>sp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_int32_t</name></type> <name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|i:txn_stat"</expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>txn_stat</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>&amp;<name>sp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Turn the stat structure into a dictionary */</comment>
    <expr_stmt><expr><name>d</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>d</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_ENTRY</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro>        <cpp:value>_addIntToDict(d, #name, sp-&gt;st_##name)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_TIME_T_ENTRY</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_addTimeTToDict(d, #name, sp-&gt;st_##name)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_DB_LSN_ENTRY</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_addDB_lsnToDict(d, #name, sp-&gt;st_##name)</cpp:value></cpp:define>

    <expr_stmt><expr><call><name>MAKE_DB_LSN_ENTRY</name><argument_list>(<argument><expr><name>last_ckp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_TIME_T_ENTRY</name><argument_list>(<argument><expr><name>time_ckp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>last_txnid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>maxtxns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>nactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>maxnactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 45)</expr></cpp:if>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>nsnapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>maxnsnapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>nbegins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>naborts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>ncommits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>nrestores</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>regsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>region_wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>region_nowait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAKE_DB_LSN_ENTRY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAKE_ENTRY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAKE_TIME_T_ENTRY</name></cpp:undef>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>d</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_get_returns_none</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>oldValue</name><init>=<expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i:set_get_returns_none"</expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>moduleFlags</name>.<name>getReturnsNone</name></name></expr>)</condition><then>
        <expr_stmt><expr>++<name>oldValue</name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>moduleFlags</name>.<name>cursorSetReturnsNone</name></name></expr>)</condition><then>
        <expr_stmt><expr>++<name>oldValue</name></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>moduleFlags</name>.<name>getReturnsNone</name></name> = (<name>flags</name> &gt;= 1)</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>moduleFlags</name>.<name>cursorSetReturnsNone</name></name> = (<name>flags</name> &gt;= 2)</expr>;</expr_stmt>
    <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr><name>oldValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_get_private</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* We can give out the private field even if dbenv is closed */</comment>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>private_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>self</name>-&gt;<name>private_obj</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_private</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>private_obj</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* We can set the private field even if dbenv is closed */</comment>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>private_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>private_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>private_obj</name></name> = <name>private_obj</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_rpc_server</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>host</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>cl_timeout</name><init>=<expr>0</expr></init>, <name>sv_timeout</name><init>=<expr>0</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"host"</expr>, <expr>"cl_timeout"</expr>, <expr>"sv_timeout"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"s|ll:set_rpc_server"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
                                     <argument><expr>&amp;<name>host</name></expr></argument>, <argument><expr>&amp;<name>cl_timeout</name></expr></argument>, <argument><expr>&amp;<name>sv_timeout</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_rpc_server</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>cl_timeout</name></expr></argument>,
            <argument><expr><name>sv_timeout</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_verbose</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>which</name></decl>, <decl><type ref="prev"/><name>onoff</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"ii:set_verbose"</expr></argument>, <argument><expr>&amp;<name>which</name></expr></argument>, <argument><expr>&amp;<name>onoff</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_verbose</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>which</name></expr></argument>, <argument><expr><name>onoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 42)</expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_get_verbose</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>which</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>verbose</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:get_verbose"</expr></argument>, <argument><expr>&amp;<name>which</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>get_verbose</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>which</name></expr></argument>, <argument><expr>&amp;<name>verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>PyBool_FromLong</name><argument_list>(<argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 45)</expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_dbenv_event_notifyCallback</name><parameter_list>(<param><decl><type><name>DB_ENV</name>*</type> <name>db_env</name></decl></param>, <param><decl><type><name>u_int32_t</name></type> <name>event</name></decl></param>, <param><decl><type><name>void</name> *</type><name>event_info</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>DBEnvObject</name> *</type><name>dbenv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>callback</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>args</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_BLOCK_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>dbenv</name> = (<name>DBEnvObject</name> *)<name><name>db_env</name>-&gt;<name>app_private</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>callback</name> = <name><name>dbenv</name>-&gt;<name>event_notifyCallback</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>callback</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>event</name> == <name>DB_EVENT_REP_NEWMASTER</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>args</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(Oii)"</expr></argument>, <argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr>*((<name>int</name> *)<name>event_info</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>args</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(OiO)"</expr></argument>, <argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><name>args</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>PyEval_CallObject</name><argument_list>(<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>(!<name>args</name>) || (!<name>result</name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>MYDB_END_BLOCK_THREADS</name></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 45)</expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_set_event_notify</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>notifyFunc</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>PyCallable_Check</name><argument_list>(<argument><expr><name>notifyFunc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>makeTypeError</name><argument_list>(<argument><expr>"Callable"</expr></argument>, <argument><expr><name>notifyFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>event_notifyCallback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>notifyFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>event_notifyCallback</name></name> = <name>notifyFunc</name></expr>;</expr_stmt>

    <comment type="block">/* This is to workaround a problem with un-initialized threads (see
       comment in DB_associate) */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WITH_THREAD</name></cpp:ifdef>
    <expr_stmt><expr><call><name>PyEval_InitThreads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_event_notify</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>_dbenv_event_notifyCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>notifyFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>self</name>-&gt;<name>event_notifyCallback</name></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/* REPLICATION METHODS: Base Replication */</comment>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_rep_process_message</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>control_py</name></decl>, *<decl><type ref="prev"/><name>rec_py</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>control</name></decl>, <decl><type ref="prev"/><name>rec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>envid</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 42)</expr></cpp:if>
    <decl_stmt><decl><type><name>DB_LSN</name></type> <name>lsn</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"OOi:rep_process_message"</expr></argument>, <argument><expr>&amp;<name>control_py</name></expr></argument>,
                <argument><expr>&amp;<name>rec_py</name></expr></argument>, <argument><expr>&amp;<name>envid</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>make_dbt</name><argument_list>(<argument><expr><name>control_py</name></expr></argument>, <argument><expr>&amp;<name>control</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>make_dbt</name><argument_list>(<argument><expr><name>rec_py</name></expr></argument>, <argument><expr>&amp;<name>rec</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 46)</expr></cpp:if>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>rep_process_message</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>&amp;<name>control</name></expr></argument>, <argument><expr>&amp;<name>rec</name></expr></argument>,
            <argument><expr><name>envid</name></expr></argument>, <argument><expr>&amp;<name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 42)</expr></cpp:if>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>rep_process_message</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>&amp;<name>control</name></expr></argument>, <argument><expr>&amp;<name>rec</name></expr></argument>,
            <argument><expr>&amp;<name>envid</name></expr></argument>, <argument><expr>&amp;<name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>rep_process_message</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>&amp;<name>control</name></expr></argument>, <argument><expr>&amp;<name>rec</name></expr></argument>,
            <argument><expr>&amp;<name>envid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{
        <case>case <expr><name>DB_REP_NEWMASTER</name></expr> :
          <return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(iO)"</expr></argument>, <argument><expr><name>envid</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</return>
          <break>break;</break>

        </case><case>case <expr><name>DB_REP_DUPMASTER</name></expr> :
        </case><case>case <expr><name>DB_REP_HOLDELECTION</name></expr> :
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 44)</expr></cpp:if>
        </case><case>case <expr><name>DB_REP_IGNORE</name></expr> :
        </case><case>case <expr><name>DB_REP_JOIN_FAILURE</name></expr> :
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(iO)"</expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</return>
            <break>break;</break>
        </case><case>case <expr><name>DB_REP_NEWSITE</name></expr> :
            <block>{
                <decl_stmt><decl><type><name>PyObject</name> *</type><name>tmp</name></decl>, *<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

                <if>if <condition>(<expr>!(<name>tmp</name> = <call><name>PyBytes_FromStringAndSize</name><argument_list>(<argument><expr><name><name>rec</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>rec</name>.<name>size</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                    <return>return <expr><name>NULL</name></expr>;</return>
                }</block></then></if>

                <expr_stmt><expr><name>r</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(iO)"</expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>r</name></expr>;</return>
                <break>break;</break>
            }</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 42)</expr></cpp:if>
        </case><case>case <expr><name>DB_REP_NOTPERM</name></expr> :
        </case><case>case <expr><name>DB_REP_ISPERM</name></expr> :
            <return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(i(ll))"</expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>lsn</name>.<name>file</name></name></expr></argument>, <argument><expr><name><name>lsn</name>.<name>offset</name></name></expr></argument>)</argument_list></call></expr>;</return>
            <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </case>}</block></switch>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(OO)"</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_DBEnv_rep_transportCallback</name><parameter_list>(<param><decl><type><name>DB_ENV</name>*</type> <name>db_env</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>DBT</name>*</type> <name>control</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>DBT</name>*</type> <name>rec</name></decl></param>,
        <param><decl><type><specifier>const</specifier> <name>DB_LSN</name> *</type><name>lsn</name></decl></param>, <param><decl><type><name>int</name></type> <name>envid</name></decl></param>, <param><decl><type><name>u_int32_t</name></type> <name>flags</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>DBEnvObject</name> *</type><name>dbenv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>rep_transport</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>args</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>a</name></decl>, *<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name><init>=<expr>0</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_BLOCK_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>dbenv</name> = (<name>DBEnvObject</name> *)<name><name>db_env</name>-&gt;<name>app_private</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rep_transport</name> = <name><name>dbenv</name>-&gt;<name>rep_transport</name></name></expr>;</expr_stmt>

    <comment type="block">/*
    ** The errors in 'a' or 'b' are detected in "Py_BuildValue".
    */</comment>
    <expr_stmt><expr><name>a</name> = <call><name>PyBytes_FromStringAndSize</name><argument_list>(<argument><expr><name><name>control</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>control</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> = <call><name>PyBytes_FromStringAndSize</name><argument_list>(<argument><expr><name><name>rec</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>rec</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>args</name> = <call><name>Py_BuildValue</name><argument_list>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &gt;= 0x02040000)</expr></cpp:if>
            <argument><expr>"(OOO(ll)iI)"</expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <argument><expr>"(OOO(ll)ii)"</expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <argument><expr><name>dbenv</name></expr></argument>,
            <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>,
            <argument><expr><name><name>lsn</name>-&gt;<name>file</name></name></expr></argument>, <argument><expr><name><name>lsn</name>-&gt;<name>offset</name></name></expr></argument>, <argument><expr><name>envid</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>args</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>result</name> = <call><name>PyEval_CallObject</name><argument_list>(<argument><expr><name>rep_transport</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr>(!<name>args</name>) || (!<name>result</name>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> = -1</expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_BLOCK_THREADS</name></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &lt;= 41)</expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>_DBEnv_rep_transportCallbackOLD</name><parameter_list>(<param><decl><type><name>DB_ENV</name>*</type> <name>db_env</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>DBT</name>*</type> <name>control</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>DBT</name>*</type> <name>rec</name></decl></param>,
        <param><decl><type><name>int</name></type> <name>envid</name></decl></param>, <param><decl><type><name>u_int32_t</name></type> <name>flags</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>DB_LSN</name></type> <name>lsn</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>lsn</name>.<name>file</name></name> = -1</expr>;</expr_stmt>  <comment type="block">/* Dummy values */</comment>
    <expr_stmt><expr><name><name>lsn</name>.<name>offset</name></name> = -1</expr>;</expr_stmt>
    <return>return <expr><call><name>_DBEnv_rep_transportCallback</name><argument_list>(<argument><expr><name>db_env</name></expr></argument>, <argument><expr><name>control</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr>&amp;<name>lsn</name></expr></argument>, <argument><expr><name>envid</name></expr></argument>,
            <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_rep_set_transport</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>envid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>rep_transport</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iO:rep_set_transport"</expr></argument>, <argument><expr>&amp;<name>envid</name></expr></argument>, <argument><expr>&amp;<name>rep_transport</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>PyCallable_Check</name><argument_list>(<argument><expr><name>rep_transport</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>makeTypeError</name><argument_list>(<argument><expr>"Callable"</expr></argument>, <argument><expr><name>rep_transport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;=45)</expr></cpp:if>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>rep_set_transport</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>envid</name></expr></argument>,
            <argument><expr>&amp;<name>_DBEnv_rep_transportCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 42)</expr></cpp:if>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_rep_transport</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>envid</name></expr></argument>,
            <argument><expr>&amp;<name>_DBEnv_rep_transportCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>set_rep_transport</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>envid</name></expr></argument>,
            <argument><expr>&amp;<name>_DBEnv_rep_transportCallbackOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>rep_transport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>rep_transport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>rep_transport</name></name> = <name>rep_transport</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 47)</expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_rep_set_request</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>minimum</name></decl>, <decl><type ref="prev"/><name>maximum</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"II:rep_set_request"</expr></argument>, <argument><expr>&amp;<name>minimum</name></expr></argument>, <argument><expr>&amp;<name>maximum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>rep_set_request</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>minimum</name></expr></argument>, <argument><expr><name>maximum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_rep_get_request</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_int32_t</name></type> <name>minimum</name></decl>, <decl><type ref="prev"/><name>maximum</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>rep_get_request</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>&amp;<name>minimum</name></expr></argument>, <argument><expr>&amp;<name>maximum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &gt;= 0x02040000)</expr></cpp:if>
    <return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"II"</expr></argument>, <argument><expr><name>minimum</name></expr></argument>, <argument><expr><name>maximum</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ii"</expr></argument>, <argument><expr><name>minimum</name></expr></argument>, <argument><expr><name>maximum</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 45)</expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_rep_set_limit</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>limit</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i:rep_set_limit"</expr></argument>, <argument><expr>&amp;<name>limit</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>rep_set_limit</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_rep_get_limit</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_int32_t</name></type> <name>gbytes</name></decl>, <decl><type ref="prev"/><name>bytes</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>rep_get_limit</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>&amp;<name>gbytes</name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 44)</expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_rep_set_config</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>which</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>onoff</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ii:rep_set_config"</expr></argument>, <argument><expr>&amp;<name>which</name></expr></argument>, <argument><expr>&amp;<name>onoff</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>rep_set_config</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>which</name></expr></argument>, <argument><expr><name>onoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_rep_get_config</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>which</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>onoff</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:rep_get_config"</expr></argument>, <argument><expr>&amp;<name>which</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>rep_get_config</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>which</name></expr></argument>, <argument><expr>&amp;<name>onoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>PyBool_FromLong</name><argument_list>(<argument><expr><name>onoff</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 46)</expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_rep_elect</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_int32_t</name></type> <name>nsites</name></decl>, <decl><type ref="prev"/><name>nvotes</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"II:rep_elect"</expr></argument>, <argument><expr>&amp;<name>nsites</name></expr></argument>, <argument><expr>&amp;<name>nvotes</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>rep_elect</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>nvotes</name></expr></argument>, <argument><expr><name>nvotes</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_rep_start</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>cdata_py</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>cdata</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{<expr>"flags"</expr>,<expr>"cdata"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>,
                <argument><expr>"i|O:rep_start"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>cdata_py</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
	    <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>make_dbt</name><argument_list>(<argument><expr><name>cdata_py</name></expr></argument>, <argument><expr>&amp;<name>cdata</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>rep_start</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name><name>cdata</name>.<name>size</name></name> ? &amp;<name>cdata</name> : <name>NULL</name></expr></argument>,
            <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 44)</expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_rep_sync</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>rep_sync</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 45)</expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_rep_set_nsites</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nsites</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:rep_set_nsites"</expr></argument>, <argument><expr>&amp;<name>nsites</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>rep_set_nsites</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>nsites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_rep_get_nsites</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 47)</expr></cpp:if>
    <decl_stmt><decl><type><name>u_int32_t</name></type> <name>nsites</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>int</name></type> <name>nsites</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>rep_get_nsites</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>&amp;<name>nsites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr><name>nsites</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_rep_set_priority</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>priority</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:rep_set_priority"</expr></argument>, <argument><expr>&amp;<name>priority</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>rep_set_priority</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_rep_get_priority</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 47)</expr></cpp:if>
    <decl_stmt><decl><type><name>u_int32_t</name></type> <name>priority</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>int</name></type> <name>priority</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>rep_get_priority</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>&amp;<name>priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_rep_set_timeout</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>which</name></decl>, <decl><type ref="prev"/><name>timeout</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"ii:rep_set_timeout"</expr></argument>, <argument><expr>&amp;<name>which</name></expr></argument>, <argument><expr>&amp;<name>timeout</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>rep_set_timeout</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>which</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_rep_get_timeout</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>which</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_int32_t</name></type> <name>timeout</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:rep_get_timeout"</expr></argument>, <argument><expr>&amp;<name>which</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>rep_get_timeout</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>which</name></expr></argument>, <argument><expr>&amp;<name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/* REPLICATION METHODS: Replication Manager */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 45)</expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_repmgr_start</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type>
        <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{<expr>"nthreads"</expr>,<expr>"flags"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>,
                <argument><expr>"ii:repmgr_start"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>, <argument><expr>&amp;<name>nthreads</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
	    <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>repmgr_start</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_repmgr_set_local_site</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type>
        <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>host</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{<expr>"host"</expr>, <expr>"port"</expr>, <expr>"flags"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>,
                <argument><expr>"si|i:repmgr_set_local_site"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>, <argument><expr>&amp;<name>host</name></expr></argument>, <argument><expr>&amp;<name>port</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
	    <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>repmgr_set_local_site</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_repmgr_add_remote_site</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type>
        <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>host</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>eidp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{<expr>"host"</expr>, <expr>"port"</expr>, <expr>"flags"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>,
                <argument><expr>"si|i:repmgr_add_remote_site"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>, <argument><expr>&amp;<name>host</name></expr></argument>, <argument><expr>&amp;<name>port</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
	    <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>repmgr_add_remote_site</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr>&amp;<name>eidp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr><name>eidp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_repmgr_set_ack_policy</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ack_policy</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:repmgr_set_ack_policy"</expr></argument>, <argument><expr>&amp;<name>ack_policy</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
	    <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>repmgr_set_ack_policy</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>ack_policy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_repmgr_get_ack_policy</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ack_policy</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>repmgr_get_ack_policy</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>&amp;<name>ack_policy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr><name>ack_policy</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_repmgr_site_list</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>countp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_REPMGR_SITE</name> *</type><name>listp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>stats</name></decl>, *<decl><type ref="prev"/><name>key</name></decl>, *<decl><type ref="prev"/><name>tuple</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>repmgr_site_list</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>&amp;<name>countp</name></expr></argument>, <argument><expr>&amp;<name>listp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>stats</name>=<call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>stats</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>listp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <for>for(<init>;</init><condition><expr><name>countp</name>--</expr>;</condition><incr/>) <block>{
        <expr_stmt><expr><name>key</name>=<call><name>NUMBER_FromLong</name><argument_list>(<argument><expr><name><name>listp</name><index>[<expr><name>countp</name></expr>]</index></name>.<name>eid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr>!<name>key</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>listp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &gt;= 0x02040000)</expr></cpp:if>
        <expr_stmt><expr><name>tuple</name>=<call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(sII)"</expr></argument>, <argument><expr><name><name>listp</name><index>[<expr><name>countp</name></expr>]</index></name>.<name>host</name></expr></argument>,
                <argument><expr><name><name>listp</name><index>[<expr><name>countp</name></expr>]</index></name>.<name>port</name></expr></argument>, <argument><expr><name><name>listp</name><index>[<expr><name>countp</name></expr>]</index></name>.<name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name>tuple</name>=<call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(sii)"</expr></argument>, <argument><expr><name><name>listp</name><index>[<expr><name>countp</name></expr>]</index></name>.<name>host</name></expr></argument>,
                <argument><expr><name><name>listp</name><index>[<expr><name>countp</name></expr>]</index></name>.<name>port</name></expr></argument>, <argument><expr><name><name>listp</name><index>[<expr><name>countp</name></expr>]</index></name>.<name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <if>if<condition>(<expr>!<name>tuple</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>listp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <if>if<condition>(<expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>stats</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>listp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>listp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>stats</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 46)</expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_repmgr_stat_print</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"flags"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"|i:repmgr_stat_print"</expr></argument>,
                <argument><expr><name>kwnames</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>repmgr_stat_print</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_repmgr_stat</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_REPMGR_STAT</name> *</type><name>statp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>stats</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"flags"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"|i:repmgr_stat"</expr></argument>,
                <argument><expr><name>kwnames</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>repmgr_stat</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>&amp;<name>statp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>stats</name>=<call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>stats</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>statp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_ENTRY</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>_addIntToDict(stats, #name, statp-&gt;st_##name)</cpp:value></cpp:define>

    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>perm_failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>msgs_queued</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>msgs_dropped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>connection_drop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_ENTRY</name><argument_list>(<argument><expr><name>connect_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAKE_ENTRY</name></cpp:undef>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>statp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>stats</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/* DBTxn methods */</comment>


<function><type><specifier>static</specifier> <name>void</name></type> <name>_close_transaction_cursors</name><parameter_list>(<param><decl><type><name>DBTxnObject</name>*</type> <name>txn</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>dummy</name></decl>;</decl_stmt>

    <while>while<condition>(<expr><name><name>txn</name>-&gt;<name>children_cursors</name></name></expr>)</condition> <block>{
        <expr_stmt><expr><call><name>PyErr_Warn</name><argument_list>(<argument><expr><name>PyExc_RuntimeWarning</name></expr></argument>,
            <argument><expr>"Must close cursors before resolving a transaction."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dummy</name>=<call><name>DBC_close_internal</name><argument_list>(<argument><expr><name><name>txn</name>-&gt;<name>children_cursors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_promote_transaction_dbs_and_sequences</name><parameter_list>(<param><decl><type><name>DBTxnObject</name> *</type><name>txn</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>DBObject</name> *</type><name>db</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
    <decl_stmt><decl><type><name>DBSequenceObject</name> *</type><name>dbs</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <while>while <condition>(<expr><name><name>txn</name>-&gt;<name>children_dbs</name></name></expr>)</condition> <block>{
        <expr_stmt><expr><name>db</name>=<name><name>txn</name>-&gt;<name>children_dbs</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXTRACT_FROM_DOUBLE_LINKED_LIST_TXN</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>txn</name>-&gt;<name>parent_txn</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>INSERT_IN_DOUBLE_LINKED_LIST_TXN</name><argument_list>(<argument><expr><name><name>txn</name>-&gt;<name>parent_txn</name>-&gt;<name>children_dbs</name></name></expr></argument>,<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>db</name>-&gt;<name>txn</name></name>=<name><name>txn</name>-&gt;<name>parent_txn</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="block">/* The db is already linked to its environment,
            ** so nothing to do.
            */</comment>
            <expr_stmt><expr><name><name>db</name>-&gt;<name>txn</name></name>=<name>NULL</name></expr>;</expr_stmt> 
        }</block></else></if>
    }</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
    <while>while <condition>(<expr><name><name>txn</name>-&gt;<name>children_sequences</name></name></expr>)</condition> <block>{
        <expr_stmt><expr><name>dbs</name>=<name><name>txn</name>-&gt;<name>children_sequences</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXTRACT_FROM_DOUBLE_LINKED_LIST_TXN</name><argument_list>(<argument><expr><name>dbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>txn</name>-&gt;<name>parent_txn</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>INSERT_IN_DOUBLE_LINKED_LIST_TXN</name><argument_list>(<argument><expr><name><name>txn</name>-&gt;<name>parent_txn</name>-&gt;<name>children_sequences</name></name></expr></argument>,<argument><expr><name>dbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dbs</name>-&gt;<name>txn</name></name>=<name><name>txn</name>-&gt;<name>parent_txn</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="block">/* The sequence is already linked to its
            ** parent db. Nothing to do.
            */</comment>
            <expr_stmt><expr><name><name>dbs</name>-&gt;<name>txn</name></name>=<name>NULL</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBTxn_commit</name><parameter_list>(<param><decl><type><name>DBTxnObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name><init>=<expr>0</expr></init>, <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|i:commit"</expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>_close_transaction_cursors</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>txn</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>t</name> <init>=  <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(is)"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"DBTxn must not be used "
                                     "after txn_commit, txn_abort "
                                     "or txn_discard"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>t</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>DBError</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>flag_prepare</name></name>=0</expr>;</expr_stmt>
    <expr_stmt><expr><name>txn</name> = <name><name>self</name>-&gt;<name>txn</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>txn</name></name> = <name>NULL</name></expr>;</expr_stmt>   <comment type="block">/* this DB_TXN is no longer valid after this call */</comment>

    <expr_stmt><expr><call><name>EXTRACT_FROM_DOUBLE_LINKED_LIST</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>txn</name>-&gt;<name>commit</name></name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>_promote_transaction_dbs_and_sequences</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBTxn_prepare</name><parameter_list>(<param><decl><type><name>DBTxnObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>*</type> <name>gid</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>   <name>gid_size</name><init>=<expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#:prepare"</expr></argument>, <argument><expr>&amp;<name>gid</name></expr></argument>, <argument><expr>&amp;<name>gid_size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>gid_size</name> != <name>DB_XIDDATASIZE</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                        <argument><expr>"gid must be DB_XIDDATASIZE bytes long"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>txn</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>t</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(is)"</expr></argument>, <argument><expr>0</expr></argument>,<argument><expr>"DBTxn must not be used "
                                    "after txn_commit, txn_abort "
                                    "or txn_discard"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>t</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>DBError</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>flag_prepare</name></name>=1</expr>;</expr_stmt>  <comment type="block">/* Prepare state */</comment>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>txn</name>-&gt;<name>prepare</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>txn</name></name></expr></argument>, <argument><expr>(<name>u_int8_t</name>*)<name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBTxn_abort_discard_internal</name><parameter_list>(<param><decl><type><name>DBTxnObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>int</name></type> <name>discard</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>dummy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>txn</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>t</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(is)"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"DBTxn must not be used "
                                    "after txn_commit, txn_abort "
                                    "or txn_discard"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>t</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>DBError</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>txn</name> = <name><name>self</name>-&gt;<name>txn</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>txn</name></name> = <name>NULL</name></expr>;</expr_stmt>   <comment type="block">/* this DB_TXN is no longer valid after this call */</comment>

    <expr_stmt><expr><call><name>_close_transaction_cursors</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
    <while>while <condition>(<expr><name><name>self</name>-&gt;<name>children_sequences</name></name></expr>)</condition> <block>{
        <expr_stmt><expr><name>dummy</name>=<call><name>DBSequence_close_internal</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>children_sequences</name></name></expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <while>while <condition>(<expr><name><name>self</name>-&gt;<name>children_dbs</name></name></expr>)</condition> <block>{
        <expr_stmt><expr><name>dummy</name>=<call><name>DB_close_internal</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>children_dbs</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <expr_stmt><expr><call><name>EXTRACT_FROM_DOUBLE_LINKED_LIST</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>discard</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>!<name><name>self</name>-&gt;<name>flag_prepare</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> = <call><name><name>txn</name>-&gt;<name>discard</name></name><argument_list>(<argument><expr><name>txn</name></expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <comment type="block">/*
        ** If the transaction is in the "prepare" or "recover" state,
        ** we better do not implicitly abort it.
        */</comment>
        <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>flag_prepare</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>err</name> = <call><name><name>txn</name>-&gt;<name>abort</name></name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></else></if>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBTxn_abort</name><parameter_list>(<param><decl><type><name>DBTxnObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>self</name>-&gt;<name>flag_prepare</name></name>=0</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_close_transaction_cursors</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>DBTxn_abort_discard_internal</name><argument_list>(<argument><expr><name>self</name></expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBTxn_discard</name><parameter_list>(<param><decl><type><name>DBTxnObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>self</name>-&gt;<name>flag_prepare</name></name>=0</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_close_transaction_cursors</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>DBTxn_abort_discard_internal</name><argument_list>(<argument><expr><name>self</name></expr></argument>,<argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBTxn_id</name><parameter_list>(<param><decl><type><name>DBTxnObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>txn</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>t</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(is)"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"DBTxn must not be used "
                                    "after txn_commit, txn_abort "
                                    "or txn_discard"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>t</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>DBError</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>id</name> = <call><name><name>self</name>-&gt;<name>txn</name>-&gt;<name>id</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/* DBSequence methods */</comment>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBSequence_close_internal</name><parameter_list>(<param><decl><type><name>DBSequenceObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>, <param><decl><type><name>int</name></type> <name>do_not_close</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name><init>=<expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>self</name>-&gt;<name>sequence</name></name>!=<name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>EXTRACT_FROM_DOUBLE_LINKED_LIST</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>self</name>-&gt;<name>txn</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>EXTRACT_FROM_DOUBLE_LINKED_LIST_TXN</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name>-&gt;<name>txn</name></name>=<name>NULL</name></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/*
        ** "do_not_close" is used to dispose all related objects in the
        ** tree, without actually releasing the "root" object.
        ** This is done, for example, because function calls like
        ** "DBSequence.remove()" implicitly close the underlying handle. So
        ** the handle doesn't need to be closed, but related objects
        ** must be cleaned up.
        */</comment>
        <if>if <condition>(<expr>!<name>do_not_close</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>MYDB_BEGIN_ALLOW_THREADS</name></type>
            <name>err</name> <init>= <expr><call><name><name>self</name>-&gt;<name>sequence</name>-&gt;<name>close</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>sequence</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr></expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>sequence</name></name> = <name>NULL</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBSequence_close</name><parameter_list>(<param><decl><type><name>DBSequenceObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"|i:close"</expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <return>return <expr><call><name>DBSequence_close_internal</name><argument_list>(<argument><expr><name>self</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBSequence_get</name><parameter_list>(<param><decl><type><name>DBSequenceObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>db_seq_t</name></type> <name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{<expr>"delta"</expr>, <expr>"txn"</expr>, <expr>"flags"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"|iOi:get"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>, <argument><expr>&amp;<name>delta</name></expr></argument>, <argument><expr>&amp;<name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <macro><name>CHECK_SEQUENCE_NOT_CLOSED</name><argument_list>(<argument>self</argument>)</argument_list></macro>

    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>MYDB_BEGIN_ALLOW_THREADS</name></type>
    <name>err</name> <init>= <expr><call><name><name>self</name>-&gt;<name>sequence</name>-&gt;<name>get</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>sequence</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>MYDB_END_ALLOW_THREADS</name></type>

    <name>RETURN_IF_ERR</name><parameter_list>()</parameter_list>;</function_decl>
    <return>return <expr><call><name>PyLong_FromLongLong</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBSequence_get_dbp</name><parameter_list>(<param><decl><type><name>DBSequenceObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <macro><name>CHECK_SEQUENCE_NOT_CLOSED</name><argument_list>(<argument>self</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mydb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>(<name>PyObject</name>* )<name><name>self</name>-&gt;<name>mydb</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBSequence_get_key</name><parameter_list>(<param><decl><type><name>DBSequenceObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>retval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>key</name>.<name>flags</name></name> = <name>DB_DBT_MALLOC</name></expr>;</expr_stmt>
    <macro><name>CHECK_SEQUENCE_NOT_CLOSED</name><argument_list>(<argument>self</argument>)</argument_list></macro>
    <decl_stmt><decl><type><name>MYDB_BEGIN_ALLOW_THREADS</name></type>
    <name>err</name> <init>= <expr><call><name><name>self</name>-&gt;<name>sequence</name>-&gt;<name>get_key</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>sequence</name></name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <macro><name>MYDB_END_ALLOW_THREADS</name></macro>

    <if>if <condition>(<expr>!<name>err</name></expr>)</condition><then>
        <expr_stmt><expr><name>retval</name> = <call><name>Build_PyString</name><argument_list>(<argument><expr><name><name>key</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>key</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><call><name>FREE_DBT</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBSequence_init_value</name><parameter_list>(<param><decl><type><name>DBSequenceObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PY_LONG_LONG</name></type> <name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>db_seq_t</name></type> <name>value2</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"L:init_value"</expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <macro><name>CHECK_SEQUENCE_NOT_CLOSED</name><argument_list>(<argument>self</argument>)</argument_list></macro>

    <expr_stmt><expr><name>value2</name>=<name>value</name></expr>;</expr_stmt> <comment type="block">/* If truncation, compiler should show a warning */</comment>
    <decl_stmt><decl><type><name>MYDB_BEGIN_ALLOW_THREADS</name></type>
    <name>err</name> <init>= <expr><call><name><name>self</name>-&gt;<name>sequence</name>-&gt;<name>initial_value</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>sequence</name></name></expr></argument>, <argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>MYDB_END_ALLOW_THREADS</name></type>

    <name>RETURN_IF_ERR</name><parameter_list>()</parameter_list>;</function_decl>

    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBSequence_open</name><parameter_list>(<param><decl><type><name>DBSequenceObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>keyobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{<expr>"key"</expr>, <expr>"txn"</expr>, <expr>"flags"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"O|Oi:open"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>, <argument><expr>&amp;<name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<call><name>make_key_dbt</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mydb</name></name></expr></argument>, <argument><expr><name>keyobj</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>MYDB_BEGIN_ALLOW_THREADS</name></type>
    <name>err</name> <init>= <expr><call><name><name>self</name>-&gt;<name>sequence</name>-&gt;<name>open</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>sequence</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>MYDB_END_ALLOW_THREADS</name></type>

    <name>FREE_DBT</name><parameter_list>(<param><decl><type><name>key</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>txn</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>INSERT_IN_DOUBLE_LINKED_LIST_TXN</name><argument_list>(<argument><expr>((<name>DBTxnObject</name> *)<name>txnobj</name>)-&gt;<name>children_sequences</name></expr></argument>,<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name>-&gt;<name>txn</name></name>=(<name>DBTxnObject</name> *)<name>txnobj</name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBSequence_remove</name><parameter_list>(<param><decl><type><name>DBSequenceObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>dummy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>txnobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_TXN</name> *</type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{<expr>"txn"</expr>, <expr>"flags"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"|Oi:remove"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>, <argument><expr>&amp;<name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<call><name>checkTxnObj</name><argument_list>(<argument><expr><name>txnobj</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <macro><name>CHECK_SEQUENCE_NOT_CLOSED</name><argument_list>(<argument>self</argument>)</argument_list></macro>

    <decl_stmt><decl><type><name>MYDB_BEGIN_ALLOW_THREADS</name></type>
    <name>err</name> <init>= <expr><call><name><name>self</name>-&gt;<name>sequence</name>-&gt;<name>remove</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>sequence</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MYDB_END_ALLOW_THREADS</name></type>

    <name>dummy</name><init>=<expr><call><name>DBSequence_close_internal</name><argument_list>(<argument><expr><name>self</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBSequence_set_cachesize</name><parameter_list>(<param><decl><type><name>DBSequenceObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i:set_cachesize"</expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <macro><name>CHECK_SEQUENCE_NOT_CLOSED</name><argument_list>(<argument>self</argument>)</argument_list></macro>

    <decl_stmt><decl><type><name>MYDB_BEGIN_ALLOW_THREADS</name></type>
    <name>err</name> <init>= <expr><call><name><name>self</name>-&gt;<name>sequence</name>-&gt;<name>set_cachesize</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>sequence</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>MYDB_END_ALLOW_THREADS</name></type>

    <name>RETURN_IF_ERR</name><parameter_list>()</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBSequence_get_cachesize</name><parameter_list>(<param><decl><type><name>DBSequenceObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

    <macro><name>CHECK_SEQUENCE_NOT_CLOSED</name><argument_list>(<argument>self</argument>)</argument_list></macro>

    <decl_stmt><decl><type><name>MYDB_BEGIN_ALLOW_THREADS</name></type>
    <name>err</name> <init>= <expr><call><name><name>self</name>-&gt;<name>sequence</name>-&gt;<name>get_cachesize</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>sequence</name></name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>MYDB_END_ALLOW_THREADS</name></type>

    <name>RETURN_IF_ERR</name><parameter_list>()</parameter_list>;</function_decl>
    <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBSequence_set_flags</name><parameter_list>(<param><decl><type><name>DBSequenceObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i:set_flags"</expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <macro><name>CHECK_SEQUENCE_NOT_CLOSED</name><argument_list>(<argument>self</argument>)</argument_list></macro>

    <decl_stmt><decl><type><name>MYDB_BEGIN_ALLOW_THREADS</name></type>
    <name>err</name> <init>= <expr><call><name><name>self</name>-&gt;<name>sequence</name>-&gt;<name>set_flags</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>sequence</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>MYDB_END_ALLOW_THREADS</name></type>

    <name>RETURN_IF_ERR</name><parameter_list>()</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBSequence_get_flags</name><parameter_list>(<param><decl><type><name>DBSequenceObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

    <macro><name>CHECK_SEQUENCE_NOT_CLOSED</name><argument_list>(<argument>self</argument>)</argument_list></macro>

    <decl_stmt><decl><type><name>MYDB_BEGIN_ALLOW_THREADS</name></type>
    <name>err</name> <init>= <expr><call><name><name>self</name>-&gt;<name>sequence</name>-&gt;<name>get_flags</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>sequence</name></name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>MYDB_END_ALLOW_THREADS</name></type>

    <name>RETURN_IF_ERR</name><parameter_list>()</parameter_list>;</function_decl>
    <return>return <expr><call><name>NUMBER_FromLong</name><argument_list>(<argument><expr>(<name>int</name>)<name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBSequence_set_range</name><parameter_list>(<param><decl><type><name>DBSequenceObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PY_LONG_LONG</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>db_seq_t</name></type> <name>min2</name></decl>, <decl><type ref="prev"/><name>max2</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"(LL):set_range"</expr></argument>, <argument><expr>&amp;<name>min</name></expr></argument>, <argument><expr>&amp;<name>max</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <macro><name>CHECK_SEQUENCE_NOT_CLOSED</name><argument_list>(<argument>self</argument>)</argument_list></macro>

    <expr_stmt><expr><name>min2</name>=<name>min</name></expr>;</expr_stmt>  <comment type="block">/* If truncation, compiler should show a warning */</comment>
    <expr_stmt><expr><name>max2</name>=<name>max</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>MYDB_BEGIN_ALLOW_THREADS</name></type>
    <name>err</name> <init>= <expr><call><name><name>self</name>-&gt;<name>sequence</name>-&gt;<name>set_range</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>sequence</name></name></expr></argument>, <argument><expr><name>min2</name></expr></argument>, <argument><expr><name>max2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>MYDB_END_ALLOW_THREADS</name></type>

    <name>RETURN_IF_ERR</name><parameter_list>()</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBSequence_get_range</name><parameter_list>(<param><decl><type><name>DBSequenceObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PY_LONG_LONG</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>db_seq_t</name></type> <name>min2</name></decl>, <decl><type ref="prev"/><name>max2</name></decl>;</decl_stmt>

    <macro><name>CHECK_SEQUENCE_NOT_CLOSED</name><argument_list>(<argument>self</argument>)</argument_list></macro>

    <decl_stmt><decl><type><name>MYDB_BEGIN_ALLOW_THREADS</name></type>
    <name>err</name> <init>= <expr><call><name><name>self</name>-&gt;<name>sequence</name>-&gt;<name>get_range</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>sequence</name></name></expr></argument>, <argument><expr>&amp;<name>min2</name></expr></argument>, <argument><expr>&amp;<name>max2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>MYDB_END_ALLOW_THREADS</name></type>

    <name>RETURN_IF_ERR</name><parameter_list>()</parameter_list>;</function_decl>
    <expr_stmt><expr><name>min</name>=<name>min2</name></expr>;</expr_stmt>  <comment type="block">/* If truncation, compiler should show a warning */</comment>
    <expr_stmt><expr><name>max</name>=<name>max2</name></expr>;</expr_stmt>
    <return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(LL)"</expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBSequence_stat</name><parameter_list>(<param><decl><type><name>DBSequenceObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DB_SEQUENCE_STAT</name>*</type> <name>sp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>dict_stat</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{<expr>"flags"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"|i:stat"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>CHECK_SEQUENCE_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>MYDB_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name><name>self</name>-&gt;<name>sequence</name>-&gt;<name>stat</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>sequence</name></name></expr></argument>, <argument><expr>&amp;<name>sp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MYDB_END_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RETURN_IF_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>(<name>dict_stat</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_INT_ENTRY</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>_addIntToDict(dict_stat, #name, sp-&gt;st_##name)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_LONG_LONG_ENTRY</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>_addDb_seq_tToDict(dict_stat, #name, sp-&gt;st_##name)</cpp:value></cpp:define>

    <expr_stmt><expr><call><name>MAKE_INT_ENTRY</name><argument_list>(<argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_INT_ENTRY</name><argument_list>(<argument><expr><name>nowait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_LONG_LONG_ENTRY</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_LONG_LONG_ENTRY</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_LONG_LONG_ENTRY</name><argument_list>(<argument><expr><name>last_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_LONG_LONG_ENTRY</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_LONG_LONG_ENTRY</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_INT_ENTRY</name><argument_list>(<argument><expr><name>cache_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_INT_ENTRY</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAKE_INT_ENTRY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAKE_LONG_LONG_ENTRY</name></cpp:undef>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>dict_stat</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/* Method definition tables and type objects */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>DB_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"append"</expr>,          <expr>(<name>PyCFunction</name>)<name>DB_append</name></expr>,         <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"associate"</expr>,       <expr>(<name>PyCFunction</name>)<name>DB_associate</name></expr>,      <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"close"</expr>,           <expr>(<name>PyCFunction</name>)<name>DB_close</name></expr>,          <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"consume"</expr>,         <expr>(<name>PyCFunction</name>)<name>DB_consume</name></expr>,        <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"consume_wait"</expr>,    <expr>(<name>PyCFunction</name>)<name>DB_consume_wait</name></expr>,   <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"cursor"</expr>,          <expr>(<name>PyCFunction</name>)<name>DB_cursor</name></expr>,         <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"delete"</expr>,          <expr>(<name>PyCFunction</name>)<name>DB_delete</name></expr>,         <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"fd"</expr>,              <expr>(<name>PyCFunction</name>)<name>DB_fd</name></expr>,             <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"get"</expr>,             <expr>(<name>PyCFunction</name>)<name>DB_get</name></expr>,            <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"pget"</expr>,            <expr>(<name>PyCFunction</name>)<name>DB_pget</name></expr>,           <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"get_both"</expr>,        <expr>(<name>PyCFunction</name>)<name>DB_get_both</name></expr>,       <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"get_byteswapped"</expr>, <expr>(<name>PyCFunction</name>)<name>DB_get_byteswapped</name></expr>,<expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"get_size"</expr>,        <expr>(<name>PyCFunction</name>)<name>DB_get_size</name></expr>,       <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"get_type"</expr>,        <expr>(<name>PyCFunction</name>)<name>DB_get_type</name></expr>,       <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"join"</expr>,            <expr>(<name>PyCFunction</name>)<name>DB_join</name></expr>,           <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"key_range"</expr>,       <expr>(<name>PyCFunction</name>)<name>DB_key_range</name></expr>,      <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"has_key"</expr>,         <expr>(<name>PyCFunction</name>)<name>DB_has_key</name></expr>,        <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"items"</expr>,           <expr>(<name>PyCFunction</name>)<name>DB_items</name></expr>,          <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"keys"</expr>,            <expr>(<name>PyCFunction</name>)<name>DB_keys</name></expr>,           <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"open"</expr>,            <expr>(<name>PyCFunction</name>)<name>DB_open</name></expr>,           <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"put"</expr>,             <expr>(<name>PyCFunction</name>)<name>DB_put</name></expr>,            <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"remove"</expr>,          <expr>(<name>PyCFunction</name>)<name>DB_remove</name></expr>,         <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"rename"</expr>,          <expr>(<name>PyCFunction</name>)<name>DB_rename</name></expr>,         <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_bt_minkey"</expr>,   <expr>(<name>PyCFunction</name>)<name>DB_set_bt_minkey</name></expr>,  <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_bt_compare"</expr>,  <expr>(<name>PyCFunction</name>)<name>DB_set_bt_compare</name></expr>, <expr><name>METH_O</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_cachesize"</expr>,   <expr>(<name>PyCFunction</name>)<name>DB_set_cachesize</name></expr>,  <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 41)</expr></cpp:if>
    <expr><block>{<expr>"set_encrypt"</expr>,     <expr>(<name>PyCFunction</name>)<name>DB_set_encrypt</name></expr>,    <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{<expr>"set_flags"</expr>,       <expr>(<name>PyCFunction</name>)<name>DB_set_flags</name></expr>,      <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_h_ffactor"</expr>,   <expr>(<name>PyCFunction</name>)<name>DB_set_h_ffactor</name></expr>,  <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_h_nelem"</expr>,     <expr>(<name>PyCFunction</name>)<name>DB_set_h_nelem</name></expr>,    <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_lorder"</expr>,      <expr>(<name>PyCFunction</name>)<name>DB_set_lorder</name></expr>,     <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_pagesize"</expr>,    <expr>(<name>PyCFunction</name>)<name>DB_set_pagesize</name></expr>,   <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_re_delim"</expr>,    <expr>(<name>PyCFunction</name>)<name>DB_set_re_delim</name></expr>,   <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_re_len"</expr>,      <expr>(<name>PyCFunction</name>)<name>DB_set_re_len</name></expr>,     <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_re_pad"</expr>,      <expr>(<name>PyCFunction</name>)<name>DB_set_re_pad</name></expr>,     <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_re_source"</expr>,   <expr>(<name>PyCFunction</name>)<name>DB_set_re_source</name></expr>,  <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_q_extentsize"</expr>,<expr>(<name>PyCFunction</name>)<name>DB_set_q_extentsize</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_private"</expr>,     <expr>(<name>PyCFunction</name>)<name>DB_set_private</name></expr>,    <expr><name>METH_O</name></expr>}</block></expr>,
    <expr><block>{<expr>"get_private"</expr>,     <expr>(<name>PyCFunction</name>)<name>DB_get_private</name></expr>,    <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"stat"</expr>,            <expr>(<name>PyCFunction</name>)<name>DB_stat</name></expr>,           <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"sync"</expr>,            <expr>(<name>PyCFunction</name>)<name>DB_sync</name></expr>,           <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"truncate"</expr>,        <expr>(<name>PyCFunction</name>)<name>DB_truncate</name></expr>,       <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"type"</expr>,            <expr>(<name>PyCFunction</name>)<name>DB_get_type</name></expr>,       <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"upgrade"</expr>,         <expr>(<name>PyCFunction</name>)<name>DB_upgrade</name></expr>,        <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"values"</expr>,          <expr>(<name>PyCFunction</name>)<name>DB_values</name></expr>,         <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"verify"</expr>,          <expr>(<name>PyCFunction</name>)<name>DB_verify</name></expr>,         <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_get_returns_none"</expr>,<expr>(<name>PyCFunction</name>)<name>DB_set_get_returns_none</name></expr>,      <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>,      <expr><name>NULL</name></expr>}</block></expr>       <comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyMappingMethods</name></type> <name>DB_mapping</name> <init>= <expr><block>{
        <expr><name>DB_length</name></expr>,                   <comment type="block">/*mp_length*/</comment>
        <expr>(<name>binaryfunc</name>)<name>DB_subscript</name></expr>,    <comment type="block">/*mp_subscript*/</comment>
        <expr>(<name>objobjargproc</name>)<name>DB_ass_sub</name></expr>,   <comment type="block">/*mp_ass_subscript*/</comment>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>DBCursor_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"close"</expr>,           <expr>(<name>PyCFunction</name>)<name>DBC_close</name></expr>,         <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"count"</expr>,           <expr>(<name>PyCFunction</name>)<name>DBC_count</name></expr>,         <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"current"</expr>,         <expr>(<name>PyCFunction</name>)<name>DBC_current</name></expr>,       <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"delete"</expr>,          <expr>(<name>PyCFunction</name>)<name>DBC_delete</name></expr>,        <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"dup"</expr>,             <expr>(<name>PyCFunction</name>)<name>DBC_dup</name></expr>,           <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"first"</expr>,           <expr>(<name>PyCFunction</name>)<name>DBC_first</name></expr>,         <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"get"</expr>,             <expr>(<name>PyCFunction</name>)<name>DBC_get</name></expr>,           <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"pget"</expr>,            <expr>(<name>PyCFunction</name>)<name>DBC_pget</name></expr>,          <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"get_recno"</expr>,       <expr>(<name>PyCFunction</name>)<name>DBC_get_recno</name></expr>,     <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"last"</expr>,            <expr>(<name>PyCFunction</name>)<name>DBC_last</name></expr>,          <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"next"</expr>,            <expr>(<name>PyCFunction</name>)<name>DBC_next</name></expr>,          <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"prev"</expr>,            <expr>(<name>PyCFunction</name>)<name>DBC_prev</name></expr>,          <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"put"</expr>,             <expr>(<name>PyCFunction</name>)<name>DBC_put</name></expr>,           <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set"</expr>,             <expr>(<name>PyCFunction</name>)<name>DBC_set</name></expr>,           <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_range"</expr>,       <expr>(<name>PyCFunction</name>)<name>DBC_set_range</name></expr>,     <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"get_both"</expr>,        <expr>(<name>PyCFunction</name>)<name>DBC_get_both</name></expr>,      <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"get_current_size"</expr>,<expr>(<name>PyCFunction</name>)<name>DBC_get_current_size</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_both"</expr>,        <expr>(<name>PyCFunction</name>)<name>DBC_set_both</name></expr>,      <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_recno"</expr>,       <expr>(<name>PyCFunction</name>)<name>DBC_set_recno</name></expr>,     <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"consume"</expr>,         <expr>(<name>PyCFunction</name>)<name>DBC_consume</name></expr>,       <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"next_dup"</expr>,        <expr>(<name>PyCFunction</name>)<name>DBC_next_dup</name></expr>,      <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"next_nodup"</expr>,      <expr>(<name>PyCFunction</name>)<name>DBC_next_nodup</name></expr>,    <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"prev_nodup"</expr>,      <expr>(<name>PyCFunction</name>)<name>DBC_prev_nodup</name></expr>,    <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"join_item"</expr>,       <expr>(<name>PyCFunction</name>)<name>DBC_join_item</name></expr>,     <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>,      <expr><name>NULL</name></expr>}</block></expr>       <comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>DBEnv_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"close"</expr>,           <expr>(<name>PyCFunction</name>)<name>DBEnv_close</name></expr>,            <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"open"</expr>,            <expr>(<name>PyCFunction</name>)<name>DBEnv_open</name></expr>,             <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"remove"</expr>,          <expr>(<name>PyCFunction</name>)<name>DBEnv_remove</name></expr>,           <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 41)</expr></cpp:if>
    <expr><block>{<expr>"dbremove"</expr>,        <expr>(<name>PyCFunction</name>)<name>DBEnv_dbremove</name></expr>,         <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"dbrename"</expr>,        <expr>(<name>PyCFunction</name>)<name>DBEnv_dbrename</name></expr>,         <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_encrypt"</expr>,     <expr>(<name>PyCFunction</name>)<name>DBEnv_set_encrypt</name></expr>,      <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{<expr>"set_timeout"</expr>,     <expr>(<name>PyCFunction</name>)<name>DBEnv_set_timeout</name></expr>,      <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_shm_key"</expr>,     <expr>(<name>PyCFunction</name>)<name>DBEnv_set_shm_key</name></expr>,      <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_cachesize"</expr>,   <expr>(<name>PyCFunction</name>)<name>DBEnv_set_cachesize</name></expr>,    <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_data_dir"</expr>,    <expr>(<name>PyCFunction</name>)<name>DBEnv_set_data_dir</name></expr>,     <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_flags"</expr>,       <expr>(<name>PyCFunction</name>)<name>DBEnv_set_flags</name></expr>,        <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 47)</expr></cpp:if>
    <expr><block>{<expr>"log_set_config"</expr>,  <expr>(<name>PyCFunction</name>)<name>DBEnv_log_set_config</name></expr>,   <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{<expr>"set_lg_bsize"</expr>,    <expr>(<name>PyCFunction</name>)<name>DBEnv_set_lg_bsize</name></expr>,     <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_lg_dir"</expr>,      <expr>(<name>PyCFunction</name>)<name>DBEnv_set_lg_dir</name></expr>,       <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_lg_max"</expr>,      <expr>(<name>PyCFunction</name>)<name>DBEnv_set_lg_max</name></expr>,       <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 42)</expr></cpp:if>
    <expr><block>{<expr>"get_lg_max"</expr>,      <expr>(<name>PyCFunction</name>)<name>DBEnv_get_lg_max</name></expr>,       <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{<expr>"set_lg_regionmax"</expr>,<expr>(<name>PyCFunction</name>)<name>DBEnv_set_lg_regionmax</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_lk_detect"</expr>,   <expr>(<name>PyCFunction</name>)<name>DBEnv_set_lk_detect</name></expr>,    <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &lt; 45)</expr></cpp:if>
    <expr><block>{<expr>"set_lk_max"</expr>,      <expr>(<name>PyCFunction</name>)<name>DBEnv_set_lk_max</name></expr>,       <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{<expr>"set_lk_max_locks"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_set_lk_max_locks</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_lk_max_lockers"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_set_lk_max_lockers</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_lk_max_objects"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_set_lk_max_objects</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_mp_mmapsize"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_set_mp_mmapsize</name></expr>,  <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_tmp_dir"</expr>,     <expr>(<name>PyCFunction</name>)<name>DBEnv_set_tmp_dir</name></expr>,      <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"txn_begin"</expr>,       <expr>(<name>PyCFunction</name>)<name>DBEnv_txn_begin</name></expr>,        <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"txn_checkpoint"</expr>,  <expr>(<name>PyCFunction</name>)<name>DBEnv_txn_checkpoint</name></expr>,   <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"txn_stat"</expr>,        <expr>(<name>PyCFunction</name>)<name>DBEnv_txn_stat</name></expr>,         <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_tx_max"</expr>,      <expr>(<name>PyCFunction</name>)<name>DBEnv_set_tx_max</name></expr>,       <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_tx_timestamp"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_set_tx_timestamp</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"lock_detect"</expr>,     <expr>(<name>PyCFunction</name>)<name>DBEnv_lock_detect</name></expr>,      <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"lock_get"</expr>,        <expr>(<name>PyCFunction</name>)<name>DBEnv_lock_get</name></expr>,         <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"lock_id"</expr>,         <expr>(<name>PyCFunction</name>)<name>DBEnv_lock_id</name></expr>,          <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"lock_id_free"</expr>,    <expr>(<name>PyCFunction</name>)<name>DBEnv_lock_id_free</name></expr>,     <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"lock_put"</expr>,        <expr>(<name>PyCFunction</name>)<name>DBEnv_lock_put</name></expr>,         <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"lock_stat"</expr>,       <expr>(<name>PyCFunction</name>)<name>DBEnv_lock_stat</name></expr>,        <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"log_archive"</expr>,     <expr>(<name>PyCFunction</name>)<name>DBEnv_log_archive</name></expr>,      <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"log_flush"</expr>,       <expr>(<name>PyCFunction</name>)<name>DBEnv_log_flush</name></expr>,        <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"log_stat"</expr>,        <expr>(<name>PyCFunction</name>)<name>DBEnv_log_stat</name></expr>,         <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 44)</expr></cpp:if>
    <expr><block>{<expr>"lsn_reset"</expr>,       <expr>(<name>PyCFunction</name>)<name>DBEnv_lsn_reset</name></expr>,        <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{<expr>"set_get_returns_none"</expr>,<expr>(<name>PyCFunction</name>)<name>DBEnv_set_get_returns_none</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"txn_recover"</expr>,     <expr>(<name>PyCFunction</name>)<name>DBEnv_txn_recover</name></expr>,       <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_rpc_server"</expr>,  <expr>(<name>PyCFunction</name>)<name>DBEnv_set_rpc_server</name></expr>,
        <expr><name>METH_VARARGS</name>||<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_verbose"</expr>,     <expr>(<name>PyCFunction</name>)<name>DBEnv_set_verbose</name></expr>,       <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 42)</expr></cpp:if>
    <expr><block>{<expr>"get_verbose"</expr>,     <expr>(<name>PyCFunction</name>)<name>DBEnv_get_verbose</name></expr>,       <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{<expr>"set_private"</expr>,     <expr>(<name>PyCFunction</name>)<name>DBEnv_set_private</name></expr>,       <expr><name>METH_O</name></expr>}</block></expr>,
    <expr><block>{<expr>"get_private"</expr>,     <expr>(<name>PyCFunction</name>)<name>DBEnv_get_private</name></expr>,       <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"rep_start"</expr>,       <expr>(<name>PyCFunction</name>)<name>DBEnv_rep_start</name></expr>,
        <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"rep_set_transport"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_rep_set_transport</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"rep_process_message"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_rep_process_message</name></expr>,
        <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 46)</expr></cpp:if>
    <expr><block>{<expr>"rep_elect"</expr>,       <expr>(<name>PyCFunction</name>)<name>DBEnv_rep_elect</name></expr>,         <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 44)</expr></cpp:if>
    <expr><block>{<expr>"rep_set_config"</expr>,  <expr>(<name>PyCFunction</name>)<name>DBEnv_rep_set_config</name></expr>,    <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"rep_get_config"</expr>,  <expr>(<name>PyCFunction</name>)<name>DBEnv_rep_get_config</name></expr>,    <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"rep_sync"</expr>,        <expr>(<name>PyCFunction</name>)<name>DBEnv_rep_sync</name></expr>,          <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 45)</expr></cpp:if>
    <expr><block>{<expr>"rep_set_limit"</expr>,   <expr>(<name>PyCFunction</name>)<name>DBEnv_rep_set_limit</name></expr>,     <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"rep_get_limit"</expr>,   <expr>(<name>PyCFunction</name>)<name>DBEnv_rep_get_limit</name></expr>,     <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 47)</expr></cpp:if>
    <expr><block>{<expr>"rep_set_request"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_rep_set_request</name></expr>,   <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"rep_get_request"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_rep_get_request</name></expr>,   <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 45)</expr></cpp:if>
    <expr><block>{<expr>"set_event_notify"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_set_event_notify</name></expr>, <expr><name>METH_O</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 45)</expr></cpp:if>
    <expr><block>{<expr>"rep_set_nsites"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_rep_set_nsites</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"rep_get_nsites"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_rep_get_nsites</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"rep_set_priority"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_rep_set_priority</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"rep_get_priority"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_rep_get_priority</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"rep_set_timeout"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_rep_set_timeout</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"rep_get_timeout"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_rep_get_timeout</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 45)</expr></cpp:if>
    <expr><block>{<expr>"repmgr_start"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_repmgr_start</name></expr>,
        <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"repmgr_set_local_site"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_repmgr_set_local_site</name></expr>,
        <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"repmgr_add_remote_site"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_repmgr_add_remote_site</name></expr>,
        <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"repmgr_set_ack_policy"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_repmgr_set_ack_policy</name></expr>,
        <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"repmgr_get_ack_policy"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_repmgr_get_ack_policy</name></expr>,
        <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"repmgr_site_list"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_repmgr_site_list</name></expr>,
        <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 46)</expr></cpp:if>
    <expr><block>{<expr>"repmgr_stat"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_repmgr_stat</name></expr>,
        <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"repmgr_stat_print"</expr>, <expr>(<name>PyCFunction</name>)<name>DBEnv_repmgr_stat_print</name></expr>,
        <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{<expr><name>NULL</name></expr>,      <expr><name>NULL</name></expr>}</block></expr>       <comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>DBTxn_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"commit"</expr>,          <expr>(<name>PyCFunction</name>)<name>DBTxn_commit</name></expr>,      <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"prepare"</expr>,         <expr>(<name>PyCFunction</name>)<name>DBTxn_prepare</name></expr>,     <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"discard"</expr>,         <expr>(<name>PyCFunction</name>)<name>DBTxn_discard</name></expr>,     <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"abort"</expr>,           <expr>(<name>PyCFunction</name>)<name>DBTxn_abort</name></expr>,       <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"id"</expr>,              <expr>(<name>PyCFunction</name>)<name>DBTxn_id</name></expr>,          <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>,      <expr><name>NULL</name></expr>}</block></expr>       <comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>DBSequence_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"close"</expr>,           <expr>(<name>PyCFunction</name>)<name>DBSequence_close</name></expr>,          <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"get"</expr>,             <expr>(<name>PyCFunction</name>)<name>DBSequence_get</name></expr>,            <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"get_dbp"</expr>,         <expr>(<name>PyCFunction</name>)<name>DBSequence_get_dbp</name></expr>,        <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"get_key"</expr>,         <expr>(<name>PyCFunction</name>)<name>DBSequence_get_key</name></expr>,        <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"init_value"</expr>,      <expr>(<name>PyCFunction</name>)<name>DBSequence_init_value</name></expr>,     <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"open"</expr>,            <expr>(<name>PyCFunction</name>)<name>DBSequence_open</name></expr>,           <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"remove"</expr>,          <expr>(<name>PyCFunction</name>)<name>DBSequence_remove</name></expr>,         <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_cachesize"</expr>,   <expr>(<name>PyCFunction</name>)<name>DBSequence_set_cachesize</name></expr>,  <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"get_cachesize"</expr>,   <expr>(<name>PyCFunction</name>)<name>DBSequence_get_cachesize</name></expr>,  <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_flags"</expr>,       <expr>(<name>PyCFunction</name>)<name>DBSequence_set_flags</name></expr>,      <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"get_flags"</expr>,       <expr>(<name>PyCFunction</name>)<name>DBSequence_get_flags</name></expr>,      <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"set_range"</expr>,       <expr>(<name>PyCFunction</name>)<name>DBSequence_set_range</name></expr>,      <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"get_range"</expr>,       <expr>(<name>PyCFunction</name>)<name>DBSequence_get_range</name></expr>,      <expr><name>METH_NOARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"stat"</expr>,            <expr>(<name>PyCFunction</name>)<name>DBSequence_stat</name></expr>,           <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>,      <expr><name>NULL</name></expr>}</block></expr>       <comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_db_home_get</name><parameter_list>(<param><decl><type><name>DBEnvObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>home</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_ENV_NOT_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 42)</expr></cpp:if>
    <expr_stmt><expr><call><name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>get_home</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>db_env</name></name></expr></argument>, <argument><expr>&amp;<name>home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>home</name>=<name><name>self</name>-&gt;<name>db_env</name>-&gt;<name>db_home</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr><name>home</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>RETURN_NONE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><call><name>PyBytes_FromString</name><argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>DBEnv_getsets</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"db_home"</expr>, <expr>(<name>getter</name>)<name>DBEnv_db_home_get</name></expr>, <expr><name>NULL</name></expr>,}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>statichere</name> <name>PyTypeObject</name></type> <name>DB_Type</name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
    <expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
    0</expr>,                  <comment type="block">/*ob_size*/</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    "DB"</expr>,               <comment type="block">/*tp_name*/</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>DBObject</name></expr></argument>)</argument_list></sizeof></expr>,   <comment type="block">/*tp_basicsize*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_itemsize*/</comment>
    <comment type="block">/* methods */</comment>
    <expr>(<name>destructor</name>)<name>DB_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_print*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_getattr*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_setattr*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_compare*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_repr*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_as_number*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_as_sequence*/</comment>
    <expr>&amp;<name>DB_mapping</name></expr>,<comment type="block">/*tp_as_mapping*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_hash*/</comment>
    <expr>0</expr>,			<comment type="block">/* tp_call */</comment>
    <expr>0</expr>,			<comment type="block">/* tp_str */</comment>
    <expr>0</expr>,  		<comment type="block">/* tp_getattro */</comment>
    <expr>0</expr>,          <comment type="block">/* tp_setattro */</comment>
    <expr>0</expr>,			<comment type="block">/* tp_as_buffer */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
    <expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_WEAKREFS</name></expr>,      <comment type="block">/* tp_flags */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr><name>Py_TPFLAGS_DEFAULT</name></expr>,      <comment type="block">/* tp_flags */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr>0</expr>,          <comment type="block">/* tp_doc */</comment>
    <expr>0</expr>,		    <comment type="block">/* tp_traverse */</comment>
    <expr>0</expr>,			<comment type="block">/* tp_clear */</comment>
    <expr>0</expr>,			<comment type="block">/* tp_richcompare */</comment>
    <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>DBObject</name></expr></argument>, <argument><expr><name>in_weakreflist</name></expr></argument>)</argument_list></call></expr>,   <comment type="block">/* tp_weaklistoffset */</comment>
    <expr>0</expr>,          <comment type="block">/*tp_iter*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_iternext*/</comment>
    <expr><name>DB_methods</name></expr>, <comment type="block">/*tp_methods*/</comment>
    <expr>0</expr>, <comment type="block">/*tp_members*/</comment>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>statichere</name> <name>PyTypeObject</name></type> <name>DBCursor_Type</name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
    <expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
    0</expr>,                  <comment type="block">/*ob_size*/</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    "DBCursor"</expr>,         <comment type="block">/*tp_name*/</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>DBCursorObject</name></expr></argument>)</argument_list></sizeof></expr>,  <comment type="block">/*tp_basicsize*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_itemsize*/</comment>
    <comment type="block">/* methods */</comment>
    <expr>(<name>destructor</name>)<name>DBCursor_dealloc</name></expr>,<comment type="block">/*tp_dealloc*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_print*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_getattr*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_setattr*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_compare*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_repr*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_as_number*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_as_sequence*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_as_mapping*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_hash*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_call*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_str*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_getattro*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_setattro*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_as_buffer*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
    <expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_WEAKREFS</name></expr>,      <comment type="block">/* tp_flags */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr><name>Py_TPFLAGS_DEFAULT</name></expr>,      <comment type="block">/* tp_flags */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr>0</expr>,          <comment type="block">/* tp_doc */</comment>
    <expr>0</expr>,          <comment type="block">/* tp_traverse */</comment>
    <expr>0</expr>,          <comment type="block">/* tp_clear */</comment>
    <expr>0</expr>,          <comment type="block">/* tp_richcompare */</comment>
    <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>DBCursorObject</name></expr></argument>, <argument><expr><name>in_weakreflist</name></expr></argument>)</argument_list></call></expr>,   <comment type="block">/* tp_weaklistoffset */</comment>
    <expr>0</expr>,          <comment type="block">/*tp_iter*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_iternext*/</comment>
    <expr><name>DBCursor_methods</name></expr>, <comment type="block">/*tp_methods*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_members*/</comment>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>statichere</name> <name>PyTypeObject</name></type> <name>DBEnv_Type</name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
    <expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
    0</expr>,                  <comment type="block">/*ob_size*/</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    "DBEnv"</expr>,            <comment type="block">/*tp_name*/</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>DBEnvObject</name></expr></argument>)</argument_list></sizeof></expr>,    <comment type="block">/*tp_basicsize*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_itemsize*/</comment>
    <comment type="block">/* methods */</comment>
    <expr>(<name>destructor</name>)<name>DBEnv_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_print*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_getattr*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_setattr*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_compare*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_repr*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_as_number*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_as_sequence*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_as_mapping*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_hash*/</comment>
    <expr>0</expr>,			<comment type="block">/* tp_call */</comment>
    <expr>0</expr>,			<comment type="block">/* tp_str */</comment>
    <expr>0</expr>,  		<comment type="block">/* tp_getattro */</comment>
    <expr>0</expr>,          <comment type="block">/* tp_setattro */</comment>
    <expr>0</expr>,			<comment type="block">/* tp_as_buffer */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
    <expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_WEAKREFS</name></expr>,      <comment type="block">/* tp_flags */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr><name>Py_TPFLAGS_DEFAULT</name></expr>,      <comment type="block">/* tp_flags */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr>0</expr>,          <comment type="block">/* tp_doc */</comment>
    <expr>0</expr>,		    <comment type="block">/* tp_traverse */</comment>
    <expr>0</expr>,			<comment type="block">/* tp_clear */</comment>
    <expr>0</expr>,			<comment type="block">/* tp_richcompare */</comment>
    <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>DBEnvObject</name></expr></argument>, <argument><expr><name>in_weakreflist</name></expr></argument>)</argument_list></call></expr>,   <comment type="block">/* tp_weaklistoffset */</comment>
    <expr>0</expr>,          <comment type="block">/* tp_iter */</comment>
    <expr>0</expr>,          <comment type="block">/* tp_iternext */</comment>
    <expr><name>DBEnv_methods</name></expr>,      <comment type="block">/* tp_methods */</comment>
    <expr>0</expr>,          <comment type="block">/* tp_members */</comment>
    <expr><name>DBEnv_getsets</name></expr>,      <comment type="block">/* tp_getsets */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>statichere</name> <name>PyTypeObject</name></type> <name>DBTxn_Type</name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
    <expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
    0</expr>,                  <comment type="block">/*ob_size*/</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    "DBTxn"</expr>,    <comment type="block">/*tp_name*/</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>DBTxnObject</name></expr></argument>)</argument_list></sizeof></expr>,  <comment type="block">/*tp_basicsize*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_itemsize*/</comment>
    <comment type="block">/* methods */</comment>
    <expr>(<name>destructor</name>)<name>DBTxn_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_print*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_getattr*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_setattr*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_compare*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_repr*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_as_number*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_as_sequence*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_as_mapping*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_hash*/</comment>
    <expr>0</expr>,			<comment type="block">/* tp_call */</comment>
    <expr>0</expr>,			<comment type="block">/* tp_str */</comment>
    <expr>0</expr>,  		<comment type="block">/* tp_getattro */</comment>
    <expr>0</expr>,          <comment type="block">/* tp_setattro */</comment>
    <expr>0</expr>,			<comment type="block">/* tp_as_buffer */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
    <expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_WEAKREFS</name></expr>,      <comment type="block">/* tp_flags */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr><name>Py_TPFLAGS_DEFAULT</name></expr>,      <comment type="block">/* tp_flags */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr>0</expr>,          <comment type="block">/* tp_doc */</comment>
    <expr>0</expr>,	        <comment type="block">/* tp_traverse */</comment>
    <expr>0</expr>,			<comment type="block">/* tp_clear */</comment>
    <expr>0</expr>,			<comment type="block">/* tp_richcompare */</comment>
    <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>DBTxnObject</name></expr></argument>, <argument><expr><name>in_weakreflist</name></expr></argument>)</argument_list></call></expr>,   <comment type="block">/* tp_weaklistoffset */</comment>
    <expr>0</expr>,          <comment type="block">/*tp_iter*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_iternext*/</comment>
    <expr><name>DBTxn_methods</name></expr>, <comment type="block">/*tp_methods*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_members*/</comment>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>statichere</name> <name>PyTypeObject</name></type> <name>DBLock_Type</name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
    <expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
    0</expr>,                  <comment type="block">/*ob_size*/</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    "DBLock"</expr>,   <comment type="block">/*tp_name*/</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>DBLockObject</name></expr></argument>)</argument_list></sizeof></expr>,  <comment type="block">/*tp_basicsize*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_itemsize*/</comment>
    <comment type="block">/* methods */</comment>
    <expr>(<name>destructor</name>)<name>DBLock_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_print*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_getattr*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_setattr*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_compare*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_repr*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_as_number*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_as_sequence*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_as_mapping*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_hash*/</comment>
    <expr>0</expr>,			<comment type="block">/* tp_call */</comment>
    <expr>0</expr>,			<comment type="block">/* tp_str */</comment>
    <expr>0</expr>,  		<comment type="block">/* tp_getattro */</comment>
    <expr>0</expr>,          <comment type="block">/* tp_setattro */</comment>
    <expr>0</expr>,			<comment type="block">/* tp_as_buffer */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
    <expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_WEAKREFS</name></expr>,      <comment type="block">/* tp_flags */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr><name>Py_TPFLAGS_DEFAULT</name></expr>,      <comment type="block">/* tp_flags */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr>0</expr>,          <comment type="block">/* tp_doc */</comment>
    <expr>0</expr>,		    <comment type="block">/* tp_traverse */</comment>
    <expr>0</expr>,			<comment type="block">/* tp_clear */</comment>
    <expr>0</expr>,			<comment type="block">/* tp_richcompare */</comment>
    <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>DBLockObject</name></expr></argument>, <argument><expr><name>in_weakreflist</name></expr></argument>)</argument_list></call></expr>,   <comment type="block">/* tp_weaklistoffset */</comment>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
<decl_stmt><decl><type><name>statichere</name> <name>PyTypeObject</name></type> <name>DBSequence_Type</name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
    <expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
    0</expr>,                  <comment type="block">/*ob_size*/</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    "DBSequence"</expr>,                   <comment type="block">/*tp_name*/</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>DBSequenceObject</name></expr></argument>)</argument_list></sizeof></expr>,       <comment type="block">/*tp_basicsize*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_itemsize*/</comment>
    <comment type="block">/* methods */</comment>
    <expr>(<name>destructor</name>)<name>DBSequence_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_print*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_getattr*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_setattr*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_compare*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_repr*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_as_number*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_as_sequence*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_as_mapping*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_hash*/</comment>
    <expr>0</expr>,			<comment type="block">/* tp_call */</comment>
    <expr>0</expr>,			<comment type="block">/* tp_str */</comment>
    <expr>0</expr>,  		<comment type="block">/* tp_getattro */</comment>
    <expr>0</expr>,          <comment type="block">/* tp_setattro */</comment>
    <expr>0</expr>,			<comment type="block">/* tp_as_buffer */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
    <expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_WEAKREFS</name></expr>,      <comment type="block">/* tp_flags */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr><name>Py_TPFLAGS_DEFAULT</name></expr>,      <comment type="block">/* tp_flags */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr>0</expr>,          <comment type="block">/* tp_doc */</comment>
    <expr>0</expr>,		    <comment type="block">/* tp_traverse */</comment>
    <expr>0</expr>,			<comment type="block">/* tp_clear */</comment>
    <expr>0</expr>,			<comment type="block">/* tp_richcompare */</comment>
    <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>DBSequenceObject</name></expr></argument>, <argument><expr><name>in_weakreflist</name></expr></argument>)</argument_list></call></expr>,   <comment type="block">/* tp_weaklistoffset */</comment>
    <expr>0</expr>,          <comment type="block">/*tp_iter*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_iternext*/</comment>
    <expr><name>DBSequence_methods</name></expr>, <comment type="block">/*tp_methods*/</comment>
    <expr>0</expr>,          <comment type="block">/*tp_members*/</comment>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/* Module-level functions */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DB_construct</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>dbenvobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"dbEnv"</expr>, <expr>"flags"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"|Oi:DB"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>,
                                     <argument><expr>&amp;<name>dbenvobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name>dbenvobj</name> == <name>Py_None</name></expr>)</condition><then>
        <expr_stmt><expr><name>dbenvobj</name> = <name>NULL</name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name>dbenvobj</name> &amp;&amp; !<call><name>DBEnvObject_Check</name><argument_list>(<argument><expr><name>dbenvobj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>makeTypeError</name><argument_list>(<argument><expr>"DBEnv"</expr></argument>, <argument><expr><name>dbenvobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if></else></if>

    <return>return <expr>(<name>PyObject</name>* )<call><name>newDBObject</name><argument_list>(<argument><expr>(<name>DBEnvObject</name>*)<name>dbenvobj</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBEnv_construct</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|i:DbEnv"</expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr>(<name>PyObject</name>* )<call><name>newDBEnvObject</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>DBSequence_construct</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>dbobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwnames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"db"</expr>, <expr>"flags"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"O|i:DBSequence"</expr></argument>, <argument><expr><name>kwnames</name></expr></argument>, <argument><expr>&amp;<name>dbobj</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>DBObject_Check</name><argument_list>(<argument><expr><name>dbobj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>makeTypeError</name><argument_list>(<argument><expr>"DB"</expr></argument>, <argument><expr><name>dbobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <return>return <expr>(<name>PyObject</name>* )<call><name>newDBSequenceObject</name><argument_list>(<argument><expr>(<name>DBObject</name>*)<name>dbobj</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>bsddb_version_doc</name><index>[]</index></name> <init>=
<expr>"Returns a tuple of major, minor, and patch release numbers of the\n\
underlying DB library."</expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>bsddb_version</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>, <decl><type ref="prev"/><name>patch</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>db_version</name><argument_list>(<argument><expr>&amp;<name>major</name></expr></argument>, <argument><expr>&amp;<name>minor</name></expr></argument>, <argument><expr>&amp;<name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(iii)"</expr></argument>, <argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* List of functions defined in the module */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>bsddb_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"DB"</expr>,          <expr>(<name>PyCFunction</name>)<name>DB_construct</name></expr>,          <expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr> }</block></expr>,
    <expr><block>{<expr>"DBEnv"</expr>,       <expr>(<name>PyCFunction</name>)<name>DBEnv_construct</name></expr>,       <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
    <expr><block>{<expr>"DBSequence"</expr>,  <expr>(<name>PyCFunction</name>)<name>DBSequence_construct</name></expr>,  <expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{<expr>"version"</expr>,     <expr>(<name>PyCFunction</name>)<name>bsddb_version</name></expr>,         <expr><name>METH_NOARGS</name></expr>, <expr><name>bsddb_version_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>,      <expr><name>NULL</name></expr>}</block></expr>       <comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* API structure */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>BSDDB_api</name></type> <name>bsddb_api</name></decl>;</decl_stmt>


<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/* Module initialization */</comment>


<comment type="block">/* Convenience routine to export an integer value.
 * Errors are silently ignored, for better or for worse...
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_INT</name><parameter_list>(<param><type><name>dict</name></type></param>, <param><type><name>NAME</name></type></param>)</parameter_list></cpp:macro>         <cpp:value>_addIntToDict(dict, #NAME, NAME)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULE_NAME_MAX_LEN</name></cpp:macro>     <cpp:value>11</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>_bsddbModuleName</name><index>[<expr><name>MODULE_NAME_MAX_LEN</name>+1</expr>]</index></name> <init>= <expr>"_bsddb"</expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &gt;= 0x03000000)</expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyModuleDef</name></type> <name>bsddbmodule</name> <init>= <expr><block>{
    <expr><name>PyModuleDef_HEAD_INIT</name></expr>,
    <expr><name>_bsddbModuleName</name></expr>,   <comment type="block">/* Name of module */</comment>
    <expr><name>NULL</name></expr>,               <comment type="block">/* module documentation, may be NULL */</comment>
    <expr>-1</expr>,                 <comment type="block">/* size of per-interpreter state of the module,
                            or -1 if the module keeps state in global variables. */</comment>
    <expr><name>bsddb_methods</name></expr>,
    <expr><name>NULL</name></expr>,   <comment type="block">/* Reload */</comment>
    <expr><name>NULL</name></expr>,   <comment type="block">/* Traverse */</comment>
    <expr><name>NULL</name></expr>,   <comment type="block">/* Clear */</comment>
    <expr><name>NULL</name></expr>    <comment type="block">/* Free */</comment>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
<macro><name>DL_EXPORT</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>init_bsddb</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>PyMODINIT_FUNC</name></type>  <name>PyInit__bsddb</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>    <comment type="block">/* Note the two underscores */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>pybsddb_version_s</name> <init>= <expr><call><name>PyBytes_FromString</name><argument_list>( <argument><expr><name>PY_BSDDB_VERSION</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>db_version_s</name> <init>= <expr><call><name>PyBytes_FromString</name><argument_list>( <argument><expr><name>DB_VERSION_STRING</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>cvsid_s</name> <init>= <expr><call><name>PyBytes_FromString</name><argument_list>( <argument><expr><name>rcs_id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>py_api</name></decl>;</decl_stmt>

    <comment type="block">/* Initialize object types */</comment>
    <if>if <condition>(<expr>(<call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>DB_Type</name></expr></argument>)</argument_list></call> &lt; 0)
        || (<call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>DBCursor_Type</name></expr></argument>)</argument_list></call> &lt; 0)
        || (<call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>DBEnv_Type</name></expr></argument>)</argument_list></call> &lt; 0)
        || (<call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>DBTxn_Type</name></expr></argument>)</argument_list></call> &lt; 0)
        || (<call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>DBLock_Type</name></expr></argument>)</argument_list></call> &lt; 0)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
        || (<call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>DBSequence_Type</name></expr></argument>)</argument_list></call> &lt; 0)</expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        )</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
        <return>return;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>MYDB_USE_GILSTATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* Save the current interpreter, so callbacks can do the right thing. */</comment>
    <expr_stmt><expr><name>_db_interpreterState</name> = <call><name>PyThreadState_GET</name><argument_list>()</argument_list></call>-&gt;<name>interp</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Create the module and add the functions */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
    <expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr><name>_bsddbModuleName</name></expr></argument>, <argument><expr><name>bsddb_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>m</name>=<call><name>PyModule_Create</name><argument_list>(<argument><expr>&amp;<name>bsddbmodule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
        <return>return;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    	<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then></if>

    <comment type="block">/* Add some symbolic constants to the module */</comment>
    <expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"__version__"</expr></argument>, <argument><expr><name>pybsddb_version_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"cvsid"</expr></argument>, <argument><expr><name>cvsid_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"DB_VERSION_STRING"</expr></argument>, <argument><expr><name>db_version_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pybsddb_version_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pybsddb_version_s</name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>cvsid_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cvsid_s</name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>db_version_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db_version_s</name> = <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_VERSION_MINOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_VERSION_PATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_MAX_PAGES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_MAX_RECORDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 42)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_RPCCLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_CLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* allow apps to be written using DB_RPCCLIENT on older Berkeley DB */</comment>
    <expr_stmt><expr><call><name>_addIntToDict</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"DB_RPCCLIENT"</expr></argument>, <argument><expr><name>DB_CLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_XA_CREATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_CREATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_NOMMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_THREAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 45)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_MULTIVERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_FORCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_INIT_CDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_INIT_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_INIT_LOG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_INIT_MPOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_INIT_TXN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_JOINENV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_XIDDATASIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_RECOVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_RECOVER_FATAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_TXN_NOSYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_USE_ENVIRON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_USE_ENVIRON_ROOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCKDOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_PRIVATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_SYSTEM_MEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_TXN_SYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_TXN_NOWAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_EXCL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_FCNTL_LOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_ODDFILESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_RDWRMASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_TRUNCATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_EXTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_CDB_ALLDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_VERIFY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_UPGRADE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_AGGRESSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_NOORDERCHK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_ORDERCHKONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_PR_PAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_PR_RECOVERYTEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_SALVAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_NORUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_OLDEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_RANDOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_YOUNGEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_MAXLOCKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_MINLOCKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_MINWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_EXPIRE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_MAXWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>_addIntToDict</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"DB_LOCK_CONFLICT"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_DUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_GET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_INHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_PUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_PUT_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_PUT_OBJ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_NG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_NOWAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_IWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_IREAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_IWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &lt; 44)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_DIRTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_READ_UNCOMMITTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* renamed in 4.4 */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_WWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_RECORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_UPGRADE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_SWITCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_UPGRADE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_NOWAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_RECORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_UPGRADE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LSTAT_ABORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &lt; 43)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LSTAT_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LSTAT_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LSTAT_HELD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LSTAT_PENDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LSTAT_WAITING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_ARCH_ABS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_ARCH_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_ARCH_LOG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 42)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_ARCH_REMOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_BTREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_RECNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_QUEUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_DUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_DUPSORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_RECNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_RENUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REVSPLITOFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_SNAPSHOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_JOIN_NOSORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_AFTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_APPEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_BEFORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &lt; 45)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_CACHED_COUNTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 41)</expr></cpp:if>
    <expr_stmt><expr><call><name>_addIntToDict</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"DB_CHECKPOINT"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_CHECKPOINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_CURLSN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &lt;= 41)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_COMMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_CONSUME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_CONSUME_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_FAST_STAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_GET_BOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_GET_RECNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_JOIN_ITEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_KEYFIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_KEYLAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_NEXT_DUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_NEXT_NODUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_NODUPDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_NOOVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_NOSYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_POSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_PREV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_PREV_NODUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &lt; 45)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_RECORDCOUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_SET_RANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_SET_RECNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_WRITECURSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_OPFLAGS_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_RMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_DIRTY_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_MULTIPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_MULTIPLE_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 44)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_READ_UNCOMMITTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* replaces DB_DIRTY_READ in 4.4 */</comment>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_READ_COMMITTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_DONOTINDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 41)</expr></cpp:if>
    <expr_stmt><expr><call><name>_addIntToDict</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"DB_INCOMPLETE"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_INCOMPLETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_KEYEMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_KEYEXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_DEADLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOCK_NOTGRANTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_NOSERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_NOSERVER_HOME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_NOSERVER_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_NOTFOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_OLD_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_RUNRECOVERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_VERIFY_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_PAGE_NOTFOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_SECONDARY_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_STAT_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REGION_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_NOLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_YIELDCPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_PANIC_ENVIRONMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_NOPANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 41)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DB_REGISTER</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 42)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_TIME_NOTGRANTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_TXN_NOT_DURABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_TXN_WRITE_NOSYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_DIRECT_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_INIT_REP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_CHKSUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 42) &amp;&amp; (<name>DBVER</name> &lt; 47)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOG_AUTOREMOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_DIRECT_LOG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 47)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOG_DIRECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOG_DSYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOG_IN_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOG_AUTO_REMOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOG_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 44)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_DSYNC_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 45)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_TXN_SNAPSHOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_VERB_DEADLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 46)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_VERB_FILEOPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_VERB_FILEOPS_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_VERB_RECOVERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 44)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_VERB_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_VERB_REPLICATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_VERB_WAITSFOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 45)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_EVENT_PANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_EVENT_REP_CLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 46)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_EVENT_REP_ELECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_EVENT_REP_MASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_EVENT_REP_NEWMASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 46)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_EVENT_REP_PERM_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_EVENT_REP_STARTUPDONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_EVENT_WRITE_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REP_DUPMASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REP_HOLDELECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 44)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REP_IGNORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REP_JOIN_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 42)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REP_ISPERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REP_NOTPERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REP_NEWSITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REP_MASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REP_CLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 45)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REP_ELECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REP_ACK_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REP_CONNECTION_RETRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REP_ELECTION_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REP_ELECTION_RETRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 46)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REP_CHECKPOINT_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REP_FULL_ELECTION_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 45)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REPMGR_PEER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REPMGR_ACKS_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REPMGR_ACKS_ALL_PEERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REPMGR_ACKS_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REPMGR_ACKS_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REPMGR_ACKS_ONE_PEER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REPMGR_ACKS_QUORUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REPMGR_CONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_REPMGR_DISCONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_STAT_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_STAT_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_BUFFER_SMALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_SEQ_DEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_SEQ_INC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_SEQ_WRAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43) &amp;&amp; (<name>DBVER</name> &lt; 47)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_LOG_INMEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_DSYNC_LOG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 41)</expr></cpp:if>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_ENCRYPT_AES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_AUTO_COMMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* allow Berkeley DB 4.1 aware apps to run on older versions */</comment>
    <expr_stmt><expr><call><name>_addIntToDict</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"DB_AUTO_COMMIT"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>EACCES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ENOSPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>EBUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>EEXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_SET_LOCK_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DB_SET_TXN_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* The exception name must be correct for pickled exception *
     * objects to unpickle properly.                            */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PYBSDDB_STANDALONE</name></cpp:ifdef>  <comment type="block">/* different value needed for standalone pybsddb */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYBSDDB_EXCEPTION_BASE</name></cpp:macro>  <cpp:value>"bsddb3.db."</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYBSDDB_EXCEPTION_BASE</name></cpp:macro>  <cpp:value>"bsddb.db."</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* All the rest of the exceptions derive only from DBError */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_EX</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro>   <cpp:value>name = PyErr_NewException(PYBSDDB_EXCEPTION_BASE #name, DBError, NULL); \
                        PyDict_SetItemString(d, #name, name)</cpp:value></cpp:define>

    <comment type="block">/* The base exception class is DBError */</comment>
    <expr_stmt><expr><name>DBError</name> = <name>NULL</name></expr>;</expr_stmt>     <comment type="block">/* used in MAKE_EX so that it derives from nothing */</comment>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
    <comment type="block">/* Some magic to make DBNotFoundError and DBKeyEmptyError derive
     * from both DBError and KeyError, since the API only supports
     * using one base class. */</comment>
    <expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"KeyError"</expr></argument>, <argument><expr><name>PyExc_KeyError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyRun_String</name><argument_list>(<argument><expr>"class DBNotFoundError(DBError, KeyError): pass\n"
	         "class DBKeyEmptyError(DBError, KeyError): pass"</expr></argument>,
                 <argument><expr><name>Py_file_input</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>DBNotFoundError</name> = <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"DBNotFoundError"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>DBKeyEmptyError</name> = <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"DBKeyEmptyError"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyDict_DelItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"KeyError"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Since Python 2.5, PyErr_NewException() accepts a tuple, to be able to
    ** derive from several classes. We use this new API only for Python 3.0,
    ** though.
    */</comment>
    <block>{
        <decl_stmt><decl><type><name>PyObject</name>*</type> <name>bases</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>bases</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>DBError</name></expr></argument>, <argument><expr><name>PyExc_KeyError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_EX2</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro>   <cpp:value>name = PyErr_NewException(PYBSDDB_EXCEPTION_BASE #name, bases, NULL); \
                         PyDict_SetItemString(d, #name, name)</cpp:value></cpp:define>
        <expr_stmt><expr><call><name>MAKE_EX2</name><argument_list>(<argument><expr><name>DBNotFoundError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_EX2</name><argument_list>(<argument><expr><name>DBKeyEmptyError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAKE_EX2</name></cpp:undef>

        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>bases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>INCOMPLETE_IS_WARNING</name></expr></cpp:if>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBIncompleteError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBCursorClosedError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBKeyEmptyError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBKeyExistError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBLockDeadlockError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBLockNotGrantedError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBOldVersionError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBRunRecoveryError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBVerifyBadError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBNoServerError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBNoServerHomeError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBNoServerIDError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBPageNotFoundError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBSecondaryBadError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBInvalidArgError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBAccessError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBNoSpaceError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBNoMemoryError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBAgainError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBBusyError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBFileExistsError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBNoSuchFileError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBPermissionsError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 42)</expr></cpp:if>
    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBRepHandleDeadError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>MAKE_EX</name><argument_list>(<argument><expr><name>DBRepUnavailError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAKE_EX</name></cpp:undef>

    <comment type="block">/* Initiliase the C API structure and add it to the module */</comment>
    <expr_stmt><expr><name><name>bsddb_api</name>.<name>db_type</name></name>         = &amp;<name>DB_Type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bsddb_api</name>.<name>dbcursor_type</name></name>   = &amp;<name>DBCursor_Type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bsddb_api</name>.<name>dbenv_type</name></name>      = &amp;<name>DBEnv_Type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bsddb_api</name>.<name>dbtxn_type</name></name>      = &amp;<name>DBTxn_Type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bsddb_api</name>.<name>dblock_type</name></name>     = &amp;<name>DBLock_Type</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
    <expr_stmt><expr><name><name>bsddb_api</name>.<name>dbsequence_type</name></name> = &amp;<name>DBSequence_Type</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>bsddb_api</name>.<name>makeDBError</name></name>     = <name>makeDBError</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>py_api</name> = <call><name>PyCObject_FromVoidPtr</name><argument_list>(<argument><expr>(<name>void</name>*)&amp;<name>bsddb_api</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"api"</expr></argument>, <argument><expr><name>py_api</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_api</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check for errors */</comment>
    <if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"can't initialize module _bsddb/_pybsddb"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>m</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
    <return>return;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><name>m</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<comment type="block">/* allow this module to be named _pybsddb so that it can be installed
 * and imported on top of python &gt;= 2.3 that includes its own older
 * copy of the library named _bsddb without importing the old version. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
<macro><name>DL_EXPORT</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>init_pybsddb</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>PyMODINIT_FUNC</name></type> <name>PyInit__pybsddb</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>  <comment type="block">/* Note the two underscores */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>_bsddbModuleName</name></expr></argument>, <argument><expr>"_pybsddb"</expr></argument>, <argument><expr><name>MODULE_NAME_MAX_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>PY_VERSION_HEX</name> &lt; 0x03000000)</expr></cpp:if>
    <expr_stmt><expr><call><name>init_bsddb</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><call><name>PyInit__bsddb</name><argument_list>()</argument_list></call></expr>;</return>   <comment type="block">/* Note the two underscores */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function></block></function>

</unit>
