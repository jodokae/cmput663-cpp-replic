<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_ctypes/libffi_arm_wince/fficonfig.h"><comment type="block">/* fficonfig.h created manually for Windows CE on ARM */</comment>
<comment type="block">/* fficonfig.h.in.  Generated from configure.ac by autoheader.  */</comment>

<comment type="block">/* 1234 = LIL_ENDIAN, 4321 = BIGENDIAN */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTEORDER</name></cpp:macro> <cpp:value>1234</cpp:value></cpp:define>

<comment type="block">/* Define to one of `_getb67', `GETB67', `getb67' for Cray-2 and Cray-YMP
   systems. This function is required for `alloca.c' support on those systems.
   */</comment>
<comment type="block">/* #undef CRAY_STACKSEG_END */</comment>

<comment type="block">/* Define to 1 if using `alloca.c'. */</comment>
<comment type="block">/* #undef C_ALLOCA */</comment>

<comment type="block">/* Define to the flags needed for the .section .eh_frame directive. */</comment>
<comment type="block">/* #undef EH_FRAME_FLAGS */</comment>

<comment type="block">/* Define this if you want extra debugging. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>  <comment type="block">/* Defined by the project settings for Debug builds */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_DEBUG</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FFI_DEBUG</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Define this is you do not want support for the raw API. */</comment>
<comment type="block">/* #undef FFI_NO_RAW_API */</comment>

<comment type="block">/* Define this is you do not want support for aggregate types. */</comment>
<comment type="block">/* #undef FFI_NO_STRUCTS */</comment>

<comment type="block">/* Define to 1 if you have `alloca', as a function or macro. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_ALLOCA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define to 1 if you have &lt;alloca.h&gt; and it should be used (not on Ultrix).
   */</comment>
<comment type="block">/* #undef HAVE_ALLOCA_H */</comment>

<comment type="block">/* Define if your assembler supports .register. */</comment>
<comment type="block">/* #undef HAVE_AS_REGISTER_PSEUDO_OP */</comment>

<comment type="block">/* Define if your assembler and linker support unaligned PC relative relocs.
   */</comment>
<comment type="block">/* #undef HAVE_AS_SPARC_UA_PCREL */</comment>

<comment type="block">/* Define to 1 if you have the &lt;inttypes.h&gt; header file. */</comment>
<comment type="block">/* #undef HAVE_INTTYPES_H */</comment>

<comment type="block">/* Define if you have the long double type and it is bigger than a double */</comment>
<comment type="block">/* This differs from the MSVC build, but even there it should not be defined */</comment>
<comment type="block">/* #undef HAVE_LONG_DOUBLE */</comment>

<comment type="block">/* Define to 1 if you have the `memcpy' function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MEMCPY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define to 1 if you have the &lt;memory.h&gt; header file. */</comment>
<comment type="block">/* WinCE has this but I don't think we need to use it */</comment>
<comment type="block">/* #undef HAVE_MEMORY_H */</comment>

<comment type="block">/* Define to 1 if you have the `mmap' function. */</comment>
<comment type="block">/* #undef HAVE_MMAP */</comment>

<comment type="block">/* Define if mmap with MAP_ANON(YMOUS) works. */</comment>
<comment type="block">/* #undef HAVE_MMAP_ANON */</comment>

<comment type="block">/* Define if mmap of /dev/zero works. */</comment>
<comment type="block">/* #undef HAVE_MMAP_DEV_ZERO */</comment>

<comment type="block">/* Define if read-only mmap of a plain file works. */</comment>
<comment type="block">/* #undef HAVE_MMAP_FILE */</comment>

<comment type="block">/* Define if .eh_frame sections should be read-only. */</comment>
<comment type="block">/* #undef HAVE_RO_EH_FRAME */</comment>

<comment type="block">/* Define to 1 if you have the &lt;stdint.h&gt; header file. */</comment>
<comment type="block">/* #undef HAVE_STDINT_H */</comment>

<comment type="block">/* Define to 1 if you have the &lt;stdlib.h&gt; header file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_STDLIB_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define to 1 if you have the &lt;strings.h&gt; header file. */</comment>
<comment type="block">/* #undef HAVE_STRINGS_H */</comment>

<comment type="block">/* Define to 1 if you have the &lt;string.h&gt; header file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_STRING_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define to 1 if you have the &lt;sys/mman.h&gt; header file. */</comment>
<comment type="block">/* #undef HAVE_SYS_MMAN_H */</comment>

<comment type="block">/* Define to 1 if you have the &lt;sys/stat.h&gt; header file. */</comment>
<comment type="block">/* #undef HAVE_SYS_STAT_H */</comment>

<comment type="block">/* Define to 1 if you have the &lt;sys/types.h&gt; header file. */</comment>
<comment type="block">/* #undef HAVE_SYS_TYPES_H */</comment>

<comment type="block">/* Define to 1 if you have the &lt;unistd.h&gt; header file. */</comment>
<comment type="block">/* #undef HAVE_UNISTD_H */</comment>

<comment type="block">/* Define if the host machine stores words of multi-word integers in
   big-endian order. */</comment>
<comment type="block">/* #undef HOST_WORDS_BIG_ENDIAN */</comment>

<comment type="block">/* Define to 1 if your C compiler doesn't accept -c and -o together. */</comment>
<comment type="block">/* #undef NO_MINUS_C_MINUS_O */</comment>

<comment type="block">/* Name of package */</comment>
<comment type="block">/* #undef PACKAGE */</comment>

<comment type="block">/* Define to the address where bug reports for this package should be sent. */</comment>
<comment type="block">/* #undef PACKAGE_BUGREPORT */</comment>

<comment type="block">/* Define to the full name of this package. */</comment>
<comment type="block">/* #undef PACKAGE_NAME */</comment>

<comment type="block">/* Define to the full name and version of this package. */</comment>
<comment type="block">/* #undef PACKAGE_STRING */</comment>

<comment type="block">/* Define to the one symbol short name of this package. */</comment>
<comment type="block">/* #undef PACKAGE_TARNAME */</comment>

<comment type="block">/* Define to the version of this package. */</comment>
<comment type="block">/* #undef PACKAGE_VERSION */</comment>

<comment type="block">/* The number of bytes in type double */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_DOUBLE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<comment type="block">/* The number of bytes in type long double */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_LONG_DOUBLE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<comment type="block">/* If using the C implementation of alloca, define if you know the
   direction of stack growth for your system; otherwise it will be
   automatically deduced at run-time.
	STACK_DIRECTION &gt; 0 =&gt; grows toward higher addresses
	STACK_DIRECTION &lt; 0 =&gt; grows toward lower addresses
	STACK_DIRECTION = 0 =&gt; direction of growth unknown */</comment>
<comment type="block">/* #undef STACK_DIRECTION */</comment>

<comment type="block">/* Define to 1 if you have the ANSI C header files. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDC_HEADERS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Define this if you are using Purify and want to suppress spurious messages.
   */</comment>
<comment type="block">/* #undef USING_PURIFY */</comment>

<comment type="block">/* Version number of package */</comment>
<comment type="block">/* #undef VERSION */</comment>

<comment type="block">/* whether byteorder is bigendian */</comment>
<comment type="block">/* #undef WORDS_BIGENDIAN */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>alloca</name></cpp:macro> <cpp:value>_alloca</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>abort</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>exit(999)</cpp:value></cpp:define>
</unit>
