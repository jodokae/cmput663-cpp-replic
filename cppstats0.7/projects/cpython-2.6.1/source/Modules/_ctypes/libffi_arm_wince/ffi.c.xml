<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_ctypes/libffi_arm_wince/ffi.c"><comment type="block">/* -----------------------------------------------------------------------
   ffi.c - Copyright (c) 1998  Red Hat, Inc.
   
   ARM Foreign Function Interface 

   Permission is hereby granted, free of charge, to any person obtaining
   a copy of this software and associated documentation files (the
   ``Software''), to deal in the Software without restriction, including
   without limitation the rights to use, copy, modify, merge, publish,
   distribute, sublicense, and/or sell copies of the Software, and to
   permit persons to whom the Software is furnished to do so, subject to
   the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
   IN NO EVENT SHALL CYGNUS SOLUTIONS BE LIABLE FOR ANY CLAIM, DAMAGES OR
   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   OTHER DEALINGS IN THE SOFTWARE.
   ----------------------------------------------------------------------- */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32_WCE</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> warning (disable : 4142)</cpp:pragma>    <comment type="block">/* benign redefinition of type */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* ffi_prep_args is called by the assembly routine once stack space
   has been allocated for the function's arguments */</comment>

<comment type="block">/*@-exportheader@*/</comment>
<function><type><name>void</name></type> <name>ffi_prep_args</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>stack</name></decl></param>, <param><decl><type><name>extended_cif</name> *</type><name>ecif</name></decl></param>)</parameter_list>
<comment type="block">/*@=exportheader@*/</comment>
<block>{
  <decl_stmt><decl><type><name>register</name> <name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>register</name> <name>void</name> **</type><name>p_argv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>register</name> <name>char</name> *</type><name>argp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>register</name> <name>ffi_type</name> **</type><name>p_arg</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>argp</name> = <name>stack</name></expr>;</expr_stmt>

  <if>if <condition>( <expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name></expr> )</condition><then> <block>{
    <expr_stmt><expr>*(<name>void</name> **) <name>argp</name> = <name><name>ecif</name>-&gt;<name>rvalue</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>argp</name> += 4</expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><name>p_argv</name> = <name><name>ecif</name>-&gt;<name>avalue</name></name></expr>;</expr_stmt>

  <for>for (<init><expr><name>i</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>nargs</name></name></expr>, <expr><name>p_arg</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>arg_types</name></name></expr>;</init>
       <condition><expr>(<name>i</name> != 0)</expr>;</condition>
       <incr><expr><name>i</name>--</expr>, <expr><name>p_arg</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>size_t</name></type> <name>argalign</name> <init>= <expr><name>(*<name>p_arg</name>)-&gt;<name>alignment</name></name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32_WCE</name></cpp:ifdef>
      <if>if <condition>(<expr><name>argalign</name> &gt; 4</expr>)</condition><then>
        <expr_stmt><expr><name>argalign</name> = 4</expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <comment type="block">/* Align if necessary */</comment>
      <if>if <condition>(<expr>(<name>argalign</name> - 1) &amp; (<name>unsigned</name>) <name>argp</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>argp</name> = (<name>char</name> *) <call><name>ALIGN</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>argalign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

	  <expr_stmt><expr><name>z</name> = <name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
	  <if>if <condition>(<expr><name>z</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	    <block>{
	      <expr_stmt><expr><name>z</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	      <switch>switch <condition>(<expr><name>(*<name>p_arg</name>)-&gt;<name>type</name></name></expr>)</condition>
		<block>{
		<case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
		  <expr_stmt><expr>*(<name>signed</name> <name>int</name> *) <name>argp</name> = (<name>signed</name> <name>int</name>)*<call>(<name>SINT8</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <break>break;</break>
		  
		</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
		  <expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> = (<name>unsigned</name> <name>int</name>)*<call>(<name>UINT8</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <break>break;</break>
		  
		</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
		  <expr_stmt><expr>*(<name>signed</name> <name>int</name> *) <name>argp</name> = (<name>signed</name> <name>int</name>)*<call>(<name>SINT16</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <break>break;</break>
		  
		</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
		  <expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> = (<name>unsigned</name> <name>int</name>)*<call>(<name>UINT16</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <break>break;</break>
		  
		</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
                  <comment type="block">/* *p_argv may not be aligned for a UINT32 */</comment>
                  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <break>break;</break>

		</case><default>default:
		  <expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</default>}</block></switch>
	    }</block></then>
	  <else>else <if>if <condition>(<expr><name>z</name> == <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	    <block>{
	      <expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> = (<name>unsigned</name> <name>int</name>)*<call>(<name>UINT32</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then>
	  <else>else
	    <block>{
	      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></else></if></else></if>
	  <expr_stmt><expr><name>p_argv</name>++</expr>;</expr_stmt>
	  <expr_stmt><expr><name>argp</name> += <name>z</name></expr>;</expr_stmt>
    }</block></for>
  
  <return>return;</return>
}</block></function>

<comment type="block">/* Perform machine dependent cif processing */</comment>
<function><type><name>ffi_status</name></type> <name>ffi_prep_cif_machdep</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Set the return type flag */</comment>
  <switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>)</condition>
    <block>{
    <case>case <expr><name>FFI_TYPE_VOID</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = (<name>unsigned</name>) <name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_SINT64</name></expr>;</expr_stmt>
      <break>break;</break>

    </case><default>default:
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_INT</name></expr>;</expr_stmt>
      <break>break;</break>
    </default>}</block></switch>

  <return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*@-declundef@*/</comment>
<comment type="block">/*@-exportheader@*/</comment>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_call_SYSV</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*)<parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>)</parameter_list></function_decl></param>, 
			  <comment type="block">/*@out@*/</comment> <param><decl><type><name>extended_cif</name> *</type></decl></param>, 
			  <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>, 
			  <comment type="block">/*@out@*/</comment> <param><decl><type><name>unsigned</name> *</type></decl></param>, 
			  <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>()</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
<comment type="block">/*@=declundef@*/</comment>
<comment type="block">/*@=exportheader@*/</comment>

<comment type="block">/* Return type changed from void for ctypes */</comment>
<function><type><name>int</name></type> <name>ffi_call</name><parameter_list>(<comment type="block">/*@dependent@*/</comment> <param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>, 
	      <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>()</parameter_list></function_decl></param>, 
	      <comment type="block">/*@out@*/</comment> <param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, 
	      <comment type="block">/*@dependent@*/</comment> <param><decl><type><name>void</name> **</type><name>avalue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>extended_cif</name></type> <name>ecif</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ecif</name>.<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ecif</name>.<name>avalue</name></name> = <name>avalue</name></expr>;</expr_stmt>
  
  <comment type="block">/* If the return value is a struct and we don't have a return	*/</comment>
  <comment type="block">/* value address then we need to make one		        */</comment>

  <if>if <condition>(<expr>(<name>rvalue</name> == <name>NULL</name>) &amp;&amp; 
      (<name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name>)</expr>)</condition><then>
    <block>{
      <comment type="block">/*@-sysunrecog@*/</comment>
      <expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/*@=sysunrecog@*/</comment>
    }</block></then>
  <else>else
    <expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <name>rvalue</name></expr>;</expr_stmt></else></if>
    
  
  <switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name></expr>)</condition> 
    <block>{
    <case>case <expr><name>FFI_SYSV</name></expr>:
      <comment type="block">/*@-usedef@*/</comment>
      <expr_stmt><expr><call><name>ffi_call_SYSV</name><argument_list>(<argument><expr><name>ffi_prep_args</name></expr></argument>, <argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>, 
		    <argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/*@=usedef@*/</comment>
      <break>break;</break>
    </case><default>default:
      <expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </default>}</block></switch>
  <comment type="block">/* I think calculating the real stack pointer delta is not useful
     because stdcall is not supported */</comment>
  <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/** private members **/</comment>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ffi_prep_incoming_args_SYSV</name> <parameter_list>(<param><decl><type><name>char</name> *</type><name>stack</name></decl></param>, <param><decl><type><name>void</name> **</type><name>ret</name></decl></param>,
					 <param><decl><type><name>void</name>**</type> <name>args</name></decl></param>, <param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* This function is called by ffi_closure_SYSV in sysv.asm */</comment>

<function><type><name>unsigned</name> <name>int</name></type>
<name>ffi_closure_SYSV_inner</name> <parameter_list>(<param><decl><type><name>ffi_closure</name> *</type><name>closure</name></decl></param>, <param><decl><type><name>char</name> *</type><name>in_args</name></decl></param>, <param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ffi_cif</name> *</type><name>cif</name> <init>= <expr><name><name>closure</name>-&gt;<name>cif</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> **</type><name>out_args</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>out_args</name> = (<name>void</name> **) <call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>nargs</name></name> * <sizeof>sizeof <argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>  

  <comment type="block">/* this call will initialize out_args, such that each
   * element in that array points to the corresponding 
   * value on the stack; and if the function returns
   * a structure, it will re-set rvalue to point to the
   * structure return address.  */</comment>

  <expr_stmt><expr><call><name>ffi_prep_incoming_args_SYSV</name><argument_list>(<argument><expr><name>in_args</name></expr></argument>, <argument><expr>&amp;<name>rvalue</name></expr></argument>, <argument><expr><name>out_args</name></expr></argument>, <argument><expr><name>cif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call>(<name><name>closure</name>-&gt;<name>fun</name></name>)<argument_list>(<argument><expr><name>cif</name></expr></argument>, <argument><expr><name>rvalue</name></expr></argument>, <argument><expr><name>out_args</name></expr></argument>, <argument><expr><name><name>closure</name>-&gt;<name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Tell ffi_closure_SYSV what the returntype is */</comment>
  <return>return <expr><name><name>cif</name>-&gt;<name>flags</name></name></expr>;</return>
}</block></function>

<comment type="block">/*@-exportheader@*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> 
<name>ffi_prep_incoming_args_SYSV</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>stack</name></decl></param>, <param><decl><type><name>void</name> **</type><name>rvalue</name></decl></param>,
			    <param><decl><type><name>void</name> **</type><name>avalue</name></decl></param>, <param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>)</parameter_list>
<comment type="block">/*@=exportheader@*/</comment>
<block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> **</type><name>p_argv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>argp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ffi_type</name> **</type><name>p_arg</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>argp</name> = <name>stack</name></expr>;</expr_stmt>

  <if>if <condition>( <expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name></expr> )</condition><then> <block>{
    <expr_stmt><expr>*<name>rvalue</name> = *(<name>void</name> **) <name>argp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>argp</name> += 4</expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><name>p_argv</name> = <name>avalue</name></expr>;</expr_stmt>

  <for>for (<init><expr><name>i</name> = <name><name>cif</name>-&gt;<name>nargs</name></name></expr>, <expr><name>p_arg</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>;</init> <condition><expr>(<name>i</name> != 0)</expr>;</condition> <incr><expr><name>i</name>--</expr>, <expr><name>p_arg</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>size_t</name></type> <name>argalign</name> <init>= <expr><name>(*<name>p_arg</name>)-&gt;<name>alignment</name></name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32_WCE</name></cpp:ifdef>
      <if>if <condition>(<expr><name>argalign</name> &gt; 4</expr>)</condition><then>
        <expr_stmt><expr><name>argalign</name> = 4</expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <comment type="block">/* Align if necessary */</comment>
      <if>if <condition>(<expr>(<name>argalign</name> - 1) &amp; (<name>unsigned</name>) <name>argp</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>argp</name> = (<name>char</name> *) <call><name>ALIGN</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>argalign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><name>z</name> = <name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>z</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
        <expr_stmt><expr><name>z</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></then></if>

      <expr_stmt><expr>*<name>p_argv</name> = (<name>void</name>*) <name>argp</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>p_argv</name>++</expr>;</expr_stmt>
      <expr_stmt><expr><name>argp</name> += <name>z</name></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<comment type="block">/*
    add   ip, pc, #-8     ; ip = address of this trampoline == address of ffi_closure
    ldr   pc, [pc, #-4]   ; jump to __fun
    DCD __fun
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_INIT_TRAMPOLINE</name><parameter_list>(<param><type><name>TRAMP</name></type></param>,<param><type><name>FUN</name></type></param>)</parameter_list></cpp:macro> \
<cpp:value>{ \
    unsigned int *__tramp = (unsigned int *)(TRAMP); \
    __tramp[0] = 0xe24fc008;            <comment type="block">/* add   ip, pc, #-8    */</comment> \
    __tramp[1] = 0xe51ff004;            <comment type="block">/* ldr   pc, [pc, #-4]  */</comment> \
    __tramp[2] = (unsigned int)(FUN); \
  }</cpp:value></cpp:define>

<comment type="block">/* the cif must already be prep'ed */</comment>

<comment type="block">/* defined in sysv.asm */</comment>
<function_decl><type><name>void</name></type> <name>ffi_closure_SYSV</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>

<function><type><name>ffi_status</name></type>
<name>ffi_prep_closure</name> <parameter_list>(<param><decl><type><name>ffi_closure</name>*</type> <name>closure</name></decl></param>,
		  <param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>,
		  <param><function_decl><type><name>void</name></type> (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>,<param><decl><type><name>void</name>**</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list></function_decl></param>,
		  <param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_SYSV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>FFI_INIT_TRAMPOLINE</name> <argument_list>(<argument><expr>&amp;<name><name>closure</name>-&gt;<name>tramp</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>ffi_closure_SYSV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>closure</name>-&gt;<name>cif</name></name>  = <name>cif</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>closure</name>-&gt;<name>user_data</name></name> = <name>user_data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>closure</name>-&gt;<name>fun</name></name>  = <name>fun</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32_WCE</name></cpp:ifdef>
  <comment type="block">/* This is important to allow calling the trampoline safely */</comment>
  <expr_stmt><expr><call><name>FlushInstructionCache</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>

</unit>
