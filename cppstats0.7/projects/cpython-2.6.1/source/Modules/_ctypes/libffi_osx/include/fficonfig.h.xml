<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_ctypes/libffi_osx/include/fficonfig.h"><comment type="block">/*	Manually created fficonfig.h for Darwin on PowerPC or Intel 

	This file is manually generated to do away with the need for autoconf and
	therefore make it easier to cross-compile and build fat binaries.

	NOTE: This file was added by PyObjC.
*/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MACOSX</name></cpp:ifndef>
<cpp:error>#<cpp:directive>error</cpp:directive> "This file is only supported on Mac OS X"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#	<cpp:directive>define</cpp:directive>	<cpp:macro><name>BYTEORDER</name></cpp:macro> <cpp:value>1234</cpp:value></cpp:define>
<cpp:undef>#	<cpp:directive>undef</cpp:directive>	<name>HOST_WORDS_BIG_ENDIAN</name></cpp:undef>
<cpp:undef>#	<cpp:directive>undef</cpp:directive>	<name>WORDS_BIGENDIAN</name></cpp:undef>
<cpp:define>#	<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIZEOF_DOUBLE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive>	<cpp:macro><name>HAVE_LONG_DOUBLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIZEOF_LONG_DOUBLE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#	<cpp:directive>define</cpp:directive>	<cpp:macro><name>BYTEORDER</name></cpp:macro> <cpp:value>1234</cpp:value></cpp:define>
<cpp:undef>#	<cpp:directive>undef</cpp:directive>	<name>HOST_WORDS_BIG_ENDIAN</name></cpp:undef>
<cpp:undef>#	<cpp:directive>undef</cpp:directive>	<name>WORDS_BIGENDIAN</name></cpp:undef>
<cpp:define>#	<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIZEOF_DOUBLE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive>	<cpp:macro><name>HAVE_LONG_DOUBLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIZEOF_LONG_DOUBLE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#	<cpp:directive>define</cpp:directive>	<cpp:macro><name>BYTEORDER</name></cpp:macro> <cpp:value>4321</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive>	<cpp:macro><name>HOST_WORDS_BIG_ENDIAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive>	<cpp:macro><name>WORDS_BIGENDIAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIZEOF_DOUBLE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:if>#	<cpp:directive>if</cpp:directive> <expr><name>__GNUC__</name> &gt;= 4</expr></cpp:if>
<cpp:define>#		<cpp:directive>define</cpp:directive>	<cpp:macro><name>HAVE_LONG_DOUBLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#		<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIZEOF_LONG_DOUBLE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 
<cpp:else>#	<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#		<cpp:directive>undef</cpp:directive>	<name>HAVE_LONG_DOUBLE</name></cpp:undef>
<cpp:define>#		<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIZEOF_LONG_DOUBLE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:endif>#	<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#	<cpp:directive>define</cpp:directive>	<cpp:macro><name>BYTEORDER</name></cpp:macro> <cpp:value>4321</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive>	<cpp:macro><name>HOST_WORDS_BIG_ENDIAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive>	<cpp:macro><name>WORDS_BIGENDIAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIZEOF_DOUBLE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive>	<cpp:macro><name>HAVE_LONG_DOUBLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIZEOF_LONG_DOUBLE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> "Unknown CPU type"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*	Define to one of `_getb67', `GETB67', `getb67' for Cray-2 and Cray-YMP
	systems. This function is required for `alloca.c' support on those systems.	*/</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CRAY_STACKSEG_END</name></cpp:undef>

<comment type="block">/*	Define to 1 if using `alloca.c'. */</comment>
<comment type="block">/*	#undef C_ALLOCA */</comment>

<comment type="block">/*	Define to the flags needed for the .section .eh_frame directive. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EH_FRAME_FLAGS</name></cpp:macro> <cpp:value>"aw"</cpp:value></cpp:define>

<comment type="block">/*	Define this if you want extra debugging. */</comment>
<comment type="block">/*	#undef FFI_DEBUG */</comment>

<comment type="block">/*	Define this is you do not want support for the raw API. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_NO_RAW_API</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/*	Define this if you do not want support for aggregate types. */</comment>
<comment type="block">/*	#undef FFI_NO_STRUCTS */</comment>

<comment type="block">/*	Define to 1 if you have `alloca', as a function or macro. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_ALLOCA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/*	Define to 1 if you have &lt;alloca.h&gt; and it should be used (not on Ultrix).	*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_ALLOCA_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/*	Define if your assembler supports .register. */</comment>
<comment type="block">/*	#undef HAVE_AS_REGISTER_PSEUDO_OP */</comment>

<comment type="block">/*	Define if your assembler and linker support unaligned PC relative relocs.	*/</comment>
<comment type="block">/*	#undef HAVE_AS_SPARC_UA_PCREL */</comment>

<comment type="block">/*	Define to 1 if you have the `memcpy' function. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MEMCPY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/*	Define if mmap with MAP_ANON(YMOUS) works. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MMAP_ANON</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/*	Define if mmap of /dev/zero works. */</comment>
<comment type="block">/*	#undef HAVE_MMAP_DEV_ZERO */</comment>

<comment type="block">/*	Define if read-only mmap of a plain file works. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MMAP_FILE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/*	Define if .eh_frame sections should be read-only. */</comment>
<comment type="block">/*	#undef HAVE_RO_EH_FRAME */</comment>

<comment type="block">/*	Define to 1 if your C compiler doesn't accept -c and -o together. */</comment>
<comment type="block">/*	#undef NO_MINUS_C_MINUS_O */</comment>

<comment type="block">/*	Name of package */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKAGE</name></cpp:macro> <cpp:value>"libffi"</cpp:value></cpp:define>

<comment type="block">/*	Define to the address where bug reports for this package should be sent. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKAGE_BUGREPORT</name></cpp:macro> <cpp:value>"http://gcc.gnu.org/bugs.html"</cpp:value></cpp:define>

<comment type="block">/*	Define to the full name of this package. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKAGE_NAME</name></cpp:macro> <cpp:value>"libffi"</cpp:value></cpp:define>

<comment type="block">/*	Define to the full name and version of this package. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKAGE_STRING</name></cpp:macro> <cpp:value>"libffi 2.1"</cpp:value></cpp:define>

<comment type="block">/*	Define to the one symbol short name of this package. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKAGE_TARNAME</name></cpp:macro> <cpp:value>"libffi"</cpp:value></cpp:define>

<comment type="block">/*	Define to the version of this package. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKAGE_VERSION</name></cpp:macro> <cpp:value>"2.1"</cpp:value></cpp:define>

<comment type="block">/*	If using the C implementation of alloca, define if you know the
	direction of stack growth for your system; otherwise it will be
	automatically deduced at run-time.
	STACK_DIRECTION &gt; 0 =&gt; grows toward higher addresses
	STACK_DIRECTION &lt; 0 =&gt; grows toward lower addresses
	STACK_DIRECTION = 0 =&gt; direction of growth unknown	*/</comment>
<comment type="block">/*	#undef STACK_DIRECTION */</comment>

<comment type="block">/*	Define to 1 if you have the ANSI C header files. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDC_HEADERS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/*	Define this if you are using Purify and want to suppress spurious messages.	*/</comment>
<comment type="block">/*	#undef USING_PURIFY	*/</comment>

<comment type="block">/*	Version number of package */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERSION</name></cpp:macro> <cpp:value>"2.1-pyobjc"</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_HIDDEN_VISIBILITY_ATTRIBUTE</name></cpp:ifdef>
<cpp:ifdef>#	<cpp:directive>ifdef</cpp:directive> <name>LIBFFI_ASM</name></cpp:ifdef>
<cpp:define>#		<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_HIDDEN</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>.hidden name</cpp:value></cpp:define>
<cpp:else>#	<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#		<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_HIDDEN</name></cpp:macro> <cpp:value>__attribute__((visibility ("hidden")))</cpp:value></cpp:define>
<cpp:endif>#	<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#	<cpp:directive>ifdef</cpp:directive> <name>LIBFFI_ASM</name></cpp:ifdef>
<cpp:define>#		<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_HIDDEN</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:else>#	<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#		<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_HIDDEN</name></cpp:macro></cpp:define>
<cpp:endif>#	<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif></unit>
