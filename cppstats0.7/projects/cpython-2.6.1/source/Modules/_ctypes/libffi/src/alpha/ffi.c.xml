<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_ctypes/libffi/src/alpha/ffi.c"><comment type="block">/* -----------------------------------------------------------------------
   ffi.c - Copyright (c) 1998, 2001, 2007, 2008  Red Hat, Inc.
   
   Alpha Foreign Function Interface 

   Permission is hereby granted, free of charge, to any person obtaining
   a copy of this software and associated documentation files (the
   ``Software''), to deal in the Software without restriction, including
   without limitation the rights to use, copy, modify, merge, publish,
   distribute, sublicense, and/or sell copies of the Software, and to
   permit persons to whom the Software is furnished to do so, subject to
   the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,
   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
   HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
   WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   ----------------------------------------------------------------------- */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Force FFI_TYPE_LONGDOUBLE to be different than FFI_TYPE_DOUBLE;
   all further uses in this file will refer to the 128-bit type.  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LONG_DOUBLE_128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != 4</expr></cpp:if>
<cpp:error>#  <cpp:directive>error</cpp:directive> FFI_TYPE_LONGDOUBLE out of date</cpp:error>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef># <cpp:directive>undef</cpp:directive> <name>FFI_TYPE_LONGDOUBLE</name></cpp:undef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_LONGDOUBLE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_call_osf</name><argument_list>(<argument><expr><name>void</name> *</expr></argument>, <argument><expr><name>unsigned</name> <name>long</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>void</name> *</expr></argument>, <argument><expr><call><call><name>void</name> <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
  <name>FFI_HIDDEN</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_closure_osf</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>FFI_HIDDEN</name></decl>;</decl_stmt>


<function><type><name>ffi_status</name></type>
<name>ffi_prep_cif_machdep</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Adjust cif-&gt;bytes to represent a minimum 6 words for the temporary
     register argument loading area.  */</comment>
  <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>bytes</name></name> &lt; 6*<name>FFI_SIZEOF_ARG</name></expr>)</condition><then>
    <expr_stmt><expr><name><name>cif</name>-&gt;<name>bytes</name></name> = 6*<name>FFI_SIZEOF_ARG</name></expr>;</expr_stmt></then></if>

  <comment type="block">/* Set the return type flag */</comment>
  <switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>)</condition>
    <block>{
    <case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
      <comment type="block">/* 128-bit long double is returned in memory, like a struct.  */</comment>
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_STRUCT</name></expr>;</expr_stmt>
      <break>break;</break>

    </case><default>default:
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_INT</name></expr>;</expr_stmt>
      <break>break;</break>
    </default>}</block></switch>
  
  <return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>


<function><type><name>void</name></type>
<name>ffi_call</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, <param><decl><type><name>void</name> **</type><name>avalue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> *</type><name>stack</name></decl>, *<decl><type ref="prev"/><name>argp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>avn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ffi_type</name> **</type><name>arg_types</name></decl>;</decl_stmt>
  
  <comment type="block">/* If the return value is a struct and we don't have a return
     value address then we need to make one.  */</comment>
  <if>if <condition>(<expr><name>rvalue</name> == <name>NULL</name> &amp;&amp; <name><name>cif</name>-&gt;<name>flags</name></name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then>
    <expr_stmt><expr><name>rvalue</name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* Allocate the space for the arguments, plus 4 words of temp
     space for ffi_call_osf.  */</comment>
  <expr_stmt><expr><name>argp</name> = <name>stack</name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name> + 4*<name>FFI_SIZEOF_ARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>flags</name></name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then>
    <expr_stmt><expr>*(<name>void</name> **) <name>argp</name>++ = <name>rvalue</name></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name>avn</name> = <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>arg_types</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>i</name> &lt; <name>avn</name></expr>)</condition>
    <block>{
      <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name>(*<name>arg_types</name>)-&gt;<name>size</name></name></expr></init></decl>;</decl_stmt>

      <switch>switch <condition>(<expr><name>(*<name>arg_types</name>)-&gt;<name>type</name></name></expr>)</condition>
	<block>{
	<case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
	  <expr_stmt><expr>*(<name>SINT64</name> *) <name>argp</name> = *<call>(<name>SINT8</name> *)<argument_list>(<argument><expr>* <name>avalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <break>break;</break>
		  
	</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
	  <expr_stmt><expr>*(<name>SINT64</name> *) <name>argp</name> = *<call>(<name>UINT8</name> *)<argument_list>(<argument><expr>* <name>avalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <break>break;</break>
		  
	</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
	  <expr_stmt><expr>*(<name>SINT64</name> *) <name>argp</name> = *<call>(<name>SINT16</name> *)<argument_list>(<argument><expr>* <name>avalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <break>break;</break>
		  
	</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
	  <expr_stmt><expr>*(<name>SINT64</name> *) <name>argp</name> = *<call>(<name>UINT16</name> *)<argument_list>(<argument><expr>* <name>avalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <break>break;</break>
		  
	</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
	  <comment type="block">/* Note that unsigned 32-bit quantities are sign extended.  */</comment>
	  <expr_stmt><expr>*(<name>SINT64</name> *) <name>argp</name> = *<call>(<name>SINT32</name> *)<argument_list>(<argument><expr>* <name>avalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <break>break;</break>
		  
	</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
	  <expr_stmt><expr>*(<name>UINT64</name> *) <name>argp</name> = *<call>(<name>UINT64</name> *)<argument_list>(<argument><expr>* <name>avalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <break>break;</break>

	</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
	  <if>if <condition>(<expr><name>argp</name> - <name>stack</name> &lt; 6</expr>)</condition><then>
	    <block>{
	      <comment type="block">/* Note the conversion -- all the fp regs are loaded as
		 doubles.  The in-register format is the same.  */</comment>
	      <expr_stmt><expr>*(<name>double</name> *) <name>argp</name> = *<call>(<name>float</name> *)<argument_list>(<argument><expr>* <name>avalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then>
	  <else>else
	    <expr_stmt><expr>*(<name>float</name> *) <name>argp</name> = *<call>(<name>float</name> *)<argument_list>(<argument><expr>* <name>avalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	  <break>break;</break>

	</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
	  <expr_stmt><expr>*(<name>double</name> *) <name>argp</name> = *<call>(<name>double</name> *)<argument_list>(<argument><expr>* <name>avalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <break>break;</break>

	</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
	  <comment type="block">/* 128-bit long double is passed by reference.  */</comment>
	  <expr_stmt><expr>*(<name>long</name> <name>double</name> **) <name>argp</name> = <call>(<name>long</name> <name>double</name> *)<argument_list>(<argument><expr>* <name>avalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>size</name> = sizeof (<name>long</name> <name>double</name> *)</expr>;</expr_stmt>
	  <break>break;</break>

	</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr>*<name>avalue</name></expr></argument>, <argument><expr><name>(*<name>arg_types</name>)-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <break>break;</break>

	</case><default>default:
	  <expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</default>}</block></switch>

      <expr_stmt><expr><name>argp</name> += <call><name>ALIGN</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>FFI_SIZEOF_ARG</name></expr></argument>)</argument_list></call> / <name>FFI_SIZEOF_ARG</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name>++</expr>, <expr><name>arg_types</name>++</expr>, <expr><name>avalue</name>++</expr>;</expr_stmt>
    }</block></while>

  <expr_stmt><expr><call><name>ffi_call_osf</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name>rvalue</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name>ffi_status</name></type>
<name>ffi_prep_closure_loc</name> <parameter_list>(<param><decl><type><name>ffi_closure</name>*</type> <name>closure</name></decl></param>,
		      <param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>,
		      <param><function_decl><type><name>void</name></type> (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>, <param><decl><type><name>void</name>**</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>)</parameter_list></function_decl></param>,
		      <param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>,
		      <param><decl><type><name>void</name> *</type><name>codeloc</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name> *</type><name>tramp</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>tramp</name> = (<name>unsigned</name> <name>int</name> *) &amp;<name><name>closure</name>-&gt;<name>tramp</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tramp</name><index>[<expr>0</expr>]</index></name> = 0x47fb0401</expr>;</expr_stmt>	<comment type="block">/* mov $27,$1		*/</comment>
  <expr_stmt><expr><name><name>tramp</name><index>[<expr>1</expr>]</index></name> = 0xa77b0010</expr>;</expr_stmt>	<comment type="block">/* ldq $27,16($27)	*/</comment>
  <expr_stmt><expr><name><name>tramp</name><index>[<expr>2</expr>]</index></name> = 0x6bfb0000</expr>;</expr_stmt>	<comment type="block">/* jmp $31,($27),0	*/</comment>
  <expr_stmt><expr><name><name>tramp</name><index>[<expr>3</expr>]</index></name> = 0x47ff041f</expr>;</expr_stmt>	<comment type="block">/* nop			*/</comment>
  <expr_stmt><expr>*(<name>void</name> **) &amp;<name><name>tramp</name><index>[<expr>4</expr>]</index></name> = <name>ffi_closure_osf</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>closure</name>-&gt;<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>closure</name>-&gt;<name>fun</name></name> = <name>fun</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>closure</name>-&gt;<name>user_data</name></name> = <name>user_data</name></expr>;</expr_stmt>

  <comment type="block">/* Flush the Icache.

     Tru64 UNIX as doesn't understand the imb mnemonic, so use call_pal
     instead, since both Compaq as and gas can handle it.

     0x86 is PAL_imb in Tru64 UNIX &lt;alpha/pal.h&gt;.  */</comment>
  <asm>asm <specifier>volatile</specifier> ("call_pal 0x86" : : : "memory");</asm>

  <return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>


<function><type><name>long</name> <name>FFI_HIDDEN</name></type>
<name>ffi_closure_osf_inner</name><parameter_list>(<param><decl><type><name>ffi_closure</name> *</type><name>closure</name></decl></param>, <param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, <param><decl><type><name>unsigned</name> <name>long</name> *</type><name>argp</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> **</type><name>avalue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ffi_type</name> **</type><name>arg_types</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>avn</name></decl>, <decl><type ref="prev"/><name>argn</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>cif</name> = <name><name>closure</name>-&gt;<name>cif</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>avalue</name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>nargs</name></name> * <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>argn</name> = 0</expr>;</expr_stmt>

  <comment type="block">/* Copy the caller's structure return address to that the closure
     returns the data directly to the caller.  */</comment>
  <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>flags</name></name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>rvalue</name> = (<name>void</name> *) <name><name>argp</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>argn</name> = 1</expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name>avn</name> = <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>arg_types</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>;</expr_stmt>
  
  <comment type="block">/* Grab the addresses of the arguments from the stack frame.  */</comment>
  <while>while <condition>(<expr><name>i</name> &lt; <name>avn</name></expr>)</condition>
    <block>{
      <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>size</name></expr></init></decl>;</decl_stmt>

      <switch>switch <condition>(<expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name></expr>)</condition>
	<block>{
	<case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
	  <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>argp</name><index>[<expr><name>argn</name></expr>]</index></name></expr>;</expr_stmt>
	  <break>break;</break>

	</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
	  <if>if <condition>(<expr><name>argn</name> &lt; 6</expr>)</condition><then>
	    <block>{
	      <comment type="block">/* Floats coming from registers need conversion from double
	         back to float format.  */</comment>
	      <expr_stmt><expr>*(<name>float</name> *)&amp;<name><name>argp</name><index>[<expr><name>argn</name> - 6</expr>]</index></name> = *(<name>double</name> *)&amp;<name><name>argp</name><index>[<expr><name>argn</name> - 6</expr>]</index></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>argp</name><index>[<expr><name>argn</name> - 6</expr>]</index></name></expr>;</expr_stmt>
	    }</block></then>
	  <else>else
	    <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>argp</name><index>[<expr><name>argn</name></expr>]</index></name></expr>;</expr_stmt></else></if>
	  <break>break;</break>

	</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
	  <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>argp</name><index>[<expr><name>argn</name> - (<name>argn</name> &lt; 6 ? 6 : 0)</expr>]</index></name></expr>;</expr_stmt>
	  <break>break;</break>

	</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
	  <comment type="block">/* 128-bit long double is passed by reference.  */</comment>
	  <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>long</name> <name>double</name> *) <name><name>argp</name><index>[<expr><name>argn</name></expr>]</index></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>size</name> = sizeof (<name>long</name> <name>double</name> *)</expr>;</expr_stmt>
	  <break>break;</break>

	</case><default>default:
	  <expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
	</default>}</block></switch>

      <expr_stmt><expr><name>argn</name> += <call><name>ALIGN</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>FFI_SIZEOF_ARG</name></expr></argument>)</argument_list></call> / <name>FFI_SIZEOF_ARG</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
    }</block></while>

  <comment type="block">/* Invoke the closure.  */</comment>
  <expr_stmt><expr><call><name><name>closure</name>-&gt;<name>fun</name></name> <argument_list>(<argument><expr><name>cif</name></expr></argument>, <argument><expr><name>rvalue</name></expr></argument>, <argument><expr><name>avalue</name></expr></argument>, <argument><expr><name><name>closure</name>-&gt;<name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Tell ffi_closure_osf how to perform return type promotions.  */</comment>
  <return>return <expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>;</return>
}</block></function>
</unit>
