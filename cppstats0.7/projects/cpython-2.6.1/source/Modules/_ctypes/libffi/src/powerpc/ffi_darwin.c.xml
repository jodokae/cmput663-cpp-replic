<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_ctypes/libffi/src/powerpc/ffi_darwin.c"><comment type="block">/* -----------------------------------------------------------------------
   ffi_darwin.c

   Copyright (C) 1998 Geoffrey Keating
   Copyright (C) 2001 John Hornkvist
   Copyright (C) 2002, 2006, 2007 Free Software Foundation, Inc.

   FFI support for Darwin and AIX.
   
   Permission is hereby granted, free of charge, to any person obtaining
   a copy of this software and associated documentation files (the
   ``Software''), to deal in the Software without restriction, including
   without limitation the rights to use, copy, modify, merge, publish,
   distribute, sublicense, and/or sell copies of the Software, and to
   permit persons to whom the Software is furnished to do so, subject to
   the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
   IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR
   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   OTHER DEALINGS IN THE SOFTWARE.
   ----------------------------------------------------------------------- */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_closure_ASM</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>

<enum>enum <block>{
  <comment type="block">/* The assembly depends on these exact flags.  */</comment>
  <decl><name>FLAG_RETURNS_NOTHING</name>  <init>= <expr>1 &lt;&lt; (31-30)</expr></init></decl>, <comment type="block">/* These go in cr7  */</comment>
  <decl><name>FLAG_RETURNS_FP</name>       <init>= <expr>1 &lt;&lt; (31-29)</expr></init></decl>,
  <decl><name>FLAG_RETURNS_64BITS</name>   <init>= <expr>1 &lt;&lt; (31-28)</expr></init></decl>,
  <decl><name>FLAG_RETURNS_128BITS</name>  <init>= <expr>1 &lt;&lt; (31-31)</expr></init></decl>,

  <decl><name>FLAG_ARG_NEEDS_COPY</name>   <init>= <expr>1 &lt;&lt; (31- 7)</expr></init></decl>,
  <decl><name>FLAG_FP_ARGUMENTS</name>     <init>= <expr>1 &lt;&lt; (31- 6)</expr></init></decl>, <comment type="block">/* cr1.eq; specified by ABI  */</comment>
  <decl><name>FLAG_4_GPR_ARGUMENTS</name>  <init>= <expr>1 &lt;&lt; (31- 5)</expr></init></decl>,
  <decl><name>FLAG_RETVAL_REFERENCE</name> <init>= <expr>1 &lt;&lt; (31- 4)</expr></init></decl>
}</block>;</enum>

<comment type="block">/* About the DARWIN ABI.  */</comment>
<enum>enum <block>{
  <decl><name>NUM_GPR_ARG_REGISTERS</name> <init>= <expr>8</expr></init></decl>,
  <decl><name>NUM_FPR_ARG_REGISTERS</name> <init>= <expr>13</expr></init></decl>
}</block>;</enum>
<enum>enum <block>{ <decl><name>ASM_NEEDS_REGISTERS</name> <init>= <expr>4</expr></init></decl> }</block>;</enum>

<comment type="block">/* ffi_prep_args is called by the assembly routine once stack space
   has been allocated for the function's arguments.

   The stack layout we want looks like this:

   |   Return address from ffi_call_DARWIN      |	higher addresses
   |--------------------------------------------|
   |   Previous backchain pointer	4	|	stack pointer here
   |--------------------------------------------|&lt;+ &lt;&lt;&lt;	on entry to
   |   Saved r28-r31			4*4	| |	ffi_call_DARWIN
   |--------------------------------------------| |
   |   Parameters             (at least 8*4=32) | |
   |--------------------------------------------| |
   |   Space for GPR2                   4       | |
   |--------------------------------------------| |	stack	|
   |   Reserved                       2*4       | |	grows	|
   |--------------------------------------------| |	down	V
   |   Space for callee's LR		4	| |
   |--------------------------------------------| |	lower addresses
   |   Saved CR                         4       | |
   |--------------------------------------------| |     stack pointer here
   |   Current backchain pointer	4	|-/	during
   |--------------------------------------------|   &lt;&lt;&lt;	ffi_call_DARWIN

   */</comment>

<function><type><name>void</name></type> <name>ffi_prep_args</name><parameter_list>(<param><decl><type><name>extended_cif</name> *</type><name>ecif</name></decl></param>, <param><decl><type><name>unsigned</name> *<specifier>const</specifier></type> <name>stack</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>bytes</name> <init>= <expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>bytes</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>flags</name> <init>= <expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>flags</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* 'stacktop' points at the previous backchain pointer.  */</comment>
  <decl_stmt><decl><type><name>unsigned</name> *<specifier>const</specifier></type> <name>stacktop</name> <init>= <expr><name>stack</name> + (<name>bytes</name> / <sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof>)</expr></init></decl>;</decl_stmt>

  <comment type="block">/* 'fpr_base' points at the space for fpr1, and grows upwards as
     we use FPR registers.  */</comment>
  <decl_stmt><decl><type><name>double</name> *</type><name>fpr_base</name> <init>= <expr><call>(<name>double</name>*) <argument_list>(<argument><expr><name>stacktop</name> - <name>ASM_NEEDS_REGISTERS</name></expr></argument>)</argument_list></call> - <name>NUM_FPR_ARG_REGISTERS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fparg_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>


  <comment type="block">/* 'next_arg' grows up as we put parameters in it.  */</comment>
  <decl_stmt><decl><type><name>unsigned</name> *</type><name>next_arg</name> <init>= <expr><name>stack</name> + 6</expr></init></decl>;</decl_stmt> <comment type="block">/* 6 reserved positions.  */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>nargs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>double_tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> **</type><name>p_argv</name> <init>= <expr><name><name>ecif</name>-&gt;<name>avalue</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>gprvalue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ffi_type</name>**</type> <name>ptr</name> <init>= <expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>arg_types</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>dest_cpy</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>size_al</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check that everything starts aligned properly.  */</comment>
  <expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>((<name>unsigned</name>)(<name>char</name> *)<name>stack</name> &amp; 0xF) == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>((<name>unsigned</name>)(<name>char</name> *)<name>stacktop</name> &amp; 0xF) == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>(<name>bytes</name> &amp; 0xF) == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Deal with return values that are actually pass-by-reference.
     Rule:
     Return values are referenced by r3, so r4 is the first parameter.  */</comment>

  <if>if <condition>(<expr><name>flags</name> &amp; <name>FLAG_RETVAL_REFERENCE</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>next_arg</name>++ = (<name>unsigned</name>)(<name>char</name> *)<name><name>ecif</name>-&gt;<name>rvalue</name></name></expr>;</expr_stmt></then></if>

  <comment type="block">/* Now for the arguments.  */</comment>
  <for>for (<init>;</init>
       <condition><expr><name>i</name> &gt; 0</expr>;</condition>
       <incr><expr><name>i</name>--</expr>, <expr><name>ptr</name>++</expr>, <expr><name>p_argv</name>++</expr></incr>)
    <block>{
      <switch>switch <condition>(<expr><name>(*<name>ptr</name>)-&gt;<name>type</name></name></expr>)</condition>
	<block>{
	<comment type="block">/* If a floating-point parameter appears before all of the general-
	   purpose registers are filled, the corresponding GPRs that match
	   the size of the floating-point parameter are skipped.  */</comment>
	<case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
	  <expr_stmt><expr><name>double_tmp</name> = *(<name>float</name> *)*<name>p_argv</name></expr>;</expr_stmt>
	  <if>if <condition>(<expr><name>fparg_count</name> &gt;= <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then>
	    <expr_stmt><expr>*(<name>double</name> *)<name>next_arg</name> = <name>double_tmp</name></expr>;</expr_stmt></then>
	  <else>else
	    <expr_stmt><expr>*<name>fpr_base</name>++ = <name>double_tmp</name></expr>;</expr_stmt></else></if>
	  <expr_stmt><expr><name>next_arg</name>++</expr>;</expr_stmt>
	  <expr_stmt><expr><name>fparg_count</name>++</expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr><name>flags</name> &amp; <name>FLAG_FP_ARGUMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <break>break;</break>

	</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
	  <expr_stmt><expr><name>double_tmp</name> = *(<name>double</name> *)*<name>p_argv</name></expr>;</expr_stmt>
	  <if>if <condition>(<expr><name>fparg_count</name> &gt;= <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then>
	    <expr_stmt><expr>*(<name>double</name> *)<name>next_arg</name> = <name>double_tmp</name></expr>;</expr_stmt></then>
	  <else>else
	    <expr_stmt><expr>*<name>fpr_base</name>++ = <name>double_tmp</name></expr>;</expr_stmt></else></if>
	  <expr_stmt><expr><name>next_arg</name> += 2</expr>;</expr_stmt>
	  <expr_stmt><expr><name>fparg_count</name>++</expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr><name>flags</name> &amp; <name>FLAG_FP_ARGUMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>

	</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
	  <expr_stmt><expr><name>double_tmp</name> = ((<name>double</name> *)*<name>p_argv</name>)<index>[<expr>0</expr>]</index></expr>;</expr_stmt>
	  <if>if <condition>(<expr><name>fparg_count</name> &gt;= <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then>
	    <expr_stmt><expr>*(<name>double</name> *)<name>next_arg</name> = <name>double_tmp</name></expr>;</expr_stmt></then>
	  <else>else
	    <expr_stmt><expr>*<name>fpr_base</name>++ = <name>double_tmp</name></expr>;</expr_stmt></else></if>
	  <expr_stmt><expr><name>next_arg</name> += 2</expr>;</expr_stmt>
	  <expr_stmt><expr><name>fparg_count</name>++</expr>;</expr_stmt>
	  <expr_stmt><expr><name>double_tmp</name> = ((<name>double</name> *)*<name>p_argv</name>)<index>[<expr>1</expr>]</index></expr>;</expr_stmt>
	  <if>if <condition>(<expr><name>fparg_count</name> &gt;= <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then>
	    <expr_stmt><expr>*(<name>double</name> *)<name>next_arg</name> = <name>double_tmp</name></expr>;</expr_stmt></then>
	  <else>else
	    <expr_stmt><expr>*<name>fpr_base</name>++ = <name>double_tmp</name></expr>;</expr_stmt></else></if>
	  <expr_stmt><expr><name>next_arg</name> += 2</expr>;</expr_stmt>
	  <expr_stmt><expr><name>fparg_count</name>++</expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr><name>flags</name> &amp; <name>FLAG_FP_ARGUMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
	  <expr_stmt><expr>*(<name>long</name> <name>long</name> *)<name>next_arg</name> = *(<name>long</name> <name>long</name> *)*<name>p_argv</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>next_arg</name>+=2</expr>;</expr_stmt>
	  <break>break;</break>
	</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
	  <expr_stmt><expr><name>gprvalue</name> = *(<name>unsigned</name> <name>char</name> *)*<name>p_argv</name></expr>;</expr_stmt>
	  <goto>goto <name>putgpr</name>;</goto>
	</case><case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
	  <expr_stmt><expr><name>gprvalue</name> = *(<name>signed</name> <name>char</name> *)*<name>p_argv</name></expr>;</expr_stmt>
	  <goto>goto <name>putgpr</name>;</goto>
	</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
	  <expr_stmt><expr><name>gprvalue</name> = *(<name>unsigned</name> <name>short</name> *)*<name>p_argv</name></expr>;</expr_stmt>
	  <goto>goto <name>putgpr</name>;</goto>
	</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
	  <expr_stmt><expr><name>gprvalue</name> = *(<name>signed</name> <name>short</name> *)*<name>p_argv</name></expr>;</expr_stmt>
	  <goto>goto <name>putgpr</name>;</goto>

	</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
	  <expr_stmt><expr><name>dest_cpy</name> = (<name>char</name> *) <name>next_arg</name></expr>;</expr_stmt>

	  <comment type="block">/* Structures that match the basic modes (QI 1 byte, HI 2 bytes,
	     SI 4 bytes) are aligned as if they were those modes.
	     Structures with 3 byte in size are padded upwards.  */</comment>
	  <expr_stmt><expr><name>size_al</name> = <name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
	  <comment type="block">/* If the first member of the struct is a double, then align
	     the struct to double-word.
	     Type 3 is defined in include/ffi.h. #define FFI_TYPE_DOUBLE 3.  */</comment>
	  <if>if <condition>(<expr><name>(*<name>ptr</name>)-&gt;<name>elements</name></name><index>[<expr>0</expr>]</index>-&gt;<name>type</name> == 3</expr>)</condition><then>
	    <expr_stmt><expr><name>size_al</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	  <if>if <condition>(<expr><name>size_al</name> &lt; 3 &amp;&amp; <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_DARWIN</name></expr>)</condition><then>
	    <expr_stmt><expr><name>dest_cpy</name> += 4 - <name>size_al</name></expr>;</expr_stmt></then></if>

	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>(<name>char</name> *)<name>dest_cpy</name></expr></argument>, <argument><expr>(<name>char</name> *)*<name>p_argv</name></expr></argument>, <argument><expr><name>size_al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>next_arg</name> += (<name>size_al</name> + 3) / 4</expr>;</expr_stmt>
	  <break>break;</break>

	</case><case>case <expr><name>FFI_TYPE_INT</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
	  <expr_stmt><expr><name>gprvalue</name> = *(<name>unsigned</name> *)*<name>p_argv</name></expr>;</expr_stmt>
	<label><name>putgpr</name>:</label>
	  <expr_stmt><expr>*<name>next_arg</name>++ = <name>gprvalue</name></expr>;</expr_stmt>
	  <break>break;</break>
	</case><default>default:
	  <break>break;</break>
	</default>}</block></switch>
    }</block></for>

  <comment type="block">/* Check that we didn't overrun the stack...  */</comment>
  <comment type="line">//FFI_ASSERT(gpr_base &lt;= stacktop - ASM_NEEDS_REGISTERS);</comment>
  <comment type="line">//FFI_ASSERT((unsigned *)fpr_base</comment>
  <comment type="line">//	     &lt;= stacktop - ASM_NEEDS_REGISTERS - NUM_GPR_ARG_REGISTERS);</comment>
  <comment type="line">//FFI_ASSERT(flags &amp; FLAG_4_GPR_ARGUMENTS || intarg_count &lt;= 4);</comment>
}</block></function>

<comment type="block">/* Adjust the size of S to be correct for Darwin.
   On Darwin, the first field of a structure has natural alignment.  */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>darwin_adjust_aggregate_sizes</name> <parameter_list>(<param><decl><type><name>ffi_type</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>s</name>-&gt;<name>type</name></name> != <name>FFI_TYPE_STRUCT</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <expr_stmt><expr><name><name>s</name>-&gt;<name>size</name></name> = 0</expr>;</expr_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>s</name>-&gt;<name>elements</name><index>[<expr><name>i</name></expr>]</index></name> != <name>NULL</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>ffi_type</name> *</type><name>p</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>align</name></decl>;</decl_stmt>
      
      <expr_stmt><expr><name>p</name> = <name><name>s</name>-&gt;<name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>darwin_adjust_aggregate_sizes</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>i</name> == 0
	  &amp;&amp; (<name><name>p</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_UINT64</name>
	      || <name><name>p</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_SINT64</name>
	      || <name><name>p</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_DOUBLE</name>
	      || <name><name>p</name>-&gt;<name>alignment</name></name> == 8)</expr>)</condition><then>
	<expr_stmt><expr><name>align</name> = 8</expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr><name><name>p</name>-&gt;<name>alignment</name></name> == 16 || <name><name>p</name>-&gt;<name>alignment</name></name> &lt; 4</expr>)</condition><then>
	<expr_stmt><expr><name>align</name> = <name><name>p</name>-&gt;<name>alignment</name></name></expr>;</expr_stmt></then>
      <else>else
	<expr_stmt><expr><name>align</name> = 4</expr>;</expr_stmt></else></if></else></if>
      <expr_stmt><expr><name><name>s</name>-&gt;<name>size</name></name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>size</name></name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call> + <name><name>p</name>-&gt;<name>size</name></name></expr>;</expr_stmt>
    }</block></for>
  
  <expr_stmt><expr><name><name>s</name>-&gt;<name>size</name></name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>size</name></name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if>if <condition>(<expr><name><name>s</name>-&gt;<name>elements</name><index>[<expr>0</expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_UINT64</name>
      || <name><name>s</name>-&gt;<name>elements</name><index>[<expr>0</expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_SINT64</name>
      || <name><name>s</name>-&gt;<name>elements</name><index>[<expr>0</expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_DOUBLE</name>
      || <name><name>s</name>-&gt;<name>elements</name><index>[<expr>0</expr>]</index></name>-&gt;<name>alignment</name> == 8</expr>)</condition><then>
    <expr_stmt><expr><name><name>s</name>-&gt;<name>alignment</name></name> = <name><name>s</name>-&gt;<name>alignment</name></name> &gt; 8 ? <name><name>s</name>-&gt;<name>alignment</name></name> : 8</expr>;</expr_stmt></then></if>
  <comment type="block">/* Do not add additional tail padding.  */</comment>
}</block></function>

<comment type="block">/* Perform machine dependent cif processing.  */</comment>
<function><type><name>ffi_status</name></type> <name>ffi_prep_cif_machdep</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* All this is for the DARWIN ABI.  */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ffi_type</name> **</type><name>ptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>bytes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fparg_count</name> <init>= <expr>0</expr></init>, <name>intarg_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>size_al</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

  <comment type="block">/* All the machine-independent calculation of cif-&gt;bytes will be wrong.
     All the calculation of structure sizes will also be wrong.
     Redo the calculation for DARWIN.  */</comment>

  <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_DARWIN</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>darwin_adjust_aggregate_sizes</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
	<expr_stmt><expr><call><name>darwin_adjust_aggregate_sizes</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
    }</block></then></if>

  <comment type="block">/* Space for the frame pointer, callee's LR, CR, etc, and for
     the asm's temp regs.  */</comment>

  <expr_stmt><expr><name>bytes</name> = (6 + <name>ASM_NEEDS_REGISTERS</name>) * <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <comment type="block">/* Return value handling.  The rules are as follows:
     - 32-bit (or less) integer values are returned in gpr3;
     - Structures of size &lt;= 4 bytes also returned in gpr3;
     - 64-bit integer values and structures between 5 and 8 bytes are returned
       in gpr3 and gpr4;
     - Single/double FP values are returned in fpr1;
     - Long double FP (if not equivalent to double) values are returned in
       fpr1 and fpr2;
     - Larger structures values are allocated space and a pointer is passed
       as the first argument.  */</comment>
  <switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>)</condition>
    <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>
    <case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
      <expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_128BITS</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_FP</name></expr>;</expr_stmt>
      <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    </case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
      <expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_64BITS</name></expr>;</expr_stmt>
      <comment type="block">/* Fall through.  */</comment>
    </case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
      <expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_FP</name></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
      <expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_64BITS</name></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
      <expr_stmt><expr><name>flags</name> |= <name>FLAG_RETVAL_REFERENCE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_NOTHING</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>intarg_count</name>++</expr>;</expr_stmt>
      <break>break;</break>
    </case><case>case <expr><name>FFI_TYPE_VOID</name></expr>:
      <expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_NOTHING</name></expr>;</expr_stmt>
      <break>break;</break>

    </case><default>default:
      <comment type="block">/* Returns 32-bit integer, or similar.  Nothing to do here.  */</comment>
      <break>break;</break>
    </default>}</block></switch>

  <comment type="block">/* The first NUM_GPR_ARG_REGISTERS words of integer arguments, and the
     first NUM_FPR_ARG_REGISTERS fp arguments, go in registers; the rest
     goes on the stack.  Structures are passed as a pointer to a copy of
     the structure. Stuff on the stack needs to keep proper alignment.  */</comment>
  <for>for (<init><expr><name>ptr</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>, <expr><name>i</name> = <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</init> <condition><expr><name>i</name> &gt; 0</expr>;</condition> <incr><expr><name>i</name>--</expr>, <expr><name>ptr</name>++</expr></incr>)
    <block>{
      <switch>switch <condition>(<expr><name>(*<name>ptr</name>)-&gt;<name>type</name></name></expr>)</condition>
	<block>{
	<case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
	  <expr_stmt><expr><name>fparg_count</name>++</expr>;</expr_stmt>
	  <comment type="block">/* If this FP arg is going on the stack, it must be
	     8-byte-aligned.  */</comment>
	  <if>if <condition>(<expr><name>fparg_count</name> &gt; <name>NUM_FPR_ARG_REGISTERS</name>
	      &amp;&amp; <name>intarg_count</name>%2 != 0</expr>)</condition><then>
	    <expr_stmt><expr><name>intarg_count</name>++</expr>;</expr_stmt></then></if>
	  <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>

	</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
	  <expr_stmt><expr><name>fparg_count</name> += 2</expr>;</expr_stmt>
	  <comment type="block">/* If this FP arg is going on the stack, it must be
	     8-byte-aligned.  */</comment>
	  <if>if <condition>(<expr><name>fparg_count</name> &gt; <name>NUM_FPR_ARG_REGISTERS</name>
	      &amp;&amp; <name>intarg_count</name>%2 != 0</expr>)</condition><then>
	    <expr_stmt><expr><name>intarg_count</name>++</expr>;</expr_stmt></then></if>
	  <expr_stmt><expr><name>intarg_count</name> +=2</expr>;</expr_stmt>
	  <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
	  <comment type="block">/* 'long long' arguments are passed as two words, but
	     either both words must fit in registers or both go
	     on the stack.  If they go on the stack, they must
	     be 8-byte-aligned.  */</comment>
	  <if>if <condition>(<expr><name>intarg_count</name> == <name>NUM_GPR_ARG_REGISTERS</name>-1
	      || (<name>intarg_count</name> &gt;= <name>NUM_GPR_ARG_REGISTERS</name> &amp;&amp; <name>intarg_count</name>%2 != 0)</expr>)</condition><then>
	    <expr_stmt><expr><name>intarg_count</name>++</expr>;</expr_stmt></then></if>
	  <expr_stmt><expr><name>intarg_count</name> += 2</expr>;</expr_stmt>
	  <break>break;</break>

	</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
	  <expr_stmt><expr><name>size_al</name> = <name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
	  <comment type="block">/* If the first member of the struct is a double, then align
	     the struct to double-word.
	     Type 3 is defined in include/ffi.h. #define FFI_TYPE_DOUBLE 3.  */</comment>
	  <if>if <condition>(<expr><name>(*<name>ptr</name>)-&gt;<name>elements</name></name><index>[<expr>0</expr>]</index>-&gt;<name>type</name> == 3</expr>)</condition><then>
	    <expr_stmt><expr><name>size_al</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	  <expr_stmt><expr><name>intarg_count</name> += (<name>size_al</name> + 3) / 4</expr>;</expr_stmt>
	  <break>break;</break>

	</case><default>default:
	  <comment type="block">/* Everything else is passed as a 4-byte word in a GPR, either
	     the object itself or a pointer to it.  */</comment>
	  <expr_stmt><expr><name>intarg_count</name>++</expr>;</expr_stmt>
	  <break>break;</break>
	</default>}</block></switch>
    }</block></for>

  <if>if <condition>(<expr><name>fparg_count</name> != 0</expr>)</condition><then>
    <expr_stmt><expr><name>flags</name> |= <name>FLAG_FP_ARGUMENTS</name></expr>;</expr_stmt></then></if>

  <comment type="block">/* Space for the FPR registers, if needed.  */</comment>
  <if>if <condition>(<expr><name>fparg_count</name> != 0</expr>)</condition><then>
    <expr_stmt><expr><name>bytes</name> += <name>NUM_FPR_ARG_REGISTERS</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></then></if>

  <comment type="block">/* Stack space.  */</comment>
  <if>if <condition>(<expr>(<name>intarg_count</name> + 2 * <name>fparg_count</name>) &gt; <name>NUM_GPR_ARG_REGISTERS</name></expr>)</condition><then>
    <expr_stmt><expr><name>bytes</name> += (<name>intarg_count</name> + 2 * <name>fparg_count</name>) * <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>bytes</name> += <name>NUM_GPR_ARG_REGISTERS</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></else></if>

  <comment type="block">/* The stack space allocated needs to be a multiple of 16 bytes.  */</comment>
  <expr_stmt><expr><name>bytes</name> = (<name>bytes</name> + 15) &amp; ~0xF</expr>;</expr_stmt>

  <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>flags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cif</name>-&gt;<name>bytes</name></name> = <name>bytes</name></expr>;</expr_stmt>

  <return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_call_AIX</name><parameter_list>(<param><decl><type><name>extended_cif</name> *</type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name> *</type></decl></param>,
			 <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn2</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_call_DARWIN</name><parameter_list>(<param><decl><type><name>extended_cif</name> *</type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name> *</type></decl></param>,
			    <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn2</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>ffi_call</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, <param><decl><type><name>void</name> **</type><name>avalue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>extended_cif</name></type> <name>ecif</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ecif</name>.<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ecif</name>.<name>avalue</name></name> = <name>avalue</name></expr>;</expr_stmt>

  <comment type="block">/* If the return value is a struct and we don't have a return
     value address then we need to make one.  */</comment>

  <if>if <condition>(<expr>(<name>rvalue</name> == <name>NULL</name>) &amp;&amp;
      (<name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <name>rvalue</name></expr>;</expr_stmt></else></if>

  <switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name></expr>)</condition>
    <block>{
    <case>case <expr><name>FFI_AIX</name></expr>:
      <expr_stmt><expr><call><name>ffi_call_AIX</name><argument_list>(<argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr>-<name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>,
		   <argument><expr><name>ffi_prep_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </case><case>case <expr><name>FFI_DARWIN</name></expr>:
      <expr_stmt><expr><call><name>ffi_call_DARWIN</name><argument_list>(<argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr>-<name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>,
		      <argument><expr><name>ffi_prep_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </case><default>default:
      <expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </default>}</block></switch>
}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>flush_icache</name><parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>flush_range</name><parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* The layout of a function descriptor.  A C function pointer really
   points to one of these.  */</comment>

<typedef>typedef <type><struct>struct <name>aix_fd_struct</name> <block>{
  <decl_stmt><decl><type><name>void</name> *</type><name>code_pointer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>toc</name></decl>;</decl_stmt>
}</block></struct></type> <name>aix_fd</name>;</typedef>

<comment type="block">/* here I'd like to add the stack frame layout we use in darwin_closure.S
   and aix_clsoure.S

   SP previous -&gt; +---------------------------------------+ &lt;--- child frame
		  | back chain to caller 4                |
		  +---------------------------------------+ 4
		  | saved CR 4                            |
		  +---------------------------------------+ 8
		  | saved LR 4                            |
		  +---------------------------------------+ 12
		  | reserved for compilers 4              |
		  +---------------------------------------+ 16
		  | reserved for binders 4                |
		  +---------------------------------------+ 20
		  | saved TOC pointer 4                   |
		  +---------------------------------------+ 24
		  | always reserved 8*4=32 (previous GPRs)|
		  | according to the linkage convention   |
		  | from AIX                              |
		  +---------------------------------------+ 56
		  | our FPR area 13*8=104                 |
		  | f1                                    |
		  | .                                     |
		  | f13                                   |
		  +---------------------------------------+ 160
		  | result area 8                         |
		  +---------------------------------------+ 168
		  | alignement to the next multiple of 16 |
SP current --&gt;    +---------------------------------------+ 176 &lt;- parent frame
		  | back chain to caller 4                |
		  +---------------------------------------+ 180
		  | saved CR 4                            |
		  +---------------------------------------+ 184
		  | saved LR 4                            |
		  +---------------------------------------+ 188
		  | reserved for compilers 4              |
		  +---------------------------------------+ 192
		  | reserved for binders 4                |
		  +---------------------------------------+ 196
		  | saved TOC pointer 4                   |
		  +---------------------------------------+ 200
		  | always reserved 8*4=32  we store our  |
		  | GPRs here                             |
		  | r3                                    |
		  | .                                     |
		  | r10                                   |
		  +---------------------------------------+ 232
		  | overflow part                         |
		  +---------------------------------------+ xxx
		  | ????                                  |
		  +---------------------------------------+ xxx

*/</comment>
<function><type><name>ffi_status</name></type>
<name>ffi_prep_closure_loc</name> <parameter_list>(<param><decl><type><name>ffi_closure</name>*</type> <name>closure</name></decl></param>,
		      <param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>,
		      <param><function_decl><type><name>void</name></type> (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>, <param><decl><type><name>void</name>**</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>)</parameter_list></function_decl></param>,
		      <param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>,
		      <param><decl><type><name>void</name> *</type><name>codeloc</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name> *</type><name>tramp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>ffi_aix_trampoline_struct</name> *</type><name>tramp_aix</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>aix_fd</name> *</type><name>fd</name></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name></expr>)</condition>
    <block>{
    <case>case <expr><name>FFI_DARWIN</name></expr>:

      <expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_DARWIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>tramp</name> = (<name>unsigned</name> <name>int</name> *) &amp;<name><name>closure</name>-&gt;<name>tramp</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tramp</name><index>[<expr>0</expr>]</index></name> = 0x7c0802a6</expr>;</expr_stmt>  <comment type="block">/*   mflr    r0  */</comment>
      <expr_stmt><expr><name><name>tramp</name><index>[<expr>1</expr>]</index></name> = 0x429f000d</expr>;</expr_stmt>  <comment type="block">/*   bcl-    20,4*cr7+so,0x10  */</comment>
      <expr_stmt><expr><name><name>tramp</name><index>[<expr>4</expr>]</index></name> = 0x7d6802a6</expr>;</expr_stmt>  <comment type="block">/*   mflr    r11  */</comment>
      <expr_stmt><expr><name><name>tramp</name><index>[<expr>5</expr>]</index></name> = 0x818b0000</expr>;</expr_stmt>  <comment type="block">/*   lwz     r12,0(r11) function address  */</comment>
      <expr_stmt><expr><name><name>tramp</name><index>[<expr>6</expr>]</index></name> = 0x7c0803a6</expr>;</expr_stmt>  <comment type="block">/*   mtlr    r0   */</comment>
      <expr_stmt><expr><name><name>tramp</name><index>[<expr>7</expr>]</index></name> = 0x7d8903a6</expr>;</expr_stmt>  <comment type="block">/*   mtctr   r12  */</comment>
      <expr_stmt><expr><name><name>tramp</name><index>[<expr>8</expr>]</index></name> = 0x816b0004</expr>;</expr_stmt>  <comment type="block">/*   lwz     r11,4(r11) static chain  */</comment>
      <expr_stmt><expr><name><name>tramp</name><index>[<expr>9</expr>]</index></name> = 0x4e800420</expr>;</expr_stmt>  <comment type="block">/*   bctr  */</comment>
      <expr_stmt><expr><name><name>tramp</name><index>[<expr>2</expr>]</index></name> = (<name>unsigned</name> <name>long</name>) <name>ffi_closure_ASM</name></expr>;</expr_stmt> <comment type="block">/* function  */</comment>
      <expr_stmt><expr><name><name>tramp</name><index>[<expr>3</expr>]</index></name> = (<name>unsigned</name> <name>long</name>) <name>codeloc</name></expr>;</expr_stmt> <comment type="block">/* context  */</comment>

      <expr_stmt><expr><name><name>closure</name>-&gt;<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>closure</name>-&gt;<name>fun</name></name> = <name>fun</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>closure</name>-&gt;<name>user_data</name></name> = <name>user_data</name></expr>;</expr_stmt>

      <comment type="block">/* Flush the icache. Only necessary on Darwin.  */</comment>
      <expr_stmt><expr><call><name>flush_range</name><argument_list>(<argument><expr><name>codeloc</name></expr></argument>, <argument><expr><name>FFI_TRAMPOLINE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break>break;</break>

    </case><case>case <expr><name>FFI_AIX</name></expr>:

      <expr_stmt><expr><name>tramp_aix</name> = (struct <name>ffi_aix_trampoline_struct</name> *) (<name><name>closure</name>-&gt;<name>tramp</name></name>)</expr>;</expr_stmt>
      <expr_stmt><expr><name>fd</name> = (<name>aix_fd</name> *)(<name>void</name> *)<name>ffi_closure_ASM</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_AIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>tramp_aix</name>-&gt;<name>code_pointer</name></name> = <name><name>fd</name>-&gt;<name>code_pointer</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tramp_aix</name>-&gt;<name>toc</name></name> = <name><name>fd</name>-&gt;<name>toc</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tramp_aix</name>-&gt;<name>static_chain</name></name> = <name>codeloc</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>closure</name>-&gt;<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>closure</name>-&gt;<name>fun</name></name> = <name>fun</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>closure</name>-&gt;<name>user_data</name></name> = <name>user_data</name></expr>;</expr_stmt>

    </case><default>default:

      <expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </default>}</block></switch>
  <return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>flush_icache</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>addr</name></decl></param>)</parameter_list>
<block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_AIX</name></cpp:ifndef>
  <asm>__asm__ <specifier>volatile</specifier> (
		"dcbf 0,%0\n"
		"\tsync\n"
		"\ticbi 0,%0\n"
		"\tsync\n"
		"\tisync"
		: : "r"(addr) : "memory");</asm>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>flush_range</name><parameter_list>(<param><decl><type><name>char</name> *</type> <name>addr1</name></decl></param>, <param><decl><type><name>int</name></type> <name>size</name></decl></param>)</parameter_list>
<block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_LINE_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name> += <name>MIN_LINE_SIZE</name></expr></incr>)
    <expr_stmt><expr><call><name>flush_icache</name><argument_list>(<argument><expr><name>addr1</name>+<name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
  <expr_stmt><expr><call><name>flush_icache</name><argument_list>(<argument><expr><name>addr1</name>+<name>size</name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<typedef>typedef <type><union>union
<block>{
  <decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
}</block></union></type> <name>ffi_dblfl</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ffi_closure_helper_DARWIN</name> <parameter_list>(<param><decl><type><name>ffi_closure</name>*</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>,
			       <param><decl><type><name>unsigned</name></type> <name>long</name>*</decl></param>, <param><decl><type><name>ffi_dblfl</name>*</type></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Basically the trampoline invokes ffi_closure_ASM, and on
   entry, r11 holds the address of the closure.
   After storing the registers that could possibly contain
   parameters to be passed into the stack frame and setting
   up space for a return value, ffi_closure_ASM invokes the
   following helper function to do most of the work.  */</comment>

<function><type><name>int</name></type> <name>ffi_closure_helper_DARWIN</name> <parameter_list>(<param><decl><type><name>ffi_closure</name>*</type> <name>closure</name></decl></param>, <param><decl><type><name>void</name> *</type> <name>rvalue</name></decl></param>,
			       <param><decl><type><name>unsigned</name> <name>long</name> *</type> <name>pgr</name></decl></param>, <param><decl><type><name>ffi_dblfl</name> *</type> <name>pfr</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* rvalue is the pointer to space for return value in closure assembly
     pgr is the pointer to where r3-r10 are stored in ffi_closure_ASM
     pfr is the pointer to where f1-f13 are stored in ffi_closure_ASM.  */</comment>

  <typedef>typedef <type><name>double</name></type> <name><name>ldbits</name><index>[<expr>2</expr>]</index></name>;</typedef>

  <union>union <name>ldu</name>
  <block>{
    <decl_stmt><decl><type><name>ldbits</name></type> <name>lb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>ld</name></decl>;</decl_stmt>
  }</block>;</union>

  <decl_stmt><decl><type><name>void</name> **</type>          <name>avalue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ffi_type</name> **</type>      <name>arg_types</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>             <name>i</name></decl>, <decl><type ref="prev"/><name>avn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>             <name>nf</name></decl>;</decl_stmt>   <comment type="block">/* number of floating registers already used.  */</comment>
  <decl_stmt><decl><type><name>long</name></type>             <name>ng</name></decl>;</decl_stmt>   <comment type="block">/* number of general registers already used.  */</comment>
  <decl_stmt><decl><type><name>ffi_cif</name> *</type>        <name>cif</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>           <name>temp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>         <name>size_al</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>union <name>ldu</name></type>        <name>temp_ld</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>cif</name> = <name><name>closure</name>-&gt;<name>cif</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>avalue</name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>nargs</name></name> * <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>nf</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name>ng</name> = 0</expr>;</expr_stmt>

  <comment type="block">/* Copy the caller's structure return value address so that the closure
     returns the data directly to the caller.  */</comment>
  <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>rvalue</name> = (<name>void</name> *) *<name>pgr</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pgr</name>++</expr>;</expr_stmt>
      <expr_stmt><expr><name>ng</name>++</expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name>avn</name> = <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>arg_types</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>;</expr_stmt>

  <comment type="block">/* Grab the addresses of the arguments from the stack frame.  */</comment>
  <while>while <condition>(<expr><name>i</name> &lt; <name>avn</name></expr>)</condition>
    <block>{
      <switch>switch <condition>(<expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name></expr>)</condition>
	<block>{
	<case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
	  <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>char</name> *) <name>pgr</name> + 3</expr>;</expr_stmt>
	  <expr_stmt><expr><name>ng</name>++</expr>;</expr_stmt>
	  <expr_stmt><expr><name>pgr</name>++</expr>;</expr_stmt>
	  <break>break;</break>

	</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
	  <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>char</name> *) <name>pgr</name> + 2</expr>;</expr_stmt>
	  <expr_stmt><expr><name>ng</name>++</expr>;</expr_stmt>
	  <expr_stmt><expr><name>pgr</name>++</expr>;</expr_stmt>
	  <break>break;</break>

	</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
	  <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pgr</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>ng</name>++</expr>;</expr_stmt>
	  <expr_stmt><expr><name>pgr</name>++</expr>;</expr_stmt>
	  <break>break;</break>

	</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
	  <comment type="block">/* Structures that match the basic modes (QI 1 byte, HI 2 bytes,
	     SI 4 bytes) are aligned as if they were those modes.  */</comment>
	  <expr_stmt><expr><name>size_al</name> = <name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>size</name></expr>;</expr_stmt>
	  <comment type="block">/* If the first member of the struct is a double, then align
	     the struct to double-word.
	     Type 3 is defined in include/ffi.h. #define FFI_TYPE_DOUBLE 3.  */</comment>
	  <if>if <condition>(<expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name><name>elements</name><index>[<expr>0</expr>]</index></name>-&gt;<name>type</name> == 3</expr>)</condition><then>
	    <expr_stmt><expr><name>size_al</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>size</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	  <if>if <condition>(<expr><name>size_al</name> &lt; 3 &amp;&amp; <name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_DARWIN</name></expr>)</condition><then>
	    <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>void</name>*) <name>pgr</name> + 4 - <name>size_al</name></expr>;</expr_stmt></then>
	  <else>else
	    <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>void</name>*) <name>pgr</name></expr>;</expr_stmt></else></if>
	  <expr_stmt><expr><name>ng</name> += (<name>size_al</name> + 3) / 4</expr>;</expr_stmt>
	  <expr_stmt><expr><name>pgr</name> += (<name>size_al</name> + 3) / 4</expr>;</expr_stmt>
	  <break>break;</break>

	</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
	</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
	  <comment type="block">/* Long long ints are passed in two gpr's.  */</comment>
	  <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pgr</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>ng</name> += 2</expr>;</expr_stmt>
	  <expr_stmt><expr><name>pgr</name> += 2</expr>;</expr_stmt>
	  <break>break;</break>

	</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
	  <comment type="block">/* A float value consumes a GPR.
	     There are 13 64bit floating point registers.  */</comment>
	  <if>if <condition>(<expr><name>nf</name> &lt; <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then>
	    <block>{
	      <expr_stmt><expr><name>temp</name> = <name><name>pfr</name>-&gt;<name>d</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>pfr</name>-&gt;<name>f</name></name> = (<name>float</name>)<name>temp</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pfr</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>pfr</name>++</expr>;</expr_stmt>
	    }</block></then>
	  <else>else
	    <block>{
	      <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pgr</name></expr>;</expr_stmt>
	    }</block></else></if>
	  <expr_stmt><expr><name>nf</name>++</expr>;</expr_stmt>
	  <expr_stmt><expr><name>ng</name>++</expr>;</expr_stmt>
	  <expr_stmt><expr><name>pgr</name>++</expr>;</expr_stmt>
	  <break>break;</break>

	</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
	  <comment type="block">/* A double value consumes two GPRs.
	     There are 13 64bit floating point registers.  */</comment>
	  <if>if <condition>(<expr><name>nf</name> &lt; <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then>
	    <block>{
	      <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pfr</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>pfr</name>++</expr>;</expr_stmt>
	    }</block></then>
	  <else>else
	    <block>{
	      <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pgr</name></expr>;</expr_stmt>
	    }</block></else></if>
	  <expr_stmt><expr><name>nf</name>++</expr>;</expr_stmt>
	  <expr_stmt><expr><name>ng</name> += 2</expr>;</expr_stmt>
	  <expr_stmt><expr><name>pgr</name> += 2</expr>;</expr_stmt>
	  <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>

	</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
	  <comment type="block">/* A long double value consumes four GPRs and two FPRs.
	     There are 13 64bit floating point registers.  */</comment>
	  <if>if <condition>(<expr><name>nf</name> &lt; <name>NUM_FPR_ARG_REGISTERS</name> - 1</expr>)</condition><then>
	    <block>{
	      <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pfr</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>pfr</name> += 2</expr>;</expr_stmt>
	    }</block></then>
	  <comment type="block">/* Here we have the situation where one part of the long double
	     is stored in fpr13 and the other part is already on the stack.
	     We use a union to pass the long double to avalue[i].  */</comment>
	  <else>else <if>if <condition>(<expr><name>nf</name> == <name>NUM_FPR_ARG_REGISTERS</name> - 1</expr>)</condition><then>
	    <block>{
	      <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr>&amp;<name><name>temp_ld</name>.<name>lb</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>pfr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ldbits</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr>&amp;<name><name>temp_ld</name>.<name>lb</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pgr</name> + 2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ldbits</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>temp_ld</name>.<name>ld</name></name></expr>;</expr_stmt>
	    }</block></then>
	  <else>else
	    <block>{
	      <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pgr</name></expr>;</expr_stmt>
	    }</block></else></if></else></if>
	  <expr_stmt><expr><name>nf</name> += 2</expr>;</expr_stmt>
	  <expr_stmt><expr><name>ng</name> += 4</expr>;</expr_stmt>
	  <expr_stmt><expr><name>pgr</name> += 4</expr>;</expr_stmt>
	  <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</case><default>default:
	  <expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</default>}</block></switch>
      <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
    }</block></while>

  <expr_stmt><expr><call>(<name><name>closure</name>-&gt;<name>fun</name></name>) <argument_list>(<argument><expr><name>cif</name></expr></argument>, <argument><expr><name>rvalue</name></expr></argument>, <argument><expr><name>avalue</name></expr></argument>, <argument><expr><name><name>closure</name>-&gt;<name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Tell ffi_closure_ASM to perform return type promotions.  */</comment>
  <return>return <expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>;</return>
}</block></function>
</unit>
