<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_ctypes/libffi/src/powerpc/asm.h"><comment type="block">/* -----------------------------------------------------------------------
   asm.h - Copyright (c) 1998 Geoffrey Keating

   PowerPC Assembly glue.

   Permission is hereby granted, free of charge, to any person obtaining
   a copy of this software and associated documentation files (the
   ``Software''), to deal in the Software without restriction, including
   without limitation the rights to use, copy, modify, merge, publish,
   distribute, sublicense, and/or sell copies of the Software, and to
   permit persons to whom the Software is furnished to do so, subject to
   the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
   IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR
   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   OTHER DEALINGS IN THE SOFTWARE.
   ----------------------------------------------------------------------- */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_GLOBAL_DIRECTIVE</name></cpp:macro> <cpp:value>.globl</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_SYMBOL_NAME</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>name</cpp:value></cpp:define>
<comment type="block">/* Macro for a label.  */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>__STDC__</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_LABEL</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro>		<cpp:value>name##:</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_LABEL</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro>		<cpp:value>name<comment type="block">/**/</comment>:</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* This seems to always be the case on PPC.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGNARG</name><parameter_list>(<param><type><name>log2</name></type></param>)</parameter_list></cpp:macro> <cpp:value>log2</cpp:value></cpp:define>
<comment type="block">/* For ELF we need the `.type' directive to make shared libs work right.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_TYPE_DIRECTIVE</name><parameter_list>(<param><type><name>name</name></type></param>,<param><type><name>typearg</name></type></param>)</parameter_list></cpp:macro> <cpp:value>.type name,typearg;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_SIZE_DIRECTIVE</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>.size name,.-name</cpp:value></cpp:define>

<comment type="block">/* If compiled for profiling, call `_mcount' at the start of each function.  */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>PROF</name></cpp:ifdef>
<comment type="block">/* The mcount code relies on a the return address being on the stack
   to locate our caller and so it can restore it; so store one just
   for its benefit.  */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PIC</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_MCOUNT</name></cpp:macro>							      \
  <cpp:value>.pushsection;								      \
  .section ".data";							      \
  .align ALIGNARG(2);							      \
0:.long 0;								      \
  .previous;								      \
  mflr  %r0;								      \
  stw   %r0,4(%r1);							      \
  bl    _GLOBAL_OFFSET_TABLE_@local-4;					      \
  mflr  %r11;								      \
  lwz   %r0,0b@got(%r11);						      \
  bl    JUMPTARGET(_mcount);</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  <comment type="block">/* PIC */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_MCOUNT</name></cpp:macro>							      \
  <cpp:value>.section ".data";							      \
  .align ALIGNARG(2);							      \
0:.long 0;								      \
  .previous;								      \
  mflr  %r0;								      \
  lis   %r11,0b@ha;							      \
  stw   %r0,4(%r1);							      \
  addi  %r0,%r11,0b@l;							      \
  bl    JUMPTARGET(_mcount);</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* PIC */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  <comment type="block">/* PROF */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_MCOUNT</name></cpp:macro></cpp:define>		<comment type="block">/* Do nothing.  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* PROF */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>ENTRY</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro>							      \
  <cpp:value>ASM_GLOBAL_DIRECTIVE C_SYMBOL_NAME(name);				      \
  ASM_TYPE_DIRECTIVE (C_SYMBOL_NAME(name),@function)			      \
  .align ALIGNARG(2);							      \
  C_LABEL(name)								      \
  CALL_MCOUNT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALIGN_W_0</name></cpp:macro></cpp:define>  <comment type="block">/* No words to insert.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALIGN_W_1</name></cpp:macro>  <cpp:value>nop</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALIGN_W_2</name></cpp:macro>  <cpp:value>nop;nop</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALIGN_W_3</name></cpp:macro>  <cpp:value>nop;nop;nop</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALIGN_W_4</name></cpp:macro>  <cpp:value>EALIGN_W_3;nop</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALIGN_W_5</name></cpp:macro>  <cpp:value>EALIGN_W_4;nop</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALIGN_W_6</name></cpp:macro>  <cpp:value>EALIGN_W_5;nop</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALIGN_W_7</name></cpp:macro>  <cpp:value>EALIGN_W_6;nop</cpp:value></cpp:define>

<comment type="block">/* EALIGN is like ENTRY, but does alignment to 'words'*4 bytes
   past a 2^align boundary.  */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PROF</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALIGN</name><parameter_list>(<param><type><name>name</name></type></param>, <param><type><name>alignt</name></type></param>, <param><type><name>words</name></type></param>)</parameter_list></cpp:macro>					      \
  <cpp:value>ASM_GLOBAL_DIRECTIVE C_SYMBOL_NAME(name);				      \
  ASM_TYPE_DIRECTIVE (C_SYMBOL_NAME(name),@function)			      \
  .align ALIGNARG(2);							      \
  C_LABEL(name)								      \
  CALL_MCOUNT								      \
  b 0f;									      \
  .align ALIGNARG(alignt);						      \
  EALIGN_W_##words;							      \
  0:</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* PROF */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALIGN</name><parameter_list>(<param><type><name>name</name></type></param>, <param><type><name>alignt</name></type></param>, <param><type><name>words</name></type></param>)</parameter_list></cpp:macro>					      \
  <cpp:value>ASM_GLOBAL_DIRECTIVE C_SYMBOL_NAME(name);				      \
  ASM_TYPE_DIRECTIVE (C_SYMBOL_NAME(name),@function)			      \
  .align ALIGNARG(alignt);						      \
  EALIGN_W_##words;							      \
  C_LABEL(name)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro>							      \
  <cpp:value>ASM_SIZE_DIRECTIVE(name)</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PIC</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMPTARGET</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>name##@plt</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMPTARGET</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>name</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Local labels stripped out by the linker.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>.L##x</cpp:value></cpp:define>
</unit>
