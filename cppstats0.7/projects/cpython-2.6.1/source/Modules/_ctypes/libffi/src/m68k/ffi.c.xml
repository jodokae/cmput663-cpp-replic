<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_ctypes/libffi/src/m68k/ffi.c"><comment type="block">/* -----------------------------------------------------------------------
   ffi.c
   
   m68k Foreign Function Interface 
   ----------------------------------------------------------------------- */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/syscall.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;asm/cachectl.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>ffi_call_SYSV</name> <parameter_list>(<param><decl><type><name>extended_cif</name> *</type></decl></param>,
		    <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>,
		    <param><decl><type><name>void</name> *</type></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn</name>) <parameter_list>()</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> *</type><name>ffi_prep_args</name> <parameter_list>(<param><decl><type><name>void</name> *</type><name>stack</name></decl></param>, <param><decl><type><name>extended_cif</name> *</type><name>ecif</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ffi_closure_SYSV</name> <parameter_list>(<param><decl><type><name>ffi_closure</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ffi_closure_struct_SYSV</name> <parameter_list>(<param><decl><type><name>ffi_closure</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>ffi_closure_SYSV_inner</name> <parameter_list>(<param><decl><type><name>ffi_closure</name> *</type><name>closure</name></decl></param>,
				     <param><decl><type><name>void</name> *</type><name>resp</name></decl></param>, <param><decl><type><name>void</name> *</type><name>args</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* ffi_prep_args is called by the assembly routine once stack space has
   been allocated for the function's arguments.  */</comment>

<function><type><name>void</name> *</type>
<name>ffi_prep_args</name> <parameter_list>(<param><decl><type><name>void</name> *</type><name>stack</name></decl></param>, <param><decl><type><name>extended_cif</name> *</type><name>ecif</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> **</type><name>p_argv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>argp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ffi_type</name> **</type><name>p_arg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>struct_value_ptr</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>argp</name> = <name>stack</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name>
      &amp;&amp; !<name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>flags</name></name></expr>)</condition><then>
    <expr_stmt><expr><name>struct_value_ptr</name> = <name><name>ecif</name>-&gt;<name>rvalue</name></name></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>struct_value_ptr</name> = <name>NULL</name></expr>;</expr_stmt></else></if>

  <expr_stmt><expr><name>p_argv</name> = <name><name>ecif</name>-&gt;<name>avalue</name></name></expr>;</expr_stmt>

  <for>for (<init><expr><name>i</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>nargs</name></name></expr>, <expr><name>p_arg</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>arg_types</name></name></expr>;</init>
       <condition><expr><name>i</name> != 0</expr>;</condition>
       <incr><expr><name>i</name>--</expr>, <expr><name>p_arg</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>z</name> = <name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>z</name> &lt; <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	<block>{
	  <switch>switch <condition>(<expr><name>(*<name>p_arg</name>)-&gt;<name>type</name></name></expr>)</condition>
	    <block>{
	    <case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
	      <expr_stmt><expr>*(<name>signed</name> <name>int</name> *) <name>argp</name> = (<name>signed</name> <name>int</name>) *(<name>SINT8</name> *) *<name>p_argv</name></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
	      <expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> = (<name>unsigned</name> <name>int</name>) *(<name>UINT8</name> *) *<name>p_argv</name></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
	      <expr_stmt><expr>*(<name>signed</name> <name>int</name> *) <name>argp</name> = (<name>signed</name> <name>int</name>) *(<name>SINT16</name> *) *<name>p_argv</name></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
	      <expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> = (<name>unsigned</name> <name>int</name>) *(<name>UINT16</name> *) *<name>p_argv</name></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
	      <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>argp</name> + <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> - <name>z</name></expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><default>default:
	      <expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </default>}</block></switch>
	  <expr_stmt><expr><name>z</name> = <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	}</block></then>
      <else>else
	<block>{
	  <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <comment type="block">/* Align if necessary.  */</comment>
	  <if>if <condition>(<expr>(<sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> - 1) &amp; <name>z</name></expr>)</condition><then>
	    <expr_stmt><expr><name>z</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></else></if>

      <expr_stmt><expr><name>p_argv</name>++</expr>;</expr_stmt>
      <expr_stmt><expr><name>argp</name> += <name>z</name></expr>;</expr_stmt>
    }</block></for>

  <return>return <expr><name>struct_value_ptr</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIF_FLAGS_INT</name></cpp:macro>		<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIF_FLAGS_DINT</name></cpp:macro>		<cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIF_FLAGS_FLOAT</name></cpp:macro>		<cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIF_FLAGS_DOUBLE</name></cpp:macro>	<cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIF_FLAGS_LDOUBLE</name></cpp:macro>	<cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIF_FLAGS_POINTER</name></cpp:macro>	<cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIF_FLAGS_STRUCT1</name></cpp:macro>	<cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIF_FLAGS_STRUCT2</name></cpp:macro>	<cpp:value>128</cpp:value></cpp:define>

<comment type="block">/* Perform machine dependent cif processing */</comment>
<function><type><name>ffi_status</name></type>
<name>ffi_prep_cif_machdep</name> <parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Set the return type flag */</comment>
  <switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>)</condition>
    <block>{
    <case>case <expr><name>FFI_TYPE_VOID</name></expr>:
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = 0</expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
      <switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr>)</condition>
	<block>{
	<case>case <expr>1</expr>:
	  <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>CIF_FLAGS_STRUCT1</name></expr>;</expr_stmt>
	  <break>break;</break>
	</case><case>case <expr>2</expr>:
	  <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>CIF_FLAGS_STRUCT2</name></expr>;</expr_stmt>
	  <break>break;</break>
	</case><case>case <expr>4</expr>:
	  <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>CIF_FLAGS_INT</name></expr>;</expr_stmt>
	  <break>break;</break>
	</case><case>case <expr>8</expr>:
	  <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>CIF_FLAGS_DINT</name></expr>;</expr_stmt>
	  <break>break;</break>
	</case><default>default:
	  <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = 0</expr>;</expr_stmt>
	  <break>break;</break>
	</default>}</block></switch>
      <break>break;</break>

    </case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>CIF_FLAGS_FLOAT</name></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>CIF_FLAGS_DOUBLE</name></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>CIF_FLAGS_LDOUBLE</name></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>CIF_FLAGS_POINTER</name></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>CIF_FLAGS_DINT</name></expr>;</expr_stmt>
      <break>break;</break>

    </case><default>default:
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>CIF_FLAGS_INT</name></expr>;</expr_stmt>
      <break>break;</break>
    </default>}</block></switch>

  <return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name>ffi_call</name> <parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn</name>) <parameter_list>()</parameter_list></function_decl></param>, <param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, <param><decl><type><name>void</name> **</type><name>avalue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>extended_cif</name></type> <name>ecif</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ecif</name>.<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ecif</name>.<name>avalue</name></name> = <name>avalue</name></expr>;</expr_stmt>

  <comment type="block">/* If the return value is a struct and we don't have a return value
     address then we need to make one.  */</comment>

  <if>if <condition>(<expr><name>rvalue</name> == <name>NULL</name>
      &amp;&amp; <name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name>
      &amp;&amp; <name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name> &gt; 8</expr>)</condition><then>
    <expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <call><name>alloca</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <name>rvalue</name></expr>;</expr_stmt></else></if>

  <switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name></expr>)</condition>
    <block>{
    <case>case <expr><name>FFI_SYSV</name></expr>:
      <expr_stmt><expr><call><name>ffi_call_SYSV</name> <argument_list>(<argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>,
		     <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><default>default:
      <expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </default>}</block></switch>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ffi_prep_incoming_args_SYSV</name> <parameter_list>(<param><decl><type><name>char</name> *</type><name>stack</name></decl></param>, <param><decl><type><name>void</name> **</type><name>avalue</name></decl></param>, <param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> **</type><name>p_argv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>argp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ffi_type</name> **</type><name>p_arg</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>argp</name> = <name>stack</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p_argv</name> = <name>avalue</name></expr>;</expr_stmt>

  <for>for (<init><expr><name>i</name> = <name><name>cif</name>-&gt;<name>nargs</name></name></expr>, <expr><name>p_arg</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>;</init> <condition><expr>(<name>i</name> != 0)</expr>;</condition> <incr><expr><name>i</name>--</expr>, <expr><name>p_arg</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>z</name> = <name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>z</name> &lt;= 4</expr>)</condition><then>
	<block>{
	  <expr_stmt><expr>*<name>p_argv</name> = <call>(<name>void</name> *) <argument_list>(<argument><expr><name>argp</name> + 4 - <name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <expr_stmt><expr><name>z</name> = 4</expr>;</expr_stmt>
	}</block></then>
      <else>else
	<block>{
	  <expr_stmt><expr>*<name>p_argv</name> = (<name>void</name> *) <name>argp</name></expr>;</expr_stmt>

	  <comment type="block">/* Align if necessary */</comment>
	  <if>if <condition>(<expr>(<sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> - 1) &amp; <name>z</name></expr>)</condition><then>
	    <expr_stmt><expr><name>z</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></else></if>

      <expr_stmt><expr><name>p_argv</name>++</expr>;</expr_stmt>
      <expr_stmt><expr><name>argp</name> += <name>z</name></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><name>unsigned</name> <name>int</name></type>
<name>ffi_closure_SYSV_inner</name> <parameter_list>(<param><decl><type><name>ffi_closure</name> *</type><name>closure</name></decl></param>, <param><decl><type><name>void</name> *</type><name>resp</name></decl></param>, <param><decl><type><name>void</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> **</type><name>arg_area</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>cif</name> = <name><name>closure</name>-&gt;<name>cif</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>arg_area</name> = (<name>void</name>**) <call><name>alloca</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>nargs</name></name> * <sizeof>sizeof <argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ffi_prep_incoming_args_SYSV</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>arg_area</name></expr></argument>, <argument><expr><name>cif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call>(<name><name>closure</name>-&gt;<name>fun</name></name>) <argument_list>(<argument><expr><name>cif</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>arg_area</name></expr></argument>, <argument><expr><name><name>closure</name>-&gt;<name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name><name>cif</name>-&gt;<name>flags</name></name></expr>;</return>
}</block></function>

<function><type><name>ffi_status</name></type>
<name>ffi_prep_closure_loc</name> <parameter_list>(<param><decl><type><name>ffi_closure</name>*</type> <name>closure</name></decl></param>,
		      <param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>,
		      <param><function_decl><type><name>void</name></type> (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>,<param><decl><type><name>void</name>**</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list></function_decl></param>,
		      <param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>,
		      <param><decl><type><name>void</name> *</type><name>codeloc</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_SYSV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*(<name>unsigned</name> <name>short</name> *)<name><name>closure</name>-&gt;<name>tramp</name></name> = 0x207c</expr>;</expr_stmt>
  <expr_stmt><expr>*<call>(<name>void</name> **)<argument_list>(<argument><expr><name><name>closure</name>-&gt;<name>tramp</name></name> + 2</expr></argument>)</argument_list></call> = <name>codeloc</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<call>(<name>unsigned</name> <name>short</name> *)<argument_list>(<argument><expr><name><name>closure</name>-&gt;<name>tramp</name></name> + 6</expr></argument>)</argument_list></call> = 0x4ef9</expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name>
      &amp;&amp; !<name><name>cif</name>-&gt;<name>flags</name></name></expr>)</condition><then>
    <expr_stmt><expr>*<call>(<name>void</name> **)<argument_list>(<argument><expr><name><name>closure</name>-&gt;<name>tramp</name></name> + 8</expr></argument>)</argument_list></call> = <name>ffi_closure_struct_SYSV</name></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr>*<call>(<name>void</name> **)<argument_list>(<argument><expr><name><name>closure</name>-&gt;<name>tramp</name></name> + 8</expr></argument>)</argument_list></call> = <name>ffi_closure_SYSV</name></expr>;</expr_stmt></else></if>

  <expr_stmt><expr><call><name>syscall</name><argument_list>(<argument><expr><name>SYS_cacheflush</name></expr></argument>, <argument><expr><name>codeloc</name></expr></argument>, <argument><expr><name>FLUSH_SCOPE_LINE</name></expr></argument>,
	  <argument><expr><name>FLUSH_CACHE_BOTH</name></expr></argument>, <argument><expr><name>FFI_TRAMPOLINE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>closure</name>-&gt;<name>cif</name></name>  = <name>cif</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>closure</name>-&gt;<name>user_data</name></name> = <name>user_data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>closure</name>-&gt;<name>fun</name></name>  = <name>fun</name></expr>;</expr_stmt>

  <return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>

</unit>
