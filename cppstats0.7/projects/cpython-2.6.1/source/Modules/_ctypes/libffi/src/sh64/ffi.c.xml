<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_ctypes/libffi/src/sh64/ffi.c"><comment type="block">/* -----------------------------------------------------------------------
   ffi.c - Copyright (c) 2003, 2004 Kaz Kojima
           Copyright (c) 2008 Anthony Green
   
   SuperH SHmedia Foreign Function Interface 

   Permission is hereby granted, free of charge, to any person obtaining
   a copy of this software and associated documentation files (the
   ``Software''), to deal in the Software without restriction, including
   without limitation the rights to use, copy, modify, merge, publish,
   distribute, sublicense, and/or sell copies of the Software, and to
   permit persons to whom the Software is furnished to do so, subject to
   the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,
   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
   HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
   WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   ----------------------------------------------------------------------- */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NGREGARG</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFREGARG</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>return_type</name> <parameter_list>(<param><decl><type><name>ffi_type</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{

  <if>if <condition>(<expr><name><name>arg</name>-&gt;<name>type</name></name> != <name>FFI_TYPE_STRUCT</name></expr>)</condition><then>
    <return>return <expr><name><name>arg</name>-&gt;<name>type</name></name></expr>;</return></then></if>

  <comment type="block">/* gcc uses r2 if the result can be packed in on register.  */</comment>
  <if>if <condition>(<expr><name><name>arg</name>-&gt;<name>size</name></name> &lt;= <sizeof>sizeof <argument_list>(<argument><expr><name>UINT8</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
    <return>return <expr><name>FFI_TYPE_UINT8</name></expr>;</return></then>
  <else>else <if>if <condition>(<expr><name><name>arg</name>-&gt;<name>size</name></name> &lt;= <sizeof>sizeof <argument_list>(<argument><expr><name>UINT16</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
    <return>return <expr><name>FFI_TYPE_UINT16</name></expr>;</return></then>
  <else>else <if>if <condition>(<expr><name><name>arg</name>-&gt;<name>size</name></name> &lt;= <sizeof>sizeof <argument_list>(<argument><expr><name>UINT32</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
    <return>return <expr><name>FFI_TYPE_UINT32</name></expr>;</return></then>
  <else>else <if>if <condition>(<expr><name><name>arg</name>-&gt;<name>size</name></name> &lt;= <sizeof>sizeof <argument_list>(<argument><expr><name>UINT64</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
    <return>return <expr><name>FFI_TYPE_UINT64</name></expr>;</return></then></if></else></if></else></if></else></if>

  <return>return <expr><name>FFI_TYPE_STRUCT</name></expr>;</return>
}</block></function>

<comment type="block">/* ffi_prep_args is called by the assembly routine once stack space
   has been allocated for the function's arguments */</comment>

<comment type="block">/*@-exportheader@*/</comment>
<function><type><name>void</name></type> <name>ffi_prep_args</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>stack</name></decl></param>, <param><decl><type><name>extended_cif</name> *</type><name>ecif</name></decl></param>)</parameter_list>
<comment type="block">/*@=exportheader@*/</comment>
<block>{
  <decl_stmt><decl><type><name>register</name> <name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>register</name> <name>unsigned</name> <name>int</name></type> <name>avn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>register</name> <name>void</name> **</type><name>p_argv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>register</name> <name>char</name> *</type><name>argp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>register</name> <name>ffi_type</name> **</type><name>p_arg</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>argp</name> = <name>stack</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>return_type</name> <argument_list>(<argument><expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>rtype</name></name></expr></argument>)</argument_list></call> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*(<name>void</name> **) <name>argp</name> = <name><name>ecif</name>-&gt;<name>rvalue</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>argp</name> += <sizeof>sizeof <argument_list>(<argument><expr><name>UINT64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><name>avn</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>nargs</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p_argv</name> = <name><name>ecif</name>-&gt;<name>avalue</name></name></expr>;</expr_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>p_arg</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>arg_types</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>avn</name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>p_arg</name>++</expr>, <expr><name>p_argv</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>align</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>z</name> = <name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>align</name> = <name>(*<name>p_arg</name>)-&gt;<name>alignment</name></name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>z</name> &lt; <sizeof>sizeof <argument_list>(<argument><expr><name>UINT32</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	<block>{
	  <switch>switch <condition>(<expr><name>(*<name>p_arg</name>)-&gt;<name>type</name></name></expr>)</condition>
	    <block>{
	    <case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
	      <expr_stmt><expr>*(<name>SINT64</name> *) <name>argp</name> = (<name>SINT64</name>) *<call>(<name>SINT8</name> *)<argument_list>(<argument><expr>*<name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>
  
	    </case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
	      <expr_stmt><expr>*(<name>UINT64</name> *) <name>argp</name> = (<name>UINT64</name>) *<call>(<name>UINT8</name> *)<argument_list>(<argument><expr>*<name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>
  
	    </case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
	      <expr_stmt><expr>*(<name>SINT64</name> *) <name>argp</name> = (<name>SINT64</name>) *<call>(<name>SINT16</name> *)<argument_list>(<argument><expr>*<name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>
  
	    </case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
	      <expr_stmt><expr>*(<name>UINT64</name> *) <name>argp</name> = (<name>UINT64</name>) *<call>(<name>UINT16</name> *)<argument_list>(<argument><expr>*<name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>
  
	    </case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
	      <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><default>default:
	      <expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </default>}</block></switch>
	  <expr_stmt><expr><name>argp</name> += <sizeof>sizeof <argument_list>(<argument><expr><name>UINT64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	}</block></then>
      <else>else <if>if <condition>(<expr><name>z</name> == <sizeof>sizeof <argument_list>(<argument><expr><name>UINT32</name></expr></argument>)</argument_list></sizeof> &amp;&amp; <name>align</name> == <sizeof>sizeof <argument_list>(<argument><expr><name>UINT32</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	<block>{
	  <switch>switch <condition>(<expr><name>(*<name>p_arg</name>)-&gt;<name>type</name></name></expr>)</condition>
	    <block>{
	    <case>case <expr><name>FFI_TYPE_INT</name></expr>:
	    </case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
	      <expr_stmt><expr>*(<name>SINT64</name> *) <name>argp</name> = (<name>SINT64</name>) *<call>(<name>SINT32</name> *) <argument_list>(<argument><expr>*<name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
	    </case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
	    </case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
	    </case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
	      <expr_stmt><expr>*(<name>UINT64</name> *) <name>argp</name> = (<name>UINT64</name>) *<call>(<name>UINT32</name> *) <argument_list>(<argument><expr>*<name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><default>default:
	      <expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>
	    </default>}</block></switch>
	  <expr_stmt><expr><name>argp</name> += <sizeof>sizeof <argument_list>(<argument><expr><name>UINT64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	}</block></then>
      <else>else <if>if <condition>(<expr><name>z</name> == <sizeof>sizeof <argument_list>(<argument><expr><name>UINT64</name></expr></argument>)</argument_list></sizeof>
	       &amp;&amp; <name>align</name> == <sizeof>sizeof <argument_list>(<argument><expr><name>UINT64</name></expr></argument>)</argument_list></sizeof>
	       &amp;&amp; ((<name>int</name>) *<name>p_argv</name> &amp; (<sizeof>sizeof <argument_list>(<argument><expr><name>UINT64</name></expr></argument>)</argument_list></sizeof> - 1)) == 0</expr>)</condition><then>
	<block>{
	  <expr_stmt><expr>*(<name>UINT64</name> *) <name>argp</name> = *<call>(<name>UINT64</name> *) <argument_list>(<argument><expr>*<name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>argp</name> += <sizeof>sizeof <argument_list>(<argument><expr><name>UINT64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	}</block></then>
      <else>else
	<block>{
	  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr>(<name>z</name> + <sizeof>sizeof <argument_list>(<argument><expr><name>UINT64</name></expr></argument>)</argument_list></sizeof> - 1) / <sizeof>sizeof <argument_list>(<argument><expr><name>UINT64</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	  <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>argp</name> += <name>n</name> * <sizeof>sizeof <argument_list>(<argument><expr><name>UINT64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	}</block></else></if></else></if></else></if>
    }</block></for>

  <return>return;</return>
}</block></function>

<comment type="block">/* Perform machine dependent cif processing */</comment>
<function><type><name>ffi_status</name></type> <name>ffi_prep_cif_machdep</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>greg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>freg</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>greg</name> = (<call><name>return_type</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name></name></expr></argument>)</argument_list></call> == <name>FFI_TYPE_STRUCT</name> ? 1 : 0)</expr>;</expr_stmt>
  <expr_stmt><expr><name>freg</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags2</name></name> = 0</expr>;</expr_stmt>

  <for>for (<init><expr><name>i</name> = <name>j</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <expr_stmt><expr><name>type</name> = (<name><name>cif</name>-&gt;<name>arg_types</name></name>)<index>[<expr><name>i</name></expr>]</index>-&gt;<name>type</name></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{
	<case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
	  <expr_stmt><expr><name>greg</name>++</expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>cif</name>-&gt;<name>bytes</name></name> += <sizeof>sizeof <argument_list>(<argument><expr><name>UINT64</name></expr></argument>)</argument_list></sizeof> - <sizeof>sizeof <argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	  <if>if <condition>(<expr><name>freg</name> &gt;= <name>NFREGARG</name> - 1</expr>)</condition><then>
	    <continue>continue;</continue></then></if>
	  <expr_stmt><expr><name>freg</name>++</expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags2</name></name> += ((<name><name>cif</name>-&gt;<name>arg_types</name></name>)<index>[<expr><name>i</name></expr>]</index>-&gt;<name>type</name>) &lt;&lt; (2 * <name>j</name>++)</expr>;</expr_stmt>
	  <break>break;</break>

	</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
	  <if>if <condition>(<expr><name>greg</name>++ &gt;= <name>NGREGARG</name> &amp;&amp; (<name>freg</name> + 1) &gt;= <name>NFREGARG</name></expr>)</condition><then>
	    <continue>continue;</continue></then></if>
	  <if>if <condition>(<expr>(<name>freg</name> + 1) &lt; <name>NFREGARG</name></expr>)</condition><then>
	    <block>{
	      <expr_stmt><expr><name>freg</name> = (<name>freg</name> + 1) &amp; ~1</expr>;</expr_stmt>
	      <expr_stmt><expr><name>freg</name> += 2</expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags2</name></name> += ((<name><name>cif</name>-&gt;<name>arg_types</name></name>)<index>[<expr><name>i</name></expr>]</index>-&gt;<name>type</name>) &lt;&lt; (2 * <name>j</name>++)</expr>;</expr_stmt>
	    }</block></then>
	  <else>else
	    <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags2</name></name> += <name>FFI_TYPE_INT</name> &lt;&lt; (2 * <name>j</name>++)</expr>;</expr_stmt></else></if>
	  <break>break;</break>
	      
	</case><default>default:
	  <expr_stmt><expr><name>size</name> = (<name><name>cif</name>-&gt;<name>arg_types</name></name>)<index>[<expr><name>i</name></expr>]</index>-&gt;<name>size</name></expr>;</expr_stmt>
	  <if>if <condition>(<expr><name>size</name> &lt; <sizeof>sizeof <argument_list>(<argument><expr><name>UINT64</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	    <expr_stmt><expr><name><name>cif</name>-&gt;<name>bytes</name></name> += <sizeof>sizeof <argument_list>(<argument><expr><name>UINT64</name></expr></argument>)</argument_list></sizeof> - <name>size</name></expr>;</expr_stmt></then></if>
	  <expr_stmt><expr><name>n</name> = (<name>size</name> + <sizeof>sizeof <argument_list>(<argument><expr><name>UINT64</name></expr></argument>)</argument_list></sizeof> - 1) / <sizeof>sizeof <argument_list>(<argument><expr><name>UINT64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	  <if>if <condition>(<expr><name>greg</name> &gt;= <name>NGREGARG</name></expr>)</condition><then>
	    <continue>continue;</continue></then>
	  <else>else <if>if <condition>(<expr><name>greg</name> + <name>n</name> - 1 &gt;= <name>NGREGARG</name></expr>)</condition><then>
	    <expr_stmt><expr><name>greg</name> = <name>NGREGARG</name></expr>;</expr_stmt></then>
	  <else>else
	    <expr_stmt><expr><name>greg</name> += <name>n</name></expr>;</expr_stmt></else></if></else></if>
	  <for>for (<init><expr><name>m</name> = 0</expr>;</init> <condition><expr><name>m</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>m</name>++</expr></incr>)
	    <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags2</name></name> += <name>FFI_TYPE_INT</name> &lt;&lt; (2 * <name>j</name>++)</expr>;</expr_stmt></for>
	  <break>break;</break>
	</default>}</block></switch>
    }</block></for>

  <comment type="block">/* Set the return type flag */</comment>
  <switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>)</condition>
    <block>{
    <case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <call><name>return_type</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>FFI_TYPE_VOID</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>;</expr_stmt>
      <break>break;</break>

    </case><default>default:
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_INT</name></expr>;</expr_stmt>
      <break>break;</break>
    </default>}</block></switch>

  <return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*@-declundef@*/</comment>
<comment type="block">/*@-exportheader@*/</comment>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_call_SYSV</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*)<parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>)</parameter_list></function_decl></param>, 
			  <comment type="block">/*@out@*/</comment> <param><decl><type><name>extended_cif</name> *</type></decl></param>, 
			  <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>long</name></type> <name>long</name></decl></param>,
			  <comment type="block">/*@out@*/</comment> <param><decl><type><name>unsigned</name> *</type></decl></param>, 
			  <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
<comment type="block">/*@=declundef@*/</comment>
<comment type="block">/*@=exportheader@*/</comment>

<function><type><name>void</name></type> <name>ffi_call</name><parameter_list>(<comment type="block">/*@dependent@*/</comment> <param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>, 
	      <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>, 
	      <comment type="block">/*@out@*/</comment> <param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, 
	      <comment type="block">/*@dependent@*/</comment> <param><decl><type><name>void</name> **</type><name>avalue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>extended_cif</name></type> <name>ecif</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>UINT64</name></type> <name>trvalue</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ecif</name>.<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ecif</name>.<name>avalue</name></name> = <name>avalue</name></expr>;</expr_stmt>
  
  <comment type="block">/* If the return value is a struct and we don't have a return	*/</comment>
  <comment type="block">/* value address then we need to make one		        */</comment>

  <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name>
      &amp;&amp; <call><name>return_type</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name></name></expr></argument>)</argument_list></call> != <name>FFI_TYPE_STRUCT</name></expr>)</condition><then>
    <expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = &amp;<name>trvalue</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr>(<name>rvalue</name> == <name>NULL</name>) &amp;&amp; 
      (<name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name>)</expr>)</condition><then>
    <block>{
      <comment type="block">/*@-sysunrecog@*/</comment>
      <expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/*@=sysunrecog@*/</comment>
    }</block></then>
  <else>else
    <expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <name>rvalue</name></expr>;</expr_stmt></else></if></else></if>

  <switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name></expr>)</condition> 
    <block>{
    <case>case <expr><name>FFI_SYSV</name></expr>:
      <comment type="block">/*@-usedef@*/</comment>
      <expr_stmt><expr><call><name>ffi_call_SYSV</name><argument_list>(<argument><expr><name>ffi_prep_args</name></expr></argument>, <argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>, 
		    <argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>flags2</name></name></expr></argument>, <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/*@=usedef@*/</comment>
      <break>break;</break>
    </case><default>default:
      <expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </default>}</block></switch>

  <if>if <condition>(<expr><name>rvalue</name>
      &amp;&amp; <name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name>
      &amp;&amp; <call><name>return_type</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name></name></expr></argument>)</argument_list></call> != <name>FFI_TYPE_STRUCT</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>rvalue</name></expr></argument>, <argument><expr>&amp;<name>trvalue</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_closure_SYSV</name> <parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>__ic_invalidate</name> <parameter_list>(<param><decl><type><name>void</name> *</type><name>line</name></decl></param>)</parameter_list>;</function_decl>

<function><type><name>ffi_status</name></type>
<name>ffi_prep_closure</name> <parameter_list>(<param><decl><type><name>ffi_closure</name> *</type><name>closure</name></decl></param>,
		  <param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>,
		  <param><function_decl><type><name>void</name></type> (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>, <param><decl><type><name>void</name>**</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>)</parameter_list></function_decl></param>,
		  <param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name> *</type><name>tramp</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_GCC_SYSV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tramp</name> = (<name>unsigned</name> <name>int</name> *) &amp;<name><name>closure</name>-&gt;<name>tramp</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
  <comment type="block">/* Since ffi_closure is an aligned object, the ffi trampoline is
     called as an SHcompact code.  Sigh.
     SHcompact part:
     mova @(1,pc),r0; add #1,r0; jmp @r0; nop;
     SHmedia part:
     movi fnaddr &gt;&gt; 16,r1; shori fnaddr,r1; ptabs/l r1,tr0
     movi cxt &gt;&gt; 16,r1; shori cxt,r1; blink tr0,r63  */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__LITTLE_ENDIAN__</name></cpp:ifdef>
  <expr_stmt><expr><name><name>tramp</name><index>[<expr>0</expr>]</index></name> = 0x7001c701</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tramp</name><index>[<expr>1</expr>]</index></name> = 0x0009402b</expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name><name>tramp</name><index>[<expr>0</expr>]</index></name> = 0xc7017001</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tramp</name><index>[<expr>1</expr>]</index></name> = 0x402b0009</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>tramp</name><index>[<expr>2</expr>]</index></name> = 0xcc000010 | (((<name>UINT32</name>) <name>ffi_closure_SYSV</name>) &gt;&gt; 16) &lt;&lt; 10</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tramp</name><index>[<expr>3</expr>]</index></name> = 0xc8000010 | (((<name>UINT32</name>) <name>ffi_closure_SYSV</name>) &amp; 0xffff) &lt;&lt; 10</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tramp</name><index>[<expr>4</expr>]</index></name> = 0x6bf10600</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tramp</name><index>[<expr>5</expr>]</index></name> = 0xcc000010 | (((<name>UINT32</name>) <name>closure</name>) &gt;&gt; 16) &lt;&lt; 10</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tramp</name><index>[<expr>6</expr>]</index></name> = 0xc8000010 | (((<name>UINT32</name>) <name>closure</name>) &amp; 0xffff) &lt;&lt; 10</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tramp</name><index>[<expr>7</expr>]</index></name> = 0x4401fff0</expr>;</expr_stmt>

  <expr_stmt><expr><name><name>closure</name>-&gt;<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>closure</name>-&gt;<name>fun</name></name> = <name>fun</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>closure</name>-&gt;<name>user_data</name></name> = <name>user_data</name></expr>;</expr_stmt>

  <comment type="block">/* Flush the icache.  */</comment>
  <asm>asm <specifier>volatile</specifier> ("ocbwb %0,0; synco; icbi %0,0; synci" : : "r" (tramp));</asm>

  <return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* Basically the trampoline invokes ffi_closure_SYSV, and on 
 * entry, r3 holds the address of the closure.
 * After storing the registers that could possibly contain
 * parameters to be passed into the stack frame and setting
 * up space for a return value, ffi_closure_SYSV invokes the 
 * following helper function to do most of the work.
 */</comment>

<function><type><name>int</name></type>
<name>ffi_closure_helper_SYSV</name> <parameter_list>(<param><decl><type><name>ffi_closure</name> *</type><name>closure</name></decl></param>, <param><decl><type><name>UINT64</name> *</type><name>rvalue</name></decl></param>, 
			 <param><decl><type><name>UINT64</name> *</type><name>pgr</name></decl></param>, <param><decl><type><name>UINT64</name> *</type><name>pfr</name></decl></param>, <param><decl><type><name>UINT64</name> *</type><name>pst</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>void</name> **</type><name>avalue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ffi_type</name> **</type><name>p_arg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>avn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>greg</name></decl>, <decl><type ref="prev"/><name>freg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>cif</name> = <name><name>closure</name>-&gt;<name>cif</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>avalue</name> = <call><name>alloca</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>nargs</name></name> * <sizeof>sizeof <argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Copy the caller's structure return value address so that the closure
     returns the data directly to the caller.  */</comment>
  <if>if <condition>(<expr><call><name>return_type</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name></name></expr></argument>)</argument_list></call> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>rvalue</name> = *<name>pgr</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>greg</name> = 1</expr>;</expr_stmt>
    }</block></then>
  <else>else
    <expr_stmt><expr><name>greg</name> = 0</expr>;</expr_stmt></else></if>

  <expr_stmt><expr><name>freg</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name>cif</name> = <name><name>closure</name>-&gt;<name>cif</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>avn</name> = <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</expr_stmt>

  <comment type="block">/* Grab the addresses of the arguments from the stack frame.  */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>p_arg</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>avn</name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>p_arg</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>p</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>z</name> = <name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>z</name> &lt; <sizeof>sizeof <argument_list>(<argument><expr><name>UINT32</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	<block>{
	  <expr_stmt><expr><name>p</name> = <name>pgr</name> + <name>greg</name>++</expr>;</expr_stmt>

	  <switch>switch <condition>(<expr><name>(*<name>p_arg</name>)-&gt;<name>type</name></name></expr>)</condition>
	    <block>{
	    <case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
	    </case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
	    </case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
	    </case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
	    </case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__LITTLE_ENDIAN__</name></cpp:ifdef>
	      <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>p</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	      <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = ((<name>char</name> *) <name>p</name>) + <sizeof>sizeof <argument_list>(<argument><expr><name>UINT32</name></expr></argument>)</argument_list></sizeof> - <name>z</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	      <break>break;</break>

	    </case><default>default:
	      <expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </default>}</block></switch>
	}</block></then>
      <else>else <if>if <condition>(<expr><name>z</name> == <sizeof>sizeof <argument_list>(<argument><expr><name>UINT32</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	<block>{
	  <if>if <condition>(<expr><name>(*<name>p_arg</name>)-&gt;<name>type</name></name> == <name>FFI_TYPE_FLOAT</name></expr>)</condition><then>
	    <block>{
	      <if>if <condition>(<expr><name>freg</name> &lt; <name>NFREGARG</name> - 1</expr>)</condition><then>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__LITTLE_ENDIAN__</name></cpp:ifdef>
		<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>UINT32</name> *) <name>pfr</name> + (1 ^ <name>freg</name>++)</expr>;</expr_stmt></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>UINT32</name> *) <name>pfr</name> + <name>freg</name>++</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	      <else>else
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__LITTLE_ENDIAN__</name></cpp:ifdef>
		<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pgr</name> + <name>greg</name></expr>;</expr_stmt></else>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <call>(<name>UINT32</name> *) <argument_list>(<argument><expr><name>pgr</name> + <name>greg</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    }</block></then>
	  <else>else
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__LITTLE_ENDIAN__</name></cpp:ifdef>
	    <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pgr</name> + <name>greg</name></expr>;</expr_stmt></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	    <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <call>(<name>UINT32</name> *) <argument_list>(<argument><expr><name>pgr</name> + <name>greg</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  <expr_stmt><expr><name>greg</name>++</expr>;</expr_stmt>
	}</block></then>
      <else>else <if>if <condition>(<expr><name>(*<name>p_arg</name>)-&gt;<name>type</name></name> == <name>FFI_TYPE_DOUBLE</name></expr>)</condition><then>
	<block>{
	  <if>if <condition>(<expr><name>freg</name> + 1 &gt;= <name>NFREGARG</name></expr>)</condition><then>
	    <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pgr</name> + <name>greg</name></expr>;</expr_stmt></then>
	  <else>else
	    <block>{
	      <expr_stmt><expr><name>freg</name> = (<name>freg</name> + 1) &amp; ~1</expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pfr</name> + (<name>freg</name> &gt;&gt; 1)</expr>;</expr_stmt>
	      <expr_stmt><expr><name>freg</name> += 2</expr>;</expr_stmt>
	    }</block></else></if>
	  <expr_stmt><expr><name>greg</name>++</expr>;</expr_stmt>
	}</block></then>
      <else>else
	<block>{
	  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr>(<name>z</name> + <sizeof>sizeof <argument_list>(<argument><expr><name>UINT64</name></expr></argument>)</argument_list></sizeof> - 1) / <sizeof>sizeof <argument_list>(<argument><expr><name>UINT64</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	  <expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pgr</name> + <name>greg</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>greg</name> += <name>n</name></expr>;</expr_stmt>
	}</block></else></if></else></if></else></if>
    }</block></for>

  <expr_stmt><expr><call>(<name><name>closure</name>-&gt;<name>fun</name></name>) <argument_list>(<argument><expr><name>cif</name></expr></argument>, <argument><expr><name>rvalue</name></expr></argument>, <argument><expr><name>avalue</name></expr></argument>, <argument><expr><name><name>closure</name>-&gt;<name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Tell ffi_closure_SYSV how to perform return type promotions.  */</comment>
  <return>return <expr><call><name>return_type</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

</unit>
