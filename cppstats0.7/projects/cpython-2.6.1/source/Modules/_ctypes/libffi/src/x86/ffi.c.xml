<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_ctypes/libffi/src/x86/ffi.c"><comment type="block">/* -----------------------------------------------------------------------
   ffi.c - Copyright (c) 1996, 1998, 1999, 2001, 2007, 2008  Red Hat, Inc.
           Copyright (c) 2002  Ranjit Mathew
           Copyright (c) 2002  Bo Thorsen
           Copyright (c) 2002  Roger Sayle
	   Copyright (C) 2008  Free Software Foundation, Inc.

   x86 Foreign Function Interface

   Permission is hereby granted, free of charge, to any person obtaining
   a copy of this software and associated documentation files (the
   ``Software''), to deal in the Software without restriction, including
   without limitation the rights to use, copy, modify, merge, publish,
   distribute, sublicense, and/or sell copies of the Software, and to
   permit persons to whom the Software is furnished to do so, subject to
   the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,
   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
   HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
   WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   ----------------------------------------------------------------------- */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__x86_64__</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<comment type="block">/* ffi_prep_args is called by the assembly routine once stack space
   has been allocated for the function's arguments */</comment>

<function><type><name>void</name></type> <name>ffi_prep_args</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>stack</name></decl></param>, <param><decl><type><name>extended_cif</name> *</type><name>ecif</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>register</name> <name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>register</name> <name>void</name> **</type><name>p_argv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>register</name> <name>char</name> *</type><name>argp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>register</name> <name>ffi_type</name> **</type><name>p_arg</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>argp</name> = <name>stack</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>flags</name></name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*(<name>void</name> **) <name>argp</name> = <name><name>ecif</name>-&gt;<name>rvalue</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>argp</name> += 4</expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><name>p_argv</name> = <name><name>ecif</name>-&gt;<name>avalue</name></name></expr>;</expr_stmt>

  <for>for (<init><expr><name>i</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>nargs</name></name></expr>, <expr><name>p_arg</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>arg_types</name></name></expr>;</init>
       <condition><expr><name>i</name> != 0</expr>;</condition>
       <incr><expr><name>i</name>--</expr>, <expr><name>p_arg</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>

      <comment type="block">/* Align if necessary */</comment>
      <if>if <condition>(<expr>(<sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> - 1) &amp; (<name>unsigned</name>) <name>argp</name></expr>)</condition><then>
	<expr_stmt><expr><name>argp</name> = (<name>char</name> *) <call><name>ALIGN</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><name>z</name> = <name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>z</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	<block>{
	  <expr_stmt><expr><name>z</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	  <switch>switch <condition>(<expr><name>(*<name>p_arg</name>)-&gt;<name>type</name></name></expr>)</condition>
	    <block>{
	    <case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
	      <expr_stmt><expr>*(<name>signed</name> <name>int</name> *) <name>argp</name> = (<name>signed</name> <name>int</name>)*<call>(<name>SINT8</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
	      <expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> = (<name>unsigned</name> <name>int</name>)*<call>(<name>UINT8</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
	      <expr_stmt><expr>*(<name>signed</name> <name>int</name> *) <name>argp</name> = (<name>signed</name> <name>int</name>)*<call>(<name>SINT16</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
	      <expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> = (<name>unsigned</name> <name>int</name>)*<call>(<name>UINT16</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
	      <expr_stmt><expr>*(<name>signed</name> <name>int</name> *) <name>argp</name> = (<name>signed</name> <name>int</name>)*<call>(<name>SINT32</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
	      <expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> = (<name>unsigned</name> <name>int</name>)*<call>(<name>UINT32</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
	      <expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> = (<name>unsigned</name> <name>int</name>)*<call>(<name>UINT32</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><default>default:
	      <expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </default>}</block></switch>
	}</block></then>
      <else>else
	<block>{
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
      <expr_stmt><expr><name>p_argv</name>++</expr>;</expr_stmt>
      <expr_stmt><expr><name>argp</name> += <name>z</name></expr>;</expr_stmt>
    }</block></for>
  
  <return>return;</return>
}</block></function>

<comment type="block">/* Perform machine dependent cif processing */</comment>
<function><type><name>ffi_status</name></type> <name>ffi_prep_cif_machdep</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Set the return type flag */</comment>
  <switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>)</condition>
    <block>{
    <case>case <expr><name>FFI_TYPE_VOID</name></expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>X86</name></cpp:ifdef>
    </case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X86</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>X86_DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
    </case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    </case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = (<name>unsigned</name>) <name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_SINT64</name></expr>;</expr_stmt>
      <break>break;</break>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>X86</name></cpp:ifndef>
    </case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
      <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name> == 1</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_SMALL_STRUCT_1B</name></expr>;</expr_stmt> <comment type="block">/* same as char size */</comment>
        }</block></then>
      <else>else <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name> == 2</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_SMALL_STRUCT_2B</name></expr>;</expr_stmt> <comment type="block">/* same as short size */</comment>
        }</block></then>
      <else>else <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name> == 4</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_INT</name></expr>;</expr_stmt> <comment type="block">/* same as int type */</comment>
        }</block></then>
      <else>else <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name> == 8</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_SINT64</name></expr>;</expr_stmt> <comment type="block">/* same as int64 type */</comment>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_STRUCT</name></expr>;</expr_stmt>
        }</block></else></if></else></if></else></if></else></if>
      <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    </case><default>default:
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_INT</name></expr>;</expr_stmt>
      <break>break;</break>
    </default>}</block></switch>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>X86_DARWIN</name></cpp:ifdef>
  <expr_stmt><expr><name><name>cif</name>-&gt;<name>bytes</name></name> = (<name><name>cif</name>-&gt;<name>bytes</name></name> + 15) &amp; ~0xF</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_call_SYSV</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*)<parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>,
			  <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name> *</type></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>X86_WIN32</name></cpp:ifdef>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_call_STDCALL</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*)<parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>,
			  <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name> *</type></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* X86_WIN32 */</comment>

<function><type><name>void</name></type> <name>ffi_call</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, <param><decl><type><name>void</name> **</type><name>avalue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>extended_cif</name></type> <name>ecif</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ecif</name>.<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ecif</name>.<name>avalue</name></name> = <name>avalue</name></expr>;</expr_stmt>
  
  <comment type="block">/* If the return value is a struct and we don't have a return	*/</comment>
  <comment type="block">/* value address then we need to make one		        */</comment>

  <if>if <condition>(<expr>(<name>rvalue</name> == <name>NULL</name>) &amp;&amp; 
      (<name><name>cif</name>-&gt;<name>flags</name></name> == <name>FFI_TYPE_STRUCT</name>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <name>rvalue</name></expr>;</expr_stmt></else></if>
    
  
  <switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name></expr>)</condition> 
    <block>{
    <case>case <expr><name>FFI_SYSV</name></expr>:
      <expr_stmt><expr><call><name>ffi_call_SYSV</name><argument_list>(<argument><expr><name>ffi_prep_args</name></expr></argument>, <argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>,
		    <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>X86_WIN32</name></cpp:ifdef>
    </case><case>case <expr><name>FFI_STDCALL</name></expr>:
      <expr_stmt><expr><call><name>ffi_call_STDCALL</name><argument_list>(<argument><expr><name>ffi_prep_args</name></expr></argument>, <argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>,
		       <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* X86_WIN32 */</comment>
    </case><default>default:
      <expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </default>}</block></switch>
}</block></function>


<comment type="block">/** private members **/</comment>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ffi_prep_incoming_args_SYSV</name> <parameter_list>(<param><decl><type><name>char</name> *</type><name>stack</name></decl></param>, <param><decl><type><name>void</name> **</type><name>ret</name></decl></param>,
					 <param><decl><type><name>void</name>**</type> <name>args</name></decl></param>, <param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>FFI_HIDDEN</name></type> <name>ffi_closure_SYSV</name> <parameter_list>(<param><decl><type><name>ffi_closure</name> *</type></decl></param>)</parameter_list>
     __attribute__ <parameter_list>(<param/></parameter_list>(regparm<parameter_list>(</parameter_list>1</function_decl>)))<empty_stmt>;</empty_stmt>
<function_decl><type><name>unsigned</name> <name>int</name> <name>FFI_HIDDEN</name></type> <name>ffi_closure_SYSV_inner</name> <parameter_list>(<param><decl><type><name>ffi_closure</name> *</type></decl></param>, <param><decl><type><name>void</name> **</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>
     __attribute__ <parameter_list>(<param/></parameter_list>(regparm<parameter_list>(</parameter_list>1</function_decl>)))<empty_stmt>;</empty_stmt>
<function_decl><type><name>void</name> <name>FFI_HIDDEN</name></type> <name>ffi_closure_raw_SYSV</name> <parameter_list>(<param><decl><type><name>ffi_raw_closure</name> *</type></decl></param>)</parameter_list>
     __attribute__ <parameter_list>(<param/></parameter_list>(regparm<parameter_list>(</parameter_list>1</function_decl>)))<empty_stmt>;</empty_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>X86_WIN32</name></cpp:ifdef>
<function_decl><type><name>void</name> <name>FFI_HIDDEN</name></type> <name>ffi_closure_STDCALL</name> <parameter_list>(<param><decl><type><name>ffi_closure</name> *</type></decl></param>)</parameter_list>
     __attribute__ <parameter_list>(<param/></parameter_list>(regparm<parameter_list>(</parameter_list>1</function_decl>)))<empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* This function is jumped to by the trampoline */</comment>

<function><type><name>unsigned</name> <name>int</name> <name>FFI_HIDDEN</name></type>
<name>ffi_closure_SYSV_inner</name> <parameter_list>(<param><decl><type><name>closure</name></type></decl></param>, <param><decl><type><name>respp</name></type></decl></param>, <param><decl><type><name>args</name></type></decl></param>)</parameter_list>
     <decl_stmt><decl><type><name>ffi_closure</name> *</type><name>closure</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>void</name> **</type><name>respp</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>void</name> *</type><name>args</name></decl>;</decl_stmt>
<block>{
  <comment type="block">/* our various things...  */</comment>
  <decl_stmt><decl><type><name>ffi_cif</name>       *</type><name>cif</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>         **</type><name>arg_area</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>cif</name>         = <name><name>closure</name>-&gt;<name>cif</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>arg_area</name>    = (<name>void</name>**) <call><name>alloca</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>nargs</name></name> * <sizeof>sizeof <argument_list>(<argument><expr><name>void</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>  

  <comment type="block">/* this call will initialize ARG_AREA, such that each
   * element in that array points to the corresponding 
   * value on the stack; and if the function returns
   * a structure, it will re-set RESP to point to the
   * structure return address.  */</comment>

  <expr_stmt><expr><call><name>ffi_prep_incoming_args_SYSV</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>respp</name></expr></argument>, <argument><expr><name>arg_area</name></expr></argument>, <argument><expr><name>cif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call>(<name><name>closure</name>-&gt;<name>fun</name></name>) <argument_list>(<argument><expr><name>cif</name></expr></argument>, <argument><expr>*<name>respp</name></expr></argument>, <argument><expr><name>arg_area</name></expr></argument>, <argument><expr><name><name>closure</name>-&gt;<name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name><name>cif</name>-&gt;<name>flags</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ffi_prep_incoming_args_SYSV</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>stack</name></decl></param>, <param><decl><type><name>void</name> **</type><name>rvalue</name></decl></param>, <param><decl><type><name>void</name> **</type><name>avalue</name></decl></param>,
			    <param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>register</name> <name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>register</name> <name>void</name> **</type><name>p_argv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>register</name> <name>char</name> *</type><name>argp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>register</name> <name>ffi_type</name> **</type><name>p_arg</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>argp</name> = <name>stack</name></expr>;</expr_stmt>

  <if>if <condition>( <expr><name><name>cif</name>-&gt;<name>flags</name></name> == <name>FFI_TYPE_STRUCT</name></expr> )</condition><then> <block>{
    <expr_stmt><expr>*<name>rvalue</name> = *(<name>void</name> **) <name>argp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>argp</name> += 4</expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><name>p_argv</name> = <name>avalue</name></expr>;</expr_stmt>

  <for>for (<init><expr><name>i</name> = <name><name>cif</name>-&gt;<name>nargs</name></name></expr>, <expr><name>p_arg</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>;</init> <condition><expr>(<name>i</name> != 0)</expr>;</condition> <incr><expr><name>i</name>--</expr>, <expr><name>p_arg</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>

      <comment type="block">/* Align if necessary */</comment>
      <if>if <condition>(<expr>(<sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> - 1) &amp; (<name>unsigned</name>) <name>argp</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>argp</name> = (<name>char</name> *) <call><name>ALIGN</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><name>z</name> = <name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>

      <comment type="block">/* because we're little endian, this is what it turns into.   */</comment>

      <expr_stmt><expr>*<name>p_argv</name> = (<name>void</name>*) <name>argp</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>p_argv</name>++</expr>;</expr_stmt>
      <expr_stmt><expr><name>argp</name> += <name>z</name></expr>;</expr_stmt>
    }</block></for>
  
  <return>return;</return>
}</block></function>

<comment type="block">/* How to make a trampoline.  Derived from gcc/config/i386/i386.c. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_INIT_TRAMPOLINE</name><parameter_list>(<param><type><name>TRAMP</name></type></param>,<param><type><name>FUN</name></type></param>,<param><type><name>CTX</name></type></param>)</parameter_list></cpp:macro> \
<cpp:value>({ unsigned char *__tramp = (unsigned char*)(TRAMP); \
   unsigned int  __fun = (unsigned int)(FUN); \
   unsigned int  __ctx = (unsigned int)(CTX); \
   unsigned int  __dis = __fun - (__ctx + 10);	\
   *(unsigned char*) &amp;__tramp[0] = 0xb8; \
   *(unsigned int*)  &amp;__tramp[1] = __ctx; <comment type="block">/* movl __ctx, %eax */</comment> \
   *(unsigned char *)  &amp;__tramp[5] = 0xe9; \
   *(unsigned int*)  &amp;__tramp[6] = __dis; <comment type="block">/* jmp __fun  */</comment> \
 })</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_INIT_TRAMPOLINE_STDCALL</name><parameter_list>(<param><type><name>TRAMP</name></type></param>,<param><type><name>FUN</name></type></param>,<param><type><name>CTX</name></type></param>,<param><type><name>SIZE</name></type></param>)</parameter_list></cpp:macro>  \
<cpp:value>({ unsigned char *__tramp = (unsigned char*)(TRAMP); \
   unsigned int  __fun = (unsigned int)(FUN); \
   unsigned int  __ctx = (unsigned int)(CTX); \
   unsigned int  __dis = __fun - (__ctx + 10); \
   unsigned short __size = (unsigned short)(SIZE); \
   *(unsigned char*) &amp;__tramp[0] = 0xb8; \
   *(unsigned int*)  &amp;__tramp[1] = __ctx; <comment type="block">/* movl __ctx, %eax */</comment> \
   *(unsigned char *)  &amp;__tramp[5] = 0xe8; \
   *(unsigned int*)  &amp;__tramp[6] = __dis; <comment type="block">/* call __fun  */</comment> \
   *(unsigned char *)  &amp;__tramp[10] = 0xc2; \
   *(unsigned short*)  &amp;__tramp[11] = __size; <comment type="block">/* ret __size  */</comment> \
 })</cpp:value></cpp:define>

<comment type="block">/* the cif must already be prep'ed */</comment>

<function><type><name>ffi_status</name></type>
<name>ffi_prep_closure_loc</name> <parameter_list>(<param><decl><type><name>ffi_closure</name>*</type> <name>closure</name></decl></param>,
		      <param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>,
		      <param><function_decl><type><name>void</name></type> (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>,<param><decl><type><name>void</name>**</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list></function_decl></param>,
		      <param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>,
		      <param><decl><type><name>void</name> *</type><name>codeloc</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_SYSV</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>FFI_INIT_TRAMPOLINE</name> <argument_list>(<argument><expr>&amp;<name><name>closure</name>-&gt;<name>tramp</name><index>[<expr>0</expr>]</index></name></expr></argument>,
                           <argument><expr>&amp;<name>ffi_closure_SYSV</name></expr></argument>,
                           <argument><expr>(<name>void</name>*)<name>codeloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>X86_WIN32</name></cpp:ifdef>
  <else>else <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_STDCALL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>FFI_INIT_TRAMPOLINE_STDCALL</name> <argument_list>(<argument><expr>&amp;<name><name>closure</name>-&gt;<name>tramp</name><index>[<expr>0</expr>]</index></name></expr></argument>,
                                   <argument><expr>&amp;<name>ffi_closure_STDCALL</name></expr></argument>,
                                   <argument><expr>(<name>void</name>*)<name>codeloc</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <else>else
    <block>{
      <return>return <expr><name>FFI_BAD_ABI</name></expr>;</return>
    }</block></else></if></else></if>
    
  <expr_stmt><expr><name><name>closure</name>-&gt;<name>cif</name></name>  = <name>cif</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>closure</name>-&gt;<name>user_data</name></name> = <name>user_data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>closure</name>-&gt;<name>fun</name></name>  = <name>fun</name></expr>;</expr_stmt>

  <return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* ------- Native raw API support -------------------------------- */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>FFI_NO_RAW_API</name></expr></cpp:if>

<function><type><name>ffi_status</name></type>
<name>ffi_prep_raw_closure_loc</name> <parameter_list>(<param><decl><type><name>ffi_raw_closure</name>*</type> <name>closure</name></decl></param>,
			  <param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>,
			  <param><function_decl><type><name>void</name></type> (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>,<param><decl><type><name>ffi_raw</name>*</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list></function_decl></param>,
			  <param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>,
			  <param><decl><type><name>void</name> *</type><name>codeloc</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name> != <name>FFI_SYSV</name></expr>)</condition><then> <block>{
    <return>return <expr><name>FFI_BAD_ABI</name></expr>;</return>
  }</block></then></if>

  <comment type="block">/* we currently don't support certain kinds of arguments for raw
  // closures.  This should be implemented by a separate assembly language
  // routine, since it would require argument processing, something we
  // don't do now for performance. */</comment>

  <for>for (<init><expr><name>i</name> = <name><name>cif</name>-&gt;<name>nargs</name></name>-1</expr>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>)
    <block>{
      <expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> != <name>FFI_TYPE_STRUCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> != <name>FFI_TYPE_LONGDOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  

  <expr_stmt><expr><call><name>FFI_INIT_TRAMPOLINE</name> <argument_list>(<argument><expr>&amp;<name><name>closure</name>-&gt;<name>tramp</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>ffi_closure_raw_SYSV</name></expr></argument>,
		       <argument><expr><name>codeloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
  <expr_stmt><expr><name><name>closure</name>-&gt;<name>cif</name></name>  = <name>cif</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>closure</name>-&gt;<name>user_data</name></name> = <name>user_data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>closure</name>-&gt;<name>fun</name></name>  = <name>fun</name></expr>;</expr_stmt>

  <return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> 
<name>ffi_prep_args_raw</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>stack</name></decl></param>, <param><decl><type><name>extended_cif</name> *</type><name>ecif</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name><name>ecif</name>-&gt;<name>avalue</name></name></expr></argument>, <argument><expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* we borrow this routine from libffi (it must be changed, though, to
 * actually call the function passed in the first argument.  as of
 * libffi-1.20, this is not the case.)
 */</comment>

<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>ffi_call_SYSV</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*)<parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>, 
	      <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name> *</type></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>X86_WIN32</name></cpp:ifdef>
<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>ffi_call_STDCALL</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*)<parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>,
		 <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name> *</type></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* X86_WIN32 */</comment>

<function><type><name>void</name></type>
<name>ffi_raw_call</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, <param><decl><type><name>ffi_raw</name> *</type><name>fake_avalue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>extended_cif</name></type> <name>ecif</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> **</type><name>avalue</name> <init>= <expr>(<name>void</name> **)<name>fake_avalue</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ecif</name>.<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ecif</name>.<name>avalue</name></name> = <name>avalue</name></expr>;</expr_stmt>
  
  <comment type="block">/* If the return value is a struct and we don't have a return	*/</comment>
  <comment type="block">/* value address then we need to make one		        */</comment>

  <if>if <condition>(<expr>(<name>rvalue</name> == <name>NULL</name>) &amp;&amp; 
      (<name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <name>rvalue</name></expr>;</expr_stmt></else></if>
    
  
  <switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name></expr>)</condition> 
    <block>{
    <case>case <expr><name>FFI_SYSV</name></expr>:
      <expr_stmt><expr><call><name>ffi_call_SYSV</name><argument_list>(<argument><expr><name>ffi_prep_args_raw</name></expr></argument>, <argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>,
		    <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>X86_WIN32</name></cpp:ifdef>
    </case><case>case <expr><name>FFI_STDCALL</name></expr>:
      <expr_stmt><expr><call><name>ffi_call_STDCALL</name><argument_list>(<argument><expr><name>ffi_prep_args_raw</name></expr></argument>, <argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>,
		       <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* X86_WIN32 */</comment>
    </case><default>default:
      <expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </default>}</block></switch>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __x86_64__  */</comment>
</unit>
