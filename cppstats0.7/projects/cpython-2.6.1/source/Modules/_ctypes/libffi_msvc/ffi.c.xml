<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_ctypes/libffi_msvc/ffi.c"><comment type="block">/* -----------------------------------------------------------------------
   ffi.c - Copyright (c) 1996, 1998, 1999, 2001  Red Hat, Inc.
           Copyright (c) 2002  Ranjit Mathew
           Copyright (c) 2002  Bo Thorsen
           Copyright (c) 2002  Roger Sayle
   
   x86 Foreign Function Interface 

   Permission is hereby granted, free of charge, to any person obtaining
   a copy of this software and associated documentation files (the
   ``Software''), to deal in the Software without restriction, including
   without limitation the rights to use, copy, modify, merge, publish,
   distribute, sublicense, and/or sell copies of the Software, and to
   permit persons to whom the Software is furnished to do so, subject to
   the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
   IN NO EVENT SHALL CYGNUS SOLUTIONS BE LIABLE FOR ANY CLAIM, DAMAGES OR
   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   OTHER DEALINGS IN THE SOFTWARE.
   ----------------------------------------------------------------------- */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<comment type="block">/* ffi_prep_args is called by the assembly routine once stack space
   has been allocated for the function's arguments */</comment>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>Py_FatalError</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*@-exportheader@*/</comment>
<function><type><name>void</name></type> <name>ffi_prep_args</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>stack</name></decl></param>, <param><decl><type><name>extended_cif</name> *</type><name>ecif</name></decl></param>)</parameter_list>
<comment type="block">/*@=exportheader@*/</comment>
<block>{
  <decl_stmt><decl><type><name>register</name> <name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>register</name> <name>void</name> **</type><name>p_argv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>register</name> <name>char</name> *</type><name>argp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>register</name> <name>ffi_type</name> **</type><name>p_arg</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>argp</name> = <name>stack</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*(<name>void</name> **) <name>argp</name> = <name><name>ecif</name>-&gt;<name>rvalue</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>argp</name> += <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><name>p_argv</name> = <name><name>ecif</name>-&gt;<name>avalue</name></name></expr>;</expr_stmt>

  <for>for (<init><expr><name>i</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>nargs</name></name></expr>, <expr><name>p_arg</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>arg_types</name></name></expr>;</init>
       <condition><expr><name>i</name> != 0</expr>;</condition>
       <incr><expr><name>i</name>--</expr>, <expr><name>p_arg</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>

      <comment type="block">/* Align if necessary */</comment>
      <if>if <condition>(<expr>(<sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof> - 1) &amp; (<name>size_t</name>) <name>argp</name></expr>)</condition><then>
	<expr_stmt><expr><name>argp</name> = (<name>char</name> *) <call><name>ALIGN</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><name>z</name> = <name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>z</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
	<block>{
	  <expr_stmt><expr><name>z</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	  <switch>switch <condition>(<expr><name>(*<name>p_arg</name>)-&gt;<name>type</name></name></expr>)</condition>
	    <block>{
	    <case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
	      <expr_stmt><expr>*(<name>signed</name> <name>int</name> *) <name>argp</name> = (<name>signed</name> <name>int</name>)*<call>(<name>SINT8</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
	      <expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> = (<name>unsigned</name> <name>int</name>)*<call>(<name>UINT8</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
	      <expr_stmt><expr>*(<name>signed</name> <name>int</name> *) <name>argp</name> = (<name>signed</name> <name>int</name>)*<call>(<name>SINT16</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
	      <expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> = (<name>unsigned</name> <name>int</name>)*<call>(<name>UINT16</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
	      <expr_stmt><expr>*(<name>signed</name> <name>int</name> *) <name>argp</name> = (<name>signed</name> <name>int</name>)*<call>(<name>SINT32</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
	      <expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> = (<name>unsigned</name> <name>int</name>)*<call>(<name>UINT32</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
	      <expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> = (<name>unsigned</name> <name>int</name>)*<call>(<name>UINT32</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>

	    </case><default>default:
	      <expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </default>}</block></switch>
	}</block></then>
      <else>else
	<block>{
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
      <expr_stmt><expr><name>p_argv</name>++</expr>;</expr_stmt>
      <expr_stmt><expr><name>argp</name> += <name>z</name></expr>;</expr_stmt>
    }</block></for>

  <if>if <condition>(<expr><name>argp</name> - <name>stack</name> &gt; <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>bytes</name></name></expr>)</condition><then> 
    <block>{
      <expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"FFI BUG: not enough stack space for arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <return>return;</return>
}</block></function>

<comment type="block">/* Perform machine dependent cif processing */</comment>
<function><type><name>ffi_status</name></type> <name>ffi_prep_cif_machdep</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Set the return type flag */</comment>
  <switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>)</condition>
    <block>{
    <case>case <expr><name>FFI_TYPE_VOID</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
    </case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = (<name>unsigned</name>) <name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN64</name></cpp:ifdef>
    </case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_SINT64</name></expr>;</expr_stmt>
      <break>break;</break>

    </case><default>default:
      <expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_INT</name></expr>;</expr_stmt>
      <break>break;</break>
    </default>}</block></switch>

  <return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<comment type="block">/*@-declundef@*/</comment>
<comment type="block">/*@-exportheader@*/</comment>
<function_decl><type><specifier>extern</specifier> <name>int</name></type>
<name>ffi_call_SYSV</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*)<parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>)</parameter_list></function_decl></param>, 
	      <comment type="block">/*@out@*/</comment> <param><decl><type><name>extended_cif</name> *</type></decl></param>, 
	      <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>, 
	      <comment type="block">/*@out@*/</comment> <param><decl><type><name>unsigned</name> *</type></decl></param>, 
	      <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>()</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
<comment type="block">/*@=declundef@*/</comment>
<comment type="block">/*@=exportheader@*/</comment>

<comment type="block">/*@-declundef@*/</comment>
<comment type="block">/*@-exportheader@*/</comment>
<function_decl><type><specifier>extern</specifier> <name>int</name></type>
<name>ffi_call_STDCALL</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*)<parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>)</parameter_list></function_decl></param>,
		 <comment type="block">/*@out@*/</comment> <param><decl><type><name>extended_cif</name> *</type></decl></param>,
		 <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>,
		 <comment type="block">/*@out@*/</comment> <param><decl><type><name>unsigned</name> *</type></decl></param>,
		 <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>()</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
<comment type="block">/*@=declundef@*/</comment>
<comment type="block">/*@=exportheader@*/</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN64</name></cpp:ifdef>
<function_decl><type><specifier>extern</specifier> <name>int</name></type>
<name>ffi_call_AMD64</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*)<parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>)</parameter_list></function_decl></param>,
		 <comment type="block">/*@out@*/</comment> <param><decl><type><name>extended_cif</name> *</type></decl></param>,
		 <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>,
		 <comment type="block">/*@out@*/</comment> <param><decl><type><name>unsigned</name> *</type></decl></param>,
		 <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>()</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>ffi_call</name><parameter_list>(<comment type="block">/*@dependent@*/</comment> <param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>, 
	 <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>()</parameter_list></function_decl></param>, 
	 <comment type="block">/*@out@*/</comment> <param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, 
	 <comment type="block">/*@dependent@*/</comment> <param><decl><type><name>void</name> **</type><name>avalue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>extended_cif</name></type> <name>ecif</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ecif</name>.<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ecif</name>.<name>avalue</name></name> = <name>avalue</name></expr>;</expr_stmt>
  
  <comment type="block">/* If the return value is a struct and we don't have a return	*/</comment>
  <comment type="block">/* value address then we need to make one		        */</comment>

  <if>if <condition>(<expr>(<name>rvalue</name> == <name>NULL</name>) &amp;&amp; 
      (<name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name>)</expr>)</condition><then>
    <block>{
      <comment type="block">/*@-sysunrecog@*/</comment>
      <expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/*@=sysunrecog@*/</comment>
    }</block></then>
  <else>else
    <expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <name>rvalue</name></expr>;</expr_stmt></else></if>
    
  
  <switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name></expr>)</condition> 
    <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><name>FFI_SYSV</name></expr>:
      <comment type="block">/*@-usedef@*/</comment>
      <return>return <expr><call><name>ffi_call_SYSV</name><argument_list>(<argument><expr><name>ffi_prep_args</name></expr></argument>, <argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>, 
			   <argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</return>
      <comment type="block">/*@=usedef@*/</comment>
      <break>break;</break>

    </case><case>case <expr><name>FFI_STDCALL</name></expr>:
      <comment type="block">/*@-usedef@*/</comment>
      <return>return <expr><call><name>ffi_call_STDCALL</name><argument_list>(<argument><expr><name>ffi_prep_args</name></expr></argument>, <argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>,
			      <argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</return>
      <comment type="block">/*@=usedef@*/</comment>
      <break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    </case><case>case <expr><name>FFI_SYSV</name></expr>:
      <comment type="block">/*@-usedef@*/</comment>
      <comment type="block">/* Function call needs at least 40 bytes stack size, on win64 AMD64 */</comment>
      <return>return <expr><call><name>ffi_call_AMD64</name><argument_list>(<argument><expr><name>ffi_prep_args</name></expr></argument>, <argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name> ? <name><name>cif</name>-&gt;<name>bytes</name></name> : 40</expr></argument>,
			   <argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</return>
      <comment type="block">/*@=usedef@*/</comment>
      <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    </case><default>default:
      <expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </default>}</block></switch>
  <return>return <expr>-1</expr>;</return> <comment type="block">/* theller: Hrm. */</comment>
}</block></function>


<comment type="block">/** private members **/</comment>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ffi_prep_incoming_args_SYSV</name> <parameter_list>(<param><decl><type><name>char</name> *</type><name>stack</name></decl></param>, <param><decl><type><name>void</name> **</type><name>ret</name></decl></param>,
					  <param><decl><type><name>void</name>**</type> <name>args</name></decl></param>, <param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>)</parameter_list>;</function_decl>
<comment type="block">/* This function is jumped to by the trampoline */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN64</name></cpp:ifdef>
<function><type><name>void</name> *</type>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<type><specifier>static</specifier></type> <name>void</name> __fastcall
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
ffi_closure_SYSV <parameter_list>(<param><decl><type><name>ffi_closure</name> *</type><name>closure</name></decl></param>, <param><decl><type><name>int</name> *</type><name>argp</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// this is our return value storage</comment>
  <decl_stmt><decl><type><name>long</name> <name>double</name></type>    <name>res</name></decl>;</decl_stmt>

  <comment type="line">// our various things...</comment>
  <decl_stmt><decl><type><name>ffi_cif</name>       *</type><name>cif</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>         **</type><name>arg_area</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>rtype</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>          *</type><name>resp</name> <init>= <expr>(<name>void</name>*)&amp;<name>res</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>args</name> <init>= <expr>&amp;<name><name>argp</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>cif</name>         = <name><name>closure</name>-&gt;<name>cif</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>arg_area</name>    = (<name>void</name>**) <call><name>alloca</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>nargs</name></name> * <sizeof>sizeof <argument_list>(<argument><expr><name>void</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>  

  <comment type="block">/* this call will initialize ARG_AREA, such that each
   * element in that array points to the corresponding 
   * value on the stack; and if the function returns
   * a structure, it will re-set RESP to point to the
   * structure return address.  */</comment>

  <expr_stmt><expr><call><name>ffi_prep_incoming_args_SYSV</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>(<name>void</name>**)&amp;<name>resp</name></expr></argument>, <argument><expr><name>arg_area</name></expr></argument>, <argument><expr><name>cif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call>(<name><name>closure</name>-&gt;<name>fun</name></name>) <argument_list>(<argument><expr><name>cif</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>arg_area</name></expr></argument>, <argument><expr><name><name>closure</name>-&gt;<name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rtype</name> = <name><name>cif</name>-&gt;<name>flags</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
  <comment type="block">/* now, do a generic return based on the value of rtype */</comment>
  <if>if <condition>(<expr><name>rtype</name> == <name>FFI_TYPE_INT</name></expr>)</condition><then>
    <block>{
	    <decl_stmt><decl><type><name>_asm</name> <name>mov</name></type> <name>eax</name></decl>, <decl><type ref="prev"/><name>resp</name></decl> ;</decl_stmt>
	    <decl_stmt><decl><type><name>_asm</name> <name>mov</name></type> <name>eax</name></decl>, [<decl><type ref="prev"/><name>eax</name>]</decl> ;</decl_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>rtype</name> == <name>FFI_TYPE_FLOAT</name></expr>)</condition><then>
    <block>{
	    <decl_stmt><decl><type><name>_asm</name> <name>mov</name></type> <name>eax</name></decl>, <decl><type ref="prev"/><name>resp</name></decl> ;</decl_stmt>
	    <decl_stmt><decl><type><name>_asm</name> <name>fld</name> <name>DWORD</name></type> <name><name>PTR</name> <index>[<expr><name>eax</name></expr>]</index></name></decl> ;</decl_stmt>
<comment type="line">//      asm ("flds (%0)" : : "r" (resp) : "st" );</comment>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>rtype</name> == <name>FFI_TYPE_DOUBLE</name></expr>)</condition><then>
    <block>{
	    <decl_stmt><decl><type><name>_asm</name> <name>mov</name></type> <name>eax</name></decl>, <decl><type ref="prev"/><name>resp</name></decl> ;</decl_stmt>
	    <decl_stmt><decl><type><name>_asm</name> <name>fld</name> <name>QWORD</name></type> <name><name>PTR</name> <index>[<expr><name>eax</name></expr>]</index></name></decl> ;</decl_stmt>
<comment type="line">//      asm ("fldl (%0)" : : "r" (resp) : "st", "st(1)" );</comment>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>rtype</name> == <name>FFI_TYPE_LONGDOUBLE</name></expr>)</condition><then>
    <block>{
<comment type="line">//      asm ("fldt (%0)" : : "r" (resp) : "st", "st(1)" );</comment>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>rtype</name> == <name>FFI_TYPE_SINT64</name></expr>)</condition><then>
    <block>{
	    <decl_stmt><decl><type><name>_asm</name> <name>mov</name></type> <name>edx</name></decl>, <decl><type ref="prev"/><name>resp</name></decl> ;</decl_stmt>
	    <decl_stmt><decl><type><name>_asm</name> <name>mov</name></type> <name>eax</name></decl>, [<decl><type ref="prev"/><name>edx</name>]</decl> ;</decl_stmt>
	    <decl_stmt><decl><type><name>_asm</name> <name>mov</name></type> <name>edx</name></decl>, [<decl><type ref="prev"/><name>edx</name> + 4]</decl> ;</decl_stmt>
<comment type="line">//      asm ("movl 0(%0),%%eax;"</comment>
<comment type="line">//	   "movl 4(%0),%%edx" </comment>
<comment type="line">//	   : : "r"(resp)</comment>
<comment type="line">//	   : "eax", "edx");</comment>
    }</block></then></if></else></if></else></if></else></if></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* now, do a generic return based on the value of rtype */</comment>
  <if>if <condition>(<expr><name>rtype</name> == <name>FFI_TYPE_INT</name></expr>)</condition><then>
    <block>{
      <asm>asm ("movl (%0),%%eax" : : "r" (resp) : "eax");</asm>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>rtype</name> == <name>FFI_TYPE_FLOAT</name></expr>)</condition><then>
    <block>{
      <asm>asm ("flds (%0)" : : "r" (resp) : "st" );</asm>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>rtype</name> == <name>FFI_TYPE_DOUBLE</name></expr>)</condition><then>
    <block>{
      <asm>asm ("fldl (%0)" : : "r" (resp) : "st", "st(1)" );</asm>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>rtype</name> == <name>FFI_TYPE_LONGDOUBLE</name></expr>)</condition><then>
    <block>{
      <asm>asm ("fldt (%0)" : : "r" (resp) : "st", "st(1)" );</asm>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>rtype</name> == <name>FFI_TYPE_SINT64</name></expr>)</condition><then>
    <block>{
      <asm>asm ("movl 0(%0),%%eax;"
	   "movl 4(%0),%%edx" 
	   : : "r"(resp)
	   : "eax", "edx");</asm>
    }</block></then></if></else></if></else></if></else></if></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN64</name></cpp:ifdef>
  <comment type="block">/* The result is returned in rax.  This does the right thing for
     result types except for floats; we have to 'mov xmm0, rax' in the
     caller to correct this.
  */</comment>
  <return>return <expr>*(<name>void</name> **)<name>resp</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<comment type="block">/*@-exportheader@*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> 
<name>ffi_prep_incoming_args_SYSV</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>stack</name></decl></param>, <param><decl><type><name>void</name> **</type><name>rvalue</name></decl></param>,
			    <param><decl><type><name>void</name> **</type><name>avalue</name></decl></param>, <param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>)</parameter_list>
<comment type="block">/*@=exportheader@*/</comment>
<block>{
  <decl_stmt><decl><type><name>register</name> <name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>register</name> <name>void</name> **</type><name>p_argv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>register</name> <name>char</name> *</type><name>argp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>register</name> <name>ffi_type</name> **</type><name>p_arg</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>argp</name> = <name>stack</name></expr>;</expr_stmt>

  <if>if <condition>( <expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name></expr> )</condition><then> <block>{
    <expr_stmt><expr>*<name>rvalue</name> = *(<name>void</name> **) <name>argp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>argp</name> += 4</expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><name>p_argv</name> = <name>avalue</name></expr>;</expr_stmt>

  <for>for (<init><expr><name>i</name> = <name><name>cif</name>-&gt;<name>nargs</name></name></expr>, <expr><name>p_arg</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>;</init> <condition><expr>(<name>i</name> != 0)</expr>;</condition> <incr><expr><name>i</name>--</expr>, <expr><name>p_arg</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>

      <comment type="block">/* Align if necessary */</comment>
      <if>if <condition>(<expr>(<sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof> - 1) &amp; (<name>size_t</name>) <name>argp</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>argp</name> = (<name>char</name> *) <call><name>ALIGN</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><name>z</name> = <name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>

      <comment type="block">/* because we're little endian, this is what it turns into.   */</comment>

      <expr_stmt><expr>*<name>p_argv</name> = (<name>void</name>*) <name>argp</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>p_argv</name>++</expr>;</expr_stmt>
      <expr_stmt><expr><name>argp</name> += <name>z</name></expr>;</expr_stmt>
    }</block></for>
  
  <return>return;</return>
}</block></function>

<comment type="block">/* the cif must already be prep'ed */</comment>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_closure_OUTER</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>ffi_status</name></type>
<name>ffi_prep_closure</name> <parameter_list>(<param><decl><type><name>ffi_closure</name>*</type> <name>closure</name></decl></param>,
		  <param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>,
		  <param><function_decl><type><name>void</name></type> (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>,<param><decl><type><name>void</name>**</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list></function_decl></param>,
		  <param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>short</name></type> <name>bytes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>tramp</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN64</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_SYSV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_SYSV</name></expr>)</condition><then>
    <expr_stmt><expr><name>bytes</name> = 0</expr>;</expr_stmt></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <else>else <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_STDCALL</name></expr>)</condition><then>
    <expr_stmt><expr><name>bytes</name> = <name><name>cif</name>-&gt;<name>bytes</name></name></expr>;</expr_stmt></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <else>else
    <return>return <expr><name>FFI_BAD_ABI</name></expr>;</return></else></if></else></if>

  <expr_stmt><expr><name>tramp</name> = &amp;<name><name>closure</name>-&gt;<name>tramp</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTES</name><parameter_list>(<param><type><name>text</name></type></param>)</parameter_list></cpp:macro> <cpp:value>memcpy(tramp, text, sizeof(text)), tramp += sizeof(text)-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POINTER</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>*(void**)tramp = (void*)(x), tramp += sizeof(void*)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHORT</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>*(short*)tramp = x, tramp += sizeof(short)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>*(int*)tramp = x, tramp += sizeof(int)</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN64</name></cpp:ifdef>
  <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>nargs</name></name> &gt;= 1 &amp;&amp;
      (<name><name>cif</name>-&gt;<name>arg_types</name><index>[<expr>0</expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_FLOAT</name>
       || <name><name>cif</name>-&gt;<name>arg_types</name><index>[<expr>0</expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_DOUBLE</name>)</expr>)</condition><then>
    <expr_stmt><expr><name>mask</name> |= 1</expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>nargs</name></name> &gt;= 2 &amp;&amp;
      (<name><name>cif</name>-&gt;<name>arg_types</name><index>[<expr>1</expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_FLOAT</name>
       || <name><name>cif</name>-&gt;<name>arg_types</name><index>[<expr>1</expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_DOUBLE</name>)</expr>)</condition><then>
    <expr_stmt><expr><name>mask</name> |= 2</expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>nargs</name></name> &gt;= 3 &amp;&amp;
      (<name><name>cif</name>-&gt;<name>arg_types</name><index>[<expr>2</expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_FLOAT</name>
       || <name><name>cif</name>-&gt;<name>arg_types</name><index>[<expr>2</expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_DOUBLE</name>)</expr>)</condition><then>
    <expr_stmt><expr><name>mask</name> |= 4</expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>nargs</name></name> &gt;= 4 &amp;&amp;
      (<name><name>cif</name>-&gt;<name>arg_types</name><index>[<expr>3</expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_FLOAT</name>
       || <name><name>cif</name>-&gt;<name>arg_types</name><index>[<expr>3</expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_DOUBLE</name>)</expr>)</condition><then>
    <expr_stmt><expr><name>mask</name> |= 8</expr>;</expr_stmt></then></if>

  <comment type="block">/* 41 BB ----         mov         r11d,mask */</comment>
  <expr_stmt><expr><call><name>BYTES</name><argument_list>(<argument><expr>"\x41\xBB"</expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>INT</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* 48 B8 --------     mov         rax, closure			*/</comment>
  <expr_stmt><expr><call><name>BYTES</name><argument_list>(<argument><expr>"\x48\xB8"</expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>POINTER</name><argument_list>(<argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* 49 BA --------     mov         r10, ffi_closure_OUTER */</comment>
  <expr_stmt><expr><call><name>BYTES</name><argument_list>(<argument><expr>"\x49\xBA"</expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>POINTER</name><argument_list>(<argument><expr><name>ffi_closure_OUTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* 41 FF E2           jmp         r10 */</comment>
  <expr_stmt><expr><call><name>BYTES</name><argument_list>(<argument><expr>"\x41\xFF\xE2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

  <comment type="block">/* mov ecx, closure */</comment>
  <expr_stmt><expr><call><name>BYTES</name><argument_list>(<argument><expr>"\xb9"</expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>POINTER</name><argument_list>(<argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* mov edx, esp */</comment>
  <expr_stmt><expr><call><name>BYTES</name><argument_list>(<argument><expr>"\x8b\xd4"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* call ffi_closure_SYSV */</comment>
  <expr_stmt><expr><call><name>BYTES</name><argument_list>(<argument><expr>"\xe8"</expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>POINTER</name><argument_list>(<argument><expr>(<name>char</name>*)&amp;<name>ffi_closure_SYSV</name> - (<name>tramp</name> + 4)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ret bytes */</comment>
  <expr_stmt><expr><call><name>BYTES</name><argument_list>(<argument><expr>"\xc2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SHORT</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if>if <condition>(<expr><name>tramp</name> - &amp;<name><name>closure</name>-&gt;<name>tramp</name><index>[<expr>0</expr>]</index></name> &gt; <name>FFI_TRAMPOLINE_SIZE</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"FFI_TRAMPOLINE_SIZE too small in " <name>__FILE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><name><name>closure</name>-&gt;<name>cif</name></name>  = <name>cif</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>closure</name>-&gt;<name>user_data</name></name> = <name>user_data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>closure</name>-&gt;<name>fun</name></name>  = <name>fun</name></expr>;</expr_stmt>

  <return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>
</unit>
