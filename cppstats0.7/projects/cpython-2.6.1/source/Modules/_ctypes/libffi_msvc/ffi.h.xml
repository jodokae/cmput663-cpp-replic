<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_ctypes/libffi_msvc/ffi.h"><comment type="block">/* -----------------------------------------------------------------*-C-*-
   libffi 2.00-beta - Copyright (c) 1996-2003  Red Hat, Inc.

   Permission is hereby granted, free of charge, to any person obtaining
   a copy of this software and associated documentation files (the
   ``Software''), to deal in the Software without restriction, including
   without limitation the rights to use, copy, modify, merge, publish,
   distribute, sublicense, and/or sell copies of the Software, and to
   permit persons to whom the Software is furnished to do so, subject to
   the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
   IN NO EVENT SHALL CYGNUS SOLUTIONS BE LIABLE FOR ANY CLAIM, DAMAGES OR
   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   OTHER DEALINGS IN THE SOFTWARE.

   ----------------------------------------------------------------------- */</comment>

<comment type="block">/* -------------------------------------------------------------------
   The basic API is described in the README file.

   The raw API is designed to bypass some of the argument packing
   and unpacking on architectures for which it can be avoided.

   The closure API allows interpreted functions to be packaged up
   inside a C function pointer, so that they can be called as C functions,
   with no understanding on the client side that they are interpreted.
   It can also be used in other cases in which it is necessary to package
   up a user specified parameter and a function pointer as a single
   function pointer.

   The closure API must be implemented in order to get its functionality,
   e.g. for use by gij.  Routines are provided to emulate the raw API
   if the underlying platform doesn't allow faster implementation.

   More details on the raw and cloure API can be found in:

   http://gcc.gnu.org/ml/java/1999-q3/msg00138.html

   and

   http://gcc.gnu.org/ml/java/1999-q3/msg00174.html
   -------------------------------------------------------------------- */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LIBFFI_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBFFI_H</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Specify which architecture libffi is configured for. */</comment>
<comment type="line">//XXX #define X86</comment>

<comment type="block">/* ---- System configuration information --------------------------------- */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffitarget.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LIBFFI_ASM</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<comment type="block">/* LONG_LONG_MAX is not always defined (not if STRICT_ANSI, for example).
   But we can find it either under the correct ANSI name, or under GNU
   C's internal name.  */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LONG_LONG_MAX</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_LONG_LONG_MAX</name></cpp:macro> <cpp:value>LONG_LONG_MAX</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>LLONG_MAX</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_LONG_LONG_MAX</name></cpp:macro> <cpp:value>LLONG_MAX</cpp:value></cpp:define>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>__GNUC__</name></cpp:ifdef>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_LONG_LONG_MAX</name></cpp:macro> <cpp:value>__LONG_LONG_MAX__</cpp:value></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_LONG_LONG_MAX</name></cpp:macro> <cpp:value>_I64_MAX</cpp:value></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SCHAR_MAX</name> == 127</expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>ffi_type_uchar</name></cpp:macro>                <cpp:value>ffi_type_uint8</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>ffi_type_schar</name></cpp:macro>                <cpp:value>ffi_type_sint8</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
 <cpp:error>#<cpp:directive>error</cpp:directive> "char size not supported"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SHRT_MAX</name> == 32767</expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>ffi_type_ushort</name></cpp:macro>       <cpp:value>ffi_type_uint16</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>ffi_type_sshort</name></cpp:macro>       <cpp:value>ffi_type_sint16</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SHRT_MAX</name> == 2147483647</expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>ffi_type_ushort</name></cpp:macro>       <cpp:value>ffi_type_uint32</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>ffi_type_sshort</name></cpp:macro>       <cpp:value>ffi_type_sint32</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
 <cpp:error>#<cpp:directive>error</cpp:directive> "short size not supported"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>INT_MAX</name> == 32767</expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>ffi_type_uint</name></cpp:macro>         <cpp:value>ffi_type_uint16</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>ffi_type_sint</name></cpp:macro>         <cpp:value>ffi_type_sint16</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>INT_MAX</name> == 2147483647</expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>ffi_type_uint</name></cpp:macro>         <cpp:value>ffi_type_uint32</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>ffi_type_sint</name></cpp:macro>         <cpp:value>ffi_type_sint32</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>INT_MAX</name> == 9223372036854775807</expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>ffi_type_uint</name></cpp:macro>         <cpp:value>ffi_type_uint64</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>ffi_type_sint</name></cpp:macro>         <cpp:value>ffi_type_sint64</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
 <cpp:error>#<cpp:directive>error</cpp:directive> "int size not supported"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ffi_type_ulong</name></cpp:macro>         <cpp:value>ffi_type_uint64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ffi_type_slong</name></cpp:macro>         <cpp:value>ffi_type_sint64</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LONG_MAX</name> == 2147483647</expr></cpp:if>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>FFI_LONG_LONG_MAX</name> != 9223372036854775807</expr></cpp:if>
  <cpp:error>#<cpp:directive>error</cpp:directive> "no 64-bit data type supported"</cpp:error>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LONG_MAX</name> != 9223372036854775807</expr></cpp:elif>
 <cpp:error>#<cpp:directive>error</cpp:directive> "long size not supported"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* The closure code assumes that this works on pointers, i.e. a size_t	*/</comment>
<comment type="block">/* can hold a pointer.							*/</comment>

<typedef>typedef <type><struct>struct <name>_ffi_type</name>
<block>{
  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>alignment</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>type</name></decl>;</decl_stmt>
  <comment type="block">/*@null@*/</comment> <decl_stmt><decl><type>struct <name>_ffi_type</name> **</type><name>elements</name></decl>;</decl_stmt>
}</block></struct></type> <name>ffi_type</name>;</typedef>

<comment type="block">/* These are defined in types.c */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ffi_type</name></type> <name>ffi_type_void</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ffi_type</name></type> <name>ffi_type_uint8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ffi_type</name></type> <name>ffi_type_sint8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ffi_type</name></type> <name>ffi_type_uint16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ffi_type</name></type> <name>ffi_type_sint16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ffi_type</name></type> <name>ffi_type_uint32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ffi_type</name></type> <name>ffi_type_sint32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ffi_type</name></type> <name>ffi_type_uint64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ffi_type</name></type> <name>ffi_type_sint64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ffi_type</name></type> <name>ffi_type_float</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ffi_type</name></type> <name>ffi_type_double</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ffi_type</name></type> <name>ffi_type_longdouble</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ffi_type</name></type> <name>ffi_type_pointer</name></decl>;</decl_stmt>


<typedef>typedef <type><enum>enum <block>{
  <decl><name>FFI_OK</name> <init>= <expr>0</expr></init></decl>,
  <decl><name>FFI_BAD_TYPEDEF</name></decl>,
  <decl><name>FFI_BAD_ABI</name></decl> 
}</block></enum></type> <name>ffi_status</name>;</typedef>

<typedef>typedef <type><name>unsigned</name></type> <name>FFI_TYPE</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>ffi_abi</name></type> <name>abi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>nargs</name></decl>;</decl_stmt>
  <comment type="block">/*@dependent@*/</comment> <decl_stmt><decl><type><name>ffi_type</name> **</type><name>arg_types</name></decl>;</decl_stmt>
  <comment type="block">/*@dependent@*/</comment> <decl_stmt><decl><type><name>ffi_type</name> *</type><name>rtype</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>bytes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FFI_EXTRA_CIF_FIELDS</name></cpp:ifdef>
  <expr_stmt><expr><name>FFI_EXTRA_CIF_FIELDS</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>ffi_cif</name>;</typedef>

<comment type="block">/* ---- Definitions for the raw API -------------------------------------- */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN64</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_SIZEOF_ARG</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_SIZEOF_ARG</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><union>union <block>{
  <decl_stmt><decl><type><name>ffi_sarg</name></type>  <name>sint</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ffi_arg</name></type>   <name>uint</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>float</name></type>	    <name>flt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>data</name><index>[<expr><name>FFI_SIZEOF_ARG</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>*</type>     <name>ptr</name></decl>;</decl_stmt>
}</block></union></type> <name>ffi_raw</name>;</typedef>

<function_decl><type><name>void</name></type> <name>ffi_raw_call</name> <parameter_list>(<comment type="block">/*@dependent@*/</comment> <param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>, 
		   <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>()</parameter_list></function_decl></param>, 
		   <comment type="block">/*@out@*/</comment> <param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, 
		   <comment type="block">/*@dependent@*/</comment> <param><decl><type><name>ffi_raw</name> *</type><name>avalue</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ffi_ptrarray_to_raw</name> <parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>, <param><decl><type><name>void</name> **</type><name>args</name></decl></param>, <param><decl><type><name>ffi_raw</name> *</type><name>raw</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ffi_raw_to_ptrarray</name> <parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>, <param><decl><type><name>ffi_raw</name> *</type><name>raw</name></decl></param>, <param><decl><type><name>void</name> **</type><name>args</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>ffi_raw_size</name> <parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* This is analogous to the raw API, except it uses Java parameter	*/</comment>
<comment type="block">/* packing, even on 64-bit machines.  I.e. on 64-bit machines		*/</comment>
<comment type="block">/* longs and doubles are followed by an empty 64-bit word.		*/</comment>

<function_decl><type><name>void</name></type> <name>ffi_java_raw_call</name> <parameter_list>(<comment type="block">/*@dependent@*/</comment> <param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>, 
		        <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>()</parameter_list></function_decl></param>, 
		        <comment type="block">/*@out@*/</comment> <param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, 
		        <comment type="block">/*@dependent@*/</comment> <param><decl><type><name>ffi_raw</name> *</type><name>avalue</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ffi_java_ptrarray_to_raw</name> <parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>, <param><decl><type><name>void</name> **</type><name>args</name></decl></param>, <param><decl><type><name>ffi_raw</name> *</type><name>raw</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ffi_java_raw_to_ptrarray</name> <parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>, <param><decl><type><name>ffi_raw</name> *</type><name>raw</name></decl></param>, <param><decl><type><name>void</name> **</type><name>args</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>ffi_java_raw_size</name> <parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* ---- Definitions for closures ----------------------------------------- */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_CLOSURES</name></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>char</name></type> <name><name>tramp</name><index>[<expr><name>FFI_TRAMPOLINE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ffi_cif</name>   *</type><name>cif</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type>     (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>,<param><decl><type><name>void</name>**</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name>      *</type><name>user_data</name></decl>;</decl_stmt>
}</block></struct></type> <name>ffi_closure</name>;</typedef>

<function_decl><type><name>ffi_status</name></type>
<name>ffi_prep_closure</name> <parameter_list>(<param><decl><type><name>ffi_closure</name>*</type></decl></param>,
		  <param><decl><type><name>ffi_cif</name> *</type></decl></param>,
		  <param><function_decl><type><name>void</name></type> (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>,<param><decl><type><name>void</name>**</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list></function_decl></param>,
		  <param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>char</name></type> <name><name>tramp</name><index>[<expr><name>FFI_TRAMPOLINE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>ffi_cif</name>   *</type><name>cif</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>FFI_NATIVE_RAW_API</name></expr></cpp:if>

  <comment type="block">/* if this is enabled, then a raw closure has the same layout 
     as a regular closure.  We use this to install an intermediate 
     handler to do the transaltion, void** -&gt; ffi_raw*. */</comment>

  <function_decl><type><name>void</name></type>     (*<name>translate_args</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>,<param><decl><type><name>void</name>**</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name>      *</type><name>this_closure</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <function_decl><type><name>void</name></type>     (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>,<param><decl><type><name>ffi_raw</name>*</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name>      *</type><name>user_data</name></decl>;</decl_stmt>

}</block></struct></type> <name>ffi_raw_closure</name>;</typedef>

<function_decl><type><name>ffi_status</name></type>
<name>ffi_prep_raw_closure</name> <parameter_list>(<param><decl><type><name>ffi_raw_closure</name>*</type></decl></param>,
		      <param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>,
		      <param><function_decl><type><name>void</name></type> (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>,<param><decl><type><name>ffi_raw</name>*</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list></function_decl></param>,
		      <param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>ffi_status</name></type>
<name>ffi_prep_java_raw_closure</name> <parameter_list>(<param><decl><type><name>ffi_raw_closure</name>*</type></decl></param>,
		           <param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>,
		           <param><function_decl><type><name>void</name></type> (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>,<param><decl><type><name>ffi_raw</name>*</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list></function_decl></param>,
		           <param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FFI_CLOSURES */</comment>

<comment type="block">/* ---- Public interface definition -------------------------------------- */</comment>

<function_decl><type><name>ffi_status</name></type> <name>ffi_prep_cif</name><parameter_list>(<comment type="block">/*@out@*/</comment> <comment type="block">/*@partial@*/</comment> <param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>, 
			<param><decl><type><name>ffi_abi</name></type> <name>abi</name></decl></param>,
			<param><decl><type><name>unsigned</name> <name>int</name></type> <name>nargs</name></decl></param>, 
			<comment type="block">/*@dependent@*/</comment> <comment type="block">/*@out@*/</comment> <comment type="block">/*@partial@*/</comment> <param><decl><type><name>ffi_type</name> *</type><name>rtype</name></decl></param>, 
			<comment type="block">/*@dependent@*/</comment> <param><decl><type><name>ffi_type</name> **</type><name>atypes</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type>
<name>ffi_call</name><parameter_list>(<comment type="block">/*@dependent@*/</comment> <param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>, 
	 <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>()</parameter_list></function_decl></param>, 
	 <comment type="block">/*@out@*/</comment> <param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, 
	 <comment type="block">/*@dependent@*/</comment> <param><decl><type><name>void</name> **</type><name>avalue</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Useful for eliminating compiler warnings */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_FN</name><parameter_list>(<param><type><name>f</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((void (*)())f)</cpp:value></cpp:define>

<comment type="block">/* ---- Definitions shared with assembly code ---------------------------- */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* If these change, update src/mips/ffitarget.h. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_VOID</name></cpp:macro>       <cpp:value>0</cpp:value></cpp:define>    
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_INT</name></cpp:macro>        <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_FLOAT</name></cpp:macro>      <cpp:value>2</cpp:value></cpp:define>    
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_DOUBLE</name></cpp:macro>     <cpp:value>3</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>1</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_LONGDOUBLE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_LONGDOUBLE</name></cpp:macro> <cpp:value>FFI_TYPE_DOUBLE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_UINT8</name></cpp:macro>      <cpp:value>5</cpp:value></cpp:define>   
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_SINT8</name></cpp:macro>      <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_UINT16</name></cpp:macro>     <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_SINT16</name></cpp:macro>     <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_UINT32</name></cpp:macro>     <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_SINT32</name></cpp:macro>     <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_UINT64</name></cpp:macro>     <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_SINT64</name></cpp:macro>     <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_STRUCT</name></cpp:macro>     <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_POINTER</name></cpp:macro>    <cpp:value>14</cpp:value></cpp:define>

<comment type="block">/* This should always refer to the last type code (for sanity checks) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_LAST</name></cpp:macro>       <cpp:value>FFI_TYPE_POINTER</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
