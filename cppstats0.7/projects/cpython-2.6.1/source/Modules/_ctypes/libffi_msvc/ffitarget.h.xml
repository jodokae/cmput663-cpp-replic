<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_ctypes/libffi_msvc/ffitarget.h"><comment type="block">/* -----------------------------------------------------------------*-C-*-
   ffitarget.h - Copyright (c) 1996-2003  Red Hat, Inc.
   Target configuration macros for x86 and x86-64.

   Permission is hereby granted, free of charge, to any person obtaining
   a copy of this software and associated documentation files (the
   ``Software''), to deal in the Software without restriction, including
   without limitation the rights to use, copy, modify, merge, publish,
   distribute, sublicense, and/or sell copies of the Software, and to
   permit persons to whom the Software is furnished to do so, subject to
   the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
   IN NO EVENT SHALL CYGNUS SOLUTIONS BE LIABLE FOR ANY CLAIM, DAMAGES OR
   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   OTHER DEALINGS IN THE SOFTWARE.

   ----------------------------------------------------------------------- */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LIBFFI_TARGET_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBFFI_TARGET_H</name></cpp:macro></cpp:define>

<comment type="block">/* ---- System specific configurations ----------------------------------- */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>X86_64</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>X86_64</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X86</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* ---- Generic type definitions ----------------------------------------- */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LIBFFI_ASM</name></cpp:ifndef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN64</name></cpp:ifndef>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type>          <name>ffi_arg</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type>       <name>ffi_arg</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>signed</name> <name>long</name></type>            <name>ffi_sarg</name>;</typedef>

<typedef>typedef <type><enum>enum <name>ffi_abi</name> <block>{
  <decl><name>FFI_FIRST_ABI</name> <init>= <expr>0</expr></init></decl>,

  <comment type="block">/* ---- Intel x86 Win32 ---------- */</comment>
  <decl><name>FFI_SYSV</name></decl>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN64</name></cpp:ifndef>
  <decl><name>FFI_STDCALL</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="block">/* TODO: Add fastcall support for the sake of completeness */</comment>
  <decl><name>FFI_DEFAULT_ABI</name> <init>= <expr><name>FFI_SYSV</name></expr></init></decl>,

  <comment type="block">/* ---- Intel x86 and AMD x86-64 - */</comment>
<comment type="block">/* #if !defined(X86_WIN32) &amp;&amp; (defined(__i386__) || defined(__x86_64__)) */</comment>
<comment type="block">/*   FFI_SYSV, */</comment>
<comment type="block">/*   FFI_UNIX64,*/</comment>   <comment type="block">/* Unix variants all use the same ABI for x86-64  */</comment>
<comment type="block">/* #ifdef __i386__ */</comment>
<comment type="block">/*   FFI_DEFAULT_ABI = FFI_SYSV, */</comment>
<comment type="block">/* #else */</comment>
<comment type="block">/*   FFI_DEFAULT_ABI = FFI_UNIX64, */</comment>
<comment type="block">/* #endif */</comment>
<comment type="block">/* #endif */</comment>

  <decl><name>FFI_LAST_ABI</name> <init>= <expr><name>FFI_DEFAULT_ABI</name> + 1</expr></init></decl>
}</block></enum></type> <name>ffi_abi</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* ---- Definitions for closures ----------------------------------------- */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_CLOSURES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN64</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TRAMPOLINE_SIZE</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_NATIVE_RAW_API</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TRAMPOLINE_SIZE</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_NATIVE_RAW_API</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>	<comment type="block">/* x86 has native raw api support */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
