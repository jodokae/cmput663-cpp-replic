<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_ctypes/darwin/dlfcn_simple.c"><comment type="block">/*
Copyright (c) 2002 Peter O'Gorman &lt;ogorman@users.sourceforge.net&gt;

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/</comment>


<comment type="block">/* Just to prove that it isn't that hard to add Mac calls to your code :)
   This works with pretty much everything, including kde3 xemacs and the gimp,
   I'd guess that it'd work in at least 95% of cases, use this as your starting
   point, rather than the mess that is dlfcn.c, assuming that your code does not
   require ref counting or symbol lookups in dependent libraries
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach-o/dyld.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;AvailabilityMacros.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dlfcn.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CTYPES_DARWIN_DLFCN</name></cpp:ifdef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_STR_LEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MAC_OS_X_VERSION_10_3</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAC_OS_X_VERSION_10_3</name></cpp:macro> <cpp:value>1030</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MAC_OS_X_VERSION_MAX_ALLOWED</name> &gt;= <name>MAC_OS_X_VERSION_10_3</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DARWIN_HAS_DLOPEN</name></cpp:macro></cpp:define>
<function_decl><type><specifier>extern</specifier> <name>void</name> *</type> <name>dlopen</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>int</name></type> <name>mode</name></decl></param>)</parameter_list> __attribute__<parameter_list>(<param/></parameter_list>(weak_import</function_decl>))<empty_stmt>;</empty_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name> *</type> <name>dlsym</name><parameter_list>(<param><decl><type><name>void</name> *</type> <name>handle</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>symbol</name></decl></param>)</parameter_list> __attribute__<parameter_list>(<param/></parameter_list>(weak_import</function_decl>))<empty_stmt>;</empty_stmt>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> *</type> <name>dlerror</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> __attribute__<parameter_list>(<param/></parameter_list>(weak_import</function_decl>))<empty_stmt>;</empty_stmt>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlclose</name><parameter_list>(<param><decl><type><name>void</name> *</type> <name>handle</name></decl></param>)</parameter_list> __attribute__<parameter_list>(<param/></parameter_list>(weak_import</function_decl>))<empty_stmt>;</empty_stmt>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dladdr</name><parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>void</name> *</decl></param>, <param><decl><type><name>Dl_info</name> *</type></decl></param>)</parameter_list> __attribute__<parameter_list>(<param/></parameter_list>(weak_import</function_decl>))<empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MAC_OS_X_VERSION_MAX_ALLOWED &gt;= MAC_OS_X_VERSION_10_3 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DARWIN_HAS_DLOPEN</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlopen</name></cpp:macro> <cpp:value>darwin_dlopen</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlsym</name></cpp:macro> <cpp:value>darwin_dlsym</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlerror</name></cpp:macro> <cpp:value>darwin_dlerror</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlclose</name></cpp:macro> <cpp:value>darwin_dlclose</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dladdr</name></cpp:macro> <cpp:value>darwin_dladdr</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name> *</type> (*<name>ctypes_dlopen</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>int</name></type> <name>mode</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> *</type> (*<name>ctypes_dlsym</name>)<parameter_list>(<param><decl><type><name>void</name> *</type> <name>handle</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>symbol</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type> (*<name>ctypes_dlerror</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (*<name>ctypes_dlclose</name>)<parameter_list>(<param><decl><type><name>void</name> *</type> <name>handle</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (*<name>ctypes_dladdr</name>)<parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>void</name> *</decl></param>, <param><decl><type><name>Dl_info</name> *</type></decl></param>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MAC_OS_X_VERSION_MIN_REQUIRED</name> &lt; <name>MAC_OS_X_VERSION_10_3</name></expr></cpp:if>
<comment type="block">/* Mac OS X 10.3+ has dlopen, so strip all this dead code to avoid warnings */</comment>

<function_decl><type><specifier>static</specifier> <name>void</name> *</type><name>dlsymIntern</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>handle</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>symbol</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>error</name><parameter_list>(<param><decl><type><name>int</name></type> <name>setget</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set and get the error string for use by dlerror */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>error</name><parameter_list>(<param><decl><type><name>int</name></type> <name>setget</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>errstr</name><index>[<expr><name>ERR_STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>err_filled</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>setget</name> == 0</expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>errstr</name></expr></argument>, <argument><expr>"dlcompat: "</expr></argument>, <argument><expr><name>ERR_STR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>errstr</name> + 10</expr></argument>, <argument><expr><name>ERR_STR_LEN</name> - 10</expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>err_filled</name> = 1</expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> = <name>NULL</name></expr>;</expr_stmt>
	}</block></then>
	<else>else
	<block>{
		<if>if <condition>(<expr>!<name>err_filled</name></expr>)</condition><then>
			<expr_stmt><expr><name>retval</name> = <name>NULL</name></expr>;</expr_stmt></then>
		<else>else
			<expr_stmt><expr><name>retval</name> = <name>errstr</name></expr>;</expr_stmt></else></if>
		<expr_stmt><expr><name>err_filled</name> = 0</expr>;</expr_stmt>
	}</block></else></if>
	<return>return <expr><name>retval</name></expr>;</return>
}</block></function>

<comment type="block">/* darwin_dlopen */</comment>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>darwin_dlopen</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>int</name></type> <name>mode</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>void</name> *</type><name>module</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NSObjectFileImage</name></type> <name>ofi</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NSObjectFileImageReturnCode</name></type> <name>ofirc</name></decl>;</decl_stmt>

	<comment type="block">/* If we got no path, the app wants the global namespace, use -1 as the marker
	   in this case */</comment>
	<if>if <condition>(<expr>!<name>path</name></expr>)</condition><then>
		<return>return <expr>(<name>void</name> *)-1</expr>;</return></then></if>

	<comment type="block">/* Create the object file image, works for things linked with the -bundle arg to ld */</comment>
	<expr_stmt><expr><name>ofirc</name> = <call><name>NSCreateObjectFileImageFromFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>ofi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>ofirc</name></expr>)</condition>
	<block>{
		<case>case <expr><name>NSObjectFileImageSuccess</name></expr>:
			<comment type="block">/* It was okay, so use NSLinkModule to link in the image */</comment>
			<expr_stmt><expr><name>module</name> = <call><name>NSLinkModule</name><argument_list>(<argument><expr><name>ofi</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
								  <argument><expr><name>NSLINKMODULE_OPTION_RETURN_ON_ERROR</name>
								  | (<name>mode</name> &amp; <name>RTLD_GLOBAL</name>) ? 0 : <name>NSLINKMODULE_OPTION_PRIVATE</name>
								  | (<name>mode</name> &amp; <name>RTLD_LAZY</name>) ? 0 : <name>NSLINKMODULE_OPTION_BINDNOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>NSDestroyObjectFileImage</name><argument_list>(<argument><expr><name>ofi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>NSObjectFileImageInappropriateFile</name></expr>:
			<comment type="block">/* It may have been a dynamic library rather than a bundle, try to load it */</comment>
			<expr_stmt><expr><name>module</name> = (<name>void</name> *)<call><name>NSAddImage</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NSADDIMAGE_OPTION_RETURN_ON_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</case><default>default:
			<comment type="block">/* God knows what we got */</comment>
			<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"Can not open \"%s\""</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>0</expr>;</return>
	</default>}</block></switch>
	<if>if <condition>(<expr>!<name>module</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"Can not open \"%s\""</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<return>return <expr><name>module</name></expr>;</return>

}</block></function>

<comment type="block">/* dlsymIntern is used by dlsym to find the symbol */</comment>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>dlsymIntern</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>handle</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>symbol</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>NSSymbol</name></type> <name>nssym</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
	<comment type="block">/* If the handle is -1, if is the app global context */</comment>
	<if>if <condition>(<expr><name>handle</name> == (<name>void</name> *)-1</expr>)</condition><then>
	<block>{
		<comment type="block">/* Global context, use NSLookupAndBindSymbol */</comment>
		<if>if <condition>(<expr><call><name>NSIsSymbolNameDefined</name><argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>nssym</name> = <call><name>NSLookupAndBindSymbol</name><argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

	}</block></then>
	<comment type="block">/* Now see if the handle is a struch mach_header* or not, use NSLookupSymbol in image
	   for libraries, and NSLookupSymbolInModule for bundles */</comment>
	<else>else
	<block>{
		<comment type="block">/* Check for both possible magic numbers depending on x86/ppc byte order */</comment>
		<if>if <condition>(<expr>(((struct <name>mach_header</name> *)<name>handle</name>)-&gt;<name>magic</name> == <name>MH_MAGIC</name>) ||
			(((struct <name>mach_header</name> *)<name>handle</name>)-&gt;<name>magic</name> == <name>MH_CIGAM</name>)</expr>)</condition><then>
		<block>{
			<if>if <condition>(<expr><call><name>NSIsSymbolNameDefinedInImage</name><argument_list>(<argument><expr>(struct <name>mach_header</name> *)<name>handle</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>nssym</name> = <call><name>NSLookupSymbolInImage</name><argument_list>(<argument><expr>(struct <name>mach_header</name> *)<name>handle</name></expr></argument>,
											  <argument><expr><name>symbol</name></expr></argument>,
											  <argument><expr><name>NSLOOKUPSYMBOLINIMAGE_OPTION_BIND</name>
											  | <name>NSLOOKUPSYMBOLINIMAGE_OPTION_RETURN_ON_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>

		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name>nssym</name> = <call><name>NSLookupSymbolInModule</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></else></if>
	<if>if <condition>(<expr>!<name>nssym</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"Symbol \"%s\" Not found"</expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>NSAddressOfSymbol</name><argument_list>(<argument><expr><name>nssym</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>darwin_dlerror</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>error</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>(<name>char</name> *)<name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>darwin_dlclose</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>handle</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr>(((struct <name>mach_header</name> *)<name>handle</name>)-&gt;<name>magic</name> == <name>MH_MAGIC</name>) ||
		(((struct <name>mach_header</name> *)<name>handle</name>)-&gt;<name>magic</name> == <name>MH_CIGAM</name>)</expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"Can't remove dynamic libraries on darwin"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>0</expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr>!<call><name>NSUnLinkModule</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"unable to unlink module %s"</expr></argument>, <argument><expr><call><name>NSNameOfModule</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>1</expr>;</return>
	}</block></then></if>
	<return>return <expr>0</expr>;</return>
}</block></function>


<comment type="block">/* dlsym, prepend the underscore and call dlsymIntern */</comment>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>darwin_dlsym</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>handle</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>symbol</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>undersym</name><index>[<expr>257</expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* Saves calls to malloc(3) */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>sym_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> *</type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>malloc_sym</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>sym_len</name> &lt; 256</expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>undersym</name></expr></argument>, <argument><expr>256</expr></argument>, <argument><expr>"_%s"</expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>value</name> = <call><name>dlsymIntern</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>undersym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else>else
	<block>{
		<expr_stmt><expr><name>malloc_sym</name> = <call><name>malloc</name><argument_list>(<argument><expr><name>sym_len</name> + 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>malloc_sym</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>malloc_sym</name></expr></argument>, <argument><expr>"_%s"</expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>value</name> = <call><name>dlsymIntern</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>malloc_sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>malloc_sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"Unable to allocate memory"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></else></if>
	<return>return <expr><name>value</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>darwin_dladdr</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>handle</name></decl></param>, <param><decl><type><name>Dl_info</name> *</type><name>info</name></decl></param>)</parameter_list> <block>{
	<return>return <expr>0</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MAC_OS_X_VERSION_MIN_REQUIRED &lt; MAC_OS_X_VERSION_10_3 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__GNUC__</name> &lt; 4</expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> CALL_ON_LOAD ctypes_dlfcn_init</cpp:pragma>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>__attribute__</name> <argument_list>(<argument><expr>(<name>constructor</name>)</expr></argument>)</argument_list> <name>ctypes_dlfcn_init</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function><type><specifier>static</specifier>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>void</name></type> <name>ctypes_dlfcn_init</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>dlopen</name> != <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>ctypes_dlsym</name> = <name>dlsym</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ctypes_dlopen</name> = <name>dlopen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ctypes_dlerror</name> = <name>dlerror</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ctypes_dlclose</name> = <name>dlclose</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ctypes_dladdr</name> = <name>dladdr</name></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MAC_OS_X_VERSION_MIN_REQUIRED</name> &lt; <name>MAC_OS_X_VERSION_10_3</name></expr></cpp:if>
		<expr_stmt><expr><name>ctypes_dlsym</name> = <name>darwin_dlsym</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ctypes_dlopen</name> = <name>darwin_dlopen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ctypes_dlerror</name> = <name>darwin_dlerror</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ctypes_dlclose</name> = <name>darwin_dlclose</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ctypes_dladdr</name> = <name>darwin_dladdr</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MAC_OS_X_VERSION_MIN_REQUIRED &lt; MAC_OS_X_VERSION_10_3 */</comment>
	}</block></else></if>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CTYPES_DARWIN_DLFCN */</comment>
</unit>
