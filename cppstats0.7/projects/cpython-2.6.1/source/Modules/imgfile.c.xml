<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/imgfile.c">
<comment type="block">/* IMGFILE module - Interface to sgi libimage */</comment>

<comment type="block">/* XXX This module should be done better at some point. It should return
** an object of image file class, and have routines to manipulate these
** image files in a neater way (so you can get rgb images off a greyscale
** file, for instance, or do a straight display without having to get the
** image bits into python, etc).
**
** Warning: this module is very non-reentrant (esp. the readscaled stuff)
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gl/image.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"/usr/people/4Dgifts/iristools/include/izoom.h"</cpp:file></cpp:include>

<comment type="block">/* Bunch of missing extern decls; keep gcc -Wall happy... */</comment>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>i_seterror</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>iclose</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>filterzoom</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>putrow</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>getrow</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type> <name>ImgfileError</name></decl>;</decl_stmt> <comment type="block">/* Exception we raise for various trouble */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>top_to_bottom</name></decl>;</decl_stmt>	<comment type="block">/* True if we want top-to-bottom images */</comment>

<comment type="block">/* The image library does not always call the error hander :-(,
   therefore we have a global variable indicating that it was called.
   It is cleared by imgfile_open(). */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>error_called</name></decl>;</decl_stmt>


<comment type="block">/* The error handler */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>imgfile_error</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImgfileError</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>error_called</name> = 1</expr>;</expr_stmt>
	<return>return;</return>	<comment type="block">/* To imglib, which will return a failure indicator */</comment>
}</block></function>


<comment type="block">/* Open an image file and return a pointer to it.
   Make sure we raise an exception if we fail. */</comment>

<function><type><specifier>static</specifier> <name>IMAGE</name> *</type>
<name>imgfile_open</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>fname</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>IMAGE</name> *</type><name>image</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>i_seterror</name><argument_list>(<argument><expr><name>imgfile_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>error_called</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
	<if>if <condition>( <expr>(<name>image</name> = <call><name>iopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr>"r"</expr></argument>)</argument_list></call>) == <name>NULL</name></expr> )</condition><then> <block>{
		<comment type="block">/* Error may already be set by imgfile_error */</comment>
		<if>if <condition>( <expr>!<name>error_called</name></expr> )</condition><then> <block>{
			<if>if <condition>(<expr><name>errno</name></expr>)</condition><then>
				<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>ImgfileError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else>else
				<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImgfileError</name></expr></argument>,
						<argument><expr>"Can't open image file"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
		}</block></then></if>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><name>image</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>imgfile_ttob</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>newval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
    
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:ttob"</expr></argument>, <argument><expr>&amp;<name>newval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>rv</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>top_to_bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>top_to_bottom</name> = <name>newval</name></expr>;</expr_stmt>
	<return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>imgfile_read</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>fname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>xsize</name></decl>, <decl><type ref="prev"/><name>ysize</name></decl>, <decl><type ref="prev"/><name>zsize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>cdatap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> *</type><name>idatap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>short</name></type> <name><name>rs</name><index>[<expr>8192</expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>gs</name><index>[<expr>8192</expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>bs</name><index>[<expr>8192</expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IMAGE</name> *</type><name>image</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>yfirst</name></decl>, <decl><type ref="prev"/><name>ylast</name></decl>, <decl><type ref="prev"/><name>ystep</name></decl>;</decl_stmt>

	<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s:read"</expr></argument>, <argument><expr>&amp;<name>fname</name></expr></argument>)</argument_list></call></expr> )</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
    
	<if>if <condition>( <expr>(<name>image</name> = <call><name>imgfile_open</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr> )</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
    
	<if>if <condition>( <expr><name><name>image</name>-&gt;<name>colormap</name></name> != <name>CM_NORMAL</name></expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>iclose</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImgfileError</name></expr></argument>,
				<argument><expr>"Can only handle CM_NORMAL images"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<if>if <condition>( <expr><call><name>BPP</name><argument_list>(<argument><expr><name><name>image</name>-&gt;<name>type</name></name></expr></argument>)</argument_list></call> != 1</expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>iclose</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImgfileError</name></expr></argument>,
				<argument><expr>"Can't handle imgfiles with bpp!=1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>xsize</name> = <name><name>image</name>-&gt;<name>xsize</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ysize</name> = <name><name>image</name>-&gt;<name>ysize</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>zsize</name> = <name><name>image</name>-&gt;<name>zsize</name></name></expr>;</expr_stmt>
	<if>if <condition>( <expr><name>zsize</name> != 1 &amp;&amp; <name>zsize</name> != 3</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>iclose</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImgfileError</name></expr></argument>,
				<argument><expr>"Can only handle 1 or 3 byte pixels"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<if>if <condition>( <expr><name>xsize</name> &gt; 8192</expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>iclose</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImgfileError</name></expr></argument>,
				<argument><expr>"Can't handle image with &gt; 8192 columns"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<if>if <condition>( <expr><name>zsize</name> == 3</expr> )</condition><then> <expr_stmt><expr><name>zsize</name> = 4</expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name>rv</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)<name>NULL</name></expr></argument>, <argument><expr><name>xsize</name>*<name>ysize</name>*<name>zsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>( <expr><name>rv</name> == <name>NULL</name></expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>iclose</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>cdatap</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>idatap</name> = (<name>long</name> *)<name>cdatap</name></expr>;</expr_stmt>

	<if>if <condition>(<expr><name>top_to_bottom</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>yfirst</name> = <name>ysize</name>-1</expr>;</expr_stmt>
		<expr_stmt><expr><name>ylast</name> = -1</expr>;</expr_stmt>
		<expr_stmt><expr><name>ystep</name> = -1</expr>;</expr_stmt>
	}</block></then> <else>else <block>{
		<expr_stmt><expr><name>yfirst</name> = 0</expr>;</expr_stmt>
		<expr_stmt><expr><name>ylast</name> = <name>ysize</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ystep</name> = 1</expr>;</expr_stmt>
	}</block></else></if>
	<for>for ( <init><expr><name>y</name>=<name>yfirst</name></expr>;</init> <condition><expr><name>y</name> != <name>ylast</name> &amp;&amp; !<name>error_called</name></expr>;</condition> <incr><expr><name>y</name> += <name>ystep</name></expr></incr> ) <block>{
		<if>if <condition>( <expr><name>zsize</name> == 1</expr> )</condition><then> <block>{
			<expr_stmt><expr><call><name>getrow</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for(<init><expr><name>x</name>=0</expr>;</init> <condition><expr><name>x</name>&lt;<name>xsize</name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr> )
				<expr_stmt><expr>*<name>cdatap</name>++ = <name><name>rs</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></for>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name>getrow</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>getrow</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>gs</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>getrow</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for(<init><expr><name>x</name>=0</expr>;</init> <condition><expr><name>x</name>&lt;<name>xsize</name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr> )
				<expr_stmt><expr>*<name>idatap</name>++ = (<name><name>rs</name><index>[<expr><name>x</name></expr>]</index></name> &amp; 0xff)  |
					((<name><name>gs</name><index>[<expr><name>x</name></expr>]</index></name> &amp; 0xff)&lt;&lt;8) |
					((<name><name>bs</name><index>[<expr><name>x</name></expr>]</index></name> &amp; 0xff)&lt;&lt;16)</expr>;</expr_stmt></for>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><call><name>iclose</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>( <expr><name>error_called</name></expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>IMAGE</name> *</type><name>glob_image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name> *</type><name>glob_datap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>glob_width</name></decl>, <decl><type ref="prev"/><name>glob_z</name></decl>, <decl><type ref="prev"/><name>glob_ysize</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xs_get</name><parameter_list>(<param><decl><type><name>short</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>top_to_bottom</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>getrow</name><argument_list>(<argument><expr><name>glob_image</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>(<name>glob_ysize</name>-1-<name>y</name>)</expr></argument>, <argument><expr><name>glob_z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else>else
		<expr_stmt><expr><call><name>getrow</name><argument_list>(<argument><expr><name>glob_image</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>glob_z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xs_put_c</name><parameter_list>(<param><decl><type><name>short</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>datap</name> <init>= <expr>(<name>char</name> *)<name>glob_datap</name> + <name>y</name>*<name>glob_width</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name>glob_width</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>( <expr><name>width</name>--</expr> )</condition>
		<expr_stmt><expr>*<name>datap</name>++ = (*<name>buf</name>++) &amp; 0xff</expr>;</expr_stmt></while>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xs_put_0</name><parameter_list>(<param><decl><type><name>short</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name> *</type><name>datap</name> <init>= <expr><name>glob_datap</name> + <name>y</name>*<name>glob_width</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name>glob_width</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>( <expr><name>width</name>--</expr> )</condition>
		<expr_stmt><expr>*<name>datap</name>++ = (*<name>buf</name>++) &amp; 0xff</expr>;</expr_stmt></while>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>xs_put_12</name><parameter_list>(<param><decl><type><name>short</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name> *</type><name>datap</name> <init>= <expr><name>glob_datap</name> + <name>y</name>*<name>glob_width</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name>glob_width</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>( <expr><name>width</name>--</expr> )</condition>
		<expr_stmt><expr>*<name>datap</name>++ |= ((*<name>buf</name>++) &amp; 0xff) &lt;&lt; (<name>glob_z</name>*8)</expr>;</expr_stmt></while>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xscale</name><parameter_list>(<param><decl><type><name>IMAGE</name> *</type><name>image</name></decl></param>, <param><decl><type><name>int</name></type> <name>xsize</name></decl></param>, <param><decl><type><name>int</name></type> <name>ysize</name></decl></param>, <param><decl><type><name>int</name></type> <name>zsize</name></decl></param>,
       <param><decl><type><name>long</name> *</type><name>datap</name></decl></param>, <param><decl><type><name>int</name></type> <name>xnew</name></decl></param>, <param><decl><type><name>int</name></type> <name>ynew</name></decl></param>, <param><decl><type><name>int</name></type> <name>fmode</name></decl></param>, <param><decl><type><name>double</name></type> <name>blur</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><name>glob_image</name> = <name>image</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>glob_datap</name> = <name>datap</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>glob_width</name> = <name>xnew</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>glob_ysize</name> = <name>ysize</name></expr>;</expr_stmt>
	<if>if <condition>( <expr><name>zsize</name> == 1</expr> )</condition><then> <block>{
		<expr_stmt><expr><name>glob_z</name> = 0</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>filterzoom</name><argument_list>(<argument><expr><name>xs_get</name></expr></argument>, <argument><expr><name>xs_put_c</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>ysize</name></expr></argument>,
			   <argument><expr><name>xnew</name></expr></argument>, <argument><expr><name>ynew</name></expr></argument>, <argument><expr><name>fmode</name></expr></argument>, <argument><expr><name>blur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
		<expr_stmt><expr><name>glob_z</name> = 0</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>filterzoom</name><argument_list>(<argument><expr><name>xs_get</name></expr></argument>, <argument><expr><name>xs_put_0</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>ysize</name></expr></argument>,
			   <argument><expr><name>xnew</name></expr></argument>, <argument><expr><name>ynew</name></expr></argument>, <argument><expr><name>fmode</name></expr></argument>, <argument><expr><name>blur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>glob_z</name> = 1</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>filterzoom</name><argument_list>(<argument><expr><name>xs_get</name></expr></argument>, <argument><expr><name>xs_put_12</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>ysize</name></expr></argument>,
			   <argument><expr><name>xnew</name></expr></argument>, <argument><expr><name>ynew</name></expr></argument>, <argument><expr><name>fmode</name></expr></argument>, <argument><expr><name>blur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>glob_z</name> = 2</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>filterzoom</name><argument_list>(<argument><expr><name>xs_get</name></expr></argument>, <argument><expr><name>xs_put_12</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>ysize</name></expr></argument>,
			   <argument><expr><name>xnew</name></expr></argument>, <argument><expr><name>ynew</name></expr></argument>, <argument><expr><name>fmode</name></expr></argument>, <argument><expr><name>blur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>imgfile_readscaled</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>fname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>xsize</name></decl>, <decl><type ref="prev"/><name>ysize</name></decl>, <decl><type ref="prev"/><name>zsize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>cdatap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> *</type><name>idatap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>short</name></type> <name><name>rs</name><index>[<expr>8192</expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>gs</name><index>[<expr>8192</expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>bs</name><index>[<expr>8192</expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>xwtd</name></decl>, <decl><type ref="prev"/><name>ywtd</name></decl>, <decl><type ref="prev"/><name>xorig</name></decl>, <decl><type ref="prev"/><name>yorig</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>xfac</name></decl>, <decl><type ref="prev"/><name>yfac</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IMAGE</name> *</type><name>image</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>filter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>blur</name> <init>= <expr>1.0</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>extended</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fmode</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>yfirst</name></decl>, <decl><type ref="prev"/><name>ylast</name></decl>, <decl><type ref="prev"/><name>ystep</name></decl>;</decl_stmt>

	<comment type="block">/*
	** Parse args. Funny, since arg 4 and 5 are optional
	** (filter name and blur factor). Also, 4 or 5 arguments indicates
	** extended scale algorithm in stead of simple-minded pixel drop/dup.
	*/</comment>
	<expr_stmt><expr><name>extended</name> = <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> &gt;= 4</expr>;</expr_stmt>
	<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"sii|sd"</expr></argument>,
			       <argument><expr>&amp;<name>fname</name></expr></argument>, <argument><expr>&amp;<name>xwtd</name></expr></argument>, <argument><expr>&amp;<name>ywtd</name></expr></argument>, <argument><expr>&amp;<name>filter</name></expr></argument>, <argument><expr>&amp;<name>blur</name></expr></argument>)</argument_list></call></expr> )</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<comment type="block">/*
	** Check parameters, open file and check type, rows, etc.
	*/</comment>
	<if>if <condition>( <expr><name>extended</name></expr> )</condition><then> <block>{
		<if>if <condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr>"impulse"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then>
			<expr_stmt><expr><name>fmode</name> = <name>IMPULSE</name></expr>;</expr_stmt></then>
		<else>else <if>if <condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>filter</name></expr></argument>, <argument><expr>"box"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then>
			<expr_stmt><expr><name>fmode</name> = <name>BOX</name></expr>;</expr_stmt></then>
		<else>else <if>if <condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>filter</name></expr></argument>, <argument><expr>"triangle"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then>
			<expr_stmt><expr><name>fmode</name> = <name>TRIANGLE</name></expr>;</expr_stmt></then>
		<else>else <if>if <condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>filter</name></expr></argument>, <argument><expr>"quadratic"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then>
			<expr_stmt><expr><name>fmode</name> = <name>QUADRATIC</name></expr>;</expr_stmt></then>
		<else>else <if>if <condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>filter</name></expr></argument>, <argument><expr>"gaussian"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then>
			<expr_stmt><expr><name>fmode</name> = <name>GAUSSIAN</name></expr>;</expr_stmt></then>
		<else>else <block>{
			<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImgfileError</name></expr></argument>, <argument><expr>"Unknown filter type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		}</block></else></if></else></if></else></if></else></if></else></if>
	}</block></then></if>
    
	<if>if <condition>( <expr>(<name>image</name> = <call><name>imgfile_open</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr> )</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
    
	<if>if <condition>( <expr><name><name>image</name>-&gt;<name>colormap</name></name> != <name>CM_NORMAL</name></expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>iclose</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImgfileError</name></expr></argument>,
				<argument><expr>"Can only handle CM_NORMAL images"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<if>if <condition>( <expr><call><name>BPP</name><argument_list>(<argument><expr><name><name>image</name>-&gt;<name>type</name></name></expr></argument>)</argument_list></call> != 1</expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>iclose</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImgfileError</name></expr></argument>,
				<argument><expr>"Can't handle imgfiles with bpp!=1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>xsize</name> = <name><name>image</name>-&gt;<name>xsize</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ysize</name> = <name><name>image</name>-&gt;<name>ysize</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>zsize</name> = <name><name>image</name>-&gt;<name>zsize</name></name></expr>;</expr_stmt>
	<if>if <condition>( <expr><name>zsize</name> != 1 &amp;&amp; <name>zsize</name> != 3</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>iclose</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImgfileError</name></expr></argument>,
				<argument><expr>"Can only handle 1 or 3 byte pixels"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<if>if <condition>( <expr><name>xsize</name> &gt; 8192</expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>iclose</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImgfileError</name></expr></argument>,
				<argument><expr>"Can't handle image with &gt; 8192 columns"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<if>if <condition>( <expr><name>zsize</name> == 3</expr> )</condition><then> <expr_stmt><expr><name>zsize</name> = 4</expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name>rv</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>xwtd</name>*<name>ywtd</name>*<name>zsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>( <expr><name>rv</name> == <name>NULL</name></expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>iclose</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<macro><name>PyFPE_START_PROTECT</name><argument_list>(<argument>"readscaled"</argument>, <argument>return 0</argument>)</argument_list></macro>
	<expr_stmt><expr><name>xfac</name> = (<name>float</name>)<name>xsize</name>/(<name>float</name>)<name>xwtd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>yfac</name> = (<name>float</name>)<name>ysize</name>/(<name>float</name>)<name>ywtd</name></expr>;</expr_stmt>
	<macro><name>PyFPE_END_PROTECT</name><argument_list>(<argument>yfac</argument>)</argument_list></macro>
	<expr_stmt><expr><name>cdatap</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>idatap</name> = (<name>long</name> *)<name>cdatap</name></expr>;</expr_stmt>

	<if>if <condition>( <expr><name>extended</name></expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>xscale</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>ysize</name></expr></argument>, <argument><expr><name>zsize</name></expr></argument>,
		       <argument><expr><name>idatap</name></expr></argument>, <argument><expr><name>xwtd</name></expr></argument>, <argument><expr><name>ywtd</name></expr></argument>, <argument><expr><name>fmode</name></expr></argument>, <argument><expr><name>blur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
		<if>if <condition>(<expr><name>top_to_bottom</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>yfirst</name> = <name>ywtd</name>-1</expr>;</expr_stmt>
			<expr_stmt><expr><name>ylast</name> = -1</expr>;</expr_stmt>
			<expr_stmt><expr><name>ystep</name> = -1</expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name>yfirst</name> = 0</expr>;</expr_stmt>
			<expr_stmt><expr><name>ylast</name> = <name>ywtd</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ystep</name> = 1</expr>;</expr_stmt>
		}</block></else></if>
		<for>for ( <init><expr><name>y</name>=<name>yfirst</name></expr>;</init> <condition><expr><name>y</name> != <name>ylast</name> &amp;&amp; !<name>error_called</name></expr>;</condition> <incr><expr><name>y</name> += <name>ystep</name></expr></incr> ) <block>{
			<expr_stmt><expr><name>yorig</name> = <call>(<name>int</name>)<argument_list>(<argument><expr><name>y</name>*<name>yfac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>( <expr><name>zsize</name> == 1</expr> )</condition><then> <block>{
				<expr_stmt><expr><call><name>getrow</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>yorig</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for(<init><expr><name>x</name>=0</expr>;</init> <condition><expr><name>x</name>&lt;<name>xwtd</name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr> ) <block>{
					<expr_stmt><expr>*<name>cdatap</name>++ = <name><name>rs</name><index>[<expr><call>(<name>int</name>)<argument_list>(<argument><expr><name>x</name>*<name>xfac</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>	
				}</block></for>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name>getrow</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>yorig</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>getrow</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>gs</name></expr></argument>, <argument><expr><name>yorig</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>getrow</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>yorig</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for(<init><expr><name>x</name>=0</expr>;</init> <condition><expr><name>x</name>&lt;<name>xwtd</name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr> ) <block>{
					<expr_stmt><expr><name>xorig</name> = <call>(<name>int</name>)<argument_list>(<argument><expr><name>x</name>*<name>xfac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr>*<name>idatap</name>++ = (<name><name>rs</name><index>[<expr><name>xorig</name></expr>]</index></name> &amp; 0xff)  |
						((<name><name>gs</name><index>[<expr><name>xorig</name></expr>]</index></name> &amp; 0xff)&lt;&lt;8) |
						((<name><name>bs</name><index>[<expr><name>xorig</name></expr>]</index></name> &amp; 0xff)&lt;&lt;16)</expr>;</expr_stmt>
				}</block></for>
			}</block></else></if>
		}</block></for>
	}</block></else></if>
	<expr_stmt><expr><call><name>iclose</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>( <expr><name>error_called</name></expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>imgfile_getsizes</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>fname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IMAGE</name> *</type><name>image</name></decl>;</decl_stmt>
    
	<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s:getsizes"</expr></argument>, <argument><expr>&amp;<name>fname</name></expr></argument>)</argument_list></call></expr> )</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
    
	<if>if <condition>( <expr>(<name>image</name> = <call><name>imgfile_open</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr> )</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>rv</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(iii)"</expr></argument>, <argument><expr><name><name>image</name>-&gt;<name>xsize</name></name></expr></argument>, <argument><expr><name><name>image</name>-&gt;<name>ysize</name></name></expr></argument>, <argument><expr><name><name>image</name>-&gt;<name>zsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>iclose</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>imgfile_write</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>IMAGE</name> *</type><name>image</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>fname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>xsize</name></decl>, <decl><type ref="prev"/><name>ysize</name></decl>, <decl><type ref="prev"/><name>zsize</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>cdatap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> *</type><name>idatap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name><name>rs</name><index>[<expr>8192</expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>gs</name><index>[<expr>8192</expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>bs</name><index>[<expr>8192</expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>rgb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>yfirst</name></decl>, <decl><type ref="prev"/><name>ylast</name></decl>, <decl><type ref="prev"/><name>ystep</name></decl>;</decl_stmt>


	<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"ss#iii:write"</expr></argument>,
			  <argument><expr>&amp;<name>fname</name></expr></argument>, <argument><expr>&amp;<name>cdatap</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>xsize</name></expr></argument>, <argument><expr>&amp;<name>ysize</name></expr></argument>, <argument><expr>&amp;<name>zsize</name></expr></argument>)</argument_list></call></expr> )</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
    
	<if>if <condition>( <expr><name>zsize</name> != 1 &amp;&amp; <name>zsize</name> != 3</expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImgfileError</name></expr></argument>,
				<argument><expr>"Can only handle 1 or 3 byte pixels"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<if>if <condition>( <expr><name>len</name> != <name>xsize</name> * <call><name>ysize</name> * <argument_list>(<argument><expr><name>zsize</name> == 1 ? 1 : 4</expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImgfileError</name></expr></argument>, <argument><expr>"Data does not match sizes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<if>if <condition>( <expr><name>xsize</name> &gt; 8192</expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImgfileError</name></expr></argument>,
				<argument><expr>"Can't handle image with &gt; 8192 columns"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><name>error_called</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name>image</name> =<call><name>iopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr>"w"</expr></argument>, <argument><expr><call><name>RLE</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>ysize</name></expr></argument>, <argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>( <expr><name>image</name> == 0</expr> )</condition><then> <block>{
		<if>if <condition>( <expr>! <name>error_called</name></expr> )</condition><then> <block>{
			<if>if <condition>(<expr><name>errno</name></expr>)</condition><then>
				<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>ImgfileError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else>else
				<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImgfileError</name></expr></argument>,
						<argument><expr>"Can't create image file"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
		}</block></then></if>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><name>idatap</name> = (<name>long</name> *)<name>cdatap</name></expr>;</expr_stmt>
    
	<if>if <condition>(<expr><name>top_to_bottom</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>yfirst</name> = <name>ysize</name>-1</expr>;</expr_stmt>
		<expr_stmt><expr><name>ylast</name> = -1</expr>;</expr_stmt>
		<expr_stmt><expr><name>ystep</name> = -1</expr>;</expr_stmt>
	}</block></then> <else>else <block>{
		<expr_stmt><expr><name>yfirst</name> = 0</expr>;</expr_stmt>
		<expr_stmt><expr><name>ylast</name> = <name>ysize</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ystep</name> = 1</expr>;</expr_stmt>
	}</block></else></if>
	<for>for ( <init><expr><name>y</name>=<name>yfirst</name></expr>;</init> <condition><expr><name>y</name> != <name>ylast</name> &amp;&amp; !<name>error_called</name></expr>;</condition> <incr><expr><name>y</name> += <name>ystep</name></expr></incr> ) <block>{
		<if>if <condition>( <expr><name>zsize</name> == 1</expr> )</condition><then> <block>{
			<for>for( <init><expr><name>x</name>=0</expr>;</init> <condition><expr><name>x</name>&lt;<name>xsize</name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr> )
				<expr_stmt><expr><name><name>rs</name><index>[<expr><name>x</name></expr>]</index></name> = *<name>cdatap</name>++</expr>;</expr_stmt></for>
			<expr_stmt><expr><call><name>putrow</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<for>for( <init><expr><name>x</name>=0</expr>;</init> <condition><expr><name>x</name>&lt;<name>xsize</name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr> ) <block>{
				<expr_stmt><expr><name>rgb</name> = *<name>idatap</name>++</expr>;</expr_stmt>
				<expr_stmt><expr><name>r</name> = <name>rgb</name> &amp; 0xff</expr>;</expr_stmt>
				<expr_stmt><expr><name>g</name> = (<name>rgb</name> &gt;&gt; 8 ) &amp; 0xff</expr>;</expr_stmt>
				<expr_stmt><expr><name>b</name> = (<name>rgb</name> &gt;&gt; 16 ) &amp; 0xff</expr>;</expr_stmt>
				<expr_stmt><expr><name><name>rs</name><index>[<expr><name>x</name></expr>]</index></name> = <name>r</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>gs</name><index>[<expr><name>x</name></expr>]</index></name> = <name>g</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>bs</name><index>[<expr><name>x</name></expr>]</index></name> = <name>b</name></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><call><name>putrow</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>putrow</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>gs</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>putrow</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><call><name>iclose</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>( <expr><name>error_called</name></expr> )</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
    
}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>imgfile_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr>"getsizes"</expr>,	<expr><name>imgfile_getsizes</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
	<expr><block>{ <expr>"read"</expr>,	<expr><name>imgfile_read</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
	<expr><block>{ <expr>"readscaled"</expr>,	<expr><name>imgfile_readscaled</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{ <expr>"write"</expr>,	<expr><name>imgfile_write</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
	<expr><block>{ <expr>"ttob"</expr>,	<expr><name>imgfile_ttob</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr> }</block></expr> <comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>


<function><type><name>void</name></type>
<name>initimgfile</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"the imgfile module has been removed in "
	                   "Python 3.0"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
	    <return>return;</return></then></if>
	
	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"imgfile"</expr></argument>, <argument><expr><name>imgfile_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ImgfileError</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"imgfile.error"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>ImgfileError</name> != <name>NULL</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"error"</expr></argument>, <argument><expr><name>ImgfileError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>



</unit>
