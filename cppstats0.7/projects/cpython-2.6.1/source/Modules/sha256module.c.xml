<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/sha256module.c"><comment type="block">/* SHA256 module */</comment>

<comment type="block">/* This module provides an interface to NIST's SHA-256 and SHA-224 Algorithms */</comment>

<comment type="block">/* See below for information about the original code this module was
   based upon. Additional work performed by:

   Andrew Kuchling (amk@amk.ca)
   Greg Stein (gstein@lyra.org)
   Trevor Perrin (trevp@trevp.net)

   Copyright (C) 2005   Gregory P. Smith (greg@krypto.org)
   Licensed to PSF under a Contributor Agreement.

*/</comment>

<comment type="block">/* SHA objects */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>


<comment type="block">/* Endianness testing and definitions */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TestEndianness</name><parameter_list>(<param><type><name>variable</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{int i=1; variable=PCT_BIG_ENDIAN;\
	if (*((char*)&amp;i)==1) variable=PCT_LITTLE_ENDIAN;}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCT_LITTLE_ENDIAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCT_BIG_ENDIAN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<comment type="block">/* Some useful types */</comment>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>SHA_BYTE</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_INT</name> == 4</expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>SHA_INT32</name>;</typedef>	<comment type="block">/* 32-bit integer */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/* not defined. compilation will die. */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* The SHA block size and message digest sizes, in bytes */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA_BLOCKSIZE</name></cpp:macro>    <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA_DIGESTSIZE</name></cpp:macro>  <cpp:value>32</cpp:value></cpp:define>

<comment type="block">/* The structure for storing SHA info */</comment>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>
    <name>SHA_INT32</name></type> <name><name>digest</name><index>[<expr>8</expr>]</index></name></decl>;</decl_stmt>		<comment type="block">/* Message digest */</comment>
    <decl_stmt><decl><type><name>SHA_INT32</name></type> <name>count_lo</name></decl>, <name>count_hi</name>;</decl_stmt>	<comment type="block">/* 64-bit bit count */</comment>
    <decl_stmt><decl><type><name>SHA_BYTE</name></type> <name><name>data</name><index>[<expr><name>SHA_BLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* SHA data buffer */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>Endianness</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>local</name></decl>;</decl_stmt>				<comment type="block">/* unprocessed amount in data */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>digestsize</name></decl>;</decl_stmt>
}</block></struct></type> <name>SHAobject</name>;</typedef>

<comment type="block">/* When run on a little-endian CPU we need to perform byte reversal on an
   array of longwords. */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>longReverse</name><parameter_list>(<param><decl><type><name>SHA_INT32</name> *</type><name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>byteCount</name></decl></param>, <param><decl><type><name>int</name></type> <name>Endianness</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>SHA_INT32</name></type> <name>value</name></decl>;</decl_stmt>

    <if>if <condition>( <expr><name>Endianness</name> == <name>PCT_BIG_ENDIAN</name></expr> )</condition><then>
	<return>return;</return></then></if>

    <expr_stmt><expr><name>byteCount</name> /= <sizeof>sizeof<argument_list>(<argument><expr>*<name>buffer</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>byteCount</name>--</expr>)</condition> <block>{
        <expr_stmt><expr><name>value</name> = *<name>buffer</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> = ( ( <name>value</name> &amp; 0xFF00FF00L ) &gt;&gt; 8  ) | \
                ( ( <name>value</name> &amp; 0x00FF00FFL ) &lt;&lt; 8 )</expr>;</expr_stmt>
        <expr_stmt><expr>*<name>buffer</name>++ = ( <name>value</name> &lt;&lt; 16 ) | ( <name>value</name> &gt;&gt; 16 )</expr>;</expr_stmt>
    }</block></while>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHAcopy</name><parameter_list>(<param><decl><type><name>SHAobject</name> *</type><name>src</name></decl></param>, <param><decl><type><name>SHAobject</name> *</type><name>dest</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>dest</name>-&gt;<name>Endianness</name></name> = <name><name>src</name>-&gt;<name>Endianness</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dest</name>-&gt;<name>local</name></name> = <name><name>src</name>-&gt;<name>local</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dest</name>-&gt;<name>digestsize</name></name> = <name><name>src</name>-&gt;<name>digestsize</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dest</name>-&gt;<name>count_lo</name></name> = <name><name>src</name>-&gt;<name>count_lo</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dest</name>-&gt;<name>count_hi</name></name> = <name><name>src</name>-&gt;<name>count_hi</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dest</name>-&gt;<name>digest</name></name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>digest</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>src</name>-&gt;<name>digest</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dest</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>src</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="block">/* ------------------------------------------------------------------------
 *
 * This code for the SHA-256 algorithm was noted as public domain. The
 * original headers are pasted below.
 *
 * Several changes have been made to make it more compatible with the
 * Python environment and desired interface.
 *
 */</comment>

<comment type="block">/* LibTomCrypt, modular cryptographic library -- Tom St Denis
 *
 * LibTomCrypt is a library that provides various cryptographic
 * algorithms in a highly modular and flexible manner.
 *
 * The library is free for all purposes without any express
 * gurantee it works.
 *
 * Tom St Denis, tomstdenis@iahu.ca, http://libtomcrypt.org
 */</comment>


<comment type="block">/* SHA256 by Tom St Denis */</comment>

<comment type="block">/* Various logical functions */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROR</name><parameter_list>(<param><type><name>x</name></type></param>, <param><type><name>y</name></type></param>)</parameter_list></cpp:macro>\
<cpp:value>( ((((unsigned long)(x)&amp;0xFFFFFFFFUL)&gt;&gt;(unsigned long)((y)&amp;31)) | \
((unsigned long)(x)&lt;&lt;(unsigned long)(32-((y)&amp;31)))) &amp; 0xFFFFFFFFUL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ch</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>y</name></type></param>,<param><type><name>z</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>(z ^ (x &amp; (y ^ z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Maj</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>y</name></type></param>,<param><type><name>z</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>(((x | y) &amp; z) | (x &amp; y))</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name><parameter_list>(<param><type><name>x</name></type></param>, <param><type><name>n</name></type></param>)</parameter_list></cpp:macro>         <cpp:value>ROR((x),(n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name><parameter_list>(<param><type><name>x</name></type></param>, <param><type><name>n</name></type></param>)</parameter_list></cpp:macro>         <cpp:value>(((x)&amp;0xFFFFFFFFUL)&gt;&gt;(n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sigma0</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>(S(x, 2) ^ S(x, 13) ^ S(x, 22))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sigma1</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>(S(x, 6) ^ S(x, 11) ^ S(x, 25))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Gamma0</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>(S(x, 7) ^ S(x, 18) ^ R(x, 3))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Gamma1</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>(S(x, 17) ^ S(x, 19) ^ R(x, 10))</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>sha_transform</name><parameter_list>(<param><decl><type><name>SHAobject</name> *</type><name>sha_info</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SHA_INT32</name></type> <name><name>S</name><index>[<expr>8</expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>W</name><index>[<expr>64</expr>]</index></name></decl>, <decl><type ref="prev"/><name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>W</name></expr></argument>, <argument><expr><name><name>sha_info</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sha_info</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>longReverse</name><argument_list>(<argument><expr><name>W</name></expr></argument>, <argument><expr>(<name>int</name>)<sizeof>sizeof<argument_list>(<argument><expr><name><name>sha_info</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>sha_info</name>-&gt;<name>Endianness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = 16</expr>;</init> <condition><expr><name>i</name> &lt; 64</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
		<expr_stmt><expr><name><name>W</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>Gamma1</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><name>i</name> - 2</expr>]</index></name></expr></argument>)</argument_list></call> + <name><name>W</name><index>[<expr><name>i</name> - 7</expr>]</index></name> + <call><name>Gamma0</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><name>i</name> - 15</expr>]</index></name></expr></argument>)</argument_list></call> + <name><name>W</name><index>[<expr><name>i</name> - 16</expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 8</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>

    <comment type="block">/* Compress */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RND</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>,<param><type><name>c</name></type></param>,<param><type><name>d</name></type></param>,<param><type><name>e</name></type></param>,<param><type><name>f</name></type></param>,<param><type><name>g</name></type></param>,<param><type><name>h</name></type></param>,<param><type><name>i</name></type></param>,<param><type><name>ki</name></type></param>)</parameter_list></cpp:macro>                    \
     <cpp:value>t0 = h + Sigma1(e) + Ch(e, f, g) + ki + W[i];   \
     t1 = Sigma0(a) + Maj(a, b, c);                  \
     d += t0;                                        \
     h  = t0 + t1;</cpp:value></cpp:define>

    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0x428a2f98</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr>1</expr></argument>,<argument><expr>0x71374491</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr>2</expr></argument>,<argument><expr>0xb5c0fbcf</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr>3</expr></argument>,<argument><expr>0xe9b5dba5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr>4</expr></argument>,<argument><expr>0x3956c25b</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr>5</expr></argument>,<argument><expr>0x59f111f1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr>6</expr></argument>,<argument><expr>0x923f82a4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr>7</expr></argument>,<argument><expr>0xab1c5ed5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr>8</expr></argument>,<argument><expr>0xd807aa98</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr>9</expr></argument>,<argument><expr>0x12835b01</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr>10</expr></argument>,<argument><expr>0x243185be</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr>11</expr></argument>,<argument><expr>0x550c7dc3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr>12</expr></argument>,<argument><expr>0x72be5d74</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr>13</expr></argument>,<argument><expr>0x80deb1fe</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr>14</expr></argument>,<argument><expr>0x9bdc06a7</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr>15</expr></argument>,<argument><expr>0xc19bf174</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr>16</expr></argument>,<argument><expr>0xe49b69c1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr>17</expr></argument>,<argument><expr>0xefbe4786</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr>18</expr></argument>,<argument><expr>0x0fc19dc6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr>19</expr></argument>,<argument><expr>0x240ca1cc</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr>20</expr></argument>,<argument><expr>0x2de92c6f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr>21</expr></argument>,<argument><expr>0x4a7484aa</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr>22</expr></argument>,<argument><expr>0x5cb0a9dc</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr>23</expr></argument>,<argument><expr>0x76f988da</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr>24</expr></argument>,<argument><expr>0x983e5152</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr>25</expr></argument>,<argument><expr>0xa831c66d</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr>26</expr></argument>,<argument><expr>0xb00327c8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr>27</expr></argument>,<argument><expr>0xbf597fc7</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr>28</expr></argument>,<argument><expr>0xc6e00bf3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr>29</expr></argument>,<argument><expr>0xd5a79147</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr>30</expr></argument>,<argument><expr>0x06ca6351</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr>31</expr></argument>,<argument><expr>0x14292967</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr>32</expr></argument>,<argument><expr>0x27b70a85</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr>33</expr></argument>,<argument><expr>0x2e1b2138</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr>34</expr></argument>,<argument><expr>0x4d2c6dfc</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr>35</expr></argument>,<argument><expr>0x53380d13</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr>36</expr></argument>,<argument><expr>0x650a7354</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr>37</expr></argument>,<argument><expr>0x766a0abb</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr>38</expr></argument>,<argument><expr>0x81c2c92e</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr>39</expr></argument>,<argument><expr>0x92722c85</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr>40</expr></argument>,<argument><expr>0xa2bfe8a1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr>41</expr></argument>,<argument><expr>0xa81a664b</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr>42</expr></argument>,<argument><expr>0xc24b8b70</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr>43</expr></argument>,<argument><expr>0xc76c51a3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr>44</expr></argument>,<argument><expr>0xd192e819</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr>45</expr></argument>,<argument><expr>0xd6990624</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr>46</expr></argument>,<argument><expr>0xf40e3585</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr>47</expr></argument>,<argument><expr>0x106aa070</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr>48</expr></argument>,<argument><expr>0x19a4c116</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr>49</expr></argument>,<argument><expr>0x1e376c08</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr>50</expr></argument>,<argument><expr>0x2748774c</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr>51</expr></argument>,<argument><expr>0x34b0bcb5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr>52</expr></argument>,<argument><expr>0x391c0cb3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr>53</expr></argument>,<argument><expr>0x4ed8aa4a</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr>54</expr></argument>,<argument><expr>0x5b9cca4f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr>55</expr></argument>,<argument><expr>0x682e6ff3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr>56</expr></argument>,<argument><expr>0x748f82ee</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr>57</expr></argument>,<argument><expr>0x78a5636f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr>58</expr></argument>,<argument><expr>0x84c87814</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr>59</expr></argument>,<argument><expr>0x8cc70208</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr>60</expr></argument>,<argument><expr>0x90befffa</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr>61</expr></argument>,<argument><expr>0xa4506ceb</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr>62</expr></argument>,<argument><expr>0xbef9a3f7</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>3</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>5</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>6</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>7</expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr>63</expr></argument>,<argument><expr>0xc67178f2</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RND</name></cpp:undef>     
    
    <comment type="block">/* feedback */</comment>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 8</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr><name>i</name></expr>]</index></name> + <name><name>S</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>

}</block></function>



<comment type="block">/* initialize the SHA digest */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sha_init</name><parameter_list>(<param><decl><type><name>SHAobject</name> *</type><name>sha_info</name></decl></param>)</parameter_list>
<block>{
    <macro><name>TestEndianness</name><argument_list>(<argument>sha_info-&gt;Endianness</argument>)</argument_list></macro>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>0</expr>]</index></name> = 0x6A09E667L</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>1</expr>]</index></name> = 0xBB67AE85L</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>2</expr>]</index></name> = 0x3C6EF372L</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>3</expr>]</index></name> = 0xA54FF53AL</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>4</expr>]</index></name> = 0x510E527FL</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>5</expr>]</index></name> = 0x9B05688CL</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>6</expr>]</index></name> = 0x1F83D9ABL</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>7</expr>]</index></name> = 0x5BE0CD19L</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>count_lo</name></name> = 0L</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>count_hi</name></name> = 0L</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>local</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>digestsize</name></name> = 32</expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sha224_init</name><parameter_list>(<param><decl><type><name>SHAobject</name> *</type><name>sha_info</name></decl></param>)</parameter_list>
<block>{
    <macro><name>TestEndianness</name><argument_list>(<argument>sha_info-&gt;Endianness</argument>)</argument_list></macro>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>0</expr>]</index></name> = 0xc1059ed8L</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>1</expr>]</index></name> = 0x367cd507L</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>2</expr>]</index></name> = 0x3070dd17L</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>3</expr>]</index></name> = 0xf70e5939L</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>4</expr>]</index></name> = 0xffc00b31L</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>5</expr>]</index></name> = 0x68581511L</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>6</expr>]</index></name> = 0x64f98fa7L</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>7</expr>]</index></name> = 0xbefa4fa4L</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>count_lo</name></name> = 0L</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>count_hi</name></name> = 0L</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>local</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>digestsize</name></name> = 28</expr>;</expr_stmt>
}</block></function>


<comment type="block">/* update the SHA digest */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sha_update</name><parameter_list>(<param><decl><type><name>SHAobject</name> *</type><name>sha_info</name></decl></param>, <param><decl><type><name>SHA_BYTE</name> *</type><name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>count</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SHA_INT32</name></type> <name>clo</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>clo</name> = <name><name>sha_info</name>-&gt;<name>count_lo</name></name> + ((<name>SHA_INT32</name>) <name>count</name> &lt;&lt; 3)</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>clo</name> &lt; <name><name>sha_info</name>-&gt;<name>count_lo</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr>++<name><name>sha_info</name>-&gt;<name>count_hi</name></name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>count_lo</name></name> = <name>clo</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>count_hi</name></name> += (<name>SHA_INT32</name>) <name>count</name> &gt;&gt; 29</expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>sha_info</name>-&gt;<name>local</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>i</name> = <name>SHA_BLOCKSIZE</name> - <name><name>sha_info</name>-&gt;<name>local</name></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>i</name> &gt; <name>count</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>i</name> = <name>count</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>((<name>SHA_BYTE</name> *) <name><name>sha_info</name>-&gt;<name>data</name></name>) + <name><name>sha_info</name>-&gt;<name>local</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>count</name> -= <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>buffer</name> += <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>local</name></name> += <name>i</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>sha_info</name>-&gt;<name>local</name></name> == <name>SHA_BLOCKSIZE</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>sha_transform</name><argument_list>(<argument><expr><name>sha_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <return>return;</return>
        }</block></else></if>
    }</block></then></if>
    <while>while <condition>(<expr><name>count</name> &gt;= <name>SHA_BLOCKSIZE</name></expr>)</condition> <block>{
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sha_info</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>SHA_BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>buffer</name> += <name>SHA_BLOCKSIZE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>count</name> -= <name>SHA_BLOCKSIZE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sha_transform</name><argument_list>(<argument><expr><name>sha_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sha_info</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>local</name></name> = <name>count</name></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* finish computing the SHA digest */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sha_final</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>SHA_DIGESTSIZE</name></expr>]</index></name></decl></param>, <param><decl><type><name>SHAobject</name> *</type><name>sha_info</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SHA_INT32</name></type> <name>lo_bit_count</name></decl>, <decl><type ref="prev"/><name>hi_bit_count</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>lo_bit_count</name> = <name><name>sha_info</name>-&gt;<name>count_lo</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hi_bit_count</name> = <name><name>sha_info</name>-&gt;<name>count_hi</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>count</name> = <call>(<name>int</name>) <argument_list>(<argument><expr>(<name>lo_bit_count</name> &gt;&gt; 3) &amp; 0x3f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>((<name>SHA_BYTE</name> *) <name><name>sha_info</name>-&gt;<name>data</name></name>)<index>[<expr><name>count</name>++</expr>]</index> = 0x80</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>count</name> &gt; <name>SHA_BLOCKSIZE</name> - 8</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>((<name>SHA_BYTE</name> *) <name><name>sha_info</name>-&gt;<name>data</name></name>) + <name>count</name></expr></argument>, <argument><expr>0</expr></argument>,
	       <argument><expr><name>SHA_BLOCKSIZE</name> - <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sha_transform</name><argument_list>(<argument><expr><name>sha_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>(<name>SHA_BYTE</name> *) <name><name>sha_info</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SHA_BLOCKSIZE</name> - 8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>((<name>SHA_BYTE</name> *) <name><name>sha_info</name>-&gt;<name>data</name></name>) + <name>count</name></expr></argument>, <argument><expr>0</expr></argument>,
	       <argument><expr><name>SHA_BLOCKSIZE</name> - 8 - <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="block">/* GJS: note that we add the hi/lo in big-endian. sha_transform will
       swap these values into host-order. */</comment>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>data</name><index>[<expr>56</expr>]</index></name> = (<name>hi_bit_count</name> &gt;&gt; 24) &amp; 0xff</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>data</name><index>[<expr>57</expr>]</index></name> = (<name>hi_bit_count</name> &gt;&gt; 16) &amp; 0xff</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>data</name><index>[<expr>58</expr>]</index></name> = (<name>hi_bit_count</name> &gt;&gt;  8) &amp; 0xff</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>data</name><index>[<expr>59</expr>]</index></name> = (<name>hi_bit_count</name> &gt;&gt;  0) &amp; 0xff</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>data</name><index>[<expr>60</expr>]</index></name> = (<name>lo_bit_count</name> &gt;&gt; 24) &amp; 0xff</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>data</name><index>[<expr>61</expr>]</index></name> = (<name>lo_bit_count</name> &gt;&gt; 16) &amp; 0xff</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>data</name><index>[<expr>62</expr>]</index></name> = (<name>lo_bit_count</name> &gt;&gt;  8) &amp; 0xff</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sha_info</name>-&gt;<name>data</name><index>[<expr>63</expr>]</index></name> = (<name>lo_bit_count</name> &gt;&gt;  0) &amp; 0xff</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sha_transform</name><argument_list>(<argument><expr><name>sha_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[ <expr>0</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>0</expr>]</index></name> &gt;&gt; 24) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[ <expr>1</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>0</expr>]</index></name> &gt;&gt; 16) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[ <expr>2</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>0</expr>]</index></name> &gt;&gt;  8) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[ <expr>3</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>0</expr>]</index></name>      ) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[ <expr>4</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>1</expr>]</index></name> &gt;&gt; 24) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[ <expr>5</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>1</expr>]</index></name> &gt;&gt; 16) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[ <expr>6</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>1</expr>]</index></name> &gt;&gt;  8) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[ <expr>7</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>1</expr>]</index></name>      ) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[ <expr>8</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>2</expr>]</index></name> &gt;&gt; 24) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[ <expr>9</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>2</expr>]</index></name> &gt;&gt; 16) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>10</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>2</expr>]</index></name> &gt;&gt;  8) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>11</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>2</expr>]</index></name>      ) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>12</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>3</expr>]</index></name> &gt;&gt; 24) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>13</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>3</expr>]</index></name> &gt;&gt; 16) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>14</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>3</expr>]</index></name> &gt;&gt;  8) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>15</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>3</expr>]</index></name>      ) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>16</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>4</expr>]</index></name> &gt;&gt; 24) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>17</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>4</expr>]</index></name> &gt;&gt; 16) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>18</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>4</expr>]</index></name> &gt;&gt;  8) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>19</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>4</expr>]</index></name>      ) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>20</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>5</expr>]</index></name> &gt;&gt; 24) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>21</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>5</expr>]</index></name> &gt;&gt; 16) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>22</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>5</expr>]</index></name> &gt;&gt;  8) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>23</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>5</expr>]</index></name>      ) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>24</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>6</expr>]</index></name> &gt;&gt; 24) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>25</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>6</expr>]</index></name> &gt;&gt; 16) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>26</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>6</expr>]</index></name> &gt;&gt;  8) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>27</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>6</expr>]</index></name>      ) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>28</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>7</expr>]</index></name> &gt;&gt; 24) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>29</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>7</expr>]</index></name> &gt;&gt; 16) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>30</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>7</expr>]</index></name> &gt;&gt;  8) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><index>[<expr>31</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr>(<name><name>sha_info</name>-&gt;<name>digest</name><index>[<expr>7</expr>]</index></name>      ) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * End of copied SHA code.
 *
 * ------------------------------------------------------------------------
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>SHA224type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>SHA256type</name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>SHAobject</name> *</type>
<name>newSHA224object</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <return>return <expr>(<name>SHAobject</name> *)<call><name>PyObject_New</name><argument_list>(<argument><expr><name>SHAobject</name></expr></argument>, <argument><expr>&amp;<name>SHA224type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>SHAobject</name> *</type>
<name>newSHA256object</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <return>return <expr>(<name>SHAobject</name> *)<call><name>PyObject_New</name><argument_list>(<argument><expr><name>SHAobject</name></expr></argument>, <argument><expr>&amp;<name>SHA256type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Internal methods for a hash object */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SHA_dealloc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ptr</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="block">/* External methods for a hash object */</comment>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>SHA256_copy__doc__</name></expr></argument>, <argument><expr>"Return a copy of the hash object."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>SHA256_copy</name><parameter_list>(<param><decl><type><name>SHAobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>SHAobject</name> *</type><name>newobj</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> == &amp;<name>SHA256type</name></expr>)</condition><then> <block>{
        <if>if <condition>( <expr>(<name>newobj</name> = <call><name>newSHA256object</name><argument_list>()</argument_list></call>)==<name>NULL</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
    }</block></then> <else>else <block>{
        <if>if <condition>( <expr>(<name>newobj</name> = <call><name>newSHA224object</name><argument_list>()</argument_list></call>)==<name>NULL</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
    }</block></else></if>

    <expr_stmt><expr><call><name>SHAcopy</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>newobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>(<name>PyObject</name> *)<name>newobj</name></expr>;</return>
}</block></function>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>SHA256_digest__doc__</name></expr></argument>,
<argument><expr>"Return the digest value as a string of binary data."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>SHA256_digest</name><parameter_list>(<param><decl><type><name>SHAobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>SHA_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SHAobject</name></type> <name>temp</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SHAcopy</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sha_final</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(const <name>char</name> *)<name>digest</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>digestsize</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>SHA256_hexdigest__doc__</name></expr></argument>,
<argument><expr>"Return the digest value as a string of hexadecimal digits."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>SHA256_hexdigest</name><parameter_list>(<param><decl><type><name>SHAobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>SHA_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SHAobject</name></type> <name>temp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>retval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>hex_digest</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <comment type="block">/* Get the raw (binary) digest value */</comment>
    <expr_stmt><expr><call><name>SHAcopy</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sha_final</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Create a new string */</comment>
    <expr_stmt><expr><name>retval</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>digestsize</name></name> * 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>retval</name></expr>)</condition><then>
	    <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name>hex_digest</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>hex_digest</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Make hex version of the digest */</comment>
    <for>for(<init><expr><name>i</name>=<name>j</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name><name>self</name>-&gt;<name>digestsize</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>c</name> = (<name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name> &gt;&gt; 4) &amp; 0xf</expr>;</expr_stmt>
	<expr_stmt><expr><name>c</name> = (<name>c</name>&gt;9) ? <name>c</name>+'a'-10 : <name>c</name> + '0'</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hex_digest</name><index>[<expr><name>j</name>++</expr>]</index></name> = <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> = (<name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name> &amp; 0xf)</expr>;</expr_stmt>
	<expr_stmt><expr><name>c</name> = (<name>c</name>&gt;9) ? <name>c</name>+'a'-10 : <name>c</name> + '0'</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hex_digest</name><index>[<expr><name>j</name>++</expr>]</index></name> = <name>c</name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>SHA256_update__doc__</name></expr></argument>,
<argument><expr>"Update this hash object's state with the provided string."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>SHA256_update</name><parameter_list>(<param><decl><type><name>SHAobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#:update"</expr></argument>, <argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>sha_update</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>SHA_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"copy"</expr>,	  <expr>(<name>PyCFunction</name>)<name>SHA256_copy</name></expr>,      <expr><name>METH_NOARGS</name></expr>,  <expr><name>SHA256_copy__doc__</name></expr>}</block></expr>,
    <expr><block>{<expr>"digest"</expr>,	  <expr>(<name>PyCFunction</name>)<name>SHA256_digest</name></expr>,    <expr><name>METH_NOARGS</name></expr>,  <expr><name>SHA256_digest__doc__</name></expr>}</block></expr>,
    <expr><block>{<expr>"hexdigest"</expr>, <expr>(<name>PyCFunction</name>)<name>SHA256_hexdigest</name></expr>, <expr><name>METH_NOARGS</name></expr>,  <expr><name>SHA256_hexdigest__doc__</name></expr>}</block></expr>,
    <expr><block>{<expr>"update"</expr>,	  <expr>(<name>PyCFunction</name>)<name>SHA256_update</name></expr>,    <expr><name>METH_VARARGS</name></expr>, <expr><name>SHA256_update__doc__</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>,	  <expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>SHA256_get_block_size</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>SHA_BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>SHA256_get_name</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>((<name>SHAobject</name> *)<name>self</name>)-&gt;<name>digestsize</name> == 32</expr>)</condition><then>
        <return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>"SHA256"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call></expr>;</return></then>
    <else>else
        <return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>"SHA224"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>SHA_getseters</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"block_size"</expr>,
     <expr>(<name>getter</name>)<name>SHA256_get_block_size</name></expr>, <expr><name>NULL</name></expr>,
     <expr><name>NULL</name></expr>,
     <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr>"name"</expr>,
     <expr>(<name>getter</name>)<name>SHA256_get_name</name></expr>, <expr><name>NULL</name></expr>,
     <expr><name>NULL</name></expr>,
     <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>  <comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>SHA_members</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"digest_size"</expr>, <expr><name>T_INT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>SHAobject</name></expr></argument>, <argument><expr><name>digestsize</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <comment type="block">/* the old md5 and sha modules support 'digest_size' as in PEP 247.
     * the old sha module also supported 'digestsize'.  ugh. */</comment>
    <expr><block>{<expr>"digestsize"</expr>, <expr><name>T_INT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>SHAobject</name></expr></argument>, <argument><expr><name>digestsize</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>  <comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>SHA224type</name> <init>= <expr><block>{
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
    "_sha256.sha224"</expr>,	<comment type="block">/*tp_name*/</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHAobject</name></expr></argument>)</argument_list></sizeof></expr>,	<comment type="block">/*tp_size*/</comment>
    <expr>0</expr>,			<comment type="block">/*tp_itemsize*/</comment>
    <comment type="block">/* methods */</comment>
    <expr><name>SHA_dealloc</name></expr>,	<comment type="block">/*tp_dealloc*/</comment>
    <expr>0</expr>,			<comment type="block">/*tp_print*/</comment>
    <expr>0</expr>,          	<comment type="block">/*tp_getattr*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_setattr*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_compare*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_repr*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_as_number*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_as_sequence*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_as_mapping*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_hash*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_call*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_str*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_getattro*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_setattro*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_as_buffer*/</comment>
    <expr><name>Py_TPFLAGS_DEFAULT</name></expr>, <comment type="block">/*tp_flags*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_doc*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_traverse*/</comment>
    <expr>0</expr>,			<comment type="block">/*tp_clear*/</comment>
    <expr>0</expr>,			<comment type="block">/*tp_richcompare*/</comment>
    <expr>0</expr>,			<comment type="block">/*tp_weaklistoffset*/</comment>
    <expr>0</expr>,			<comment type="block">/*tp_iter*/</comment>
    <expr>0</expr>,			<comment type="block">/*tp_iternext*/</comment>
    <expr><name>SHA_methods</name></expr>,	<comment type="block">/* tp_methods */</comment>
    <expr><name>SHA_members</name></expr>,	<comment type="block">/* tp_members */</comment>
    <expr><name>SHA_getseters</name></expr>,      <comment type="block">/* tp_getset */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>SHA256type</name> <init>= <expr><block>{
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
    "_sha256.sha256"</expr>,	<comment type="block">/*tp_name*/</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHAobject</name></expr></argument>)</argument_list></sizeof></expr>,	<comment type="block">/*tp_size*/</comment>
    <expr>0</expr>,			<comment type="block">/*tp_itemsize*/</comment>
    <comment type="block">/* methods */</comment>
    <expr><name>SHA_dealloc</name></expr>,	<comment type="block">/*tp_dealloc*/</comment>
    <expr>0</expr>,			<comment type="block">/*tp_print*/</comment>
    <expr>0</expr>,          	<comment type="block">/*tp_getattr*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_setattr*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_compare*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_repr*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_as_number*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_as_sequence*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_as_mapping*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_hash*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_call*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_str*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_getattro*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_setattro*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_as_buffer*/</comment>
    <expr><name>Py_TPFLAGS_DEFAULT</name></expr>, <comment type="block">/*tp_flags*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_doc*/</comment>
    <expr>0</expr>,                  <comment type="block">/*tp_traverse*/</comment>
    <expr>0</expr>,			<comment type="block">/*tp_clear*/</comment>
    <expr>0</expr>,			<comment type="block">/*tp_richcompare*/</comment>
    <expr>0</expr>,			<comment type="block">/*tp_weaklistoffset*/</comment>
    <expr>0</expr>,			<comment type="block">/*tp_iter*/</comment>
    <expr>0</expr>,			<comment type="block">/*tp_iternext*/</comment>
    <expr><name>SHA_methods</name></expr>,	<comment type="block">/* tp_methods */</comment>
    <expr><name>SHA_members</name></expr>,	<comment type="block">/* tp_members */</comment>
    <expr><name>SHA_getseters</name></expr>,      <comment type="block">/* tp_getset */</comment>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* The single module-level function: new() */</comment>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>SHA256_new__doc__</name></expr></argument>,
<argument><expr>"Return a new SHA-256 hash object; optionally initialized with a string."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>SHA256_new</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwdict</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr>"string"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SHAobject</name> *</type><name>new</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>cp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwdict</name></expr></argument>, <argument><expr>"|s#:new"</expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
                                     <argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>(<name>new</name> = <call><name>newSHA256object</name><argument_list>()</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>sha_init</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>cp</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>sha_update</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <return>return <expr>(<name>PyObject</name> *)<name>new</name></expr>;</return>
}</block></function>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>SHA224_new__doc__</name></expr></argument>,
<argument><expr>"Return a new SHA-224 hash object; optionally initialized with a string."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>SHA224_new</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwdict</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr>"string"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SHAobject</name> *</type><name>new</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>cp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwdict</name></expr></argument>, <argument><expr>"|s#:new"</expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
                                     <argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>(<name>new</name> = <call><name>newSHA224object</name><argument_list>()</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>sha224_init</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>cp</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>sha_update</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <return>return <expr>(<name>PyObject</name> *)<name>new</name></expr>;</return>
}</block></function>


<comment type="block">/* List of functions exported by this module */</comment>

<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>SHA_functions</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"sha256"</expr>, <expr>(<name>PyCFunction</name>)<name>SHA256_new</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>, <expr><name>SHA256_new__doc__</name></expr>}</block></expr>,
    <expr><block>{<expr>"sha224"</expr>, <expr>(<name>PyCFunction</name>)<name>SHA224_new</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>, <expr><name>SHA224_new__doc__</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>,	<expr><name>NULL</name></expr>}</block></expr>		 <comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* Initialize this module. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>insint</name><parameter_list>(<param><type><name>n</name></type></param>,<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ PyModule_AddIntConstant(m,n,v); }</cpp:value></cpp:define>

<function><type><name>PyMODINIT_FUNC</name></type>
<name>init_sha256</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr>&amp;<name>SHA224type</name></expr></argument>)</argument_list></call> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>SHA224type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
        <return>return;</return></then></if>
    <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr>&amp;<name>SHA256type</name></expr></argument>)</argument_list></call> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>SHA256type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
        <return>return;</return></then></if>
    <expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_sha256"</expr></argument>, <argument><expr><name>SHA_functions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
	<return>return;</return></then></if>
}</block></function>
</unit>
