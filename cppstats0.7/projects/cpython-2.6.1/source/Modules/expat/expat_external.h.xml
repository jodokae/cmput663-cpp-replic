<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/expat/expat_external.h"><comment type="block">/* Copyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd
   See the file COPYING for copying permission.
*/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Expat_External_INCLUDED</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Expat_External_INCLUDED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* External API definitions */</comment>

<comment type="block">/* Namespace external symbols to allow multiple libexpat version to
   co-exist. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pyexpatns.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_EXTENSIONS</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>__BEOS__</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_USE_MSC_EXTENSIONS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Expat tries very hard to make the API boundary very specifically
   defined.  There are two macros defined to control this boundary;
   each of these can be defined before including this header to
   achieve some different behavior, but doing so it not recommended or
   tested frequently.

   XMLCALL    - The calling convention to use for all calls across the
                "library boundary."  This will default to cdecl, and
                try really hard to tell the compiler that's what we
                want.

   XMLIMPORT  - Whatever magic is needed to note that a function is
                to be imported from a dynamically loaded library
                (.dll, .so, or .sl, depending on your platform).

   The XMLCALL macro was added in Expat 1.95.7.  The only one which is
   expected to be directly useful in client code is XMLCALL.

   Note that on at least some Unix versions, the Expat library must be
   compiled with the cdecl calling convention as the default since
   system headers may assume the cdecl convention.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>XMLCALL</name></cpp:ifndef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XML_USE_MSC_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMLCALL</name></cpp:macro> <cpp:value>__cdecl</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__i386</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMLCALL</name></cpp:macro> <cpp:value>__attribute__((cdecl))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/* For any platform which uses this definition and supports more than
   one calling convention, we need to extend this definition to
   declare the convention used on that platform, if it's possible to
   do so.

   If this is the case for your platform, please file a bug report
   with information on how to identify your platform via the C
   pre-processor and how to specify the same calling convention as the
   platform's malloc() implementation.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMLCALL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* not defined XMLCALL */</comment>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>XML_STATIC</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>XMLIMPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>XML_BUILDING_EXPAT</name></cpp:ifndef>
<comment type="block">/* using Expat from an application */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XML_USE_MSC_EXTENSIONS</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMLIMPORT</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* not defined XML_STATIC */</comment>


<comment type="block">/* If we didn't define it above, define it away: */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>XMLIMPORT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMLIMPORT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMLPARSEAPI</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>XMLIMPORT type XMLCALL</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XML_UNICODE_WCHAR_T</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_UNICODE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XML_UNICODE</name></cpp:ifdef>     <comment type="block">/* Information is UTF-16 encoded. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XML_UNICODE_WCHAR_T</name></cpp:ifdef>
<typedef>typedef <type><name>wchar_t</name></type> <name>XML_Char</name>;</typedef>
<typedef>typedef <type><name>wchar_t</name></type> <name>XML_LChar</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>XML_Char</name>;</typedef>
<typedef>typedef <type><name>char</name></type> <name>XML_LChar</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* XML_UNICODE_WCHAR_T */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>                  <comment type="block">/* Information is UTF-8 encoded. */</comment>
<typedef>typedef <type><name>char</name></type> <name>XML_Char</name>;</typedef>
<typedef>typedef <type><name>char</name></type> <name>XML_LChar</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* XML_UNICODE */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XML_LARGE_SIZE</name></cpp:ifdef>  <comment type="block">/* Use large integers for file/stream positions. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XML_USE_MSC_EXTENSIONS</name></expr></argument>)</argument_list></call> &amp;&amp; <name>_MSC_VER</name> &lt; 1400</expr></cpp:if>
<typedef>typedef <type><name>__int64</name></type> <name>XML_Index</name>;</typedef> 
<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>XML_Size</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>XML_Index</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>XML_Size</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>long</name></type> <name>XML_Index</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>XML_Size</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* XML_LARGE_SIZE */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* not Expat_External_INCLUDED */</comment>
</unit>
