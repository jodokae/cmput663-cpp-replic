<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/flmodule.c"><comment type="block">/* FL module -- interface to Mark Overmars' FORMS Library. */</comment>

<comment type="block">/* This code works with FORMS version 2.2 (if you defined
   OBSOLETE_FORMS_CALLS), and 2.3.
   FORMS can be ftp'ed from ftp.cs.ruu.nl (131.211.80.17), directory
   /pub/SGI/FORMS. */</comment>

<comment type="block">/* A half-hearted attempt has been made to allow programs using this
 * module to exploit parallelism (through the threads module). No provisions
 * have been made for multiple threads to use this module at the same time,
 * though. So, a program with a forms thread and a non-forms thread will work
 * fine but a program with two threads using forms will probably crash (unless
 * the program takes precaution to ensure that only one thread can be in
 * this module at any time). This will have to be fixed some time.
 * (A fix will probably also have to synchronize with the gl module).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"forms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>

<comment type="block">/* Generic Forms Objects */</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>FL_OBJECT</name> *</type><name>ob_generic</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyMethodDef</name> *</type><name>ob_methods</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>ob_callback</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>ob_callback_arg</name></decl>;</decl_stmt>
}</block></struct></type> <name>genericobject</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>GenericObjecttype</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_genericobject</name><parameter_list>(<param><type><name>g</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((g)-&gt;ob_type == &amp;GenericObjecttype)</cpp:value></cpp:define>

<comment type="block">/* List of all objects (XXX this should be a hash table on address...) */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>allgenerics</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nfreeslots</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

<comment type="block">/* Add an object to the list of known objects */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>knowgeneric</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<comment type="block">/* Create the list if it doesn't already exist */</comment>
	<if>if <condition>(<expr><name>allgenerics</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>allgenerics</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>allgenerics</name> == <name>NULL</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return;</return> <comment type="block">/* Too bad, live without allgenerics... */</comment>
		}</block></then></if>
	}</block></then></if>
	<if>if <condition>(<expr><name>nfreeslots</name> &gt; 0</expr>)</condition><then> <block>{
		<comment type="block">/* Search the list for reusable slots (NULL items) */</comment>
		<comment type="block">/* XXX This can be made faster! */</comment>
		<expr_stmt><expr><name>n</name> = <call><name>PyList_Size</name><argument_list>(<argument><expr><name>allgenerics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
			<if>if <condition>(<expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>allgenerics</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>allgenerics</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>nfreeslots</name>--</expr>;</expr_stmt>
				<return>return;</return>
			}</block></then></if>
		}</block></for>
		<comment type="block">/* Strange... no free slots found... */</comment>
		<expr_stmt><expr><name>nfreeslots</name> = 0</expr>;</expr_stmt>
	}</block></then></if>
	<comment type="block">/* No free entries, append new item to the end */</comment>
	<expr_stmt><expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>allgenerics</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* Find an object in the list of known objects */</comment>

<function><type><specifier>static</specifier> <name>genericobject</name> *</type>
<name>findgeneric</name><parameter_list>(<param><decl><type><name>FL_OBJECT</name> *</type><name>generic</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>genericobject</name> *</type><name>g</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr><name>allgenerics</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if> <comment type="block">/* No objects known yet */</comment>
	<expr_stmt><expr><name>n</name> = <call><name>PyList_Size</name><argument_list>(<argument><expr><name>allgenerics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
		<expr_stmt><expr><name>g</name> = (<name>genericobject</name> *)<call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>allgenerics</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>g</name> != <name>NULL</name> &amp;&amp; <name><name>g</name>-&gt;<name>ob_generic</name></name> == <name>generic</name></expr>)</condition><then>
			<return>return <expr><name>g</name></expr>;</return></then></if>
	}</block></for>
	<return>return <expr><name>NULL</name></expr>;</return> <comment type="block">/* Unknown object */</comment>
}</block></function>

<comment type="block">/* Remove an object from the list of known objects */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>forgetgeneric</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name>-&gt;<name>ob_callback</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_callback_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name>-&gt;<name>ob_callback_arg</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>allgenerics</name> == <name>NULL</name></expr>)</condition><then>
		<return>return;</return></then></if> <comment type="block">/* No objects known yet */</comment>
	<expr_stmt><expr><name>n</name> = <call><name>PyList_Size</name><argument_list>(<argument><expr><name>allgenerics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
		<if>if <condition>(<expr><name>g</name> == (<name>genericobject</name> *)<call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>allgenerics</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>allgenerics</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>nfreeslots</name>++</expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for>
}</block></function>

<comment type="block">/* Called when a form is about to be freed --
   remove all the objects that we know about from it. */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>releaseobjects</name><parameter_list>(<param><decl><type><name>FL_FORM</name> *</type><name>form</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>genericobject</name> *</type><name>g</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr><name>allgenerics</name> == <name>NULL</name></expr>)</condition><then>
		<return>return;</return></then></if> <comment type="block">/* No objects known yet */</comment>
	<expr_stmt><expr><name>n</name> = <call><name>PyList_Size</name><argument_list>(<argument><expr><name>allgenerics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
		<expr_stmt><expr><name>g</name> = (<name>genericobject</name> *)<call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>allgenerics</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>g</name> != <name>NULL</name> &amp;&amp; <name><name>g</name>-&gt;<name>ob_generic</name>-&gt;<name>form</name></name> == <name>form</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>fl_delete_object</name><argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* The object is now unreachable for
			   do_forms and check_forms, so
			   delete it from the list of known objects */</comment>
			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>g</name>-&gt;<name>ob_callback</name></name> = <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_callback_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>g</name>-&gt;<name>ob_callback_arg</name></name> = <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>allgenerics</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>nfreeslots</name>++</expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>


<comment type="block">/* Methods of generic objects */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>generic_set_call_back</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_callback_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name>-&gt;<name>ob_callback</name></name> = <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name>-&gt;<name>ob_callback_arg</name></name> = <name>NULL</name></expr>;</expr_stmt>
	}</block></then>
	<else>else <block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>a</name></decl>, *<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<macro><name>PyArg_UnpackTuple</name><argument_list>(<argument>args</argument>, <argument>"set_call_back"</argument>, <argument>2</argument>, <argument>2</argument>, <argument>&amp;a</argument>, <argument>&amp;b</argument>)</argument_list></macro></expr></condition></if>
            <return>return <expr><name>NULL</name></expr>;</return>
		<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_callback_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name>-&gt;<name>ob_callback</name></name> = <name>a</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name>-&gt;<name>ob_callback_arg</name></name> = <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_callback_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>generic_call</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>FL_OBJECT</name> *</type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call>(*<name>func</name>)<argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>generic_delete_object</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>res</name> = <call><name>generic_call</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>fl_delete_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>res</name> != <name>NULL</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>forgetgeneric</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>generic_show_object</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_call</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>fl_show_object</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>generic_hide_object</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_call</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>fl_hide_object</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>generic_redraw_object</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_call</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>fl_redraw_object</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OBSOLETE_FORMS_CALLS</name></cpp:ifdef>
 
 <comment type="block">/* (un)freeze_object() are obsolete in FORMS 2.2 and unsupported
    in 2.3.  Since there's no foolproof way to tell which version we're
    using, we omit them unconditionally. */</comment>
 
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>generic_freeze_object</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_call</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>fl_freeze_object</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>generic_unfreeze_object</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_call</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>fl_unfreeze_object</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OBSOLETE_FORMS_CALLS */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>generic_activate_object</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_call</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>fl_activate_object</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>generic_deactivate_object</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_call</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>fl_deactivate_object</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>generic_set_object_shortcut</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s:set_object_shortcut"</expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>fl_set_object_shortcut</name><argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_generic</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>generic_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"set_call_back"</expr>,	<expr>(<name>PyCFunction</name>)<name>generic_set_call_back</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"delete_object"</expr>,	<expr>(<name>PyCFunction</name>)<name>generic_delete_object</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"show_object"</expr>,		<expr>(<name>PyCFunction</name>)<name>generic_show_object</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"hide_object"</expr>,		<expr>(<name>PyCFunction</name>)<name>generic_hide_object</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"redraw_object"</expr>,	<expr>(<name>PyCFunction</name>)<name>generic_redraw_object</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OBSOLETE_FORMS_CALLS</name></cpp:ifdef>
	<expr><block>{<expr>"freeze_object"</expr>,	<expr>(<name>PyCFunction</name>)<name>generic_freeze_object</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"unfreeze_object"</expr>,	<expr>(<name>PyCFunction</name>)<name>generic_unfreeze_object</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr>"activate_object"</expr>,	<expr>(<name>PyCFunction</name>)<name>generic_activate_object</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"deactivate_object"</expr>,	<expr>(<name>PyCFunction</name>)<name>generic_deactivate_object</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_object_shortcut"</expr>,	<expr>(<name>PyCFunction</name>)<name>generic_set_object_shortcut</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,			<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>generic_dealloc</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>fl_free_object</name><argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_callback_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>offsetof(FL_OBJECT, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> struct <name>memberlist</name></type> <name><name>generic_memberlist</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"objclass"</expr>,	<expr><name>T_INT</name></expr>,		<expr><call><name>OFF</name><argument_list>(<argument><expr><name>objclass</name></expr></argument>)</argument_list></call></expr>,	<expr><name>RO</name></expr>}</block></expr>,
	<expr><block>{<expr>"type"</expr>,	<expr><name>T_INT</name></expr>,		<expr><call><name>OFF</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>,	<expr><name>RO</name></expr>}</block></expr>,
	<expr><block>{<expr>"boxtype"</expr>,	<expr><name>T_INT</name></expr>,		<macro><name>OFF</name><argument_list>(<argument>boxtype</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"x"</expr>,		<expr><name>T_FLOAT</name></expr>,	<macro><name>OFF</name><argument_list>(<argument>x</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"y"</expr>,		<expr><name>T_FLOAT</name></expr>,	<macro><name>OFF</name><argument_list>(<argument>y</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"w"</expr>,		<expr><name>T_FLOAT</name></expr>,	<macro><name>OFF</name><argument_list>(<argument>w</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"h"</expr>,		<expr><name>T_FLOAT</name></expr>,	<macro><name>OFF</name><argument_list>(<argument>h</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"col1"</expr>,	<expr><name>T_INT</name></expr>,		<macro><name>OFF</name><argument_list>(<argument>col1</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"col2"</expr>,	<expr><name>T_INT</name></expr>,		<macro><name>OFF</name><argument_list>(<argument>col2</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"align"</expr>,	<expr><name>T_INT</name></expr>,		<macro><name>OFF</name><argument_list>(<argument>align</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"lcol"</expr>,	<expr><name>T_INT</name></expr>,		<macro><name>OFF</name><argument_list>(<argument>lcol</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"lsize"</expr>,	<expr><name>T_FLOAT</name></expr>,	<macro><name>OFF</name><argument_list>(<argument>lsize</argument>)</argument_list></macro>}</block></expr>,
	<comment type="block">/* "label" is treated specially! */</comment>
	<expr><block>{<expr>"lstyle"</expr>,	<expr><name>T_INT</name></expr>,		<macro><name>OFF</name><argument_list>(<argument>lstyle</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"pushed"</expr>,	<expr><name>T_INT</name></expr>,		<expr><call><name>OFF</name><argument_list>(<argument><expr><name>pushed</name></expr></argument>)</argument_list></call></expr>,	<expr><name>RO</name></expr>}</block></expr>,
	<expr><block>{<expr>"focus"</expr>,	<expr><name>T_INT</name></expr>,		<expr><call><name>OFF</name><argument_list>(<argument><expr><name>focus</name></expr></argument>)</argument_list></call></expr>,	<expr><name>RO</name></expr>}</block></expr>,
	<expr><block>{<expr>"belowmouse"</expr>,	<expr><name>T_INT</name></expr>,		<expr><call><name>OFF</name><argument_list>(<argument><expr><name>belowmouse</name></expr></argument>)</argument_list></call></expr>,<expr><name>RO</name></expr>}</block></expr>,
<comment type="block">/*	{"frozen",	T_INT,		OFF(frozen),	RO},	*/</comment>
	<expr><block>{<expr>"active"</expr>,	<expr><name>T_INT</name></expr>,		<macro><name>OFF</name><argument_list>(<argument>active</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"input"</expr>,	<expr><name>T_INT</name></expr>,		<macro><name>OFF</name><argument_list>(<argument>input</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"visible"</expr>,	<expr><name>T_INT</name></expr>,		<expr><call><name>OFF</name><argument_list>(<argument><expr><name>visible</name></expr></argument>)</argument_list></call></expr>,	<expr><name>RO</name></expr>}</block></expr>,
	<expr><block>{<expr>"radio"</expr>,	<expr><name>T_INT</name></expr>,		<macro><name>OFF</name><argument_list>(<argument>radio</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"automatic"</expr>,	<expr><name>T_INT</name></expr>,		<macro><name>OFF</name><argument_list>(<argument>automatic</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>}</block></expr>	<comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OFF</name></cpp:undef>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>generic_getattr</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>meth</name></decl>;</decl_stmt>

	<comment type="block">/* XXX Ought to special-case name "__methods__" */</comment>
	<if>if <condition>(<expr><name><name>g</name>-&gt; <name>ob_methods</name></name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>meth</name> = <call><name>Py_FindMethod</name><argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_methods</name></name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>g</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>meth</name> != <name>NULL</name></expr>)</condition><then> <return>return <expr><name>meth</name></expr>;</return></then></if>
		<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<expr_stmt><expr><name>meth</name> = <call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>generic_methods</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>g</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>meth</name> != <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>meth</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* "label" is an exception, getmember only works for char pointers,
	   not for char arrays */</comment>
	<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"label"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
		<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_generic</name>-&gt;<name>label</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

	<return>return <expr><call><name>PyMember_Get</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>g</name>-&gt;<name>ob_generic</name></name></expr></argument>, <argument><expr><name>generic_memberlist</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>generic_setattr</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
				<argument><expr>"can't delete forms object attributes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>-1</expr>;</return>
	}</block></then></if>

	<comment type="block">/* "label" is an exception: setmember doesn't set strings;
	   and FORMS wants you to call a function to set the label */</comment>
	<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"label"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
		<if>if <condition>(<expr>!<call><name>PyString_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
					<argument><expr>"label attr must be string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>-1</expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><call><name>fl_set_object_label</name><argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_generic</name></name></expr></argument>, <argument><expr><call><name>PyString_AsString</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>0</expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><name>ret</name> = <call><name>PyMember_Set</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>g</name>-&gt;<name>ob_generic</name></name></expr></argument>, <argument><expr><name>generic_memberlist</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Rather than calling all the various set_object_* functions,
	   we call fl_redraw_object here.  This is sometimes redundant
	   but I doubt that's a big problem */</comment>
	<if>if <condition>(<expr><name>ret</name> == 0</expr>)</condition><then>
		<expr_stmt><expr><call><name>fl_redraw_object</name><argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>generic_repr</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"&lt;FORMS_object at %p, objclass=%d&gt;"</expr></argument>,
		      <argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>g</name>-&gt;<name>ob_generic</name>-&gt;<name>objclass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>GenericObjecttype</name> <init>= <expr><block>{
	<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>)</argument_list></call>
	0</expr>,				<comment type="block">/*ob_size*/</comment>
	<expr>"fl.FORMS_object"</expr>,		<comment type="block">/*tp_name*/</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>genericobject</name></expr></argument>)</argument_list></sizeof></expr>,		<comment type="block">/*tp_size*/</comment>
	<expr>0</expr>,				<comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>)<name>generic_dealloc</name></expr>,	<comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>,				<comment type="block">/*tp_print*/</comment>
	<expr>(<name>getattrfunc</name>)<name>generic_getattr</name></expr>,	<comment type="block">/*tp_getattr*/</comment>
	<expr>(<name>setattrfunc</name>)<name>generic_setattr</name></expr>,	<comment type="block">/*tp_setattr*/</comment>
	<expr>0</expr>,				<comment type="block">/*tp_compare*/</comment>
	<expr>(<name>reprfunc</name>)<name>generic_repr</name></expr>,		<comment type="block">/*tp_repr*/</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>newgenericobject</name><parameter_list>(<param><decl><type><name>FL_OBJECT</name> *</type><name>generic</name></decl></param>, <param><decl><type><name>PyMethodDef</name> *</type><name>methods</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>genericobject</name> *</type><name>g</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>g</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>genericobject</name></expr></argument>, <argument><expr>&amp;<name>GenericObjecttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>g</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>g</name>-&gt; <name>ob_generic</name></name> = <name>generic</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name>-&gt;<name>ob_methods</name></name> = <name>methods</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name>-&gt;<name>ob_callback</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name>-&gt;<name>ob_callback_arg</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>knowgeneric</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>(<name>PyObject</name> *)<name>g</name></expr>;</return>
}</block></function>

<comment type="block">/**********************************************************************/</comment>
<comment type="block">/* Some common calling sequences */</comment>

<comment type="block">/* void func (object, float) */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>call_forms_INf</name> <parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>FL_OBJECT</name> *</type></decl></param>, <param><decl><type><name>float</name></type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>FL_OBJECT</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>float</name></type> <name>parameter</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"f"</expr></argument>, <argument><expr>&amp;<name>parameter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><call>(*<name>func</name>) <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>parameter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<comment type="block">/* void func (object, float) */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>call_forms_INfINf</name> <parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>FL_OBJECT</name> *</type></decl></param>, <param><decl><type><name>float</name></type></decl></param>, <param><decl><type><name>float</name></type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>FL_OBJECT</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>float</name></type> <name>par1</name></decl>, <decl><type ref="prev"/><name>par2</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(ff)"</expr></argument>, <argument><expr>&amp;<name>par1</name></expr></argument>, <argument><expr>&amp;<name>par2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><call>(*<name>func</name>) <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>par1</name></expr></argument>, <argument><expr><name>par2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<comment type="block">/* void func (object, int) */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>call_forms_INi</name> <parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>FL_OBJECT</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>FL_OBJECT</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>parameter</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>&amp;<name>parameter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><call>(*<name>func</name>) <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>parameter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<comment type="block">/* void func (object, char) */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>call_forms_INc</name> <parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>FL_OBJECT</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>FL_OBJECT</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>a</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s"</expr></argument>, <argument><expr>&amp;<name>a</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><call>(*<name>func</name>) <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<comment type="block">/* void func (object, string) */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>call_forms_INstr</name> <parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>FL_OBJECT</name> *</type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>FL_OBJECT</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>a</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s"</expr></argument>, <argument><expr>&amp;<name>a</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><call>(*<name>func</name>) <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>


<comment type="block">/* void func (object, int, string) */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>call_forms_INiINstr</name> <parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>FL_OBJECT</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>FL_OBJECT</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>b</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(is)"</expr></argument>, <argument><expr>&amp;<name>a</name></expr></argument>, <argument><expr>&amp;<name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<expr_stmt><expr><call>(*<name>func</name>) <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNUSED</name></cpp:ifdef>
<comment type="block">/* void func (object, int, int) */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>call_forms_INiINi</name> <parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>FL_OBJECT</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>FL_OBJECT</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>par1</name></decl>, <decl><type ref="prev"/><name>par2</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(ii)"</expr></argument>, <argument><expr>&amp;<name>par1</name></expr></argument>, <argument><expr>&amp;<name>par2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<expr_stmt><expr><call>(*<name>func</name>) <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>par1</name></expr></argument>, <argument><expr><name>par2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* int func (object) */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>call_forms_Ri</name> <parameter_list>(<param><function_decl><type><name>int</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>FL_OBJECT</name> *</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>FL_OBJECT</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>retval</name> = <call>(*<name>func</name>) <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>PyInt_FromLong</name> <argument_list>(<argument><expr>(<name>long</name>) <name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* char * func (object) */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>call_forms_Rstr</name> <parameter_list>(<param><function_decl><type><name>char</name> *</type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>FL_OBJECT</name> *</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>FL_OBJECT</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>str</name> = <call>(*<name>func</name>) <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr><name>str</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>Py_None</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>PyString_FromString</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* int func (object) */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>call_forms_Rf</name> <parameter_list>(<param><function_decl><type><name>float</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>FL_OBJECT</name> *</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>FL_OBJECT</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>float</name></type> <name>retval</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>retval</name> = <call>(*<name>func</name>) <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>PyFloat_FromDouble</name> <argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>call_forms_OUTfOUTf</name> <parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>FL_OBJECT</name> *</type></decl></param>, <param><decl><type><name>float</name> *</type></decl></param>, <param><decl><type><name>float</name> *</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>FL_OBJECT</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>float</name></type> <name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>;</decl_stmt>

	<expr_stmt><expr><call>(*<name>func</name>) <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name>f1</name></expr></argument>, <argument><expr>&amp;<name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(ff)"</expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNUSED</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>call_forms_OUTf</name> <parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>FL_OBJECT</name> *</type></decl></param>, <param><decl><type><name>float</name> *</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>FL_OBJECT</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>

	<expr_stmt><expr><call>(*<name>func</name>) <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>PyFloat_FromDouble</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/**********************************************************************/</comment>
<comment type="block">/* Class : browser */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_browser_topline</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INi</name> <argument_list>(<argument><expr><name>fl_set_browser_topline</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>clear_browser</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_call</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>fl_clear_browser</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>add_browser_line</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INstr</name> <argument_list>(<argument><expr><name>fl_add_browser_line</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>addto_browser</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INstr</name> <argument_list>(<argument><expr><name>fl_addto_browser</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>insert_browser_line</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INiINstr</name> <argument_list>(<argument><expr><name>fl_insert_browser_line</name></expr></argument>,
				    <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>delete_browser_line</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INi</name> <argument_list>(<argument><expr><name>fl_delete_browser_line</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>replace_browser_line</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INiINstr</name> <argument_list>(<argument><expr><name>fl_replace_browser_line</name></expr></argument>,
				    <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_browser_line</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>str</name> = <call><name>fl_get_browser_line</name> <argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_generic</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr><name>str</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>Py_None</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>PyString_FromString</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>load_browser</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<comment type="block">/* XXX strictly speaking this is wrong since fl_load_browser
	   XXX returns int, not void */</comment>
	<return>return <expr><call><name>call_forms_INstr</name> <argument_list>(<argument><expr><name>fl_load_browser</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_browser_maxline</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_Ri</name> <argument_list>(<argument><expr><name>fl_get_browser_maxline</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>select_browser_line</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INi</name> <argument_list>(<argument><expr><name>fl_select_browser_line</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>deselect_browser_line</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INi</name> <argument_list>(<argument><expr><name>fl_deselect_browser_line</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>deselect_browser</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_call</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>fl_deselect_browser</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>isselected_browser_line</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<expr_stmt><expr><name>j</name> = <call><name>fl_isselected_browser_line</name> <argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_generic</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<return>return <expr><call><name>PyInt_FromLong</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_browser</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_Ri</name> <argument_list>(<argument><expr><name>fl_get_browser</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_browser_fontsize</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INf</name> <argument_list>(<argument><expr><name>fl_set_browser_fontsize</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_browser_fontstyle</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INi</name> <argument_list>(<argument><expr><name>fl_set_browser_fontstyle</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_browser_specialkey</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INc</name><argument_list>(<argument><expr><name>fl_set_browser_specialkey</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>browser_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"set_browser_topline"</expr>,		<expr>(<name>PyCFunction</name>)<name>set_browser_topline</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"clear_browser"</expr>,		<expr>(<name>PyCFunction</name>)<name>clear_browser</name></expr>,
	 <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"add_browser_line"</expr>,		<expr>(<name>PyCFunction</name>)<name>add_browser_line</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"addto_browser"</expr>,		<expr>(<name>PyCFunction</name>)<name>addto_browser</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"insert_browser_line"</expr>,		<expr>(<name>PyCFunction</name>)<name>insert_browser_line</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"delete_browser_line"</expr>,		<expr>(<name>PyCFunction</name>)<name>delete_browser_line</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"replace_browser_line"</expr>,	<expr>(<name>PyCFunction</name>)<name>replace_browser_line</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_browser_line"</expr>,		<expr>(<name>PyCFunction</name>)<name>get_browser_line</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"load_browser"</expr>,		<expr>(<name>PyCFunction</name>)<name>load_browser</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_browser_maxline"</expr>,		<expr>(<name>PyCFunction</name>)<name>get_browser_maxline</name></expr>,
	 <expr><name>METH_NOARGS</name></expr>,}</block>
	<block>{<expr>"select_browser_line"</expr>,		<expr>(<name>PyCFunction</name>)<name>select_browser_line</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"deselect_browser_line"</expr>,	<expr>(<name>PyCFunction</name>)<name>deselect_browser_line</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"deselect_browser"</expr>,		<expr>(<name>PyCFunction</name>)<name>deselect_browser</name></expr>,
	 <expr><name>METH_NOARGS</name></expr>,}</block>
	<block>{<expr>"isselected_browser_line"</expr>,	<expr>(<name>PyCFunction</name>)<name>isselected_browser_line</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_browser"</expr>,			<expr>(<name>PyCFunction</name>)<name>get_browser</name></expr>,
	 <expr><name>METH_NOARGS</name></expr>,}</block>
	<block>{<expr>"set_browser_fontsize"</expr>,	<expr>(<name>PyCFunction</name>)<name>set_browser_fontsize</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_browser_fontstyle"</expr>,	<expr>(<name>PyCFunction</name>)<name>set_browser_fontstyle</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_browser_specialkey"</expr>,	<expr>(<name>PyCFunction</name>)<name>set_browser_specialkey</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,				<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Class: button */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_button</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INi</name> <argument_list>(<argument><expr><name>fl_set_button</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_button</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_Ri</name> <argument_list>(<argument><expr><name>fl_get_button</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_button_numb</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_Ri</name> <argument_list>(<argument><expr><name>fl_get_button_numb</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_button_shortcut</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INstr</name> <argument_list>(<argument><expr><name>fl_set_button_shortcut</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>button_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"set_button"</expr>,		<expr>(<name>PyCFunction</name>)<name>set_button</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_button"</expr>,		<expr>(<name>PyCFunction</name>)<name>get_button</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_button_numb"</expr>,	<expr>(<name>PyCFunction</name>)<name>get_button_numb</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_button_shortcut"</expr>,	<expr>(<name>PyCFunction</name>)<name>set_button_shortcut</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,			<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Class: choice */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_choice</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INi</name> <argument_list>(<argument><expr><name>fl_set_choice</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_choice</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_Ri</name> <argument_list>(<argument><expr><name>fl_get_choice</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>clear_choice</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_call</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>fl_clear_choice</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>addto_choice</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INstr</name> <argument_list>(<argument><expr><name>fl_addto_choice</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>replace_choice</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INiINstr</name> <argument_list>(<argument><expr><name>fl_replace_choice</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>delete_choice</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INi</name> <argument_list>(<argument><expr><name>fl_delete_choice</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_choice_text</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_Rstr</name> <argument_list>(<argument><expr><name>fl_get_choice_text</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_choice_fontsize</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INf</name> <argument_list>(<argument><expr><name>fl_set_choice_fontsize</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_choice_fontstyle</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INi</name> <argument_list>(<argument><expr><name>fl_set_choice_fontstyle</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>choice_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"set_choice"</expr>,		<expr>(<name>PyCFunction</name>)<name>set_choice</name></expr>,      <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_choice"</expr>,		<expr>(<name>PyCFunction</name>)<name>get_choice</name></expr>,      <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"clear_choice"</expr>,	<expr>(<name>PyCFunction</name>)<name>clear_choice</name></expr>,    <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"addto_choice"</expr>,	<expr>(<name>PyCFunction</name>)<name>addto_choice</name></expr>,    <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"replace_choice"</expr>,	<expr>(<name>PyCFunction</name>)<name>replace_choice</name></expr>,  <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"delete_choice"</expr>,	<expr>(<name>PyCFunction</name>)<name>delete_choice</name></expr>,   <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_choice_text"</expr>,	<expr>(<name>PyCFunction</name>)<name>get_choice_text</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_choice_fontsize"</expr>, <expr>(<name>PyCFunction</name>)<name>set_choice_fontsize</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_choice_fontstyle"</expr>,<expr>(<name>PyCFunction</name>)<name>set_choice_fontstyle</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,			<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Class : Clock */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_clock</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i0</name></decl>, <decl><type ref="prev"/><name>i1</name></decl>, <decl><type ref="prev"/><name>i2</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fl_get_clock</name> <argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_generic</name></name></expr></argument>, <argument><expr>&amp;<name>i0</name></expr></argument>, <argument><expr>&amp;<name>i1</name></expr></argument>, <argument><expr>&amp;<name>i2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(iii)"</expr></argument>, <argument><expr><name>i0</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>clock_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"get_clock"</expr>,		<expr>(<name>PyCFunction</name>)<name>get_clock</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,			<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* CLass : Counters */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_counter_value</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_Rf</name> <argument_list>(<argument><expr><name>fl_get_counter_value</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_counter_value</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INf</name> <argument_list>(<argument><expr><name>fl_set_counter_value</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_counter_precision</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INi</name> <argument_list>(<argument><expr><name>fl_set_counter_precision</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_counter_bounds</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INfINf</name> <argument_list>(<argument><expr><name>fl_set_counter_bounds</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_counter_step</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INfINf</name> <argument_list>(<argument><expr><name>fl_set_counter_step</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_counter_return</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INi</name> <argument_list>(<argument><expr><name>fl_set_counter_return</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>counter_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"set_counter_value"</expr>,		<expr>(<name>PyCFunction</name>)<name>set_counter_value</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_counter_value"</expr>,		<expr>(<name>PyCFunction</name>)<name>get_counter_value</name></expr>,
	 <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_counter_bounds"</expr>,		<expr>(<name>PyCFunction</name>)<name>set_counter_bounds</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_counter_step"</expr>,		<expr>(<name>PyCFunction</name>)<name>set_counter_step</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_counter_precision"</expr>,	<expr>(<name>PyCFunction</name>)<name>set_counter_precision</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_counter_return"</expr>,		<expr>(<name>PyCFunction</name>)<name>set_counter_return</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,				<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* Class: Dials */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_dial_value</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_Rf</name> <argument_list>(<argument><expr><name>fl_get_dial_value</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_dial_value</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INf</name> <argument_list>(<argument><expr><name>fl_set_dial_value</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_dial_bounds</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INfINf</name> <argument_list>(<argument><expr><name>fl_set_dial_bounds</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_dial_bounds</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_OUTfOUTf</name> <argument_list>(<argument><expr><name>fl_get_dial_bounds</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_dial_step</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INf</name> <argument_list>(<argument><expr><name>fl_set_dial_step</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>dial_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"set_dial_value"</expr>,	<expr>(<name>PyCFunction</name>)<name>set_dial_value</name></expr>,  <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_dial_value"</expr>,	<expr>(<name>PyCFunction</name>)<name>get_dial_value</name></expr>,  <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_dial_bounds"</expr>,	<expr>(<name>PyCFunction</name>)<name>set_dial_bounds</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_dial_bounds"</expr>,	<expr>(<name>PyCFunction</name>)<name>get_dial_bounds</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_dial_step"</expr>,	<expr>(<name>PyCFunction</name>)<name>set_dial_step</name></expr>,   <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,			<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Class : Input */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_input</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INstr</name> <argument_list>(<argument><expr><name>fl_set_input</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_input</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_Rstr</name> <argument_list>(<argument><expr><name>fl_get_input</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_input_color</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INfINf</name> <argument_list>(<argument><expr><name>fl_set_input_color</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_input_return</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INi</name> <argument_list>(<argument><expr><name>fl_set_input_return</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>input_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"set_input"</expr>,		<expr>(<name>PyCFunction</name>)<name>set_input</name></expr>,        <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_input"</expr>,		<expr>(<name>PyCFunction</name>)<name>get_input</name></expr>,        <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_input_color"</expr>,	<expr>(<name>PyCFunction</name>)<name>set_input_color</name></expr>,  <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_input_return"</expr>,	<expr>(<name>PyCFunction</name>)<name>set_input_return</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,			<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* Class : Menu */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_menu</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INstr</name> <argument_list>(<argument><expr><name>fl_set_menu</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_menu</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<comment type="block">/* XXX strictly speaking this is wrong since fl_get_menu
	   XXX returns long, not int */</comment>
	<return>return <expr><call><name>call_forms_Ri</name> <argument_list>(<argument><expr><name>fl_get_menu</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_menu_text</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_Rstr</name> <argument_list>(<argument><expr><name>fl_get_menu_text</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>addto_menu</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INstr</name> <argument_list>(<argument><expr><name>fl_addto_menu</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>menu_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"set_menu"</expr>,		<expr>(<name>PyCFunction</name>)<name>set_menu</name></expr>,      <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_menu"</expr>,		<expr>(<name>PyCFunction</name>)<name>get_menu</name></expr>,      <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_menu_text"</expr>,	<expr>(<name>PyCFunction</name>)<name>get_menu_text</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"addto_menu"</expr>,		<expr>(<name>PyCFunction</name>)<name>addto_menu</name></expr>,    <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,			<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* Class: Sliders */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_slider_value</name><parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_Rf</name> <argument_list>(<argument><expr><name>fl_get_slider_value</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_slider_value</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INf</name> <argument_list>(<argument><expr><name>fl_set_slider_value</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_slider_bounds</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INfINf</name> <argument_list>(<argument><expr><name>fl_set_slider_bounds</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_slider_bounds</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_OUTfOUTf</name><argument_list>(<argument><expr><name>fl_get_slider_bounds</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_slider_return</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INf</name> <argument_list>(<argument><expr><name>fl_set_slider_return</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_slider_size</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INf</name> <argument_list>(<argument><expr><name>fl_set_slider_size</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_slider_precision</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INi</name> <argument_list>(<argument><expr><name>fl_set_slider_precision</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_slider_step</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INf</name> <argument_list>(<argument><expr><name>fl_set_slider_step</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>slider_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"set_slider_value"</expr>,	<expr>(<name>PyCFunction</name>)<name>set_slider_value</name></expr>,  <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_slider_value"</expr>,	<expr>(<name>PyCFunction</name>)<name>get_slider_value</name></expr>,  <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_slider_bounds"</expr>,	<expr>(<name>PyCFunction</name>)<name>set_slider_bounds</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_slider_bounds"</expr>,	<expr>(<name>PyCFunction</name>)<name>get_slider_bounds</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_slider_return"</expr>,	<expr>(<name>PyCFunction</name>)<name>set_slider_return</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_slider_size"</expr>,	<expr>(<name>PyCFunction</name>)<name>set_slider_size</name></expr>,   <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_slider_precision"</expr>,<expr>(<name>PyCFunction</name>)<name>set_slider_precision</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_slider_step"</expr>,	<expr>(<name>PyCFunction</name>)<name>set_slider_step</name></expr>,   <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,			<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_positioner_xvalue</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INf</name> <argument_list>(<argument><expr><name>fl_set_positioner_xvalue</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_positioner_xbounds</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INfINf</name> <argument_list>(<argument><expr><name>fl_set_positioner_xbounds</name></expr></argument>,
				  <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_positioner_yvalue</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INf</name> <argument_list>(<argument><expr><name>fl_set_positioner_yvalue</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_positioner_ybounds</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INfINf</name> <argument_list>(<argument><expr><name>fl_set_positioner_ybounds</name></expr></argument>,
				  <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_positioner_xvalue</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_Rf</name> <argument_list>(<argument><expr><name>fl_get_positioner_xvalue</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_positioner_xbounds</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_OUTfOUTf</name> <argument_list>(<argument><expr><name>fl_get_positioner_xbounds</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_positioner_yvalue</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_Rf</name> <argument_list>(<argument><expr><name>fl_get_positioner_yvalue</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_positioner_ybounds</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_OUTfOUTf</name> <argument_list>(<argument><expr><name>fl_get_positioner_ybounds</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>positioner_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"set_positioner_xvalue"</expr>,	<expr>(<name>PyCFunction</name>)<name>set_positioner_xvalue</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_positioner_yvalue"</expr>,	<expr>(<name>PyCFunction</name>)<name>set_positioner_yvalue</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_positioner_xbounds"</expr>,	<expr>(<name>PyCFunction</name>)<name>set_positioner_xbounds</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_positioner_ybounds"</expr>,	<expr>(<name>PyCFunction</name>)<name>set_positioner_ybounds</name></expr>,
	 <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_positioner_xvalue"</expr>,	<expr>(<name>PyCFunction</name>)<name>get_positioner_xvalue</name></expr>,
	 <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_positioner_yvalue"</expr>,	<expr>(<name>PyCFunction</name>)<name>get_positioner_yvalue</name></expr>,
	 <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_positioner_xbounds"</expr>,	<expr>(<name>PyCFunction</name>)<name>get_positioner_xbounds</name></expr>,
	 <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_positioner_ybounds"</expr>,	<expr>(<name>PyCFunction</name>)<name>get_positioner_ybounds</name></expr>,
	 <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,			<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Class timer */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>set_timer</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_INf</name> <argument_list>(<argument><expr><name>fl_set_timer</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_timer</name> <parameter_list>(<param><decl><type><name>genericobject</name> *</type><name>g</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_forms_Rf</name> <argument_list>(<argument><expr><name>fl_get_timer</name></expr></argument>, <argument><expr><name><name>g</name>-&gt; <name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>timer_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"set_timer"</expr>,		<expr>(<name>PyCFunction</name>)<name>set_timer</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_timer"</expr>,		<expr>(<name>PyCFunction</name>)<name>get_timer</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,			<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Form objects */</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>FL_FORM</name> *</type><name>ob_form</name></decl>;</decl_stmt>
}</block></struct></type> <name>formobject</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Formtype</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_formobject</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((v)-&gt;ob_type == &amp;Formtype)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_show_form</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>place</name></decl>, <decl><type ref="prev"/><name>border</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(iis)"</expr></argument>, <argument><expr>&amp;<name>place</name></expr></argument>, <argument><expr>&amp;<name>border</name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>fl_show_form</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>ob_form</name></name></expr></argument>, <argument><expr><name>place</name></expr></argument>, <argument><expr><name>border</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_call</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>FL_FORM</name> *</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>FL_FORM</name> *</type><name>f</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call>(*<name>func</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_call_INiINi</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>FL_FORM</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>FL_FORM</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(ii)"</expr></argument>, <argument><expr>&amp;<name>a</name></expr></argument>, <argument><expr>&amp;<name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><call>(*<name>func</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_call_INfINf</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>FL_FORM</name> *</type></decl></param>, <param><decl><type><name>float</name></type></decl></param>, <param><decl><type><name>float</name></type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>FL_FORM</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>float</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(ff)"</expr></argument>, <argument><expr>&amp;<name>a</name></expr></argument>, <argument><expr>&amp;<name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><call>(*<name>func</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_hide_form</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>form_call</name><argument_list>(<argument><expr><name>fl_hide_form</name></expr></argument>, <argument><expr><name><name>f</name>-&gt; <name>ob_form</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_redraw_form</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>form_call</name><argument_list>(<argument><expr><name>fl_redraw_form</name></expr></argument>, <argument><expr><name><name>f</name>-&gt; <name>ob_form</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_set_form_position</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>form_call_INiINi</name><argument_list>(<argument><expr><name>fl_set_form_position</name></expr></argument>, <argument><expr><name><name>f</name>-&gt; <name>ob_form</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_set_form_size</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>form_call_INiINi</name><argument_list>(<argument><expr><name>fl_set_form_size</name></expr></argument>, <argument><expr><name><name>f</name>-&gt; <name>ob_form</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_scale_form</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>form_call_INfINf</name><argument_list>(<argument><expr><name>fl_scale_form</name></expr></argument>, <argument><expr><name><name>f</name>-&gt; <name>ob_form</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>generic_add_object</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><function_decl><type><name>FL_OBJECT</name> *</type>(*<name>func</name>)<parameter_list>(<param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>float</name></type></decl></param>, <param><decl><type><name>float</name></type></decl></param>, <param><decl><type><name>float</name></type></decl></param>, <param><decl><type><name>float</name></type></decl></param>, <param><decl><type><name>char</name>*</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>PyMethodDef</name> *</type><name>internal_methods</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FL_OBJECT</name> *</type><name>obj</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"(iffffs)"</expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>,<argument><expr>&amp;<name>x</name></expr></argument>,<argument><expr>&amp;<name>y</name></expr></argument>,<argument><expr>&amp;<name>w</name></expr></argument>,<argument><expr>&amp;<name>h</name></expr></argument>,<argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><call><name>fl_addto_form</name> <argument_list>(<argument><expr><name><name>f</name>-&gt; <name>ob_form</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>obj</name> = <call>(*<name>func</name>) <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fl_end_form</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr><name>obj</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<return>return <expr><call><name>newgenericobject</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>internal_methods</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_add_button</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_add_object</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>fl_add_button</name></expr></argument>, <argument><expr><name>button_methods</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_add_lightbutton</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_add_object</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>fl_add_lightbutton</name></expr></argument>, <argument><expr><name>button_methods</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_add_roundbutton</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_add_object</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>fl_add_roundbutton</name></expr></argument>, <argument><expr><name>button_methods</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_add_menu</name> <parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_add_object</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>fl_add_menu</name></expr></argument>, <argument><expr><name>menu_methods</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_add_slider</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_add_object</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>fl_add_slider</name></expr></argument>, <argument><expr><name>slider_methods</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_add_valslider</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_add_object</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>fl_add_valslider</name></expr></argument>, <argument><expr><name>slider_methods</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_add_dial</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_add_object</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>fl_add_dial</name></expr></argument>, <argument><expr><name>dial_methods</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_add_counter</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_add_object</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>fl_add_counter</name></expr></argument>, <argument><expr><name>counter_methods</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_add_clock</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_add_object</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>fl_add_clock</name></expr></argument>, <argument><expr><name>clock_methods</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_add_box</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_add_object</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>fl_add_box</name></expr></argument>,
				  <argument><expr>(<name>PyMethodDef</name> *)<name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_add_choice</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_add_object</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>fl_add_choice</name></expr></argument>, <argument><expr><name>choice_methods</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_add_browser</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_add_object</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>fl_add_browser</name></expr></argument>, <argument><expr><name>browser_methods</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_add_positioner</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_add_object</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>fl_add_positioner</name></expr></argument>,
				  <argument><expr><name>positioner_methods</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_add_input</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_add_object</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>fl_add_input</name></expr></argument>, <argument><expr><name>input_methods</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_add_text</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_add_object</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>fl_add_text</name></expr></argument>,
				  <argument><expr>(<name>PyMethodDef</name> *)<name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_add_timer</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>generic_add_object</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>fl_add_timer</name></expr></argument>, <argument><expr><name>timer_methods</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_freeze_form</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>form_call</name><argument_list>(<argument><expr><name>fl_freeze_form</name></expr></argument>, <argument><expr><name><name>f</name>-&gt; <name>ob_form</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_unfreeze_form</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>form_call</name><argument_list>(<argument><expr><name>fl_unfreeze_form</name></expr></argument>, <argument><expr><name><name>f</name>-&gt; <name>ob_form</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_activate_form</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>form_call</name><argument_list>(<argument><expr><name>fl_activate_form</name></expr></argument>, <argument><expr><name><name>f</name>-&gt; <name>ob_form</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_deactivate_form</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>form_call</name><argument_list>(<argument><expr><name>fl_deactivate_form</name></expr></argument>, <argument><expr><name><name>f</name>-&gt; <name>ob_form</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_bgn_group</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>FL_OBJECT</name> *</type><name>obj</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fl_addto_form</name><argument_list>(<argument><expr><name><name>f</name>-&gt; <name>ob_form</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>obj</name> = <call><name>fl_bgn_group</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fl_end_form</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr><name>obj</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<return>return <expr><call><name>newgenericobject</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>PyMethodDef</name> *) <name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_end_group</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>fl_addto_form</name><argument_list>(<argument><expr><name><name>f</name>-&gt; <name>ob_form</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fl_end_group</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fl_end_form</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_find_first_or_last</name><parameter_list>(<param><function_decl><type><name>FL_OBJECT</name> *</type>(*<name>func</name>)<parameter_list>(<param><decl><type><name>FL_FORM</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>float</name></type></decl></param>, <param><decl><type><name>float</name></type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FL_OBJECT</name> *</type><name>generic</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>genericobject</name> *</type><name>g</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(iff)"</expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>, <argument><expr>&amp;<name>mx</name></expr></argument>, <argument><expr>&amp;<name>my</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>generic</name> = <call>(*<name>func</name>) <argument_list>(<argument><expr><name><name>f</name>-&gt; <name>ob_form</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr><name>generic</name> == <name>NULL</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>Py_None</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><name>g</name> = <call><name>findgeneric</name><argument_list>(<argument><expr><name>generic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>g</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
			   <argument><expr>"forms_find_{first|last} returns unknown object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>(<name>PyObject</name> *) <name>g</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_find_first</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>forms_find_first_or_last</name><argument_list>(<argument><expr><name>fl_find_first</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_find_last</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>forms_find_first_or_last</name><argument_list>(<argument><expr><name>fl_find_last</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_set_object_focus</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>genericobject</name> *</type><name>g</name></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>args</name> == <name>NULL</name> || !<call><name>is_genericobject</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>g</name> = (<name>genericobject</name> *)<name>args</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fl_set_object_focus</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>ob_form</name></name></expr></argument>, <argument><expr><name><name>g</name>-&gt;<name>ob_generic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>form_methods</name><index>[]</index></name> <init>= <expr><block>{
<comment type="block">/* adm */</comment>
	<expr><block>{<expr>"show_form"</expr>,		<expr>(<name>PyCFunction</name>)<name>form_show_form</name></expr>,     <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"hide_form"</expr>,		<expr>(<name>PyCFunction</name>)<name>form_hide_form</name></expr>,     <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"redraw_form"</expr>,		<expr>(<name>PyCFunction</name>)<name>form_redraw_form</name></expr>,   <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_form_position"</expr>,	<expr>(<name>PyCFunction</name>)<name>form_set_form_position</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_form_size"</expr>,	<expr>(<name>PyCFunction</name>)<name>form_set_form_size</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"scale_form"</expr>,		<expr>(<name>PyCFunction</name>)<name>form_scale_form</name></expr>,    <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"freeze_form"</expr>,		<expr>(<name>PyCFunction</name>)<name>form_freeze_form</name></expr>,   <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"unfreeze_form"</expr>,	<expr>(<name>PyCFunction</name>)<name>form_unfreeze_form</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"activate_form"</expr>,	<expr>(<name>PyCFunction</name>)<name>form_activate_form</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"deactivate_form"</expr>,	<expr>(<name>PyCFunction</name>)<name>form_deactivate_form</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"bgn_group"</expr>,		<expr>(<name>PyCFunction</name>)<name>form_bgn_group</name></expr>,  <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"end_group"</expr>,		<expr>(<name>PyCFunction</name>)<name>form_end_group</name></expr>,  <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"find_first"</expr>,		<expr>(<name>PyCFunction</name>)<name>form_find_first</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"find_last"</expr>,		<expr>(<name>PyCFunction</name>)<name>form_find_last</name></expr>,  <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_object_focus"</expr>,	<expr>(<name>PyCFunction</name>)<name>form_set_object_focus</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,

<comment type="block">/* basic objects */</comment>
	<expr><block>{<expr>"add_button"</expr>,		<expr>(<name>PyCFunction</name>)<name>form_add_button</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<comment type="block">/*	{"add_bitmap",		(method)form_add_bitmap, METH_OLDARGS}, */</comment>
	<expr><block>{<expr>"add_lightbutton"</expr>,	<expr>(<name>PyCFunction</name>)<name>form_add_lightbutton</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"add_roundbutton"</expr>,	<expr>(<name>PyCFunction</name>)<name>form_add_roundbutton</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"add_menu"</expr>,		<expr>(<name>PyCFunction</name>)<name>form_add_menu</name></expr>,      <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"add_slider"</expr>,		<expr>(<name>PyCFunction</name>)<name>form_add_slider</name></expr>,    <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"add_positioner"</expr>,	<expr>(<name>PyCFunction</name>)<name>form_add_positioner</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"add_valslider"</expr>,	<expr>(<name>PyCFunction</name>)<name>form_add_valslider</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"add_dial"</expr>,		<expr>(<name>PyCFunction</name>)<name>form_add_dial</name></expr>,      <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"add_counter"</expr>,		<expr>(<name>PyCFunction</name>)<name>form_add_counter</name></expr>,   <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"add_box"</expr>,		<expr>(<name>PyCFunction</name>)<name>form_add_box</name></expr>,       <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"add_clock"</expr>,		<expr>(<name>PyCFunction</name>)<name>form_add_clock</name></expr>,     <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"add_choice"</expr>,		<expr>(<name>PyCFunction</name>)<name>form_add_choice</name></expr>,    <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"add_browser"</expr>,		<expr>(<name>PyCFunction</name>)<name>form_add_browser</name></expr>,   <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"add_input"</expr>,		<expr>(<name>PyCFunction</name>)<name>form_add_input</name></expr>,     <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"add_timer"</expr>,		<expr>(<name>PyCFunction</name>)<name>form_add_timer</name></expr>,     <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"add_text"</expr>,		<expr>(<name>PyCFunction</name>)<name>form_add_text</name></expr>,      <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,			<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>form_dealloc</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>releaseobjects</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>ob_form</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name><name>f</name>-&gt;<name>ob_form</name>-&gt;<name>visible</name></name></expr>)</condition><then>
		<expr_stmt><expr><call><name>fl_hide_form</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>ob_form</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>fl_free_form</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>ob_form</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>offsetof(FL_FORM, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> struct <name>memberlist</name></type> <name><name>form_memberlist</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"window"</expr>,	<expr><name>T_LONG</name></expr>,		<expr><call><name>OFF</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>,	<expr><name>RO</name></expr>}</block></expr>,
	<expr><block>{<expr>"w"</expr>,		<expr><name>T_FLOAT</name></expr>,	<macro><name>OFF</name><argument_list>(<argument>w</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"h"</expr>,		<expr><name>T_FLOAT</name></expr>,	<macro><name>OFF</name><argument_list>(<argument>h</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"x"</expr>,		<expr><name>T_FLOAT</name></expr>,	<expr><call><name>OFF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>,		<expr><name>RO</name></expr>}</block></expr>,
	<expr><block>{<expr>"y"</expr>,		<expr><name>T_FLOAT</name></expr>,	<expr><call><name>OFF</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>,		<expr><name>RO</name></expr>}</block></expr>,
	<expr><block>{<expr>"deactivated"</expr>,	<expr><name>T_INT</name></expr>,		<macro><name>OFF</name><argument_list>(<argument>deactivated</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr>"visible"</expr>,	<expr><name>T_INT</name></expr>,		<expr><call><name>OFF</name><argument_list>(<argument><expr><name>visible</name></expr></argument>)</argument_list></call></expr>,	<expr><name>RO</name></expr>}</block></expr>,
	<expr><block>{<expr>"frozen"</expr>,	<expr><name>T_INT</name></expr>,		<expr><call><name>OFF</name><argument_list>(<argument><expr><name>frozen</name></expr></argument>)</argument_list></call></expr>,	<expr><name>RO</name></expr>}</block></expr>,
	<expr><block>{<expr>"doublebuf"</expr>,	<expr><name>T_INT</name></expr>,		<macro><name>OFF</name><argument_list>(<argument>doublebuf</argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>}</block></expr>	<comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OFF</name></cpp:undef>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_getattr</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>meth</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>meth</name> = <call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>form_methods</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>f</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>meth</name> != <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>meth</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>PyMember_Get</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>f</name>-&gt;<name>ob_form</name></name></expr></argument>, <argument><expr><name>form_memberlist</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>form_setattr</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
				<argument><expr>"can't delete form attributes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>-1</expr>;</return>
	}</block></then></if>

	<return>return <expr><call><name>PyMember_Set</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>f</name>-&gt;<name>ob_form</name></name></expr></argument>, <argument><expr><name>form_memberlist</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>form_repr</name><parameter_list>(<param><decl><type><name>formobject</name> *</type><name>f</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"&lt;FORMS_form at %p, window=%ld&gt;"</expr></argument>,
		      <argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>ob_form</name>-&gt;<name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Formtype</name> <init>= <expr><block>{
	<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>)</argument_list></call>
	0</expr>,				<comment type="block">/*ob_size*/</comment>
	<expr>"fl.FORMS_form"</expr>,		<comment type="block">/*tp_name*/</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>formobject</name></expr></argument>)</argument_list></sizeof></expr>,		<comment type="block">/*tp_size*/</comment>
	<expr>0</expr>,				<comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>)<name>form_dealloc</name></expr>,	<comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>,				<comment type="block">/*tp_print*/</comment>
	<expr>(<name>getattrfunc</name>)<name>form_getattr</name></expr>,	<comment type="block">/*tp_getattr*/</comment>
	<expr>(<name>setattrfunc</name>)<name>form_setattr</name></expr>,	<comment type="block">/*tp_setattr*/</comment>
	<expr>0</expr>,				<comment type="block">/*tp_compare*/</comment>
	<expr>(<name>reprfunc</name>)<name>form_repr</name></expr>,		<comment type="block">/*tp_repr*/</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>newformobject</name><parameter_list>(<param><decl><type><name>FL_FORM</name> *</type><name>form</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>formobject</name> *</type><name>f</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>f</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>formobject</name></expr></argument>, <argument><expr>&amp;<name>Formtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>f</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>f</name>-&gt;<name>ob_form</name></name> = <name>form</name></expr>;</expr_stmt>
	<return>return <expr>(<name>PyObject</name> *)<name>f</name></expr>;</return>
}</block></function>


<comment type="block">/* The "fl" module */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_make_form</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FL_FORM</name> *</type><name>form</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(iff)"</expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>, <argument><expr>&amp;<name>w</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>form</name> = <call><name>fl_bgn_form</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>form</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<comment type="block">/* XXX Actually, cannot happen! */</comment>
		<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>fl_end_form</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>newformobject</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_activate_all_forms</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>fl_activate_all_forms</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_deactivate_all_forms</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>fl_deactivate_all_forms</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>my_event_callback</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_set_event_call_back</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>args</name> == <name>Py_None</name></expr>)</condition><then>
		<expr_stmt><expr><name>args</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name>my_event_callback</name> = <name>args</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_do_or_check_forms</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>dummy</name></decl></param>, <param><function_decl><type><name>FL_OBJECT</name> *</type>(*<name>func</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>FL_OBJECT</name> *</type><name>generic</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>genericobject</name> *</type><name>g</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>arg</name></decl>, *<decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

	<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
		<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
		<name>generic</name> <init>= <expr><call>(*<name>func</name>)<argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<macro><name>Py_END_ALLOW_THREADS</name></macro>
		<if>if <condition>(<expr><name>generic</name> == <name>NULL</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>Py_None</name></expr>;</return>
		}</block></then></if>
		<if>if <condition>(<expr><name>generic</name> == <name>FL_EVENT</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>dev</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>short</name></type> <name>val</name></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>my_event_callback</name> == <name>NULL</name></expr>)</condition><then>
				<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>-1L</expr></argument>)</argument_list></call></expr>;</return></then></if>
			<expr_stmt><expr><name>dev</name> = <call><name>fl_qread</name><argument_list>(<argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>arg</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(ih)"</expr></argument>, <argument><expr><name>dev</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>arg</name> == <name>NULL</name></expr>)</condition><then>
				<return>return <expr><name>NULL</name></expr>;</return></then></if>
			<expr_stmt><expr><name>res</name> = <call><name>PyEval_CallObject</name><argument_list>(<argument><expr><name>my_event_callback</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>res</name> == <name>NULL</name></expr>)</condition><then>
				<return>return <expr><name>NULL</name></expr>;</return></then></if> <comment type="block">/* Callback raised exception */</comment>
			<continue>continue;</continue>
		}</block></then></if>
		<expr_stmt><expr><name>g</name> = <call><name>findgeneric</name><argument_list>(<argument><expr><name>generic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>g</name> == <name>NULL</name></expr>)</condition><then> <block>{
			<comment type="block">/* Object not known to us (some dialogs cause this) */</comment>
			<continue>continue;</continue> <comment type="block">/* Ignore it */</comment>
		}</block></then></if>
		<if>if <condition>(<expr><name><name>g</name>-&gt;<name>ob_callback</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>((<name>PyObject</name> *) <name>g</name>)</expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><name>arg</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>g</name></expr></argument>, <argument><expr><name><name>g</name>-&gt;<name>ob_callback_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>arg</name> == <name>NULL</name></expr>)</condition><then>
			<return>return <expr><name>NULL</name></expr>;</return></then></if>
		<expr_stmt><expr><name>res</name> = <call><name>PyEval_CallObject</name><argument_list>(<argument><expr><name><name>g</name>-&gt;<name>ob_callback</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>res</name> == <name>NULL</name></expr>)</condition><then>
			<return>return <expr><name>NULL</name></expr>;</return></then></if> <comment type="block">/* Callback raised exception */</comment>
	}</block></for>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_do_forms</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>dummy</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>forms_do_or_check_forms</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>fl_do_forms</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_check_forms</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>dummy</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>forms_do_or_check_forms</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>fl_check_forms</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_do_only_forms</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>dummy</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>forms_do_or_check_forms</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>fl_do_only_forms</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_check_only_forms</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>dummy</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>forms_do_or_check_forms</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>fl_check_only_forms</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNUSED</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>fl_call</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call>(*<name>func</name>)<argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_set_graphics_mode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>rgbmode</name></decl>, <decl><type ref="prev"/><name>doublebuf</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(ii)"</expr></argument>, <argument><expr>&amp;<name>rgbmode</name></expr></argument>, <argument><expr>&amp;<name>doublebuf</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>fl_set_graphics_mode</name><argument_list>(<argument><expr><name>rgbmode</name></expr></argument>,<argument><expr><name>doublebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_get_rgbmode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>fl_rgbmode</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>args</name> != <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name>fl_rgbmode</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_show_errors</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>show</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>&amp;<name>show</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>fl_show_errors</name><argument_list>(<argument><expr><name>show</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_set_font_name</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>numb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(is)"</expr></argument>, <argument><expr>&amp;<name>numb</name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>fl_set_font_name</name><argument_list>(<argument><expr><name>numb</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_qdevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"h"</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>fl_qdevice</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_unqdevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"h"</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>fl_unqdevice</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_isqueued</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"h"</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name>retval</name> = <call><name>fl_isqueued</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_qtest</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>retval</name> = <call><name>fl_qtest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_qread</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>dev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
	<name>dev</name> <init>= <expr><call><name>fl_qread</name><argument_list>(<argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<macro><name>Py_END_ALLOW_THREADS</name></macro>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(ih)"</expr></argument>, <argument><expr><name>dev</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_qreset</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>fl_qreset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_qenter</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl>, <decl><type ref="prev"/><name>arg2</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(hh)"</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>fl_qenter</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_color</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>arg</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><call><name>fl_color</name><argument_list>(<argument><expr>(<name>short</name>) <name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_mapcolor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>arg0</name></decl>, <decl><type ref="prev"/><name>arg1</name></decl>, <decl><type ref="prev"/><name>arg2</name></decl>, <decl><type ref="prev"/><name>arg3</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(iiii)"</expr></argument>, <argument><expr>&amp;<name>arg0</name></expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><call><name>fl_mapcolor</name><argument_list>(<argument><expr><name>arg0</name></expr></argument>, <argument><expr>(<name>short</name>) <name>arg1</name></expr></argument>, <argument><expr>(<name>short</name>) <name>arg2</name></expr></argument>, <argument><expr>(<name>short</name>) <name>arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_getmcolor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>arg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><call><name>fl_getmcolor</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>, <argument><expr>&amp;<name>g</name></expr></argument>, <argument><expr>&amp;<name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(hhh)"</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_get_mouse</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fl_get_mouse</name><argument_list>(<argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(ff)"</expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_tie</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl>, <decl><type ref="prev"/><name>arg2</name></decl>, <decl><type ref="prev"/><name>arg3</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(hhh)"</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>fl_tie</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_show_message</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>a</name></decl>, *<decl><type ref="prev"/><name>b</name></decl>, *<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(sss)"</expr></argument>, <argument><expr>&amp;<name>a</name></expr></argument>, <argument><expr>&amp;<name>b</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>

	<function_decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
	<name>fl_show_message</name><parameter_list>(<param><decl><type><name>a</name></type></decl></param>, <param><decl><type><name>b</name></type></decl></param>, <param><decl><type><name>c</name></type></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name>Py_END_ALLOW_THREADS</name></type>

	<name>Py_INCREF</name><parameter_list>(<param><decl><type><name>Py_None</name></type></decl></param>)</parameter_list>;</function_decl>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_show_choice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>m1</name></decl>, *<decl><type ref="prev"/><name>m2</name></decl>, *<decl><type ref="prev"/><name>m3</name></decl>, *<decl><type ref="prev"/><name>b1</name></decl>, *<decl><type ref="prev"/><name>b2</name></decl>, *<decl><type ref="prev"/><name>b3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>format</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>rv</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>args</name> == <name>NULL</name> || !<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>nb</name> = <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> - 3</expr>;</expr_stmt>
	<if>if <condition>(<expr><name>nb</name> &lt;= 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
				<argument><expr>"need at least one button label"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
			   <argument><expr>"'number-of-buttons' argument not needed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<switch>switch <condition>(<expr><name>nb</name></expr>)</condition> <block>{
	<case>case <expr>1</expr>: <expr_stmt><expr><name>format</name> = "(ssss)"</expr>;</expr_stmt> <break>break;</break>
	</case><case>case <expr>2</expr>: <expr_stmt><expr><name>format</name> = "(sssss)"</expr>;</expr_stmt> <break>break;</break>
	</case><case>case <expr>3</expr>: <expr_stmt><expr><name>format</name> = "(ssssss)"</expr>;</expr_stmt> <break>break;</break>
	</case><default>default:
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"too many button labels"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</default>}</block></switch>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr>&amp;<name>m1</name></expr></argument>, <argument><expr>&amp;<name>m2</name></expr></argument>, <argument><expr>&amp;<name>m3</name></expr></argument>, <argument><expr>&amp;<name>b1</name></expr></argument>, <argument><expr>&amp;<name>b2</name></expr></argument>, <argument><expr>&amp;<name>b3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
	<name>rv</name> <init>= <expr><call><name>fl_show_choice</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<macro><name>Py_END_ALLOW_THREADS</name></macro>
	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_show_question</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>a</name></decl>, *<decl><type ref="prev"/><name>b</name></decl>, *<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(sss)"</expr></argument>, <argument><expr>&amp;<name>a</name></expr></argument>, <argument><expr>&amp;<name>b</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>

	<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
	<name>ret</name> <init>= <expr><call><name>fl_show_question</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<macro><name>Py_END_ALLOW_THREADS</name></macro>

	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>ret</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_show_input</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>a</name></decl>, *<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(ss)"</expr></argument>, <argument><expr>&amp;<name>a</name></expr></argument>, <argument><expr>&amp;<name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>

	<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
	<name>str</name> <init>= <expr><call><name>fl_show_input</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<macro><name>Py_END_ALLOW_THREADS</name></macro>

	<if>if <condition>(<expr><name>str</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>Py_None</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_file_selector</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>a</name></decl>, *<decl><type ref="prev"/><name>b</name></decl>, *<decl><type ref="prev"/><name>c</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(ssss)"</expr></argument>, <argument><expr>&amp;<name>a</name></expr></argument>, <argument><expr>&amp;<name>b</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>

	<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
	<name>str</name> <init>= <expr><call><name>fl_show_file_selector</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<macro><name>Py_END_ALLOW_THREADS</name></macro>

	<if>if <condition>(<expr><name>str</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>Py_None</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_file_selector_func</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><function_decl><type><name>char</name> *</type>(*<name>func</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>str</name> = <call>(*<name>func</name>) <argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr><name>str</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>Py_None</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_get_directory</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>forms_file_selector_func</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fl_get_directory</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_get_pattern</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>forms_file_selector_func</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fl_get_pattern</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>forms_get_filename</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>forms_file_selector_func</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fl_get_filename</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>forms_methods</name><index>[]</index></name> <init>= <expr><block>{
<comment type="block">/* adm */</comment>
	<expr><block>{<expr>"make_form"</expr>,		<expr><name>forms_make_form</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"activate_all_forms"</expr>,	<expr><name>forms_activate_all_forms</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"deactivate_all_forms"</expr>,<expr><name>forms_deactivate_all_forms</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<comment type="block">/* gl support wrappers */</comment>
	<expr><block>{<expr>"qdevice"</expr>,		<expr><name>forms_qdevice</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"unqdevice"</expr>,		<expr><name>forms_unqdevice</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"isqueued"</expr>,		<expr><name>forms_isqueued</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"qtest"</expr>,		<expr><name>forms_qtest</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"qread"</expr>,		<expr><name>forms_qread</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<comment type="block">/*	{"blkqread",		forms_blkqread, METH_OLDARGS}, */</comment>
	<expr><block>{<expr>"qreset"</expr>,		<expr><name>forms_qreset</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"qenter"</expr>,		<expr><name>forms_qenter</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_mouse"</expr>,		<expr><name>forms_get_mouse</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"tie"</expr>,			<expr><name>forms_tie</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<comment type="block">/*	{"new_events",		forms_new_events, METH_OLDARGS}, */</comment>
	<expr><block>{<expr>"color"</expr>,		<expr><name>forms_color</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"mapcolor"</expr>,		<expr><name>forms_mapcolor</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"getmcolor"</expr>,		<expr><name>forms_getmcolor</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<comment type="block">/* interaction */</comment>
	<expr><block>{<expr>"do_forms"</expr>,		<expr><name>forms_do_forms</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"do_only_forms"</expr>,	<expr><name>forms_do_only_forms</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"check_forms"</expr>,		<expr><name>forms_check_forms</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"check_only_forms"</expr>,	<expr><name>forms_check_only_forms</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_event_call_back"</expr>,	<expr><name>forms_set_event_call_back</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<comment type="block">/* goodies */</comment>
	<expr><block>{<expr>"show_message"</expr>,	<expr><name>forms_show_message</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"show_question"</expr>,	<expr><name>forms_show_question</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"show_choice"</expr>,		<expr><name>forms_show_choice</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"show_input"</expr>,		<expr><name>forms_show_input</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"show_file_selector"</expr>,	<expr><name>forms_file_selector</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"file_selector"</expr>,	<expr><name>forms_file_selector</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>, <comment type="block">/* BW compat */</comment>
	<expr><block>{<expr>"get_directory"</expr>,	<expr><name>forms_get_directory</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_pattern"</expr>,		<expr><name>forms_get_pattern</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_filename"</expr>,	<expr><name>forms_get_filename</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_graphics_mode"</expr>,	<expr><name>forms_set_graphics_mode</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"get_rgbmode"</expr>,		<expr><name>forms_get_rgbmode</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"show_errors"</expr>,		<expr><name>forms_show_errors</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"set_font_name"</expr>,	<expr><name>forms_set_font_name</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,			<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>PyMODINIT_FUNC</name></type>
<name>initfl</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    
    <if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"the fl module has been removed in "
                       "Python 3.0"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
        <return>return;</return></then></if>
    
	<expr_stmt><expr><call><name>Py_InitModule</name><argument_list>(<argument><expr>"fl"</expr></argument>, <argument><expr><name>forms_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>foreground</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fl_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>



</unit>
