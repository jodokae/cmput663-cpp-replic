<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/rotatingtree.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rotatingtree.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_LOWER_THAN</name><parameter_list>(<param><type><name>key1</name></type></param>, <param><type><name>key2</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>((char*)(key1) &lt; (char*)(key2))</cpp:value></cpp:define>

<comment type="block">/* The randombits() function below is a fast-and-dirty generator that
 * is probably irregular enough for our purposes.  Note that it's biased:
 * I think that ones are slightly more probable than zeroes.  It's not
 * important here, though.
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>random_value</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>random_stream</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>randombits</name><parameter_list>(<param><decl><type><name>int</name></type> <name>bits</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>random_stream</name> &lt; (1U &lt;&lt; <name>bits</name>)</expr>)</condition><then> <block>{
		<expr_stmt><expr><name>random_value</name> *= 1082527</expr>;</expr_stmt>
		<expr_stmt><expr><name>random_stream</name> = <name>random_value</name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name>result</name> = <name>random_stream</name> &amp; ((1&lt;&lt;<name>bits</name>)-1)</expr>;</expr_stmt>
	<expr_stmt><expr><name>random_stream</name> &gt;&gt;= <name>bits</name></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
}</block></function>


<comment type="block">/* Insert a new node into the tree.
   (*root) is modified to point to the new root. */</comment>
<function><type><name>void</name></type>
<name>RotatingTree_Add</name><parameter_list>(<param><decl><type><name>rotating_node_t</name> **</type><name>root</name></decl></param>, <param><decl><type><name>rotating_node_t</name> *</type><name>node</name></decl></param>)</parameter_list>
<block>{
	<while>while <condition>(<expr>*<name>root</name> != <name>NULL</name></expr>)</condition> <block>{
		<if>if <condition>(<expr><call><name>KEY_LOWER_THAN</name><argument_list>(<argument><expr><name><name>node</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name>(*<name>root</name>)-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<expr_stmt><expr><name>root</name> = &amp;(<name>(*<name>root</name>)-&gt;<name>left</name></name>)</expr>;</expr_stmt></then>
		<else>else
			<expr_stmt><expr><name>root</name> = &amp;(<name>(*<name>root</name>)-&gt;<name>right</name></name>)</expr>;</expr_stmt></else></if>
	}</block></while>
	<expr_stmt><expr><name><name>node</name>-&gt;<name>left</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name>-&gt;<name>right</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr>*<name>root</name> = <name>node</name></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* Locate the node with the given key.  This is the most complicated
   function because it occasionally rebalances the tree to move the
   resulting node closer to the root. */</comment>
<function><type><name>rotating_node_t</name> *</type>
<name>RotatingTree_Get</name><parameter_list>(<param><decl><type><name>rotating_node_t</name> **</type><name>root</name></decl></param>, <param><decl><type><name>void</name> *</type><name>key</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><call><name>randombits</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call> != 4</expr>)</condition><then> <block>{
		<comment type="block">/* Fast path, no rebalancing */</comment>
		<decl_stmt><decl><type><name>rotating_node_t</name> *</type><name>node</name> <init>= <expr>*<name>root</name></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>node</name> != <name>NULL</name></expr>)</condition> <block>{
			<if>if <condition>(<expr><name><name>node</name>-&gt;<name>key</name></name> == <name>key</name></expr>)</condition><then>
				<return>return <expr><name>node</name></expr>;</return></then></if>
			<if>if <condition>(<expr><call><name>KEY_LOWER_THAN</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<expr_stmt><expr><name>node</name> = <name><name>node</name>-&gt;<name>left</name></name></expr>;</expr_stmt></then>
			<else>else
				<expr_stmt><expr><name>node</name> = <name><name>node</name>-&gt;<name>right</name></name></expr>;</expr_stmt></else></if>
		}</block></while>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then>
	<else>else <block>{
		<decl_stmt><decl><type><name>rotating_node_t</name> **</type><name>pnode</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>rotating_node_t</name> *</type><name>node</name> <init>= <expr>*<name>pnode</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>rotating_node_t</name> *</type><name>next</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>rotate</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>node</name> == <name>NULL</name></expr>)</condition><then>
			<return>return <expr><name>NULL</name></expr>;</return></then></if>
		<while>while <condition>(<expr>1</expr>)</condition> <block>{
			<if>if <condition>(<expr><name><name>node</name>-&gt;<name>key</name></name> == <name>key</name></expr>)</condition><then>
				<return>return <expr><name>node</name></expr>;</return></then></if>
			<expr_stmt><expr><name>rotate</name> = !<call><name>randombits</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><call><name>KEY_LOWER_THAN</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>next</name> = <name><name>node</name>-&gt;<name>left</name></name></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>next</name> == <name>NULL</name></expr>)</condition><then>
					<return>return <expr><name>NULL</name></expr>;</return></then></if>
				<if>if <condition>(<expr><name>rotate</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name><name>node</name>-&gt;<name>left</name></name> = <name><name>next</name>-&gt;<name>right</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>next</name>-&gt;<name>right</name></name> = <name>node</name></expr>;</expr_stmt>
					<expr_stmt><expr>*<name>pnode</name> = <name>next</name></expr>;</expr_stmt>
				}</block></then>
				<else>else
					<expr_stmt><expr><name>pnode</name> = &amp;(<name><name>node</name>-&gt;<name>left</name></name>)</expr>;</expr_stmt></else></if>
			}</block></then>
			<else>else <block>{
				<expr_stmt><expr><name>next</name> = <name><name>node</name>-&gt;<name>right</name></name></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>next</name> == <name>NULL</name></expr>)</condition><then>
					<return>return <expr><name>NULL</name></expr>;</return></then></if>
				<if>if <condition>(<expr><name>rotate</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name><name>node</name>-&gt;<name>right</name></name> = <name><name>next</name>-&gt;<name>left</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>next</name>-&gt;<name>left</name></name> = <name>node</name></expr>;</expr_stmt>
					<expr_stmt><expr>*<name>pnode</name> = <name>next</name></expr>;</expr_stmt>
				}</block></then>
				<else>else
					<expr_stmt><expr><name>pnode</name> = &amp;(<name><name>node</name>-&gt;<name>right</name></name>)</expr>;</expr_stmt></else></if>
			}</block></else></if>
			<expr_stmt><expr><name>node</name> = <name>next</name></expr>;</expr_stmt>
		}</block></while>
	}</block></else></if>
}</block></function>

<comment type="block">/* Enumerate all nodes in the tree.  The callback enumfn() should return
   zero to continue the enumeration, or non-zero to interrupt it.
   A non-zero value is directly returned by RotatingTree_Enum(). */</comment>
<function><type><name>int</name></type>
<name>RotatingTree_Enum</name><parameter_list>(<param><decl><type><name>rotating_node_t</name> *</type><name>root</name></decl></param>, <param><decl><type><name>rotating_tree_enum_fn</name></type> <name>enumfn</name></decl></param>,
		  <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rotating_node_t</name> *</type><name>node</name></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>root</name> != <name>NULL</name></expr>)</condition> <block>{
		<expr_stmt><expr><name>result</name> = <call><name>RotatingTree_Enum</name><argument_list>(<argument><expr><name><name>root</name>-&gt;<name>left</name></name></expr></argument>, <argument><expr><name>enumfn</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>result</name> != 0</expr>)</condition><then> <return>return <expr><name>result</name></expr>;</return></then></if>
		<expr_stmt><expr><name>node</name> = <name><name>root</name>-&gt;<name>right</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> = <call><name>enumfn</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>result</name> != 0</expr>)</condition><then> <return>return <expr><name>result</name></expr>;</return></then></if>
		<expr_stmt><expr><name>root</name> = <name>node</name></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr>0</expr>;</return>
}</block></function>
</unit>
