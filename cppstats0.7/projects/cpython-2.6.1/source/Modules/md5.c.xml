<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/md5.c"><comment type="block">/*
  Copyright (C) 1999, 2000, 2002 Aladdin Enterprises.  All rights reserved.

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  L. Peter Deutsch
  ghost@aladdin.com

 */</comment>
<comment type="block">/* $Id: md5.c,v 1.6 2002/04/13 19:20:28 lpd Exp $ */</comment>
<comment type="block">/*
  Independent implementation of MD5 (RFC 1321).

  This code implements the MD5 Algorithm defined in RFC 1321, whose
  text is available at
	http://www.ietf.org/rfc/rfc1321.txt
  The code is derived from the text of the RFC, including the test suite
  (section A.5) but excluding the rest of Appendix A.  It does not include
  any code or documentation that is identified in the RFC as being
  copyrighted.

  The original and principal author of md5.c is L. Peter Deutsch
  &lt;ghost@aladdin.com&gt;.  Other authors are noted in the change history
  that follows (in reverse chronological order):

  2002-04-13 lpd Clarified derivation from RFC 1321; now handles byte order
	either statically or dynamically; added missing #include &lt;string.h&gt;
	in library.
  2002-03-11 lpd Corrected argument list for main(), and added int return
	type, in test program and T value program.
  2002-02-21 lpd Added missing #include &lt;stdio.h&gt; in test program.
  2000-07-03 lpd Patched to eliminate warnings about "constant is
	unsigned in ANSI C, signed in traditional"; made test program
	self-checking.
  1999-11-04 lpd Edited comments slightly for automatic TOC extraction.
  1999-10-18 lpd Fixed typo in header comment (ansi2knr rather than md5).
  1999-05-03 lpd Original version.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BYTE_ORDER</name></cpp:undef>	<comment type="block">/* 1 = big-endian, -1 = little-endian, 0 = unknown */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ARCH_IS_BIG_ENDIAN</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE_ORDER</name></cpp:macro> <cpp:value>(ARCH_IS_BIG_ENDIAN ? 1 : -1)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE_ORDER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_MASK</name></cpp:macro> <cpp:value>((md5_word_t)~0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T1</name></cpp:macro> <comment type="block">/* 0xd76aa478 */</comment> <cpp:value>(T_MASK ^ 0x28955b87)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T2</name></cpp:macro> <comment type="block">/* 0xe8c7b756 */</comment> <cpp:value>(T_MASK ^ 0x173848a9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T3</name></cpp:macro>    <cpp:value>0x242070db</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T4</name></cpp:macro> <comment type="block">/* 0xc1bdceee */</comment> <cpp:value>(T_MASK ^ 0x3e423111)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T5</name></cpp:macro> <comment type="block">/* 0xf57c0faf */</comment> <cpp:value>(T_MASK ^ 0x0a83f050)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T6</name></cpp:macro>    <cpp:value>0x4787c62a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T7</name></cpp:macro> <comment type="block">/* 0xa8304613 */</comment> <cpp:value>(T_MASK ^ 0x57cfb9ec)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T8</name></cpp:macro> <comment type="block">/* 0xfd469501 */</comment> <cpp:value>(T_MASK ^ 0x02b96afe)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T9</name></cpp:macro>    <cpp:value>0x698098d8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T10</name></cpp:macro> <comment type="block">/* 0x8b44f7af */</comment> <cpp:value>(T_MASK ^ 0x74bb0850)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T11</name></cpp:macro> <comment type="block">/* 0xffff5bb1 */</comment> <cpp:value>(T_MASK ^ 0x0000a44e)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T12</name></cpp:macro> <comment type="block">/* 0x895cd7be */</comment> <cpp:value>(T_MASK ^ 0x76a32841)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T13</name></cpp:macro>    <cpp:value>0x6b901122</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T14</name></cpp:macro> <comment type="block">/* 0xfd987193 */</comment> <cpp:value>(T_MASK ^ 0x02678e6c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T15</name></cpp:macro> <comment type="block">/* 0xa679438e */</comment> <cpp:value>(T_MASK ^ 0x5986bc71)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T16</name></cpp:macro>    <cpp:value>0x49b40821</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T17</name></cpp:macro> <comment type="block">/* 0xf61e2562 */</comment> <cpp:value>(T_MASK ^ 0x09e1da9d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T18</name></cpp:macro> <comment type="block">/* 0xc040b340 */</comment> <cpp:value>(T_MASK ^ 0x3fbf4cbf)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T19</name></cpp:macro>    <cpp:value>0x265e5a51</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T20</name></cpp:macro> <comment type="block">/* 0xe9b6c7aa */</comment> <cpp:value>(T_MASK ^ 0x16493855)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T21</name></cpp:macro> <comment type="block">/* 0xd62f105d */</comment> <cpp:value>(T_MASK ^ 0x29d0efa2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T22</name></cpp:macro>    <cpp:value>0x02441453</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T23</name></cpp:macro> <comment type="block">/* 0xd8a1e681 */</comment> <cpp:value>(T_MASK ^ 0x275e197e)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T24</name></cpp:macro> <comment type="block">/* 0xe7d3fbc8 */</comment> <cpp:value>(T_MASK ^ 0x182c0437)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T25</name></cpp:macro>    <cpp:value>0x21e1cde6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T26</name></cpp:macro> <comment type="block">/* 0xc33707d6 */</comment> <cpp:value>(T_MASK ^ 0x3cc8f829)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T27</name></cpp:macro> <comment type="block">/* 0xf4d50d87 */</comment> <cpp:value>(T_MASK ^ 0x0b2af278)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T28</name></cpp:macro>    <cpp:value>0x455a14ed</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T29</name></cpp:macro> <comment type="block">/* 0xa9e3e905 */</comment> <cpp:value>(T_MASK ^ 0x561c16fa)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T30</name></cpp:macro> <comment type="block">/* 0xfcefa3f8 */</comment> <cpp:value>(T_MASK ^ 0x03105c07)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T31</name></cpp:macro>    <cpp:value>0x676f02d9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T32</name></cpp:macro> <comment type="block">/* 0x8d2a4c8a */</comment> <cpp:value>(T_MASK ^ 0x72d5b375)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T33</name></cpp:macro> <comment type="block">/* 0xfffa3942 */</comment> <cpp:value>(T_MASK ^ 0x0005c6bd)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T34</name></cpp:macro> <comment type="block">/* 0x8771f681 */</comment> <cpp:value>(T_MASK ^ 0x788e097e)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T35</name></cpp:macro>    <cpp:value>0x6d9d6122</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T36</name></cpp:macro> <comment type="block">/* 0xfde5380c */</comment> <cpp:value>(T_MASK ^ 0x021ac7f3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T37</name></cpp:macro> <comment type="block">/* 0xa4beea44 */</comment> <cpp:value>(T_MASK ^ 0x5b4115bb)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T38</name></cpp:macro>    <cpp:value>0x4bdecfa9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T39</name></cpp:macro> <comment type="block">/* 0xf6bb4b60 */</comment> <cpp:value>(T_MASK ^ 0x0944b49f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T40</name></cpp:macro> <comment type="block">/* 0xbebfbc70 */</comment> <cpp:value>(T_MASK ^ 0x4140438f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T41</name></cpp:macro>    <cpp:value>0x289b7ec6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T42</name></cpp:macro> <comment type="block">/* 0xeaa127fa */</comment> <cpp:value>(T_MASK ^ 0x155ed805)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T43</name></cpp:macro> <comment type="block">/* 0xd4ef3085 */</comment> <cpp:value>(T_MASK ^ 0x2b10cf7a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T44</name></cpp:macro>    <cpp:value>0x04881d05</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T45</name></cpp:macro> <comment type="block">/* 0xd9d4d039 */</comment> <cpp:value>(T_MASK ^ 0x262b2fc6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T46</name></cpp:macro> <comment type="block">/* 0xe6db99e5 */</comment> <cpp:value>(T_MASK ^ 0x1924661a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T47</name></cpp:macro>    <cpp:value>0x1fa27cf8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T48</name></cpp:macro> <comment type="block">/* 0xc4ac5665 */</comment> <cpp:value>(T_MASK ^ 0x3b53a99a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T49</name></cpp:macro> <comment type="block">/* 0xf4292244 */</comment> <cpp:value>(T_MASK ^ 0x0bd6ddbb)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T50</name></cpp:macro>    <cpp:value>0x432aff97</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T51</name></cpp:macro> <comment type="block">/* 0xab9423a7 */</comment> <cpp:value>(T_MASK ^ 0x546bdc58)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T52</name></cpp:macro> <comment type="block">/* 0xfc93a039 */</comment> <cpp:value>(T_MASK ^ 0x036c5fc6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T53</name></cpp:macro>    <cpp:value>0x655b59c3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T54</name></cpp:macro> <comment type="block">/* 0x8f0ccc92 */</comment> <cpp:value>(T_MASK ^ 0x70f3336d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T55</name></cpp:macro> <comment type="block">/* 0xffeff47d */</comment> <cpp:value>(T_MASK ^ 0x00100b82)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T56</name></cpp:macro> <comment type="block">/* 0x85845dd1 */</comment> <cpp:value>(T_MASK ^ 0x7a7ba22e)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T57</name></cpp:macro>    <cpp:value>0x6fa87e4f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T58</name></cpp:macro> <comment type="block">/* 0xfe2ce6e0 */</comment> <cpp:value>(T_MASK ^ 0x01d3191f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T59</name></cpp:macro> <comment type="block">/* 0xa3014314 */</comment> <cpp:value>(T_MASK ^ 0x5cfebceb)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T60</name></cpp:macro>    <cpp:value>0x4e0811a1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T61</name></cpp:macro> <comment type="block">/* 0xf7537e82 */</comment> <cpp:value>(T_MASK ^ 0x08ac817d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T62</name></cpp:macro> <comment type="block">/* 0xbd3af235 */</comment> <cpp:value>(T_MASK ^ 0x42c50dca)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T63</name></cpp:macro>    <cpp:value>0x2ad7d2bb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T64</name></cpp:macro> <comment type="block">/* 0xeb86d391 */</comment> <cpp:value>(T_MASK ^ 0x14792c6e)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>md5_process</name><parameter_list>(<param><decl><type><name>md5_state_t</name> *</type><name>pms</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>md5_byte_t</name> *</type><name>data</name></decl></param> <comment type="block">/*[64]*/</comment>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>md5_word_t</name></type>
	<name>a</name> <init>= <expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>0</expr>]</index></name></expr></init>, <name>b</name> <init>= <expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>1</expr>]</index></name></expr></init>,
	<name>c</name> <init>= <expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>2</expr>]</index></name></expr></init>, <name>d</name> <init>= <expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>3</expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>md5_word_t</name></type> <name>t</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> &gt; 0</expr></cpp:if>
    <comment type="block">/* Define storage only for big-endian CPUs. */</comment>
    <decl_stmt><decl><type><name>md5_word_t</name></type> <name><name>X</name><index>[<expr>16</expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Define storage for little-endian or both types of CPUs. */</comment>
    <decl_stmt><decl><type><name>md5_word_t</name></type> <name><name>xbuf</name><index>[<expr>16</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>md5_word_t</name> *</type><name>X</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> == 0</expr></cpp:if>
	<comment type="block">/*
	 * Determine dynamically whether this is a big-endian or
	 * little-endian machine, since we can use a more efficient
	 * algorithm on the latter.
	 */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr>*((const <name>md5_byte_t</name> *)&amp;<name>w</name>)</expr>)</condition><then> <comment type="block">/* dynamic little-endian */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> &lt;= 0</expr></cpp:if>		<comment type="block">/* little-endian */</comment>
	<block>{
	    <comment type="block">/*
	     * On little-endian machines, we can process properly aligned
	     * data without copying it.
	     */</comment>
	    <if>if <condition>(<expr>!((<name>data</name> - (const <name>md5_byte_t</name> *)0) &amp; 3)</expr>)</condition><then> <block>{
		<comment type="block">/* data are properly aligned */</comment>
		<expr_stmt><expr><name>X</name> = (const <name>md5_word_t</name> *)<name>data</name></expr>;</expr_stmt>
	    }</block></then> <else>else <block>{
		<comment type="block">/* not aligned */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>xbuf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>64</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>X</name> = <name>xbuf</name></expr>;</expr_stmt>
	    }</block></else></if>
	}</block></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> == 0</expr></cpp:if>
	<else>else			<comment type="block">/* dynamic big-endian */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> &gt;= 0</expr></cpp:if>		<comment type="block">/* big-endian */</comment>
	<block>{
	    <comment type="block">/*
	     * On big-endian machines, we must arrange the bytes in the
	     * right order.
	     */</comment>
	    <decl_stmt><decl><type><specifier>const</specifier> <name>md5_byte_t</name> *</type><name>xp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> == 0</expr></cpp:if>
	    <expr_stmt><expr><name>X</name> = <name>xbuf</name></expr>;</expr_stmt>		<comment type="block">/* (dynamic only) */</comment>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>xbuf</name></cpp:macro> <cpp:value>X</cpp:value></cpp:define>		<comment type="block">/* (static only) */</comment>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
	    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 16</expr>;</condition> <incr><expr>++<name>i</name></expr>, <expr><name>xp</name> += 4</expr></incr>)
		<expr_stmt><expr><name><name>xbuf</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>xp</name><index>[<expr>0</expr>]</index></name> + (<name><name>xp</name><index>[<expr>1</expr>]</index></name> &lt;&lt; 8) + (<name><name>xp</name><index>[<expr>2</expr>]</index></name> &lt;&lt; 16) + (<name><name>xp</name><index>[<expr>3</expr>]</index></name> &lt;&lt; 24)</expr>;</expr_stmt></for>
	}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTATE_LEFT</name><parameter_list>(<param><type><name>x</name></type></param>, <param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((x) &lt;&lt; (n)) | ((x) &gt;&gt; (32 - (n))))</cpp:value></cpp:define>

    <comment type="block">/* Round 1. */</comment>
    <comment type="block">/* Let [abcd k s i] denote the operation
       a = b + ((a + F(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s). */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<param><type><name>x</name></type></param>, <param><type><name>y</name></type></param>, <param><type><name>z</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; (y)) | (~(x) &amp; (z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<param><type><name>a</name></type></param>, <param><type><name>b</name></type></param>, <param><type><name>c</name></type></param>, <param><type><name>d</name></type></param>, <param><type><name>k</name></type></param>, <param><type><name>s</name></type></param>, <param><type><name>Ti</name></type></param>)</parameter_list></cpp:macro>\
  <cpp:value>t = a + F(b,c,d) + X[k] + Ti;\
  a = ROTATE_LEFT(t, s) + b</cpp:value></cpp:define>
    <comment type="block">/* Do the following 16 operations. */</comment>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,  <argument><expr>0</expr></argument>,  <argument><expr>7</expr></argument>,  <argument><expr><name>T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,  <argument><expr>1</expr></argument>, <argument><expr>12</expr></argument>,  <argument><expr><name>T2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>,  <argument><expr>2</expr></argument>, <argument><expr>17</expr></argument>,  <argument><expr><name>T3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>,  <argument><expr>3</expr></argument>, <argument><expr>22</expr></argument>,  <argument><expr><name>T4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,  <argument><expr>4</expr></argument>,  <argument><expr>7</expr></argument>,  <argument><expr><name>T5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,  <argument><expr>5</expr></argument>, <argument><expr>12</expr></argument>,  <argument><expr><name>T6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>,  <argument><expr>6</expr></argument>, <argument><expr>17</expr></argument>,  <argument><expr><name>T7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>,  <argument><expr>7</expr></argument>, <argument><expr>22</expr></argument>,  <argument><expr><name>T8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,  <argument><expr>8</expr></argument>,  <argument><expr>7</expr></argument>,  <argument><expr><name>T9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,  <argument><expr>9</expr></argument>, <argument><expr>12</expr></argument>, <argument><expr><name>T10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr>17</expr></argument>, <argument><expr><name>T11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>11</expr></argument>, <argument><expr>22</expr></argument>, <argument><expr><name>T12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>12</expr></argument>,  <argument><expr>7</expr></argument>, <argument><expr><name>T13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>13</expr></argument>, <argument><expr>12</expr></argument>, <argument><expr><name>T14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>14</expr></argument>, <argument><expr>17</expr></argument>, <argument><expr><name>T15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>15</expr></argument>, <argument><expr>22</expr></argument>, <argument><expr><name>T16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET</name></cpp:undef>

     <comment type="block">/* Round 2. */</comment>
     <comment type="block">/* Let [abcd k s i] denote the operation
          a = b + ((a + G(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s). */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G</name><parameter_list>(<param><type><name>x</name></type></param>, <param><type><name>y</name></type></param>, <param><type><name>z</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; (z)) | ((y) &amp; ~(z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<param><type><name>a</name></type></param>, <param><type><name>b</name></type></param>, <param><type><name>c</name></type></param>, <param><type><name>d</name></type></param>, <param><type><name>k</name></type></param>, <param><type><name>s</name></type></param>, <param><type><name>Ti</name></type></param>)</parameter_list></cpp:macro>\
  <cpp:value>t = a + G(b,c,d) + X[k] + Ti;\
  a = ROTATE_LEFT(t, s) + b</cpp:value></cpp:define>
     <comment type="block">/* Do the following 16 operations. */</comment>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,  <argument><expr>1</expr></argument>,  <argument><expr>5</expr></argument>, <argument><expr><name>T17</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,  <argument><expr>6</expr></argument>,  <argument><expr>9</expr></argument>, <argument><expr><name>T18</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>11</expr></argument>, <argument><expr>14</expr></argument>, <argument><expr><name>T19</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>,  <argument><expr>0</expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>T20</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,  <argument><expr>5</expr></argument>,  <argument><expr>5</expr></argument>, <argument><expr><name>T21</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>10</expr></argument>,  <argument><expr>9</expr></argument>, <argument><expr><name>T22</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>15</expr></argument>, <argument><expr>14</expr></argument>, <argument><expr><name>T23</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>,  <argument><expr>4</expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>T24</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,  <argument><expr>9</expr></argument>,  <argument><expr>5</expr></argument>, <argument><expr><name>T25</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>14</expr></argument>,  <argument><expr>9</expr></argument>, <argument><expr><name>T26</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>,  <argument><expr>3</expr></argument>, <argument><expr>14</expr></argument>, <argument><expr><name>T27</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>,  <argument><expr>8</expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>T28</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>13</expr></argument>,  <argument><expr>5</expr></argument>, <argument><expr><name>T29</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,  <argument><expr>2</expr></argument>,  <argument><expr>9</expr></argument>, <argument><expr><name>T30</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>,  <argument><expr>7</expr></argument>, <argument><expr>14</expr></argument>, <argument><expr><name>T31</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>12</expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>T32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET</name></cpp:undef>

     <comment type="block">/* Round 3. */</comment>
     <comment type="block">/* Let [abcd k s t] denote the operation
          a = b + ((a + H(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s). */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H</name><parameter_list>(<param><type><name>x</name></type></param>, <param><type><name>y</name></type></param>, <param><type><name>z</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x) ^ (y) ^ (z))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<param><type><name>a</name></type></param>, <param><type><name>b</name></type></param>, <param><type><name>c</name></type></param>, <param><type><name>d</name></type></param>, <param><type><name>k</name></type></param>, <param><type><name>s</name></type></param>, <param><type><name>Ti</name></type></param>)</parameter_list></cpp:macro>\
  <cpp:value>t = a + H(b,c,d) + X[k] + Ti;\
  a = ROTATE_LEFT(t, s) + b</cpp:value></cpp:define>
     <comment type="block">/* Do the following 16 operations. */</comment>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,  <argument><expr>5</expr></argument>,  <argument><expr>4</expr></argument>, <argument><expr><name>T33</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,  <argument><expr>8</expr></argument>, <argument><expr>11</expr></argument>, <argument><expr><name>T34</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>11</expr></argument>, <argument><expr>16</expr></argument>, <argument><expr><name>T35</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>14</expr></argument>, <argument><expr>23</expr></argument>, <argument><expr><name>T36</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,  <argument><expr>1</expr></argument>,  <argument><expr>4</expr></argument>, <argument><expr><name>T37</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,  <argument><expr>4</expr></argument>, <argument><expr>11</expr></argument>, <argument><expr><name>T38</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>,  <argument><expr>7</expr></argument>, <argument><expr>16</expr></argument>, <argument><expr><name>T39</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr>23</expr></argument>, <argument><expr><name>T40</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>13</expr></argument>,  <argument><expr>4</expr></argument>, <argument><expr><name>T41</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,  <argument><expr>0</expr></argument>, <argument><expr>11</expr></argument>, <argument><expr><name>T42</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>,  <argument><expr>3</expr></argument>, <argument><expr>16</expr></argument>, <argument><expr><name>T43</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>,  <argument><expr>6</expr></argument>, <argument><expr>23</expr></argument>, <argument><expr><name>T44</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,  <argument><expr>9</expr></argument>,  <argument><expr>4</expr></argument>, <argument><expr><name>T45</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>12</expr></argument>, <argument><expr>11</expr></argument>, <argument><expr><name>T46</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>15</expr></argument>, <argument><expr>16</expr></argument>, <argument><expr><name>T47</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>,  <argument><expr>2</expr></argument>, <argument><expr>23</expr></argument>, <argument><expr><name>T48</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET</name></cpp:undef>

     <comment type="block">/* Round 4. */</comment>
     <comment type="block">/* Let [abcd k s t] denote the operation
          a = b + ((a + I(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s). */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I</name><parameter_list>(<param><type><name>x</name></type></param>, <param><type><name>y</name></type></param>, <param><type><name>z</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((y) ^ ((x) | ~(z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<param><type><name>a</name></type></param>, <param><type><name>b</name></type></param>, <param><type><name>c</name></type></param>, <param><type><name>d</name></type></param>, <param><type><name>k</name></type></param>, <param><type><name>s</name></type></param>, <param><type><name>Ti</name></type></param>)</parameter_list></cpp:macro>\
  <cpp:value>t = a + I(b,c,d) + X[k] + Ti;\
  a = ROTATE_LEFT(t, s) + b</cpp:value></cpp:define>
     <comment type="block">/* Do the following 16 operations. */</comment>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,  <argument><expr>0</expr></argument>,  <argument><expr>6</expr></argument>, <argument><expr><name>T49</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,  <argument><expr>7</expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><name>T50</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>14</expr></argument>, <argument><expr>15</expr></argument>, <argument><expr><name>T51</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>,  <argument><expr>5</expr></argument>, <argument><expr>21</expr></argument>, <argument><expr><name>T52</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>12</expr></argument>,  <argument><expr>6</expr></argument>, <argument><expr><name>T53</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,  <argument><expr>3</expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><name>T54</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr>15</expr></argument>, <argument><expr><name>T55</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>,  <argument><expr>1</expr></argument>, <argument><expr>21</expr></argument>, <argument><expr><name>T56</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,  <argument><expr>8</expr></argument>,  <argument><expr>6</expr></argument>, <argument><expr><name>T57</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>15</expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><name>T58</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>,  <argument><expr>6</expr></argument>, <argument><expr>15</expr></argument>, <argument><expr><name>T59</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>13</expr></argument>, <argument><expr>21</expr></argument>, <argument><expr><name>T60</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,  <argument><expr>4</expr></argument>,  <argument><expr>6</expr></argument>, <argument><expr><name>T61</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>11</expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><name>T62</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>,  <argument><expr>2</expr></argument>, <argument><expr>15</expr></argument>, <argument><expr><name>T63</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>,  <argument><expr>9</expr></argument>, <argument><expr>21</expr></argument>, <argument><expr><name>T64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET</name></cpp:undef>

     <comment type="block">/* Then perform the following additions. (That is increment each
        of the four registers by the value it had before this block
        was started.) */</comment>
    <expr_stmt><expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>0</expr>]</index></name> += <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>1</expr>]</index></name> += <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>2</expr>]</index></name> += <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>3</expr>]</index></name> += <name>d</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>md5_init</name><parameter_list>(<param><decl><type><name>md5_state_t</name> *</type><name>pms</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>pms</name>-&gt;<name>count</name><index>[<expr>0</expr>]</index></name> = <name><name>pms</name>-&gt;<name>count</name><index>[<expr>1</expr>]</index></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>0</expr>]</index></name> = 0x67452301</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>1</expr>]</index></name> = <comment type="block">/*0xefcdab89*/</comment> <name>T_MASK</name> ^ 0x10325476</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>2</expr>]</index></name> = <comment type="block">/*0x98badcfe*/</comment> <name>T_MASK</name> ^ 0x67452301</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>3</expr>]</index></name> = 0x10325476</expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>md5_append</name><parameter_list>(<param><decl><type><name>md5_state_t</name> *</type><name>pms</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>md5_byte_t</name> *</type><name>data</name></decl></param>, <param><decl><type><name>int</name></type> <name>nbytes</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>md5_byte_t</name> *</type><name>p</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><name>nbytes</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr>(<name><name>pms</name>-&gt;<name>count</name><index>[<expr>0</expr>]</index></name> &gt;&gt; 3) &amp; 63</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>md5_word_t</name></type> <name>nbits</name> <init>= <expr><call>(<name>md5_word_t</name>)<argument_list>(<argument><expr><name>nbytes</name> &lt;&lt; 3</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>nbytes</name> &lt;= 0</expr>)</condition><then>
	<return>return;</return></then></if>

    <comment type="block">/* this special case is handled recursively */</comment>
    <if>if <condition>(<expr><name>nbytes</name> &gt; <name>INT_MAX</name> - <name>offset</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>overlap</name></decl>;</decl_stmt>

        <comment type="block">/* handle the append in two steps to prevent overflow */</comment>
        <expr_stmt><expr><name>overlap</name> = 64 - <name>offset</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>md5_append</name><argument_list>(<argument><expr><name>pms</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>overlap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>md5_append</name><argument_list>(<argument><expr><name>pms</name></expr></argument>, <argument><expr><name>data</name> + <name>overlap</name></expr></argument>, <argument><expr><name>nbytes</name> - <name>overlap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <return>return;</return>
    }</block></then></if>

    <comment type="block">/* Update the message length. */</comment>
    <expr_stmt><expr><name><name>pms</name>-&gt;<name>count</name><index>[<expr>1</expr>]</index></name> += <name>nbytes</name> &gt;&gt; 29</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pms</name>-&gt;<name>count</name><index>[<expr>0</expr>]</index></name> += <name>nbits</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>pms</name>-&gt;<name>count</name><index>[<expr>0</expr>]</index></name> &lt; <name>nbits</name></expr>)</condition><then>
	<expr_stmt><expr><name><name>pms</name>-&gt;<name>count</name><index>[<expr>1</expr>]</index></name>++</expr>;</expr_stmt></then></if>

    <comment type="block">/* Process an initial partial block. */</comment>
    <if>if <condition>(<expr><name>offset</name></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>copy</name> <init>= <expr>(<name>offset</name> + <name>nbytes</name> &gt; 64 ? 64 - <name>offset</name> : <name>nbytes</name>)</expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pms</name>-&gt;<name>buf</name></name> + <name>offset</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>offset</name> + <name>copy</name> &lt; 64</expr>)</condition><then>
	    <return>return;</return></then></if>
	<expr_stmt><expr><name>p</name> += <name>copy</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>left</name> -= <name>copy</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>md5_process</name><argument_list>(<argument><expr><name>pms</name></expr></argument>, <argument><expr><name><name>pms</name>-&gt;<name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* Process full blocks. */</comment>
    <for>for (<init>;</init> <condition><expr><name>left</name> &gt;= 64</expr>;</condition> <incr><expr><name>p</name> += 64</expr>, <expr><name>left</name> -= 64</expr></incr>)
	<expr_stmt><expr><call><name>md5_process</name><argument_list>(<argument><expr><name>pms</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

    <comment type="block">/* Process a final partial block. */</comment>
    <if>if <condition>(<expr><name>left</name></expr>)</condition><then>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pms</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name>void</name></type>
<name>md5_finish</name><parameter_list>(<param><decl><type><name>md5_state_t</name> *</type><name>pms</name></decl></param>, <param><decl><type><name>md5_byte_t</name></type> <name><name>digest</name><index>[<expr>16</expr>]</index></name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>md5_byte_t</name></type> <name><name>pad</name><index>[<expr>64</expr>]</index></name> <init>= <expr><block>{
	<expr>0x80</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
	<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
	<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
	<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>md5_byte_t</name></type> <name><name>data</name><index>[<expr>8</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* Save the length before padding. */</comment>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 8</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
	<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = <call>(<name>md5_byte_t</name>)<argument_list>(<argument><expr><name><name>pms</name>-&gt;<name>count</name><index>[<expr><name>i</name> &gt;&gt; 2</expr>]</index></name> &gt;&gt; ((<name>i</name> &amp; 3) &lt;&lt; 3)</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
    <comment type="block">/* Pad to 56 bytes mod 64. */</comment>
    <expr_stmt><expr><call><name>md5_append</name><argument_list>(<argument><expr><name>pms</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr>((55 - (<name><name>pms</name>-&gt;<name>count</name><index>[<expr>0</expr>]</index></name> &gt;&gt; 3)) &amp; 63) + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Append the length. */</comment>
    <expr_stmt><expr><call><name>md5_append</name><argument_list>(<argument><expr><name>pms</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 16</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
	<expr_stmt><expr><name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name> = <call>(<name>md5_byte_t</name>)<argument_list>(<argument><expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr><name>i</name> &gt;&gt; 2</expr>]</index></name> &gt;&gt; ((<name>i</name> &amp; 3) &lt;&lt; 3)</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
}</block></function>
</unit>
