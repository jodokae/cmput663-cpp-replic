<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_functoolsmodule.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>

<comment type="block">/* _functools module written and maintained 
   by Hye-Shik Chang &lt;perky@FreeBSD.org&gt;
   with adaptations by Raymond Hettinger &lt;python@rcn.com&gt;
   Copyright (c) 2004, 2005, 2006 Python Software Foundation.
   All rights reserved.
*/</comment>

<comment type="block">/* reduce() *************************************************************/</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>functools_reduce</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>seq</name></decl>, *<decl><type ref="prev"/><name>func</name></decl>, *<decl><type ref="prev"/><name>result</name> <init>= <expr><name>NULL</name></expr></init>, *<name>it</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"reduce"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>func</name></expr></argument>, <argument><expr>&amp;<name>seq</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr><name>result</name> != <name>NULL</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<expr_stmt><expr><name>it</name> = <call><name>PyObject_GetIter</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
		    <argument><expr>"reduce() arg 2 must support iteration"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<if>if <condition>(<expr>(<name>args</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
		<goto>goto <name>Fail</name>;</goto></then></if>

	<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
		<decl_stmt><decl><type><name>PyObject</name> *</type><name>op2</name></decl>;</decl_stmt>

		<if>if <condition>(<expr><name><name>args</name>-&gt;<name>ob_refcnt</name></name> &gt; 1</expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr>(<name>args</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
				<goto>goto <name>Fail</name>;</goto></then></if>
		}</block></then></if>

		<expr_stmt><expr><name>op2</name> = <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>op2</name> == <name>NULL</name></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
				<goto>goto <name>Fail</name>;</goto></then></if>
 			<break>break;</break>
		}</block></then></if>

		<if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
			<expr_stmt><expr><name>result</name> = <name>op2</name></expr>;</expr_stmt></then>
		<else>else <block>{
			<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr>(<name>result</name> = <call><name>PyEval_CallObject</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
				<goto>goto <name>Fail</name>;</goto></then></if>
		}</block></else></if>
	}</block></for>

	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
			   <argument><expr>"reduce() of empty sequence with no initial value"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>

<label><name>Fail</name>:</label>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>reduce_doc</name></expr></argument>,
<argument><expr>"reduce(function, sequence[, initial]) -&gt; value\n\
\n\
Apply a function of two arguments cumulatively to the items of a sequence,\n\
from left to right, so as to reduce the sequence to a single value.\n\
For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates\n\
((((1+2)+3)+4)+5).  If initial is present, it is placed before the items\n\
of the sequence in the calculation, and serves as a default when the\n\
sequence is empty."</expr></argument>)</argument_list></call></expr>;</expr_stmt>




<comment type="block">/* partial object **********************************************************/</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>PyObject</name> *</type><name>fn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>kw</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>weakreflist</name></decl>;</decl_stmt> <comment type="block">/* List of weak references */</comment>
}</block></struct></type> <name>partialobject</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>partial_type</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>partial_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>func</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>partialobject</name> *</type><name>pto</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> &lt; 1</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
				<argument><expr>"type 'partial' takes at least one argument"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><name>func</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<call><name>PyCallable_Check</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
				<argument><expr>"the first argument must be callable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<comment type="block">/* create partialobject structure */</comment>
	<expr_stmt><expr><name>pto</name> = (<name>partialobject</name> *)<call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>pto</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name><name>pto</name>-&gt;<name>fn</name></name> = <name>func</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pto</name>-&gt;<name>args</name></name> = <call><name>PyTuple_GetSlice</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>PY_SSIZE_T_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name><name>pto</name>-&gt;<name>args</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>pto</name>-&gt;<name>kw</name></name> = <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr><name>kw</name> != <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>pto</name>-&gt;<name>kw</name></name> = <call><name>PyDict_Copy</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>pto</name>-&gt;<name>kw</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		}</block></then></if>
	}</block></then> <else>else <block>{
		<expr_stmt><expr><name><name>pto</name>-&gt;<name>kw</name></name> = <name>Py_None</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>

	<expr_stmt><expr><name><name>pto</name>-&gt;<name>weakreflist</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pto</name>-&gt;<name>dict</name></name> = <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr>(<name>PyObject</name> *)<name>pto</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>partial_dealloc</name><parameter_list>(<param><decl><type><name>partialobject</name> *</type><name>pto</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><name>pto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name><name>pto</name>-&gt;<name>weakreflist</name></name> != <name>NULL</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>PyObject_ClearWeakRefs</name><argument_list>(<argument><expr>(<name>PyObject</name> *) <name>pto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>pto</name>-&gt;<name>fn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>pto</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>pto</name>-&gt;<name>kw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>pto</name>-&gt;<name>dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>pto</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr><name>pto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>partial_call</name><parameter_list>(<param><decl><type><name>partialobject</name> *</type><name>pto</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>argappl</name> <init>= <expr><name>NULL</name></expr></init>, *<name>kwappl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>PyCallable_Check</name><argument_list>(<argument><expr><name><name>pto</name>-&gt;<name>fn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>PyTuple_Check</name><argument_list>(<argument><expr><name><name>pto</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>pto</name>-&gt;<name>kw</name></name> == <name>Py_None</name>  ||  <call><name>PyDict_Check</name><argument_list>(<argument><expr><name><name>pto</name>-&gt;<name>kw</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name><name>pto</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><name>argappl</name> = <name>args</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <if>if <condition>(<expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><name>argappl</name> = <name><name>pto</name>-&gt;<name>args</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>pto</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
		<expr_stmt><expr><name>argappl</name> = <call><name>PySequence_Concat</name><argument_list>(<argument><expr><name><name>pto</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>argappl</name> == <name>NULL</name></expr>)</condition><then>
			<return>return <expr><name>NULL</name></expr>;</return></then></if>
	}</block></else></if></else></if>

	<if>if <condition>(<expr><name><name>pto</name>-&gt;<name>kw</name></name> == <name>Py_None</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>kwappl</name> = <name>kw</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
		<expr_stmt><expr><name>kwappl</name> = <call><name>PyDict_Copy</name><argument_list>(<argument><expr><name><name>pto</name>-&gt;<name>kw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>kwappl</name> == <name>NULL</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>argappl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		}</block></then></if>
		<if>if <condition>(<expr><name>kw</name> != <name>NULL</name></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><call><name>PyDict_Merge</name><argument_list>(<argument><expr><name>kwappl</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>argappl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>kwappl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>NULL</name></expr>;</return>
			}</block></then></if>
		}</block></then></if>
	}</block></else></if>

	<expr_stmt><expr><name>ret</name> = <call><name>PyObject_Call</name><argument_list>(<argument><expr><name><name>pto</name>-&gt;<name>fn</name></name></expr></argument>, <argument><expr><name>argappl</name></expr></argument>, <argument><expr><name>kwappl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>argappl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>kwappl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>partial_traverse</name><parameter_list>(<param><decl><type><name>partialobject</name> *</type><name>pto</name></decl></param>, <param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>pto</name>-&gt;<name>fn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>pto</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>pto</name>-&gt;<name>kw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>pto</name>-&gt;<name>dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>0</expr>;</return>
}</block></function>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>partial_doc</name></expr></argument>,
<argument><expr>"partial(func, *args, **keywords) - new function with partial application\n\
	of the given arguments and keywords.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>offsetof(partialobject, x)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>partial_memberlist</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"func"</expr>,	<expr><name>T_OBJECT</name></expr>,	<expr><call><name>OFF</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>,	<expr><name>READONLY</name></expr>,
	 <expr>"function object to use in future partial calls"</expr>}</block></expr>,
	<expr><block>{<expr>"args"</expr>,	<expr><name>T_OBJECT</name></expr>,	<expr><call><name>OFF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>,	<expr><name>READONLY</name></expr>,
	 <expr>"tuple of arguments to future partial calls"</expr>}</block></expr>,
	<expr><block>{<expr>"keywords"</expr>,	<expr><name>T_OBJECT</name></expr>,	<expr><call><name>OFF</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr>,	<expr><name>READONLY</name></expr>,
	 <expr>"dictionary of keyword arguments to future partial calls"</expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>}</block></expr>  <comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>partial_get_dict</name><parameter_list>(<param><decl><type><name>partialobject</name> *</type><name>pto</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>pto</name>-&gt;<name>dict</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>pto</name>-&gt;<name>dict</name></name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>pto</name>-&gt;<name>dict</name></name> == <name>NULL</name></expr>)</condition><then>
			<return>return <expr><name>NULL</name></expr>;</return></then></if>
	}</block></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>pto</name>-&gt;<name>dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>pto</name>-&gt;<name>dict</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>partial_set_dict</name><parameter_list>(<param><decl><type><name>partialobject</name> *</type><name>pto</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>value</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>tmp</name></decl>;</decl_stmt>

	<comment type="block">/* It is illegal to del p.__dict__ */</comment>
	<if>if <condition>(<expr><name>value</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
				<argument><expr>"a partial object's dictionary may not be deleted"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>-1</expr>;</return>
	}</block></then></if>
	<comment type="block">/* Can only set __dict__ to a dictionary */</comment>
	<if>if <condition>(<expr>!<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
				<argument><expr>"setting partial object's dictionary to a non-dict"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>-1</expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>tmp</name> = <name><name>pto</name>-&gt;<name>dict</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pto</name>-&gt;<name>dict</name></name> = <name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>0</expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>partial_getsetlist</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"__dict__"</expr>, <expr>(<name>getter</name>)<name>partial_get_dict</name></expr>, <expr>(<name>setter</name>)<name>partial_set_dict</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>}</block></expr> <comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>partial_type</name> <init>= <expr><block>{
	<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
	"functools.partial"</expr>,		<comment type="block">/* tp_name */</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>partialobject</name></expr></argument>)</argument_list></sizeof></expr>,		<comment type="block">/* tp_basicsize */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_itemsize */</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>)<name>partial_dealloc</name></expr>,	<comment type="block">/* tp_dealloc */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_print */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_getattr */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_setattr */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_compare */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_repr */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_as_number */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_as_sequence */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_as_mapping */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_hash */</comment>
	<expr>(<name>ternaryfunc</name>)<name>partial_call</name></expr>,	<comment type="block">/* tp_call */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_str */</comment>
	<expr><name>PyObject_GenericGetAttr</name></expr>,	<comment type="block">/* tp_getattro */</comment>
	<expr><name>PyObject_GenericSetAttr</name></expr>,	<comment type="block">/* tp_setattro */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_as_buffer */</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name> |
		<name>Py_TPFLAGS_BASETYPE</name> | <name>Py_TPFLAGS_HAVE_WEAKREFS</name></expr>,	<comment type="block">/* tp_flags */</comment>
	<expr><name>partial_doc</name></expr>,			<comment type="block">/* tp_doc */</comment>
	<expr>(<name>traverseproc</name>)<name>partial_traverse</name></expr>,	<comment type="block">/* tp_traverse */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_clear */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_richcompare */</comment>
	<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>partialobject</name></expr></argument>, <argument><expr><name>weakreflist</name></expr></argument>)</argument_list></call></expr>,	<comment type="block">/* tp_weaklistoffset */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_iter */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_iternext */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_methods */</comment>
	<expr><name>partial_memberlist</name></expr>,		<comment type="block">/* tp_members */</comment>
	<expr><name>partial_getsetlist</name></expr>,		<comment type="block">/* tp_getset */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_base */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_dict */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_descr_get */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_descr_set */</comment>
	<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>partialobject</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>,	<comment type="block">/* tp_dictoffset */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_init */</comment>
	<expr>0</expr>,				<comment type="block">/* tp_alloc */</comment>
	<expr><name>partial_new</name></expr>,			<comment type="block">/* tp_new */</comment>
	<expr><name>PyObject_GC_Del</name></expr>,		<comment type="block">/* tp_free */</comment>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* module level code ********************************************************/</comment>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>module_doc</name></expr></argument>,
<argument><expr>"Tools that operate on functions."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>module_methods</name><index>[]</index></name> <init>= <expr><block>{
 	<expr><block>{<expr>"reduce"</expr>,	<expr><name>functools_reduce</name></expr>,     <expr><name>METH_VARARGS</name></expr>, <expr><name>reduce_doc</name></expr>}</block></expr>,
 	<expr><block>{<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>PyMODINIT_FUNC</name></type>
<name>init_functools</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyTypeObject</name> *</type><name><name>typelist</name><index>[]</index></name> <init>= <expr><block>{
		<expr>&amp;<name>partial_type</name></expr>,
		<expr><name>NULL</name></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule3</name><argument_list>(<argument><expr>"_functools"</expr></argument>, <argument><expr><name>module_methods</name></expr></argument>, <argument><expr><name>module_doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
		<return>return;</return></then></if>

	<for>for (<init><expr><name>i</name>=0</expr> ;</init> <condition><expr><name><name>typelist</name><index>[<expr><name>i</name></expr>]</index></name> != <name>NULL</name></expr> ;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
		<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr><name><name>typelist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
			<return>return;</return></then></if>
		<expr_stmt><expr><name>name</name> = <call><name>strchr</name><argument_list>(<argument><expr><name><name>typelist</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>tp_name</name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>name</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>typelist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>name</name>+1</expr></argument>, <argument><expr>(<name>PyObject</name> *)<name><name>typelist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>
</unit>
