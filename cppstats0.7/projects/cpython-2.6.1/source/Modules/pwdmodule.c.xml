<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/pwdmodule.c">
<comment type="block">/* UNIX password file access module */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structseq.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyStructSequence_Field</name></type> <name><name>struct_pwd_type_fields</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"pw_name"</expr>, <expr>"user name"</expr>}</block></expr>,
	<expr><block>{<expr>"pw_passwd"</expr>, <expr>"password"</expr>}</block></expr>,
	<expr><block>{<expr>"pw_uid"</expr>, <expr>"user id"</expr>}</block></expr>,
	<expr><block>{<expr>"pw_gid"</expr>, <expr>"group id"</expr>}</block></expr>, 
	<expr><block>{<expr>"pw_gecos"</expr>, <expr>"real name"</expr>}</block></expr>, 
	<expr><block>{<expr>"pw_dir"</expr>, <expr>"home directory"</expr>}</block></expr>,
	<expr><block>{<expr>"pw_shell"</expr>, <expr>"shell program"</expr>}</block></expr>,
	<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>struct_passwd__doc__</name></expr></argument>,
<argument><expr>"pwd.struct_passwd: Results from getpw*() routines.\n\n\
This object may be accessed either as a tuple of\n\
  (pw_name,pw_passwd,pw_uid,pw_gid,pw_gecos,pw_dir,pw_shell)\n\
or via the object attributes as named in the above tuple."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyStructSequence_Desc</name></type> <name>struct_pwd_type_desc</name> <init>= <expr><block>{
	<expr>"pwd.struct_passwd"</expr>,
	<expr><name>struct_passwd__doc__</name></expr>,
	<expr><name>struct_pwd_type_fields</name></expr>,
	<expr>7</expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>pwd__doc__</name></expr></argument>,
<argument><expr>"This module provides access to the Unix password database.\n\
It is available on all Unix versions.\n\
\n\
Password database entries are reported as 7-tuples containing the following\n\
items from the password database (see `&lt;pwd.h&gt;'), in order:\n\
pw_name, pw_passwd, pw_uid, pw_gid, pw_gecos, pw_dir, pw_shell.\n\
The uid and gid items are integers, all others are strings. An\n\
exception is raised if the entry asked for cannot be found."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

      
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>StructPwdType</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sets</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>char</name>*</type> <name>val</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>val</name></expr>)</condition><then>
	  <expr_stmt><expr><call><name>PyStructSequence_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else <block>{
	  <expr_stmt><expr><call><name>PyStructSequence_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>mkpwent</name><parameter_list>(<param><decl><type>struct <name>passwd</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>setIndex</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyStructSequence_New</name><argument_list>(<argument><expr>&amp;<name>StructPwdType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETI</name><parameter_list>(<param><type><name>i</name></type></param>,<param><type><name>val</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyStructSequence_SET_ITEM(v, i, PyInt_FromLong((long) val))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETS</name><parameter_list>(<param><type><name>i</name></type></param>,<param><type><name>val</name></type></param>)</parameter_list></cpp:macro> <cpp:value>sets(v, i, val)</cpp:value></cpp:define>

	<expr_stmt><expr><call><name>SETS</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>pw_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__VMS</name></cpp:ifdef>
	<expr_stmt><expr><call><name>SETS</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>SETS</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>pw_passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>SETI</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>pw_uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SETI</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>pw_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__VMS</name></cpp:ifdef>
	<expr_stmt><expr><call><name>SETS</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>SETS</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>pw_gecos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>SETS</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>pw_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SETS</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>pw_shell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SETS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SETI</name></cpp:undef>

	<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<return>return <expr><name>v</name></expr>;</return>
}</block></function>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>pwd_getpwuid__doc__</name></expr></argument>,
<argument><expr>"getpwuid(uid) -&gt; (pw_name,pw_passwd,pw_uid,\n\
                  pw_gid,pw_gecos,pw_dir,pw_shell)\n\
Return the password database entry for the given numeric user ID.\n\
See pwd.__doc__ for more on password database entries."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>pwd_getpwuid</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>uid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type>struct <name>passwd</name> *</type><name>p</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"I:getpwuid"</expr></argument>, <argument><expr>&amp;<name>uid</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr>(<name>p</name> = <call><name>getpwuid</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>,
			     <argument><expr>"getpwuid(): uid not found: %d"</expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>mkpwent</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>pwd_getpwnam__doc__</name></expr></argument>,
<argument><expr>"getpwnam(name) -&gt; (pw_name,pw_passwd,pw_uid,\n\
                    pw_gid,pw_gecos,pw_dir,pw_shell)\n\
Return the password database entry for the given user name.\n\
See pwd.__doc__ for more on password database entries."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>pwd_getpwnam</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type>struct <name>passwd</name> *</type><name>p</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s:getpwnam"</expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr>(<name>p</name> = <call><name>getpwnam</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>,
			     <argument><expr>"getpwnam(): name not found: %s"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>mkpwent</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_GETPWENT</name></cpp:ifdef>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>pwd_getpwall__doc__</name></expr></argument>,
<argument><expr>"getpwall() -&gt; list_of_entries\n\
Return a list of all available password database entries, \
in arbitrary order.\n\
See pwd.__doc__ for more on password database entries."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>pwd_getpwall</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type>struct <name>passwd</name> *</type><name>p</name></decl>;</decl_stmt>
	<if>if <condition>(<expr>(<name>d</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PYOS_OS2</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>PYCC_GCC</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if>if <condition>(<expr>(<name>p</name> = <call><name>getpwuid</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>setpwent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr>(<name>p</name> = <call><name>getpwent</name><argument_list>()</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>mkpwent</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>v</name> == <name>NULL</name> || <call><name>PyList_Append</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><call><name>endpwent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>d</name></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>pwd_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"getpwuid"</expr>,	<expr><name>pwd_getpwuid</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>pwd_getpwuid__doc__</name></expr>}</block></expr>,
	<expr><block>{<expr>"getpwnam"</expr>,	<expr><name>pwd_getpwnam</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>pwd_getpwnam__doc__</name></expr>}</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_GETPWENT</name></cpp:ifdef>
	<expr><block>{<expr>"getpwall"</expr>,	<expr>(<name>PyCFunction</name>)<name>pwd_getpwall</name></expr>,
		<expr><name>METH_NOARGS</name></expr>,  <expr><name>pwd_getpwall__doc__</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>PyMODINIT_FUNC</name></type>
<name>initpwd</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule3</name><argument_list>(<argument><expr>"pwd"</expr></argument>, <argument><expr><name>pwd_methods</name></expr></argument>, <argument><expr><name>pwd__doc__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
    		<return>return;</return></then></if>

	<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>PyStructSequence_InitType</name><argument_list>(<argument><expr>&amp;<name>StructPwdType</name></expr></argument>, 
					  <argument><expr>&amp;<name>struct_pwd_type_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>(<name>PyObject</name> *) &amp;<name>StructPwdType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"struct_passwd"</expr></argument>, <argument><expr>(<name>PyObject</name> *) &amp;<name>StructPwdType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* And for b/w compatibility (this was defined by mistake): */</comment>
	<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"struct_pwent"</expr></argument>, <argument><expr>(<name>PyObject</name> *) &amp;<name>StructPwdType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>initialized</name> = 1</expr>;</expr_stmt>
}</block></function></block></function>
</unit>
