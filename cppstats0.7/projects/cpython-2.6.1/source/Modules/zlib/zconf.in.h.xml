<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/zlib/zconf.in.h"><comment type="block">/* zconf.h -- configuration of the zlib compression library
 * Copyright (C) 1995-2005 Jean-loup Gailly.
 * For conditions of distribution and use, see copyright notice in zlib.h
 */</comment>

<comment type="block">/* @(#) $Id$ */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ZCONF_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZCONF_H</name></cpp:macro></cpp:define>

<comment type="block">/*
 * If you *really* need a unique prefix for all types and library functions,
 * compile with -DZ_PREFIX. The "standard" zlib should be compiled without it.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Z_PREFIX</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>deflateInit_</name></cpp:macro>          <cpp:value>z_deflateInit_</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>deflate</name></cpp:macro>               <cpp:value>z_deflate</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>deflateEnd</name></cpp:macro>            <cpp:value>z_deflateEnd</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>inflateInit_</name></cpp:macro>          <cpp:value>z_inflateInit_</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>inflate</name></cpp:macro>               <cpp:value>z_inflate</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>inflateEnd</name></cpp:macro>            <cpp:value>z_inflateEnd</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>deflateInit2_</name></cpp:macro>         <cpp:value>z_deflateInit2_</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>deflateSetDictionary</name></cpp:macro>  <cpp:value>z_deflateSetDictionary</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>deflateCopy</name></cpp:macro>           <cpp:value>z_deflateCopy</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>deflateReset</name></cpp:macro>          <cpp:value>z_deflateReset</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>deflateParams</name></cpp:macro>         <cpp:value>z_deflateParams</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>deflateBound</name></cpp:macro>          <cpp:value>z_deflateBound</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>deflatePrime</name></cpp:macro>          <cpp:value>z_deflatePrime</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>inflateInit2_</name></cpp:macro>         <cpp:value>z_inflateInit2_</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>inflateSetDictionary</name></cpp:macro>  <cpp:value>z_inflateSetDictionary</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>inflateSync</name></cpp:macro>           <cpp:value>z_inflateSync</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>inflateSyncPoint</name></cpp:macro>      <cpp:value>z_inflateSyncPoint</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>inflateCopy</name></cpp:macro>           <cpp:value>z_inflateCopy</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>inflateReset</name></cpp:macro>          <cpp:value>z_inflateReset</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>inflateBack</name></cpp:macro>           <cpp:value>z_inflateBack</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>inflateBackEnd</name></cpp:macro>        <cpp:value>z_inflateBackEnd</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>compress</name></cpp:macro>              <cpp:value>z_compress</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>compress2</name></cpp:macro>             <cpp:value>z_compress2</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>compressBound</name></cpp:macro>         <cpp:value>z_compressBound</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>uncompress</name></cpp:macro>            <cpp:value>z_uncompress</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>adler32</name></cpp:macro>               <cpp:value>z_adler32</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>crc32</name></cpp:macro>                 <cpp:value>z_crc32</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>get_crc_table</name></cpp:macro>         <cpp:value>z_get_crc_table</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>zError</name></cpp:macro>                <cpp:value>z_zError</cpp:value></cpp:define>

<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>alloc_func</name></cpp:macro>            <cpp:value>z_alloc_func</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>free_func</name></cpp:macro>             <cpp:value>z_free_func</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>in_func</name></cpp:macro>               <cpp:value>z_in_func</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>out_func</name></cpp:macro>              <cpp:value>z_out_func</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>Byte</name></cpp:macro>                  <cpp:value>z_Byte</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>uInt</name></cpp:macro>                  <cpp:value>z_uInt</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>uLong</name></cpp:macro>                 <cpp:value>z_uLong</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>Bytef</name></cpp:macro>                 <cpp:value>z_Bytef</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>charf</name></cpp:macro>                 <cpp:value>z_charf</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>intf</name></cpp:macro>                  <cpp:value>z_intf</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>uIntf</name></cpp:macro>                 <cpp:value>z_uIntf</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>uLongf</name></cpp:macro>                <cpp:value>z_uLongf</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>voidpf</name></cpp:macro>                <cpp:value>z_voidpf</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>voidp</name></cpp:macro>                 <cpp:value>z_voidp</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MSDOS__</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>MSDOS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<call><name>defined</name><argument_list>(<argument><expr><name>OS_2</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call>) &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>OS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>OS2</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WINDOWS</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>WINDOWS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__WIN32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifndef>#  <cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32</name></cpp:macro></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>OS2</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call>) &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>__FLAT__</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>__386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifndef>#    <cpp:directive>ifndef</cpp:directive> <name>SYS16BIT</name></cpp:ifndef>
<cpp:define>#      <cpp:directive>define</cpp:directive> <cpp:macro><name>SYS16BIT</name></cpp:macro></cpp:define>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Compile with -DMAXSEG_64K if the alloc function cannot allocate more
 * than 64k bytes at a time (needed on systems with 16-bit int).
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS16BIT</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>MAXSEG_64K</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MSDOS</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>UNALIGNED_OK</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__STDC_VERSION__</name></cpp:ifdef>
<cpp:ifndef>#  <cpp:directive>ifndef</cpp:directive> <name>STDC</name></cpp:ifndef>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>STDC</name></cpp:macro></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><name>__STDC_VERSION__</name> &gt;= 199901L</expr></cpp:if>
<cpp:ifndef>#    <cpp:directive>ifndef</cpp:directive> <name>STDC99</name></cpp:ifndef>
<cpp:define>#      <cpp:directive>define</cpp:directive> <cpp:macro><name>STDC99</name></cpp:macro></cpp:define>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STDC</name></expr></argument>)</argument_list></call> &amp;&amp; (<call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>STDC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STDC</name></expr></argument>)</argument_list></call> &amp;&amp; (<call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>STDC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STDC</name></expr></argument>)</argument_list></call> &amp;&amp; (<call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>STDC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STDC</name></expr></argument>)</argument_list></call> &amp;&amp; (<call><name>defined</name><argument_list>(<argument><expr><name>OS2</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__HOS_AIX__</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>STDC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OS400__</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>STDC</name></expr></argument>)</argument_list></call></expr></cpp:if>    <comment type="block">/* iSeries (formerly AS/400). */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>STDC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STDC</name></cpp:ifndef>
<cpp:ifndef>#  <cpp:directive>ifndef</cpp:directive> <name>const</name></cpp:ifndef> <comment type="block">/* cannot use !defined(STDC) &amp;&amp; !defined(const) on Mac */</comment>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>const</name></cpp:macro></cpp:define>       <comment type="block">/* note: need a more gentle solution here */</comment>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Some Mac compilers merge all .h files incorrectly: */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MWERKS__</name></expr></argument>)</argument_list></call>||<call><name>defined</name><argument_list>(<argument><expr><name>applec</name></expr></argument>)</argument_list></call>||<call><name>defined</name><argument_list>(<argument><expr><name>THINK_C</name></expr></argument>)</argument_list></call>||<call><name>defined</name><argument_list>(<argument><expr><name>__SC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>NO_DUMMY_DECL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Maximum value for memLevel in deflateInit2 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MAX_MEM_LEVEL</name></cpp:ifndef>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>MAXSEG_64K</name></cpp:ifdef>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MEM_LEVEL</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MEM_LEVEL</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Maximum value for windowBits in deflateInit2 and inflateInit2.
 * WARNING: reducing MAX_WBITS makes minigzip unable to extract .gz files
 * created by gzip. (Files created by minigzip can still be extracted by
 * gzip.)
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MAX_WBITS</name></cpp:ifndef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_WBITS</name></cpp:macro>   <cpp:value>15</cpp:value></cpp:define> <comment type="block">/* 32K LZ77 window */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* The memory requirements for deflate are (in bytes):
            (1 &lt;&lt; (windowBits+2)) +  (1 &lt;&lt; (memLevel+9))
 that is: 128K for windowBits=15  +  128K for memLevel = 8  (default values)
 plus a few kilobytes for small objects. For example, if you want to reduce
 the default memory requirements from 256K to 128K, compile with
     make CFLAGS="-O -DMAX_WBITS=14 -DMAX_MEM_LEVEL=7"
 Of course this will generally degrade compression (there's no free lunch).

   The memory requirements for inflate are (in bytes) 1 &lt;&lt; windowBits
 that is, 32K for windowBits=15 (default value) plus a few kilobytes
 for small objects.
*/</comment>

                        <comment type="block">/* Type declarations */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OF</name></cpp:ifndef> <comment type="block">/* function prototypes */</comment>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>STDC</name></cpp:ifdef>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>OF</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>args</cpp:value></cpp:define>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>OF</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>()</cpp:value></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* The following definitions for FAR are needed only for MSDOS mixed
 * model programming (small or medium model with some far allocations).
 * This was tested only with MSC; for other MSDOS compilers you may have
 * to define NO_MEMCPY in zutil.h.  If you don't need the mixed model,
 * just define FAR to be empty.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS16BIT</name></cpp:ifdef>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>M_I86SM</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>M_I86MM</name></expr></argument>)</argument_list></call></expr></cpp:if>
     <comment type="block">/* MSC small or medium model */</comment>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>SMALL_MEDIUM</name></cpp:macro></cpp:define>
<cpp:ifdef>#    <cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:define>#      <cpp:directive>define</cpp:directive> <cpp:macro><name>FAR</name></cpp:macro> <cpp:value>_far</cpp:value></cpp:define>
<cpp:else>#    <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#      <cpp:directive>define</cpp:directive> <cpp:macro><name>FAR</name></cpp:macro> <cpp:value>far</cpp:value></cpp:define>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr>(<call><name>defined</name><argument_list>(<argument><expr><name>__SMALL__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__MEDIUM__</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
     <comment type="block">/* Turbo C small or medium model */</comment>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>SMALL_MEDIUM</name></cpp:macro></cpp:define>
<cpp:ifdef>#    <cpp:directive>ifdef</cpp:directive> <name>__BORLANDC__</name></cpp:ifdef>
<cpp:define>#      <cpp:directive>define</cpp:directive> <cpp:macro><name>FAR</name></cpp:macro> <cpp:value>_far</cpp:value></cpp:define>
<cpp:else>#    <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#      <cpp:directive>define</cpp:directive> <cpp:macro><name>FAR</name></cpp:macro> <cpp:value>far</cpp:value></cpp:define>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
   <comment type="block">/* If building or using zlib as a DLL, define ZLIB_DLL.
    * This is not mandatory, but it offers a little performance increase.
    */</comment>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>ZLIB_DLL</name></cpp:ifdef>
<cpp:if>#    <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> &amp;&amp; (!<call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call> || (<name>__BORLANDC__</name> &gt;= 0x500))</expr></cpp:if>
<cpp:ifdef>#      <cpp:directive>ifdef</cpp:directive> <name>ZLIB_INTERNAL</name></cpp:ifdef>
<cpp:define>#        <cpp:directive>define</cpp:directive> <cpp:macro><name>ZEXTERN</name></cpp:macro> <cpp:value>extern __declspec(dllexport)</cpp:value></cpp:define>
<cpp:else>#      <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#        <cpp:directive>define</cpp:directive> <cpp:macro><name>ZEXTERN</name></cpp:macro> <cpp:value>extern __declspec(dllimport)</cpp:value></cpp:define>
<cpp:endif>#      <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* ZLIB_DLL */</comment>
   <comment type="block">/* If building or using zlib with the WINAPI/WINAPIV calling convention,
    * define ZLIB_WINAPI.
    * Caution: the standard ZLIB1.DLL is NOT compiled using ZLIB_WINAPI.
    */</comment>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>ZLIB_WINAPI</name></cpp:ifdef>
<cpp:ifdef>#    <cpp:directive>ifdef</cpp:directive> <name>FAR</name></cpp:ifdef>
<cpp:undef>#      <cpp:directive>undef</cpp:directive> <name>FAR</name></cpp:undef>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#    <cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
     <comment type="block">/* No need for _export, use ZLIB.DEF instead. */</comment>
     <comment type="block">/* For complete Windows compatibility, use WINAPI, not __stdcall. */</comment>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>ZEXPORT</name></cpp:macro> <cpp:value>WINAPI</cpp:value></cpp:define>
<cpp:ifdef>#    <cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:define>#      <cpp:directive>define</cpp:directive> <cpp:macro><name>ZEXPORTVA</name></cpp:macro> <cpp:value>WINAPIV</cpp:value></cpp:define>
<cpp:else>#    <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#      <cpp:directive>define</cpp:directive> <cpp:macro><name>ZEXPORTVA</name></cpp:macro> <cpp:value>FAR CDECL</cpp:value></cpp:define>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__BEOS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>ZLIB_DLL</name></cpp:ifdef>
<cpp:ifdef>#    <cpp:directive>ifdef</cpp:directive> <name>ZLIB_INTERNAL</name></cpp:ifdef>
<cpp:define>#      <cpp:directive>define</cpp:directive> <cpp:macro><name>ZEXPORT</name></cpp:macro>   <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:define>#      <cpp:directive>define</cpp:directive> <cpp:macro><name>ZEXPORTVA</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:else>#    <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#      <cpp:directive>define</cpp:directive> <cpp:macro><name>ZEXPORT</name></cpp:macro>   <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:define>#      <cpp:directive>define</cpp:directive> <cpp:macro><name>ZEXPORTVA</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ZEXTERN</name></cpp:ifndef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ZEXTERN</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ZEXPORT</name></cpp:ifndef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ZEXPORT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ZEXPORTVA</name></cpp:ifndef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ZEXPORTVA</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FAR</name></cpp:ifndef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>FAR</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__MACTYPES__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type>  <name>Byte</name>;</typedef>  <comment type="block">/* 8 bits */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type>   <name>uInt</name>;</typedef>  <comment type="block">/* 16 bits or more */</comment>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type>  <name>uLong</name>;</typedef> <comment type="block">/* 32 bits or more */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SMALL_MEDIUM</name></cpp:ifdef>
   <comment type="block">/* Borland C/C++ and some old MSC versions ignore FAR inside typedef */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>Bytef</name></cpp:macro> <cpp:value>Byte FAR</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
   <typedef>typedef <type><name>Byte</name>  <name>FAR</name></type> <name>Bytef</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>char</name>  <name>FAR</name></type> <name>charf</name>;</typedef>
<typedef>typedef <type><name>int</name>   <name>FAR</name></type> <name>intf</name>;</typedef>
<typedef>typedef <type><name>uInt</name>  <name>FAR</name></type> <name>uIntf</name>;</typedef>
<typedef>typedef <type><name>uLong</name> <name>FAR</name></type> <name>uLongf</name>;</typedef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STDC</name></cpp:ifdef>
   <typedef>typedef <type><name>void</name> <specifier>const</specifier> *</type><name>voidpc</name>;</typedef>
   <typedef>typedef <type><name>void</name> <name>FAR</name>   *</type><name>voidpf</name>;</typedef>
   <typedef>typedef <type><name>void</name>       *</type><name>voidp</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
   <typedef>typedef <type><name>Byte</name> <specifier>const</specifier> *</type><name>voidpc</name>;</typedef>
   <typedef>typedef <type><name>Byte</name> <name>FAR</name>   *</type><name>voidpf</name>;</typedef>
   <typedef>typedef <type><name>Byte</name>       *</type><name>voidp</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>           <comment type="block">/* HAVE_UNISTD_H -- this line is updated by ./configure */</comment>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include> <comment type="block">/* for off_t */</comment>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>    <comment type="block">/* for SEEK_* and off_t */</comment>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>VMS</name></cpp:ifdef>
<cpp:include>#    <cpp:directive>include</cpp:directive> <cpp:file>&lt;unixio.h&gt;</cpp:file></cpp:include>   <comment type="block">/* for off_t */</comment>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>z_off_t</name></cpp:macro> <cpp:value>off_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SEEK_SET</name></cpp:ifndef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SEEK_SET</name></cpp:macro>        <cpp:value>0</cpp:value></cpp:define>       <comment type="block">/* Seek from beginning of file.  */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SEEK_CUR</name></cpp:macro>        <cpp:value>1</cpp:value></cpp:define>       <comment type="block">/* Seek from current position.  */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SEEK_END</name></cpp:macro>        <cpp:value>2</cpp:value></cpp:define>       <comment type="block">/* Set file pointer to EOF plus "offset" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>z_off_t</name></cpp:ifndef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>z_off_t</name></cpp:macro> <cpp:value>long</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OS400__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>NO_vsnprintf</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MVS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>NO_vsnprintf</name></cpp:macro></cpp:define>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>FAR</name></cpp:ifdef>
<cpp:undef>#    <cpp:directive>undef</cpp:directive> <name>FAR</name></cpp:undef>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* MVS linker does not support external names larger than 8 bytes */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MVS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#   <cpp:directive>pragma</cpp:directive> map(deflateInit_,"DEIN")</cpp:pragma>
<cpp:pragma>#   <cpp:directive>pragma</cpp:directive> map(deflateInit2_,"DEIN2")</cpp:pragma>
<cpp:pragma>#   <cpp:directive>pragma</cpp:directive> map(deflateEnd,"DEEND")</cpp:pragma>
<cpp:pragma>#   <cpp:directive>pragma</cpp:directive> map(deflateBound,"DEBND")</cpp:pragma>
<cpp:pragma>#   <cpp:directive>pragma</cpp:directive> map(inflateInit_,"ININ")</cpp:pragma>
<cpp:pragma>#   <cpp:directive>pragma</cpp:directive> map(inflateInit2_,"ININ2")</cpp:pragma>
<cpp:pragma>#   <cpp:directive>pragma</cpp:directive> map(inflateEnd,"INEND")</cpp:pragma>
<cpp:pragma>#   <cpp:directive>pragma</cpp:directive> map(inflateSync,"INSY")</cpp:pragma>
<cpp:pragma>#   <cpp:directive>pragma</cpp:directive> map(inflateSetDictionary,"INSEDI")</cpp:pragma>
<cpp:pragma>#   <cpp:directive>pragma</cpp:directive> map(compressBound,"CMBND")</cpp:pragma>
<cpp:pragma>#   <cpp:directive>pragma</cpp:directive> map(inflate_table,"INTABL")</cpp:pragma>
<cpp:pragma>#   <cpp:directive>pragma</cpp:directive> map(inflate_fast,"INFA")</cpp:pragma>
<cpp:pragma>#   <cpp:directive>pragma</cpp:directive> map(inflate_copyright,"INCOPY")</cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ZCONF_H */</comment>
</unit>
