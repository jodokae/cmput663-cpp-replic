<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/zlib/zutil.c"><comment type="block">/* zutil.c -- target dependent utility functions for the compression library
 * Copyright (C) 1995-2005 Jean-loup Gailly.
 * For conditions of distribution and use, see copyright notice in zlib.h
 */</comment>

<comment type="block">/* @(#) $Id$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zutil.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_DUMMY_DECL</name></cpp:ifndef>
<struct>struct <name>internal_state</name>      <block>{<decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>}</block>;</struct> <comment type="block">/* for buggy compilers */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>z_errmsg</name><index>[<expr>10</expr>]</index></name> <init>= <expr><block>{
<expr>"need dictionary"</expr>,     <comment type="block">/* Z_NEED_DICT       2  */</comment>
<expr>"stream end"</expr>,          <comment type="block">/* Z_STREAM_END      1  */</comment>
<expr>""</expr>,                    <comment type="block">/* Z_OK              0  */</comment>
<expr>"file error"</expr>,          <comment type="block">/* Z_ERRNO         (-1) */</comment>
<expr>"stream error"</expr>,        <comment type="block">/* Z_STREAM_ERROR  (-2) */</comment>
<expr>"data error"</expr>,          <comment type="block">/* Z_DATA_ERROR    (-3) */</comment>
<expr>"insufficient memory"</expr>, <comment type="block">/* Z_MEM_ERROR     (-4) */</comment>
<expr>"buffer error"</expr>,        <comment type="block">/* Z_BUF_ERROR     (-5) */</comment>
<expr>"incompatible version"</expr>,<comment type="block">/* Z_VERSION_ERROR (-6) */</comment>
<expr>""</expr>}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>const</specifier> <name>char</name> * <name>ZEXPORT</name></type> <name>zlibVersion</name><parameter_list>()</parameter_list>
<block>{
    <return>return <expr><name>ZLIB_VERSION</name></expr>;</return>
}</block></function>

<function><type><name>uLong</name> <name>ZEXPORT</name></type> <name>zlibCompileFlags</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uLong</name></type> <name>flags</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>flags</name> = 0</expr>;</expr_stmt>
    <switch>switch <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>uInt</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{
    <case>case <expr>2</expr>:     <break>break;</break>
    </case><case>case <expr>4</expr>:     <expr_stmt><expr><name>flags</name> += 1</expr>;</expr_stmt>     <break>break;</break>
    </case><case>case <expr>8</expr>:     <expr_stmt><expr><name>flags</name> += 2</expr>;</expr_stmt>     <break>break;</break>
    </case><default>default:    <expr_stmt><expr><name>flags</name> += 3</expr>;</expr_stmt>
    </default>}</block></switch>
    <switch>switch <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>uLong</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{
    <case>case <expr>2</expr>:     <break>break;</break>
    </case><case>case <expr>4</expr>:     <expr_stmt><expr><name>flags</name> += 1 &lt;&lt; 2</expr>;</expr_stmt>        <break>break;</break>
    </case><case>case <expr>8</expr>:     <expr_stmt><expr><name>flags</name> += 2 &lt;&lt; 2</expr>;</expr_stmt>        <break>break;</break>
    </case><default>default:    <expr_stmt><expr><name>flags</name> += 3 &lt;&lt; 2</expr>;</expr_stmt>
    </default>}</block></switch>
    <switch>switch <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>voidpf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{
    <case>case <expr>2</expr>:     <break>break;</break>
    </case><case>case <expr>4</expr>:     <expr_stmt><expr><name>flags</name> += 1 &lt;&lt; 4</expr>;</expr_stmt>        <break>break;</break>
    </case><case>case <expr>8</expr>:     <expr_stmt><expr><name>flags</name> += 2 &lt;&lt; 4</expr>;</expr_stmt>        <break>break;</break>
    </case><default>default:    <expr_stmt><expr><name>flags</name> += 3 &lt;&lt; 4</expr>;</expr_stmt>
    </default>}</block></switch>
    <switch>switch <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>z_off_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{
    <case>case <expr>2</expr>:     <break>break;</break>
    </case><case>case <expr>4</expr>:     <expr_stmt><expr><name>flags</name> += 1 &lt;&lt; 6</expr>;</expr_stmt>        <break>break;</break>
    </case><case>case <expr>8</expr>:     <expr_stmt><expr><name>flags</name> += 2 &lt;&lt; 6</expr>;</expr_stmt>        <break>break;</break>
    </case><default>default:    <expr_stmt><expr><name>flags</name> += 3 &lt;&lt; 6</expr>;</expr_stmt>
    </default>}</block></switch>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> += 1 &lt;&lt; 8</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASMV</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>ASMINF</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>flags</name> += 1 &lt;&lt; 9</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ZLIB_WINAPI</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> += 1 &lt;&lt; 10</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BUILDFIXED</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> += 1 &lt;&lt; 12</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DYNAMIC_CRC_TABLE</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> += 1 &lt;&lt; 13</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NO_GZCOMPRESS</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> += 1L &lt;&lt; 16</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NO_GZIP</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> += 1L &lt;&lt; 17</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PKZIP_BUG_WORKAROUND</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> += 1L &lt;&lt; 20</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FASTEST</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> += 1L &lt;&lt; 21</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STDC</name></cpp:ifdef>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>NO_vsnprintf</name></cpp:ifdef>
        <expr_stmt><expr><name>flags</name> += 1L &lt;&lt; 25</expr>;</expr_stmt>
<cpp:ifdef>#    <cpp:directive>ifdef</cpp:directive> <name>HAS_vsprintf_void</name></cpp:ifdef>
        <expr_stmt><expr><name>flags</name> += 1L &lt;&lt; 26</expr>;</expr_stmt>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#    <cpp:directive>ifdef</cpp:directive> <name>HAS_vsnprintf_void</name></cpp:ifdef>
        <expr_stmt><expr><name>flags</name> += 1L &lt;&lt; 26</expr>;</expr_stmt>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name>flags</name> += 1L &lt;&lt; 24</expr>;</expr_stmt>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>NO_snprintf</name></cpp:ifdef>
        <expr_stmt><expr><name>flags</name> += 1L &lt;&lt; 25</expr>;</expr_stmt>
<cpp:ifdef>#    <cpp:directive>ifdef</cpp:directive> <name>HAS_sprintf_void</name></cpp:ifdef>
        <expr_stmt><expr><name>flags</name> += 1L &lt;&lt; 26</expr>;</expr_stmt>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#    <cpp:directive>ifdef</cpp:directive> <name>HAS_snprintf_void</name></cpp:ifdef>
        <expr_stmt><expr><name>flags</name> += 1L &lt;&lt; 26</expr>;</expr_stmt>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>flags</name></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>

<cpp:ifndef>#  <cpp:directive>ifndef</cpp:directive> <name>verbose</name></cpp:ifndef>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>verbose</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>z_verbose</name> <init>= <expr><name>verbose</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>z_error</name> <parameter_list>(<param><decl><type><name>m</name></type></decl></param>)</parameter_list>
    <decl_stmt><decl><type><name>char</name> *</type><name>m</name></decl>;</decl_stmt>
<block>{
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* exported to allow conversion of error code to string for compress() and
 * uncompress()
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> * <name>ZEXPORT</name></type> <name>zError</name><parameter_list>(<param><decl><type><name>err</name></type></decl></param>)</parameter_list>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<block>{
    <return>return <expr><call><name>ERR_MSG</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* The Microsoft C Run-Time Library for Windows CE doesn't have
     * errno.  We define it as a global variable to simplify porting.
     * Its value is always 0 and should not be used.
     */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>errno</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_MEMCPY</name></cpp:ifndef>

<function><type><name>void</name></type> <name>zmemcpy</name><parameter_list>(<param><decl><type><name>dest</name></type></decl></param>, <param><decl><type><name>source</name></type></decl></param>, <param><decl><type><name>len</name></type></decl></param>)</parameter_list>
    <decl_stmt><decl><type><name>Bytef</name>*</type> <name>dest</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Bytef</name>*</type> <name>source</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uInt</name></type>  <name>len</name></decl>;</decl_stmt>
<block>{
    <if>if <condition>(<expr><name>len</name> == 0</expr>)</condition><then> <return>return;</return></then></if>
    <do>do <block>{
        <expr_stmt><expr>*<name>dest</name>++ = *<name>source</name>++</expr>;</expr_stmt> <comment type="block">/* ??? to be unrolled */</comment>
    }</block> while <condition>(<expr>--<name>len</name> != 0</expr>)</condition>;</do>
}</block></function>

<function><type><name>int</name></type> <name>zmemcmp</name><parameter_list>(<param><decl><type><name>s1</name></type></decl></param>, <param><decl><type><name>s2</name></type></decl></param>, <param><decl><type><name>len</name></type></decl></param>)</parameter_list>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Bytef</name>*</type> <name>s1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Bytef</name>*</type> <name>s2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uInt</name></type>  <name>len</name></decl>;</decl_stmt>
<block>{
    <decl_stmt><decl><type><name>uInt</name></type> <name>j</name></decl>;</decl_stmt>

    <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name> != <name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <return>return <expr>2*(<name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name> &gt; <name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name>)-1</expr>;</return></then></if>
    }</block></for>
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>zmemzero</name><parameter_list>(<param><decl><type><name>dest</name></type></decl></param>, <param><decl><type><name>len</name></type></decl></param>)</parameter_list>
    <decl_stmt><decl><type><name>Bytef</name>*</type> <name>dest</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uInt</name></type>  <name>len</name></decl>;</decl_stmt>
<block>{
    <if>if <condition>(<expr><name>len</name> == 0</expr>)</condition><then> <return>return;</return></then></if>
    <do>do <block>{
        <expr_stmt><expr>*<name>dest</name>++ = 0</expr>;</expr_stmt>  <comment type="block">/* ??? to be unrolled */</comment>
    }</block> while <condition>(<expr>--<name>len</name> != 0</expr>)</condition>;</do>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS16BIT</name></cpp:ifdef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TURBOC__</name></cpp:ifdef>
<comment type="block">/* Turbo C in 16-bit mode */</comment>

<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>MY_ZCALLOC</name></cpp:macro></cpp:define>

<comment type="block">/* Turbo C malloc() does not allow dynamic allocation of 64K bytes
 * and farmalloc(64K) returns a pointer with an offset of 8, so we
 * must fix the pointer. Warning: the pointer must be put back to its
 * original form in order to free it, use zcfree().
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PTR</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<comment type="block">/* 10*64K = 640K */</comment>

<decl_stmt><decl><type><name>local</name> <name>int</name></type> <name>next_ptr</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>ptr_table_s</name> <block>{
    <decl_stmt><decl><type><name>voidpf</name></type> <name>org_ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>voidpf</name></type> <name>new_ptr</name></decl>;</decl_stmt>
}</block></struct></type> <name>ptr_table</name>;</typedef>

<decl_stmt><decl><type><name>local</name> <name>ptr_table</name></type> <name><name>table</name><index>[<expr><name>MAX_PTR</name></expr>]</index></name></decl>;</decl_stmt>
<comment type="block">/* This table is used to remember the original form of pointers
 * to large buffers (64K). Such pointers are normalized with a zero offset.
 * Since MSDOS is not a preemptive multitasking OS, this table is not
 * protected from concurrent access. This hack doesn't work anyway on
 * a protected system like OS/2. Use Microsoft C instead.
 */</comment>

<function><type><name>voidpf</name></type> <name>zcalloc</name> <parameter_list>(<param><decl><type><name>voidpf</name></type> <name>opaque</name></decl></param>, <param><decl><type><name>unsigned</name></type> <name>items</name></decl></param>, <param><decl><type><name>unsigned</name></type> <name>size</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>voidpf</name></type> <name>buf</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt> <comment type="block">/* just to make some compilers happy */</comment>
    <decl_stmt><decl><type><name>ulg</name></type> <name>bsize</name> <init>= <expr>(<name>ulg</name>)<name>items</name>*<name>size</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* If we allocate less than 65520 bytes, we assume that farmalloc
     * will return a usable pointer which doesn't have to be normalized.
     */</comment>
    <if>if <condition>(<expr><name>bsize</name> &lt; 65520L</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>buf</name> = <call><name>farmalloc</name><argument_list>(<argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>*(<name>ush</name>*)&amp;<name>buf</name> != 0</expr>)</condition><then> <return>return <expr><name>buf</name></expr>;</return></then></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>buf</name> = <call><name>farmalloc</name><argument_list>(<argument><expr><name>bsize</name> + 16L</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <if>if <condition>(<expr><name>buf</name> == <name>NULL</name> || <name>next_ptr</name> &gt;= <name>MAX_PTR</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>table</name><index>[<expr><name>next_ptr</name></expr>]</index></name>.<name>org_ptr</name> = <name>buf</name></expr>;</expr_stmt>

    <comment type="block">/* Normalize the pointer to seg:0 */</comment>
    <expr_stmt><expr>*((<name>ush</name>*)&amp;<name>buf</name>+1) += (<call>(<name>ush</name>)<argument_list>(<argument><expr>(<name>uch</name>*)<name>buf</name>-0</expr></argument>)</argument_list></call> + 15) &gt;&gt; 4</expr>;</expr_stmt>
    <expr_stmt><expr>*(<name>ush</name>*)&amp;<name>buf</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>table</name><index>[<expr><name>next_ptr</name>++</expr>]</index></name>.<name>new_ptr</name> = <name>buf</name></expr>;</expr_stmt>
    <return>return <expr><name>buf</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>  <name>zcfree</name> <parameter_list>(<param><decl><type><name>voidpf</name></type> <name>opaque</name></decl></param>, <param><decl><type><name>voidpf</name></type> <name>ptr</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>*(<name>ush</name>*)&amp;<name>ptr</name> != 0</expr>)</condition><then> <block>{ <comment type="block">/* object &lt; 64K */</comment>
        <expr_stmt><expr><call><name>farfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
    <comment type="block">/* Find the original pointer */</comment>
    <for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name>next_ptr</name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr><name>ptr</name> != <name><name>table</name><index>[<expr><name>n</name></expr>]</index></name>.<name>new_ptr</name></expr>)</condition><then> <continue>continue;</continue></then></if>

        <expr_stmt><expr><call><name>farfree</name><argument_list>(<argument><expr><name><name>table</name><index>[<expr><name>n</name></expr>]</index></name>.<name>org_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr>++<name>n</name> &lt; <name>next_ptr</name></expr>)</condition> <block>{
            <expr_stmt><expr><name><name>table</name><index>[<expr><name>n</name>-1</expr>]</index></name> = <name><name>table</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>next_ptr</name>--</expr>;</expr_stmt>
        <return>return;</return>
    }</block></for>
    <expr_stmt><expr><name>ptr</name> = <name>opaque</name></expr>;</expr_stmt> <comment type="block">/* just to make some compilers happy */</comment>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"zcfree: ptr not found"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __TURBOC__ */</comment>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>M_I86</name></cpp:ifdef>
<comment type="block">/* Microsoft C in 16-bit mode */</comment>

<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>MY_ZCALLOC</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(!<call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> || (<name>_MSC_VER</name> &lt;= 600))</expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>_halloc</name></cpp:macro>  <cpp:value>halloc</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>_hfree</name></cpp:macro>   <cpp:value>hfree</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>voidpf</name></type> <name>zcalloc</name> <parameter_list>(<param><decl><type><name>voidpf</name></type> <name>opaque</name></decl></param>, <param><decl><type><name>unsigned</name></type> <name>items</name></decl></param>, <param><decl><type><name>unsigned</name></type> <name>size</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>opaque</name></expr>)</condition><then> <expr_stmt><expr><name>opaque</name> = 0</expr>;</expr_stmt></then></if> <comment type="block">/* to make compiler happy */</comment>
    <return>return <expr><call><name>_halloc</name><argument_list>(<argument><expr>(<name>long</name>)<name>items</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>  <name>zcfree</name> <parameter_list>(<param><decl><type><name>voidpf</name></type> <name>opaque</name></decl></param>, <param><decl><type><name>voidpf</name></type> <name>ptr</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>opaque</name></expr>)</condition><then> <expr_stmt><expr><name>opaque</name> = 0</expr>;</expr_stmt></then></if> <comment type="block">/* to make compiler happy */</comment>
    <expr_stmt><expr><call><name>_hfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* M_I86 */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SYS16BIT */</comment>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MY_ZCALLOC</name></cpp:ifndef> <comment type="block">/* Any system without a special alloc function */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STDC</name></cpp:ifndef>
<decl_stmt><decl><type><specifier>extern</specifier> <name>voidp</name>  <name>malloc</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>uInt</name> <name>size</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>voidp</name>  <name>calloc</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>uInt</name> <name>items</name>, <name>uInt</name> <name>size</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name>   <name>free</name></type>   <name>OF</name><argument_list>(<argument><expr>(<name>voidpf</name> <name>ptr</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>voidpf</name></type> <name>zcalloc</name> <parameter_list>(<param><decl><type><name>opaque</name></type></decl></param>, <param><decl><type><name>items</name></type></decl></param>, <param><decl><type><name>size</name></type></decl></param>)</parameter_list>
    <decl_stmt><decl><type><name>voidpf</name></type> <name>opaque</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>items</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>size</name></decl>;</decl_stmt>
<block>{
    <if>if <condition>(<expr><name>opaque</name></expr>)</condition><then> <expr_stmt><expr><name>items</name> += <name>size</name> - <name>size</name></expr>;</expr_stmt></then></if> <comment type="block">/* make compiler happy */</comment>
    <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uInt</name></expr></argument>)</argument_list></sizeof> &gt; 2 ? (<name>voidpf</name>)<call><name>malloc</name><argument_list>(<argument><expr><name>items</name> * <name>size</name></expr></argument>)</argument_list></call> :
                              (<name>voidpf</name>)<call><name>calloc</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>  <name>zcfree</name> <parameter_list>(<param><decl><type><name>opaque</name></type></decl></param>, <param><decl><type><name>ptr</name></type></decl></param>)</parameter_list>
    <decl_stmt><decl><type><name>voidpf</name></type> <name>opaque</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>voidpf</name></type> <name>ptr</name></decl>;</decl_stmt>
<block>{
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>opaque</name></expr>)</condition><then> <return>return;</return></then></if> <comment type="block">/* make compiler happy */</comment>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MY_ZCALLOC */</comment>
</unit>
