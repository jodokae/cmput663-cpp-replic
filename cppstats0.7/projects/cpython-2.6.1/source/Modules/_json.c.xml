<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/_json.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ENCODING</name></cpp:macro> <cpp:value>"utf-8"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_CHAR</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(c &gt;= ' ' &amp;&amp; c &lt;= '~' &amp;&amp; c != '\\' &amp;&amp; c != '"')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_EXPANSION</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_EXPANSION</name></cpp:macro> <cpp:value>(2 * MIN_EXPANSION)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_EXPANSION</name></cpp:macro> <cpp:value>MIN_EXPANSION</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>ascii_escape_char</name><parameter_list>(<param><decl><type><name>Py_UNICODE</name></type> <name>c</name></decl></param>, <param><decl><type><name>char</name> *</type><name>output</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>chars</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>x</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = '\\'</expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{
        <case>case <expr>'\\'</expr>: <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = (<name>char</name>)<name>c</name></expr>;</expr_stmt> <break>break;</break>
        </case><case>case <expr>'"'</expr>: <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = (<name>char</name>)<name>c</name></expr>;</expr_stmt> <break>break;</break>
        </case><case>case <expr>'\b'</expr>: <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = 'b'</expr>;</expr_stmt> <break>break;</break>
        </case><case>case <expr>'\f'</expr>: <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = 'f'</expr>;</expr_stmt> <break>break;</break>
        </case><case>case <expr>'\n'</expr>: <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = 'n'</expr>;</expr_stmt> <break>break;</break>
        </case><case>case <expr>'\r'</expr>: <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = 'r'</expr>;</expr_stmt> <break>break;</break>
        </case><case>case <expr>'\t'</expr>: <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = 't'</expr>;</expr_stmt> <break>break;</break>
        </case><default>default:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
            <if>if <condition>(<expr><name>c</name> &gt;= 0x10000</expr>)</condition><then> <block>{
                <comment type="block">/* UTF-16 surrogate pair */</comment>
                <decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>v</name> <init>= <expr><name>c</name> - 0x10000</expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>c</name> = 0xd800 | ((<name>v</name> &gt;&gt; 10) &amp; 0x3ff)</expr>;</expr_stmt>
                <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = 'u'</expr>;</expr_stmt>
                <expr_stmt><expr><name>x</name> = (<name>c</name> &amp; 0xf000) &gt;&gt; 12</expr>;</expr_stmt>
                <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = (<name>x</name> &lt; 10) ? '0' + <name>x</name> : 'a' + (<name>x</name> - 10)</expr>;</expr_stmt>
                <expr_stmt><expr><name>x</name> = (<name>c</name> &amp; 0x0f00) &gt;&gt; 8</expr>;</expr_stmt>
                <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = (<name>x</name> &lt; 10) ? '0' + <name>x</name> : 'a' + (<name>x</name> - 10)</expr>;</expr_stmt>
                <expr_stmt><expr><name>x</name> = (<name>c</name> &amp; 0x00f0) &gt;&gt; 4</expr>;</expr_stmt>
                <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = (<name>x</name> &lt; 10) ? '0' + <name>x</name> : 'a' + (<name>x</name> - 10)</expr>;</expr_stmt>
                <expr_stmt><expr><name>x</name> = (<name>c</name> &amp; 0x000f)</expr>;</expr_stmt>
                <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = (<name>x</name> &lt; 10) ? '0' + <name>x</name> : 'a' + (<name>x</name> - 10)</expr>;</expr_stmt>
                <expr_stmt><expr><name>c</name> = 0xdc00 | (<name>v</name> &amp; 0x3ff)</expr>;</expr_stmt>
                <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = '\\'</expr>;</expr_stmt>
            }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = 'u'</expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> = (<name>c</name> &amp; 0xf000) &gt;&gt; 12</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = (<name>x</name> &lt; 10) ? '0' + <name>x</name> : 'a' + (<name>x</name> - 10)</expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> = (<name>c</name> &amp; 0x0f00) &gt;&gt; 8</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = (<name>x</name> &lt; 10) ? '0' + <name>x</name> : 'a' + (<name>x</name> - 10)</expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> = (<name>c</name> &amp; 0x00f0) &gt;&gt; 4</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = (<name>x</name> &lt; 10) ? '0' + <name>x</name> : 'a' + (<name>x</name> - 10)</expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> = (<name>c</name> &amp; 0x000f)</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = (<name>x</name> &lt; 10) ? '0' + <name>x</name> : 'a' + (<name>x</name> - 10)</expr>;</expr_stmt>
    </default>}</block></switch>
    <return>return <expr><name>chars</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>ascii_escape_unicode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>pystr</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>input_chars</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>output_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>chars</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>rval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>output</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_UNICODE</name> *</type><name>input_unicode</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>input_chars</name> = <call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name>pystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>input_unicode</name> = <call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name>pystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* One char input can be up to 6 chars output, estimate 4 of these */</comment>
    <expr_stmt><expr><name>output_size</name> = 2 + (<name>MIN_EXPANSION</name> * 4) + <name>input_chars</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>output_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rval</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>output</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>chars</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = '"'</expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>input_chars</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>c</name> <init>= <expr><name><name>input_unicode</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>S_CHAR</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = (<name>char</name>)<name>c</name></expr>;</expr_stmt>
        }</block></then>
	<else>else <block>{
            <expr_stmt><expr><name>chars</name> = <call><name>ascii_escape_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><name>output_size</name> - <name>chars</name> &lt; (1 + <name>MAX_EXPANSION</name>)</expr>)</condition><then> <block>{
            <comment type="block">/* There's more than four, so let's resize by a lot */</comment>
            <expr_stmt><expr><name>output_size</name> *= 2</expr>;</expr_stmt>
            <comment type="block">/* This is an upper bound */</comment>
            <if>if <condition>(<expr><name>output_size</name> &gt; 2 + (<name>input_chars</name> * <name>MAX_EXPANSION</name>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>output_size</name> = 2 + (<name>input_chars</name> * <name>MAX_EXPANSION</name>)</expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name>_PyString_Resize</name><argument_list>(<argument><expr>&amp;<name>rval</name></expr></argument>, <argument><expr><name>output_size</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
                <return>return <expr><name>NULL</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>output</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = '"'</expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>_PyString_Resize</name><argument_list>(<argument><expr>&amp;<name>rval</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>rval</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>ascii_escape_str</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>pystr</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>input_chars</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>output_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>chars</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>rval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>output</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>input_str</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>input_chars</name> = <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>pystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>input_str</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>pystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* One char input can be up to 6 chars output, estimate 4 of these */</comment>
    <expr_stmt><expr><name>output_size</name> = 2 + (<name>MIN_EXPANSION</name> * 4) + <name>input_chars</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>output_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rval</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>output</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>chars</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = '"'</expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>input_chars</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>c</name> <init>= <expr>(<name>Py_UNICODE</name>)<name><name>input_str</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>S_CHAR</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = (<name>char</name>)<name>c</name></expr>;</expr_stmt>
        }</block></then>
	<else>else <if>if <condition>(<expr><name>c</name> &gt; 0x7F</expr>)</condition><then> <block>{
            <comment type="block">/* We hit a non-ASCII character, bail to unicode mode */</comment>
            <decl_stmt><decl><type><name>PyObject</name> *</type><name>uni</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>uni</name> = <call><name>PyUnicode_DecodeUTF8</name><argument_list>(<argument><expr><name>input_str</name></expr></argument>, <argument><expr><name>input_chars</name></expr></argument>, <argument><expr>"strict"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>uni</name> == <name>NULL</name></expr>)</condition><then> <block>{
                <return>return <expr><name>NULL</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>rval</name> = <call><name>ascii_escape_unicode</name><argument_list>(<argument><expr><name>uni</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>uni</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>rval</name></expr>;</return>
        }</block></then>
	<else>else <block>{
            <expr_stmt><expr><name>chars</name> = <call><name>ascii_escape_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>
        <comment type="block">/* An ASCII char can't possibly expand to a surrogate! */</comment>
        <if>if <condition>(<expr><name>output_size</name> - <name>chars</name> &lt; (1 + <name>MIN_EXPANSION</name>)</expr>)</condition><then> <block>{
            <comment type="block">/* There's more than four, so let's resize by a lot */</comment>
            <expr_stmt><expr><name>output_size</name> *= 2</expr>;</expr_stmt>
            <if>if <condition>(<expr><name>output_size</name> &gt; 2 + (<name>input_chars</name> * <name>MIN_EXPANSION</name>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>output_size</name> = 2 + (<name>input_chars</name> * <name>MIN_EXPANSION</name>)</expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name>_PyString_Resize</name><argument_list>(<argument><expr>&amp;<name>rval</name></expr></argument>, <argument><expr><name>output_size</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
                <return>return <expr><name>NULL</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>output</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><name><name>output</name><index>[<expr><name>chars</name>++</expr>]</index></name> = '"'</expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>_PyString_Resize</name><argument_list>(<argument><expr>&amp;<name>rval</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>rval</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name>raise_errmsg</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>s</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>end</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>errmsg_fn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>pymsg</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>errmsg_fn</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>decoder</name> <init>= <expr><call><name>PyImport_ImportModule</name><argument_list>(<argument><expr>"json.decoder"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>decoder</name> == <name>NULL</name></expr>)</condition><then>
            <return>return;</return></then></if>
        <expr_stmt><expr><name>errmsg_fn</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr>"errmsg"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>errmsg_fn</name> == <name>NULL</name></expr>)</condition><then>
            <return>return;</return></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>pymsg</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>errmsg_fn</name></expr></argument>, <argument><expr>"(zOn)"</expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>pymsg</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr><name>pymsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pymsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<comment type="block">/*

def linecol(doc, pos):
    lineno = doc.count('\n', 0, pos) + 1
    if lineno == 1:
        colno = pos
    else:
        colno = pos - doc.rindex('\n', 0, pos)
    return lineno, colno

def errmsg(msg, doc, pos, end=None):
    lineno, colno = linecol(doc, pos)
    if end is None:
        return '%s: line %d column %d (char %d)' % (msg, lineno, colno, pos)
    endlineno, endcolno = linecol(doc, end)
    return '%s: line %d column %d - line %d column %d (char %d - %d)' % (
        msg, lineno, colno, endlineno, endcolno, pos, end)

*/</comment>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>join_list_unicode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>lst</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ustr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>joinstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>ustr</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>c</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ustr</name> = <call><name>PyUnicode_FromUnicode</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>joinstr</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>joinstr</name> = <call><name>PyString_InternFromString</name><argument_list>(<argument><expr>"join"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>joinstr</name> == <name>NULL</name> || <name>ustr</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><call><name>PyObject_CallMethodObjArgs</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><name>joinstr</name></expr></argument>, <argument><expr><name>lst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>scanstring_str</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>pystr</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>end</name></decl></param>, <param><decl><type><name>char</name> *</type><name>encoding</name></decl></param>, <param><decl><type><name>int</name></type> <name>strict</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>rval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name> <init>= <expr><call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>pystr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>begin</name> <init>= <expr><name>end</name> - 1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>next</name> <init>= <expr><name>begin</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>buf</name> <init>= <expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>pystr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>chunks</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>chunks</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <goto>goto <name>bail</name>;</goto>
    }</block></then></if>
    <if>if <condition>(<expr><name>end</name> &lt; 0 || <name>len</name> &lt;= <name>end</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"end is out of bounds"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>bail</name>;</goto>
    }</block></then></if>
    <while>while <condition>(<expr>1</expr>)</condition> <block>{
        <comment type="block">/* Find the end of the string or the next escape */</comment>
        <decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>c</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>chunk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><expr><name>next</name> = <name>end</name></expr>;</init> <condition><expr><name>next</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>next</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>c</name> = <name><name>buf</name><index>[<expr><name>next</name></expr>]</index></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>c</name> == '"' || <name>c</name> == '\\'</expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>strict</name> &amp;&amp; <name>c</name> &lt;= 0x1f</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>raise_errmsg</name><argument_list>(<argument><expr>"Invalid control character at"</expr></argument>, <argument><expr><name>pystr</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>bail</name>;</goto>
            }</block></then></if></else></if>
        }</block></for>
        <if>if <condition>(<expr>!(<name>c</name> == '"' || <name>c</name> == '\\')</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>raise_errmsg</name><argument_list>(<argument><expr>"Unterminated string starting at"</expr></argument>, <argument><expr><name>pystr</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>bail</name>;</goto>
        }</block></then></if>
        <comment type="block">/* Pick up this chunk if it's not zero length */</comment>
        <if>if <condition>(<expr><name>next</name> != <name>end</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>PyObject</name> *</type><name>strchunk</name> <init>= <expr><call><name>PyBuffer_FromMemory</name><argument_list>(<argument><expr>&amp;<name><name>buf</name><index>[<expr><name>end</name></expr>]</index></name></expr></argument>, <argument><expr><name>next</name> - <name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>strchunk</name> == <name>NULL</name></expr>)</condition><then> <block>{
                <goto>goto <name>bail</name>;</goto>
            }</block></then></if>
            <expr_stmt><expr><name>chunk</name> = <call><name>PyUnicode_FromEncodedObject</name><argument_list>(<argument><expr><name>strchunk</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>strchunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>chunk</name> == <name>NULL</name></expr>)</condition><then> <block>{
                <goto>goto <name>bail</name>;</goto>
            }</block></then></if>
            <if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>bail</name>;</goto>
            }</block></then></if>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>next</name>++</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>c</name> == '"'</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>end</name> = <name>next</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
        <if>if <condition>(<expr><name>next</name> == <name>len</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>raise_errmsg</name><argument_list>(<argument><expr>"Unterminated string starting at"</expr></argument>, <argument><expr><name>pystr</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>bail</name>;</goto>
        }</block></then></if>
        <expr_stmt><expr><name>c</name> = <name><name>buf</name><index>[<expr><name>next</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>c</name> != 'u'</expr>)</condition><then> <block>{
            <comment type="block">/* Non-unicode backslash escapes */</comment>
            <expr_stmt><expr><name>end</name> = <name>next</name> + 1</expr>;</expr_stmt>
            <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{
                <case>case <expr>'"'</expr>: <break>break;</break>
                </case><case>case <expr>'\\'</expr>: <break>break;</break>
                </case><case>case <expr>'/'</expr>: <break>break;</break>
                </case><case>case <expr>'b'</expr>: <expr_stmt><expr><name>c</name> = '\b'</expr>;</expr_stmt> <break>break;</break>
                </case><case>case <expr>'f'</expr>: <expr_stmt><expr><name>c</name> = '\f'</expr>;</expr_stmt> <break>break;</break>
                </case><case>case <expr>'n'</expr>: <expr_stmt><expr><name>c</name> = '\n'</expr>;</expr_stmt> <break>break;</break>
                </case><case>case <expr>'r'</expr>: <expr_stmt><expr><name>c</name> = '\r'</expr>;</expr_stmt> <break>break;</break>
                </case><case>case <expr>'t'</expr>: <expr_stmt><expr><name>c</name> = '\t'</expr>;</expr_stmt> <break>break;</break>
                </case><default>default: <expr_stmt><expr><name>c</name> = 0</expr>;</expr_stmt>
            </default>}</block></switch>
            <if>if <condition>(<expr><name>c</name> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>raise_errmsg</name><argument_list>(<argument><expr>"Invalid \\escape"</expr></argument>, <argument><expr><name>pystr</name></expr></argument>, <argument><expr><name>end</name> - 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>bail</name>;</goto>
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>c</name> = 0</expr>;</expr_stmt>
            <expr_stmt><expr><name>next</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><name>end</name> = <name>next</name> + 4</expr>;</expr_stmt>
            <if>if <condition>(<expr><name>end</name> &gt;= <name>len</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>raise_errmsg</name><argument_list>(<argument><expr>"Invalid \\uXXXX escape"</expr></argument>, <argument><expr><name>pystr</name></expr></argument>, <argument><expr><name>next</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>bail</name>;</goto>
            }</block></then></if>
            <comment type="block">/* Decode 4 hex digits */</comment>
            <for>for (<init>;</init> <condition><expr><name>next</name> &lt; <name>end</name></expr>;</condition> <incr><expr><name>next</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>shl</name> <init>= <expr>(<name>end</name> - <name>next</name> - 1) &lt;&lt; 2</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>digit</name> <init>= <expr><name><name>buf</name><index>[<expr><name>next</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <switch>switch <condition>(<expr><name>digit</name></expr>)</condition> <block>{
                    <case>case <expr>'0'</expr>: </case><case>case <expr>'1'</expr>: </case><case>case <expr>'2'</expr>: </case><case>case <expr>'3'</expr>: </case><case>case <expr>'4'</expr>:
                    </case><case>case <expr>'5'</expr>: </case><case>case <expr>'6'</expr>: </case><case>case <expr>'7'</expr>: </case><case>case <expr>'8'</expr>: </case><case>case <expr>'9'</expr>:
                        <expr_stmt><expr><name>c</name> |= (<name>digit</name> - '0') &lt;&lt; <name>shl</name></expr>;</expr_stmt> <break>break;</break>
                    </case><case>case <expr>'a'</expr>: </case><case>case <expr>'b'</expr>: </case><case>case <expr>'c'</expr>: </case><case>case <expr>'d'</expr>: </case><case>case <expr>'e'</expr>:
                    </case><case>case <expr>'f'</expr>:
                        <expr_stmt><expr><name>c</name> |= (<name>digit</name> - 'a' + 10) &lt;&lt; <name>shl</name></expr>;</expr_stmt> <break>break;</break>
                    </case><case>case <expr>'A'</expr>: </case><case>case <expr>'B'</expr>: </case><case>case <expr>'C'</expr>: </case><case>case <expr>'D'</expr>: </case><case>case <expr>'E'</expr>:
                    </case><case>case <expr>'F'</expr>:
                        <expr_stmt><expr><name>c</name> |= (<name>digit</name> - 'A' + 10) &lt;&lt; <name>shl</name></expr>;</expr_stmt> <break>break;</break>
                    </case><default>default:
                        <expr_stmt><expr><call><name>raise_errmsg</name><argument_list>(<argument><expr>"Invalid \\uXXXX escape"</expr></argument>, <argument><expr><name>pystr</name></expr></argument>, <argument><expr><name>end</name> - 5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <goto>goto <name>bail</name>;</goto>
                </default>}</block></switch>
            }</block></for>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
            <comment type="block">/* Surrogate pair */</comment>
            <if>if <condition>(<expr><name>c</name> &gt;= 0xd800 &amp;&amp; <name>c</name> &lt;= 0xdbff</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>c2</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>end</name> + 6 &gt;= <name>len</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>raise_errmsg</name><argument_list>(<argument><expr>"Invalid \\uXXXX\\uXXXX surrogate pair"</expr></argument>, <argument><expr><name>pystr</name></expr></argument>,
                        <argument><expr><name>end</name> - 5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>next</name>++</expr>]</index></name> != '\\' || <name><name>buf</name><index>[<expr><name>next</name>++</expr>]</index></name> != 'u'</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>raise_errmsg</name><argument_list>(<argument><expr>"Invalid \\uXXXX\\uXXXX surrogate pair"</expr></argument>, <argument><expr><name>pystr</name></expr></argument>,
                        <argument><expr><name>end</name> - 5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>end</name> += 6</expr>;</expr_stmt>
                <comment type="block">/* Decode 4 hex digits */</comment>
                <for>for (<init>;</init> <condition><expr><name>next</name> &lt; <name>end</name></expr>;</condition> <incr><expr><name>next</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>shl</name> <init>= <expr>(<name>end</name> - <name>next</name> - 1) &lt;&lt; 2</expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>digit</name> <init>= <expr><name><name>buf</name><index>[<expr><name>next</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <switch>switch <condition>(<expr><name>digit</name></expr>)</condition> <block>{
                        <case>case <expr>'0'</expr>: </case><case>case <expr>'1'</expr>: </case><case>case <expr>'2'</expr>: </case><case>case <expr>'3'</expr>: </case><case>case <expr>'4'</expr>:
                        </case><case>case <expr>'5'</expr>: </case><case>case <expr>'6'</expr>: </case><case>case <expr>'7'</expr>: </case><case>case <expr>'8'</expr>: </case><case>case <expr>'9'</expr>:
                            <expr_stmt><expr><name>c2</name> |= (<name>digit</name> - '0') &lt;&lt; <name>shl</name></expr>;</expr_stmt> <break>break;</break>
                        </case><case>case <expr>'a'</expr>: </case><case>case <expr>'b'</expr>: </case><case>case <expr>'c'</expr>: </case><case>case <expr>'d'</expr>: </case><case>case <expr>'e'</expr>:
                        </case><case>case <expr>'f'</expr>:
                            <expr_stmt><expr><name>c2</name> |= (<name>digit</name> - 'a' + 10) &lt;&lt; <name>shl</name></expr>;</expr_stmt> <break>break;</break>
                        </case><case>case <expr>'A'</expr>: </case><case>case <expr>'B'</expr>: </case><case>case <expr>'C'</expr>: </case><case>case <expr>'D'</expr>: </case><case>case <expr>'E'</expr>:
                        </case><case>case <expr>'F'</expr>:
                            <expr_stmt><expr><name>c2</name> |= (<name>digit</name> - 'A' + 10) &lt;&lt; <name>shl</name></expr>;</expr_stmt> <break>break;</break>
                        </case><default>default:
                            <expr_stmt><expr><call><name>raise_errmsg</name><argument_list>(<argument><expr>"Invalid \\uXXXX escape"</expr></argument>, <argument><expr><name>pystr</name></expr></argument>, <argument><expr><name>end</name> - 5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <goto>goto <name>bail</name>;</goto>
                    </default>}</block></switch>
                }</block></for>
                <expr_stmt><expr><name>c</name> = 0x10000 + (((<name>c</name> - 0xd800) &lt;&lt; 10) | (<name>c2</name> - 0xdc00))</expr>;</expr_stmt>
            }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        }</block></else></if>
        <expr_stmt><expr><name>chunk</name> = <call><name>PyUnicode_FromUnicode</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>chunk</name> == <name>NULL</name></expr>)</condition><then> <block>{
            <goto>goto <name>bail</name>;</goto>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>bail</name>;</goto>
        }</block></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <expr_stmt><expr><name>rval</name> = <call><name>join_list_unicode</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rval</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <goto>goto <name>bail</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(Nn)"</expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return>
<label><name>bail</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>scanstring_unicode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>pystr</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>end</name></decl></param>, <param><decl><type><name>int</name></type> <name>strict</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>rval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name> <init>= <expr><call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name>pystr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>begin</name> <init>= <expr><name>end</name> - 1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>next</name> <init>= <expr><name>begin</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Py_UNICODE</name> *</type><name>buf</name> <init>= <expr><call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name>pystr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>chunks</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>chunks</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <goto>goto <name>bail</name>;</goto>
    }</block></then></if>
    <if>if <condition>(<expr><name>end</name> &lt; 0 || <name>len</name> &lt;= <name>end</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"end is out of bounds"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>bail</name>;</goto>
    }</block></then></if>
    <while>while <condition>(<expr>1</expr>)</condition> <block>{
        <comment type="block">/* Find the end of the string or the next escape */</comment>
        <decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>c</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>chunk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><expr><name>next</name> = <name>end</name></expr>;</init> <condition><expr><name>next</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>next</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>c</name> = <name><name>buf</name><index>[<expr><name>next</name></expr>]</index></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>c</name> == '"' || <name>c</name> == '\\'</expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>strict</name> &amp;&amp; <name>c</name> &lt;= 0x1f</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>raise_errmsg</name><argument_list>(<argument><expr>"Invalid control character at"</expr></argument>, <argument><expr><name>pystr</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>bail</name>;</goto>
            }</block></then></if></else></if>
        }</block></for>
        <if>if <condition>(<expr>!(<name>c</name> == '"' || <name>c</name> == '\\')</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>raise_errmsg</name><argument_list>(<argument><expr>"Unterminated string starting at"</expr></argument>, <argument><expr><name>pystr</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>bail</name>;</goto>
        }</block></then></if>
        <comment type="block">/* Pick up this chunk if it's not zero length */</comment>
        <if>if <condition>(<expr><name>next</name> != <name>end</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>chunk</name> = <call><name>PyUnicode_FromUnicode</name><argument_list>(<argument><expr>&amp;<name><name>buf</name><index>[<expr><name>end</name></expr>]</index></name></expr></argument>, <argument><expr><name>next</name> - <name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>chunk</name> == <name>NULL</name></expr>)</condition><then> <block>{
                <goto>goto <name>bail</name>;</goto>
            }</block></then></if>
            <if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>bail</name>;</goto>
            }</block></then></if>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>next</name>++</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>c</name> == '"'</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>end</name> = <name>next</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
        <if>if <condition>(<expr><name>next</name> == <name>len</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>raise_errmsg</name><argument_list>(<argument><expr>"Unterminated string starting at"</expr></argument>, <argument><expr><name>pystr</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>bail</name>;</goto>
        }</block></then></if>
        <expr_stmt><expr><name>c</name> = <name><name>buf</name><index>[<expr><name>next</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>c</name> != 'u'</expr>)</condition><then> <block>{
            <comment type="block">/* Non-unicode backslash escapes */</comment>
            <expr_stmt><expr><name>end</name> = <name>next</name> + 1</expr>;</expr_stmt>
            <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{
                <case>case <expr>'"'</expr>: <break>break;</break>
                </case><case>case <expr>'\\'</expr>: <break>break;</break>
                </case><case>case <expr>'/'</expr>: <break>break;</break>
                </case><case>case <expr>'b'</expr>: <expr_stmt><expr><name>c</name> = '\b'</expr>;</expr_stmt> <break>break;</break>
                </case><case>case <expr>'f'</expr>: <expr_stmt><expr><name>c</name> = '\f'</expr>;</expr_stmt> <break>break;</break>
                </case><case>case <expr>'n'</expr>: <expr_stmt><expr><name>c</name> = '\n'</expr>;</expr_stmt> <break>break;</break>
                </case><case>case <expr>'r'</expr>: <expr_stmt><expr><name>c</name> = '\r'</expr>;</expr_stmt> <break>break;</break>
                </case><case>case <expr>'t'</expr>: <expr_stmt><expr><name>c</name> = '\t'</expr>;</expr_stmt> <break>break;</break>
                </case><default>default: <expr_stmt><expr><name>c</name> = 0</expr>;</expr_stmt>
            </default>}</block></switch>
            <if>if <condition>(<expr><name>c</name> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>raise_errmsg</name><argument_list>(<argument><expr>"Invalid \\escape"</expr></argument>, <argument><expr><name>pystr</name></expr></argument>, <argument><expr><name>end</name> - 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>bail</name>;</goto>
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>c</name> = 0</expr>;</expr_stmt>
            <expr_stmt><expr><name>next</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><name>end</name> = <name>next</name> + 4</expr>;</expr_stmt>
            <if>if <condition>(<expr><name>end</name> &gt;= <name>len</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>raise_errmsg</name><argument_list>(<argument><expr>"Invalid \\uXXXX escape"</expr></argument>, <argument><expr><name>pystr</name></expr></argument>, <argument><expr><name>next</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>bail</name>;</goto>
            }</block></then></if>
            <comment type="block">/* Decode 4 hex digits */</comment>
            <for>for (<init>;</init> <condition><expr><name>next</name> &lt; <name>end</name></expr>;</condition> <incr><expr><name>next</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>shl</name> <init>= <expr>(<name>end</name> - <name>next</name> - 1) &lt;&lt; 2</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>digit</name> <init>= <expr><name><name>buf</name><index>[<expr><name>next</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <switch>switch <condition>(<expr><name>digit</name></expr>)</condition> <block>{
                    <case>case <expr>'0'</expr>: </case><case>case <expr>'1'</expr>: </case><case>case <expr>'2'</expr>: </case><case>case <expr>'3'</expr>: </case><case>case <expr>'4'</expr>:
                    </case><case>case <expr>'5'</expr>: </case><case>case <expr>'6'</expr>: </case><case>case <expr>'7'</expr>: </case><case>case <expr>'8'</expr>: </case><case>case <expr>'9'</expr>:
                        <expr_stmt><expr><name>c</name> |= (<name>digit</name> - '0') &lt;&lt; <name>shl</name></expr>;</expr_stmt> <break>break;</break>
                    </case><case>case <expr>'a'</expr>: </case><case>case <expr>'b'</expr>: </case><case>case <expr>'c'</expr>: </case><case>case <expr>'d'</expr>: </case><case>case <expr>'e'</expr>:
                    </case><case>case <expr>'f'</expr>:
                        <expr_stmt><expr><name>c</name> |= (<name>digit</name> - 'a' + 10) &lt;&lt; <name>shl</name></expr>;</expr_stmt> <break>break;</break>
                    </case><case>case <expr>'A'</expr>: </case><case>case <expr>'B'</expr>: </case><case>case <expr>'C'</expr>: </case><case>case <expr>'D'</expr>: </case><case>case <expr>'E'</expr>:
                    </case><case>case <expr>'F'</expr>:
                        <expr_stmt><expr><name>c</name> |= (<name>digit</name> - 'A' + 10) &lt;&lt; <name>shl</name></expr>;</expr_stmt> <break>break;</break>
                    </case><default>default:
                        <expr_stmt><expr><call><name>raise_errmsg</name><argument_list>(<argument><expr>"Invalid \\uXXXX escape"</expr></argument>, <argument><expr><name>pystr</name></expr></argument>, <argument><expr><name>end</name> - 5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <goto>goto <name>bail</name>;</goto>
                </default>}</block></switch>
            }</block></for>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
            <comment type="block">/* Surrogate pair */</comment>
            <if>if <condition>(<expr><name>c</name> &gt;= 0xd800 &amp;&amp; <name>c</name> &lt;= 0xdbff</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>c2</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>end</name> + 6 &gt;= <name>len</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>raise_errmsg</name><argument_list>(<argument><expr>"Invalid \\uXXXX\\uXXXX surrogate pair"</expr></argument>, <argument><expr><name>pystr</name></expr></argument>,
                        <argument><expr><name>end</name> - 5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>next</name>++</expr>]</index></name> != '\\' || <name><name>buf</name><index>[<expr><name>next</name>++</expr>]</index></name> != 'u'</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>raise_errmsg</name><argument_list>(<argument><expr>"Invalid \\uXXXX\\uXXXX surrogate pair"</expr></argument>, <argument><expr><name>pystr</name></expr></argument>,
                        <argument><expr><name>end</name> - 5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>end</name> += 6</expr>;</expr_stmt>
                <comment type="block">/* Decode 4 hex digits */</comment>
                <for>for (<init>;</init> <condition><expr><name>next</name> &lt; <name>end</name></expr>;</condition> <incr><expr><name>next</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>shl</name> <init>= <expr>(<name>end</name> - <name>next</name> - 1) &lt;&lt; 2</expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>digit</name> <init>= <expr><name><name>buf</name><index>[<expr><name>next</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <switch>switch <condition>(<expr><name>digit</name></expr>)</condition> <block>{
                        <case>case <expr>'0'</expr>: </case><case>case <expr>'1'</expr>: </case><case>case <expr>'2'</expr>: </case><case>case <expr>'3'</expr>: </case><case>case <expr>'4'</expr>:
                        </case><case>case <expr>'5'</expr>: </case><case>case <expr>'6'</expr>: </case><case>case <expr>'7'</expr>: </case><case>case <expr>'8'</expr>: </case><case>case <expr>'9'</expr>:
                            <expr_stmt><expr><name>c2</name> |= (<name>digit</name> - '0') &lt;&lt; <name>shl</name></expr>;</expr_stmt> <break>break;</break>
                        </case><case>case <expr>'a'</expr>: </case><case>case <expr>'b'</expr>: </case><case>case <expr>'c'</expr>: </case><case>case <expr>'d'</expr>: </case><case>case <expr>'e'</expr>:
                        </case><case>case <expr>'f'</expr>:
                            <expr_stmt><expr><name>c2</name> |= (<name>digit</name> - 'a' + 10) &lt;&lt; <name>shl</name></expr>;</expr_stmt> <break>break;</break>
                        </case><case>case <expr>'A'</expr>: </case><case>case <expr>'B'</expr>: </case><case>case <expr>'C'</expr>: </case><case>case <expr>'D'</expr>: </case><case>case <expr>'E'</expr>:
                        </case><case>case <expr>'F'</expr>:
                            <expr_stmt><expr><name>c2</name> |= (<name>digit</name> - 'A' + 10) &lt;&lt; <name>shl</name></expr>;</expr_stmt> <break>break;</break>
                        </case><default>default:
                            <expr_stmt><expr><call><name>raise_errmsg</name><argument_list>(<argument><expr>"Invalid \\uXXXX escape"</expr></argument>, <argument><expr><name>pystr</name></expr></argument>, <argument><expr><name>end</name> - 5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <goto>goto <name>bail</name>;</goto>
                    </default>}</block></switch>
                }</block></for>
                <expr_stmt><expr><name>c</name> = 0x10000 + (((<name>c</name> - 0xd800) &lt;&lt; 10) | (<name>c2</name> - 0xdc00))</expr>;</expr_stmt>
            }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        }</block></else></if>
        <expr_stmt><expr><name>chunk</name> = <call><name>PyUnicode_FromUnicode</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>chunk</name> == <name>NULL</name></expr>)</condition><then> <block>{
            <goto>goto <name>bail</name>;</goto>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>bail</name>;</goto>
        }</block></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <expr_stmt><expr><name>rval</name> = <call><name>join_list_unicode</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rval</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <goto>goto <name>bail</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(Nn)"</expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return>
<label><name>bail</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>pydoc_scanstring</name></expr></argument>,
<argument><expr>"scanstring(basestring, end, encoding) -&gt; (str, end)\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>py_scanstring</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>pystr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>encoding</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>strict</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"On|zi:scanstring"</expr></argument>, <argument><expr>&amp;<name>pystr</name></expr></argument>, <argument><expr>&amp;<name>end</name></expr></argument>, <argument><expr>&amp;<name>encoding</name></expr></argument>, <argument><expr>&amp;<name>strict</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>encoding</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>encoding</name> = <name>DEFAULT_ENCODING</name></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>pystr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name>scanstring_str</name><argument_list>(<argument><expr><name>pystr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>pystr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name>scanstring_unicode</name><argument_list>(<argument><expr><name>pystr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, 
                     <argument><expr>"first argument must be a string or unicode, not %.80s"</expr></argument>,
                     <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>pystr</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></else></if></else></if>
}</block></function>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>pydoc_encode_basestring_ascii</name></expr></argument>,
<argument><expr>"encode_basestring_ascii(basestring) -&gt; str\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>py_encode_basestring_ascii</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>pystr</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* METH_O */</comment>
    <if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>pystr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name>ascii_escape_str</name><argument_list>(<argument><expr><name>pystr</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>pystr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name>ascii_escape_unicode</name><argument_list>(<argument><expr><name>pystr</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, 
                     <argument><expr>"first argument must be a string or unicode, not %.80s"</expr></argument>,
                     <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>pystr</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></else></if></else></if>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>json_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"encode_basestring_ascii"</expr>, <expr>(<name>PyCFunction</name>)<name>py_encode_basestring_ascii</name></expr>,
     <expr><name>METH_O</name></expr>, <expr><name>pydoc_encode_basestring_ascii</name></expr>}</block></expr>,
    <expr><block>{<expr>"scanstring"</expr>, <expr>(<name>PyCFunction</name>)<name>py_scanstring</name></expr>, <expr><name>METH_VARARGS</name></expr>,
     <expr><name>pydoc_scanstring</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>module_doc</name></expr></argument>,
<argument><expr>"json speedups\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>void</name></type>
<name>init_json</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>m</name> = <call><name>Py_InitModule3</name><argument_list>(<argument><expr>"_json"</expr></argument>, <argument><expr><name>json_methods</name></expr></argument>, <argument><expr><name>module_doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
