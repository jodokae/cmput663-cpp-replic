<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/sre.h"><comment type="block">/*
 * Secret Labs' Regular Expression Engine
 *
 * regular expression matching engine
 *
 * Copyright (c) 1997-2001 by Secret Labs AB.  All rights reserved.
 *
 * See the _sre.c file for information on usage and redistribution.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SRE_INCLUDED</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_INCLUDED</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sre_constants.h"</cpp:file></cpp:include>

<comment type="block">/* size of a code word (must be unsigned short or larger, and
   large enough to hold a Py_UNICODE character) */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Py_UNICODE_WIDE</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_CODE</name></cpp:macro> <cpp:value>Py_UCS4</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_CODE</name></cpp:macro> <cpp:value>unsigned short</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>PyObject_VAR_HEAD</name>
    <name>Py_ssize_t</name></type> <name>groups</name></decl>;</decl_stmt> <comment type="block">/* must be first! */</comment>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>groupindex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>indexgroup</name></decl>;</decl_stmt>
    <comment type="block">/* compatibility */</comment>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>pattern</name></decl>;</decl_stmt> <comment type="block">/* pattern source (or None) */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt> <comment type="block">/* flags used when compiling pattern source */</comment>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>weakreflist</name></decl>;</decl_stmt> <comment type="block">/* List of weak references */</comment>
    <comment type="block">/* pattern code */</comment>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>codesize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SRE_CODE</name></type> <name><name>code</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>PatternObject</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PatternObject_GetCode</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((PatternObject*)(o))-&gt;code)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>PyObject_VAR_HEAD</name>
    <name>PyObject</name>*</type> <name>string</name></decl>;</decl_stmt> <comment type="block">/* link to the target string (must be first) */</comment>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>regs</name></decl>;</decl_stmt> <comment type="block">/* cached list of matching spans */</comment>
    <decl_stmt><decl><type><name>PatternObject</name>*</type> <name>pattern</name></decl>;</decl_stmt> <comment type="block">/* link to the regex (pattern) object */</comment>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>pos</name></decl>, <name>endpos</name>;</decl_stmt> <comment type="block">/* current target slice */</comment>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>lastindex</name></decl>;</decl_stmt> <comment type="block">/* last index marker seen by the engine (-1 if none) */</comment>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>groups</name></decl>;</decl_stmt> <comment type="block">/* number of groups (start/end marks) */</comment>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name><name>mark</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>MatchObject</name>;</typedef>

<typedef>typedef <function_decl><type><name>unsigned</name> <name>int</name></type> (*<name>SRE_TOLOWER_HOOK</name>)<parameter_list>(<param><decl><type><name>unsigned</name> <name>int</name></type> <name>ch</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* FIXME: &lt;fl&gt; shouldn't be a constant, really... */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_MARK_SIZE</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>SRE_REPEAT_T</name> <block>{
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SRE_CODE</name>*</type> <name>pattern</name></decl>;</decl_stmt> <comment type="block">/* points to REPEAT operator arguments */</comment>
    <decl_stmt><decl><type><name>void</name>*</type> <name>last_ptr</name></decl>;</decl_stmt> <comment type="block">/* helper to check for infinite loops */</comment>
    <decl_stmt><decl><type>struct <name>SRE_REPEAT_T</name> *</type><name>prev</name></decl>;</decl_stmt> <comment type="block">/* points to previous repeat context */</comment>
}</block></struct></type> <name>SRE_REPEAT</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
    <comment type="block">/* string pointers */</comment>
    <decl_stmt><decl><type><name>void</name>*</type> <name>ptr</name></decl>;</decl_stmt> <comment type="block">/* current position (also end of current slice) */</comment>
    <decl_stmt><decl><type><name>void</name>*</type> <name>beginning</name></decl>;</decl_stmt> <comment type="block">/* start of original string */</comment>
    <decl_stmt><decl><type><name>void</name>*</type> <name>start</name></decl>;</decl_stmt> <comment type="block">/* start of current slice */</comment>
    <decl_stmt><decl><type><name>void</name>*</type> <name>end</name></decl>;</decl_stmt> <comment type="block">/* end of original string */</comment>
    <comment type="block">/* attributes for the match object */</comment>
    <decl_stmt><decl><type><name>PyObject</name>*</type> <name>string</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>pos</name></decl>, <name>endpos</name>;</decl_stmt>
    <comment type="block">/* character size */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>charsize</name></decl>;</decl_stmt>
    <comment type="block">/* registers */</comment>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>lastindex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>lastmark</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>*</type> <name><name>mark</name><index>[<expr><name>SRE_MARK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <comment type="block">/* dynamically allocated stuff */</comment>
    <decl_stmt><decl><type><name>char</name>*</type> <name>data_stack</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>data_stack_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>data_stack_base</name></decl>;</decl_stmt>
    <comment type="block">/* current repeat context */</comment>
    <decl_stmt><decl><type><name>SRE_REPEAT</name> *</type><name>repeat</name></decl>;</decl_stmt>
    <comment type="block">/* hooks */</comment>
    <decl_stmt><decl><type><name>SRE_TOLOWER_HOOK</name></type> <name>lower</name></decl>;</decl_stmt>
}</block></struct></type> <name>SRE_STATE</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>PyObject_HEAD</name>
    <name>PyObject</name>*</type> <name>pattern</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SRE_STATE</name></type> <name>state</name></decl>;</decl_stmt>
}</block></struct></type> <name>ScannerObject</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
