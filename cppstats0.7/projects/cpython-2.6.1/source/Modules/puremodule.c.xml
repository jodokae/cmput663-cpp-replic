<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/puremodule.c"><comment type="block">/* This module exports the C API to such Pure Software Inc. (tm) (now
 * called Pure Atria Corporation) products as Purify (tm) and Quantify
 * (tm).  Other packages could be added, but I didn't have those products
 * and thus lack the API documentation.
 *
 * Currently supported: Quantify 2.x, Purify 3.x
 *
 * You need to decide which products you want to incorporate into the
 * module when you compile this file.  The way to do this is to edit
 * &lt;Python&gt;/Modules/Setup to pass the appropriate flags to the compiler.
 * -DWITH_PURIFY compiles in the Purify support, and -DWITH_QUANTIFY
 * compiles in the Quantify support.  -DWITH_ALL_PURE compiles in both.
 * You can also build a Purify'd or Quantify'd interpreter by passing in
 * the LINKCC variable to make.  E.g. if you want to build a Purify'd
 * interpreter and are using gcc, build Python with this command:
 *
 * make LINKCC='purify gcc'
 *
 * It would be nice (and probably easy) to provide this file as a shared
 * library, however since it doesn't appear that Pure gives us shared
 * libraries of the stubs, it doesn't really matter.  For now, you have to
 * link this file in statically.
 *
 * Major bogosity.  The purify.h header file exports purify_exit(), but
 * guess what?  It is not defined in the libpurify_stubs.a file!  I tried
 * to fake one here, hoping the Pure linker would Do The Right Thing when
 * instrumented for Purify, but it doesn't seem to, so I don't export
 * purify_exit() to the Python layer.  In Python you should raise a
 * SystemExit exception anyway.
 *
 * The actual purify.h and quantify.h files which embody the APIs are
 * copyrighted by Pure Software, Inc. and are only attainable through them.
 * This module assumes you have legally installed licenses of their
 * software.  Contact them on the Web via &lt;http://www.pureatria.com/&gt;
 *
 * Author: Barry Warsaw &lt;bwarsaw@python.org&gt;
 *                      &lt;bwarsaw@cnri.reston.va.us&gt;
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_PURIFY</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>WITH_ALL_PURE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#    <cpp:directive>include</cpp:directive> <cpp:file>&lt;purify.h&gt;</cpp:file></cpp:include>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_PURIFY_EXIT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>                <comment type="block">/* See note at top of file */</comment>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>PURE_PURIFY_VERSION</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>            <comment type="block">/* not provided by purify.h */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_QUANTIFY</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>WITH_ALL_PURE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#    <cpp:directive>include</cpp:directive> <cpp:file>&lt;quantify.h&gt;</cpp:file></cpp:include>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>PURE_QUANTIFY_VERSION</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>          <comment type="block">/* not provided by quantify.h */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PURIFY_H</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>QUANTIFY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>COMMON_PURE_FUNCTIONS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* PURIFY_H || QUANTIFY_H */</comment>

<typedef>typedef <function_decl><type><name>int</name></type> (*<name>VoidArgFunc</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>StringArgFunc</name>)<parameter_list>(<param><decl><type><name>char</name>*</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>PrintfishFunc</name>)<parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>char</name>*</decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>StringIntArgFunc</name>)<parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>char</name>*</decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl></typedef>


<escape char="0xc"/>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>call_voidarg_function</name><parameter_list>(<param><decl><type><name>VoidArgFunc</name></type> <name>func</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>status</name> = <call><name>func</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>call_stringarg_function</name><parameter_list>(<param><decl><type><name>StringArgFunc</name></type> <name>func</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>*</type> <name>stringarg</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s"</expr></argument>, <argument><expr>&amp;<name>stringarg</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>status</name> = <call><name>func</name><argument_list>(<argument><expr><name>stringarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>call_stringorint_function</name><parameter_list>(<param><decl><type><name>StringArgFunc</name></type> <name>func</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>intarg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>*</type> <name>stringarg</name></decl>;</decl_stmt>

        <comment type="block">/* according to the quantify.h file, the argument to
         * quantify_*_recording_system_call can be an integer or a string,
	 * but the functions are prototyped as taking a single char*
	 * argument. Yikes!
         */</comment>
	<if>if <condition>(<expr><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>&amp;<name>intarg</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<comment type="block">/* func is prototyped as int(*)(char*)
		 * better shut up the compiler
		 */</comment>
		<expr_stmt><expr><name>status</name> = <call><name>func</name><argument_list>(<argument><expr>(<name>char</name>*)<name>intarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>

	<else>else <block>{
		<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s"</expr></argument>, <argument><expr>&amp;<name>stringarg</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<return>return <expr><name>NULL</name></expr>;</return></then>
		<else>else
			<expr_stmt><expr><name>status</name> = <call><name>func</name><argument_list>(<argument><expr><name>stringarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	}</block></else></if>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>call_printfish_function</name><parameter_list>(<param><decl><type><name>PrintfishFunc</name></type> <name>func</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<comment type="block">/* we support the printf() style vararg functions by requiring the
         * formatting be done in Python.  At the C level we pass just a string
         * to the printf() style function.
         */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>*</type> <name>argstring</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s"</expr></argument>, <argument><expr>&amp;<name>argstring</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>status</name> = <call><name>func</name><argument_list>(<argument><expr>"%s"</expr></argument>, <argument><expr><name>argstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>call_intasaddr_function</name><parameter_list>(<param><decl><type><name>StringArgFunc</name></type> <name>func</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>memrep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name>memrep</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>id</name> = <call><name>func</name><argument_list>(<argument><expr>(<name>char</name>*)<name>memrep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>call_stringandint_function</name><parameter_list>(<param><decl><type><name>StringIntArgFunc</name></type> <name>func</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>,
			   <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>srcrep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"li"</expr></argument>, <argument><expr>&amp;<name>srcrep</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>status</name> = <call><name>func</name><argument_list>(<argument><expr>(<name>char</name>*)<name>srcrep</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/* functions common to all products
 *
 * N.B. These printf() style functions are a bit of a kludge.  Since the
 * API doesn't provide vprintf versions of them, we can't call them
 * directly.  They don't support all the standard printf % modifiers
 * anyway.  The way to use these is to use Python's % string operator to do
 * the formatting.  By the time these functions get the thing to print,
 * it's already a string, and they just use "%s" as the format string.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>COMMON_PURE_FUNCTIONS</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_pure_logfile_printf</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_printfish_function</name><argument_list>(<argument><expr><name>pure_logfile_printf</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_pure_printf</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_printfish_function</name><argument_list>(<argument><expr><name>pure_printf</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_pure_printf_with_banner</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_printfish_function</name><argument_list>(<argument><expr><name>pure_printf_with_banner</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* COMMON_PURE_FUNCTIONS */</comment>


<escape char="0xc"/>
<comment type="block">/* Purify functions
 *
 * N.B. There are some interfaces described in the purify.h file that are
 * not described in the manual.
 *
 * Unsigned longs purify_report_{address,number,type,result} are not
 * accessible from the Python layer since they seem mostly useful when
 * purify_stop_here() is called by the (C) debugger.  The same is true of
 * the purify_stop_here_internal() function so it isn't exported either.
 * And purify_stop_here() should never be called directly.
 *
 * The header file says purify_{new,all,clear_new}_reports() are obsolete
 * so they aren't exported.
 *
 * None of the custom dynamic loader functions are exported.
 *
 * purify_unsafe_memcpy() isn't exported.
 *
 * purify_{start,size}_of_block() aren't exported.
 *
 * The manual that I have says that the prototype for the second argument
 * to purify_map_pool is:
 *
 *    void (*fn)(char*)
 *
 * but the purify.h file declares it as:
 *
 *    void (*fn)(char*, int, void*)
 *
 * and does not explain what the other arguments are for.  I support the
 * latter but I don't know if I do it right or usefully.
 *
 * The header file says that purify_describe() returns a char* which is the
 * pointer passed to it.  The manual says it returns an int, but I believe
 * that is a typo.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PURIFY_H</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_all_inuse</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>purify_all_inuse</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_all_leaks</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>purify_all_leaks</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_new_inuse</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>purify_new_inuse</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_new_leaks</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>purify_new_leaks</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_clear_inuse</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>purify_clear_inuse</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_clear_leaks</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>purify_clear_leaks</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_all_fds_inuse</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>purify_all_fds_inuse</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_new_fds_inuse</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>purify_new_fds_inuse</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_printf_with_call_chain</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_printfish_function</name><argument_list>(<argument><expr><name>purify_printf_with_call_chain</name></expr></argument>,
				       <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_set_pool_id</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>memrep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"li:purify_set_pool_id"</expr></argument>, <argument><expr>&amp;<name>memrep</name></expr></argument>, <argument><expr>&amp;<name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><call><name>purify_set_pool_id</name><argument_list>(<argument><expr>(<name>char</name>*)<name>memrep</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_get_pool_id</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_intasaddr_function</name><argument_list>(<argument><expr><name>purify_get_pool_id</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_set_user_data</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>memrep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>datarep</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"ll:purify_set_user_data"</expr></argument>, <argument><expr>&amp;<name>memrep</name></expr></argument>, <argument><expr>&amp;<name>datarep</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><call><name>purify_set_user_data</name><argument_list>(<argument><expr>(<name>char</name>*)<name>memrep</name></expr></argument>, <argument><expr>(<name>void</name>*)<name>datarep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_get_user_data</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
        <comment type="block">/* can't use call_intasaddr_function() since purify_get_user_data()
         * returns a void*
         */</comment>
	<decl_stmt><decl><type><name>long</name></type> <name>memrep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>*</type> <name>data</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l:purify_get_user_data"</expr></argument>, <argument><expr>&amp;<name>memrep</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>data</name> = <call><name>purify_get_user_data</name><argument_list>(<argument><expr>(<name>char</name>*)<name>memrep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr>(<name>long</name>)<name>data</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<escape char="0xc"/>
<comment type="block">/* this global variable is shared by both mapping functions:
 * pure_purify_map_pool() and pure_purify_map_pool_id().  Since they cache
 * this variable it should be safe in the face of recursion or cross
 * calling.
 *
 * Further note that the prototype for the callback function is wrong in
 * the Purify manual.  The manual says the function takes a single char*,
 * but the header file says it takes an additional int and void*.  I have
 * no idea what these are for!
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>MapCallable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>map_pool_callback</name><parameter_list>(<param><decl><type><name>char</name>*</type> <name>mem</name></decl></param>, <param><decl><type><name>int</name></type> <name>user_size</name></decl></param>, <param><decl><type><name>void</name> *</type><name>user_aux_data</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>memrep</name> <init>= <expr>(<name>long</name>)<name>mem</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>user_aux_data_rep</name> <init>= <expr>(<name>long</name>)<name>user_aux_data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>*</type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>*</type> <name>memobj</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lil"</expr></argument>, <argument><expr><name>memrep</name></expr></argument>, <argument><expr><name>user_size</name></expr></argument>,
					 <argument><expr><name>user_aux_data_rep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>memobj</name> == <name>NULL</name></expr>)</condition><then>
		<return>return;</return></then></if>

	<expr_stmt><expr><name>result</name> = <call><name>PyEval_CallObject</name><argument_list>(<argument><expr><name>MapCallable</name></expr></argument>, <argument><expr><name>memobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>memobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_map_pool</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
        <comment type="block">/* cache global variable in case of recursion */</comment>
	<decl_stmt><decl><type><name>PyObject</name>*</type> <name>saved_callable</name> <init>= <expr><name>MapCallable</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>*</type> <name>arg_callable</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iO:purify_map_pool"</expr></argument>, <argument><expr>&amp;<name>id</name></expr></argument>, <argument><expr>&amp;<name>arg_callable</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr>!<call><name>PyCallable_Check</name><argument_list>(<argument><expr><name>arg_callable</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
				<argument><expr>"Second argument must be callable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>MapCallable</name> = <name>arg_callable</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>purify_map_pool</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>map_pool_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>MapCallable</name> = <name>saved_callable</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>PurifyMapPoolIdCallback</name><parameter_list>(<param><decl><type><name>int</name></type> <name>id</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name>*</type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>*</type> <name>intobj</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>intobj</name> == <name>NULL</name></expr>)</condition><then>
		<return>return;</return></then></if>

	<expr_stmt><expr><name>result</name> = <call><name>PyEval_CallObject</name><argument_list>(<argument><expr><name>MapCallable</name></expr></argument>, <argument><expr><name>intobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>intobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_map_pool_id</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
        <comment type="block">/* cache global variable in case of recursion */</comment>
	<decl_stmt><decl><type><name>PyObject</name>*</type> <name>saved_callable</name> <init>= <expr><name>MapCallable</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>*</type> <name>arg_callable</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O:purify_map_pool_id"</expr></argument>, <argument><expr>&amp;<name>arg_callable</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr>!<call><name>PyCallable_Check</name><argument_list>(<argument><expr><name>arg_callable</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Argument must be callable."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><name>MapCallable</name> = <name>arg_callable</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>purify_map_pool_id</name><argument_list>(<argument><expr><name>PurifyMapPoolIdCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>MapCallable</name> = <name>saved_callable</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_new_messages</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>purify_new_messages</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_all_messages</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>purify_all_messages</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_clear_messages</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>purify_clear_messages</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_clear_new_messages</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>purify_clear_new_messages</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_start_batch</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>purify_start_batch</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_start_batch_show_first</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>purify_start_batch_show_first</name></expr></argument>,
				     <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_stop_batch</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>purify_stop_batch</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_name_thread</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
        <comment type="block">/* can't strictly use call_stringarg_function since
         * purify_name_thread takes a const char*, not a char*
         */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>*</type> <name>stringarg</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s:purify_name_thread"</expr></argument>, <argument><expr>&amp;<name>stringarg</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>status</name> = <call><name>purify_name_thread</name><argument_list>(<argument><expr><name>stringarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_watch</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_intasaddr_function</name><argument_list>(<argument><expr><name>purify_watch</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_watch_1</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_intasaddr_function</name><argument_list>(<argument><expr><name>purify_watch_1</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_watch_2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_intasaddr_function</name><argument_list>(<argument><expr><name>purify_watch_2</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_watch_4</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_intasaddr_function</name><argument_list>(<argument><expr><name>purify_watch_4</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_watch_8</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_intasaddr_function</name><argument_list>(<argument><expr><name>purify_watch_8</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_watch_w_1</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_intasaddr_function</name><argument_list>(<argument><expr><name>purify_watch_w_1</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_watch_w_2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_intasaddr_function</name><argument_list>(<argument><expr><name>purify_watch_w_2</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_watch_w_4</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_intasaddr_function</name><argument_list>(<argument><expr><name>purify_watch_w_4</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_watch_w_8</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_intasaddr_function</name><argument_list>(<argument><expr><name>purify_watch_w_8</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_watch_r_1</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_intasaddr_function</name><argument_list>(<argument><expr><name>purify_watch_r_1</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_watch_r_2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_intasaddr_function</name><argument_list>(<argument><expr><name>purify_watch_r_2</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_watch_r_4</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_intasaddr_function</name><argument_list>(<argument><expr><name>purify_watch_r_4</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_watch_r_8</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_intasaddr_function</name><argument_list>(<argument><expr><name>purify_watch_r_8</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_watch_rw_1</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_intasaddr_function</name><argument_list>(<argument><expr><name>purify_watch_rw_1</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_watch_rw_2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_intasaddr_function</name><argument_list>(<argument><expr><name>purify_watch_rw_2</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_watch_rw_4</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_intasaddr_function</name><argument_list>(<argument><expr><name>purify_watch_rw_4</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_watch_rw_8</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_intasaddr_function</name><argument_list>(<argument><expr><name>purify_watch_rw_8</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_watch_n</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>addrrep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>*</type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"lis:purify_watch_n"</expr></argument>, <argument><expr>&amp;<name>addrrep</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>status</name> = <call><name>purify_watch_n</name><argument_list>(<argument><expr>(<name>char</name>*)<name>addrrep</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_watch_info</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>purify_watch_info</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_watch_remove</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>watchno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:purify_watch_remove"</expr></argument>, <argument><expr>&amp;<name>watchno</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>status</name> = <call><name>purify_watch_remove</name><argument_list>(<argument><expr><name>watchno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_watch_remove_all</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>purify_watch_remove_all</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_describe</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>addrrep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>*</type> <name>rtn</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l:purify_describe"</expr></argument>, <argument><expr>&amp;<name>addrrep</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>rtn</name> = <call><name>purify_describe</name><argument_list>(<argument><expr>(<name>char</name>*)<name>addrrep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr>(<name>long</name>)<name>rtn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_what_colors</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name></type> <name>addrrep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
    
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"li:purify_what_colors"</expr></argument>, <argument><expr>&amp;<name>addrrep</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>status</name> = <call><name>purify_what_colors</name><argument_list>(<argument><expr>(<name>char</name>*)<name>addrrep</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_is_running</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>purify_is_running</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_assert_is_readable</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_stringandint_function</name><argument_list>(<argument><expr><name>purify_assert_is_readable</name></expr></argument>,
					  <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_assert_is_writable</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_stringandint_function</name><argument_list>(<argument><expr><name>purify_assert_is_writable</name></expr></argument>,
					  <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAS_PURIFY_EXIT</name></expr></cpp:if>

<comment type="block">/* I wish I could include this, but I can't.  See the notes at the top of
 * the file.
 */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_purify_exit</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:purify_exit"</expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

        <comment type="block">/* purify_exit doesn't always act like exit(). See the manual */</comment>
	<expr_stmt><expr><call><name>purify_exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAS_PURIFY_EXIT */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* PURIFY_H */</comment>


<escape char="0xc"/>
<comment type="block">/* Quantify functions
 *
 * N.B. Some of these functions are only described in the quantify.h file,
 * not in the version of the hardcopy manual that I had.  If you're not
 * sure what some of these do, check the header file, it is documented
 * fairly well.
 *
 * None of the custom dynamic loader functions are exported.
 *
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>QUANTIFY_H</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_is_running</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>quantify_is_running</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_help</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>quantify_help</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_print_recording_state</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>quantify_print_recording_state</name></expr></argument>,
				     <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_start_recording_data</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>quantify_start_recording_data</name></expr></argument>,
				     <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_stop_recording_data</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>quantify_stop_recording_data</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_is_recording_data</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>quantify_is_recording_data</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_start_recording_system_calls</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>quantify_start_recording_system_calls</name></expr></argument>,
				     <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_stop_recording_system_calls</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>quantify_stop_recording_system_calls</name></expr></argument>,
				     <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_is_recording_system_calls</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>quantify_is_recording_system_calls</name></expr></argument>,
				     <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_start_recording_system_call</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_stringorint_function</name><argument_list>(<argument><expr><name>quantify_start_recording_system_call</name></expr></argument>,
					   <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_stop_recording_system_call</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_stringorint_function</name><argument_list>(<argument><expr><name>quantify_stop_recording_system_call</name></expr></argument>,
					 <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_is_recording_system_call</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_stringorint_function</name><argument_list>(<argument><expr><name>quantify_is_recording_system_call</name></expr></argument>,
					 <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_start_recording_dynamic_library_data</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(
		<argument><expr><name>quantify_start_recording_dynamic_library_data</name></expr></argument>,
		<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_stop_recording_dynamic_library_data</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(
		<argument><expr><name>quantify_stop_recording_dynamic_library_data</name></expr></argument>,
		<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_is_recording_dynamic_library_data</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(
		<argument><expr><name>quantify_is_recording_dynamic_library_data</name></expr></argument>,
		<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_start_recording_register_window_traps</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(
		<argument><expr><name>quantify_start_recording_register_window_traps</name></expr></argument>,
		<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_stop_recording_register_window_traps</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(
		<argument><expr><name>quantify_stop_recording_register_window_traps</name></expr></argument>,
		<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_is_recording_register_window_traps</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(
		<argument><expr><name>quantify_is_recording_register_window_traps</name></expr></argument>,
		<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_disable_recording_data</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>quantify_disable_recording_data</name></expr></argument>,
				     <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_clear_data</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>quantify_clear_data</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_save_data</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_voidarg_function</name><argument_list>(<argument><expr><name>quantify_save_data</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_save_data_to_file</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_stringarg_function</name><argument_list>(<argument><expr><name>quantify_save_data_to_file</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pure_quantify_add_annotation</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>call_stringarg_function</name><argument_list>(<argument><expr><name>quantify_add_annotation</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* QUANTIFY_H */</comment>


<escape char="0xc"/>
<comment type="block">/* external interface
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type>
<name><name>pure_methods</name><index>[]</index></name> <init>= <expr><block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>COMMON_PURE_FUNCTIONS</name></cpp:ifdef>
    <expr><block>{<expr>"pure_logfile_printf"</expr>,            <expr><name>pure_pure_logfile_printf</name></expr>,            <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"pure_printf"</expr>,                    <expr><name>pure_pure_printf</name></expr>,                    <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"pure_printf_with_banner"</expr>,        <expr><name>pure_pure_printf_with_banner</name></expr>,        <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* COMMON_PURE_FUNCTIONS */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PURIFY_H</name></cpp:ifdef>
    <expr><block>{<expr>"purify_all_inuse"</expr>,               <expr><name>pure_purify_all_inuse</name></expr>,               <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_all_leaks"</expr>,               <expr><name>pure_purify_all_leaks</name></expr>,               <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_new_inuse"</expr>,               <expr><name>pure_purify_new_inuse</name></expr>,               <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_new_leaks"</expr>,               <expr><name>pure_purify_new_leaks</name></expr>,               <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_clear_inuse"</expr>,             <expr><name>pure_purify_clear_inuse</name></expr>,             <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_clear_leaks"</expr>,             <expr><name>pure_purify_clear_leaks</name></expr>,             <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_all_fds_inuse"</expr>,           <expr><name>pure_purify_all_fds_inuse</name></expr>,           <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_new_fds_inuse"</expr>,           <expr><name>pure_purify_new_fds_inuse</name></expr>,           <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <comment type="block">/* see purify.h */</comment>
    <expr><block>{<expr>"purify_logfile_printf"</expr>,          <expr><name>pure_pure_logfile_printf</name></expr>,            <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_printf"</expr>,                  <expr><name>pure_pure_printf</name></expr>,                    <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_printf_with_banner"</expr>,      <expr><name>pure_pure_printf_with_banner</name></expr>,        <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <comment type="block">/**/</comment>
    <expr><block>{<expr>"purify_printf_with_call_chain"</expr>,  <expr><name>pure_purify_printf_with_call_chain</name></expr>,  <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_set_pool_id"</expr>,             <expr><name>pure_purify_set_pool_id</name></expr>,             <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_get_pool_id"</expr>,             <expr><name>pure_purify_get_pool_id</name></expr>,             <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_set_user_data"</expr>,           <expr><name>pure_purify_set_user_data</name></expr>,           <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_get_user_data"</expr>,           <expr><name>pure_purify_get_user_data</name></expr>,           <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_map_pool"</expr>,                <expr><name>pure_purify_map_pool</name></expr>,                <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_map_pool_id"</expr>,             <expr><name>pure_purify_map_pool_id</name></expr>,             <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_new_messages"</expr>,            <expr><name>pure_purify_new_messages</name></expr>,            <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_all_messages"</expr>,            <expr><name>pure_purify_all_messages</name></expr>,            <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_clear_messages"</expr>,          <expr><name>pure_purify_clear_messages</name></expr>,          <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_clear_new_messages"</expr>,      <expr><name>pure_purify_clear_new_messages</name></expr>,      <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_start_batch"</expr>,             <expr><name>pure_purify_start_batch</name></expr>,             <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_start_batch_show_first"</expr>,  <expr><name>pure_purify_start_batch_show_first</name></expr>,  <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_stop_batch"</expr>,              <expr><name>pure_purify_stop_batch</name></expr>,              <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_name_thread"</expr>,             <expr><name>pure_purify_name_thread</name></expr>,             <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_watch"</expr>,                   <expr><name>pure_purify_watch</name></expr>,                   <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_watch_1"</expr>,                 <expr><name>pure_purify_watch_1</name></expr>,                 <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_watch_2"</expr>,                 <expr><name>pure_purify_watch_2</name></expr>,                 <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_watch_4"</expr>,                 <expr><name>pure_purify_watch_4</name></expr>,                 <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_watch_8"</expr>,                 <expr><name>pure_purify_watch_8</name></expr>,                 <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_watch_w_1"</expr>,               <expr><name>pure_purify_watch_w_1</name></expr>,               <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_watch_w_2"</expr>,               <expr><name>pure_purify_watch_w_2</name></expr>,               <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_watch_w_4"</expr>,               <expr><name>pure_purify_watch_w_4</name></expr>,               <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_watch_w_8"</expr>,               <expr><name>pure_purify_watch_w_8</name></expr>,               <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_watch_r_1"</expr>,               <expr><name>pure_purify_watch_r_1</name></expr>,               <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_watch_r_2"</expr>,               <expr><name>pure_purify_watch_r_2</name></expr>,               <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_watch_r_4"</expr>,               <expr><name>pure_purify_watch_r_4</name></expr>,               <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_watch_r_8"</expr>,               <expr><name>pure_purify_watch_r_8</name></expr>,               <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_watch_rw_1"</expr>,              <expr><name>pure_purify_watch_rw_1</name></expr>,              <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_watch_rw_2"</expr>,              <expr><name>pure_purify_watch_rw_2</name></expr>,              <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_watch_rw_4"</expr>,              <expr><name>pure_purify_watch_rw_4</name></expr>,              <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_watch_rw_8"</expr>,              <expr><name>pure_purify_watch_rw_8</name></expr>,              <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_watch_n"</expr>,                 <expr><name>pure_purify_watch_n</name></expr>,                 <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_watch_info"</expr>,              <expr><name>pure_purify_watch_info</name></expr>,              <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_watch_remove"</expr>,            <expr><name>pure_purify_watch_remove</name></expr>,            <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_watch_remove_all"</expr>,        <expr><name>pure_purify_watch_remove_all</name></expr>,        <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_describe"</expr>,                <expr><name>pure_purify_describe</name></expr>,                <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_what_colors"</expr>,             <expr><name>pure_purify_what_colors</name></expr>,             <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_is_running"</expr>,              <expr><name>pure_purify_is_running</name></expr>,              <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_assert_is_readable"</expr>,      <expr><name>pure_purify_assert_is_readable</name></expr>,      <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"purify_assert_is_writable"</expr>,      <expr><name>pure_purify_assert_is_writable</name></expr>,      <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAS_PURIFY_EXIT</name></expr></cpp:if>
    <comment type="block">/* I wish I could include this, but I can't.  See the notes at the
     * top of the file.
     */</comment>
    <expr><block>{<expr>"purify_exit"</expr>,                    <expr><name>pure_purify_exit</name></expr>,                    <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAS_PURIFY_EXIT */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* PURIFY_H */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>QUANTIFY_H</name></cpp:ifdef>
    <expr><block>{<expr>"quantify_is_running"</expr>,            <expr><name>pure_quantify_is_running</name></expr>,            <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_help"</expr>,                  <expr><name>pure_quantify_help</name></expr>,                  <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_print_recording_state"</expr>, <expr><name>pure_quantify_print_recording_state</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_start_recording_data"</expr>,  <expr><name>pure_quantify_start_recording_data</name></expr>,  <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_stop_recording_data"</expr>,   <expr><name>pure_quantify_stop_recording_data</name></expr>,   <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_is_recording_data"</expr>,     <expr><name>pure_quantify_is_recording_data</name></expr>,  <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_start_recording_system_calls"</expr>,
     <expr><name>pure_quantify_start_recording_system_calls</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_stop_recording_system_calls"</expr>,
     <expr><name>pure_quantify_stop_recording_system_calls</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_is_recording_system_calls"</expr>,
     <expr><name>pure_quantify_is_recording_system_calls</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_start_recording_system_call"</expr>,
     <expr><name>pure_quantify_start_recording_system_call</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_stop_recording_system_call"</expr>,
     <expr><name>pure_quantify_stop_recording_system_call</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_is_recording_system_call"</expr>,
     <expr><name>pure_quantify_is_recording_system_call</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_start_recording_dynamic_library_data"</expr>,
     <expr><name>pure_quantify_start_recording_dynamic_library_data</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_stop_recording_dynamic_library_data"</expr>,
     <expr><name>pure_quantify_stop_recording_dynamic_library_data</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_is_recording_dynamic_library_data"</expr>,
     <expr><name>pure_quantify_is_recording_dynamic_library_data</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_start_recording_register_window_traps"</expr>,
     <expr><name>pure_quantify_start_recording_register_window_traps</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_stop_recording_register_window_traps"</expr>,
     <expr><name>pure_quantify_stop_recording_register_window_traps</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_is_recording_register_window_traps"</expr>,
     <expr><name>pure_quantify_is_recording_register_window_traps</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_disable_recording_data"</expr>,
     <expr><name>pure_quantify_disable_recording_data</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_clear_data"</expr>,        <expr><name>pure_quantify_clear_data</name></expr>,        <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_save_data"</expr>,         <expr><name>pure_quantify_save_data</name></expr>,         <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_save_data_to_file"</expr>, <expr><name>pure_quantify_save_data_to_file</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
    <expr><block>{<expr>"quantify_add_annotation"</expr>,    <expr><name>pure_quantify_add_annotation</name></expr>,    <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* QUANTIFY_H */</comment>
    <expr><block>{<expr><name>NULL</name></expr>,  <expr><name>NULL</name></expr>}</block></expr>			     <comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>


<escape char="0xc"/>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ins</name><parameter_list>(<param><decl><type><name>d</name></type></decl></param>, <param><decl><type><name>name</name></type></decl></param>, <param><decl><type><name>val</name></type></decl></param>)</parameter_list>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>*</type> <name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>val</name></decl>;</decl_stmt>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>v</name></expr>)</condition><then> <block>{
		<expr_stmt><expr>(<name>void</name>)<call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>


<function><type><name>void</name></type>
<name>initpure</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"the pure module has been removed in "
	                   "Python 3.0"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
	    <return>return;</return></then></if>	

	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"pure"</expr></argument>, <argument><expr><name>pure_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
    		<return>return;</return></then></if>
	<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* this is bogus because we should be able to find this information
         * out from the header files.  Pure's current versions don't
         * include this information!
         */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PURE_PURIFY_VERSION</name></cpp:ifdef>
	<expr_stmt><expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"PURIFY_VERSION"</expr></argument>, <argument><expr><name>PURE_PURIFY_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"PURIFY_VERSION"</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="block">/* these aren't terribly useful because purify_exit() isn't
         * exported correctly.  See the note at the top of the file.
         */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PURIFY_EXIT_ERRORS</name></cpp:ifdef>
	<expr_stmt><expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"PURIFY_EXIT_ERRORS"</expr></argument>, <argument><expr><name>PURIFY_EXIT_ERRORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PURIFY_EXIT_LEAKS</name></cpp:ifdef>
	<expr_stmt><expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"PURIFY_EXIT_LEAKS"</expr></argument>,  <argument><expr><name>PURIFY_EXIT_LEAKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PURIFY_EXIT_PLEAKS</name></cpp:ifdef>
	<expr_stmt><expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"PURIFY_EXIT_PLEAKS"</expr></argument>, <argument><expr><name>PURIFY_EXIT_PLEAKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PURE_QUANTIFY_VERSION</name></cpp:ifdef>
	<expr_stmt><expr><call><name>ins</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"QUANTIFY_VERSION"</expr></argument>, <argument><expr><name>PURE_QUANTIFY_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"QUANTIFY_VERSION"</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
</unit>
