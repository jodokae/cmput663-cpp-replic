<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/addrinfo.h"><comment type="block">/*
 * Copyright (C) 1995, 1996, 1997, 1998, and 1999 WIDE Project.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_GETADDRINFO</name></cpp:ifndef>

<comment type="block">/*
 * Error return codes from getaddrinfo()
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EAI_ADDRFAMILY</name></cpp:ifdef>
<comment type="block">/* If this is defined, there is a conflicting implementation
   in the C library, which can't be used for some reason.
   Make sure it won't interfere with this emulation. */</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_ADDRFAMILY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_AGAIN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_BADFLAGS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_FAIL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_FAMILY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_MEMORY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_NODATA</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_NONAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_SERVICE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_SOCKTYPE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_SYSTEM</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_BADHINTS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_PROTOCOL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_MAX</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getaddrinfo</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getaddrinfo</name></cpp:macro> <cpp:value>fake_getaddrinfo</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* EAI_ADDRFAMILY */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>EAI_ADDRFAMILY</name></cpp:macro>	 <cpp:value>1</cpp:value></cpp:define>	<comment type="block">/* address family for hostname not supported */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>EAI_AGAIN</name></cpp:macro>	 <cpp:value>2</cpp:value></cpp:define>	<comment type="block">/* temporary failure in name resolution */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>EAI_BADFLAGS</name></cpp:macro>	 <cpp:value>3</cpp:value></cpp:define>	<comment type="block">/* invalid value for ai_flags */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>EAI_FAIL</name></cpp:macro>	 <cpp:value>4</cpp:value></cpp:define>	<comment type="block">/* non-recoverable failure in name resolution */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>EAI_FAMILY</name></cpp:macro>	 <cpp:value>5</cpp:value></cpp:define>	<comment type="block">/* ai_family not supported */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>EAI_MEMORY</name></cpp:macro>	 <cpp:value>6</cpp:value></cpp:define>	<comment type="block">/* memory allocation failure */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>EAI_NODATA</name></cpp:macro>	 <cpp:value>7</cpp:value></cpp:define>	<comment type="block">/* no address associated with hostname */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>EAI_NONAME</name></cpp:macro>	 <cpp:value>8</cpp:value></cpp:define>	<comment type="block">/* hostname nor servname provided, or not known */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>EAI_SERVICE</name></cpp:macro>	 <cpp:value>9</cpp:value></cpp:define>	<comment type="block">/* servname not supported for ai_socktype */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>EAI_SOCKTYPE</name></cpp:macro>	<cpp:value>10</cpp:value></cpp:define>	<comment type="block">/* ai_socktype not supported */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>EAI_SYSTEM</name></cpp:macro>	<cpp:value>11</cpp:value></cpp:define>	<comment type="block">/* system error returned in errno */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_BADHINTS</name></cpp:macro>	<cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_PROTOCOL</name></cpp:macro>	<cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_MAX</name></cpp:macro>		<cpp:value>14</cpp:value></cpp:define>

<comment type="block">/*
 * Flag values for getaddrinfo()
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AI_PASSIVE</name></cpp:ifdef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_PASSIVE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_CANONNAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_NUMERICHOST</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_MASK</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_ALL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_V4MAPPED_CFG</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_ADDRCONFIG</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_V4MAPPED</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_DEFAULT</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AI_PASSIVE */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>AI_PASSIVE</name></cpp:macro>	<cpp:value>0x00000001</cpp:value></cpp:define> <comment type="block">/* get address to use bind() */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>AI_CANONNAME</name></cpp:macro>	<cpp:value>0x00000002</cpp:value></cpp:define> <comment type="block">/* fill ai_canonname */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>AI_NUMERICHOST</name></cpp:macro>	<cpp:value>0x00000004</cpp:value></cpp:define> <comment type="block">/* prevent name resolution */</comment>
<comment type="block">/* valid flags for addrinfo */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>AI_MASK</name></cpp:macro>		<cpp:value>(AI_PASSIVE | AI_CANONNAME | AI_NUMERICHOST)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>AI_ALL</name></cpp:macro>		<cpp:value>0x00000100</cpp:value></cpp:define> <comment type="block">/* IPv6 and IPv4-mapped (with AI_V4MAPPED) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>AI_V4MAPPED_CFG</name></cpp:macro>	<cpp:value>0x00000200</cpp:value></cpp:define> <comment type="block">/* accept IPv4-mapped if kernel supports */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>AI_ADDRCONFIG</name></cpp:macro>	<cpp:value>0x00000400</cpp:value></cpp:define> <comment type="block">/* only if any address is assigned */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>AI_V4MAPPED</name></cpp:macro>	<cpp:value>0x00000800</cpp:value></cpp:define> <comment type="block">/* accept IPv4-mapped IPv6 address */</comment>
<comment type="block">/* special recommended flags for getipnodebyname */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>AI_DEFAULT</name></cpp:macro>	<cpp:value>(AI_V4MAPPED_CFG | AI_ADDRCONFIG)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !HAVE_GETADDRINFO */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_GETNAMEINFO</name></cpp:ifndef>

<comment type="block">/*
 * Constants for getnameinfo()
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NI_MAXHOST</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>NI_MAXHOST</name></cpp:macro>	<cpp:value>1025</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>NI_MAXSERV</name></cpp:macro>	<cpp:value>32</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !NI_MAXHOST */</comment>

<comment type="block">/*
 * Flag values for getnameinfo()
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NI_NOFQDN</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>NI_NOFQDN</name></cpp:macro>	<cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>NI_NUMERICHOST</name></cpp:macro>	<cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>NI_NAMEREQD</name></cpp:macro>	<cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>NI_NUMERICSERV</name></cpp:macro>	<cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>NI_DGRAM</name></cpp:macro>	<cpp:value>0x00000010</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !NI_NOFQDN */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !HAVE_GETNAMEINFO */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_ADDRINFO</name></cpp:ifndef>
<struct>struct <name>addrinfo</name> <block>{
	<decl_stmt><decl><type><name>int</name></type>	<name>ai_flags</name></decl>;</decl_stmt>	<comment type="block">/* AI_PASSIVE, AI_CANONNAME */</comment>
	<decl_stmt><decl><type><name>int</name></type>	<name>ai_family</name></decl>;</decl_stmt>	<comment type="block">/* PF_xxx */</comment>
	<decl_stmt><decl><type><name>int</name></type>	<name>ai_socktype</name></decl>;</decl_stmt>	<comment type="block">/* SOCK_xxx */</comment>
	<decl_stmt><decl><type><name>int</name></type>	<name>ai_protocol</name></decl>;</decl_stmt>	<comment type="block">/* 0 or IPPROTO_xxx for IPv4 and IPv6 */</comment>
	<decl_stmt><decl><type><name>size_t</name></type>	<name>ai_addrlen</name></decl>;</decl_stmt>	<comment type="block">/* length of ai_addr */</comment>
	<decl_stmt><decl><type><name>char</name>	*</type><name>ai_canonname</name></decl>;</decl_stmt>	<comment type="block">/* canonical name for hostname */</comment>
	<decl_stmt><decl><type>struct <name>sockaddr</name> *</type><name>ai_addr</name></decl>;</decl_stmt>	<comment type="block">/* binary address */</comment>
	<decl_stmt><decl><type>struct <name>addrinfo</name> *</type><name>ai_next</name></decl>;</decl_stmt>	<comment type="block">/* next structure in linked list */</comment>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !HAVE_ADDRINFO */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_SOCKADDR_STORAGE</name></cpp:ifndef>
<comment type="block">/*
 * RFC 2553: protocol-independent placeholder for socket addresses
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SS_MAXSIZE</name></cpp:macro>	<cpp:value>128</cpp:value></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LONG_LONG</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SS_ALIGNSIZE</name></cpp:macro>	<cpp:value>(sizeof(PY_LONG_LONG))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SS_ALIGNSIZE</name></cpp:macro>	<cpp:value>(sizeof(double))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_LONG_LONG */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SS_PAD1SIZE</name></cpp:macro>	<cpp:value>(_SS_ALIGNSIZE - sizeof(u_char) * 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SS_PAD2SIZE</name></cpp:macro>	<cpp:value>(_SS_MAXSIZE - sizeof(u_char) * 2 - \
				_SS_PAD1SIZE - _SS_ALIGNSIZE)</cpp:value></cpp:define>

<struct>struct <name>sockaddr_storage</name> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ss_len</name></decl>;</decl_stmt>		<comment type="block">/* address length */</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ss_family</name></decl>;</decl_stmt>	<comment type="block">/* address family */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>ss_family</name></decl>;</decl_stmt>	<comment type="block">/* address family */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_SOCKADDR_SA_LEN */</comment>
	<decl_stmt><decl><type><name>char</name></type>	<name><name>__ss_pad1</name><index>[<expr><name>_SS_PAD1SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LONG_LONG</name></cpp:ifdef>
	<decl_stmt><decl><type><name>PY_LONG_LONG</name></type> <name>__ss_align</name></decl>;</decl_stmt>	<comment type="block">/* force desired structure storage alignment */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>double</name></type> <name>__ss_align</name></decl>;</decl_stmt>	<comment type="block">/* force desired structure storage alignment */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_LONG_LONG */</comment>
	<decl_stmt><decl><type><name>char</name></type>	<name><name>__ss_pad2</name><index>[<expr><name>_SS_PAD2SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !HAVE_SOCKADDR_STORAGE */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>freehostent</name></type> <name>Py_PROTO</name><argument_list>(<argument><expr>(struct <name>hostent</name> *)</expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
