<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/clmodule.c">

<comment type="block">/* Cl objects */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLDEBUG</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CL_JPEG_SOFTWARE</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>CL_JPEG_COSMO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dmedia/cl_cosmo.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>int</name></type> <name>ob_isCompressor</name></decl>;</decl_stmt>	<comment type="block">/* Compressor or Decompressor */</comment>
	<decl_stmt><decl><type><name>CL_Handle</name></type> <name>ob_compressorHdl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name> *</type><name>ob_paramtypes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ob_nparams</name></decl>;</decl_stmt>
}</block></struct></type> <name>clobject</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ClError</name></decl>;</decl_stmt>		<comment type="block">/* exception cl.error */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>error_handler_called</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * We want to use the function prototypes that are available in the C
 * compiler on the SGI.  Because of that, we need to declare the first
 * argument of the compressor and decompressor methods as "object *",
 * even though they are really "clobject *".  Therefore we cast the
 * argument to the proper type using this macro.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELF</name></cpp:macro>	<cpp:value>((clobject *) self)</cpp:value></cpp:define>

<comment type="block">/********************************************************************
			  Utility routines.
********************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cl_ErrorHandler</name><parameter_list>(<param><decl><type><name>CL_Handle</name></type> <name>handle</name></decl></param>, <param><decl><type><name>int</name></type> <name>code</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* hopefully big enough */</comment>
	<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>	<comment type="block">/* don't change existing error */</comment>
		<return>return;</return></then></if>
	<expr_stmt><expr><name>error_handler_called</name> = 1</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vsprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> = &amp;<name><name>errbuf</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> - 1</expr>]</index></name></expr>;</expr_stmt> <comment type="block">/* swat the line feed */</comment>
	<if>if <condition>(<expr>*<name>p</name> == '\n'</expr>)</condition><then>
		<expr_stmt><expr>*<name>p</name> = 0</expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ClError</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * This assumes that params are always in the range 0 to some maximum.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>param_type_is_float</name><parameter_list>(<param><decl><type><name>clobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>int</name></type> <name>param</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>bufferlength</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_paramtypes</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>error_handler_called</name> = 0</expr>;</expr_stmt>
		<expr_stmt><expr><name>bufferlength</name> = <call><name>clQueryParams</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_compressorHdl</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>error_handler_called</name></expr>)</condition><then>
			<return>return <expr>-1</expr>;</return></then></if>

		<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_paramtypes</name></name> = <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>bufferlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_paramtypes</name></name> == <name>NULL</name></expr>)</condition><then>
			<return>return <expr>-1</expr>;</return></then></if>
		<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_nparams</name></name> = <name>bufferlength</name> / 2</expr>;</expr_stmt>

		<expr_stmt><expr>(<name>void</name>) <call><name>clQueryParams</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_compressorHdl</name></name></expr></argument>,
				     <argument><expr><name><name>self</name>-&gt;<name>ob_paramtypes</name></name></expr></argument>, <argument><expr><name>bufferlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>error_handler_called</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_paramtypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_paramtypes</name></name> = <name>NULL</name></expr>;</expr_stmt>
			<return>return <expr>-1</expr>;</return>
		}</block></then></if>
	}</block></then></if>

	<if>if <condition>(<expr><name>param</name> &lt; 0 || <name>param</name> &gt;= <name><name>self</name>-&gt;<name>ob_nparams</name></name></expr>)</condition><then>
		<return>return <expr>-1</expr>;</return></then></if>

	<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_paramtypes</name><index>[<expr><name>param</name>*2 + 1</expr>]</index></name> == <name>CL_FLOATING_ENUM_VALUE</name> ||
	    <name><name>self</name>-&gt;<name>ob_paramtypes</name><index>[<expr><name>param</name>*2 + 1</expr>]</index></name> == <name>CL_FLOATING_RANGE_VALUE</name></expr>)</condition><then>
		<return>return <expr>1</expr>;</return></then>
	<else>else
		<return>return <expr>0</expr>;</return></else></if>
}</block></function>

<comment type="block">/********************************************************************
	       Single image compression/decompression.
********************************************************************/</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cl_CompressImage</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>compressionScheme</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>originalFormat</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>compressionRatio</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>frameBufferSize</name></decl>, <decl><type ref="prev"/><name>compressedBufferSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>frameBuffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>compressedBuffer</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iiiifs#"</expr></argument>, <argument><expr>&amp;<name>compressionScheme</name></expr></argument>,
			 <argument><expr>&amp;<name>width</name></expr></argument>, <argument><expr>&amp;<name>height</name></expr></argument>,
			 <argument><expr>&amp;<name>originalFormat</name></expr></argument>, <argument><expr>&amp;<name>compressionRatio</name></expr></argument>, <argument><expr>&amp;<name>frameBuffer</name></expr></argument>,
			 <argument><expr>&amp;<name>frameBufferSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

  <label><name>retry</name>:</label>
	<expr_stmt><expr><name>compressedBuffer</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>frameBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>compressedBuffer</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>compressedBufferSize</name> = <name>frameBufferSize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>error_handler_called</name> = 0</expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>clCompressImage</name><argument_list>(<argument><expr><name>compressionScheme</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>originalFormat</name></expr></argument>,
			    <argument><expr><name>compressionRatio</name></expr></argument>, <argument><expr>(<name>void</name> *) <name>frameBuffer</name></expr></argument>,
			    <argument><expr>&amp;<name>compressedBufferSize</name></expr></argument>,
			    <argument><expr>(<name>void</name> *) <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>compressedBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
	    == <name>FAILURE</name> || <name>error_handler_called</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>compressedBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr>!<name>error_handler_called</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ClError</name></expr></argument>, <argument><expr>"clCompressImage failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<if>if <condition>(<expr><name>compressedBufferSize</name> &gt; <name>frameBufferSize</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>frameBufferSize</name> = <name>compressedBufferSize</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>compressedBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>retry</name>;</goto>
	}</block></then></if>

	<if>if <condition>(<expr><name>compressedBufferSize</name> &lt; <name>frameBufferSize</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>_PyString_Resize</name><argument_list>(<argument><expr>&amp;<name>compressedBuffer</name></expr></argument>, <argument><expr><name>compressedBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<return>return <expr><name>compressedBuffer</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cl_DecompressImage</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>compressionScheme</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>originalFormat</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>compressedBuffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>compressedBufferSize</name></decl>, <decl><type ref="prev"/><name>frameBufferSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>frameBuffer</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iiiis#"</expr></argument>, <argument><expr>&amp;<name>compressionScheme</name></expr></argument>, <argument><expr>&amp;<name>width</name></expr></argument>, <argument><expr>&amp;<name>height</name></expr></argument>,
			 <argument><expr>&amp;<name>originalFormat</name></expr></argument>, <argument><expr>&amp;<name>compressedBuffer</name></expr></argument>,
			 <argument><expr>&amp;<name>compressedBufferSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>frameBufferSize</name> = <name>width</name> * <name>height</name> * <call><name>CL_BytesPerPixel</name><argument_list>(<argument><expr><name>originalFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>frameBuffer</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>frameBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>frameBuffer</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>error_handler_called</name> = 0</expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>clDecompressImage</name><argument_list>(<argument><expr><name>compressionScheme</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>originalFormat</name></expr></argument>,
			      <argument><expr><name>compressedBufferSize</name></expr></argument>, <argument><expr><name>compressedBuffer</name></expr></argument>,
			      <argument><expr>(<name>void</name> *) <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>frameBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
	    == <name>FAILURE</name> || <name>error_handler_called</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>frameBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr>!<name>error_handler_called</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ClError</name></expr></argument>, <argument><expr>"clDecompressImage failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<return>return <expr><name>frameBuffer</name></expr>;</return>
}</block></function>

<comment type="block">/********************************************************************
		Sequential compression/decompression.
********************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CheckCompressor</name><parameter_list>(<param><type><name>self</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>if ((self)-&gt;ob_compressorHdl == NULL) { \
	PyErr_SetString(PyExc_RuntimeError, "(de)compressor not active"); \
	return NULL; \
}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>doClose</name><parameter_list>(<param><decl><type><name>clobject</name> *</type><name>self</name></decl></param>, <param><function_decl><type><name>int</name></type> (*<name>close_func</name>)<parameter_list>(<param><decl><type><name>CL_Handle</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>CheckCompressor</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>error_handler_called</name> = 0</expr>;</expr_stmt>
	<if>if <condition>(<expr><call>(*<name>close_func</name>)<argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_compressorHdl</name></name></expr></argument>)</argument_list></call> == <name>FAILURE</name> ||
	    <name>error_handler_called</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr>!<name>error_handler_called</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ClError</name></expr></argument>, <argument><expr>"close failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_compressorHdl</name></name> = <name>NULL</name></expr>;</expr_stmt>

	<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_paramtypes</name></name></expr>)</condition><then>
		<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_paramtypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_paramtypes</name></name> = <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>clm_CloseCompressor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>doClose</name><argument_list>(<argument><expr><name>SELF</name></expr></argument>, <argument><expr><name>clCloseCompressor</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>clm_CloseDecompressor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>doClose</name><argument_list>(<argument><expr><name>SELF</name></expr></argument>, <argument><expr><name>clCloseDecompressor</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>clm_Compress</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>numberOfFrames</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>frameBufferSize</name></decl>, <decl><type ref="prev"/><name>compressedBufferSize</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>frameBuffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CheckCompressor</name><argument_list>(<argument><expr><name>SELF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(is#)"</expr></argument>, <argument><expr>&amp;<name>numberOfFrames</name></expr></argument>,
			 <argument><expr>&amp;<name>frameBuffer</name></expr></argument>, <argument><expr>&amp;<name>frameBufferSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>error_handler_called</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> = <call><name>clGetParam</name><argument_list>(<argument><expr><name><name>SELF</name>-&gt;<name>ob_compressorHdl</name></name></expr></argument>, <argument><expr><name>CL_COMPRESSED_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>compressedBufferSize</name> = <name>size</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>error_handler_called</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>data</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>data</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>error_handler_called</name> = 0</expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>clCompress</name><argument_list>(<argument><expr><name><name>SELF</name>-&gt;<name>ob_compressorHdl</name></name></expr></argument>, <argument><expr><name>numberOfFrames</name></expr></argument>,
		       <argument><expr>(<name>void</name> *) <name>frameBuffer</name></expr></argument>, <argument><expr>&amp;<name>compressedBufferSize</name></expr></argument>,
		       <argument><expr>(<name>void</name> *) <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == <name>FAILURE</name> ||
	    <name>error_handler_called</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr>!<name>error_handler_called</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ClError</name></expr></argument>, <argument><expr>"compress failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<if>if <condition>(<expr><name>compressedBufferSize</name> &lt; <name>size</name></expr>)</condition><then>
		<if>if <condition>(<expr><call><name>_PyString_Resize</name><argument_list>(<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>compressedBufferSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<return>return <expr><name>NULL</name></expr>;</return></then></if></then></if>

	<if>if <condition>(<expr><name>compressedBufferSize</name> &gt; <name>size</name></expr>)</condition><then> <block>{
		<comment type="block">/* we didn't get all "compressed" data */</comment>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ClError</name></expr></argument>,
				<argument><expr>"compressed data is more than fitted"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<return>return <expr><name>data</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>clm_Decompress</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>numberOfFrames</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>compressedData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>compressedDataSize</name></decl>, <decl><type ref="prev"/><name>dataSize</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CheckCompressor</name><argument_list>(<argument><expr><name>SELF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(is#)"</expr></argument>, <argument><expr>&amp;<name>numberOfFrames</name></expr></argument>, <argument><expr>&amp;<name>compressedData</name></expr></argument>,
			 <argument><expr>&amp;<name>compressedDataSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>error_handler_called</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name>dataSize</name> = <call><name>clGetParam</name><argument_list>(<argument><expr><name><name>SELF</name>-&gt;<name>ob_compressorHdl</name></name></expr></argument>, <argument><expr><name>CL_FRAME_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>error_handler_called</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>data</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>data</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>error_handler_called</name> = 0</expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>clDecompress</name><argument_list>(<argument><expr><name><name>SELF</name>-&gt;<name>ob_compressorHdl</name></name></expr></argument>, <argument><expr><name>numberOfFrames</name></expr></argument>,
			 <argument><expr><name>compressedDataSize</name></expr></argument>, <argument><expr>(<name>void</name> *) <name>compressedData</name></expr></argument>,
			 <argument><expr>(<name>void</name> *) <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == <name>FAILURE</name> ||
	    <name>error_handler_called</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr>!<name>error_handler_called</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ClError</name></expr></argument>, <argument><expr>"decompress failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<return>return <expr><name>data</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>doParams</name><parameter_list>(<param><decl><type><name>clobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><function_decl><type><name>int</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>CL_Handle</name></type></decl></param>, <param><decl><type><name>int</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list></function_decl></param>,
	 <param><decl><type><name>int</name></type> <name>modified</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>list</name></decl>, *<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name> *</type><name>PVbuffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>number</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name>CheckCompressor</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr>&amp;<name>list</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>length</name> = <call><name>PyList_Size</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>PVbuffer</name> = <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>PVbuffer</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
	<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
		<expr_stmt><expr><name>v</name> = <call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name>PyFloat_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>number</name> = <call><name>PyFloat_AsDouble</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>PVbuffer</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>CL_TypeIsInt</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>PVbuffer</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr>(<name>i</name> &amp; 1) &amp;&amp;
			    <call><name>param_type_is_float</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>PVbuffer</name><index>[<expr><name>i</name>-1</expr>]</index></name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
				<expr_stmt><expr><name>number</name> = <name><name>PVbuffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>PVbuffer</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>CL_TypeIsInt</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>PVbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		}</block></else></if></else></if>
	}</block></for>

	<expr_stmt><expr><name>error_handler_called</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><call>(*<name>func</name>)<argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_compressorHdl</name></name></expr></argument>, <argument><expr><name>PVbuffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>error_handler_called</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>PVbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<if>if <condition>(<expr><name>modified</name></expr>)</condition><then> <block>{
		<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
			<if>if <condition>(<expr>(<name>i</name> &amp; 1) &amp;&amp;
			    <call><name>param_type_is_float</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>PVbuffer</name><index>[<expr><name>i</name>-1</expr>]</index></name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
				<expr_stmt><expr><name>number</name> = <call><name>CL_TypeIsFloat</name><argument_list>(<argument><expr><name><name>PVbuffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>v</name> = <call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else
				<expr_stmt><expr><name>v</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>PVbuffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></then></if>

	<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>PVbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>clm_GetParams</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>doParams</name><argument_list>(<argument><expr><name>SELF</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>clGetParams</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>clm_SetParams</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>doParams</name><argument_list>(<argument><expr><name>SELF</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>clSetParams</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>do_get</name><parameter_list>(<param><decl><type><name>clobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><function_decl><type><name>int</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>CL_Handle</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>paramID</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>fvalue</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CheckCompressor</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>&amp;<name>paramID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>error_handler_called</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name>value</name> = <call>(*<name>func</name>)<argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_compressorHdl</name></name></expr></argument>, <argument><expr><name>paramID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>error_handler_called</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><call><name>param_type_is_float</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>paramID</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><name>fvalue</name> = <call><name>CL_TypeIsFloat</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr><name>fvalue</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then></if>

	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>clm_GetParam</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>do_get</name><argument_list>(<argument><expr><name>SELF</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>clGetParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>clm_GetDefault</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>do_get</name><argument_list>(<argument><expr><name>SELF</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>clGetDefault</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>clm_SetParam</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>paramID</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>fvalue</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CheckCompressor</name><argument_list>(<argument><expr><name>SELF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(ii)"</expr></argument>, <argument><expr>&amp;<name>paramID</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"(if)"</expr></argument>, <argument><expr>&amp;<name>paramID</name></expr></argument>, <argument><expr>&amp;<name>fvalue</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
			       <argument><expr>"bad argument list (format '(ii)' or '(if)')"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><name>value</name> = <call><name>CL_TypeIsInt</name><argument_list>(<argument><expr><name>fvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
		<if>if <condition>(<expr><call><name>param_type_is_float</name><argument_list>(<argument><expr><name>SELF</name></expr></argument>, <argument><expr><name>paramID</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
			<expr_stmt><expr><name>fvalue</name> = <name>value</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>value</name> = <call><name>CL_TypeIsInt</name><argument_list>(<argument><expr><name>fvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></else></if>

 	<expr_stmt><expr><name>error_handler_called</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name>value</name> = <call><name>clSetParam</name><argument_list>(<argument><expr><name><name>SELF</name>-&gt;<name>ob_compressorHdl</name></name></expr></argument>, <argument><expr><name>paramID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>error_handler_called</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><call><name>param_type_is_float</name><argument_list>(<argument><expr><name>SELF</name></expr></argument>, <argument><expr><name>paramID</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then>
		<return>return <expr><call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr><call><name>CL_TypeIsFloat</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
	<else>else
		<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>clm_GetParamID</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CheckCompressor</name><argument_list>(<argument><expr><name>SELF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s"</expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>error_handler_called</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name>value</name> = <call><name>clGetParamID</name><argument_list>(<argument><expr><name><name>SELF</name>-&gt;<name>ob_compressorHdl</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>value</name> == <name>FAILURE</name> || <name>error_handler_called</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr>!<name>error_handler_called</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ClError</name></expr></argument>, <argument><expr>"getparamid failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>clm_QueryParams</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>bufferlength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name> *</type><name>PVbuffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CheckCompressor</name><argument_list>(<argument><expr><name>SELF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>error_handler_called</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name>bufferlength</name> = <call><name>clQueryParams</name><argument_list>(<argument><expr><name><name>SELF</name>-&gt;<name>ob_compressorHdl</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>error_handler_called</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>PVbuffer</name> = <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>bufferlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>PVbuffer</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>

	<expr_stmt><expr><name>bufferlength</name> = <call><name>clQueryParams</name><argument_list>(<argument><expr><name><name>SELF</name>-&gt;<name>ob_compressorHdl</name></name></expr></argument>, <argument><expr><name>PVbuffer</name></expr></argument>,
				     <argument><expr><name>bufferlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>error_handler_called</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>PVbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><name>list</name> = <call><name>PyList_New</name><argument_list>(<argument><expr><name>bufferlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>list</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>PVbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>bufferlength</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
		<if>if <condition>(<expr><name>i</name> &amp; 1</expr>)</condition><then>
			<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>PVbuffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else>else <if>if <condition>(<expr><name><name>PVbuffer</name><index>[<expr><name>i</name></expr>]</index></name> == 0</expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else
			<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
				   <argument><expr><call><name>PyString_FromString</name><argument_list>(<argument><expr>(<name>char</name> *) <name><name>PVbuffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
	}</block></for>

	<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>PVbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>list</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>clm_GetMinMax</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>param</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>fmin</name></decl>, <decl><type ref="prev"/><name>fmax</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CheckCompressor</name><argument_list>(<argument><expr><name>SELF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>&amp;<name>param</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><call><name>clGetMinMax</name><argument_list>(<argument><expr><name><name>SELF</name>-&gt;<name>ob_compressorHdl</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr>&amp;<name>min</name></expr></argument>, <argument><expr>&amp;<name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr><call><name>param_type_is_float</name><argument_list>(<argument><expr><name>SELF</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><name>fmin</name> = <call><name>CL_TypeIsFloat</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>fmax</name> = <call><name>CL_TypeIsFloat</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(ff)"</expr></argument>, <argument><expr><name>fmin</name></expr></argument>, <argument><expr><name>fmax</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then></if>

	<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(ii)"</expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>clm_GetName</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>param</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CheckCompressor</name><argument_list>(<argument><expr><name>SELF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>&amp;<name>param</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>error_handler_called</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name>name</name> = <call><name>clGetName</name><argument_list>(<argument><expr><name><name>SELF</name>-&gt;<name>ob_compressorHdl</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>name</name> == <name>NULL</name> || <name>error_handler_called</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr>!<name>error_handler_called</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ClError</name></expr></argument>, <argument><expr>"getname failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>clm_QuerySchemeFromHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>CheckCompressor</name><argument_list>(<argument><expr><name>SELF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>clQuerySchemeFromHandle</name><argument_list>(<argument><expr><name><name>SELF</name>-&gt;<name>ob_compressorHdl</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>clm_ReadHeader</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>headerSize</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CheckCompressor</name><argument_list>(<argument><expr><name>SELF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#"</expr></argument>, <argument><expr>&amp;<name>header</name></expr></argument>, <argument><expr>&amp;<name>headerSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>clReadHeader</name><argument_list>(<argument><expr><name><name>SELF</name>-&gt;<name>ob_compressorHdl</name></name></expr></argument>,
					   <argument><expr><name>headerSize</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>compressor_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"close"</expr>,		<expr><name>clm_CloseCompressor</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>, <comment type="block">/* alias */</comment>
	<expr><block>{<expr>"CloseCompressor"</expr>,	<expr><name>clm_CloseCompressor</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"Compress"</expr>,		<expr><name>clm_Compress</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"GetDefault"</expr>,		<expr><name>clm_GetDefault</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"GetMinMax"</expr>,		<expr><name>clm_GetMinMax</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"GetName"</expr>,		<expr><name>clm_GetName</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"GetParam"</expr>,		<expr><name>clm_GetParam</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"GetParamID"</expr>,		<expr><name>clm_GetParamID</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"GetParams"</expr>,		<expr><name>clm_GetParams</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"QueryParams"</expr>,		<expr><name>clm_QueryParams</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"QuerySchemeFromHandle"</expr>,<expr><name>clm_QuerySchemeFromHandle</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"SetParam"</expr>,		<expr><name>clm_SetParam</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"SetParams"</expr>,		<expr><name>clm_SetParams</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,			<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>decompressor_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"close"</expr>,		<expr><name>clm_CloseDecompressor</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,	<comment type="block">/* alias */</comment>
	<expr><block>{<expr>"CloseDecompressor"</expr>,	<expr><name>clm_CloseDecompressor</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"Decompress"</expr>,		<expr><name>clm_Decompress</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"GetDefault"</expr>,		<expr><name>clm_GetDefault</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"GetMinMax"</expr>,		<expr><name>clm_GetMinMax</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"GetName"</expr>,		<expr><name>clm_GetName</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"GetParam"</expr>,		<expr><name>clm_GetParam</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"GetParamID"</expr>,		<expr><name>clm_GetParamID</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"GetParams"</expr>,		<expr><name>clm_GetParams</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"ReadHeader"</expr>,		<expr><name>clm_ReadHeader</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"QueryParams"</expr>,		<expr><name>clm_QueryParams</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"QuerySchemeFromHandle"</expr>,<expr><name>clm_QuerySchemeFromHandle</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"SetParam"</expr>,		<expr><name>clm_SetParam</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"SetParams"</expr>,		<expr><name>clm_SetParams</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,			<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cl_dealloc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>SELF</name>-&gt;<name>ob_compressorHdl</name></name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name><name>SELF</name>-&gt;<name>ob_isCompressor</name></name></expr>)</condition><then>
			<expr_stmt><expr><call><name>clCloseCompressor</name><argument_list>(<argument><expr><name><name>SELF</name>-&gt;<name>ob_compressorHdl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else>else
			<expr_stmt><expr><call><name>clCloseDecompressor</name><argument_list>(<argument><expr><name><name>SELF</name>-&gt;<name>ob_compressorHdl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	}</block></then></if>
	<expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cl_getattr</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>SELF</name>-&gt;<name>ob_isCompressor</name></name></expr>)</condition><then>
		<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>compressor_methods</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></then>
	<else>else
		<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>decompressor_methods</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Cltype</name> <init>= <expr><block>{
	<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>)</argument_list></call>
	0</expr>,			<comment type="block">/*ob_size*/</comment>
	<expr>"cl.cl"</expr>,		<comment type="block">/*tp_name*/</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>clobject</name></expr></argument>)</argument_list></sizeof></expr>,	<comment type="block">/*tp_size*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_itemsize*/</comment>
	<comment type="block">/* methods */</comment>
	<expr>(<name>destructor</name>)<name>cl_dealloc</name></expr>,	<comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_print*/</comment>
	<expr>(<name>getattrfunc</name>)<name>cl_getattr</name></expr>, <comment type="block">/*tp_getattr*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_setattr*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_compare*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_repr*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_as_number*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_as_sequence*/</comment>
	<expr>0</expr>,			<comment type="block">/*tp_as_mapping*/</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>doOpen</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><function_decl><type><name>int</name></type> (*<name>open_func</name>)<parameter_list>(<param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>CL_Handle</name> *</type></decl></param>)</parameter_list></function_decl></param>,
       <param><decl><type><name>int</name></type> <name>iscompressor</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>scheme</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>clobject</name> *</type><name>new</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>&amp;<name>scheme</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>new</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>clobject</name></expr></argument>, <argument><expr>&amp;<name>Cltype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>new</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name><name>new</name>-&gt;<name>ob_compressorHdl</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name>-&gt;<name>ob_isCompressor</name></name> = <name>iscompressor</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name>-&gt;<name>ob_paramtypes</name></name> = <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>error_handler_called</name> = 0</expr>;</expr_stmt>
	<if>if <condition>(<expr><call>(*<name>open_func</name>)<argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr>&amp;<name><name>new</name>-&gt;<name>ob_compressorHdl</name></name></expr></argument>)</argument_list></call> == <name>FAILURE</name> ||
	    <name>error_handler_called</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr>!<name>error_handler_called</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ClError</name></expr></argument>, <argument><expr>"Open(De)Compressor failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr>(<name>PyObject</name> *)<name>new</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cl_OpenCompressor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>doOpen</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>clOpenCompressor</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cl_OpenDecompressor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>doOpen</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>clOpenDecompressor</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cl_QueryScheme</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>headerlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>scheme</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#"</expr></argument>, <argument><expr>&amp;<name>header</name></expr></argument>, <argument><expr>&amp;<name>headerlen</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>scheme</name> = <call><name>clQueryScheme</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>scheme</name> &lt; 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ClError</name></expr></argument>, <argument><expr>"unknown compression scheme"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cl_QueryMaxHeaderSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>scheme</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>&amp;<name>scheme</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>clQueryMaxHeaderSize</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cl_QueryAlgorithms</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>algorithmMediaType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>bufferlength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name> *</type><name>PVbuffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>&amp;<name>algorithmMediaType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>error_handler_called</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name>bufferlength</name> = <call><name>clQueryAlgorithms</name><argument_list>(<argument><expr><name>algorithmMediaType</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>error_handler_called</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>PVbuffer</name> = <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>bufferlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>PVbuffer</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>

	<expr_stmt><expr><name>bufferlength</name> = <call><name>clQueryAlgorithms</name><argument_list>(<argument><expr><name>algorithmMediaType</name></expr></argument>, <argument><expr><name>PVbuffer</name></expr></argument>,
					 <argument><expr><name>bufferlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>error_handler_called</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>PVbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><name>list</name> = <call><name>PyList_New</name><argument_list>(<argument><expr><name>bufferlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>list</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>PVbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>bufferlength</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
		<if>if <condition>(<expr><name>i</name> &amp; 1</expr>)</condition><then>
			<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>PVbuffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else>else <if>if <condition>(<expr><name><name>PVbuffer</name><index>[<expr><name>i</name></expr>]</index></name> == 0</expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else
			<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
				   <argument><expr><call><name>PyString_FromString</name><argument_list>(<argument><expr>(<name>char</name> *) <name><name>PVbuffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
	}</block></for>

	<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>PVbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>list</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cl_QuerySchemeFromName</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>algorithmMediaType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>scheme</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"is"</expr></argument>, <argument><expr>&amp;<name>algorithmMediaType</name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>error_handler_called</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name>scheme</name> = <call><name>clQuerySchemeFromName</name><argument_list>(<argument><expr><name>algorithmMediaType</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>error_handler_called</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ClError</name></expr></argument>, <argument><expr>"unknown compression scheme"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cl_GetAlgorithmName</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>scheme</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>&amp;<name>scheme</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<expr_stmt><expr><name>name</name> = <call><name>clGetAlgorithmName</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>name</name> == 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ClError</name></expr></argument>, <argument><expr>"unknown compression scheme"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>

	<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>do_set</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><function_decl><type><name>int</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>scheme</name></decl>, <decl><type ref="prev"/><name>paramID</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>fvalue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>is_float</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iii"</expr></argument>, <argument><expr>&amp;<name>scheme</name></expr></argument>, <argument><expr>&amp;<name>paramID</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iif"</expr></argument>, <argument><expr>&amp;<name>scheme</name></expr></argument>, <argument><expr>&amp;<name>paramID</name></expr></argument>, <argument><expr>&amp;<name>fvalue</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
			     <argument><expr>"bad argument list (format '(iii)' or '(iif)')"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><name>value</name> = <call><name>CL_TypeIsInt</name><argument_list>(<argument><expr><name>fvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>is_float</name> = 1</expr>;</expr_stmt>
	}</block></then> <else>else <block>{
		<comment type="block">/* check some parameters which we know to be floats */</comment>
		<switch>switch <condition>(<expr><name>scheme</name></expr>)</condition> <block>{
		<case>case <expr><name>CL_COMPRESSION_RATIO</name></expr>:
		</case><case>case <expr><name>CL_SPEED</name></expr>:
			<expr_stmt><expr><name>fvalue</name> = <name>value</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>value</name> = <call><name>CL_TypeIsInt</name><argument_list>(<argument><expr><name>fvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>is_float</name> = 1</expr>;</expr_stmt>
			<break>break;</break>
		</case>}</block></switch>
	}</block></else></if>

 	<expr_stmt><expr><name>error_handler_called</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name>value</name> = <call>(*<name>func</name>)<argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><name>paramID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>error_handler_called</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>

	<if>if <condition>(<expr><name>is_float</name></expr>)</condition><then>
		<return>return <expr><call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr><call><name>CL_TypeIsFloat</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
	<else>else
		<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cl_SetDefault</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>do_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>clSetDefault</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cl_SetMin</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>do_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>clSetMin</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cl_SetMax</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>do_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>clSetMax</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>func</name><parameter_list>(<param><type><name>name</name></type></param>, <param><type><name>handler</name></type></param>)</parameter_list></cpp:macro>	\
<cpp:value>static PyObject *cl_##name(PyObject *self, PyObject *args) \
{ \
	  int x; \
	  if (!PyArg_ParseTuple(args, "i", &amp;x)) return NULL; \
	  return Py##handler(CL_##name(x)); \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>func2</name><parameter_list>(<param><type><name>name</name></type></param>, <param><type><name>handler</name></type></param>)</parameter_list></cpp:macro>	\
<cpp:value>static PyObject *cl_##name(PyObject *self, PyObject *args) \
{ \
	  int a1, a2; \
	  if (!PyArg_ParseTuple(args, "ii", &amp;a1, &amp;a2)) return NULL; \
	  return Py##handler(CL_##name(a1, a2)); \
}</cpp:value></cpp:define>

<macro><name>func</name><argument_list>(<argument>BytesPerSample</argument>, <argument>Int_FromLong</argument>)</argument_list></macro>
<macro><name>func</name><argument_list>(<argument>BytesPerPixel</argument>, <argument>Int_FromLong</argument>)</argument_list></macro>
<macro><name>func</name><argument_list>(<argument>AudioFormatName</argument>, <argument>String_FromString</argument>)</argument_list></macro>
<macro><name>func</name><argument_list>(<argument>VideoFormatName</argument>, <argument>String_FromString</argument>)</argument_list></macro>
<macro><name>func</name><argument_list>(<argument>AlgorithmNumber</argument>, <argument>Int_FromLong</argument>)</argument_list></macro>
<macro><name>func</name><argument_list>(<argument>AlgorithmType</argument>, <argument>Int_FromLong</argument>)</argument_list></macro>
<macro><name>func2</name><argument_list>(<argument>Algorithm</argument>, <argument>Int_FromLong</argument>)</argument_list></macro>
<macro><name>func</name><argument_list>(<argument>ParamNumber</argument>, <argument>Int_FromLong</argument>)</argument_list></macro>
<macro><name>func</name><argument_list>(<argument>ParamType</argument>, <argument>Int_FromLong</argument>)</argument_list></macro>
<macro><name>func2</name><argument_list>(<argument>ParamID</argument>, <argument>Int_FromLong</argument>)</argument_list></macro>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CLDEBUG</name></cpp:ifdef>
	<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cvt_type</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>fnumber</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>&amp;<name>number</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr><call><name>CL_TypeIsFloat</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
	<else>else <block>{
		<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"f"</expr></argument>, <argument><expr>&amp;<name>fnumber</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>CL_TypeIsInt</name><argument_list>(<argument><expr><name>fnumber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></else></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>cl_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"CompressImage"</expr>,	<expr><name>cl_CompressImage</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"DecompressImage"</expr>,	<expr><name>cl_DecompressImage</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"GetAlgorithmName"</expr>,	<expr><name>cl_GetAlgorithmName</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"OpenCompressor"</expr>,	<expr><name>cl_OpenCompressor</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"OpenDecompressor"</expr>,	<expr><name>cl_OpenDecompressor</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"QueryAlgorithms"</expr>,	<expr><name>cl_QueryAlgorithms</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"QueryMaxHeaderSize"</expr>,	<expr><name>cl_QueryMaxHeaderSize</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"QueryScheme"</expr>,		<expr><name>cl_QueryScheme</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"QuerySchemeFromName"</expr>,	<expr><name>cl_QuerySchemeFromName</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"SetDefault"</expr>,		<expr><name>cl_SetDefault</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"SetMax"</expr>,		<expr><name>cl_SetMax</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"SetMin"</expr>,		<expr><name>cl_SetMin</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"BytesPerSample"</expr>,	<expr><name>cl_BytesPerSample</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"BytesPerPixel"</expr>,	<expr><name>cl_BytesPerPixel</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"AudioFormatName"</expr>,	<expr><name>cl_AudioFormatName</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"VideoFormatName"</expr>,	<expr><name>cl_VideoFormatName</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"AlgorithmNumber"</expr>,	<expr><name>cl_AlgorithmNumber</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"AlgorithmType"</expr>,	<expr><name>cl_AlgorithmType</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"Algorithm"</expr>,		<expr><name>cl_Algorithm</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"ParamNumber"</expr>,		<expr><name>cl_ParamNumber</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"ParamType"</expr>,		<expr><name>cl_ParamType</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
	<expr><block>{<expr>"ParamID"</expr>,		<expr><name>cl_ParamID</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CLDEBUG</name></cpp:ifdef>
	<expr><block>{<expr>"cvt_type"</expr>,		<expr><name>cvt_type</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><name>NULL</name></expr>,			<expr><name>NULL</name></expr>}</block></expr> <comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_JPEG_SOFTWARE</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IRIX_5_3_LIBRARY</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>initcl</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>, *<decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
    
    <if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"the cl module has been removed in "
                       "Python 3.0"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
        <return>return;</return></then></if>
    
	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"cl"</expr></argument>, <argument><expr><name>cl_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ClError</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"cl.error"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr>(<name>void</name>) <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"error"</expr></argument>, <argument><expr><name>ClError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_ADDED_ALGORITHM_ERROR</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_ADDED_ALGORITHM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ADDED_ALGORITHM_ERROR"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_ALAW</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_ALAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ALAW"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_ALGORITHM_ID</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_ALGORITHM_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ALGORITHM_ID"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_ALGORITHM_TABLE_FULL</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_ALGORITHM_TABLE_FULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ALGORITHM_TABLE_FULL"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_ALGORITHM_VERSION</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_ALGORITHM_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ALGORITHM_VERSION"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_ALG_AUDIO</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_ALG_AUDIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ALG_AUDIO"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_ALG_VIDEO</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_ALG_VIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ALG_VIDEO"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_AUDIO</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_AUDIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AUDIO"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_AWARE_BITRATE_POLICY</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_AWARE_BITRATE_POLICY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWARE_BITRATE_POLICY"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_AWARE_BITRATE_TARGET</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_AWARE_BITRATE_TARGET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWARE_BITRATE_TARGET"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_AWARE_CHANNEL_POLICY</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_AWARE_CHANNEL_POLICY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWARE_CHANNEL_POLICY"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_AWARE_CONST_QUAL</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_AWARE_CONST_QUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWARE_CONST_QUAL"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_AWARE_ERROR</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_AWARE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWARE_ERROR"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_AWARE_FIXED_RATE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_AWARE_FIXED_RATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWARE_FIXED_RATE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_AWARE_INDEPENDENT</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_AWARE_INDEPENDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWARE_INDEPENDENT"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_AWARE_JOINT_STEREO</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_AWARE_JOINT_STEREO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWARE_JOINT_STEREO"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_AWARE_LAYER</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_AWARE_LAYER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWARE_LAYER"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_AWARE_LOSSLESS</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_AWARE_LOSSLESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWARE_LOSSLESS"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_AWARE_MPEG_AUDIO</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_AWARE_MPEG_AUDIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWARE_MPEG_AUDIO"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_AWARE_MPEG_LAYER_I</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_AWARE_MPEG_LAYER_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWARE_MPEG_LAYER_I"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_AWARE_MPEG_LAYER_II</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_AWARE_MPEG_LAYER_II</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWARE_MPEG_LAYER_II"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_AWARE_MULTIRATE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_AWARE_MULTIRATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWARE_MULTIRATE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_AWARE_NOISE_MARGIN</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_AWARE_NOISE_MARGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWARE_NOISE_MARGIN"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_AWARE_STEREO</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_AWARE_STEREO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWARE_STEREO"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_ALGORITHM_NAME</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_ALGORITHM_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_ALGORITHM_NAME"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_ALGORITHM_TYPE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_ALGORITHM_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_ALGORITHM_TYPE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_BLOCK_SIZE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_BLOCK_SIZE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_BOARD</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_BOARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_BOARD"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_BUFFERING</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_BUFFERING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_BUFFERING"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_BUFFERLENGTH_NEG</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_BUFFERLENGTH_NEG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_BUFFERLENGTH_NEG"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_BUFFERLENGTH_ODD</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_BUFFERLENGTH_ODD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_BUFFERLENGTH_ODD"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_BUFFER_EXISTS</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_BUFFER_EXISTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_BUFFER_EXISTS"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_BUFFER_HANDLE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_BUFFER_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_BUFFER_HANDLE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_BUFFER_POINTER</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_BUFFER_POINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_BUFFER_POINTER"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_BUFFER_QUERY_SIZE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_BUFFER_QUERY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_BUFFER_QUERY_SIZE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_BUFFER_SIZE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_BUFFER_SIZE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_BUFFER_SIZE_POINTER</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_BUFFER_SIZE_POINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_BUFFER_SIZE_POINTER"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_BUFFER_TYPE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_BUFFER_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_BUFFER_TYPE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_COMPRESSION_SCHEME</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_COMPRESSION_SCHEME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_COMPRESSION_SCHEME"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_COMPRESSOR_HANDLE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_COMPRESSOR_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_COMPRESSOR_HANDLE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_COMPRESSOR_HANDLE_POINTER</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_COMPRESSOR_HANDLE_POINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_COMPRESSOR_HANDLE_POINTER"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_FRAME_SIZE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_FRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_FRAME_SIZE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_FUNCTIONALITY</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_FUNCTIONALITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_FUNCTIONALITY"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_FUNCTION_POINTER</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_FUNCTION_POINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_FUNCTION_POINTER"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_HEADER_SIZE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_HEADER_SIZE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_INITIAL_VALUE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_INITIAL_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_INITIAL_VALUE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_INTERNAL_FORMAT</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_INTERNAL_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_INTERNAL_FORMAT"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_LICENSE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_LICENSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_LICENSE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_MIN_GT_MAX</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_MIN_GT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_MIN_GT_MAX"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_NO_BUFFERSPACE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_NO_BUFFERSPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_NO_BUFFERSPACE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_NUMBER_OF_BLOCKS</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_NUMBER_OF_BLOCKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_NUMBER_OF_BLOCKS"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_PARAM</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_PARAM"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_PARAM_ID_POINTER</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_PARAM_ID_POINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_PARAM_ID_POINTER"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_PARAM_TYPE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_PARAM_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_PARAM_TYPE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_POINTER</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_POINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_POINTER"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_PVBUFFER</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_PVBUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_PVBUFFER"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_SCHEME_POINTER</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_SCHEME_POINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_SCHEME_POINTER"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_STREAM_HEADER</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_STREAM_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_STREAM_HEADER"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_STRING_POINTER</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_STRING_POINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_STRING_POINTER"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BAD_TEXT_STRING_PTR</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BAD_TEXT_STRING_PTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BAD_TEXT_STRING_PTR"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BEST_FIT</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BEST_FIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BEST_FIT"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BIDIRECTIONAL</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BIDIRECTIONAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BIDIRECTIONAL"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BITRATE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BITRATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BITRATE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BITRATE_POLICY</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BITRATE_POLICY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BITRATE_POLICY"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BITRATE_TARGET</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BITRATE_TARGET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BITRATE_TARGET"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BITS_PER_COMPONENT</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BITS_PER_COMPONENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BITS_PER_COMPONENT"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BLENDING</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BLENDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BLENDING"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BLOCK_SIZE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BLOCK_SIZE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BOTTOM_UP</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BOTTOM_UP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BOTTOM_UP"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BUFFER_NOT_CREATED</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BUFFER_NOT_CREATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BUFFER_NOT_CREATED"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BUF_COMPRESSED</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BUF_COMPRESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BUF_COMPRESSED"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BUF_DATA</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BUF_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BUF_DATA"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_BUF_FRAME</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_BUF_FRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BUF_FRAME"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_CHANNEL_POLICY</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_CHANNEL_POLICY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"CHANNEL_POLICY"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_CHROMA_THRESHOLD</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_CHROMA_THRESHOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"CHROMA_THRESHOLD"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_CODEC</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_CODEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"CODEC"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_COMPONENTS</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_COMPONENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"COMPONENTS"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_COMPRESSED_BUFFER_SIZE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_COMPRESSED_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"COMPRESSED_BUFFER_SIZE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_COMPRESSION_RATIO</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_COMPRESSION_RATIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"COMPRESSION_RATIO"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_COMPRESSOR</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_COMPRESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"COMPRESSOR"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_CONTINUOUS_BLOCK</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_CONTINUOUS_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"CONTINUOUS_BLOCK"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_CONTINUOUS_NONBLOCK</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_CONTINUOUS_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"CONTINUOUS_NONBLOCK"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_COSMO_CODEC_CONTROL</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_COSMO_CODEC_CONTROL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"COSMO_CODEC_CONTROL"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_COSMO_NUM_PARAMS</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_COSMO_NUM_PARAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"COSMO_NUM_PARAMS"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_COSMO_VALUE_BASE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_COSMO_VALUE_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"COSMO_VALUE_BASE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_COSMO_VIDEO_MANUAL_CONTROL</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_COSMO_VIDEO_MANUAL_CONTROL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"COSMO_VIDEO_MANUAL_CONTROL"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_COSMO_VIDEO_TRANSFER_MODE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_COSMO_VIDEO_TRANSFER_MODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"COSMO_VIDEO_TRANSFER_MODE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_DATA</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"DATA"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_DECOMPRESSOR</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_DECOMPRESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"DECOMPRESSOR"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_DSO_ERROR</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_DSO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"DSO_ERROR"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_EDGE_THRESHOLD</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_EDGE_THRESHOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"EDGE_THRESHOLD"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_ENABLE_IMAGEINFO</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_ENABLE_IMAGEINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ENABLE_IMAGEINFO"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_END_OF_SEQUENCE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_END_OF_SEQUENCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"END_OF_SEQUENCE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_ENUM_VALUE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_ENUM_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ENUM_VALUE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_EXACT_COMPRESSION_RATIO</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_EXACT_COMPRESSION_RATIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"EXACT_COMPRESSION_RATIO"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_EXTERNAL_DEVICE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>CL_EXTERNAL_DEVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"EXTERNAL_DEVICE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FLOATING_ENUM_VALUE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FLOATING_ENUM_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FLOATING_ENUM_VALUE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FLOATING_RANGE_VALUE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FLOATING_RANGE_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FLOATING_RANGE_VALUE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FORMAT</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FORMAT"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FORMAT_ABGR</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FORMAT_ABGR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FORMAT_ABGR"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FORMAT_BGR</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FORMAT_BGR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FORMAT_BGR"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FORMAT_BGR233</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FORMAT_BGR233</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FORMAT_BGR233"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FORMAT_GRAYSCALE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FORMAT_GRAYSCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FORMAT_GRAYSCALE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FORMAT_MONO</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FORMAT_MONO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FORMAT_MONO"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FORMAT_RBG323</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FORMAT_RBG323</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FORMAT_RBG323"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FORMAT_STEREO_INTERLEAVED</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FORMAT_STEREO_INTERLEAVED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FORMAT_STEREO_INTERLEAVED"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FORMAT_XBGR</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FORMAT_XBGR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FORMAT_XBGR"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FORMAT_YCbCr</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FORMAT_YCbCr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FORMAT_YCbCr"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FORMAT_YCbCr422</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FORMAT_YCbCr422</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FORMAT_YCbCr422"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FORMAT_YCbCr422DC</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FORMAT_YCbCr422DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FORMAT_YCbCr422DC"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FRAME</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FRAME"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FRAMES_PER_CHUNK</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FRAMES_PER_CHUNK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FRAMES_PER_CHUNK"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FRAME_BUFFER_SIZE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FRAME_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FRAME_BUFFER_SIZE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FRAME_BUFFER_SIZE_ZERO</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FRAME_BUFFER_SIZE_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FRAME_BUFFER_SIZE_ZERO"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FRAME_INDEX</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FRAME_INDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FRAME_INDEX"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FRAME_RATE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FRAME_RATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FRAME_RATE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FRAME_SIZE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FRAME_SIZE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_FRAME_TYPE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_FRAME_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"FRAME_TYPE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_G711_ALAW</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_G711_ALAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"G711_ALAW"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_G711_ALAW_SOFTWARE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_G711_ALAW_SOFTWARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"G711_ALAW_SOFTWARE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_G711_ULAW</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_G711_ULAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"G711_ULAW"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_G711_ULAW_SOFTWARE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_G711_ULAW_SOFTWARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"G711_ULAW_SOFTWARE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_GRAYSCALE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_GRAYSCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"GRAYSCALE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_HDCC</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_HDCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"HDCC"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_HDCC_SAMPLES_PER_TILE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_HDCC_SAMPLES_PER_TILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"HDCC_SAMPLES_PER_TILE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_HDCC_SOFTWARE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_HDCC_SOFTWARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"HDCC_SOFTWARE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_HDCC_TILE_THRESHOLD</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_HDCC_TILE_THRESHOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"HDCC_TILE_THRESHOLD"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_HEADER_START_CODE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_HEADER_START_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"HEADER_START_CODE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_IMAGEINFO_FIELDMASK</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_IMAGEINFO_FIELDMASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"IMAGEINFO_FIELDMASK"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_IMAGE_CROP_BOTTOM</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_IMAGE_CROP_BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"IMAGE_CROP_BOTTOM"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_IMAGE_CROP_LEFT</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_IMAGE_CROP_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"IMAGE_CROP_LEFT"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_IMAGE_CROP_RIGHT</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_IMAGE_CROP_RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"IMAGE_CROP_RIGHT"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_IMAGE_CROP_TOP</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_IMAGE_CROP_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"IMAGE_CROP_TOP"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_IMAGE_HEIGHT</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_IMAGE_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"IMAGE_HEIGHT"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_IMAGE_WIDTH</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_IMAGE_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"IMAGE_WIDTH"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_IMPACT_CODEC_CONTROL</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_IMPACT_CODEC_CONTROL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"IMPACT_CODEC_CONTROL"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_IMPACT_FRAME_INTERLEAVE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_IMPACT_FRAME_INTERLEAVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"IMPACT_FRAME_INTERLEAVE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_IMPACT_NUM_PARAMS</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_IMPACT_NUM_PARAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"IMPACT_NUM_PARAMS"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_INTERNAL_FORMAT</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_INTERNAL_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"INTERNAL_FORMAT"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_INTERNAL_IMAGE_HEIGHT</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_INTERNAL_IMAGE_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"INTERNAL_IMAGE_HEIGHT"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_INTERNAL_IMAGE_WIDTH</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_INTERNAL_IMAGE_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"INTERNAL_IMAGE_WIDTH"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_INTRA</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_INTRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"INTRA"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_JPEG</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_JPEG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"JPEG"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_JPEG_COSMO</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_JPEG_COSMO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"JPEG_COSMO"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_JPEG_ERROR</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_JPEG_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"JPEG_ERROR"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_JPEG_IMPACT</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_JPEG_IMPACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"JPEG_IMPACT"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_JPEG_NUM_PARAMS</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_JPEG_NUM_PARAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"JPEG_NUM_PARAMS"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_JPEG_QUALITY_FACTOR</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_JPEG_QUALITY_FACTOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"JPEG_QUALITY_FACTOR"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_JPEG_QUANTIZATION_TABLES</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_JPEG_QUANTIZATION_TABLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"JPEG_QUANTIZATION_TABLES"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_JPEG_SOFTWARE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_JPEG_SOFTWARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"JPEG_SOFTWARE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_JPEG_STREAM_HEADERS</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_JPEG_STREAM_HEADERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"JPEG_STREAM_HEADERS"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_KEYFRAME</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_KEYFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"KEYFRAME"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_KEYFRAME_DISTANCE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_KEYFRAME_DISTANCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"KEYFRAME_DISTANCE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_LAST_FRAME_INDEX</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_LAST_FRAME_INDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"LAST_FRAME_INDEX"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_LAYER</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_LAYER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"LAYER"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_LUMA_THRESHOLD</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_LUMA_THRESHOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"LUMA_THRESHOLD"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MAX_NUMBER_OF_AUDIO_ALGORITHMS</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MAX_NUMBER_OF_AUDIO_ALGORITHMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MAX_NUMBER_OF_AUDIO_ALGORITHMS"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MAX_NUMBER_OF_FORMATS</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MAX_NUMBER_OF_FORMATS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MAX_NUMBER_OF_FORMATS"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MAX_NUMBER_OF_ORIGINAL_FORMATS</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MAX_NUMBER_OF_ORIGINAL_FORMATS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MAX_NUMBER_OF_ORIGINAL_FORMATS"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MAX_NUMBER_OF_PARAMS</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MAX_NUMBER_OF_PARAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MAX_NUMBER_OF_PARAMS"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MAX_NUMBER_OF_VIDEO_ALGORITHMS</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MAX_NUMBER_OF_VIDEO_ALGORITHMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MAX_NUMBER_OF_VIDEO_ALGORITHMS"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MONO</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MONO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MONO"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_AUDIO_AWARE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_AUDIO_AWARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_AUDIO_AWARE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_AUDIO_LAYER</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_AUDIO_LAYER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_AUDIO_LAYER"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_AUDIO_LAYER_I</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_AUDIO_LAYER_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_AUDIO_LAYER_I"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_AUDIO_LAYER_II</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_AUDIO_LAYER_II</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_AUDIO_LAYER_II"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_AUDIO_MODE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_AUDIO_MODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_AUDIO_MODE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_AUDIO_MODE_DUAL</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_AUDIO_MODE_DUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_AUDIO_MODE_DUAL"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_AUDIO_MODE_JOINT</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_AUDIO_MODE_JOINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_AUDIO_MODE_JOINT"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_AUDIO_MODE_SINGLE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_AUDIO_MODE_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_AUDIO_MODE_SINGLE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_AUDIO_MODE_STEREO</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_AUDIO_MODE_STEREO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_AUDIO_MODE_STEREO"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_AUDIO_SOFTWARE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_AUDIO_SOFTWARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_AUDIO_SOFTWARE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_END_OF_STREAM</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_END_OF_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_END_OF_STREAM"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_ERROR</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_ERROR"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_NUM_PARAMS</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_NUM_PARAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_NUM_PARAMS"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_VIDEO_M</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_VIDEO_M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_VIDEO_M"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_VIDEO_MAX_MOTION_VECTOR_LENGTH_B_X</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_VIDEO_MAX_MOTION_VECTOR_LENGTH_B_X</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_VIDEO_MAX_MOTION_VECTOR_LENGTH_B_X"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_VIDEO_MAX_MOTION_VECTOR_LENGTH_B_Y</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_VIDEO_MAX_MOTION_VECTOR_LENGTH_B_Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_VIDEO_MAX_MOTION_VECTOR_LENGTH_B_Y"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_VIDEO_MAX_MOTION_VECTOR_LENGTH_P_X</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_VIDEO_MAX_MOTION_VECTOR_LENGTH_P_X</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_VIDEO_MAX_MOTION_VECTOR_LENGTH_P_X"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_VIDEO_MAX_MOTION_VECTOR_LENGTH_P_Y</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_VIDEO_MAX_MOTION_VECTOR_LENGTH_P_Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_VIDEO_MAX_MOTION_VECTOR_LENGTH_P_Y"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_VIDEO_N</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_VIDEO_N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_VIDEO_N"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_VIDEO_SOFTNESS</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_VIDEO_SOFTNESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_VIDEO_SOFTNESS"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_VIDEO_SOFTNESS_MAXIMUM</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_VIDEO_SOFTNESS_MAXIMUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_VIDEO_SOFTNESS_MAXIMUM"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_VIDEO_SOFTNESS_MEDIUM</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_VIDEO_SOFTNESS_MEDIUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_VIDEO_SOFTNESS_MEDIUM"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_VIDEO_SOFTNESS_NONE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_VIDEO_SOFTNESS_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_VIDEO_SOFTNESS_NONE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG1_VIDEO_SOFTWARE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG1_VIDEO_SOFTWARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG1_VIDEO_SOFTWARE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MPEG_VIDEO</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MPEG_VIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MPEG_VIDEO"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MULTIRATE_AWARE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MULTIRATE_AWARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MULTIRATE_AWARE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MVC1</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MVC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MVC1"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MVC1_SOFTWARE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MVC1_SOFTWARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MVC1_SOFTWARE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MVC2</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MVC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MVC2"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MVC2_BLENDING</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MVC2_BLENDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MVC2_BLENDING"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MVC2_BLENDING_OFF</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MVC2_BLENDING_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MVC2_BLENDING_OFF"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MVC2_BLENDING_ON</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MVC2_BLENDING_ON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MVC2_BLENDING_ON"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MVC2_CHROMA_THRESHOLD</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MVC2_CHROMA_THRESHOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MVC2_CHROMA_THRESHOLD"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MVC2_EDGE_THRESHOLD</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MVC2_EDGE_THRESHOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MVC2_EDGE_THRESHOLD"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MVC2_ERROR</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MVC2_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MVC2_ERROR"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MVC2_LUMA_THRESHOLD</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MVC2_LUMA_THRESHOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MVC2_LUMA_THRESHOLD"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MVC2_SOFTWARE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MVC2_SOFTWARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MVC2_SOFTWARE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MVC3_QUALITY_LEVEL</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MVC3_QUALITY_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MVC3_QUALITY_LEVEL"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_MVC3_SOFTWARE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_MVC3_SOFTWARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MVC3_SOFTWARE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_NEXT_NOT_AVAILABLE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_NEXT_NOT_AVAILABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"NEXT_NOT_AVAILABLE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_NOISE_MARGIN</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_NOISE_MARGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"NOISE_MARGIN"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_NONE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"NONE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_NUMBER_OF_FORMATS</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_NUMBER_OF_FORMATS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"NUMBER_OF_FORMATS"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_NUMBER_OF_FRAMES</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_NUMBER_OF_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"NUMBER_OF_FRAMES"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_NUMBER_OF_PARAMS</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_NUMBER_OF_PARAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"NUMBER_OF_PARAMS"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_NUMBER_OF_PARAMS_FREEZE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_NUMBER_OF_PARAMS_FREEZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"NUMBER_OF_PARAMS_FREEZE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_NUMBER_OF_VIDEO_FORMATS</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_NUMBER_OF_VIDEO_FORMATS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"NUMBER_OF_VIDEO_FORMATS"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_ORIENTATION</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_ORIENTATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ORIENTATION"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_ORIGINAL_FORMAT</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_ORIGINAL_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ORIGINAL_FORMAT"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_PARAM_OUT_OF_RANGE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_PARAM_OUT_OF_RANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"PARAM_OUT_OF_RANGE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_PIXEL_ASPECT</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_PIXEL_ASPECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"PIXEL_ASPECT"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_PREDICTED</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_PREDICTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"PREDICTED"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_PREROLL</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_PREROLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"PREROLL"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_QUALITY_FACTOR</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_QUALITY_FACTOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"QUALITY_FACTOR"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_QUALITY_LEVEL</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_QUALITY_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"QUALITY_LEVEL"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_QUALITY_SPATIAL</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_QUALITY_SPATIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"QUALITY_SPATIAL"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_QUALITY_TEMPORAL</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_QUALITY_TEMPORAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"QUALITY_TEMPORAL"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_QUANTIZATION_TABLES</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_QUANTIZATION_TABLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"QUANTIZATION_TABLES"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_RANGE_VALUE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_RANGE_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"RANGE_VALUE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_RGB</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_RGB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"RGB"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_RGB332</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_RGB332</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"RGB332"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_RGB8</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_RGB8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"RGB8"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_RGBA</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_RGBA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"RGBA"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_RGBX</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_RGBX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"RGBX"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_RLE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_RLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"RLE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_RLE24</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_RLE24</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"RLE24"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_RLE24_SOFTWARE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_RLE24_SOFTWARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"RLE24_SOFTWARE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_RLE_SOFTWARE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_RLE_SOFTWARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"RLE_SOFTWARE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_RTR</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_RTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"RTR"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_RTR1</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_RTR1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"RTR1"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_RTR_QUALITY_LEVEL</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_RTR_QUALITY_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"RTR_QUALITY_LEVEL"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_SAMPLES_PER_TILE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_SAMPLES_PER_TILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"SAMPLES_PER_TILE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_SCHEME_BUSY</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_SCHEME_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"SCHEME_BUSY"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_SCHEME_NOT_AVAILABLE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_SCHEME_NOT_AVAILABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"SCHEME_NOT_AVAILABLE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_SPEED</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_SPEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"SPEED"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_STEREO_INTERLEAVED</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_STEREO_INTERLEAVED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"STEREO_INTERLEAVED"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_STREAM_HEADERS</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_STREAM_HEADERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"STREAM_HEADERS"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_TILE_THRESHOLD</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_TILE_THRESHOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"TILE_THRESHOLD"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_TOP_DOWN</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_TOP_DOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"TOP_DOWN"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_ULAW</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_ULAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ULAW"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_UNCOMPRESSED</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_UNCOMPRESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"UNCOMPRESSED"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_UNCOMPRESSED_AUDIO</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_UNCOMPRESSED_AUDIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"UNCOMPRESSED_AUDIO"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_UNCOMPRESSED_VIDEO</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_UNCOMPRESSED_VIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"UNCOMPRESSED_VIDEO"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_UNKNOWN_SCHEME</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_UNKNOWN_SCHEME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"UNKNOWN_SCHEME"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_VIDEO</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_VIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"VIDEO"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_Y</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Y"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_YCbCr</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_YCbCr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"YCbCr"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_YCbCr422</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_YCbCr422</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"YCbCr422"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_YCbCr422DC</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_YCbCr422DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"YCbCr422DC"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_YCbCr422HC</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_YCbCr422HC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"YCbCr422HC"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_YUV</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_YUV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"YUV"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_YUV422</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_YUV422</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"YUV422"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_YUV422DC</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_YUV422DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"YUV422DC"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CL_YUV422HC</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CL_YUV422HC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"YUV422HC"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AWCMP_STEREO</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>AWCMP_STEREO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWCMP_STEREO"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AWCMP_JOINT_STEREO</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>AWCMP_JOINT_STEREO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWCMP_JOINT_STEREO"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AWCMP_INDEPENDENT</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>AWCMP_INDEPENDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWCMP_INDEPENDENT"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AWCMP_FIXED_RATE</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>AWCMP_FIXED_RATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWCMP_FIXED_RATE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AWCMP_CONST_QUAL</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>AWCMP_CONST_QUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWCMP_CONST_QUAL"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AWCMP_LOSSLESS</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>AWCMP_LOSSLESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWCMP_LOSSLESS"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AWCMP_MPEG_LAYER_I</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>AWCMP_MPEG_LAYER_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWCMP_MPEG_LAYER_I"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AWCMP_MPEG_LAYER_II</name></cpp:ifdef>
	<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>AWCMP_MPEG_LAYER_II</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"AWCMP_MPEG_LAYER_II"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr>(<name>void</name>) <call><name>clSetErrorHandler</name><argument_list>(<argument><expr><name>cl_ErrorHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
