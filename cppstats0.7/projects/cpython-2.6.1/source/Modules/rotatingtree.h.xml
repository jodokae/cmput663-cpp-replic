<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/rotatingtree.h"><comment type="block">/* "Rotating trees" (Armin Rigo)
 *
 * Google "splay trees" for the general idea.
 *
 * It's a dict-like data structure that works best when accesses are not
 * random, but follow a strong pattern.  The one implemented here is for
 * access patterns where the same small set of keys is looked up over
 * and over again, and this set of keys evolves slowly over time.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMPTY_ROTATING_TREE</name></cpp:macro>       <cpp:value>((rotating_node_t *)NULL)</cpp:value></cpp:define>

<typedef>typedef <type>struct <name>rotating_node_s</name></type> <name>rotating_node_t</name>;</typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>rotating_tree_enum_fn</name>) <parameter_list>(<param><decl><type><name>rotating_node_t</name> *</type><name>node</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>rotating_node_s</name> <block>{
	<decl_stmt><decl><type><name>void</name> *</type><name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rotating_node_t</name> *</type><name>left</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rotating_node_t</name> *</type><name>right</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>void</name></type> <name>RotatingTree_Add</name><parameter_list>(<param><decl><type><name>rotating_node_t</name> **</type><name>root</name></decl></param>, <param><decl><type><name>rotating_node_t</name> *</type><name>node</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>rotating_node_t</name>*</type> <name>RotatingTree_Get</name><parameter_list>(<param><decl><type><name>rotating_node_t</name> **</type><name>root</name></decl></param>, <param><decl><type><name>void</name> *</type><name>key</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>RotatingTree_Enum</name><parameter_list>(<param><decl><type><name>rotating_node_t</name> *</type><name>root</name></decl></param>, <param><decl><type><name>rotating_tree_enum_fn</name></type> <name>enumfn</name></decl></param>,
		      <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl>
</unit>
