<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/source/Modules/dbmmodule.c">
<comment type="block">/* DBM module using dictionary interface */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Some Linux systems install gdbm/ndbm.h, but not ndbm.h.  This supports
 * whichever configure was able to locate.
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NDBM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ndbm.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PYOS_OS2</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>PYCC_GCC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>which_dbm</name> <init>= <expr>"ndbm"</expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>which_dbm</name> <init>= <expr>"GNU gdbm"</expr></init></decl>;</decl_stmt>  <comment type="block">/* EMX port of GDBM */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GDBM_NDBM_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdbm/ndbm.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>which_dbm</name> <init>= <expr>"GNU gdbm"</expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BERKDB_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;db.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>which_dbm</name> <init>= <expr>"Berkeley DB"</expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> "No ndbm.h available!"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>PyObject_HEAD</name>
	<name>int</name></type> <name>di_size</name></decl>;</decl_stmt>	<comment type="block">/* -1 means recompute */</comment>
	<decl_stmt><decl><type><name>DBM</name> *</type><name>di_dbm</name></decl>;</decl_stmt>
}</block></struct></type> <name>dbmobject</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Dbmtype</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_dbmobject</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(v) == &amp;Dbmtype)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_dbmobject_open</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if ((v)-&gt;di_dbm == NULL) \
               { PyErr_SetString(DbmError, "DBM object has already been closed"); \
                 return NULL; }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DbmError</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>newdbmobject</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>, <param><decl><type><name>int</name></type> <name>mode</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>dbmobject</name> *</type><name>dp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dp</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>dbmobject</name></expr></argument>, <argument><expr>&amp;<name>Dbmtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>dp</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_size</name></name> = -1</expr>;</expr_stmt>
	<if>if <condition>( <expr>(<name><name>dp</name>-&gt;<name>di_dbm</name></name> = <call><name>dbm_open</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call>) == 0</expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>DbmError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr>(<name>PyObject</name> *)<name>dp</name></expr>;</return>
}</block></function>

<comment type="block">/* Methods */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dbm_dealloc</name><parameter_list>(<param><decl><type><name>register</name> <name>dbmobject</name> *</type><name>dp</name></decl></param>)</parameter_list>
<block>{
        <if>if <condition>( <expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr> )</condition><then>
		<expr_stmt><expr><call><name>dbm_close</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>dbm_length</name><parameter_list>(<param><decl><type><name>dbmobject</name> *</type><name>dp</name></decl></param>)</parameter_list>
<block>{
        <if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_dbm</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
                 <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DbmError</name></expr></argument>, <argument><expr>"DBM object has already been closed"</expr></argument>)</argument_list></call></expr>;</expr_stmt> 
                 <return>return <expr>-1</expr>;</return> 
        }</block></then></if>
        <if>if <condition>( <expr><name><name>dp</name>-&gt;<name>di_size</name></name> &lt; 0</expr> )</condition><then> <block>{
		<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>size</name> = 0</expr>;</expr_stmt>
		<for>for ( <init><expr><name>key</name>=<call><name>dbm_firstkey</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name><name>key</name>.<name>dptr</name></name></expr>;</condition>
		      <incr><expr><name>key</name> = <call><name>dbm_nextkey</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>)</argument_list></call></expr></incr>)
			<expr_stmt><expr><name>size</name>++</expr>;</expr_stmt></for>
		<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_size</name></name> = <name>size</name></expr>;</expr_stmt>
	}</block></then></if>
	<return>return <expr><name><name>dp</name>-&gt;<name>di_size</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dbm_subscript</name><parameter_list>(<param><decl><type><name>dbmobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>register</name> <name>PyObject</name> *</type><name>key</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>datum</name></type> <name>drec</name></decl>, <decl><type ref="prev"/><name>krec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tmp_size</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"s#"</expr></argument>, <argument><expr>&amp;<name><name>krec</name>.<name>dptr</name></name></expr></argument>, <argument><expr>&amp;<name>tmp_size</name></expr></argument>)</argument_list></call></expr> )</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	
	<expr_stmt><expr><name><name>krec</name>.<name>dsize</name></name> = <name>tmp_size</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check_dbmobject_open</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>drec</name> = <call><name>dbm_fetch</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>, <argument><expr><name>krec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>( <expr><name><name>drec</name>.<name>dptr</name></name> == 0</expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>,
				<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr>(<name>PyStringObject</name> *)<name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<if>if <condition>( <expr><call><name>dbm_error</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>dbm_clearerr</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DbmError</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name><name>drec</name>.<name>dptr</name></name></expr></argument>, <argument><expr><name><name>drec</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dbm_ass_sub</name><parameter_list>(<param><decl><type><name>dbmobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>w</name></decl></param>)</parameter_list>
<block>{
        <decl_stmt><decl><type><name>datum</name></type> <name>krec</name></decl>, <decl><type ref="prev"/><name>drec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tmp_size</name></decl>;</decl_stmt>
	
        <if>if <condition>( <expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"s#"</expr></argument>, <argument><expr>&amp;<name><name>krec</name>.<name>dptr</name></name></expr></argument>, <argument><expr>&amp;<name>tmp_size</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
				<argument><expr>"dbm mappings have string indices only"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>-1</expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name><name>krec</name>.<name>dsize</name></name> = <name>tmp_size</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_dbm</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
                 <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DbmError</name></expr></argument>, <argument><expr>"DBM object has already been closed"</expr></argument>)</argument_list></call></expr>;</expr_stmt> 
                 <return>return <expr>-1</expr>;</return>
        }</block></then></if>
	<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_size</name></name> = -1</expr>;</expr_stmt>
	<if>if <condition>(<expr><name>w</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<if>if <condition>( <expr><call><name>dbm_delete</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>, <argument><expr><name>krec</name></expr></argument>)</argument_list></call> &lt; 0</expr> )</condition><then> <block>{
			<expr_stmt><expr><call><name>dbm_clearerr</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>,
				      <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr>(<name>PyStringObject</name> *)<name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>-1</expr>;</return>
		}</block></then></if>
	}</block></then> <else>else <block>{
		<if>if <condition>( <expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"s#"</expr></argument>, <argument><expr>&amp;<name><name>drec</name>.<name>dptr</name></name></expr></argument>, <argument><expr>&amp;<name>tmp_size</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
			<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
				     <argument><expr>"dbm mappings have string elements only"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>-1</expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><name><name>drec</name>.<name>dsize</name></name> = <name>tmp_size</name></expr>;</expr_stmt>
		<if>if <condition>( <expr><call><name>dbm_store</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>, <argument><expr><name>krec</name></expr></argument>, <argument><expr><name>drec</name></expr></argument>, <argument><expr><name>DBM_REPLACE</name></expr></argument>)</argument_list></call> &lt; 0</expr> )</condition><then> <block>{
			<expr_stmt><expr><call><name>dbm_clearerr</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DbmError</name></expr></argument>,
					<argument><expr>"cannot add item to database"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>-1</expr>;</return>
		}</block></then></if>
	}</block></else></if>
	<if>if <condition>( <expr><call><name>dbm_error</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
		<expr_stmt><expr><call><name>dbm_clearerr</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DbmError</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>-1</expr>;</return>
	}</block></then></if>
	<return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dbm_contains</name><parameter_list>(<param><decl><type><name>register</name> <name>dbmobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><call><name>PyString_AsStringAndSize</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>(<name>char</name> **)&amp;<name><name>key</name>.<name>dptr</name></name></expr></argument>,
	                             <argument><expr>(<name>Py_ssize_t</name> *)&amp;<name><name>key</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<return>return <expr>-1</expr>;</return>
	}</block></then></if>

	<comment type="block">/* Expand check_dbmobject_open to return -1 */</comment>
	<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_dbm</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DbmError</name></expr></argument>, <argument><expr>"DBM object has already been closed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>-1</expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>val</name> = <call><name>dbm_fetch</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>val</name>.<name>dptr</name></name> != <name>NULL</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>dbm_as_sequence</name> <init>= <expr><block>{
    <expr>(<name>lenfunc</name>)<name>dbm_length</name></expr>,        <comment type="block">/*_length*/</comment>
    <expr>0</expr>,                          <comment type="block">/*sq_concat*/</comment>
    <expr>0</expr>,                          <comment type="block">/*sq_repeat*/</comment>
    <expr>0</expr>,                          <comment type="block">/*sq_item*/</comment>
    <expr>0</expr>,                          <comment type="block">/*sq_slice*/</comment>
    <expr>0</expr>,                          <comment type="block">/*sq_ass_item*/</comment>
    <expr>0</expr>,                          <comment type="block">/*sq_ass_slice*/</comment>
    <expr>(<name>objobjproc</name>)<name>dbm_contains</name></expr>,   <comment type="block">/*sq_contains*/</comment>
    <expr>0</expr>,                          <comment type="block">/*sq_inplace_concat*/</comment>
    <expr>0</expr>                           <comment type="block">/*sq_inplace_repeat*/</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMappingMethods</name></type> <name>dbm_as_mapping</name> <init>= <expr><block>{
	<expr>(<name>lenfunc</name>)<name>dbm_length</name></expr>,		<comment type="block">/*mp_length*/</comment>
	<expr>(<name>binaryfunc</name>)<name>dbm_subscript</name></expr>,	<comment type="block">/*mp_subscript*/</comment>
	<expr>(<name>objobjargproc</name>)<name>dbm_ass_sub</name></expr>,	<comment type="block">/*mp_ass_subscript*/</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dbm__close</name><parameter_list>(<param><decl><type><name>register</name> <name>dbmobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list>
<block>{
        <if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr>)</condition><then>
		<expr_stmt><expr><call><name>dbm_close</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name> = <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dbm_keys</name><parameter_list>(<param><decl><type><name>register</name> <name>dbmobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>register</name> <name>PyObject</name> *</type><name>v</name></decl>, *<decl><type ref="prev"/><name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>check_dbmobject_open</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>v</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<for>for (<init><expr><name>key</name> = <call><name>dbm_firstkey</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name><name>key</name>.<name>dptr</name></name></expr>;</condition>
	     <incr><expr><name>key</name> = <call><name>dbm_nextkey</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>)</argument_list></call></expr></incr>) <block>{
		<expr_stmt><expr><name>item</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name><name>key</name>.<name>dptr</name></name></expr></argument>, <argument><expr><name><name>key</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>item</name> == <name>NULL</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><name>err</name> = <call><name>PyList_Append</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>err</name> != 0</expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		}</block></then></if>
	}</block></for>
	<return>return <expr><name>v</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dbm_has_key</name><parameter_list>(<param><decl><type><name>register</name> <name>dbmobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>tmp_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tmp_size</name></decl>;</decl_stmt>
	
	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#:has_key"</expr></argument>, <argument><expr>&amp;<name>tmp_ptr</name></expr></argument>, <argument><expr>&amp;<name>tmp_size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>key</name>.<name>dptr</name></name> = <name>tmp_ptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name>.<name>dsize</name></name> = <name>tmp_size</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check_dbmobject_open</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>val</name> = <call><name>dbm_fetch</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>val</name>.<name>dptr</name></name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dbm_get</name><parameter_list>(<param><decl><type><name>register</name> <name>dbmobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>defvalue</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>tmp_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tmp_size</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#|O:get"</expr></argument>,
                              <argument><expr>&amp;<name>tmp_ptr</name></expr></argument>, <argument><expr>&amp;<name>tmp_size</name></expr></argument>, <argument><expr>&amp;<name>defvalue</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>key</name>.<name>dptr</name></name> = <name>tmp_ptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name>.<name>dsize</name></name> = <name>tmp_size</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check_dbmobject_open</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>val</name> = <call><name>dbm_fetch</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name><name>val</name>.<name>dptr</name></name> != <name>NULL</name></expr>)</condition><then>
		<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name><name>val</name>.<name>dptr</name></name></expr></argument>, <argument><expr><name><name>val</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</return></then>
	<else>else <block>{
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>defvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>defvalue</name></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dbm_setdefault</name><parameter_list>(<param><decl><type><name>register</name> <name>dbmobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>defvalue</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>tmp_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tmp_size</name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#|S:setdefault"</expr></argument>,
                              <argument><expr>&amp;<name>tmp_ptr</name></expr></argument>, <argument><expr>&amp;<name>tmp_size</name></expr></argument>, <argument><expr>&amp;<name>defvalue</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<expr_stmt><expr><name><name>key</name>.<name>dptr</name></name> = <name>tmp_ptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name>.<name>dsize</name></name> = <name>tmp_size</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check_dbmobject_open</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>val</name> = <call><name>dbm_fetch</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name><name>val</name>.<name>dptr</name></name> != <name>NULL</name></expr>)</condition><then>
		<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name><name>val</name>.<name>dptr</name></name></expr></argument>, <argument><expr><name><name>val</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<if>if <condition>(<expr><name>defvalue</name> == <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>defvalue</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>defvalue</name> == <name>NULL</name></expr>)</condition><then>
			<return>return <expr><name>NULL</name></expr>;</return></then></if>
	}</block></then>
	<else>else
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>defvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	<expr_stmt><expr><name><name>val</name>.<name>dptr</name></name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>defvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>val</name>.<name>dsize</name></name> = <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>defvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>dbm_store</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>DBM_INSERT</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>dbm_clearerr</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DbmError</name></expr></argument>, <argument><expr>"cannot add item to database"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><name>defvalue</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>dbm_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr>"close"</expr>,	<expr>(<name>PyCFunction</name>)<name>dbm__close</name></expr>,	<expr><name>METH_NOARGS</name></expr>,
	 <expr>"close()\nClose the database."</expr>}</block></expr>,
	<expr><block>{<expr>"keys"</expr>,	<expr>(<name>PyCFunction</name>)<name>dbm_keys</name></expr>,		<expr><name>METH_NOARGS</name></expr>,
	 <expr>"keys() -&gt; list\nReturn a list of all keys in the database."</expr>}</block></expr>,
	<expr><block>{<expr>"has_key"</expr>,	<expr>(<name>PyCFunction</name>)<name>dbm_has_key</name></expr>,	<expr><name>METH_VARARGS</name></expr>,
	 <expr>"has_key(key} -&gt; boolean\nReturn true iff key is in the database."</expr>}</block></expr>,
	<expr><block>{<expr>"get"</expr>,		<expr>(<name>PyCFunction</name>)<name>dbm_get</name></expr>,		<expr><name>METH_VARARGS</name></expr>,
	 <expr>"get(key[, default]) -&gt; value\n"
	 "Return the value for key if present, otherwise default."</expr>}</block></expr>,
	<expr><block>{<expr>"setdefault"</expr>,	<expr>(<name>PyCFunction</name>)<name>dbm_setdefault</name></expr>,	<expr><name>METH_VARARGS</name></expr>,
	 <expr>"setdefault(key[, default]) -&gt; value\n"
	 "Return the value for key if present, otherwise default.  If key\n"
	 "is not in the database, it is inserted with default as the value."</expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dbm_getattr</name><parameter_list>(<param><decl><type><name>dbmobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>dbm_methods</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>dp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Dbmtype</name> <init>= <expr><block>{
	<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
	"dbm.dbm"</expr>,
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbmobject</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr>0</expr>,
	<expr>(<name>destructor</name>)<name>dbm_dealloc</name></expr>,  <comment type="block">/*tp_dealloc*/</comment>
	<expr>0</expr>,			  <comment type="block">/*tp_print*/</comment>
	<expr>(<name>getattrfunc</name>)<name>dbm_getattr</name></expr>, <comment type="block">/*tp_getattr*/</comment>
	<expr>0</expr>,			  <comment type="block">/*tp_setattr*/</comment>
	<expr>0</expr>,			  <comment type="block">/*tp_compare*/</comment>
	<expr>0</expr>,			  <comment type="block">/*tp_repr*/</comment>
	<expr>0</expr>,			  <comment type="block">/*tp_as_number*/</comment>
    <expr>&amp;<name>dbm_as_sequence</name></expr>,     <comment type="block">/*tp_as_sequence*/</comment>
	<expr>&amp;<name>dbm_as_mapping</name></expr>,	  <comment type="block">/*tp_as_mapping*/</comment>
    <expr>0</expr>,                    <comment type="block">/*tp_hash*/</comment>
    <expr>0</expr>,                    <comment type="block">/*tp_call*/</comment>
    <expr>0</expr>,                    <comment type="block">/*tp_str*/</comment>
    <expr>0</expr>,                    <comment type="block">/*tp_getattro*/</comment>
    <expr>0</expr>,                    <comment type="block">/*tp_setattro*/</comment>
    <expr>0</expr>,                    <comment type="block">/*tp_as_buffer*/</comment>
    <expr><name>Py_TPFLAGS_DEFAULT</name></expr>,   <comment type="block">/*tp_xxx4*/</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* ----------------------------------------------------------------- */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dbmopen</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>flags</name> <init>= <expr>"r"</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iflags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr>0666</expr></init></decl>;</decl_stmt>

        <if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s|si:open"</expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call></expr> )</condition><then>
		<return>return <expr><name>NULL</name></expr>;</return></then></if>
	<if>if <condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr>"r"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then>
		<expr_stmt><expr><name>iflags</name> = <name>O_RDONLY</name></expr>;</expr_stmt></then>
	<else>else <if>if <condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr>"w"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then>
		<expr_stmt><expr><name>iflags</name> = <name>O_RDWR</name></expr>;</expr_stmt></then>
	<else>else <if>if <condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr>"rw"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <comment type="block">/* B/W compat */</comment>
		<expr_stmt><expr><name>iflags</name> = <name>O_RDWR</name>|<name>O_CREAT</name></expr>;</expr_stmt></then> 
	<else>else <if>if <condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr>"c"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then>
		<expr_stmt><expr><name>iflags</name> = <name>O_RDWR</name>|<name>O_CREAT</name></expr>;</expr_stmt></then>
	<else>else <if>if <condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr>"n"</expr></argument>)</argument_list></call> == 0</expr> )</condition><then>
		<expr_stmt><expr><name>iflags</name> = <name>O_RDWR</name>|<name>O_CREAT</name>|<name>O_TRUNC</name></expr>;</expr_stmt></then>
	<else>else <block>{
		<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DbmError</name></expr></argument>,
				<argument><expr>"arg 2 to open should be 'r', 'w', 'c', or 'n'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	}</block></else></if></else></if></else></if></else></if></else></if>
        <return>return <expr><call><name>newdbmobject</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>iflags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>dbmmodule_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr>"open"</expr>, <expr>(<name>PyCFunction</name>)<name>dbmopen</name></expr>, <expr><name>METH_VARARGS</name></expr>,
	  <expr>"open(path[, flag[, mode]]) -&gt; mapping\n"
	  "Return a database object."</expr>}</block></expr>,
	<expr><block>{ <expr>0</expr>, <expr>0</expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>PyMODINIT_FUNC</name></type>
<name>initdbm</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>, *<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>Dbmtype</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"dbm"</expr></argument>, <argument><expr><name>dbmmodule_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
		<return>return;</return></then></if>
	<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>DbmError</name> == <name>NULL</name></expr>)</condition><then>
		<expr_stmt><expr><name>DbmError</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"dbm.error"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name>s</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>which_dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>s</name> != <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"library"</expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if>if <condition>(<expr><name>DbmError</name> != <name>NULL</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"error"</expr></argument>, <argument><expr><name>DbmError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
</unit>
