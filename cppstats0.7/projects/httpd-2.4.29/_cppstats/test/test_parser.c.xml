<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="test/test_parser.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_general.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>uid_t</name></type> <name>ap_user_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>ap_group_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>ap_dummy_mutex</name> <init>= <expr>&amp;<name>ap_dummy_mutex</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ap_server_argv0</name></decl>;</decl_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_block_alarms</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{
<empty_stmt>;</empty_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_unblock_alarms</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{
<empty_stmt>;</empty_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_error</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int level</argument>,
<argument>const request_rec *r</argument>, <argument>const char *fmt</argument>, <argument>...</argument>)</argument_list></macro> <block>{
<empty_stmt>;</empty_stmt>
}</block>
<function><type><name>int</name></type> <name>main</name> <parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>field</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>newstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>instr</name><index>[<expr>512</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> = <call><name>apr_pool_alloc_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>gets</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" [%s] ==\n"</expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>field</name> = <name>instr</name></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>newstr</name> = <call><name>ap_get_list_item</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>field</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" &lt;%s&gt; ..\n"</expr></argument>, <argument><expr><name>newstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
}</block></while>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
