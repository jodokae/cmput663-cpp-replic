<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="support/htdbm.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"passwd_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_info.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_signal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_sha1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_dbm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_getopt.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDLIB_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STRING_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STRINGS_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_xlate.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_CRYPT_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypt.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type>struct <name>htdbm_t</name></type> <name>htdbm_t</name>;</typedef>
<struct>struct <name>htdbm_t</name> <block>{
<decl_stmt><decl><type><name>apr_dbm_t</name> *</type><name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>passwd_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_xlate_t</name> *</type><name>to_ascii</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name> *</type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>username</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>comment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>create</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rdonly</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTDBM_MAKE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTDBM_DELETE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTDBM_VERIFY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTDBM_LIST</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTDBM_NOFILE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>terminate</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>apr_terminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>pressanykey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>htdbm_terminate</name><parameter_list>(<param><decl><type><name>htdbm_t</name> *</type><name>htdbm</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>htdbm</name>-&gt;<name>dbm</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_dbm_close</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>dbm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>htdbm</name>-&gt;<name>dbm</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>htdbm_t</name> *</type><name>h</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>htdbm_interrupted</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>htdbm_terminate</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"htdbm Interrupted !\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ERR_INTERRUPTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>htdbm_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> **</type><name>pool</name></decl></param>, <param><decl><type><name>htdbm_t</name> **</type><name>hdbm</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>( <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_abort_set</name><argument_list>(<argument><expr><name>abort_on_oom</name></expr></argument>, <argument><expr>*<name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_open_stderr</name><argument_list>(<argument><expr>&amp;<name>errfile</name></expr></argument>, <argument><expr>*<name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr>(<call><call><name>void</name> <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call>) <name>htdbm_interrupted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(*<name>hdbm</name>) = (<name>htdbm_t</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr>*<name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>htdbm_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>hdbm</name>)-&gt;<name><name>ctx</name>.<name>pool</name></name></name> = *<name>pool</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_xlate_open</name><argument_list>(<argument><expr>&amp;(<name>(*<name>hdbm</name>)-&gt;<name>to_ascii</name></name>)</expr></argument>, <argument><expr>"ISO-8859-1"</expr></argument>, <argument><expr><name>APR_DEFAULT_CHARSET</name></expr></argument>, <argument><expr><name>(*<name>hdbm</name>)-&gt;<name><name>ctx</name>.<name>pool</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"apr_xlate_open(to ASCII)-&gt;%d\n"</expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_SHA1InitEBCDIC</name><argument_list>(<argument><expr><name>(*<name>hdbm</name>)-&gt;<name>to_ascii</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"apr_SHA1InitEBCDIC()-&gt;%d\n"</expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_MD5InitEBCDIC</name><argument_list>(<argument><expr><name>(*<name>hdbm</name>)-&gt;<name>to_ascii</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"apr_MD5InitEBCDIC()-&gt;%d\n"</expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>(*<name>hdbm</name>)-&gt;<name><name>ctx</name>.<name>alg</name></name></name> = <name>ALG_APMD5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>hdbm</name>)-&gt;<name>type</name></name> = "default"</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>htdbm_open</name><parameter_list>(<param><decl><type><name>htdbm_t</name> *</type><name>htdbm</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>htdbm</name>-&gt;<name>create</name></name></expr>)</condition><then>
<return>return <expr><call><name>apr_dbm_open_ex</name><argument_list>(<argument><expr>&amp;<name><name>htdbm</name>-&gt;<name>dbm</name></name></expr></argument>, <argument><expr><name><name>htdbm</name>-&gt;<name>type</name></name></expr></argument>, <argument><expr><name><name>htdbm</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>APR_DBM_RWCREATE</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>htdbm</name>-&gt;<name>ctx</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>apr_dbm_open_ex</name><argument_list>(<argument><expr>&amp;<name><name>htdbm</name>-&gt;<name>dbm</name></name></expr></argument>, <argument><expr><name><name>htdbm</name>-&gt;<name>type</name></name></expr></argument>, <argument><expr><name><name>htdbm</name>-&gt;<name>filename</name></name></expr></argument>,
<argument><expr><name><name>htdbm</name>-&gt;<name>rdonly</name></name> ? <name>APR_DBM_READONLY</name> : <name>APR_DBM_READWRITE</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>htdbm</name>-&gt;<name>ctx</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>htdbm_save</name><parameter_list>(<param><decl><type><name>htdbm_t</name> *</type><name>htdbm</name></decl></param>, <param><decl><type><name>int</name> *</type><name>changed</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>htdbm</name>-&gt;<name>username</name></name></expr>)</condition><then>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>key</name>.<name>dptr</name></name> = <name><name>htdbm</name>-&gt;<name>username</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name>.<name>dsize</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_dbm_exists</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>dbm</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>*<name>changed</name> = 1</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>val</name>.<name>dsize</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>ctx</name>.<name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>htdbm</name>-&gt;<name>comment</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>val</name>.<name>dptr</name></name> = <name><name>htdbm</name>-&gt;<name>ctx</name>.<name>passwd</name></name></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name><name>val</name>.<name>dptr</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>ctx</name>.<name>pool</name></name></expr></argument>, <argument><expr><name><name>htdbm</name>-&gt;<name>ctx</name>.<name>passwd</name></name></expr></argument>, <argument><expr>":"</expr></argument>,
<argument><expr><name><name>htdbm</name>-&gt;<name>comment</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val</name>.<name>dsize</name></name> += (<call><name>strlen</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>comment</name></name></expr></argument>)</argument_list></call> + 1)</expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><call><name>apr_dbm_store</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>dbm</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>htdbm_del</name><parameter_list>(<param><decl><type><name>htdbm_t</name> *</type><name>htdbm</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>key</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>key</name>.<name>dptr</name></name> = <name><name>htdbm</name>-&gt;<name>username</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name>.<name>dsize</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>apr_dbm_exists</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>dbm</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>APR_ENOENT</name></expr>;</return></then></if>
<return>return <expr><call><name>apr_dbm_delete</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>dbm</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>htdbm_verify</name><parameter_list>(<param><decl><type><name>htdbm_t</name> *</type><name>htdbm</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>pwd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>rec</name></decl>, *<decl><type ref="prev"/><name>cmnt</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>key</name>.<name>dptr</name></name> = <name><name>htdbm</name>-&gt;<name>username</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name>.<name>dsize</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>apr_dbm_exists</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>dbm</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>APR_ENOENT</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>apr_dbm_fetch</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>dbm</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>APR_ENOENT</name></expr>;</return></then></if>
<expr_stmt><expr><name>rec</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>ctx</name>.<name>pool</name></name></expr></argument>, <argument><expr><name><name>val</name>.<name>dptr</name></name></expr></argument>, <argument><expr><name><name>val</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmnt</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cmnt</name></expr>)</condition><then>
<expr_stmt><expr><name>pwd</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>ctx</name>.<name>pool</name></name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><name>cmnt</name> - <name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>pwd</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>ctx</name>.<name>pool</name></name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><call><name>apr_password_validate</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>ctx</name>.<name>passwd</name></name></expr></argument>, <argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>htdbm_list</name><parameter_list>(<param><decl><type><name>htdbm_t</name> *</type><name>htdbm</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cmnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_dbm_firstkey</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>dbm</name></name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Empty database -- %s\n"</expr></argument>, <argument><expr><name><name>htdbm</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_ENOENT</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Dumping records from database -- %s\n"</expr></argument>, <argument><expr><name><name>htdbm</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" %-32s Comment\n"</expr></argument>, <argument><expr>"Username"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>key</name>.<name>dptr</name></name> != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_dbm_fetch</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>dbm</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Failed getting data from %s\n"</expr></argument>, <argument><expr><name><name>htdbm</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" %-32.*s"</expr></argument>, <argument><expr>(<name>int</name>)<name><name>key</name>.<name>dsize</name></name></expr></argument>, <argument><expr><name><name>key</name>.<name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmnt</name> = <call><name>memchr</name><argument_list>(<argument><expr><name><name>val</name>.<name>dptr</name></name></expr></argument>, <argument><expr>':'</expr></argument>, <argument><expr><name><name>val</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cmnt</name></expr>)</condition><then>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" %.*s"</expr></argument>, <argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><name><name>val</name>.<name>dptr</name></name>+<name><name>val</name>.<name>dsize</name></name> - (<name>cmnt</name>+1)</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmnt</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_dbm_nextkey</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>dbm</name></name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Failed getting NextKey\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Total #records : %d\n"</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>htdbm_make</name><parameter_list>(<param><decl><type><name>htdbm_t</name> *</type><name>htdbm</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>cpw</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>htdbm</name>-&gt;<name>ctx</name>.<name>out</name></name> = <name>cpw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>htdbm</name>-&gt;<name>ctx</name>.<name>out_len</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>cpw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = <call><name>mkhash</name><argument_list>(<argument><expr>&amp;<name><name>htdbm</name>-&gt;<name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Error: %s\n"</expr></argument>, <argument><expr><name><name>htdbm</name>-&gt;<name>ctx</name>.<name>errstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>htdbm</name>-&gt;<name>ctx</name>.<name>passwd</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>ctx</name>.<name>pool</name></name></expr></argument>, <argument><expr><name>cpw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>htdbm_valid_username</name><parameter_list>(<param><decl><type><name>htdbm_t</name> *</type><name>htdbm</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>htdbm</name>-&gt;<name>username</name></name> || (<call><name>strlen</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>username</name></name></expr></argument>)</argument_list></call> &gt; 64) || (<call><name>strlen</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>username</name></name></expr></argument>)</argument_list></call> &lt; 1)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Invalid username length\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>htdbm</name>-&gt;<name>username</name></name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Username contains invalid characters\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>htdbm_usage</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>"htdbm -- program for manipulating DBM password databases.\n\n"
"Usage: htdbm [-cimBdpstvx] [-C cost] [-TDBTYPE] database username\n"
" -b[cmBdptsv] [-C cost] [-TDBTYPE] database username password\n"
" -n[imBdpst] [-C cost] username\n"
" -nb[mBdpst] [-C cost] username password\n"
" -v[imBdps] [-C cost] [-TDBTYPE] database username\n"
" -vb[mBdps] [-C cost] [-TDBTYPE] database username password\n"
" -x [-TDBTYPE] database username\n"
" -l [-TDBTYPE] database\n"
"Options:\n"
" -c Create a new database.\n"
" -n Don't update database; display results on stdout.\n"
" -b Use the password from the command line rather than prompting for it.\n"
" -i Read password from stdin without verification (for script usage).\n"
" -m Force MD5 encryption of the password (default).\n"
" -B Force BCRYPT encryption of the password (very secure).\n"
" -C Set the computing time used for the bcrypt algorithm\n"
" (higher is more secure but slower, default: %d, valid: 4 to 31).\n"
" -d Force CRYPT encryption of the password (8 chars max, insecure).\n"
" -s Force SHA encryption of the password (insecure).\n"
" -p Do not encrypt the password (plaintext, insecure).\n"
" -T DBM Type (SDBM|GDBM|DB|default).\n"
" -l Display usernames from database on stdout.\n"
" -v Verify the username/password.\n"
" -x Remove the username record from database.\n"
" -t The last param is username comment.\n"
"The SHA algorithm does not use a salt and is less secure than the "
"MD5 algorithm.\n"</expr></argument>,
<argument><expr><name>BCRYPT_DEFAULT_COST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ERR_SYNTAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_file</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_user</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_pwd</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_cmnt</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>changed</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmd</name> <init>= <expr><name>HTDBM_MAKE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>args_left</name> <init>= <expr>2</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_getopt_t</name> *</type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>opt_arg</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_app_initialize</name><argument_list>(<argument><expr>&amp;<name>argc</name></expr></argument>, <argument><expr>&amp;<name>argv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>terminate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>htdbm_init</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Unable to initialize htdbm terminating!\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_getopt_init</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ERR_SYNTAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<while>while <condition>(<expr>(<name>rv</name> = <call><name>apr_getopt</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr>"cnmspdBbtivxlC:T:"</expr></argument>, <argument><expr>&amp;<name>opt</name></expr></argument>, <argument><expr>&amp;<name>opt_arg</name></expr></argument>)</argument_list></call>) == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<switch>switch <condition>(<expr><name>opt</name></expr>)</condition> <block>{
<case>case <expr>'c'</expr>:
<expr_stmt><expr><name><name>h</name>-&gt;<name>create</name></name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'n'</expr>:
<expr_stmt><expr><name>need_file</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> = <name>HTDBM_NOFILE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>args_left</name>--</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'l'</expr>:
<expr_stmt><expr><name>need_pwd</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>need_user</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> = <name>HTDBM_LIST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name>-&gt;<name>rdonly</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>args_left</name>--</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'t'</expr>:
<expr_stmt><expr><name>need_cmnt</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>args_left</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'T'</expr>:
<expr_stmt><expr><name><name>h</name>-&gt;<name>type</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>h</name>-&gt;<name>ctx</name>.<name>pool</name></name></expr></argument>, <argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'v'</expr>:
<expr_stmt><expr><name><name>h</name>-&gt;<name>rdonly</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> = <name>HTDBM_VERIFY</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'x'</expr>:
<expr_stmt><expr><name>need_pwd</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> = <name>HTDBM_DELETE</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name>ret</name> = <call><name>parse_common_options</name><argument_list>(<argument><expr>&amp;<name><name>h</name>-&gt;<name>ctx</name></name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Error: %s\n"</expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>ctx</name>.<name>errstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
</default>}</block></switch>
}</block></while>
<if>if <condition>(<expr><name><name>h</name>-&gt;<name>ctx</name>.<name>passwd_src</name></name> == <name>PW_ARG</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>need_pwd</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>args_left</name>++</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>i</name> = <name><name>state</name>-&gt;<name>ind</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_EOF</name> || <name>argc</name> - <name>i</name> != <name>args_left</name></expr>)</condition><then>
<expr_stmt><expr><call><name>htdbm_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>need_file</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>h</name>-&gt;<name>filename</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>h</name>-&gt;<name>ctx</name>.<name>pool</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name>++</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>htdbm_open</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Error opening database %s\n"</expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr>"%s\n"</expr></argument>,<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ERR_FILEPERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>need_user</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>h</name>-&gt;<name>username</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name>++</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>htdbm_valid_username</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ERR_BADUSER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>h</name>-&gt;<name>ctx</name>.<name>passwd_src</name></name> == <name>PW_ARG</name></expr>)</condition><then>
<expr_stmt><expr><name><name>h</name>-&gt;<name>ctx</name>.<name>passwd</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name>++</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>need_pwd</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret</name> = <call><name>get_password</name><argument_list>(<argument><expr>&amp;<name><name>h</name>-&gt;<name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Error: %s\n"</expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>ctx</name>.<name>errstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>need_cmnt</name></expr>)</condition><then>
<expr_stmt><expr><name><name>h</name>-&gt;<name>comment</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name>++</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<switch>switch <condition>(<expr><name>cmd</name></expr>)</condition> <block>{
<case>case <expr><name>HTDBM_VERIFY</name></expr>:
<if>if <condition>(<expr>(<name>rv</name> = <call><name>htdbm_verify</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"The user '%s' could not be found in database\n"</expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ERR_BADUSER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Password mismatch for user '%s'\n"</expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ERR_PWMISMATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Password validated for user '%s'\n"</expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>HTDBM_DELETE</name></expr>:
<if>if <condition>(<expr><call><name>htdbm_del</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Cannot find user '%s' in database\n"</expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ERR_BADUSER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>h</name>-&gt;<name>username</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>changed</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>HTDBM_LIST</name></expr>:
<expr_stmt><expr><call><name>htdbm_list</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name>ret</name> = <call><name>htdbm_make</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name></expr>)</condition><then>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
</default>}</block></switch>
<if>if <condition>(<expr><name>need_file</name> &amp;&amp; !<name><name>h</name>-&gt;<name>rdonly</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>rv</name> = <call><name>htdbm_save</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr>&amp;<name>changed</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ERR_FILEPERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr>"Database %s %s.\n"</expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>filename</name></name></expr></argument>,
<argument><expr><name><name>h</name>-&gt;<name>create</name></name> ? "created" : (<name>changed</name> ? "modified" : "updated")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>cmd</name> == <name>HTDBM_NOFILE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>need_cmnt</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s:%s\n"</expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>username</name></name></expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>ctx</name>.<name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s:%s:%s\n"</expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>username</name></name></expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>ctx</name>.<name>passwd</name></name></expr></argument>,
<argument><expr><name><name>h</name>-&gt;<name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>htdbm_terminate</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
</unit>
