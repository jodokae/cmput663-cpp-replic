<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="support/win32/wintty.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> &amp;&amp; <name>_MSC_VER</name> &gt;= 1400</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_DEPRECATE</name></cpp:macro></cpp:define>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> warning(disable: 4996)</cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>options</name> <init>=
<expr>"\nwintty: a utility for echoing the stdin stream to a new console window,\n"
"\teven when invoked from within a service (such as the Apache server.)\n"
"\tAlso reflects the console input back to the stdout stream, allowing\n"
"\tthe operator to respond to prompts from the context of a service.\n\n"
"Syntax: %s [opts] [-t \"Window Title\"]\n\n"
" opts: -c{haracter} or -l{ine} input\n"
"\t-q{uiet} or -e{cho} input\n"
"\t-u{nprocessed} or -p{rocessed} input\n"
"\t-n{owrap} or -w{rap} output lines\n"
"\t-f{ormatted} or -r{aw} output lines\n"
"\t-O{output} [number of seconds]\n"
"\t-v{erbose} error reporting (for debugging)\n"
"\t-? for this message\n\n"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>verbose</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>printerr</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr>1024</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>verbose</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wvsprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OutputDebugString</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function_decl><type><name>DWORD</name> <name>WINAPI</name></type> <name>feedback</name><parameter_list>(<param><decl><type><name>LPVOID</name></type> <name>args</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type><struct>struct <name>feedback_args_t</name> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>out</name></decl>;</decl_stmt>
}</block></struct></type> <name>feedback_args_t</name>;</typedef>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name>**</type> <name>argv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr>1024</expr>]</index></name></decl>, *<decl><type ref="prev"/><name>contitle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hproc</name></decl>, <decl><type ref="prev"/><name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hwinsta</name> <init>= <expr><name>NULL</name></expr></init>, <name>hsavewinsta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hdesk</name> <init>= <expr><name>NULL</name></expr></init>, <name>hsavedesk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>conin</name></decl>, <decl><type ref="prev"/><name>conout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hstdin</name></decl>, <decl><type ref="prev"/><name>hstdout</name></decl>, <decl><type ref="prev"/><name>hstderr</name></decl>, <decl><type ref="prev"/><name>hdup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>feedback_args_t</name></type> <name>feed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>conmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>newinmode</name> <init>= <expr>0</expr></init>, <name>notinmode</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>newoutmode</name> <init>= <expr>0</expr></init>, <name>notoutmode</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>timeout</name> <init>= <expr><name>INFINITE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>isservice</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>arg0</name> <init>= <expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>--<name>argc</name></expr>)</condition> <block>{
<expr_stmt><expr>++<name>argv</name></expr>;</expr_stmt>
<if>if <condition>(<expr>**<name>argv</name> == '/' || **<name>argv</name> == '-'</expr>)</condition><then> <block>{
<switch>switch <condition>(<expr><call><name>tolower</name><argument_list>(<argument><expr>(*<name>argv</name>)<index>[<expr>1</expr>]</index></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>'c'</expr>:
<expr_stmt><expr><name>notinmode</name> |= <name>ENABLE_LINE_INPUT</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'l'</expr>:
<expr_stmt><expr><name>newinmode</name> |= <name>ENABLE_LINE_INPUT</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'q'</expr>:
<expr_stmt><expr><name>notinmode</name> |= <name>ENABLE_ECHO_INPUT</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'e'</expr>:
<expr_stmt><expr><name>newinmode</name> |= <name>ENABLE_ECHO_INPUT</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'u'</expr>:
<expr_stmt><expr><name>notinmode</name> |= <name>ENABLE_PROCESSED_INPUT</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'p'</expr>:
<expr_stmt><expr><name>newinmode</name> |= <name>ENABLE_PROCESSED_INPUT</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'n'</expr>:
<expr_stmt><expr><name>notoutmode</name> |= <name>ENABLE_WRAP_AT_EOL_OUTPUT</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'w'</expr>:
<expr_stmt><expr><name>newoutmode</name> |= <name>ENABLE_WRAP_AT_EOL_OUTPUT</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'r'</expr>:
<expr_stmt><expr><name>notoutmode</name> |= <name>ENABLE_PROCESSED_OUTPUT</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'f'</expr>:
<expr_stmt><expr><name>newoutmode</name> |= <name>ENABLE_PROCESSED_OUTPUT</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'o'</expr>:
<if>if <condition>(<expr>*(<name>argv</name> + 1) &amp;&amp; *(<name>argv</name> + 1)<index>[<expr>0</expr>]</index> != '-'</expr>)</condition><then> <block>{
<expr_stmt><expr>*(++<name>argv</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>timeout</name> = <call><name>atoi</name><argument_list>(<argument><expr>*<name>argv</name></expr></argument>)</argument_list></call> / 1000</expr>;</expr_stmt>
<expr_stmt><expr>--<name>argc</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>timeout</name> = 0</expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</case><case>case <expr>'v'</expr>:
<expr_stmt><expr><name>verbose</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'t'</expr>:
<expr_stmt><expr><name>contitle</name> = *(++<name>argv</name>)</expr>;</expr_stmt>
<expr_stmt><expr>--<name>argc</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'?'</expr>:
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
</case><default>default:
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"wintty option %s not recognized, use -? for help.\n\n"</expr></argument>, <argument><expr>*<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"wintty argument %s not understood, use -? for help.\n\n"</expr></argument>, <argument><expr>*<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></while>
<expr_stmt><expr><name>hproc</name> = <call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hsavewinsta</name> = <call><name>GetProcessWindowStation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>hsavewinsta</name> || <name>hsavewinsta</name> == <name>INVALID_HANDLE_VALUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"GetProcessWindowStation() failed (%d)\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>GetUserObjectInformation</name><argument_list>(<argument><expr><name>hsavewinsta</name></expr></argument>, <argument><expr><name>UOI_NAME</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"GetUserObjectInfoformation(hWinSta) failed (%d)\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strnicmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>"Service-"</expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"WindowStation Name %s is a service\n"</expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>isservice</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
<expr_stmt><expr><call><name>SetLastError</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hstdin</name> = <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>hstdin</name> || <name>hstdin</name> == <name>INVALID_HANDLE_VALUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"GetStdHandle(STD_INPUT_HANDLE) failed (%d)\n"</expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>DuplicateHandle</name><argument_list>(<argument><expr><name>hproc</name></expr></argument>, <argument><expr><name>hstdin</name></expr></argument>, <argument><expr><name>hproc</name></expr></argument>, <argument><expr>&amp;<name>hdup</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>isservice</name></expr></argument>, <argument><expr><name>DUPLICATE_SAME_ACCESS</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hstdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hstdin</name> = <name>hdup</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"DupHandle(stdin [%x]) failed (%d)\n"</expr></argument>,
<argument><expr><name>hstdin</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><name>hstdout</name> = <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>hstdout</name> || <name>hstdout</name> == <name>INVALID_HANDLE_VALUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"GetStdHandle(STD_OUTPUT_HANDLE) failed (%d)\n"</expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>DuplicateHandle</name><argument_list>(<argument><expr><name>hproc</name></expr></argument>, <argument><expr><name>hstdout</name></expr></argument>, <argument><expr><name>hproc</name></expr></argument>, <argument><expr>&amp;<name>hdup</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>isservice</name></expr></argument>, <argument><expr><name>DUPLICATE_SAME_ACCESS</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hstdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hstdout</name> = <name>hdup</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"DupHandle(stdout [%x]) failed (%d)\n"</expr></argument>,
<argument><expr><name>hstdout</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><name>hstderr</name> = <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_ERROR_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>hstderr</name> || <name>hstderr</name> == <name>INVALID_HANDLE_VALUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"GetStdHandle(STD_ERROR_HANDLE) failed (%d)\n"</expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>DuplicateHandle</name><argument_list>(<argument><expr><name>hproc</name></expr></argument>, <argument><expr><name>hstderr</name></expr></argument>, <argument><expr><name>hproc</name></expr></argument>, <argument><expr>&amp;<name>hdup</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>isservice</name></expr></argument>, <argument><expr><name>DUPLICATE_SAME_ACCESS</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hstderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hstderr</name> = <name>hdup</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"DupHandle(stderr [%x]) failed (%d)\n"</expr></argument>,
<argument><expr><name>hstderr</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr>!<call><name>FreeConsole</name><argument_list>()</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"FreeConsole() failed (%d)\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>isservice</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WE_EVER_FIGURE_OUT_WHY_THIS_DOESNT_WORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>hsavedesk</name> = <call><name>GetThreadDesktop</name><argument_list>(<argument><expr><call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>hsavedesk</name> || <name>hsavedesk</name> == <name>INVALID_HANDLE_VALUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"GetThreadDesktop(GetTID()) failed (%d)\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>CloseWindowStation</name><argument_list>(<argument><expr><name>hwinsta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hwinsta</name> = <call><name>OpenWindowStation</name><argument_list>(<argument><expr>"WinSta0"</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>MAXIMUM_ALLOWED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>hwinsta</name> || <name>hwinsta</name> == <name>INVALID_HANDLE_VALUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"OpenWinSta(WinSta0) failed (%d)\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>SetProcessWindowStation</name><argument_list>(<argument><expr><name>hwinsta</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"SetProcWinSta(WinSta0) failed (%d)\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><name>hdesk</name> = <call><name>OpenDesktop</name><argument_list>(<argument><expr>"Default"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>MAXIMUM_ALLOWED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>hdesk</name> || <name>hdesk</name> == <name>INVALID_HANDLE_VALUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"OpenDesktop(Default) failed (%d)\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>SetThreadDesktop</name><argument_list>(<argument><expr><name>hdesk</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"SetThreadDesktop(Default) failed (%d)\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>PROCESS_INFORMATION</name></type> <name>pi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>STARTUPINFO</name></type> <name>si</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>exitcode</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>appbuff</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>appname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cmdline</name> <init>= <expr><call><name>GetCommandLine</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>GetModuleFileName</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>appbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>appbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>appname</name> = <name>appbuff</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>si</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name>.<name>cb</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name>.<name>dwFlags</name></name> = <name>STARTF_USESHOWWINDOW</name>
| <name>STARTF_USESTDHANDLES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name>.<name>lpDesktop</name></name> = "WinSta0\\Default"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name>.<name>wShowWindow</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name>.<name>hStdInput</name></name> = <name>hstdin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name>.<name>hStdOutput</name></name> = <name>hstdout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name>.<name>hStdError</name></name> = <name>hstderr</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>CreateProcess</name><argument_list>(<argument><expr><name>appname</name></expr></argument>, <argument><expr><name>cmdline</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>CREATE_SUSPENDED</name> | <name>CREATE_NEW_CONSOLE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>si</name></expr></argument>, <argument><expr>&amp;<name>pi</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>si</name>.<name>hStdInput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>si</name>.<name>hStdOutput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>si</name>.<name>hStdError</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ResumeThread</name><argument_list>(<argument><expr><name><name>pi</name>.<name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pi</name>.<name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>pi</name>.<name>hProcess</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetExitCodeProcess</name><argument_list>(<argument><expr><name><name>pi</name>.<name>hProcess</name></name></expr></argument>, <argument><expr>&amp;<name>exitcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pi</name>.<name>hProcess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>exitcode</name></expr>;</return>
}</block></then></if>
<return>return <expr>1</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>AllocConsole</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"AllocConsole(Default) failed (%d)\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>contitle</name> &amp;&amp; !<call><name>SetConsoleTitle</name><argument_list>(<argument><expr><name>contitle</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"SetConsoleTitle() failed (%d)\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>conout</name> = <call><name>CreateFile</name><argument_list>(<argument><expr>"CONOUT$"</expr></argument>, <argument><expr><name>GENERIC_READ</name> | <name>GENERIC_WRITE</name></expr></argument>,
<argument><expr><name>FILE_SHARE_READ</name> | <name>FILE_SHARE_WRITE</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>conout</name> || <name>conout</name> == <name>INVALID_HANDLE_VALUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"CreateFile(CONOUT$) failed (%d)\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>conout</name></expr></argument>, <argument><expr>&amp;<name>conmode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"GetConsoleMode(CONOUT) failed (%d)\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>conout</name></expr></argument>, <argument><expr><name>conmode</name> = ((<name>conmode</name> | <name>newoutmode</name>)
&amp; ~<name>notoutmode</name>)</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"SetConsoleMode(CONOUT, 0x%x) failed (%d)\n"</expr></argument>,
<argument><expr><name>conmode</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
<expr_stmt><expr><name>conin</name> = <call><name>CreateFile</name><argument_list>(<argument><expr>"CONIN$"</expr></argument>, <argument><expr><name>GENERIC_READ</name> | <name>GENERIC_WRITE</name></expr></argument>,
<argument><expr><name>FILE_SHARE_READ</name> | <name>FILE_SHARE_WRITE</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>conin</name> || <name>conin</name> == <name>INVALID_HANDLE_VALUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"CreateFile(CONIN$) failed (%d)\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>conin</name></expr></argument>, <argument><expr>&amp;<name>conmode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"GetConsoleMode(CONIN) failed (%d)\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>conin</name></expr></argument>, <argument><expr><name>conmode</name> = ((<name>conmode</name> | <name>newinmode</name>)
&amp; ~<name>notinmode</name>)</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"SetConsoleMode(CONIN, 0x%x) failed (%d)\n"</expr></argument>,
<argument><expr><name>conmode</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
<expr_stmt><expr><name><name>feed</name>.<name>in</name></name> = <name>conin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>feed</name>.<name>out</name></name> = <name>hstdout</name></expr>;</expr_stmt>
<expr_stmt><expr><name>thread</name> = <call><name>CreateThread</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>feedback</name></expr></argument>, <argument><expr>(<name>LPVOID</name>)&amp;<name>feed</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>ReadFile</name><argument_list>(<argument><expr><name>hstdin</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<if>if <condition>(<expr>!<name>len</name> || !<call><name>WriteFile</name><argument_list>(<argument><expr><name>conout</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then></if></while>
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"[EOF] from stdin (%d)\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>GetConsoleTitle</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"SetConsoleTitle() failed (%d)\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>" - [Finished]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>SetConsoleTitle</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"SetConsoleTitle() failed (%d)\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeConsole</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>isservice</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>SetProcessWindowStation</name><argument_list>(<argument><expr><name>hsavewinsta</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> = <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>SetThreadDesktop</name><argument_list>(<argument><expr><name>hsavedesk</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> = <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>CloseDesktop</name><argument_list>(<argument><expr><name>hdesk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseWindowStation</name><argument_list>(<argument><expr><name>hwinsta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>DWORD</name> <name>WINAPI</name></type> <name>feedback</name><parameter_list>(<param><decl><type><name>LPVOID</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>feedback_args_t</name> *</type><name>feed</name> <init>= <expr>(<name>feedback_args_t</name>*)<name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>str</name><index>[<expr>1024</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>ReadFile</name><argument_list>(<argument><expr><name><name>feed</name>-&gt;<name>in</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<if>if <condition>(<expr>!<name>len</name> || !<call><name>WriteFile</name><argument_list>(<argument><expr><name><name>feed</name>-&gt;<name>out</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then></if></while>
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr>"[EOF] from Console (%d)\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
</unit>
