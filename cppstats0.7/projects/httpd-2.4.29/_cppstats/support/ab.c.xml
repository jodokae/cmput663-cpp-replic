<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="support/ab.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_AB_BASEREVISION</name></cpp:macro> <cpp:value>"2.3"</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>'A' != 0x41</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOT_ASCII</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSD_COMP</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_signal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_network_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_getopt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_general.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_portable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_release.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_poll.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_base64.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NOT_ASCII</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_xlate.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDIO_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDLIB_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config_auto.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/rsa.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/crypto.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/x509.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/pem.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/rand.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_SSL</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SK_NUM</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>sk_X509_num(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SK_VALUE</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>y</name></type></param>)</parameter_list></cpp:macro> <cpp:value>sk_X509_value(x,y)</cpp:value></cpp:define>
<typedef>typedef <macro><name>STACK_OF</name><argument_list>(<argument>X509</argument>)</argument_list></macro> <expr_stmt><expr><name>X509_STACK_TYPE</name></expr>;</expr_stmt></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/applink.c&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>OPENSSL_VERSION_NUMBER</name> &gt;= 0x00909000)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AB_SSL_METHOD_CONST</name></cpp:macro> <cpp:value>const</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AB_SSL_METHOD_CONST</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>OPENSSL_VERSION_NUMBER</name> &gt;= 0x0090707f)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AB_SSL_CIPHER_CONST</name></cpp:macro> <cpp:value>const</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AB_SSL_CIPHER_CONST</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_OP_NO_TLSv1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TLSV1_X</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_TLSEXT</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>SSL_set_tlsext_host_name</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TLSEXT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBRESSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call> &amp;&amp; <name>LIBRESSL_VERSION_NUMBER</name> &lt; 0x2060000f</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTRL_SET_MIN_PROTO_VERSION</name></cpp:macro> <cpp:value>123</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTRL_SET_MAX_PROTO_VERSION</name></cpp:macro> <cpp:value>124</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_set_min_proto_version</name><parameter_list>(<param><type><name>ctx</name></type></param>, <param><type><name>version</name></type></param>)</parameter_list></cpp:macro> <cpp:value>SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MIN_PROTO_VERSION, version, NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_set_max_proto_version</name><parameter_list>(<param><type><name>ctx</name></type></param>, <param><type><name>version</name></type></param>)</parameter_list></cpp:macro> <cpp:value>SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MAX_PROTO_VERSION, version, NULL)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_CTYPE_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_LIMITS_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>LLONG_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AB_MAX</name></cpp:macro> <cpp:value>APR_INT64_C(0x7fffffffffffffff)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AB_MAX</name></cpp:macro> <cpp:value>LLONG_MAX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_REQUESTS</name></cpp:macro> <cpp:value>(INT_MAX &gt; 50000 ? 50000 : INT_MAX)</cpp:value></cpp:define>
<typedef>typedef <type><enum>enum <block>{
<decl><name>STATE_UNCONNECTED</name> <init>= <expr>0</expr></init></decl>,
<decl><name>STATE_CONNECTING</name></decl>,
<decl><name>STATE_CONNECTED</name></decl>,
<decl><name>STATE_READ</name></decl>
}</block></enum></type> <name>connect_state_e</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBUFFSIZE</name></cpp:macro> <cpp:value>(8192)</cpp:value></cpp:define>
<struct>struct <name>connection</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>aprsock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pollfd_t</name></type> <name>pollfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>rwrite</name></decl>, <decl><type ref="prev"/><name>rwrote</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>cbuff</name><index>[<expr><name>CBUFFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cbx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keepalive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gotheader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>start</name></decl>,
<decl><type ref="prev"/><name>connect</name></decl>,
<decl><type ref="prev"/><name>endwrite</name></decl>,
<decl><type ref="prev"/><name>beginread</name></decl>,
<decl><type ref="prev"/><name>done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>socknum</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>SSL</name> *</type><name>ssl</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>
<struct>struct <name>data</name> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>starttime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>waittime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>ctime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>time</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_min</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((a)&lt;(b))?(a):(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_max</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((a)&gt;(b))?(a):(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_round_ms</name><parameter_list>(<param><type><name>a</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((apr_time_t)((a) + 500)/1000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_double_ms</name><parameter_list>(<param><type><name>a</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((double)(a)/1000.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CONCURRENCY</name></cpp:macro> <cpp:value>20000</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>verbosity</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>recverrok</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<enum>enum <block>{<decl><name>NO_METH</name> <init>= <expr>0</expr></init></decl>, <decl><name>GET</name></decl>, <decl><name>HEAD</name></decl>, <decl><name>PUT</name></decl>, <decl><name>POST</name></decl>, <decl><name>CUSTOM_METHOD</name></decl>}</block> <decl><name>method</name> <init>= <expr><name>NO_METH</name></expr></init></decl>;</enum>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>method_str</name><index>[]</index></name> <init>= <expr><block>{<expr>"bug"</expr>, <expr>"GET"</expr>, <expr>"HEAD"</expr>, <expr>"PUT"</expr>, <expr>"POST"</expr>, <expr>""</expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>send_body</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>requests</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>heartbeatres</name> <init>= <expr>100</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>concurrency</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>percentile</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nolength</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>confidence</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tlimit</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keepalive</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>windowsize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>servername</name><index>[<expr>1024</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>hostname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>host_field</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>postdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>postlen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>content_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cookie</name></decl>,
*<decl><type ref="prev"/><name>auth</name></decl>,
*<decl><type ref="prev"/><name>hdrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>proxyhost</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>proxyport</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>connecthost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>myhost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>connectport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>gnuplot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>csvperc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fullurl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>colonhost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isproxy</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>aprtimeout</name> <init>= <expr><call><name>apr_time_from_sec</name><argument_list>(<argument><expr>30</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>opt_host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_useragent</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_accept</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_html</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tablestring</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>trstring</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tdstring</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>doclen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>totalread</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>totalbread</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>totalposted</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>started</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>doneka</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>good</name> <init>= <expr>0</expr></init>, <name>bad</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>epipe</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err_length</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err_conn</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err_recv</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err_except</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err_response</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>is_ssl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSL_CTX</name> *</type><name>ssl_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ssl_cipher</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ssl_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIO</name> *</type><name>bio_out</name></decl>,*<decl><type ref="prev"/><name>bio_err</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>tls_use_sni</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tls_sni</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>lasttime</name></decl>, <decl><type ref="prev"/><name>stoptime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>_request</name><index>[<expr>8192</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>request</name> <init>= <expr><name>_request</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>reqlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>8192</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>percs</name><index>[]</index></name> <init>= <expr><block>{<expr>50</expr>, <expr>66</expr>, <expr>75</expr>, <expr>80</expr>, <expr>90</expr>, <expr>95</expr>, <expr>98</expr>, <expr>99</expr>, <expr>100</expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>connection</name> *</type><name>con</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>data</name> *</type><name>stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>cntxt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pollset_t</name> *</type><name>readbits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>mysa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>destsa</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NOT_ASCII</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>apr_xlate_t</name> *</type><name>from_ascii</name></decl>, *<decl><type ref="prev"/><name>to_ascii</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>write_request</name><parameter_list>(<param><decl><type>struct <name>connection</name> *</type> <name>c</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>close_connection</name><parameter_list>(<param><decl><type>struct <name>connection</name> *</type> <name>c</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>void</name></type> <name>err</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>done</name></expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Total of %d requests completed\n"</expr></argument> , <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>apr_err</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_status_t</name></type> <name>rv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>120</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>"%s: %s (%d)\n"</expr></argument>,
<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>sizeof <name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>done</name></expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Total of %d requests completed\n"</expr></argument> , <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>xmalloc</name><parameter_list>(<param><decl><type><name>size_t</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>ret</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ret</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Could not allocate memory (%"
<name>APR_SIZE_T_FMT</name>" bytes)\n"</expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>xcalloc</name><parameter_list>(<param><decl><type><name>size_t</name></type> <name>num</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>ret</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ret</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Could not allocate memory (%"
<name>APR_SIZE_T_FMT</name>" bytes)\n"</expr></argument>, <argument><expr><name>size</name>*<name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>xstrdup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ret</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ret</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Could not allocate memory (%"
<name>APR_SIZE_T_FMT</name> " bytes)\n"</expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>xstrcasestr</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s2</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>p1</name></decl>, *<decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>s2</name> == '\0'</expr>)</condition><then> <block>{
<return>return<expr>((<name>char</name> *)<name>s1</name>)</expr>;</return>
}</block></then></if>
<while>while<condition>(<expr>1</expr>)</condition> <block>{
<for>for ( <init>;</init> <condition><expr>(*<name>s1</name> != '\0') &amp;&amp; (<call><name>apr_tolower</name><argument_list>(<argument><expr>*<name>s1</name></expr></argument>)</argument_list></call> != <call><name>apr_tolower</name><argument_list>(<argument><expr>*<name>s2</name></expr></argument>)</argument_list></call>)</expr>;</condition> <incr><expr><name>s1</name>++</expr></incr>)<empty_stmt>;</empty_stmt></for>
<if>if <condition>(<expr>*<name>s1</name> == '\0'</expr>)</condition><then> <block>{
<return>return<expr>(<name>NULL</name>)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>p1</name> = (<name>char</name> *)<name>s1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> = (<name>char</name> *)<name>s2</name></expr>;</expr_stmt>
<for>for (<init><expr>++<name>p1</name></expr>, <expr>++<name>p2</name></expr>;</init> <condition><expr><call><name>apr_tolower</name><argument_list>(<argument><expr>*<name>p1</name></expr></argument>)</argument_list></call> == <call><name>apr_tolower</name><argument_list>(<argument><expr>*<name>p2</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>p1</name></expr>, <expr>++<name>p2</name></expr></incr>) <block>{
<if>if <condition>(<expr>*<name>p1</name> == '\0'</expr>)</condition><then> <block>{
<return>return<expr>((<name>char</name> *)<name>s1</name>)</expr>;</return>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr>*<name>p2</name> == '\0'</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>s1</name>++</expr>;</expr_stmt>
}</block></while>
<return>return<expr>((<name>char</name> *)<name>s1</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>abort_on_oom</name><parameter_list>(<param><decl><type><name>int</name></type> <name>retcode</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Could not allocate memory\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retcode</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_polled_events</name><parameter_list>(<param><decl><type>struct <name>connection</name> *</type><name>c</name></decl></param>, <param><decl><type><name>apr_int16_t</name></type> <name>new_reqevents</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>pollfd</name>.<name>reqevents</name></name> != <name>new_reqevents</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>pollfd</name>.<name>reqevents</name></name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_pollset_remove</name><argument_list>(<argument><expr><name>readbits</name></expr></argument>, <argument><expr>&amp;<name><name>c</name>-&gt;<name>pollfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_err</name><argument_list>(<argument><expr>"apr_pollset_remove()"</expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>new_reqevents</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c</name>-&gt;<name>pollfd</name>.<name>reqevents</name></name> = <name>new_reqevents</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_pollset_add</name><argument_list>(<argument><expr><name>readbits</name></expr></argument>, <argument><expr>&amp;<name><name>c</name>-&gt;<name>pollfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_err</name><argument_list>(<argument><expr>"apr_pollset_add()"</expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_conn_state</name><parameter_list>(<param><decl><type>struct <name>connection</name> *</type><name>c</name></decl></param>, <param><decl><type><name>connect_state_e</name></type> <name>new_state</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_int16_t</name></type> <name><name>events_by_state</name><index>[]</index></name> <init>= <expr><block>{
<expr>0</expr>,
<expr><name>APR_POLLOUT</name></expr>,
<expr><name>APR_POLLIN</name></expr>,
<expr><name>APR_POLLIN</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>state</name></name> = <name>new_state</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_polled_events</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>events_by_state</name><index>[<expr><name>new_state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>long</name></type> <name>ssl_print_cb</name><parameter_list>(<param><decl><type><name>BIO</name> *</type><name>bio</name></decl></param>,<param><decl><type><name>int</name></type> <name>cmd</name></decl></param>,<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>argp</name></decl></param>,<param><decl><type><name>int</name></type> <name>argi</name></decl></param>,<param><decl><type><name>long</name></type> <name>argl</name></decl></param>,<param><decl><type><name>long</name></type> <name>ret</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>BIO</name> *</type><name>out</name></decl>;</decl_stmt>
<expr_stmt><expr><name>out</name>=(<name>BIO</name> *)<call><name>BIO_get_callback_arg</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>out</name> == <name>NULL</name></expr>)</condition><then> <return>return<expr>(<name>ret</name>)</expr>;</return></then></if>
<if>if <condition>(<expr><name>cmd</name> == (<name>BIO_CB_READ</name>|<name>BIO_CB_RETURN</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr>"read from %p [%p] (%d bytes =&gt; %ld (0x%lX))\n"</expr></argument>,
<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>argp</name></expr></argument>, <argument><expr><name>argi</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_dump</name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr>(<name>char</name> *)<name>argp</name></expr></argument>,<argument><expr>(<name>int</name>)<name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr>(<name>ret</name>)</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>cmd</name> == (<name>BIO_CB_WRITE</name>|<name>BIO_CB_RETURN</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr>"write to %p [%p] (%d bytes =&gt; %ld (0x%lX))\n"</expr></argument>,
<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>argp</name></expr></argument>, <argument><expr><name>argi</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_dump</name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr>(<name>char</name> *)<name>argp</name></expr></argument>,<argument><expr>(<name>int</name>)<name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_state_cb</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>SSL</name> *</type><name>s</name></decl></param>, <param><decl><type><name>int</name></type> <name>w</name></decl></param>, <param><decl><type><name>int</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>w</name> &amp; <name>SSL_CB_ALERT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio_err</name></expr></argument>, <argument><expr>"SSL/TLS Alert [%s] %s:%s\n"</expr></argument>,
<argument><expr>(<name>w</name> &amp; <name>SSL_CB_READ</name> ? "read" : "write")</expr></argument>,
<argument><expr><call><name>SSL_alert_type_string_long</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SSL_alert_desc_string_long</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>w</name> &amp; <name>SSL_CB_LOOP</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio_err</name></expr></argument>, <argument><expr>"SSL/TLS State [%s] %s\n"</expr></argument>,
<argument><expr>(<call><name>SSL_in_connect_init</name><argument_list>(<argument><expr>(<name>SSL</name>*)<name>s</name></expr></argument>)</argument_list></call> ? "connect" : "-")</expr></argument>,
<argument><expr><call><name>SSL_state_string_long</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>w</name> &amp; (<name>SSL_CB_HANDSHAKE_START</name>|<name>SSL_CB_HANDSHAKE_DONE</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio_err</name></expr></argument>, <argument><expr>"SSL/TLS Handshake [%s] %s\n"</expr></argument>,
<argument><expr>(<name>w</name> &amp; <name>SSL_CB_HANDSHAKE_START</name> ? "Start" : "Done")</expr></argument>,
<argument><expr><call><name>SSL_state_string_long</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>RAND_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAND_MAX</name></cpp:macro> <cpp:value>INT_MAX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_rand_choosenum</name><parameter_list>(<param><decl><type><name>int</name></type> <name>l</name></decl></param>, <param><decl><type><name>int</name></type> <name>h</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>50</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>int</name>)<call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%.0f"</expr></argument>,
<argument><expr>((<call>(<name>double</name>)<argument_list>(<argument><expr><call><name>rand</name><argument_list>()</argument_list></call>%<name>RAND_MAX</name></expr></argument>)</argument_list></call>/<name>RAND_MAX</name>)*(<name>h</name>-<name>l</name>))</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call>+1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; <name>l</name></expr>)</condition><then> <expr_stmt><expr><name>i</name> = <name>l</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>i</name> &gt; <name>h</name></expr>)</condition><then> <expr_stmt><expr><name>i</name> = <name>h</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>i</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_rand_seed</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>stackdata</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>t</name> = <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>time_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RAND_seed</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>char</name> *)&amp;<name>t</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pid</name> = <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>pid_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RAND_seed</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>char</name> *)&amp;<name>pid</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = <call><name>ssl_rand_choosenum</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stackdata</name></expr></argument>)</argument_list></sizeof>-128-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RAND_seed</name><argument_list>(<argument><expr><name>stackdata</name>+<name>n</name></expr></argument>, <argument><expr>128</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_print_connection_info</name><parameter_list>(<param><decl><type><name>BIO</name> *</type><name>bio</name></decl></param>, <param><decl><type><name>SSL</name> *</type><name>ssl</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>AB_SSL_CIPHER_CONST</name> <name>SSL_CIPHER</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alg_bits</name></decl>,<decl><type ref="prev"/><name>bits</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio</name></expr></argument>,<argument><expr>"Transport Protocol :%s\n"</expr></argument>, <argument><expr><call><name>SSL_get_version</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = <call><name>SSL_get_current_cipher</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio</name></expr></argument>,<argument><expr>"Cipher Suite Protocol :%s\n"</expr></argument>, <argument><expr><call><name>SSL_CIPHER_get_version</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio</name></expr></argument>,<argument><expr>"Cipher Suite Name :%s\n"</expr></argument>,<argument><expr><call><name>SSL_CIPHER_get_name</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> = <call><name>SSL_CIPHER_get_bits</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr>&amp;<name>alg_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio</name></expr></argument>,<argument><expr>"Cipher Suite Cipher Bits:%d (%d)\n"</expr></argument>,<argument><expr><name>bits</name></expr></argument>,<argument><expr><name>alg_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr>(1)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_print_cert_info</name><parameter_list>(<param><decl><type><name>BIO</name> *</type><name>bio</name></decl></param>, <param><decl><type><name>X509</name> *</type><name>cert</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>X509_NAME</name> *</type><name>dn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EVP_PKEY</name> *</type><name>pk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>1024</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr>"Certificate version: %ld\n"</expr></argument>, <argument><expr><call><name>X509_get_version</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio</name></expr></argument>,<argument><expr>"Valid from: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASN1_UTCTIME_print</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><call><name>X509_get_notBefore</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio</name></expr></argument>,<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio</name></expr></argument>,<argument><expr>"Valid to : "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASN1_UTCTIME_print</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><call><name>X509_get_notAfter</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio</name></expr></argument>,<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pk</name> = <call><name>X509_get_pubkey</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio</name></expr></argument>,<argument><expr>"Public key is %d bits\n"</expr></argument>,
<argument><expr><call><name>EVP_PKEY_bits</name><argument_list>(<argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dn</name> = <call><name>X509_get_issuer_name</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>X509_NAME_oneline</name><argument_list>(<argument><expr><name>dn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio</name></expr></argument>,<argument><expr>"The issuer name is %s\n"</expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dn</name>=<call><name>X509_get_subject_name</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>X509_NAME_oneline</name><argument_list>(<argument><expr><name>dn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio</name></expr></argument>,<argument><expr>"The subject name is %s\n"</expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr>"Extension Count: %d\n"</expr></argument>, <argument><expr><call><name>X509_get_ext_count</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_print_info</name><parameter_list>(<param><decl><type>struct <name>connection</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>X509_STACK_TYPE</name> *</type><name>sk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509</name> *</type><name>cert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio_err</name></expr></argument>, <argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sk</name> = <call><name>SSL_get_peer_cert_chain</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>count</name> = <call><name>SK_NUM</name><argument_list>(<argument><expr><name>sk</name></expr></argument>)</argument_list></call>) &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name>=1</expr>;</init> <condition><expr><name>i</name>&lt;<name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>cert</name> = (<name>X509</name> *)<call><name>SK_VALUE</name><argument_list>(<argument><expr><name>sk</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_print_cert_info</name><argument_list>(<argument><expr><name>bio_out</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<expr_stmt><expr><name>cert</name> = <call><name>SSL_get_peer_certificate</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cert</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio_out</name></expr></argument>, <argument><expr>"Anon DH\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio_out</name></expr></argument>, <argument><expr>"Peer certificate\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_print_cert_info</name><argument_list>(<argument><expr><name>bio_out</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ssl_print_connection_info</name><argument_list>(<argument><expr><name>bio_err</name></expr></argument>,<argument><expr><name><name>c</name>-&gt;<name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_SESSION_print</name><argument_list>(<argument><expr><name>bio_err</name></expr></argument>, <argument><expr><call><name>SSL_get_session</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>ssl</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_proceed_handshake</name><parameter_list>(<param><decl><type>struct <name>connection</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>do_next</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>do_next</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>ecode</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> = <call><name>SSL_do_handshake</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ecode</name> = <call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>ssl</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>ecode</name></expr>)</condition> <block>{
<case>case <expr><name>SSL_ERROR_NONE</name></expr>:
<if>if <condition>(<expr><name>verbosity</name> &gt;= 2</expr>)</condition><then>
<expr_stmt><expr><call><name>ssl_print_info</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>ssl_info</name> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>AB_SSL_CIPHER_CONST</name> <name>SSL_CIPHER</name> *</type><name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509</name> *</type><name>cert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sk_bits</name></decl>, <decl><type ref="prev"/><name>pk_bits</name></decl>, <decl><type ref="prev"/><name>swork</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ci</name> = <call><name>SSL_get_current_cipher</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sk_bits</name> = <call><name>SSL_CIPHER_get_bits</name><argument_list>(<argument><expr><name>ci</name></expr></argument>, <argument><expr>&amp;<name>swork</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cert</name> = <call><name>SSL_get_peer_certificate</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cert</name></expr>)</condition><then>
<expr_stmt><expr><name>pk_bits</name> = <call><name>EVP_PKEY_bits</name><argument_list>(<argument><expr><call><name>X509_get_pubkey</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>pk_bits</name> = 0</expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>ssl_info</name> = <call><name>xmalloc</name><argument_list>(<argument><expr>128</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>ssl_info</name></expr></argument>, <argument><expr>128</expr></argument>, <argument><expr>"%s,%s,%d,%d"</expr></argument>,
<argument><expr><call><name>SSL_get_version</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>ssl</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SSL_CIPHER_get_name</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pk_bits</name></expr></argument>, <argument><expr><name>sk_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>write_request</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>do_next</name> = 0</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SSL_ERROR_WANT_READ</name></expr>:
<expr_stmt><expr><call><name>set_polled_events</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>APR_POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>do_next</name> = 0</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SSL_ERROR_WANT_WRITE</name></expr>:
<expr_stmt><expr><name>do_next</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SSL_ERROR_WANT_CONNECT</name></expr>:
</case><case>case <expr><name>SSL_ERROR_SSL</name></expr>:
</case><case>case <expr><name>SSL_ERROR_SYSCALL</name></expr>:
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio_err</name></expr></argument>, <argument><expr>"SSL handshake failed (%d).\n"</expr></argument>, <argument><expr><name>ecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERR_print_errors</name><argument_list>(<argument><expr><name>bio_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>do_next</name> = 0</expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
}</block></while>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type> <name>write_request</name><parameter_list>(<param><decl><type>struct <name>connection</name> *</type> <name>c</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>started</name> &gt;= <name>requests</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<do>do <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>tnow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>l</name> <init>= <expr><name><name>c</name>-&gt;<name>rwrite</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>e</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tnow</name> = <name>lasttime</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>rwrite</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>aprsock</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>connect</name></name> = <name>tnow</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>rwrote</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>rwrite</name></name> = <name>reqlen</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>send_body</name></expr>)</condition><then>
<expr_stmt><expr><name><name>c</name>-&gt;<name>rwrite</name></name> += <name>postlen</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>tnow</name> &gt; <name><name>c</name>-&gt;<name>connect</name></name> + <name>aprtimeout</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Send request timed out!\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if></else></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>ssl</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>e_ssl</name></decl>;</decl_stmt>
<expr_stmt><expr><name>e_ssl</name> = <call><name>SSL_write</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>ssl</name></name></expr></argument>,<argument><expr><name>request</name> + <name><name>c</name>-&gt;<name>rwrote</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>e_ssl</name> != <name>l</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio_err</name></expr></argument>, <argument><expr>"SSL write failed - closing connection\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERR_print_errors</name><argument_list>(<argument><expr><name>bio_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_connection</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>l</name> = <name>e_ssl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>e</name> = <call><name>apr_socket_send</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>aprsock</name></name></expr></argument>, <argument><expr><name>request</name> + <name><name>c</name>-&gt;<name>rwrote</name></name></expr></argument>, <argument><expr>&amp;<name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>e</name> != <name>APR_SUCCESS</name> &amp;&amp; !<call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>epipe</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Send request failed!\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>totalposted</name> += <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>rwrote</name></name> += <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>rwrite</name></name> -= <name>l</name></expr>;</expr_stmt>
}</block> while <condition>(<expr><name><name>c</name>-&gt;<name>rwrite</name></name></expr>)</condition>;</do>
<expr_stmt><expr><name><name>c</name>-&gt;<name>endwrite</name></name> = <name>lasttime</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>started</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_conn_state</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>STATE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>compradre</name><parameter_list>(<param><decl><type>struct <name>data</name> *</type> <name>a</name></decl></param>, <param><decl><type>struct <name>data</name> *</type> <name>b</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>(<name><name>a</name>-&gt;<name>ctime</name></name>) &lt; (<name><name>b</name>-&gt;<name>ctime</name></name>)</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>(<name><name>a</name>-&gt;<name>ctime</name></name>) &gt; (<name><name>b</name>-&gt;<name>ctime</name></name>)</expr>)</condition><then>
<return>return <expr>+1</expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>comprando</name><parameter_list>(<param><decl><type>struct <name>data</name> *</type> <name>a</name></decl></param>, <param><decl><type>struct <name>data</name> *</type> <name>b</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>(<name><name>a</name>-&gt;<name>time</name></name>) &lt; (<name><name>b</name>-&gt;<name>time</name></name>)</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>(<name><name>a</name>-&gt;<name>time</name></name>) &gt; (<name><name>b</name>-&gt;<name>time</name></name>)</expr>)</condition><then>
<return>return <expr>+1</expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>compri</name><parameter_list>(<param><decl><type>struct <name>data</name> *</type> <name>a</name></decl></param>, <param><decl><type>struct <name>data</name> *</type> <name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>p</name> <init>= <expr><name><name>a</name>-&gt;<name>time</name></name> - <name><name>a</name>-&gt;<name>ctime</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>q</name> <init>= <expr><name><name>b</name>-&gt;<name>time</name></name> - <name><name>b</name>-&gt;<name>ctime</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>p</name> &lt; <name>q</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>p</name> &gt; <name>q</name></expr>)</condition><then>
<return>return <expr>+1</expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>compwait</name><parameter_list>(<param><decl><type>struct <name>data</name> *</type> <name>a</name></decl></param>, <param><decl><type>struct <name>data</name> *</type> <name>b</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>(<name><name>a</name>-&gt;<name>waittime</name></name>) &lt; (<name><name>b</name>-&gt;<name>waittime</name></name>)</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>(<name><name>a</name>-&gt;<name>waittime</name></name>) &gt; (<name><name>b</name>-&gt;<name>waittime</name></name>)</expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>output_results</name><parameter_list>(<param><decl><type><name>int</name></type> <name>sig</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>timetaken</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>sig</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>lasttime</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>timetaken</name> = <call>(<name>double</name>) <argument_list>(<argument><expr><name>lasttime</name> - <name>start</name></expr></argument>)</argument_list></call> / <name>APR_USEC_PER_SEC</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\n\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Server Software: %s\n"</expr></argument>, <argument><expr><name>servername</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Server Hostname: %s\n"</expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Server Port: %hu\n"</expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>is_ssl</name> &amp;&amp; <name>ssl_info</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"SSL/TLS Protocol: %s\n"</expr></argument>, <argument><expr><name>ssl_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>is_ssl</name> &amp;&amp; <name>tls_sni</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"TLS Server Name: %s\n"</expr></argument>, <argument><expr><name>tls_sni</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Document Path: %s\n"</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nolength</name></expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Document Length: Variable\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Document Length: %" <name>APR_SIZE_T_FMT</name> " bytes\n"</expr></argument>, <argument><expr><name>doclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Concurrency Level: %d\n"</expr></argument>, <argument><expr><name>concurrency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Time taken for tests: %.3f seconds\n"</expr></argument>, <argument><expr><name>timetaken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Complete requests: %d\n"</expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Failed requests: %d\n"</expr></argument>, <argument><expr><name>bad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bad</name></expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" (Connect: %d, Receive: %d, Length: %d, Exceptions: %d)\n"</expr></argument>,
<argument><expr><name>err_conn</name></expr></argument>, <argument><expr><name>err_recv</name></expr></argument>, <argument><expr><name>err_length</name></expr></argument>, <argument><expr><name>err_except</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>epipe</name></expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Write errors: %d\n"</expr></argument>, <argument><expr><name>epipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>err_response</name></expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Non-2xx responses: %d\n"</expr></argument>, <argument><expr><name>err_response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>keepalive</name></expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Keep-Alive requests: %d\n"</expr></argument>, <argument><expr><name>doneka</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Total transferred: %" <name>APR_INT64_T_FMT</name> " bytes\n"</expr></argument>, <argument><expr><name>totalread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>send_body</name></expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Total body sent: %" <name>APR_INT64_T_FMT</name> "\n"</expr></argument>,
<argument><expr><name>totalposted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"HTML transferred: %" <name>APR_INT64_T_FMT</name> " bytes\n"</expr></argument>, <argument><expr><name>totalbread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>timetaken</name> &amp;&amp; <name>done</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Requests per second: %.2f [#/sec] (mean)\n"</expr></argument>,
<argument><expr>(<name>double</name>) <name>done</name> / <name>timetaken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Time per request: %.3f [ms] (mean)\n"</expr></argument>,
<argument><expr>(<name>double</name>) <name>concurrency</name> * <name>timetaken</name> * 1000 / <name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Time per request: %.3f [ms] (mean, across all concurrent requests)\n"</expr></argument>,
<argument><expr>(<name>double</name>) <name>timetaken</name> * 1000 / <name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Transfer rate: %.2f [Kbytes/sec] received\n"</expr></argument>,
<argument><expr>(<name>double</name>) <name>totalread</name> / 1024 / <name>timetaken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>send_body</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" %.2f kb/s sent\n"</expr></argument>,
<argument><expr>(<name>double</name>) <name>totalposted</name> / 1024 / <name>timetaken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" %.2f kb/s total\n"</expr></argument>,
<argument><expr><call>(<name>double</name>) <argument_list>(<argument><expr><name>totalread</name> + <name>totalposted</name></expr></argument>)</argument_list></call> / 1024 / <name>timetaken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>done</name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>totalcon</name> <init>= <expr>0</expr></init>, <name>total</name> <init>= <expr>0</expr></init>, <name>totald</name> <init>= <expr>0</expr></init>, <name>totalwait</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>meancon</name></decl>, <decl><type ref="prev"/><name>meantot</name></decl>, <decl><type ref="prev"/><name>meand</name></decl>, <decl><type ref="prev"/><name>meanwait</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>mincon</name> <init>= <expr><name>AB_MAX</name></expr></init>, <name>mintot</name> <init>= <expr><name>AB_MAX</name></expr></init>, <name>mind</name> <init>= <expr><name>AB_MAX</name></expr></init>,
<name>minwait</name> <init>= <expr><name>AB_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>maxcon</name> <init>= <expr>0</expr></init>, <name>maxtot</name> <init>= <expr>0</expr></init>, <name>maxd</name> <init>= <expr>0</expr></init>, <name>maxwait</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>mediancon</name> <init>= <expr>0</expr></init>, <name>mediantot</name> <init>= <expr>0</expr></init>, <name>mediand</name> <init>= <expr>0</expr></init>, <name>medianwait</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sdtot</name> <init>= <expr>0</expr></init>, <name>sdcon</name> <init>= <expr>0</expr></init>, <name>sdd</name> <init>= <expr>0</expr></init>, <name>sdwait</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>done</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type>struct <name>data</name> *</type><name>s</name> <init>= <expr>&amp;<name><name>stats</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mincon</name> = <call><name>ap_min</name><argument_list>(<argument><expr><name>mincon</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>ctime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mintot</name> = <call><name>ap_min</name><argument_list>(<argument><expr><name>mintot</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mind</name> = <call><name>ap_min</name><argument_list>(<argument><expr><name>mind</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>time</name></name> - <name><name>s</name>-&gt;<name>ctime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>minwait</name> = <call><name>ap_min</name><argument_list>(<argument><expr><name>minwait</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>waittime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxcon</name> = <call><name>ap_max</name><argument_list>(<argument><expr><name>maxcon</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>ctime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxtot</name> = <call><name>ap_max</name><argument_list>(<argument><expr><name>maxtot</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxd</name> = <call><name>ap_max</name><argument_list>(<argument><expr><name>maxd</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>time</name></name> - <name><name>s</name>-&gt;<name>ctime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxwait</name> = <call><name>ap_max</name><argument_list>(<argument><expr><name>maxwait</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>waittime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>totalcon</name> += <name><name>s</name>-&gt;<name>ctime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> += <name><name>s</name>-&gt;<name>time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>totald</name> += <name><name>s</name>-&gt;<name>time</name></name> - <name><name>s</name>-&gt;<name>ctime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>totalwait</name> += <name><name>s</name>-&gt;<name>waittime</name></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>meancon</name> = <name>totalcon</name> / <name>done</name></expr>;</expr_stmt>
<expr_stmt><expr><name>meantot</name> = <name>total</name> / <name>done</name></expr>;</expr_stmt>
<expr_stmt><expr><name>meand</name> = <name>totald</name> / <name>done</name></expr>;</expr_stmt>
<expr_stmt><expr><name>meanwait</name> = <name>totalwait</name> / <name>done</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>done</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type>struct <name>data</name> *</type><name>s</name> <init>= <expr>&amp;<name><name>stats</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> = ((<name>double</name>)<name><name>s</name>-&gt;<name>time</name></name> - <name>meantot</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>sdtot</name> += <name>a</name> * <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> = ((<name>double</name>)<name><name>s</name>-&gt;<name>ctime</name></name> - <name>meancon</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>sdcon</name> += <name>a</name> * <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> = ((<name>double</name>)<name><name>s</name>-&gt;<name>time</name></name> - (<name>double</name>)<name><name>s</name>-&gt;<name>ctime</name></name> - <name>meand</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>sdd</name> += <name>a</name> * <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> = ((<name>double</name>)<name><name>s</name>-&gt;<name>waittime</name></name> - <name>meanwait</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>sdwait</name> += <name>a</name> * <name>a</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>sdtot</name> = (<name>done</name> &gt; 1) ? <call><name>sqrt</name><argument_list>(<argument><expr><name>sdtot</name> / (<name>done</name> - 1)</expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>
<expr_stmt><expr><name>sdcon</name> = (<name>done</name> &gt; 1) ? <call><name>sqrt</name><argument_list>(<argument><expr><name>sdcon</name> / (<name>done</name> - 1)</expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>
<expr_stmt><expr><name>sdd</name> = (<name>done</name> &gt; 1) ? <call><name>sqrt</name><argument_list>(<argument><expr><name>sdd</name> / (<name>done</name> - 1)</expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>
<expr_stmt><expr><name>sdwait</name> = (<name>done</name> &gt; 1) ? <call><name>sqrt</name><argument_list>(<argument><expr><name>sdwait</name> / (<name>done</name> - 1)</expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>stats</name></expr></argument>, <argument><expr><name>done</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>(<call><call><name>int</name> <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call> <argument_list>(<argument><expr>const <name>void</name> *</expr></argument>, <argument><expr>const <name>void</name> *</expr></argument>)</argument_list></call>) <name>compradre</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>done</name> &gt; 1) &amp;&amp; (<name>done</name> % 2)</expr>)</condition><then>
<expr_stmt><expr><name>mediancon</name> = (<name><name>stats</name><index>[<expr><name>done</name> / 2</expr>]</index></name>.<name>ctime</name> + <name><name>stats</name><index>[<expr><name>done</name> / 2 + 1</expr>]</index></name>.<name>ctime</name>) / 2</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>mediancon</name> = <name><name>stats</name><index>[<expr><name>done</name> / 2</expr>]</index></name>.<name>ctime</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>stats</name></expr></argument>, <argument><expr><name>done</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>(<call><call><name>int</name> <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call> <argument_list>(<argument><expr>const <name>void</name> *</expr></argument>, <argument><expr>const <name>void</name> *</expr></argument>)</argument_list></call>) <name>compri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>done</name> &gt; 1) &amp;&amp; (<name>done</name> % 2)</expr>)</condition><then>
<expr_stmt><expr><name>mediand</name> = (<name><name>stats</name><index>[<expr><name>done</name> / 2</expr>]</index></name>.<name>time</name> + <name><name>stats</name><index>[<expr><name>done</name> / 2 + 1</expr>]</index></name>.<name>time</name> \
-<name><name>stats</name><index>[<expr><name>done</name> / 2</expr>]</index></name>.<name>ctime</name> - <name><name>stats</name><index>[<expr><name>done</name> / 2 + 1</expr>]</index></name>.<name>ctime</name>) / 2</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>mediand</name> = <name><name>stats</name><index>[<expr><name>done</name> / 2</expr>]</index></name>.<name>time</name> - <name><name>stats</name><index>[<expr><name>done</name> / 2</expr>]</index></name>.<name>ctime</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>stats</name></expr></argument>, <argument><expr><name>done</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>(<call><call><name>int</name> <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call> <argument_list>(<argument><expr>const <name>void</name> *</expr></argument>, <argument><expr>const <name>void</name> *</expr></argument>)</argument_list></call>) <name>compwait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>done</name> &gt; 1) &amp;&amp; (<name>done</name> % 2)</expr>)</condition><then>
<expr_stmt><expr><name>medianwait</name> = (<name><name>stats</name><index>[<expr><name>done</name> / 2</expr>]</index></name>.<name>waittime</name> + <name><name>stats</name><index>[<expr><name>done</name> / 2 + 1</expr>]</index></name>.<name>waittime</name>) / 2</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>medianwait</name> = <name><name>stats</name><index>[<expr><name>done</name> / 2</expr>]</index></name>.<name>waittime</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>stats</name></expr></argument>, <argument><expr><name>done</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>(<call><call><name>int</name> <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call> <argument_list>(<argument><expr>const <name>void</name> *</expr></argument>, <argument><expr>const <name>void</name> *</expr></argument>)</argument_list></call>) <name>comprando</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>done</name> &gt; 1) &amp;&amp; (<name>done</name> % 2)</expr>)</condition><then>
<expr_stmt><expr><name>mediantot</name> = (<name><name>stats</name><index>[<expr><name>done</name> / 2</expr>]</index></name>.<name>time</name> + <name><name>stats</name><index>[<expr><name>done</name> / 2 + 1</expr>]</index></name>.<name>time</name>) / 2</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>mediantot</name> = <name><name>stats</name><index>[<expr><name>done</name> / 2</expr>]</index></name>.<name>time</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\nConnection Times (ms)\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mincon</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>mincon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mind</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>mind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>minwait</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>minwait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mintot</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>mintot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>meancon</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>meancon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>meand</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>meand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>meanwait</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>meanwait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>meantot</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>meantot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mediancon</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>mediancon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mediand</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>mediand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>medianwait</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>medianwait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mediantot</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>mediantot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxcon</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>maxcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxd</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>maxd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxwait</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>maxwait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxtot</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>maxtot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sdcon</name> = <call><name>ap_double_ms</name><argument_list>(<argument><expr><name>sdcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sdd</name> = <call><name>ap_double_ms</name><argument_list>(<argument><expr><name>sdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sdwait</name> = <call><name>ap_double_ms</name><argument_list>(<argument><expr><name>sdwait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sdtot</name> = <call><name>ap_double_ms</name><argument_list>(<argument><expr><name>sdtot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>confidence</name></expr>)</condition><then> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONF_FMT_STRING</name></cpp:macro> <cpp:value>"%5" APR_TIME_T_FMT " %4" APR_TIME_T_FMT " %5.1f %6" APR_TIME_T_FMT " %7" APR_TIME_T_FMT "\n"</cpp:value></cpp:define>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" min mean[+/-sd] median max\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Connect: " <name>CONF_FMT_STRING</name></expr></argument>,
<argument><expr><name>mincon</name></expr></argument>, <argument><expr><name>meancon</name></expr></argument>, <argument><expr><name>sdcon</name></expr></argument>, <argument><expr><name>mediancon</name></expr></argument>, <argument><expr><name>maxcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Processing: " <name>CONF_FMT_STRING</name></expr></argument>,
<argument><expr><name>mind</name></expr></argument>, <argument><expr><name>meand</name></expr></argument>, <argument><expr><name>sdd</name></expr></argument>, <argument><expr><name>mediand</name></expr></argument>, <argument><expr><name>maxd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Waiting: " <name>CONF_FMT_STRING</name></expr></argument>,
<argument><expr><name>minwait</name></expr></argument>, <argument><expr><name>meanwait</name></expr></argument>, <argument><expr><name>sdwait</name></expr></argument>, <argument><expr><name>medianwait</name></expr></argument>, <argument><expr><name>maxwait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Total: " <name>CONF_FMT_STRING</name></expr></argument>,
<argument><expr><name>mintot</name></expr></argument>, <argument><expr><name>meantot</name></expr></argument>, <argument><expr><name>sdtot</name></expr></argument>, <argument><expr><name>mediantot</name></expr></argument>, <argument><expr><name>maxtot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CONF_FMT_STRING</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANE</name><parameter_list>(<param><type><name>what</name></type></param>,<param><type><name>mean</name></type></param>,<param><type><name>median</name></type></param>,<param><type><name>sd</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ double d = (double)mean - median; if (d &lt; 0) d = -d; if (d &gt; 2 * sd ) printf("ERROR: The median and mean for " what " are more than twice the standard\n" " deviation apart. These results are NOT reliable.\n"); else if (d &gt; sd ) printf("WARNING: The median and mean for " what " are not within a normal deviation\n" " These results are probably not that reliable.\n"); }</cpp:value></cpp:define>
<expr_stmt><expr><call><name>SANE</name><argument_list>(<argument><expr>"the initial connection time"</expr></argument>, <argument><expr><name>meancon</name></expr></argument>, <argument><expr><name>mediancon</name></expr></argument>, <argument><expr><name>sdcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SANE</name><argument_list>(<argument><expr>"the processing time"</expr></argument>, <argument><expr><name>meand</name></expr></argument>, <argument><expr><name>mediand</name></expr></argument>, <argument><expr><name>sdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SANE</name><argument_list>(<argument><expr>"the waiting time"</expr></argument>, <argument><expr><name>meanwait</name></expr></argument>, <argument><expr><name>medianwait</name></expr></argument>, <argument><expr><name>sdwait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SANE</name><argument_list>(<argument><expr>"the total time"</expr></argument>, <argument><expr><name>meantot</name></expr></argument>, <argument><expr><name>mediantot</name></expr></argument>, <argument><expr><name>sdtot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" min avg max\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONF_FMT_STRING</name></cpp:macro> <cpp:value>"%5" APR_TIME_T_FMT " %5" APR_TIME_T_FMT "%5" APR_TIME_T_FMT "\n"</cpp:value></cpp:define>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Connect: " <name>CONF_FMT_STRING</name></expr></argument>, <argument><expr><name>mincon</name></expr></argument>, <argument><expr><name>meancon</name></expr></argument>, <argument><expr><name>maxcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Processing: " <name>CONF_FMT_STRING</name></expr></argument>, <argument><expr><name>mind</name></expr></argument>, <argument><expr><name>meand</name></expr></argument>, <argument><expr><name>maxd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Waiting: " <name>CONF_FMT_STRING</name></expr></argument>, <argument><expr><name>minwait</name></expr></argument>, <argument><expr><name>meanwait</name></expr></argument>, <argument><expr><name>maxwait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Total: " <name>CONF_FMT_STRING</name></expr></argument>, <argument><expr><name>mintot</name></expr></argument>, <argument><expr><name>meantot</name></expr></argument>, <argument><expr><name>maxtot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CONF_FMT_STRING</name></cpp:undef>
}</block></else></if>
<if>if <condition>(<expr><name>percentile</name> &amp;&amp; (<name>done</name> &gt; 1)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\nPercentage of the requests served within a certain time (ms)\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>percs</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>percs</name><index>[<expr><name>i</name></expr>]</index></name> &lt;= 0</expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" 0%% &lt;0&gt; (never)\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>percs</name><index>[<expr><name>i</name></expr>]</index></name> &gt;= 100</expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" 100%% %5" <name>APR_TIME_T_FMT</name> " (longest request)\n"</expr></argument>,
<argument><expr><call><name>ap_round_ms</name><argument_list>(<argument><expr><name><name>stats</name><index>[<expr><name>done</name> - 1</expr>]</index></name>.<name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" %d%% %5" <name>APR_TIME_T_FMT</name> "\n"</expr></argument>, <argument><expr><name><name>percs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>ap_round_ms</name><argument_list>(<argument><expr><name><name>stats</name><index>[<expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>done</name> * <name><name>percs</name><index>[<expr><name>i</name></expr>]</index></name> / 100</expr></argument>)</argument_list></call></expr>]</index></name>.<name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr><name>csvperc</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>FILE</name> *</type><name>out</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>csvperc</name></expr></argument>, <argument><expr>"w"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>out</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"Cannot open CSV output file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"" "Percentage served" "," "Time in ms" "\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt;= 100</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>double</name></type> <name>t</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>i</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name>t</name> = <call><name>ap_double_ms</name><argument_list>(<argument><expr><name><name>stats</name><index>[<expr>0</expr>]</index></name>.<name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>i</name> == 100</expr>)</condition><then>
<expr_stmt><expr><name>t</name> = <call><name>ap_double_ms</name><argument_list>(<argument><expr><name><name>stats</name><index>[<expr><name>done</name> - 1</expr>]</index></name>.<name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>t</name> = <call><name>ap_double_ms</name><argument_list>(<argument><expr><name><name>stats</name><index>[<expr><call>(<name>int</name>) <argument_list>(<argument><expr>0.5 + <name>done</name> * <name>i</name> / 100.0</expr></argument>)</argument_list></call></expr>]</index></name>.<name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"%d,%.3f\n"</expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>gnuplot</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>FILE</name> *</type><name>out</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>gnuplot</name></expr></argument>, <argument><expr>"w"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmstring</name><index>[<expr><name>APR_CTIME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>out</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"Cannot open gnuplot output file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"starttime\tseconds\tctime\tdtime\tttime\twait\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>done</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr>(<name>void</name>) <call><name>apr_ctime</name><argument_list>(<argument><expr><name>tmstring</name></expr></argument>, <argument><expr><name><name>stats</name><index>[<expr><name>i</name></expr>]</index></name>.<name>starttime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"%s\t%" <name>APR_TIME_T_FMT</name> "\t%" <name>APR_TIME_T_FMT</name>
"\t%" <name>APR_TIME_T_FMT</name> "\t%" <name>APR_TIME_T_FMT</name>
"\t%" <name>APR_TIME_T_FMT</name> "\n"</expr></argument>, <argument><expr><name>tmstring</name></expr></argument>,
<argument><expr><call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>stats</name><index>[<expr><name>i</name></expr>]</index></name>.<name>starttime</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ap_round_ms</name><argument_list>(<argument><expr><name><name>stats</name><index>[<expr><name>i</name></expr>]</index></name>.<name>ctime</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ap_round_ms</name><argument_list>(<argument><expr><name><name>stats</name><index>[<expr><name>i</name></expr>]</index></name>.<name>time</name> - <name><name>stats</name><index>[<expr><name>i</name></expr>]</index></name>.<name>ctime</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ap_round_ms</name><argument_list>(<argument><expr><name><name>stats</name><index>[<expr><name>i</name></expr>]</index></name>.<name>time</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ap_round_ms</name><argument_list>(<argument><expr><name><name>stats</name><index>[<expr><name>i</name></expr>]</index></name>.<name>waittime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>sig</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>output_html_results</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>timetaken</name> <init>= <expr><call>(<name>double</name>) <argument_list>(<argument><expr><name>lasttime</name> - <name>start</name></expr></argument>)</argument_list></call> / <name>APR_USEC_PER_SEC</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\n\n&lt;table %s&gt;\n"</expr></argument>, <argument><expr><name>tablestring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th colspan=2 %s&gt;Server Software:&lt;/th&gt;"
"&lt;td colspan=2 %s&gt;%s&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>servername</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th colspan=2 %s&gt;Server Hostname:&lt;/th&gt;"
"&lt;td colspan=2 %s&gt;%s&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th colspan=2 %s&gt;Server Port:&lt;/th&gt;"
"&lt;td colspan=2 %s&gt;%hu&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th colspan=2 %s&gt;Document Path:&lt;/th&gt;"
"&lt;td colspan=2 %s&gt;%s&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nolength</name></expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th colspan=2 %s&gt;Document Length:&lt;/th&gt;"
"&lt;td colspan=2 %s&gt;Variable&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th colspan=2 %s&gt;Document Length:&lt;/th&gt;"
"&lt;td colspan=2 %s&gt;%" <name>APR_SIZE_T_FMT</name> " bytes&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>doclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th colspan=2 %s&gt;Concurrency Level:&lt;/th&gt;"
"&lt;td colspan=2 %s&gt;%d&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>concurrency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th colspan=2 %s&gt;Time taken for tests:&lt;/th&gt;"
"&lt;td colspan=2 %s&gt;%.3f seconds&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>timetaken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th colspan=2 %s&gt;Complete requests:&lt;/th&gt;"
"&lt;td colspan=2 %s&gt;%d&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th colspan=2 %s&gt;Failed requests:&lt;/th&gt;"
"&lt;td colspan=2 %s&gt;%d&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>bad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bad</name></expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;td colspan=4 %s &gt; (Connect: %d, Length: %d, Exceptions: %d)&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>err_conn</name></expr></argument>, <argument><expr><name>err_length</name></expr></argument>, <argument><expr><name>err_except</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>err_response</name></expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th colspan=2 %s&gt;Non-2xx responses:&lt;/th&gt;"
"&lt;td colspan=2 %s&gt;%d&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>err_response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>keepalive</name></expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th colspan=2 %s&gt;Keep-Alive requests:&lt;/th&gt;"
"&lt;td colspan=2 %s&gt;%d&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>doneka</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th colspan=2 %s&gt;Total transferred:&lt;/th&gt;"
"&lt;td colspan=2 %s&gt;%" <name>APR_INT64_T_FMT</name> " bytes&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>totalread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>send_body</name></expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th colspan=2 %s&gt;Total body sent:&lt;/th&gt;"
"&lt;td colspan=2 %s&gt;%" <name>APR_INT64_T_FMT</name> "&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>,
<argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>totalposted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th colspan=2 %s&gt;HTML transferred:&lt;/th&gt;"
"&lt;td colspan=2 %s&gt;%" <name>APR_INT64_T_FMT</name> " bytes&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>totalbread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>timetaken</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th colspan=2 %s&gt;Requests per second:&lt;/th&gt;"
"&lt;td colspan=2 %s&gt;%.2f&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr>(<name>double</name>) <name>done</name> / <name>timetaken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th colspan=2 %s&gt;Transfer rate:&lt;/th&gt;"
"&lt;td colspan=2 %s&gt;%.2f kb/s received&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr>(<name>double</name>) <name>totalread</name> / 1024 / <name>timetaken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>send_body</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;td colspan=2 %s&gt;&amp;nbsp;&lt;/td&gt;"
"&lt;td colspan=2 %s&gt;%.2f kb/s sent&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>,
<argument><expr>(<name>double</name>) <name>totalposted</name> / 1024 / <name>timetaken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;td colspan=2 %s&gt;&amp;nbsp;&lt;/td&gt;"
"&lt;td colspan=2 %s&gt;%.2f kb/s total&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>,
<argument><expr><call>(<name>double</name>) <argument_list>(<argument><expr><name>totalread</name> + <name>totalposted</name></expr></argument>)</argument_list></call> / 1024 / <name>timetaken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>totalcon</name> <init>= <expr>0</expr></init>, <name>total</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>mincon</name> <init>= <expr><name>AB_MAX</name></expr></init>, <name>mintot</name> <init>= <expr><name>AB_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>maxcon</name> <init>= <expr>0</expr></init>, <name>maxtot</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>done</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type>struct <name>data</name> *</type><name>s</name> <init>= <expr>&amp;<name><name>stats</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mincon</name> = <call><name>ap_min</name><argument_list>(<argument><expr><name>mincon</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>ctime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mintot</name> = <call><name>ap_min</name><argument_list>(<argument><expr><name>mintot</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxcon</name> = <call><name>ap_max</name><argument_list>(<argument><expr><name>maxcon</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>ctime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxtot</name> = <call><name>ap_max</name><argument_list>(<argument><expr><name>maxtot</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>totalcon</name> += <name><name>s</name>-&gt;<name>ctime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> += <name><name>s</name>-&gt;<name>time</name></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>mincon</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>mincon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mintot</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>mintot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxcon</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>maxcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxtot</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>maxtot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>totalcon</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>totalcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> = <call><name>ap_round_ms</name><argument_list>(<argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>done</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th %s colspan=4&gt;Connnection Times (ms)&lt;/th&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th %s&gt;&amp;nbsp;&lt;/th&gt; &lt;th %s&gt;min&lt;/th&gt; &lt;th %s&gt;avg&lt;/th&gt; &lt;th %s&gt;max&lt;/th&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th %s&gt;Connect:&lt;/th&gt;"
"&lt;td %s&gt;%5" <name>APR_TIME_T_FMT</name> "&lt;/td&gt;"
"&lt;td %s&gt;%5" <name>APR_TIME_T_FMT</name> "&lt;/td&gt;"
"&lt;td %s&gt;%5" <name>APR_TIME_T_FMT</name> "&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>mincon</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>totalcon</name> / <name>done</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>maxcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th %s&gt;Processing:&lt;/th&gt;"
"&lt;td %s&gt;%5" <name>APR_TIME_T_FMT</name> "&lt;/td&gt;"
"&lt;td %s&gt;%5" <name>APR_TIME_T_FMT</name> "&lt;/td&gt;"
"&lt;td %s&gt;%5" <name>APR_TIME_T_FMT</name> "&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>mintot</name> - <name>mincon</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>,
<argument><expr>(<name>total</name> / <name>done</name>) - (<name>totalcon</name> / <name>done</name>)</expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>maxtot</name> - <name>maxcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;tr %s&gt;&lt;th %s&gt;Total:&lt;/th&gt;"
"&lt;td %s&gt;%5" <name>APR_TIME_T_FMT</name> "&lt;/td&gt;"
"&lt;td %s&gt;%5" <name>APR_TIME_T_FMT</name> "&lt;/td&gt;"
"&lt;td %s&gt;%5" <name>APR_TIME_T_FMT</name> "&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>trstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>mintot</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>total</name> / <name>done</name></expr></argument>, <argument><expr><name>tdstring</name></expr></argument>, <argument><expr><name>maxtot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;/table&gt;\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>start_connect</name><parameter_list>(<param><decl><type>struct <name>connection</name> *</type> <name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!(<name>started</name> &lt; <name>requests</name>)</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name><name>c</name>-&gt;<name>read</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>bread</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>keepalive</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>cbx</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>gotheader</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>rwrite</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>ctx</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>c</name>-&gt;<name>ctx</name></name></expr></argument>, <argument><expr><name>cntxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_socket_create</name><argument_list>(<argument><expr>&amp;<name><name>c</name>-&gt;<name>aprsock</name></name></expr></argument>, <argument><expr><name><name>destsa</name>-&gt;<name>family</name></name></expr></argument>,
<argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>ctx</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_err</name><argument_list>(<argument><expr>"socket"</expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>myhost</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_socket_bind</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>aprsock</name></name></expr></argument>, <argument><expr><name>mysa</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_err</name><argument_list>(<argument><expr>"bind"</expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>c</name>-&gt;<name>pollfd</name>.<name>desc_type</name></name> = <name>APR_POLL_SOCKET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>pollfd</name>.<name>desc</name>.<name>s</name></name> = <name><name>c</name>-&gt;<name>aprsock</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>pollfd</name>.<name>reqevents</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>pollfd</name>.<name>client_data</name></name> = <name>c</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_socket_opt_set</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>aprsock</name></name></expr></argument>, <argument><expr><name>APR_SO_NONBLOCK</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_err</name><argument_list>(<argument><expr>"socket nonblock"</expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>windowsize</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_opt_set</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>aprsock</name></name></expr></argument>, <argument><expr><name>APR_SO_SNDBUF</name></expr></argument>,
<argument><expr><name>windowsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> &amp;&amp; <name>rv</name> != <name>APR_ENOTIMPL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_err</name><argument_list>(<argument><expr>"socket send buffer"</expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_opt_set</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>aprsock</name></name></expr></argument>, <argument><expr><name>APR_SO_RCVBUF</name></expr></argument>,
<argument><expr><name>windowsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> &amp;&amp; <name>rv</name> != <name>APR_ENOTIMPL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_err</name><argument_list>(<argument><expr>"socket receive buffer"</expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>c</name>-&gt;<name>start</name></name> = <name>lasttime</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>is_ssl</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>BIO</name> *</type><name>bio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_os_sock_t</name></type> <name>fd</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>c</name>-&gt;<name>ssl</name></name> = <call><name>SSL_new</name><argument_list>(<argument><expr><name>ssl_ctx</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio_err</name></expr></argument>, <argument><expr>"SSL_new failed.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERR_print_errors</name><argument_list>(<argument><expr><name>bio_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ssl_rand_seed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_os_sock_get</name><argument_list>(<argument><expr>&amp;<name>fd</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>aprsock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bio</name> = <call><name>BIO_new_socket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>BIO_NOCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_set_bio</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>ssl</name></name></expr></argument>, <argument><expr><name>bio</name></expr></argument>, <argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_set_connect_state</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>verbosity</name> &gt;= 4</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_set_callback</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>ssl_print_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_set_callback_arg</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>bio_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>tls_sni</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SSL_set_tlsext_host_name</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>ssl</name></name></expr></argument>, <argument><expr><name>tls_sni</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>c</name>-&gt;<name>ssl</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_socket_connect</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>aprsock</name></name></expr></argument>, <argument><expr><name>destsa</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EINPROGRESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>set_conn_state</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>STATE_CONNECTING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>rwrite</name></name> = 0</expr>;</expr_stmt>
<return>return;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>set_conn_state</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>STATE_UNCONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>aprsock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err_conn</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>bad</name>++ &gt; 10</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>"\nTest aborted after 10 failures\n\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_err</name><argument_list>(<argument><expr>"apr_socket_connect()"</expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>start_connect</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>set_conn_state</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>STATE_CONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>ssl</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ssl_proceed_handshake</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr_stmt><expr><call><name>write_request</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>close_connection</name><parameter_list>(<param><decl><type>struct <name>connection</name> *</type> <name>c</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>read</name></name> == 0 &amp;&amp; <name><name>c</name>-&gt;<name>keepalive</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>good</name></expr>)</condition><then>
<expr_stmt><expr><name>good</name>--</expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>good</name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>doclen</name> = <name><name>c</name>-&gt;<name>bread</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name><name>c</name>-&gt;<name>bread</name></name> != <name>doclen</name>) &amp;&amp; !<name>nolength</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>bad</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>err_length</name>++</expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>done</name> &lt; <name>requests</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type>struct <name>data</name> *</type><name>s</name> <init>= <expr>&amp;<name><name>stats</name><index>[<expr><name>done</name>++</expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>done</name></name> = <name>lasttime</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>starttime</name></name> = <name><name>c</name>-&gt;<name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>ctime</name></name> = <call><name>ap_max</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>connect</name></name> - <name><name>c</name>-&gt;<name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>time</name></name> = <call><name>ap_max</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>done</name></name> - <name><name>c</name>-&gt;<name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>waittime</name></name> = <call><name>ap_max</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>beginread</name></name> - <name><name>c</name>-&gt;<name>endwrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>heartbeatres</name> &amp;&amp; !(<name>done</name> % <name>heartbeatres</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Completed %d requests\n"</expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>set_conn_state</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>STATE_UNCONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>ssl</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SSL_shutdown</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>ssl</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>aprsock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>start_connect</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>read_connection</name><parameter_list>(<param><decl><type>struct <name>connection</name> *</type> <name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>respcode</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>ssl</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>SSL_read</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>ssl</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> &lt;= 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>scode</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>ssl</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>scode</name> == <name>SSL_ERROR_ZERO_RETURN</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>good</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>scode</name> == <name>SSL_ERROR_SYSCALL</name>
&amp;&amp; <name>status</name> == 0
&amp;&amp; <name><name>c</name>-&gt;<name>read</name></name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>good</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>scode</name> != <name>SSL_ERROR_WANT_WRITE</name>
&amp;&amp; <name>scode</name> != <name>SSL_ERROR_WANT_READ</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c</name>-&gt;<name>read</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio_err</name></expr></argument>, <argument><expr>"SSL read failed (%d) - closing connection\n"</expr></argument>, <argument><expr><name>scode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERR_print_errors</name><argument_list>(<argument><expr><name>bio_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>r</name> = <name>status</name></expr>;</expr_stmt>
}</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr_stmt><expr><name>status</name> = <call><name>apr_socket_recv</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>aprsock</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return;</return></then>
<else>else <if>if <condition>(<expr><name>r</name> == 0 &amp;&amp; <call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>good</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then>
<else>else <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err_recv</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>recverrok</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>bad</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>verbosity</name> &gt;= 1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>120</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr>"%s: %s (%d)\n"</expr></argument>, <argument><expr>"apr_socket_recv"</expr></argument>, <argument><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>sizeof <name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_err</name><argument_list>(<argument><expr>"apr_socket_recv"</expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if></else></if></else></if>
}</block></else></if>
<expr_stmt><expr><name>totalread</name> += <name>r</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>read</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c</name>-&gt;<name>beginread</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>c</name>-&gt;<name>read</name></name> += <name>r</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>c</name>-&gt;<name>gotheader</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr>4</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>space</name> <init>= <expr><name>CBUFFSIZE</name> - <name><name>c</name>-&gt;<name>cbx</name></name> - 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tocopy</name> <init>= <expr>(<name>space</name> &lt; <name>r</name>) ? <name>space</name> : <name>r</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NOT_ASCII</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>inbytes_left</name> <init>= <expr><name>space</name></expr></init>, <name>outbytes_left</name> <init>= <expr><name>space</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_xlate_conv_buffer</name><argument_list>(<argument><expr><name>from_ascii</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr>&amp;<name>inbytes_left</name></expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>cbuff</name></name> + <name><name>c</name>-&gt;<name>cbx</name></name></expr></argument>, <argument><expr>&amp;<name>outbytes_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> || <name>inbytes_left</name> || <name>outbytes_left</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"only simple translation is supported (%d/%" <name>APR_SIZE_T_FMT</name>
"/%" <name>APR_SIZE_T_FMT</name> ")\n"</expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>inbytes_left</name></expr></argument>, <argument><expr><name>outbytes_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>cbuff</name></name> + <name><name>c</name>-&gt;<name>cbx</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>c</name>-&gt;<name>cbx</name></name> += <name>tocopy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>space</name> -= <name>tocopy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>cbuff</name><index>[<expr><name><name>c</name>-&gt;<name>cbx</name></name></expr>]</index></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>verbosity</name> &gt;= 2</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"LOG: header received:\n%s\n"</expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>cbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>s</name> = <call><name>strstr</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>cbuff</name></name></expr></argument>, <argument><expr>"\r\n\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>s</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>s</name> = <call><name>strstr</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>cbuff</name></name></expr></argument>, <argument><expr>"\n\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> = 2</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>s</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>space</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>set_conn_state</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>STATE_UNCONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>aprsock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err_response</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>bad</name>++ &gt; 10</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr>"\nTest aborted after 10 failures\n\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>start_connect</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!<name>good</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>, *<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> = <call><name>xstrcasestr</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>cbuff</name></name></expr></argument>, <argument><expr>"Server:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> = <name>servername</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>p</name> += 8</expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>p</name> &gt; 32 &amp;&amp; <name>len</name>++ &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>servername</name></expr></argument>)</argument_list></sizeof> - 1</expr>)</condition>
<expr_stmt><expr>*<name>q</name>++ = *<name>p</name>++</expr>;</expr_stmt></while>
}</block></then></if>
<expr_stmt><expr>*<name>q</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>part</name> = <call><name>strstr</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>cbuff</name></name></expr></argument>, <argument><expr>"HTTP"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>part</name> &amp;&amp; <call><name>strlen</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call> &gt; <call><name>strlen</name><argument_list>(<argument><expr>"HTTP/1.x_"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>respcode</name></expr></argument>, <argument><expr>(<name>part</name> + <call><name>strlen</name><argument_list>(<argument><expr>"HTTP/1.x_"</expr></argument>)</argument_list></call>)</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>respcode</name><index>[<expr>3</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>respcode</name></expr></argument>, <argument><expr>"500"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>respcode</name><index>[<expr>0</expr>]</index></name> != '2'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>err_response</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>verbosity</name> &gt;= 2</expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"WARNING: Response code not 2xx (%s)\n"</expr></argument>, <argument><expr><name>respcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>verbosity</name> &gt;= 3</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"LOG: Response code = %s\n"</expr></argument>, <argument><expr><name>respcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><name><name>c</name>-&gt;<name>gotheader</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr>*<name>s</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>keepalive</name> &amp;&amp; <call><name>xstrcasestr</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>cbuff</name></name></expr></argument>, <argument><expr>"Keep-Alive"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>cl</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>keepalive</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>cl</name> = <call><name>xstrcasestr</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>cbuff</name></name></expr></argument>, <argument><expr>"Content-Length:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cl</name> &amp;&amp; <name>method</name> != <name>HEAD</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c</name>-&gt;<name>length</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>cl</name> + 16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>c</name>-&gt;<name>length</name></name> = 0</expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name><name>c</name>-&gt;<name>bread</name></name> += <name><name>c</name>-&gt;<name>cbx</name></name> - (<name>s</name> + <name>l</name> - <name><name>c</name>-&gt;<name>cbuff</name></name>) + <name>r</name> - <name>tocopy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>totalbread</name> += <name><name>c</name>-&gt;<name>bread</name></name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>c</name>-&gt;<name>bread</name></name> += <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>totalbread</name> += <name>r</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>keepalive</name></name> &amp;&amp; (<name><name>c</name>-&gt;<name>bread</name></name> &gt;= <name><name>c</name>-&gt;<name>length</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>good</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>good</name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>doclen</name> = <name><name>c</name>-&gt;<name>bread</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name><name>c</name>-&gt;<name>bread</name></name> != <name>doclen</name>) &amp;&amp; !<name>nolength</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>bad</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>err_length</name>++</expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>done</name> &lt; <name>requests</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type>struct <name>data</name> *</type><name>s</name> <init>= <expr>&amp;<name><name>stats</name><index>[<expr><name>done</name>++</expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>doneka</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>done</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>starttime</name></name> = <name><name>c</name>-&gt;<name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>ctime</name></name> = <call><name>ap_max</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>connect</name></name> - <name><name>c</name>-&gt;<name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>time</name></name> = <call><name>ap_max</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>done</name></name> - <name><name>c</name>-&gt;<name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>waittime</name></name> = <call><name>ap_max</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>beginread</name></name> - <name><name>c</name>-&gt;<name>endwrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>heartbeatres</name> &amp;&amp; !(<name>done</name> % <name>heartbeatres</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Completed %d requests\n"</expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>c</name>-&gt;<name>keepalive</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>length</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>gotheader</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>cbx</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>read</name></name> = <name><name>c</name>-&gt;<name>bread</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>start</name></name> = <name><name>c</name>-&gt;<name>connect</name></name> = <name>lasttime</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_request</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>stoptime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int16_t</name></type> <name>rtnev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>snprintf_res</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NOT_ASCII</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>inbytes_left</name></decl>, <decl><type ref="prev"/><name>outbytes_left</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>isproxy</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>connecthost</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>cntxt</name></expr></argument>, <argument><expr><name>proxyhost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>connectport</name> = <name>proxyport</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>connecthost</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>cntxt</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>connectport</name> = <name>port</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>!<name>use_html</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Benchmarking %s "</expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>isproxy</name></expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"[through %s:%d] "</expr></argument>, <argument><expr><name>proxyhost</name></expr></argument>, <argument><expr><name>proxyport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"(be patient)%s"</expr></argument>,
<argument><expr>(<name>heartbeatres</name> ? "\n" : "...")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>con</name> = <call><name>xcalloc</name><argument_list>(<argument><expr><name>concurrency</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>connection</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stats</name> = <call><name>xcalloc</name><argument_list>(<argument><expr><name>requests</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>status</name> = <call><name>apr_pollset_create</name><argument_list>(<argument><expr>&amp;<name>readbits</name></expr></argument>, <argument><expr><name>concurrency</name></expr></argument>, <argument><expr><name>cntxt</name></expr></argument>,
<argument><expr><name>APR_POLLSET_NOCOPY</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_err</name><argument_list>(<argument><expr>"apr_pollset_create failed"</expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>opt_host</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hdrs</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>cntxt</name></expr></argument>, <argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Host: "</expr></argument>, <argument><expr><name>host_field</name></expr></argument>, <argument><expr><name>colonhost</name></expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
}</block></else></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>is_ssl</name> &amp;&amp; <name>tls_use_sni</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_ipsubnet_t</name> *</type><name>ip</name></decl>;</decl_stmt>
<if>if <condition>(<expr>((<name>tls_sni</name> = <name>opt_host</name>) || (<name>tls_sni</name> = <name>hostname</name>)) &amp;&amp;
(!*<name>tls_sni</name> || <call><name>apr_ipsubnet_create</name><argument_list>(<argument><expr>&amp;<name>ip</name></expr></argument>, <argument><expr><name>tls_sni</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>cntxt</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>tls_sni</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<name>opt_useragent</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hdrs</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>cntxt</name></expr></argument>, <argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"User-Agent: ApacheBench/"</expr></argument>, <argument><expr><name>AP_AB_BASEREVISION</name></expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
}</block></else></if>
<if>if <condition>(<expr>!<name>opt_accept</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hdrs</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>cntxt</name></expr></argument>, <argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Accept: */*\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
}</block></else></if>
<if>if <condition>(<expr>!<name>send_body</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>snprintf_res</name> = <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_request</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>"%s %s HTTP/1.0\r\n"
"%s" "%s" "%s"
"%s" "\r\n"</expr></argument>,
<argument><expr><name><name>method_str</name><index>[<expr><name>method</name></expr>]</index></name></expr></argument>,
<argument><expr>(<name>isproxy</name>) ? <name>fullurl</name> : <name>path</name></expr></argument>,
<argument><expr><name>keepalive</name> ? "Connection: Keep-Alive\r\n" : ""</expr></argument>,
<argument><expr><name>cookie</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>, <argument><expr><name>hdrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>snprintf_res</name> = <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_request</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>"%s %s HTTP/1.0\r\n"
"%s" "%s" "%s"
"Content-length: %" <name>APR_SIZE_T_FMT</name> "\r\n"
"Content-type: %s\r\n"
"%s"
"\r\n"</expr></argument>,
<argument><expr><name><name>method_str</name><index>[<expr><name>method</name></expr>]</index></name></expr></argument>,
<argument><expr>(<name>isproxy</name>) ? <name>fullurl</name> : <name>path</name></expr></argument>,
<argument><expr><name>keepalive</name> ? "Connection: Keep-Alive\r\n" : ""</expr></argument>,
<argument><expr><name>cookie</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>,
<argument><expr><name>postlen</name></expr></argument>,
<argument><expr>(<name>content_type</name> != <name>NULL</name>) ? <name>content_type</name> : "text/plain"</expr></argument>, <argument><expr><name>hdrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>snprintf_res</name> &gt;= <sizeof>sizeof<argument_list>(<argument><expr><name>_request</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr>"Request too long\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>verbosity</name> &gt;= 2</expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"INFO: %s header == \n---\n%s\n---\n"</expr></argument>,
<argument><expr><name><name>method_str</name><index>[<expr><name>method</name></expr>]</index></name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>reqlen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>send_body</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>buff</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>postlen</name> + <name>reqlen</name> + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buff</name> + <name>reqlen</name></expr></argument>, <argument><expr><name>postdata</name></expr></argument>, <argument><expr><name>postlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>request</name> = <name>buff</name></expr>;</expr_stmt>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NOT_ASCII</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>inbytes_left</name> = <name>outbytes_left</name> = <name>reqlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_xlate_conv_buffer</name><argument_list>(<argument><expr><name>to_ascii</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr>&amp;<name>inbytes_left</name></expr></argument>,
<argument><expr><name>request</name></expr></argument>, <argument><expr>&amp;<name>outbytes_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> || <name>inbytes_left</name> || <name>outbytes_left</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"only simple translation is supported (%d/%"
<name>APR_SIZE_T_FMT</name> "/%" <name>APR_SIZE_T_FMT</name> ")\n"</expr></argument>,
<argument><expr><name>status</name></expr></argument>, <argument><expr><name>inbytes_left</name></expr></argument>, <argument><expr><name>outbytes_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>myhost</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>mysa</name></expr></argument>, <argument><expr><name>myhost</name></expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>cntxt</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>120</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>"apr_sockaddr_info_get() for %s"</expr></argument>, <argument><expr><name>myhost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_err</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>destsa</name></expr></argument>, <argument><expr><name>connecthost</name></expr></argument>,
<argument><expr><name>myhost</name> ? <name><name>mysa</name>-&gt;<name>family</name></name> : <name>APR_UNSPEC</name></expr></argument>,
<argument><expr><name>connectport</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>cntxt</name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>120</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>"apr_sockaddr_info_get() for %s"</expr></argument>, <argument><expr><name>connecthost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_err</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>start</name> = <name>lasttime</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stoptime</name> = <name>tlimit</name> ? (<name>start</name> + <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>tlimit</name></expr></argument>)</argument_list></call>) : <name>AB_MAX</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>apr_signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>output_results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>concurrency</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>con</name><index>[<expr><name>i</name></expr>]</index></name>.<name>socknum</name> = <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>start_connect</name><argument_list>(<argument><expr>&amp;<name><name>con</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<do>do <block>{
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_pollfd_t</name> *</type><name>pollresults</name></decl>, *<decl><type ref="prev"/><name>pollfd</name></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> = <name>concurrency</name></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>status</name> = <call><name>apr_pollset_poll</name><argument_list>(<argument><expr><name>readbits</name></expr></argument>, <argument><expr><name>aprtimeout</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>, <argument><expr>&amp;<name>pollresults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr><call><name>APR_STATUS_IS_EINTR</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_err</name><argument_list>(<argument><expr>"apr_pollset_poll"</expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>pollfd</name> = <name>pollresults</name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>pollfd</name>++</expr></incr>) <block>{
<decl_stmt><decl><type>struct <name>connection</name> *</type><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> = <name><name>pollfd</name>-&gt;<name>client_data</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>state</name></name> == <name>STATE_UNCONNECTED</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>rtnev</name> = <name><name>pollfd</name>-&gt;<name>rtnevents</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>state</name></name> == <name>STATE_CONNECTED</name> &amp;&amp; <name><name>c</name>-&gt;<name>ssl</name></name> &amp;&amp; <call><name>SSL_in_init</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>ssl</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ssl_proceed_handshake</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>(<name>rtnev</name> &amp; <name>APR_POLLIN</name>) || (<name>rtnev</name> &amp; <name>APR_POLLPRI</name>) || (<name>rtnev</name> &amp; <name>APR_POLLHUP</name>)</expr>)</condition><then>
<expr_stmt><expr><call><name>read_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>rtnev</name> &amp; <name>APR_POLLERR</name>) || (<name>rtnev</name> &amp; <name>APR_POLLNVAL</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>bad</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>err_except</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>state</name></name> == <name>STATE_CONNECTING</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>read_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>start_connect</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name>rtnev</name> &amp; <name>APR_POLLOUT</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>state</name></name> == <name>STATE_CONNECTING</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_connect</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>aprsock</name></name></expr></argument>, <argument><expr><name>destsa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>set_conn_state</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>STATE_UNCONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>aprsock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err_conn</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>bad</name>++ &gt; 10</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>"\nTest aborted after 10 failures\n\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_err</name><argument_list>(<argument><expr>"apr_socket_connect()"</expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>start_connect</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>set_conn_state</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>STATE_CONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>ssl</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>ssl_proceed_handshake</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>write_request</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>write_request</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
}</block></for>
}</block> while <condition>(<expr><name>lasttime</name> &lt; <name>stoptime</name> &amp;&amp; <name>done</name> &lt; <name>requests</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name>heartbeatres</name></expr>)</condition><then>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Finished %d requests\n"</expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"..done\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>use_html</name></expr>)</condition><then>
<expr_stmt><expr><call><name>output_html_results</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>output_results</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>copyright</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name>use_html</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"This is ApacheBench, Version %s\n"</expr></argument>, <argument><expr><name>AP_AB_BASEREVISION</name> " &lt;$Revision: 1807734 $&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Licensed to The Apache Software Foundation, http://www.apache.org/\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;p&gt;\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" This is ApacheBench, Version %s &lt;i&gt;&amp;lt;%s&amp;gt;&lt;/i&gt;&lt;br&gt;\n"</expr></argument>, <argument><expr><name>AP_AB_BASEREVISION</name></expr></argument>, <argument><expr>"$Revision: 1807734 $"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/&lt;br&gt;\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" Licensed to The Apache Software Foundation, http://www.apache.org/&lt;br&gt;\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"&lt;/p&gt;\n&lt;p&gt;\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>progname</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Usage: %s [options] [http"
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
"[s]"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"://]hostname[:port]/path\n"</expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Options are:\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -n requests Number of requests to perform\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -c concurrency Number of multiple requests to make at a time\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -t timelimit Seconds to max. to spend on benchmarking\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" This implies -n 50000\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -s timeout Seconds to max. wait for each response\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" Default is 30 seconds\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -b windowsize Size of TCP send/receive buffer, in bytes\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -B address Address to bind to when making outgoing connections\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -p postfile File containing data to POST. Remember also to set -T\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -u putfile File containing data to PUT. Remember also to set -T\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -T content-type Content-type header to use for POST/PUT data, eg.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" 'application/x-www-form-urlencoded'\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" Default is 'text/plain'\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -v verbosity How much troubleshooting info to print\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -w Print out results in HTML tables\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -i Use HEAD instead of GET\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -x attributes String to insert as table attributes\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -y attributes String to insert as tr attributes\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -z attributes String to insert as td or th attributes\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -C attribute Add cookie, eg. 'Apache=1234'. (repeatable)\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -H attribute Add Arbitrary header line, eg. 'Accept-Encoding: gzip'\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" Inserted after all normal header lines. (repeatable)\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -A attribute Add Basic WWW Authentication, the attributes\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" are a colon separated username and password.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -P attribute Add Basic Proxy Authentication, the attributes\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" are a colon separated username and password.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -X proxy:port Proxyserver and port number to use\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -V Print version number and exit\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -k Use HTTP KeepAlive feature\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -d Do not show percentiles served table.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -S Do not show confidence estimators and warnings.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -q Do not show progress when doing more than 150 requests\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -l Accept variable document length (use this for dynamic pages)\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -g filename Output collected data to gnuplot format file.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -e filename Output CSV file with percentages served\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -r Don't exit on socket receive errors.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -m method Method name\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -h Display usage information (this message)\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SSL2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL2_HELP_MSG</name></cpp:macro> <cpp:value>"SSL2, "</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL2_HELP_MSG</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL3_HELP_MSG</name></cpp:macro> <cpp:value>"SSL3, "</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL3_HELP_MSG</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSV1_X</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS1_X_HELP_MSG</name></cpp:macro> <cpp:value>", TLS1.1, TLS1.2"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS1_X_HELP_MSG</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -I Disable TLS Server Name Indication (SNI) extension\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -Z ciphersuite Specify SSL/TLS cipher suite (See openssl ciphers)\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" -f protocol Specify SSL/TLS protocol\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>fprintf</name><argument_list>(<argument>stderr</argument>, <argument>" (" SSL2_HELP_MSG SSL3_HELP_MSG "TLS1" TLS1_X_HELP_MSG " or ALL)\n"</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_url</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>scope_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fullurl</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>cntxt</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call> &gt; 7 &amp;&amp; <call><name>strncmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"http://"</expr></argument>, <argument><expr>7</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>url</name> += 7</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>is_ssl</name> = 0</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then> <else>else
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call> &gt; 8 &amp;&amp; <call><name>strncmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"https://"</expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>url</name> += 8</expr>;</expr_stmt>
<expr_stmt><expr><name>is_ssl</name> = 1</expr>;</expr_stmt>
}</block></then></if></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call> &gt; 8 &amp;&amp; <call><name>strncmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"https://"</expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"SSL not compiled in; no https support\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>(<name>cp</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<expr_stmt><expr><name>h</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>cntxt</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>cp</name> - <name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_parse_addr_port</name><argument_list>(<argument><expr>&amp;<name>hostname</name></expr></argument>, <argument><expr>&amp;<name>scope_id</name></expr></argument>, <argument><expr>&amp;<name>port</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>cntxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> || !<name>hostname</name> || <name>scope_id</name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>cntxt</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>cp</name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>url</name> == '['</expr>)</condition><then> <block>{
<expr_stmt><expr><name>host_field</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>cntxt</name></expr></argument>, <argument><expr>"[%s]"</expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>host_field</name> = <name>hostname</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>port</name> == 0</expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>is_ssl</name></expr>)</condition><then>
<expr_stmt><expr><name>port</name> = 443</expr>;</expr_stmt></then>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>port</name> = 80</expr>;</expr_stmt></else></if>
}</block></then></if>
<if>if <condition>(<expr>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>is_ssl</name> &amp;&amp; (<name>port</name> != 443)) || (!<name>is_ssl</name> &amp;&amp;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
(<name>port</name> != 80))</expr>)</condition><then> <block>{
<expr_stmt><expr><name>colonhost</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>cntxt</name></expr></argument>,<argument><expr>":%d"</expr></argument>,<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>colonhost</name> = ""</expr>;</expr_stmt></else></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>open_postfile</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pfile</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>postfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errmsg</name><index>[<expr>120</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>postfd</name></expr></argument>, <argument><expr><name>pfile</name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>cntxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"ab: Could not open POST data file (%s): %s\n"</expr></argument>, <argument><expr><name>pfile</name></expr></argument>,
<argument><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>, <argument><expr>sizeof <name>errmsg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_info_get</name><argument_list>(<argument><expr>&amp;<name>finfo</name></expr></argument>, <argument><expr><name>APR_FINFO_NORM</name></expr></argument>, <argument><expr><name>postfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"ab: Could not stat POST data file (%s): %s\n"</expr></argument>, <argument><expr><name>pfile</name></expr></argument>,
<argument><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>, <argument><expr>sizeof <name>errmsg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>postlen</name> = (<name>apr_size_t</name>)<name><name>finfo</name>.<name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>postdata</name> = <call><name>xmalloc</name><argument_list>(<argument><expr><name>postlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_read_full</name><argument_list>(<argument><expr><name>postfd</name></expr></argument>, <argument><expr><name>postdata</name></expr></argument>, <argument><expr><name>postlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"ab: Could not read POST data file: %s\n"</expr></argument>,
<argument><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>, <argument><expr>sizeof <name>errmsg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>postfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr>1024</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_getopt_t</name> *</type><name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>opt_arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> &gt;= 0x10100000L</expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>max_prot</name> <init>= <expr><name>TLS1_2_VERSION</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>min_prot</name> <init>= <expr><name>SSL3_VERSION</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>min_prot</name> <init>= <expr><name>TLS1_VERSION</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>AB_SSL_METHOD_CONST</name> <name>SSL_METHOD</name> *</type><name>meth</name> <init>= <expr><call><name>SSLv23_client_method</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>tablestring</name> = ""</expr>;</expr_stmt>
<expr_stmt><expr><name>trstring</name> = ""</expr>;</expr_stmt>
<expr_stmt><expr><name>tdstring</name> = "bgcolor=white"</expr>;</expr_stmt>
<expr_stmt><expr><name>cookie</name> = ""</expr>;</expr_stmt>
<expr_stmt><expr><name>auth</name> = ""</expr>;</expr_stmt>
<expr_stmt><expr><name>proxyhost</name> = ""</expr>;</expr_stmt>
<expr_stmt><expr><name>hdrs</name> = ""</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_app_initialize</name><argument_list>(<argument><expr>&amp;<name>argc</name></expr></argument>, <argument><expr>&amp;<name>argv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>apr_terminate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>cntxt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_abort_set</name><argument_list>(<argument><expr><name>abort_on_oom</name></expr></argument>, <argument><expr><name>cntxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NOT_ASCII</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>status</name> = <call><name>apr_xlate_open</name><argument_list>(<argument><expr>&amp;<name>to_ascii</name></expr></argument>, <argument><expr>"ISO-8859-1"</expr></argument>, <argument><expr><name>APR_DEFAULT_CHARSET</name></expr></argument>, <argument><expr><name>cntxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"apr_xlate_open(to ASCII)-&gt;%d\n"</expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>apr_xlate_open</name><argument_list>(<argument><expr>&amp;<name>from_ascii</name></expr></argument>, <argument><expr><name>APR_DEFAULT_CHARSET</name></expr></argument>, <argument><expr>"ISO-8859-1"</expr></argument>, <argument><expr><name>cntxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"apr_xlate_open(from ASCII)-&gt;%d\n"</expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>apr_base64init_ebcdic</name><argument_list>(<argument><expr><name>to_ascii</name></expr></argument>, <argument><expr><name>from_ascii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"apr_base64init_ebcdic()-&gt;%d\n"</expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>myhost</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_getopt_init</name><argument_list>(<argument><expr>&amp;<name>opt</name></expr></argument>, <argument><expr><name>cntxt</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>status</name> = <call><name>apr_getopt</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr>"n:c:t:s:b:T:p:u:v:lrkVhwiIx:y:z:C:H:P:A:g:X:de:SqB:m:"
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
"Z:f:"</expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
,<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>&amp;<name>opt_arg</name></expr></argument>)</argument_list></call>) == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{
<case>case <expr>'n'</expr>:
<expr_stmt><expr><name>requests</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>requests</name> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr>"Invalid number of requests\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case><case>case <expr>'k'</expr>:
<expr_stmt><expr><name>keepalive</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'q'</expr>:
<expr_stmt><expr><name>heartbeatres</name> = 0</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'c'</expr>:
<expr_stmt><expr><name>concurrency</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'b'</expr>:
<expr_stmt><expr><name>windowsize</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'i'</expr>:
<if>if <condition>(<expr><name>method</name> != <name>NO_METH</name></expr>)</condition><then>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr>"Cannot mix HEAD with other methods\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>method</name> = <name>HEAD</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'g'</expr>:
<expr_stmt><expr><name>gnuplot</name> = <call><name>xstrdup</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'d'</expr>:
<expr_stmt><expr><name>percentile</name> = 0</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'e'</expr>:
<expr_stmt><expr><name>csvperc</name> = <call><name>xstrdup</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'S'</expr>:
<expr_stmt><expr><name>confidence</name> = 0</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'s'</expr>:
<expr_stmt><expr><name>aprtimeout</name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'p'</expr>:
<if>if <condition>(<expr><name>method</name> != <name>NO_METH</name></expr>)</condition><then>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr>"Cannot mix POST with other methods\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>open_postfile</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>method</name> = <name>POST</name></expr>;</expr_stmt>
<expr_stmt><expr><name>send_body</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'u'</expr>:
<if>if <condition>(<expr><name>method</name> != <name>NO_METH</name></expr>)</condition><then>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr>"Cannot mix PUT with other methods\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>open_postfile</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>method</name> = <name>PUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>send_body</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'l'</expr>:
<expr_stmt><expr><name>nolength</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'r'</expr>:
<expr_stmt><expr><name>recverrok</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'v'</expr>:
<expr_stmt><expr><name>verbosity</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'t'</expr>:
<expr_stmt><expr><name>tlimit</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>requests</name> = <name>MAX_REQUESTS</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'T'</expr>:
<expr_stmt><expr><name>content_type</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>cntxt</name></expr></argument>, <argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'C'</expr>:
<expr_stmt><expr><name>cookie</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>cntxt</name></expr></argument>, <argument><expr>"Cookie: "</expr></argument>, <argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'A'</expr>:
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>opt_arg</name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr><name>opt_arg</name>++</expr>;</expr_stmt></while>
<if>if <condition>(<expr><call><name>apr_base64_encode_len</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &gt; <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr>"Authentication credentials too long\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>l</name> = <call><name>apr_base64_encode</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>opt_arg</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>l</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>auth</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>cntxt</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>, <argument><expr>"Authorization: Basic "</expr></argument>, <argument><expr><name>tmp</name></expr></argument>,
<argument><expr>"\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'P'</expr>:
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>opt_arg</name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr><name>opt_arg</name>++</expr>;</expr_stmt></while>
<if>if <condition>(<expr><call><name>apr_base64_encode_len</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &gt; <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr>"Proxy credentials too long\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>l</name> = <call><name>apr_base64_encode</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>opt_arg</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>l</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>auth</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>cntxt</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>, <argument><expr>"Proxy-Authorization: Basic "</expr></argument>,
<argument><expr><name>tmp</name></expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'H'</expr>:
<expr_stmt><expr><name>hdrs</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>cntxt</name></expr></argument>, <argument><expr><name>hdrs</name></expr></argument>, <argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>"Host:"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>opt_arg</name> += 5</expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>opt_arg</name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr><name>opt_arg</name>++</expr>;</expr_stmt></while>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>host</name> = <call><name>strdup</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> &amp;&amp; <call><name>apr_isspace</name><argument_list>(<argument><expr><name><name>host</name><index>[<expr><name>len</name>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr><name><name>host</name><index>[<expr>--<name>len</name></expr>]</index></name> = '\0'</expr>;</expr_stmt></while>
<expr_stmt><expr><name>opt_host</name> = <name>host</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>"Accept:"</expr></argument>, <argument><expr>7</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt_accept</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>"User-Agent:"</expr></argument>, <argument><expr>11</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt_useragent</name> = 1</expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
<break>break;</break>
</case><case>case <expr>'w'</expr>:
<expr_stmt><expr><name>use_html</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'x'</expr>:
<expr_stmt><expr><name>use_html</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>tablestring</name> = <name>opt_arg</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'X'</expr>: <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>p</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>p</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>proxyport</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>proxyhost</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>cntxt</name></expr></argument>, <argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>isproxy</name> = 1</expr>;</expr_stmt>
}</block>
<break>break;</break>
</case><case>case <expr>'y'</expr>:
<expr_stmt><expr><name>use_html</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>trstring</name> = <name>opt_arg</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'z'</expr>:
<expr_stmt><expr><name>use_html</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>tdstring</name> = <name>opt_arg</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'h'</expr>:
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'V'</expr>:
<expr_stmt><expr><call><name>copyright</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
</case><case>case <expr>'B'</expr>:
<expr_stmt><expr><name>myhost</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>cntxt</name></expr></argument>, <argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'m'</expr>:
<expr_stmt><expr><name>method</name> = <name>CUSTOM_METHOD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>method_str</name><index>[<expr><name>CUSTOM_METHOD</name></expr>]</index></name> = <call><name>strdup</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
</case><case>case <expr>'Z'</expr>:
<expr_stmt><expr><name>ssl_cipher</name> = <call><name>strdup</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'f'</expr>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> &lt; 0x10100000L</expr></cpp:if>
<if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>"ALL"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>meth</name> = <call><name>SSLv23_client_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SSL2</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>"SSL2"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>meth</name> = <call><name>SSLv2_client_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tls_use_sni</name> = 0</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>"SSL3"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>meth</name> = <call><name>SSLv3_client_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tls_use_sni</name> = 0</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSV1_X</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>"TLS1.1"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>meth</name> = <call><name>TLSv1_1_client_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>"TLS1.2"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>meth</name> = <call><name>TLSv1_2_client_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>"TLS1"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>meth</name> = <call><name>TLSv1_client_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if></else></if></else></if></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>meth</name> = <call><name>TLS_client_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>"ALL"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>max_prot</name> = <name>TLS1_2_VERSION</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>min_prot</name> = <name>SSL3_VERSION</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>min_prot</name> = <name>TLS1_VERSION</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>"SSL3"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>max_prot</name> = <name>SSL3_VERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name>min_prot</name> = <name>SSL3_VERSION</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>"TLS1.1"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>max_prot</name> = <name>TLS1_1_VERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name>min_prot</name> = <name>TLS1_1_VERSION</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>"TLS1.2"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>max_prot</name> = <name>TLS1_2_VERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name>min_prot</name> = <name>TLS1_2_VERSION</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>"TLS1"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>max_prot</name> = <name>TLS1_VERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name>min_prot</name> = <name>TLS1_VERSION</name></expr>;</expr_stmt>
}</block></then></if></else></if></else></if></else></if></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
</case><case>case <expr>'I'</expr>:
<expr_stmt><expr><name>tls_use_sni</name> = 0</expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case>}</block></switch>
}</block></while>
<if>if <condition>(<expr><name><name>opt</name>-&gt;<name>ind</name></name> != <name>argc</name> - 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: wrong number of arguments\n"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>method</name> == <name>NO_METH</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>method</name> = <name>GET</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>parse_url</name><argument_list>(<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>cntxt</name></expr></argument>, <argument><expr><name><name>opt</name>-&gt;<name>argv</name><index>[<expr><name><name>opt</name>-&gt;<name>ind</name></name>++</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: invalid URL\n"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>concurrency</name> &lt; 0) || (<name>concurrency</name> &gt; <name>MAX_CONCURRENCY</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: Invalid Concurrency [Range 0..%d]\n"</expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>MAX_CONCURRENCY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>concurrency</name> &gt; <name>requests</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: Cannot use concurrency level greater than "
"total number of requests\n"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>heartbeatres</name>) &amp;&amp; (<name>requests</name> &gt; 150)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>heartbeatres</name> = <name>requests</name> / 10</expr>;</expr_stmt>
<if>if <condition>(<expr><name>heartbeatres</name> &lt; 100</expr>)</condition><then>
<expr_stmt><expr><name>heartbeatres</name> = 100</expr>;</expr_stmt></then></if>
}</block></then> <else>else
<expr_stmt><expr><name>heartbeatres</name> = 0</expr>;</expr_stmt></else></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RSAREF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>R_malloc_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> &lt; 0x10100000L</expr></cpp:if>
<expr_stmt><expr><call><name>CRYPTO_malloc_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SSL_load_error_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_library_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bio_out</name>=<call><name>BIO_new_fp</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>,<argument><expr><name>BIO_NOCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bio_err</name>=<call><name>BIO_new_fp</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><name>BIO_NOCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name>ssl_ctx</name> = <call><name>SSL_CTX_new</name><argument_list>(<argument><expr><name>meth</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio_err</name></expr></argument>, <argument><expr>"Could not initialize SSL Context.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERR_print_errors</name><argument_list>(<argument><expr><name>bio_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ssl_ctx</name></expr></argument>, <argument><expr><name>SSL_OP_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> &gt;= 0x10100000L</expr></cpp:if>
<expr_stmt><expr><call><name>SSL_CTX_set_max_proto_version</name><argument_list>(<argument><expr><name>ssl_ctx</name></expr></argument>, <argument><expr><name>max_prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CTX_set_min_proto_version</name><argument_list>(<argument><expr><name>ssl_ctx</name></expr></argument>, <argument><expr><name>min_prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_MODE_RELEASE_BUFFERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SSL_CTX_set_mode</name> <argument_list>(<argument><expr><name>ssl_ctx</name></expr></argument>, <argument><expr><name>SSL_MODE_RELEASE_BUFFERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>ssl_cipher</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>SSL_CTX_set_cipher_list</name><argument_list>(<argument><expr><name>ssl_ctx</name></expr></argument>, <argument><expr><name>ssl_cipher</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"error setting cipher list [%s]\n"</expr></argument>, <argument><expr><name>ssl_cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERR_print_errors_fp</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>verbosity</name> &gt;= 3</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SSL_CTX_set_info_callback</name><argument_list>(<argument><expr><name>ssl_ctx</name></expr></argument>, <argument><expr><name>ssl_state_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>apr_signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>copyright</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>cntxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
</unit>
