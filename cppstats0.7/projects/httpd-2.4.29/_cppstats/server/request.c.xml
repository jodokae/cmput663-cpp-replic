<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="server/request.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_fnmatch.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_charset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_auth.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDARG_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APLOG_MODULE_INDEX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_MODULE_INDEX</name></cpp:macro> <cpp:value>AP_CORE_MODULE_INDEX</cpp:value></cpp:define>
<macro><name>APR_HOOK_STRUCT</name><argument_list>(
<argument>APR_HOOK_LINK(translate_name)
APR_HOOK_LINK(map_to_storage)
APR_HOOK_LINK(check_user_id)
APR_HOOK_LINK(fixups)
APR_HOOK_LINK(type_checker)
APR_HOOK_LINK(access_checker)
APR_HOOK_LINK(access_checker_ex)
APR_HOOK_LINK(auth_checker)
APR_HOOK_LINK(insert_filter)
APR_HOOK_LINK(create_request)
APR_HOOK_LINK(post_perdir_config)
APR_HOOK_LINK(dirwalk_stat)
APR_HOOK_LINK(force_authn)</argument>
)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_FIRST</name><argument_list>(<argument>int</argument>,<argument>translate_name</argument>,
<argument>(request_rec *r)</argument>, <argument>(r)</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_FIRST</name><argument_list>(<argument>int</argument>,<argument>map_to_storage</argument>,
<argument>(request_rec *r)</argument>, <argument>(r)</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_FIRST</name><argument_list>(<argument>int</argument>,<argument>check_user_id</argument>,
<argument>(request_rec *r)</argument>, <argument>(r)</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_ALL</name><argument_list>(<argument>int</argument>,<argument>fixups</argument>,
<argument>(request_rec *r)</argument>, <argument>(r)</argument>, <argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_FIRST</name><argument_list>(<argument>int</argument>,<argument>type_checker</argument>,
<argument>(request_rec *r)</argument>, <argument>(r)</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_ALL</name><argument_list>(<argument>int</argument>,<argument>access_checker</argument>,
<argument>(request_rec *r)</argument>, <argument>(r)</argument>, <argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_FIRST</name><argument_list>(<argument>int</argument>,<argument>access_checker_ex</argument>,
<argument>(request_rec *r)</argument>, <argument>(r)</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_FIRST</name><argument_list>(<argument>int</argument>,<argument>auth_checker</argument>,
<argument>(request_rec *r)</argument>, <argument>(r)</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_VOID</name><argument_list>(<argument>insert_filter</argument>, <argument>(request_rec *r)</argument>, <argument>(r)</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_ALL</name><argument_list>(<argument>int</argument>, <argument>create_request</argument>,
<argument>(request_rec *r)</argument>, <argument>(r)</argument>, <argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_ALL</name><argument_list>(<argument>int</argument>, <argument>post_perdir_config</argument>,
<argument>(request_rec *r)</argument>, <argument>(r)</argument>, <argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_FIRST</name><argument_list>(<argument>apr_status_t</argument>,<argument>dirwalk_stat</argument>,
<argument>(apr_finfo_t *finfo, request_rec *r, apr_int32_t wanted)</argument>,
<argument>(finfo, r, wanted)</argument>, <argument>AP_DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_FIRST</name><argument_list>(<argument>int</argument>,<argument>force_authn</argument>,
<argument>(request_rec *r)</argument>, <argument>(r)</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>auth_internal_per_conf</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>auth_internal_per_conf_hooks</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>auth_internal_per_conf_providers</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>decl_die</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>phase</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>status</name> == <name>DECLINED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00025</expr></argument>)</argument_list></call>
"configuration error: couldn't %s: %s"</expr></argument>, <argument><expr><name>phase</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"auth phase '%s' gave status %d: %s"</expr></argument>, <argument><expr><name>phase</name></expr></argument>,
<argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
}</block></else></if>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_some_authn_required</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>access_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>olduser</name> <init>= <expr><name><name>r</name>-&gt;<name>user</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>ap_satisfies</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr><name>SATISFY_ALL</name></expr>:
</case><case>case <expr><name>SATISFY_NOSPEC</name></expr>:
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>ap_run_access_checker</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>access_status</name> = <call><name>ap_run_access_checker_ex</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>access_status</name> == <name>DECLINED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>SATISFY_ANY</name></expr>:
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>ap_run_access_checker</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) == <name>OK</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>access_status</name> = <call><name>ap_run_access_checker_ex</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>access_status</name> == <name>DECLINED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case>}</block></switch>
<expr_stmt><expr><name><name>r</name>-&gt;<name>user</name></name> = <name>olduser</name></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_process_request_internal</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>file_req</name> <init>= <expr>(<name><name>r</name>-&gt;<name/></name>main &amp;&amp; <name><name>r</name>-&gt;<name>filename</name></name>)</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>access_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>proxyreq</name></name> &amp;&amp; <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>path</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>d</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>allow_encoded_slashes</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>access_status</name> = <call><name>ap_unescape_url_keep2f</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>path</name></name></expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>decode_encoded_slashes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>access_status</name> = <call><name>ap_unescape_url</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>access_status</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>access_status</name> == <name>HTTP_NOT_FOUND</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <name><name>d</name>-&gt;<name>allow_encoded_slashes</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00026</expr></argument>)</argument_list></call>
"found %%2f (encoded '/') in URI "
"(decoded='%s'), returning 404"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>access_status</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_getparents</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>file_req</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>ap_location_walk</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>access_status</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>ap_if_walk</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>access_status</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>d</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>log</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>log</name></name> = <name><name>d</name>-&gt;<name>log</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>ap_run_translate_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><call><name>decl_die</name><argument_list>(<argument><expr><name>access_status</name></expr></argument>, <argument><expr>"translate"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> = <name><name>r</name>-&gt;<name>server</name>-&gt;<name>lookup_defaults</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>ap_run_map_to_storage</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>access_status</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>ap_location_walk</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>access_status</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>ap_if_walk</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>access_status</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>d</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>log</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>log</name></name> = <name><name>d</name>-&gt;<name>log</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>ap_run_post_perdir_config</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>access_status</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>ap_run_header_parser</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>access_status</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>prev</name></name> &amp;&amp; (<name><name>r</name>-&gt;<name>prev</name>-&gt;<name>per_dir_config</name></name> == <name><name>r</name>-&gt;<name>per_dir_config</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>user</name></name> = <name><name>r</name>-&gt;<name>prev</name>-&gt;<name>user</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>ap_auth_type</name></name> = <name><name>r</name>-&gt;<name>prev</name>-&gt;<name>ap_auth_type</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main &amp;&amp; (<name><name>r</name>-&gt;<name/></name>main-&gt;<name>per_dir_config</name> == <name><name>r</name>-&gt;<name>per_dir_config</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>user</name></name> = <name><name>r</name>-&gt;<name/></name>main-&gt;<name>user</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>ap_auth_type</name></name> = <name><name>r</name>-&gt;<name/></name>main-&gt;<name>ap_auth_type</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>user</name></name> &amp;&amp; <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>AP_GET_BASIC_AUTH_PW_NOTE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>user</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<switch>switch <condition>(<expr><call><name>ap_satisfies</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr><name>SATISFY_ALL</name></expr>:
</case><case>case <expr><name>SATISFY_NOSPEC</name></expr>:
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>ap_run_access_checker</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>decl_die</name><argument_list>(<argument><expr><name>access_status</name></expr></argument>,
<argument><expr>"check access (with Satisfy All)"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>access_status</name> = <call><name>ap_run_access_checker_ex</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>access_status</name> == <name>DECLINED</name>
|| (<name>access_status</name> == <name>OK</name> &amp;&amp; <call><name>ap_run_force_authn</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> == <name>OK</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>ap_run_check_user_id</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>decl_die</name><argument_list>(<argument><expr><name>access_status</name></expr></argument>, <argument><expr>"check user"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>user</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00027</expr></argument>)</argument_list></call>
"No authentication done but request not "
"allowed without authentication for %s. "
"Authentication not configured?"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>access_status</name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
<return>return <expr><call><name>decl_die</name><argument_list>(<argument><expr><name>access_status</name></expr></argument>, <argument><expr>"check user"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>ap_run_auth_checker</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>decl_die</name><argument_list>(<argument><expr><name>access_status</name></expr></argument>, <argument><expr>"check authorization"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>access_status</name> == <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"request authorized without authentication by "
"access_checker_ex hook: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>decl_die</name><argument_list>(<argument><expr><name>access_status</name></expr></argument>, <argument><expr>"check access"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if>
<break>break;</break>
</case><case>case <expr><name>SATISFY_ANY</name></expr>:
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>ap_run_access_checker</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) == <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"request authorized without authentication by "
"access_checker hook and 'Satisfy any': %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>access_status</name> = <call><name>ap_run_access_checker_ex</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>access_status</name> == <name>DECLINED</name>
|| (<name>access_status</name> == <name>OK</name> &amp;&amp; <call><name>ap_run_force_authn</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> == <name>OK</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>ap_run_check_user_id</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>decl_die</name><argument_list>(<argument><expr><name>access_status</name></expr></argument>, <argument><expr>"check user"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>user</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00028</expr></argument>)</argument_list></call>
"No authentication done but request not "
"allowed without authentication for %s. "
"Authentication not configured?"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>access_status</name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
<return>return <expr><call><name>decl_die</name><argument_list>(<argument><expr><name>access_status</name></expr></argument>, <argument><expr>"check user"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>ap_run_auth_checker</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>decl_die</name><argument_list>(<argument><expr><name>access_status</name></expr></argument>, <argument><expr>"check authorization"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>access_status</name> == <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"request authorized without authentication by "
"access_checker_ex hook: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>decl_die</name><argument_list>(<argument><expr><name>access_status</name></expr></argument>, <argument><expr>"check access"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if>
<break>break;</break>
</case>}</block></switch>
}</block></else></if></else></if>
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>ap_run_type_checker</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>decl_die</name><argument_list>(<argument><expr><name>access_status</name></expr></argument>, <argument><expr>"find types"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>ap_run_fixups</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"fixups hook gave %d: %s"</expr></argument>,
<argument><expr><name>access_status</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>access_status</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
<typedef>typedef <type><struct>struct <name>walk_walked_t</name> <block>{
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>matched</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>merged</name></decl>;</decl_stmt>
}</block></struct></type> <name>walk_walked_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>walk_cache_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cached</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> **</type><name>dir_conf_tested</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>dir_conf_merged</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>per_dir_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>walked</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>walk_cache_t</name> *</type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
}</block></struct></type> <name>walk_cache_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>walk_cache_t</name> *</type><name>prep_walk_cache</name><parameter_list>(<param><decl><type><name>apr_size_t</name></type> <name>t</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> **</type><name>note</name></decl>, **<decl><type ref="prev"/><name>inherit_note</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>walk_cache_t</name> *</type><name>cache</name></decl>, *<decl><type ref="prev"/><name>prev_cache</name></decl>, *<decl><type ref="prev"/><name>copy_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<expr_stmt><expr><name>note</name> = <call><name>ap_get_request_note</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name>note</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>copy_cache</name> = <name>prev_cache</name> = *<name>note</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> = <name>prev_cache</name> ? (<name><name>prev_cache</name>-&gt;<name>count</name></name> + 1) : 0</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>prev</name></name>
&amp;&amp; (<name>inherit_note</name> = <call><name>ap_get_request_note</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>prev</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call>)
&amp;&amp; *<name>inherit_note</name>)
|| (<name><name>r</name>-&gt;<name/></name>main
&amp;&amp; (<name>inherit_note</name> = <call><name>ap_get_request_note</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name/></name>main</expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call>)
&amp;&amp; *<name>inherit_note</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>walk_cache_t</name> *</type><name>inherit_cache</name> <init>= <expr>*<name>inherit_note</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>inherit_cache</name>-&gt;<name>count</name></name> &gt; <name>count</name></expr>)</condition> <block>{
<expr_stmt><expr><name>inherit_cache</name> = <name><name>inherit_cache</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name><name>inherit_cache</name>-&gt;<name>count</name></name> == <name>count</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>copy_cache</name> = <name>inherit_cache</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>copy_cache</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cache</name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>copy_cache</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>cache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>walked</name></name> = <call><name>apr_array_copy</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cache</name>-&gt;<name>walked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>prev</name></name> = <name>prev_cache</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>count</name></name> = <name>count</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>cache</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>cache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>walked</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>walk_walked_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr>*<name>note</name> = <name>cache</name></expr>;</expr_stmt>
<return>return <expr><name>cache</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>resolve_symlink</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>d</name></decl></param>, <param><decl><type><name>apr_finfo_t</name> *</type><name>lfi</name></decl></param>, <param><decl><type><name>int</name></type> <name>opts</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>fi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>savename</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!(<name>opts</name> &amp; (<name>OPT_SYM_OWNER</name> | <name>OPT_SYM_LINKS</name>))</expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>savename</name> = (<name><name>lfi</name>-&gt;<name>valid</name></name> &amp; <name>APR_FINFO_NAME</name>) ? <name><name>lfi</name>-&gt;<name>name</name></name> : <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name>opts</name> &amp; <name>OPT_SYM_OWNER</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>fi</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>lfi</name>-&gt;<name>valid</name></name> &amp; ~(<name>APR_FINFO_NAME</name> | <name>APR_FINFO_LINK</name>)</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lfi</name></expr></argument>, <argument><expr>&amp;<name>fi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>savename</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>lfi</name>-&gt;<name>name</name></name> = <name>savename</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lfi</name>-&gt;<name>valid</name></name> |= <name>APR_FINFO_NAME</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!(<name><name>lfi</name>-&gt;<name>valid</name></name> &amp; <name>APR_FINFO_OWNER</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_stat</name><argument_list>(<argument><expr><name>lfi</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>lfi</name>-&gt;<name>valid</name></name> | <name>APR_FINFO_LINK</name> | <name>APR_FINFO_OWNER</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>fi</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>lfi</name>-&gt;<name>valid</name></name> &amp; ~(<name>APR_FINFO_NAME</name>)</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_uid_compare</name><argument_list>(<argument><expr><name><name>fi</name>.<name>user</name></name></expr></argument>, <argument><expr><name><name>lfi</name>-&gt;<name>user</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lfi</name></expr></argument>, <argument><expr>&amp;<name>fi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>savename</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>lfi</name>-&gt;<name>name</name></name> = <name>savename</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lfi</name>-&gt;<name>valid</name></name> |= <name>APR_FINFO_NAME</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <name>core_opts_t</name> <block>{
<decl_stmt><decl><type><name>allow_options_t</name></type> <name>opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>allow_options_t</name></type> <name>add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>allow_options_t</name></type> <name>remove</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>overrides_t</name></type> <name>override</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>overrides_t</name></type> <name>override_opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>override_list</name></decl>;</decl_stmt>
}</block></struct></type> <name>core_opts_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>core_opts_merge</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_conf_vector_t</name> *</type><name>sec</name></decl></param>, <param><decl><type><name>core_opts_t</name> *</type><name>opts</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>this_dir</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>this_dir</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>this_dir</name>-&gt;<name>opts</name></name> &amp; <name>OPT_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>opts</name>-&gt;<name>add</name></name> = (<name><name>opts</name>-&gt;<name>add</name></name> &amp; ~<name><name>this_dir</name>-&gt;<name>opts_remove</name></name>)
| <name><name>this_dir</name>-&gt;<name>opts_add</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name>-&gt;<name>remove</name></name> = (<name><name>opts</name>-&gt;<name>remove</name></name> &amp; ~<name><name>this_dir</name>-&gt;<name>opts_add</name></name>)
| <name><name>this_dir</name>-&gt;<name>opts_remove</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name>-&gt;<name>opts</name></name> = (<name><name>opts</name>-&gt;<name>opts</name></name> &amp; ~<name><name>opts</name>-&gt;<name>remove</name></name>) | <name><name>opts</name>-&gt;<name>add</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>opts</name>-&gt;<name>opts</name></name> = <name><name>this_dir</name>-&gt;<name>opts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name>-&gt;<name>add</name></name> = <name><name>this_dir</name>-&gt;<name>opts_add</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name>-&gt;<name>remove</name></name> = <name><name>this_dir</name>-&gt;<name>opts_remove</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>!(<name><name>this_dir</name>-&gt;<name>override</name></name> &amp; <name>OR_UNSET</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>opts</name>-&gt;<name>override</name></name> = <name><name>this_dir</name>-&gt;<name>override</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name>-&gt;<name>override_opts</name></name> = <name><name>this_dir</name>-&gt;<name>override_opts</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>this_dir</name>-&gt;<name>override_list</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>opts</name>-&gt;<name>override_list</name></name> = <name><name>this_dir</name>-&gt;<name>override_list</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_directory_walk</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>now_merged</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>sconf</name> <init>=
<expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> **</type><name>sec_ent</name> <init>= <expr>(<name>ap_conf_vector_t</name> **) <name><name>sconf</name>-&gt;<name>sec_dir</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_sec</name> <init>= <expr><name><name>sconf</name>-&gt;<name>sec_dir</name>-&gt;<name>nelts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>walk_cache_t</name> *</type><name>cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>entry_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cached</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>filename</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00029</expr></argument>)</argument_list></call>
"Module bug? Request filename is missing for URI %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_filepath_merge</name><argument_list>(<argument><expr>&amp;<name>entry_dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>,
<argument><expr><name>APR_FILEPATH_NOTRELATIVE</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00030</expr></argument>)</argument_list></call>
"Module bug? Request filename path %s is invalid or "
"or not absolute for uri %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <name>entry_dir</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cache</name> = <call><name>prep_walk_cache</name><argument_list>(<argument><expr><name>AP_NOTE_DIRECTORY_WALK</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cached</name> = (<name><name>cache</name>-&gt;<name>cached</name></name> != <name>NULL</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_NOFILE</name> || <name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_LNK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>ap_run_dirwalk_stat</name><argument_list>(<argument><expr>&amp;<name><name>r</name>-&gt;<name>finfo</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>APR_FINFO_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> != <name>APR_SUCCESS</name>) ||
(<name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> != <name>APR_NOFILE</name> &amp;&amp;
(<name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> != <name>APR_DIR</name>) &amp;&amp;
(<name><name>r</name>-&gt;<name>filename</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> == '/'))</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> = <name>APR_NOFILE</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_REG</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>entry_dir</name> = <call><name>ap_make_dirstr_parent</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>entry_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>r</name>-&gt;<name>filename</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> != '/'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>entry_dir</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>cached</name>
&amp;&amp; ((<name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_REG</name>)
|| ((<name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_DIR</name>)
&amp;&amp; (!<name><name>r</name>-&gt;<name>path_info</name></name> || !*<name><name>r</name>-&gt;<name>path_info</name></name>)))
&amp;&amp; (<name><name>cache</name>-&gt;<name>dir_conf_tested</name></name> == <name>sec_ent</name>)
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>entry_dir</name></expr></argument>, <argument><expr><name><name>cache</name>-&gt;<name>cached</name></name></expr></argument>)</argument_list></call> == 0)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>familiar</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> == <name><name>cache</name>-&gt;<name>per_dir_result</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>familiar</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> == <name><name>cache</name>-&gt;<name>dir_conf_merged</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> = <name><name>cache</name>-&gt;<name>per_dir_result</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>familiar</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>familiar</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>thisinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>allow_options_t</name></type> <name>opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>this_dir</name></decl>;</decl_stmt>
<expr_stmt><expr><name>this_dir</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>opts</name> = <name><name>this_dir</name>-&gt;<name>opts</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name>opts</name> &amp; <name>OPT_SYM_LINKS</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>ap_run_dirwalk_stat</name><argument_list>(<argument><expr>&amp;<name>thisinfo</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><name>APR_FINFO_MIN</name> | <name>APR_FINFO_NAME</name> | <name>APR_FINFO_LINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> != <name>APR_INCOMPLETE</name>) &amp;&amp; (<name>rv</name> != <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00031</expr></argument>)</argument_list></call>
"access to %s failed; stat of '%s' failed."</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>thisinfo</name>.<name>filetype</name></name> == <name>APR_LNK</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>res</name> = <call><name>resolve_symlink</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>&amp;<name>thisinfo</name></expr></argument>,
<argument><expr><name>opts</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00032</expr></argument>)</argument_list></call>
"Symbolic link not allowed "
"or link target not accessible: %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>r</name>-&gt;<name>status</name></name> = <name>res</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>now_merged</name> = ((<name>walk_walked_t</name>*)<name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>elts</name></name>)
<index>[<expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name> - 1</expr>]</index>.<name>merged</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>sec_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>matches</name> <init>= <expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cached_matches</name> <init>= <expr><name>matches</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>walk_walked_t</name> *</type><name>last_walk</name> <init>= <expr>(<name>walk_walked_t</name>*)<name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>this_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_opts_t</name></type> <name>opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>thisinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>save_path_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>buflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seg</name></decl>, <decl><type ref="prev"/><name>startseg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>rxpool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>filename_len</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CASE_BLIND_FILESYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>canonical_len</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>cached</name> &amp;= <name>auth_internal_per_conf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>this_dir</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name>.<name>opts</name></name> = <name><name>this_dir</name>-&gt;<name>opts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name>.<name>add</name></name> = <name><name>this_dir</name>-&gt;<name>opts_add</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name>.<name>remove</name></name> = <name><name>this_dir</name>-&gt;<name>opts_remove</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name>.<name>override</name></name> = <name><name>this_dir</name>-&gt;<name>override</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name>.<name>override_opts</name></name> = <name><name>this_dir</name>-&gt;<name>override_opts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name>.<name>override_list</name></name> = <name><name>this_dir</name>-&gt;<name>override_list</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_DIR</name>) &amp;&amp; <name><name>r</name>-&gt;<name>path_info</name></name> &amp;&amp; *<name><name>r</name>-&gt;<name>path_info</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_filepath_merge</name><argument_list>(<argument><expr>&amp;<name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>,
<argument><expr><name>APR_FILEPATH_NOTABOVEROOT</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00033</expr></argument>)</argument_list></call>
"dir_walk error, path_info %s is not relative "
"to the filename path %s for uri %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>save_path_info</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>save_path_info</name> = <name><name>r</name>-&gt;<name>path_info</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>path_info</name></name> = <name><name>r</name>-&gt;<name>filename</name></name></expr>;</expr_stmt>
}</block></else></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CASE_BLIND_FILESYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>canonical_len</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>r</name>-&gt;<name>canonical_filename</name></name> &amp;&amp; <name><name>r</name>-&gt;<name>canonical_filename</name><index>[<expr><name>canonical_len</name></expr>]</index></name>
&amp;&amp; (<name><name>r</name>-&gt;<name>canonical_filename</name><index>[<expr><name>canonical_len</name></expr>]</index></name>
== <name><name>r</name>-&gt;<name>path_info</name><index>[<expr><name>canonical_len</name></expr>]</index></name>)</expr>)</condition> <block>{
<expr_stmt><expr>++<name>canonical_len</name></expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr><name>canonical_len</name>
&amp;&amp; ((<name><name>r</name>-&gt;<name>canonical_filename</name><index>[<expr><name>canonical_len</name> - 1</expr>]</index></name> != '/'
&amp;&amp; <name><name>r</name>-&gt;<name>canonical_filename</name><index>[<expr><name>canonical_len</name> - 1</expr>]</index></name>)
|| (<name><name>r</name>-&gt;<name>path_info</name><index>[<expr><name>canonical_len</name> - 1</expr>]</index></name> != '/'
&amp;&amp; <name><name>r</name>-&gt;<name>path_info</name><index>[<expr><name>canonical_len</name> - 1</expr>]</index></name>))</expr>)</condition> <block>{
<expr_stmt><expr>--<name>canonical_len</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>rv</name> = <call><name>apr_filepath_root</name><argument_list>(<argument><expr>(const <name>char</name> **)&amp;<name><name>r</name>-&gt;<name>filename</name></name></expr></argument>,
<argument><expr>(const <name>char</name> **)&amp;<name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>,
<argument><expr><name>canonical_len</name> ? 0 : <name>APR_FILEPATH_TRUENAME</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filename_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> == <name>APR_SUCCESS</name>) &amp;&amp; <name>canonical_len</name>
&amp;&amp; (<name>filename_len</name> &gt; <name>canonical_len</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_filepath_root</name><argument_list>(<argument><expr>(const <name>char</name> **)&amp;<name><name>r</name>-&gt;<name>filename</name></name></expr></argument>,
<argument><expr>(const <name>char</name> **)&amp;<name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>,
<argument><expr><name>APR_FILEPATH_TRUENAME</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filename_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>canonical_len</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>rv</name> = <call><name>apr_filepath_root</name><argument_list>(<argument><expr>(const <name>char</name> **)&amp;<name><name>r</name>-&gt;<name>filename</name></name></expr></argument>,
<argument><expr>(const <name>char</name> **)&amp;<name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filename_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00034</expr></argument>)</argument_list></call>
"dir_walk error, could not determine the root "
"path of filename %s%s for uri %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>buflen</name> = <name>filename_len</name> + <call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>)</argument_list></call> + 2</expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>filename_len</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thisinfo</name>.<name>valid</name></name> = <name>APR_FINFO_TYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thisinfo</name>.<name>filetype</name></name> = <name>APR_DIR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>startseg</name> = <name>seg</name> = <call><name>ap_count_dirs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sec_idx</name> = 0</expr>;</expr_stmt>
<do>do <block>{
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>seg_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>delim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp_slash</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>seg</name> &gt; <name>startseg</name>) &amp;&amp; <name><name>r</name>-&gt;<name>filename</name><index>[<expr><name>filename_len</name>-1</expr>]</index></name> != '/'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name><index>[<expr><name>filename_len</name>++</expr>]</index></name> = '/'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name><index>[<expr><name>filename_len</name></expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>temp_slash</name>=1</expr>;</expr_stmt>
}</block></then></if>
<for>for (<init>;</init> <condition><expr><name>sec_idx</name> &lt; <name>num_sec</name></expr>;</condition> <incr><expr>++<name>sec_idx</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>entry_config</name> <init>= <expr><name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>entry_core</name></decl>;</decl_stmt>
<expr_stmt><expr><name>entry_core</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name>entry_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry_core</name>-&gt;<name>r</name></name> || <name><name>entry_core</name>-&gt;<name>d_components</name></name> &gt; <name>seg</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name><name>entry_core</name>-&gt;<name>d_components</name></name>
&amp;&amp; ((<name><name>entry_core</name>-&gt;<name>d_components</name></name> &lt; <name>seg</name>)
|| (<name><name>entry_core</name>-&gt;<name>d_is_fnmatch</name></name>
? (<call><name>apr_fnmatch</name><argument_list>(<argument><expr><name><name>entry_core</name>-&gt;<name>d</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>,
<argument><expr><name>APR_FNM_PATHNAME</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name>)
: (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>entry_core</name>-&gt;<name>d</name></name></expr></argument>)</argument_list></call> != 0)))</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>core_opts_merge</name><argument_list>(<argument><expr><name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>matches</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>last_walk</name>-&gt;<name>matched</name></name> == <name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>now_merged</name> = <name><name>last_walk</name>-&gt;<name>merged</name></name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>last_walk</name></expr>;</expr_stmt>
<expr_stmt><expr>--<name>matches</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name> -= <name>matches</name></expr>;</expr_stmt>
<expr_stmt><expr><name>matches</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>cached</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>now_merged</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>now_merged</name> = <call><name>ap_merge_per_dir_configs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>now_merged</name></expr></argument>,
<argument><expr><name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>now_merged</name> = <name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>last_walk</name> = (<name>walk_walked_t</name>*)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>walked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last_walk</name>-&gt;<name>matched</name></name> = <name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last_walk</name>-&gt;<name>merged</name></name> = <name>now_merged</name></expr>;</expr_stmt>
}</block></for>
<do>do <block>{
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>htaccess_conf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>seg</name> &lt; <name>startseg</name> || (!<name><name>opts</name>.<name>override</name></name>
&amp;&amp; <call><name>apr_is_empty_table</name><argument_list>(<argument><expr><name><name>opts</name>.<name>override_list</name></name></expr></argument>)</argument_list></call>
)</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>res</name> = <call><name>ap_parse_htaccess</name><argument_list>(<argument><expr>&amp;<name>htaccess_conf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>opts</name>.<name>override</name></name></expr></argument>,
<argument><expr><name><name>opts</name>.<name>override_opts</name></name></expr></argument>, <argument><expr><name><name>opts</name>.<name>override_list</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>sconf</name>-&gt;<name>access_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name></expr>)</condition><then> <block>{
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>htaccess_conf</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>core_opts_merge</name><argument_list>(<argument><expr><name>htaccess_conf</name></expr></argument>, <argument><expr>&amp;<name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>matches</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>last_walk</name>-&gt;<name>matched</name></name> == <name>htaccess_conf</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>now_merged</name> = <name><name>last_walk</name>-&gt;<name>merged</name></name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>last_walk</name></expr>;</expr_stmt>
<expr_stmt><expr>--<name>matches</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name> -= <name>matches</name></expr>;</expr_stmt>
<expr_stmt><expr><name>matches</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>cached</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>now_merged</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>now_merged</name> = <call><name>ap_merge_per_dir_configs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>now_merged</name></expr></argument>,
<argument><expr><name>htaccess_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>now_merged</name> = <name>htaccess_conf</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>last_walk</name> = (<name>walk_walked_t</name>*)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>walked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last_walk</name>-&gt;<name>matched</name></name> = <name>htaccess_conf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last_walk</name>-&gt;<name>merged</name></name> = <name>now_merged</name></expr>;</expr_stmt>
}</block> while <condition>(<expr>0</expr>)</condition>;</do>
<if>if <condition>(<expr><name>temp_slash</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name><index>[<expr>--<name>filename_len</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>path_info</name></name> || !*<name><name>r</name>-&gt;<name>path_info</name></name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>seg_name</name> = <name><name>r</name>-&gt;<name>filename</name></name> + <name>filename_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>delim</name> = <call><name>strchr</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>path_info</name></name> + (*<name><name>r</name>-&gt;<name>path_info</name></name> == '/' ? 1 : 0)</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>delim</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>path_info_len</name> <init>= <expr><name>delim</name> - <name><name>r</name>-&gt;<name>path_info</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>delim</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>seg_name</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>, <argument><expr><name>path_info_len</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filename_len</name> += <name>path_info_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>path_info</name></name> = <name>delim</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>delim</name> = '/'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>path_info_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>seg_name</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>, <argument><expr><name>path_info_len</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filename_len</name> += <name>path_info_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>path_info</name></name> += <name>path_info_len</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>*<name>seg_name</name> == '/'</expr>)</condition><then>
<expr_stmt><expr>++<name>seg_name</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!*<name>seg_name</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> != <name>APR_NOFILE</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CASE_BLIND_FILESYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
&amp;&amp; (<name>filename_len</name> &lt;= <name>canonical_len</name>)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
&amp;&amp; ((<name><name>opts</name>.<name>opts</name></name> &amp; (<name>OPT_SYM_OWNER</name> | <name>OPT_SYM_LINKS</name>)) == <name>OPT_SYM_LINKS</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>thisinfo</name>.<name>filetype</name></name> = <name>APR_DIR</name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>seg</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>ap_run_dirwalk_stat</name><argument_list>(<argument><expr>&amp;<name>thisinfo</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><name>APR_FINFO_MIN</name> | <name>APR_FINFO_NAME</name> | <name>APR_FINFO_LINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>thisinfo</name>.<name>filetype</name></name> = <name>APR_NOFILE</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_EACCES</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00035</expr></argument>)</argument_list></call>
"access to %s denied (filesystem path '%s') "
"because search permissions are missing on a "
"component of the path"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>(<name>rv</name> != <name>APR_SUCCESS</name> &amp;&amp; <name>rv</name> != <name>APR_INCOMPLETE</name>)
|| !(<name><name>thisinfo</name>.<name>valid</name></name> &amp; <name>APR_FINFO_TYPE</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00036</expr></argument>)</argument_list></call>
"access to %s failed (filesystem path '%s')"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then></if></else></if></else></if>
<if>if <condition>(<expr>(<name><name>thisinfo</name>.<name>valid</name></name> &amp; <name>APR_FINFO_NAME</name>)
&amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>seg_name</name></expr></argument>, <argument><expr><name><name>thisinfo</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>seg_name</name></expr></argument>, <argument><expr><name><name>thisinfo</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filename_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>thisinfo</name>.<name>filetype</name></name> == <name>APR_LNK</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>res</name> = <call><name>resolve_symlink</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>&amp;<name>thisinfo</name></expr></argument>,
<argument><expr><name><name>opts</name>.<name>opts</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00037</expr></argument>)</argument_list></call>
"Symbolic link not allowed "
"or link target not accessible: %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>r</name>-&gt;<name>status</name></name> = <name>res</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>thisinfo</name>.<name>filetype</name></name> == <name>APR_REG</name> ||
<name><name>thisinfo</name>.<name>filetype</name></name> == <name>APR_NOFILE</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr><name><name>thisinfo</name>.<name>filetype</name></name> != <name>APR_DIR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00038</expr></argument>)</argument_list></call>
"Forbidden: %s doesn't point to "
"a file or directory"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr>++<name>seg</name></expr>;</expr_stmt>
}</block> while <condition>(<expr><name><name>thisinfo</name>.<name>filetype</name></name> == <name>APR_DIR</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_NOFILE</name> || <name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_LNK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>finfo</name></name> = <name>thisinfo</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>save_path_info</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>path_info</name></name> &amp;&amp; *<name><name>r</name>-&gt;<name>path_info</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>path_info</name></name> = <call><name>ap_make_full_path</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>,
<argument><expr><name>save_path_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>path_info</name></name> = <name>save_path_info</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<for>for (<init>;</init> <condition><expr><name>sec_idx</name> &lt; <name>num_sec</name></expr>;</condition> <incr><expr>++<name>sec_idx</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nmatch</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regmatch_t</name> *</type><name>pmatch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>entry_core</name></decl>;</decl_stmt>
<expr_stmt><expr><name>entry_core</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>entry_core</name>-&gt;<name>r</name></name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name><name>entry_core</name>-&gt;<name>refs</name></name> &amp;&amp; <name><name>entry_core</name>-&gt;<name>refs</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>rxpool</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>rxpool</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>nmatch</name> = <name><name>entry_core</name>-&gt;<name>refs</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pmatch</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>rxpool</name></expr></argument>, <argument><expr><name>nmatch</name>*<sizeof>sizeof<argument_list>(<argument><expr><name>ap_regmatch_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_regexec</name><argument_list>(<argument><expr><name><name>entry_core</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>nmatch</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nmatch</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_so</name> &gt;= 0 &amp;&amp; <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_eo</name> &gt;= 0 &amp;&amp;
((const <name>char</name> **)<name><name>entry_core</name>-&gt;<name>refs</name>-&gt;<name>elts</name></name>)<index>[<expr><name>i</name></expr>]</index></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>,
<argument><expr>((const <name>char</name> **)<name><name>entry_core</name>-&gt;<name>refs</name>-&gt;<name>elts</name></name>)<index>[<expr><name>i</name></expr>]</index></expr></argument>,
<argument><expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name> + <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_so</name></expr></argument>,
<argument><expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_eo</name> - <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_so</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>core_opts_merge</name><argument_list>(<argument><expr><name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>matches</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>last_walk</name>-&gt;<name>matched</name></name> == <name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>now_merged</name> = <name><name>last_walk</name>-&gt;<name>merged</name></name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>last_walk</name></expr>;</expr_stmt>
<expr_stmt><expr>--<name>matches</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name> -= <name>matches</name></expr>;</expr_stmt>
<expr_stmt><expr><name>matches</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>cached</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>now_merged</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>now_merged</name> = <call><name>ap_merge_per_dir_configs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>now_merged</name></expr></argument>,
<argument><expr><name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>now_merged</name> = <name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>last_walk</name> = (<name>walk_walked_t</name>*)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>walked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last_walk</name>-&gt;<name>matched</name></name> = <name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last_walk</name>-&gt;<name>merged</name></name> = <name>now_merged</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>rxpool</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>rxpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>matches</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name> -= <name>matches</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cached</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name> &gt; <name>cached_matches</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cached</name> = 0</expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></else></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>canonical_filename</name></name> = <name><name>r</name>-&gt;<name>filename</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_DIR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cache</name>-&gt;<name>cached</name></name> = <name><name>r</name>-&gt;<name>filename</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>cache</name>-&gt;<name>cached</name></name> = <call><name>ap_make_dirstr_parent</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>cached</name>
&amp;&amp; <name><name>r</name>-&gt;<name>per_dir_config</name></name> == <name><name>cache</name>-&gt;<name>dir_conf_merged</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> = <name><name>cache</name>-&gt;<name>per_dir_result</name></name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>dir_conf_tested</name></name> = <name>sec_ent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>dir_conf_merged</name></name> = <name><name>r</name>-&gt;<name>per_dir_config</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>now_merged</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> = <call><name>ap_merge_per_dir_configs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr><name>now_merged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>per_dir_result</name></name> = <name><name>r</name>-&gt;<name>per_dir_config</name></name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_location_walk</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>now_merged</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>sconf</name> <init>=
<expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> **</type><name>sec_ent</name> <init>= <expr>(<name>ap_conf_vector_t</name> **)<name><name>sconf</name>-&gt;<name>sec_url</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_sec</name> <init>= <expr><name><name>sconf</name>-&gt;<name>sec_url</name>-&gt;<name>nelts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>walk_cache_t</name> *</type><name>cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>entry_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cached</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>num_sec</name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cache</name> = <call><name>prep_walk_cache</name><argument_list>(<argument><expr><name>AP_NOTE_LOCATION_WALK</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cached</name> = (<name><name>cache</name>-&gt;<name>cached</name></name> != <name>NULL</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>uri</name><index>[<expr>0</expr>]</index></name> != '/'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>entry_uri</name> = <name><name>r</name>-&gt;<name>uri</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>uri</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_no2slash</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry_uri</name> = <name>uri</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>cached</name>
&amp;&amp; (<name><name>cache</name>-&gt;<name>dir_conf_tested</name></name> == <name>sec_ent</name>)
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>entry_uri</name></expr></argument>, <argument><expr><name><name>cache</name>-&gt;<name>cached</name></name></expr></argument>)</argument_list></call> == 0)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> == <name><name>cache</name>-&gt;<name>per_dir_result</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>now_merged</name> = ((<name>walk_walked_t</name>*)<name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>elts</name></name>)
<index>[<expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name> - 1</expr>]</index>.<name>merged</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>sec_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>matches</name> <init>= <expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cached_matches</name> <init>= <expr><name>matches</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>walk_walked_t</name> *</type><name>last_walk</name> <init>= <expr>(<name>walk_walked_t</name>*)<name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>rxpool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cached</name> &amp;= <name>auth_internal_per_conf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>cached</name></name> = <name>entry_uri</name></expr>;</expr_stmt>
<for>for (<init><expr><name>sec_idx</name> = 0</expr>;</init> <condition><expr><name>sec_idx</name> &lt; <name>num_sec</name></expr>;</condition> <incr><expr>++<name>sec_idx</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>entry_core</name></decl>;</decl_stmt>
<expr_stmt><expr><name>entry_core</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>entry_core</name>-&gt;<name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry_core</name>-&gt;<name>r</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nmatch</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regmatch_t</name> *</type><name>pmatch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>entry_core</name>-&gt;<name>refs</name></name> &amp;&amp; <name><name>entry_core</name>-&gt;<name>refs</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>rxpool</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>rxpool</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>nmatch</name> = <name><name>entry_core</name>-&gt;<name>refs</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pmatch</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>rxpool</name></expr></argument>, <argument><expr><name>nmatch</name>*<sizeof>sizeof<argument_list>(<argument><expr><name>ap_regmatch_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_regexec</name><argument_list>(<argument><expr><name><name>entry_core</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>nmatch</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nmatch</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_so</name> &gt;= 0 &amp;&amp; <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_eo</name> &gt;= 0 &amp;&amp;
((const <name>char</name> **)<name><name>entry_core</name>-&gt;<name>refs</name>-&gt;<name>elts</name></name>)<index>[<expr><name>i</name></expr>]</index></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>,
<argument><expr>((const <name>char</name> **)<name><name>entry_core</name>-&gt;<name>refs</name>-&gt;<name>elts</name></name>)<index>[<expr><name>i</name></expr>]</index></expr></argument>,
<argument><expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name> + <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_so</name></expr></argument>,
<argument><expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_eo</name> - <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_so</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>(<name><name>entry_core</name>-&gt;<name>d_is_fnmatch</name></name>
? <call><name>apr_fnmatch</name><argument_list>(<argument><expr><name><name>entry_core</name>-&gt;<name>d</name></name></expr></argument>, <argument><expr><name><name>cache</name>-&gt;<name>cached</name></name></expr></argument>, <argument><expr><name>APR_FNM_PATHNAME</name></expr></argument>)</argument_list></call>
: (<call><name>strncmp</name><argument_list>(<argument><expr><name><name>entry_core</name>-&gt;<name>d</name></name></expr></argument>, <argument><expr><name><name>cache</name>-&gt;<name>cached</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call>
|| (<name>len</name> &gt; 0
&amp;&amp; <name><name>entry_core</name>-&gt;<name>d</name><index>[<expr><name>len</name> - 1</expr>]</index></name> != '/'
&amp;&amp; <name><name>cache</name>-&gt;<name>cached</name><index>[<expr><name>len</name></expr>]</index></name> != '/'
&amp;&amp; <name><name>cache</name>-&gt;<name>cached</name><index>[<expr><name>len</name></expr>]</index></name> != '\0')))</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><name>matches</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>last_walk</name>-&gt;<name>matched</name></name> == <name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>now_merged</name> = <name><name>last_walk</name>-&gt;<name>merged</name></name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>last_walk</name></expr>;</expr_stmt>
<expr_stmt><expr>--<name>matches</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name> -= <name>matches</name></expr>;</expr_stmt>
<expr_stmt><expr><name>matches</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>cached</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>now_merged</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>now_merged</name> = <call><name>ap_merge_per_dir_configs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>now_merged</name></expr></argument>,
<argument><expr><name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>now_merged</name> = <name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>last_walk</name> = (<name>walk_walked_t</name>*)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>walked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last_walk</name>-&gt;<name>matched</name></name> = <name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last_walk</name>-&gt;<name>merged</name></name> = <name>now_merged</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>rxpool</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>rxpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>matches</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name> -= <name>matches</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cached</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name> &gt; <name>cached_matches</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cached</name> = 0</expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></else></if>
<if>if <condition>(<expr><name>cached</name>
&amp;&amp; <name><name>r</name>-&gt;<name>per_dir_config</name></name> == <name><name>cache</name>-&gt;<name>dir_conf_merged</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> = <name><name>cache</name>-&gt;<name>per_dir_result</name></name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>dir_conf_tested</name></name> = <name>sec_ent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>dir_conf_merged</name></name> = <name><name>r</name>-&gt;<name>per_dir_config</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>now_merged</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> = <call><name>ap_merge_per_dir_configs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr><name>now_merged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>per_dir_result</name></name> = <name><name>r</name>-&gt;<name>per_dir_config</name></name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_file_walk</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>now_merged</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>dconf</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> **</type><name>sec_ent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_sec</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>walk_cache_t</name> *</type><name>cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>test_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cached</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>dconf</name>-&gt;<name>sec_file</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>sec_ent</name> = (<name>ap_conf_vector_t</name> **)<name><name>dconf</name>-&gt;<name>sec_file</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_sec</name> = <name><name>dconf</name>-&gt;<name>sec_file</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>filename</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>num_sec</name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cache</name> = <call><name>prep_walk_cache</name><argument_list>(<argument><expr><name>AP_NOTE_FILE_WALK</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cached</name> = (<name><name>cache</name>-&gt;<name>cached</name></name> != <name>NULL</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>test_file</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>test_file</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>test_file</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>test_file</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>++<name>test_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>cached</name>
&amp;&amp; (<name><name>cache</name>-&gt;<name>dir_conf_tested</name></name> == <name>sec_ent</name>)
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>test_file</name></expr></argument>, <argument><expr><name><name>cache</name>-&gt;<name>cached</name></name></expr></argument>)</argument_list></call> == 0)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> == <name><name>cache</name>-&gt;<name>per_dir_result</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>now_merged</name> = ((<name>walk_walked_t</name>*)<name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>elts</name></name>)
<index>[<expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name> - 1</expr>]</index>.<name>merged</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>sec_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>matches</name> <init>= <expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cached_matches</name> <init>= <expr><name>matches</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>walk_walked_t</name> *</type><name>last_walk</name> <init>= <expr>(<name>walk_walked_t</name>*)<name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>rxpool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cached</name> &amp;= <name>auth_internal_per_conf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>cached</name></name> = <name>test_file</name></expr>;</expr_stmt>
<for>for (<init><expr><name>sec_idx</name> = 0</expr>;</init> <condition><expr><name>sec_idx</name> &lt; <name>num_sec</name></expr>;</condition> <incr><expr>++<name>sec_idx</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>entry_core</name></decl>;</decl_stmt>
<expr_stmt><expr><name>entry_core</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry_core</name>-&gt;<name>r</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nmatch</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regmatch_t</name> *</type><name>pmatch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>entry_core</name>-&gt;<name>refs</name></name> &amp;&amp; <name><name>entry_core</name>-&gt;<name>refs</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>rxpool</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>rxpool</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>nmatch</name> = <name><name>entry_core</name>-&gt;<name>refs</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pmatch</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>rxpool</name></expr></argument>, <argument><expr><name>nmatch</name>*<sizeof>sizeof<argument_list>(<argument><expr><name>ap_regmatch_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_regexec</name><argument_list>(<argument><expr><name><name>entry_core</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name><name>cache</name>-&gt;<name>cached</name></name></expr></argument>, <argument><expr><name>nmatch</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nmatch</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_so</name> &gt;= 0 &amp;&amp; <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_eo</name> &gt;= 0 &amp;&amp;
((const <name>char</name> **)<name><name>entry_core</name>-&gt;<name>refs</name>-&gt;<name>elts</name></name>)<index>[<expr><name>i</name></expr>]</index></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>,
<argument><expr>((const <name>char</name> **)<name><name>entry_core</name>-&gt;<name>refs</name>-&gt;<name>elts</name></name>)<index>[<expr><name>i</name></expr>]</index></expr></argument>,
<argument><expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>cache</name>-&gt;<name>cached</name></name> + <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_so</name></expr></argument>,
<argument><expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_eo</name> - <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_so</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>(<name><name>entry_core</name>-&gt;<name>d_is_fnmatch</name></name>
? <call><name>apr_fnmatch</name><argument_list>(<argument><expr><name><name>entry_core</name>-&gt;<name>d</name></name></expr></argument>, <argument><expr><name><name>cache</name>-&gt;<name>cached</name></name></expr></argument>, <argument><expr><name>APR_FNM_PATHNAME</name></expr></argument>)</argument_list></call>
: <call><name>strcmp</name><argument_list>(<argument><expr><name><name>entry_core</name>-&gt;<name>d</name></name></expr></argument>, <argument><expr><name><name>cache</name>-&gt;<name>cached</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><name>matches</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>last_walk</name>-&gt;<name>matched</name></name> == <name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>now_merged</name> = <name><name>last_walk</name>-&gt;<name>merged</name></name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>last_walk</name></expr>;</expr_stmt>
<expr_stmt><expr>--<name>matches</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name> -= <name>matches</name></expr>;</expr_stmt>
<expr_stmt><expr><name>matches</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>cached</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>now_merged</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>now_merged</name> = <call><name>ap_merge_per_dir_configs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>now_merged</name></expr></argument>,
<argument><expr><name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>now_merged</name> = <name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>last_walk</name> = (<name>walk_walked_t</name>*)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>walked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last_walk</name>-&gt;<name>matched</name></name> = <name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last_walk</name>-&gt;<name>merged</name></name> = <name>now_merged</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>rxpool</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>rxpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>matches</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name> -= <name>matches</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cached</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name> &gt; <name>cached_matches</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cached</name> = 0</expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></else></if>
<if>if <condition>(<expr><name>cached</name>
&amp;&amp; <name><name>r</name>-&gt;<name>per_dir_config</name></name> == <name><name>cache</name>-&gt;<name>dir_conf_merged</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> = <name><name>cache</name>-&gt;<name>per_dir_result</name></name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>dir_conf_tested</name></name> = <name>sec_ent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>dir_conf_merged</name></name> = <name><name>r</name>-&gt;<name>per_dir_config</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>now_merged</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> = <call><name>ap_merge_per_dir_configs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr><name>now_merged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>per_dir_result</name></name> = <name><name>r</name>-&gt;<name>per_dir_config</name></name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ap_if_walk_sub</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>core_dir_config</name>*</type> <name>dconf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>now_merged</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> **</type><name>sec_ent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_sec</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>walk_cache_t</name> *</type><name>cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cached</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sec_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>matches</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cached_matches</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_result</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>walk_walked_t</name> *</type><name>last_walk</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>dconf</name> &amp;&amp; <name><name>dconf</name>-&gt;<name>sec_if</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>sec_ent</name> = (<name>ap_conf_vector_t</name> **)<name><name>dconf</name>-&gt;<name>sec_if</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_sec</name> = <name><name>dconf</name>-&gt;<name>sec_if</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>num_sec</name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cache</name> = <call><name>prep_walk_cache</name><argument_list>(<argument><expr><name>AP_NOTE_IF_WALK</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cached</name> = (<name><name>cache</name>-&gt;<name>cached</name></name> != <name>NULL</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>cached</name></name> = (<name>void</name> *)1</expr>;</expr_stmt>
<expr_stmt><expr><name>matches</name> = <name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cached_matches</name> = <name>matches</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_walk</name> = (<name>walk_walked_t</name>*)<name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cached</name> &amp;= <name>auth_internal_per_conf</name></expr>;</expr_stmt>
<for>for (<init><expr><name>sec_idx</name> = 0</expr>;</init> <condition><expr><name>sec_idx</name> &lt; <name>num_sec</name></expr>;</condition> <incr><expr>++<name>sec_idx</name></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>entry_core</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>entry_core</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name><name>entry_core</name>-&gt;<name>condition_ifelse</name></name> != 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry_core</name>-&gt;<name>condition_ifelse</name></name> &amp; <name>AP_CONDITION_ELSE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name>prev_result</name> != -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>prev_result</name> == 1</expr>)</condition><then>
<continue>continue;</continue></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>entry_core</name>-&gt;<name>condition_ifelse</name></name> &amp; <name>AP_CONDITION_IF</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>ap_expr_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>entry_core</name>-&gt;<name>condition</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> &lt;= 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>rc</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00039</expr></argument>)</argument_list></call>
"Failed to evaluate &lt;If &gt; condition: %s"</expr></argument>,
<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>prev_result</name> = 0</expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>prev_result</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>prev_result</name> = -1</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>matches</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>last_walk</name>-&gt;<name>matched</name></name> == <name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>now_merged</name> = <name><name>last_walk</name>-&gt;<name>merged</name></name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>last_walk</name></expr>;</expr_stmt>
<expr_stmt><expr>--<name>matches</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name> -= <name>matches</name></expr>;</expr_stmt>
<expr_stmt><expr><name>matches</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>cached</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>now_merged</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>now_merged</name> = <call><name>ap_merge_per_dir_configs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>now_merged</name></expr></argument>,
<argument><expr><name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>now_merged</name> = <name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>last_walk</name> = (<name>walk_walked_t</name>*)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>walked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last_walk</name>-&gt;<name>matched</name></name> = <name><name>sec_ent</name><index>[<expr><name>sec_idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last_walk</name>-&gt;<name>merged</name></name> = <name>now_merged</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>matches</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name> -= <name>matches</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cached</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>cache</name>-&gt;<name>walked</name>-&gt;<name>nelts</name></name> &gt; <name>cached_matches</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cached</name> = 0</expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>cached</name>
&amp;&amp; <name><name>r</name>-&gt;<name>per_dir_config</name></name> == <name><name>cache</name>-&gt;<name>dir_conf_merged</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> = <name><name>cache</name>-&gt;<name>per_dir_result</name></name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>dir_conf_tested</name></name> = <name>sec_ent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>dir_conf_merged</name></name> = <name><name>r</name>-&gt;<name>per_dir_config</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>now_merged</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> = <call><name>ap_merge_per_dir_configs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr><name>now_merged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>per_dir_result</name></name> = <name><name>r</name>-&gt;<name>per_dir_config</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>now_merged</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>dconf_merged</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name>now_merged</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ap_if_walk_sub</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dconf_merged</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_if_walk</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>dconf</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>ap_if_walk_sub</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dconf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>status</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>request_rec</name> *</type><name>make_sub_request</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> *</type><name>next_filter</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>rrp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>rnew</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>rrp</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name>rrp</name></expr></argument>, <argument><expr>"subrequest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rnew</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>rrp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>request_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>pool</name></name> = <name>rrp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>hostname</name></name> = <name><name>r</name>-&gt;<name>hostname</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>request_time</name></name> = <name><name>r</name>-&gt;<name>request_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>connection</name></name> = <name><name>r</name>-&gt;<name>connection</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>server</name></name> = <name><name>r</name>-&gt;<name>server</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>log</name></name> = <name><name>r</name>-&gt;<name>log</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>request_config</name></name> = <call><name>ap_create_request_config</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>per_dir_config</name></name> = <name><name>r</name>-&gt;<name>server</name>-&gt;<name>lookup_defaults</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>htaccess</name></name> = <name><name>r</name>-&gt;<name>htaccess</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>allowed_methods</name></name> = <call><name>ap_make_method_list</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_copy_method_list</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>allowed_methods</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>allowed_methods</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>next_filter</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>scan</name> <init>= <expr><name>next_filter</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>input_filters</name></name> = <name><name>r</name>-&gt;<name>input_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>proto_input_filters</name></name> = <name><name>r</name>-&gt;<name>proto_input_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>output_filters</name></name> = <name>next_filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>proto_output_filters</name></name> = <name><name>r</name>-&gt;<name>proto_output_filters</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>scan</name> &amp;&amp; (<name>scan</name> != <name><name>r</name>-&gt;<name>proto_output_filters</name></name>)</expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>scan</name>-&gt;<name>frec</name></name> == <name>ap_subreq_core_filter_handle</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>scan</name> = <name><name>scan</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>!<name>scan</name> || <name>scan</name> == <name><name>r</name>-&gt;<name>proto_output_filters</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_add_output_filter_handle</name><argument_list>(<argument><expr><name>ap_subreq_core_filter_handle</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rnew</name></expr></argument>, <argument><expr><name><name>rnew</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>proto_input_filters</name></name> = <name><name>r</name>-&gt;<name>proto_input_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>proto_output_filters</name></name> = <name><name>r</name>-&gt;<name>proto_output_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>input_filters</name></name> = <name><name>r</name>-&gt;<name>proto_input_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>output_filters</name></name> = <name><name>r</name>-&gt;<name>proto_output_filters</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>useragent_addr</name></name> = <name><name>r</name>-&gt;<name>useragent_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>useragent_ip</name></name> = <name><name>r</name>-&gt;<name>useragent_ip</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_sub_req_protocol</name><argument_list>(<argument><expr><name>rnew</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_run_create_request</name><argument_list>(<argument><expr><name>rnew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>used_path_info</name></name> = <name>AP_REQ_DEFAULT_PATH_INFO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>kept_body</name></name> = <name><name>r</name>-&gt;<name>kept_body</name></name></expr>;</expr_stmt>
<return>return <expr><name>rnew</name></expr>;</return>
}</block></function>
<macro><name>AP_CORE_DECLARE_NONSTD</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_sub_req_output_filter</name><argument_list>(<argument>ap_filter_t *f</argument>,
<argument>apr_bucket_brigade *bb</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name> <init>= <expr><call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<extern>extern APR_OPTIONAL_FN_TYPE(authz_some_auth_required</extern>) <expr_stmt><expr>*<name>ap__authz_ap_some_auth_required</name></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_some_auth_required</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>ap__authz_ap_some_auth_required</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap__authz_ap_some_auth_required</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else
<return>return <expr>0</expr>;</return></else></if>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_clear_auth_internal</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><name>auth_internal_per_conf_hooks</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>auth_internal_per_conf_providers</name> = 0</expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_setup_auth_internal</name><argument_list>(<argument>apr_pool_t *ptemp</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>total_auth_hooks</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total_auth_providers</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>auth_internal_per_conf</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>_hooks</name>.<name>link_access_checker</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>total_auth_hooks</name> += <name><name>_hooks</name>.<name>link_access_checker</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>_hooks</name>.<name>link_access_checker_ex</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>total_auth_hooks</name> += <name><name>_hooks</name>.<name>link_access_checker_ex</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>_hooks</name>.<name>link_check_user_id</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>total_auth_hooks</name> += <name><name>_hooks</name>.<name>link_check_user_id</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>_hooks</name>.<name>link_auth_checker</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>total_auth_hooks</name> += <name><name>_hooks</name>.<name>link_auth_checker</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>total_auth_hooks</name> &gt; <name>auth_internal_per_conf_hooks</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>total_auth_providers</name> +=
<call><name>ap_list_provider_names</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>AUTHN_PROVIDER_GROUP</name></expr></argument>,
<argument><expr><name>AUTHN_PROVIDER_VERSION</name></expr></argument>)</argument_list></call>-&gt;<name>nelts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>total_auth_providers</name> +=
<call><name>ap_list_provider_names</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>,
<argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>)</argument_list></call>-&gt;<name>nelts</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>total_auth_providers</name> &gt; <name>auth_internal_per_conf_providers</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>auth_internal_per_conf</name> = 1</expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_register_auth_provider</name><argument_list>(<argument>apr_pool_t *pool</argument>,
<argument>const char *provider_group</argument>,
<argument>const char *provider_name</argument>,
<argument>const char *provider_version</argument>,
<argument>const void *provider</argument>,
<argument>int type</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr>(<name>type</name> &amp; <name>AP_AUTH_INTERNAL_MASK</name>) == <name>AP_AUTH_INTERNAL_PER_CONF</name></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>auth_internal_per_conf_providers</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>ap_register_provider</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>provider_group</name></expr></argument>, <argument><expr><name>provider_name</name></expr></argument>,
<argument><expr><name>provider_version</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_hook_check_access</name><argument_list>(<argument>ap_HOOK_access_checker_t *pf</argument>,
<argument>const char * const *aszPre</argument>,
<argument>const char * const *aszSucc</argument>,
<argument>int nOrder</argument>, <argument>int type</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr>(<name>type</name> &amp; <name>AP_AUTH_INTERNAL_MASK</name>) == <name>AP_AUTH_INTERNAL_PER_CONF</name></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>auth_internal_per_conf_hooks</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_hook_access_checker</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><name>aszPre</name></expr></argument>, <argument><expr><name>aszSucc</name></expr></argument>, <argument><expr><name>nOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_hook_check_access_ex</name><argument_list>(<argument>ap_HOOK_access_checker_ex_t *pf</argument>,
<argument>const char * const *aszPre</argument>,
<argument>const char * const *aszSucc</argument>,
<argument>int nOrder</argument>, <argument>int type</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr>(<name>type</name> &amp; <name>AP_AUTH_INTERNAL_MASK</name>) == <name>AP_AUTH_INTERNAL_PER_CONF</name></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>auth_internal_per_conf_hooks</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_hook_access_checker_ex</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><name>aszPre</name></expr></argument>, <argument><expr><name>aszSucc</name></expr></argument>, <argument><expr><name>nOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_hook_check_authn</name><argument_list>(<argument>ap_HOOK_check_user_id_t *pf</argument>,
<argument>const char * const *aszPre</argument>,
<argument>const char * const *aszSucc</argument>,
<argument>int nOrder</argument>, <argument>int type</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr>(<name>type</name> &amp; <name>AP_AUTH_INTERNAL_MASK</name>) == <name>AP_AUTH_INTERNAL_PER_CONF</name></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>auth_internal_per_conf_hooks</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_hook_check_user_id</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><name>aszPre</name></expr></argument>, <argument><expr><name>aszSucc</name></expr></argument>, <argument><expr><name>nOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_hook_check_authz</name><argument_list>(<argument>ap_HOOK_auth_checker_t *pf</argument>,
<argument>const char * const *aszPre</argument>,
<argument>const char * const *aszSucc</argument>,
<argument>int nOrder</argument>, <argument>int type</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr>(<name>type</name> &amp; <name>AP_AUTH_INTERNAL_MASK</name>) == <name>AP_AUTH_INTERNAL_PER_CONF</name></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>auth_internal_per_conf_hooks</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_hook_auth_checker</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><name>aszPre</name></expr></argument>, <argument><expr><name>aszSucc</name></expr></argument>, <argument><expr><name>nOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>request_rec *</argument>)</argument_list></macro> <macro><name>ap_sub_req_method_uri</name><argument_list>(<argument>const char *method</argument>,
<argument>const char *new_uri</argument>,
<argument>const request_rec *r</argument>,
<argument>ap_filter_t *next_filter</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>rnew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>udir</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rnew</name> = <call><name>make_sub_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>next_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>method</name></name> = <name>method</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>method_number</name></name> = <call><name>ap_method_number_of</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>new_uri</name><index>[<expr>0</expr>]</index></name> == '/'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_parse_uri</name><argument_list>(<argument><expr><name>rnew</name></expr></argument>, <argument><expr><name>new_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>udir</name> = <call><name>ap_make_dirstr_parent</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>udir</name> = <call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>udir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_parse_uri</name><argument_list>(<argument><expr><name>rnew</name></expr></argument>, <argument><expr><call><name>ap_make_full_path</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>udir</name></expr></argument>, <argument><expr><name>new_uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><call><name>ap_is_recursion_limit_exceeded</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>status</name></name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
<return>return <expr><name>rnew</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>next_filter</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>ap_run_quick_handler</name><argument_list>(<argument><expr><name>rnew</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>next_filter</name> == <name>NULL</name> || <name>res</name> != <name>OK</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>res</name> = <call><name>ap_process_request_internal</name><argument_list>(<argument><expr><name>rnew</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>status</name></name> = <name>res</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>rnew</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>request_rec *</argument>)</argument_list></macro> <macro><name>ap_sub_req_lookup_uri</name><argument_list>(<argument>const char *new_uri</argument>,
<argument>const request_rec *r</argument>,
<argument>ap_filter_t *next_filter</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>ap_sub_req_method_uri</name><argument_list>(<argument><expr>"GET"</expr></argument>, <argument><expr><name>new_uri</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>next_filter</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>request_rec *</argument>)</argument_list></macro> <macro><name>ap_sub_req_lookup_dirent</name><argument_list>(<argument>const apr_finfo_t *dirent</argument>,
<argument>const request_rec *r</argument>,
<argument>int subtype</argument>,
<argument>ap_filter_t *next_filter</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>rnew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>fdir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>udir</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rnew</name> = <call><name>make_sub_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>next_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>path_info</name></name> &amp;&amp; *<name><name>r</name>-&gt;<name>path_info</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>udir</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>udir</name><index>[<expr><call><name>ap_find_path_info</name><argument_list>(<argument><expr><name>udir</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>)</argument_list></call></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>udir</name> = <call><name>ap_make_dirstr_parent</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>udir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>uri</name></name> = <call><name>ap_make_full_path</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>udir</name></expr></argument>, <argument><expr><name><name>dirent</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>subtype</name> == <name>AP_SUBREQ_MERGE_ARGS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>uri</name></name> = <call><name>ap_make_full_path</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>rnew</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>path_info</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>uri</name></name> = <call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>rnew</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>udir</name> = <call><name>ap_make_dirstr_parent</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>uri</name></name> = <call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>ap_make_full_path</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>udir</name></expr></argument>,
<argument><expr><name><name>dirent</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>fdir</name> = <call><name>ap_make_dirstr_parent</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>filename</name></name> = <call><name>ap_make_full_path</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fdir</name></expr></argument>, <argument><expr><name><name>dirent</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>canonical_filename</name></name> == <name><name>r</name>-&gt;<name>filename</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>canonical_filename</name></name> = <name><name>rnew</name>-&gt;<name>filename</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>per_dir_config</name></name> = <name><name>r</name>-&gt;<name>server</name>-&gt;<name>lookup_defaults</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>dirent</name>-&gt;<name>valid</name></name> &amp; <name>APR_FINFO_MIN</name>) != <name>APR_FINFO_MIN</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_allow_options</name><argument_list>(<argument><expr><name>rnew</name></expr></argument>)</argument_list></call> &amp; <name>OPT_SYM_LINKS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>((<name>rv</name> = <call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name><name>rnew</name>-&gt;<name>finfo</name></name></expr></argument>, <argument><expr><name><name>rnew</name>-&gt;<name>filename</name></name></expr></argument>,
<argument><expr><name>APR_FINFO_MIN</name></expr></argument>, <argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name>)
&amp;&amp; (<name>rv</name> != <name>APR_INCOMPLETE</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>finfo</name>.<name>filetype</name></name> = <name>APR_NOFILE</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>((<name>rv</name> = <call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name><name>rnew</name>-&gt;<name>finfo</name></name></expr></argument>, <argument><expr><name><name>rnew</name>-&gt;<name>filename</name></name></expr></argument>,
<argument><expr><name>APR_FINFO_LINK</name> | <name>APR_FINFO_MIN</name></expr></argument>,
<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name>)
&amp;&amp; (<name>rv</name> != <name>APR_INCOMPLETE</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>finfo</name>.<name>filetype</name></name> = <name>APR_NOFILE</name></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name><name>rnew</name>-&gt;<name>finfo</name></name></expr></argument>, <argument><expr><name>dirent</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_finfo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>rnew</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_LNK</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>res</name> = <call><name>resolve_symlink</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>&amp;<name><name>rnew</name>-&gt;<name>finfo</name></name></expr></argument>,
<argument><expr><call><name>ap_allow_options</name><argument_list>(<argument><expr><name>rnew</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)
!= <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>status</name></name> = <name>res</name></expr>;</expr_stmt>
<return>return <expr><name>rnew</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>rnew</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_DIR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>"/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>rnew</name>-&gt;<name>path_info</name></name> || !*<name><name>rnew</name>-&gt;<name>path_info</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>"/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>args</name></name> &amp;&amp; *<name><name>r</name>-&gt;<name>args</name></name> &amp;&amp; (<name>subtype</name> == <name>AP_SUBREQ_MERGE_ARGS</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_parse_uri</name><argument_list>(<argument><expr><name>rnew</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>rnew</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>"?"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_parse_uri</name><argument_list>(<argument><expr><name>rnew</name></expr></argument>, <argument><expr><name><name>rnew</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><call><name>ap_is_recursion_limit_exceeded</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>status</name></name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
<return>return <expr><name>rnew</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>res</name> = <call><name>ap_process_request_internal</name><argument_list>(<argument><expr><name>rnew</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>status</name></name> = <name>res</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rnew</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>request_rec *</argument>)</argument_list></macro> <macro><name>ap_sub_req_lookup_file</name><argument_list>(<argument>const char *new_file</argument>,
<argument>const request_rec *r</argument>,
<argument>ap_filter_t *next_filter</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>rnew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>fdir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>fdirlen</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rnew</name> = <call><name>make_sub_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>next_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fdir</name> = <call><name>ap_make_dirstr_parent</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fdirlen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>fdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>canonical_filename</name></name> == <name><name>r</name>-&gt;<name>filename</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>canonical_filename</name></name> = <call>(<name>char</name>*)<argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_filepath_merge</name><argument_list>(<argument><expr>&amp;<name><name>rnew</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>fdir</name></expr></argument>, <argument><expr><name>new_file</name></expr></argument>,
<argument><expr><name>APR_FILEPATH_TRUENAME</name></expr></argument>, <argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>status</name></name> = <name>HTTP_FORBIDDEN</name></expr>;</expr_stmt>
<return>return <expr><name>rnew</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>rnew</name>-&gt;<name>canonical_filename</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>canonical_filename</name></name> = <name><name>rnew</name>-&gt;<name>filename</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>fdir</name></expr></argument>, <argument><expr><name>fdirlen</name></expr></argument>)</argument_list></call> == 0
&amp;&amp; <name><name>rnew</name>-&gt;<name>filename</name><index>[<expr><name>fdirlen</name></expr>]</index></name>
&amp;&amp; <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>filename</name></name> + <name>fdirlen</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_allow_options</name><argument_list>(<argument><expr><name>rnew</name></expr></argument>)</argument_list></call> &amp; <name>OPT_SYM_LINKS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>((<name>rv</name> = <call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name><name>rnew</name>-&gt;<name>finfo</name></name></expr></argument>, <argument><expr><name><name>rnew</name>-&gt;<name>filename</name></name></expr></argument>,
<argument><expr><name>APR_FINFO_MIN</name></expr></argument>, <argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name>)
&amp;&amp; (<name>rv</name> != <name>APR_INCOMPLETE</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>finfo</name>.<name>filetype</name></name> = <name>APR_NOFILE</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>((<name>rv</name> = <call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name><name>rnew</name>-&gt;<name>finfo</name></name></expr></argument>, <argument><expr><name><name>rnew</name>-&gt;<name>filename</name></name></expr></argument>,
<argument><expr><name>APR_FINFO_LINK</name> | <name>APR_FINFO_MIN</name></expr></argument>,
<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name>)
&amp;&amp; (<name>rv</name> != <name>APR_INCOMPLETE</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>finfo</name>.<name>filetype</name></name> = <name>APR_NOFILE</name></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>uri</name></name> &amp;&amp; *<name><name>r</name>-&gt;<name>uri</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>udir</name> <init>= <expr><call><name>ap_make_dirstr_parent</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>uri</name></name> = <call><name>ap_make_full_path</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>udir</name></expr></argument>,
<argument><expr><name><name>rnew</name>-&gt;<name>filename</name></name> + <name>fdirlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_parse_uri</name><argument_list>(<argument><expr><name>rnew</name></expr></argument>, <argument><expr><name><name>rnew</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_parse_uri</name><argument_list>(<argument><expr><name>rnew</name></expr></argument>, <argument><expr><name>new_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>uri</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_parse_uri</name><argument_list>(<argument><expr><name>rnew</name></expr></argument>, <argument><expr><name>new_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>uri</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>rnew</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><call><name>ap_is_recursion_limit_exceeded</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>status</name></name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
<return>return <expr><name>rnew</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>res</name> = <call><name>ap_process_request_internal</name><argument_list>(<argument><expr><name>rnew</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rnew</name>-&gt;<name>status</name></name> = <name>res</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rnew</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_run_sub_req</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>DECLINED</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!(<name><name>r</name>-&gt;<name>filename</name></name> &amp;&amp; <name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> != <name>APR_NOFILE</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>retval</name> = <call><name>ap_run_quick_handler</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>retval</name> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>retval</name> = <call><name>ap_invoke_handler</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retval</name> == <name>DONE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>retval</name> = <name>OK</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_finalize_sub_req_protocol</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_destroy_sub_req</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_update_mtime</name><argument_list>(<argument>request_rec *r</argument>, <argument>apr_time_t dependency_mtime</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>mtime</name></name> &lt; <name>dependency_mtime</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>mtime</name></name> = <name>dependency_mtime</name></expr>;</expr_stmt>
}</block></then></if>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_is_initial_req</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<return>return <expr>(<name><name>r</name>-&gt;<name/></name>main == <name>NULL</name>)
&amp;&amp; (<name><name>r</name>-&gt;<name>prev</name></name> == <name>NULL</name>)</expr>;</return>
}</block>
</unit>
