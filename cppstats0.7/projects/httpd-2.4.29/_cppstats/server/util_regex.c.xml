<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="server/util_regex.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_regex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>rxplus_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>preg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_regfree</name><argument_list>(<argument><expr>(<name>ap_regex_t</name> *) <name>preg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_rxplus_t*</argument>)</argument_list></macro> <macro><name>ap_rxplus_compile</name><argument_list>(<argument>apr_pool_t *pool</argument>,
<argument>const char *pattern</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endp</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name> <init>= <expr><name>pattern</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rxstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_rxplus_t</name> *</type><name>ret</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_rxplus_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>delim</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<enum>enum <block>{ <decl><name>SUBSTITUTE</name> <init>= <expr>'s'</expr></init></decl>, <decl><name>MATCH</name> <init>= <expr>'m'</expr></init></decl>}</block> <decl><name>action</name> <init>= <expr><name>MATCH</name></expr></init></decl>;</enum>
<if>if <condition>(<expr>!<call><name>apr_isalnum</name><argument_list>(<argument><expr><name><name>pattern</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>delim</name> = *<name>str</name>++</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>pattern</name><index>[<expr>0</expr>]</index></name> == 's' &amp;&amp; !<call><name>apr_isalnum</name><argument_list>(<argument><expr><name><name>pattern</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>action</name> = <name>SUBSTITUTE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>delim</name> = <name><name>pattern</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> += 2</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>pattern</name><index>[<expr>0</expr>]</index></name> == 'm' &amp;&amp; !<call><name>apr_isalnum</name><argument_list>(<argument><expr><name><name>pattern</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>delim</name> = <name><name>pattern</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> += 2</expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
<if>if <condition>(<expr><name>delim</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>endp</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>endp</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ap_regcomp</name><argument_list>(<argument><expr>&amp;<name><name>ret</name>-&gt;<name>rx</name></name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name><name>ret</name>-&gt;<name>rx</name></name></expr></argument>, <argument><expr><name>rxplus_cleanup</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>rxstr</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>endp</name>-<name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>action</name> == <name>SUBSTITUTE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>str</name> = <name>endp</name>+1</expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>str</name> || (<name>endp</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call>, !<name>endp</name>)</expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>subs</name></name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>endp</name>-<name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<while>while <condition>(<expr>*++<name>endp</name></expr>)</condition> <block>{
<switch>switch <condition>(<expr>*<name>endp</name></expr>)</condition> <block>{
<case>case <expr>'i'</expr>:
<expr_stmt><expr><name><name>ret</name>-&gt;<name>flags</name></name> |= <name>AP_REG_ICASE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'m'</expr>:
<expr_stmt><expr><name><name>ret</name>-&gt;<name>flags</name></name> |= <name>AP_REG_NEWLINE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'n'</expr>:
<expr_stmt><expr><name><name>ret</name>-&gt;<name>flags</name></name> |= <name>AP_REG_NOMEM</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'g'</expr>:
<expr_stmt><expr><name><name>ret</name>-&gt;<name>flags</name></name> |= <name>AP_REG_MULTI</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'s'</expr>:
<expr_stmt><expr><name><name>ret</name>-&gt;<name>flags</name></name> |= <name>AP_REG_DOTALL</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'^'</expr>:
<expr_stmt><expr><name><name>ret</name>-&gt;<name>flags</name></name> |= <name>AP_REG_NOTBOL</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'$'</expr>:
<expr_stmt><expr><name><name>ret</name>-&gt;<name>flags</name></name> |= <name>AP_REG_NOTEOL</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
}</block></while>
<if>if <condition>(<expr><call><name>ap_regcomp</name><argument_list>(<argument><expr>&amp;<name><name>ret</name>-&gt;<name>rx</name></name></expr></argument>, <argument><expr><name>rxstr</name></expr></argument>, <argument><expr><name><name>ret</name>-&gt;<name>flags</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name><name>ret</name>-&gt;<name>rx</name></name></expr></argument>, <argument><expr><name>rxplus_cleanup</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if>
<if>if <condition>(<expr>!(<name><name>ret</name>-&gt;<name>flags</name></name> &amp; <name>AP_REG_NOMEM</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ret</name>-&gt;<name>nmatch</name></name> = 1</expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>rxstr</name></expr>)</condition> <block>{
<switch>switch <condition>(<expr>*<name>rxstr</name>++</expr>)</condition> <block>{
<case>case <expr>'\\'</expr>:
<if>if <condition>(<expr>*<name>rxstr</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>rxstr</name></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case><case>case <expr>'('</expr>:
<expr_stmt><expr>++<name><name>ret</name>-&gt;<name>nmatch</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
}</block></while>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>pmatch</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>ret</name>-&gt;<name>nmatch</name></name>*<sizeof>sizeof<argument_list>(<argument><expr><name>ap_regmatch_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>ret</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_rxplus_exec</name><argument_list>(<argument>apr_pool_t *pool</argument>, <argument>ap_rxplus_t *rx</argument>,
<argument>const char *pattern</argument>, <argument>char **newpattern</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>startl</name></decl>, <decl><type ref="prev"/><name>oldl</name></decl>, <decl><type ref="prev"/><name>newl</name></decl>, <decl><type ref="prev"/><name>diffsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>remainder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>subs</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_regexec</name><argument_list>(<argument><expr>&amp;<name><name>rx</name>-&gt;<name>rx</name></name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name><name>rx</name>-&gt;<name>nmatch</name></name></expr></argument>, <argument><expr><name><name>rx</name>-&gt;<name>pmatch</name></name></expr></argument>, <argument><expr><name><name>rx</name>-&gt;<name>flags</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rx</name>-&gt;<name>match</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>rx</name>-&gt;<name>match</name></name> = <name>pattern</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>rx</name>-&gt;<name>subs</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>newpattern</name> = <call><name>ap_pregsub</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>rx</name>-&gt;<name>subs</name></name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>,
<argument><expr><name><name>rx</name>-&gt;<name>nmatch</name></name></expr></argument>, <argument><expr><name><name>rx</name>-&gt;<name>pmatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>newpattern</name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>startl</name> = <name><name>rx</name>-&gt;<name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name></expr>;</expr_stmt>
<expr_stmt><expr><name>oldl</name> = <name><name>rx</name>-&gt;<name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_eo</name> - <name>startl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>newl</name> = <call><name>strlen</name><argument_list>(<argument><expr>*<name>newpattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diffsz</name> = <name>newl</name> - <name>oldl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>remainder</name> = <name>pattern</name> + <name>startl</name> + <name>oldl</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>rx</name>-&gt;<name>flags</name></name> &amp; <name>AP_REG_MULTI</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret</name> += <call><name>ap_rxplus_exec</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>rx</name></expr></argument>, <argument><expr><name>remainder</name></expr></argument>, <argument><expr>&amp;<name>subs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name> &gt; 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>diffsz</name> += <call><name>strlen</name><argument_list>(<argument><expr><name>subs</name></expr></argument>)</argument_list></call> - <call><name>strlen</name><argument_list>(<argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>remainder</name> = <name>subs</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>subs</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call> + 1 + <name>diffsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>subs</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>startl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>subs</name>+<name>startl</name></expr></argument>, <argument><expr>*<name>newpattern</name></expr></argument>, <argument><expr><name>newl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>subs</name>+<name>startl</name>+<name>newl</name></expr></argument>, <argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>newpattern</name> = <name>subs</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>ret</name></expr>;</return>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_rxplus_nmatch</name><argument_list>(<argument>ap_rxplus_t *rx</argument>)</argument_list></macro> <block>{
<return>return <expr>(<name><name>rx</name>-&gt;<name>match</name></name> != <name>NULL</name>) ? <name><name>rx</name>-&gt;<name>nmatch</name></name> : 0</expr>;</return>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_rxplus_match</name><argument_list>(<argument>ap_rxplus_t *rx</argument>, <argument>int n</argument>, <argument>int *len</argument>,
<argument>const char **match</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>n</name> &gt;= 0 &amp;&amp; <name>n</name> &lt; <call><name>ap_rxplus_nmatch</name><argument_list>(<argument><expr><name>rx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>match</name> = <name><name>rx</name>-&gt;<name>match</name></name> + <name><name>rx</name>-&gt;<name>pmatch</name><index>[<expr><name>n</name></expr>]</index></name>.<name>rm_so</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>len</name> = <name><name>rx</name>-&gt;<name>pmatch</name><index>[<expr><name>n</name></expr>]</index></name>.<name>rm_eo</name> - <name><name>rx</name>-&gt;<name>pmatch</name><index>[<expr><name>n</name></expr>]</index></name>.<name>rm_so</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>len</name> = -1</expr>;</expr_stmt>
<expr_stmt><expr>*<name>match</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char*</argument>)</argument_list></macro> <macro><name>ap_rxplus_pmatch</name><argument_list>(<argument>apr_pool_t *pool</argument>, <argument>ap_rxplus_t *rx</argument>, <argument>int n</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>match</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_rxplus_match</name><argument_list>(<argument><expr><name>rx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
</unit>
