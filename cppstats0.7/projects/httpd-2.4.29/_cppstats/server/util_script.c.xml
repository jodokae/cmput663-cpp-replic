<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="server/util_script.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDLIB_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_ebcdic.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCL_DOS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;os2.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APLOG_MODULE_INDEX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_MODULE_INDEX</name></cpp:macro> <cpp:value>AP_CORE_MODULE_INDEX</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>http2env</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>w</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>res</name> <init>= <expr>(<name>char</name> *)<call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"HTTP_"</expr></argument>)</argument_list></sizeof> + <call><name>strlen</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cp</name> <init>= <expr><name>res</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>cp</name>++ = 'H'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>cp</name>++ = 'T'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>cp</name>++ = 'T'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>cp</name>++ = 'P'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>cp</name>++ = '_'</expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>c</name> = *<name>w</name>++) != 0</expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>apr_isalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>cp</name>++ = <call><name>apr_toupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> == '-'</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>cp</name>++ = '_'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>APLOGrtrace1</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Not exporting header with invalid name as envvar: %s"</expr></argument>,
<argument><expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if>
}</block></while>
<expr_stmt><expr>*<name>cp</name> = 0</expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_unless_null</name><parameter_list>(<param><decl><type><name>apr_table_t</name> *</type><name>table</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>name</name> &amp;&amp; <name>val</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>env2env</name><parameter_list>(<param><decl><type><name>apr_table_t</name> *</type><name>table</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>add_unless_null</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>getenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char **</argument>)</argument_list></macro> <macro><name>ap_create_environment</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>apr_table_t *t</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>env_arr</name> <init>= <expr><call><name>apr_table_elts</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>elts</name> <init>= <expr>(const <name>apr_table_entry_t</name> *) <name><name>env_arr</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>env</name> <init>= <expr>(<name>char</name> **) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>(<name><name>env_arr</name>-&gt;<name>nelts</name></name> + 2) * <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>whack</name></decl>;</decl_stmt>
<expr_stmt><expr><name>j</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>apr_table_get</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr>"TZ"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>tz</name> = <call><name>getenv</name><argument_list>(<argument><expr>"TZ"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tz</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>env</name><index>[<expr><name>j</name>++</expr>]</index></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"TZ="</expr></argument>, <argument><expr><name>tz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>env_arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr>!<name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name><name>env</name><index>[<expr><name>j</name></expr>]</index></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"="</expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>whack</name> = <name><name>env</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>whack</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>whack</name>++ = '_'</expr>;</expr_stmt>
}</block></then></if>
<while>while <condition>(<expr>*<name>whack</name> != '='</expr>)</condition> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>!<call><name>apr_isalnum</name><argument_list>(<argument><expr>*<name>whack</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>whack</name> != '(' &amp;&amp; *<name>whack</name> != ')'</expr>)</condition><then> <block>{
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr>!<call><name>apr_isalnum</name><argument_list>(<argument><expr>*<name>whack</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr>*<name>whack</name> = '_'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>++<name>whack</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>++<name>j</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>env</name><index>[<expr><name>j</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>env</name></expr>;</return>
}</block></for>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_add_common_vars</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name><name>r</name>-&gt;<name>server</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name> <init>=
<expr>(<name>core_dir_config</name> *)<call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>env_temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>hdrs_arr</name> <init>= <expr><call><name>apr_table_elts</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>hdrs</name> <init>= <expr>(const <name>apr_table_entry_t</name> *) <name><name>hdrs_arr</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>rport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>q</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_is_empty_table</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>e</name> = <name><name>r</name>-&gt;<name>subprocess_env</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>e</name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>25 + <name><name>hdrs_arr</name>-&gt;<name>nelts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>hdrs_arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr>!<name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"Content-type"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"CONTENT_TYPE"</expr></argument>, <argument><expr><name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"Content-length"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"CONTENT_LENGTH"</expr></argument>, <argument><expr><name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SECURITY_HOLE_PASS_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <if>if <condition>(<expr>!<call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"Proxy"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<empty_stmt>;</empty_stmt>
}</block></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SECURITY_HOLE_PASS_AUTHORIZATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"Authorization"</expr></argument>)</argument_list></call>
|| !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"Proxy-Authorization"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>cgi_pass_auth</name></name> == <name>AP_CGI_PASS_AUTH_ON</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>add_unless_null</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>http2env</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else
<expr_stmt><expr><call><name>add_unless_null</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>http2env</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if></else></if>
}</block></for>
<expr_stmt><expr><name>env_temp</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"PATH"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>env_temp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>env_temp</name> = <call><name>getenv</name><argument_list>(<argument><expr>"PATH"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>env_temp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>env_temp</name> = <name>DEFAULT_PATH</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"PATH"</expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>env_temp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>env2env</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"SystemRoot"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>env2env</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"COMSPEC"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>env2env</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"PATHEXT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>env2env</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"WINDIR"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>env2env</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"COMSPEC"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>env2env</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"ETC"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>env2env</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"DPATH"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>env2env</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"PERLLIB_PREFIX"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BEOS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>env2env</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"LIBRARY_PATH"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>env2env</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"DYLD_LIBRARY_PATH"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>env2env</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"LIBPATH"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HPUX__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>env2env</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"SHLIB_PATH"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>env2env</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"LD_LIBRARY_PATH"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>env2env</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"LD_LIBRARY_PATH"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"SERVER_SIGNATURE"</expr></argument>, <argument><expr><call><name>ap_psignature</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"SERVER_SOFTWARE"</expr></argument>, <argument><expr><call><name>ap_get_server_banner</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"SERVER_NAME"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>ap_get_server_name_for_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"SERVER_ADDR"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>local_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"SERVER_PORT"</expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%u"</expr></argument>, <argument><expr><call><name>ap_get_server_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_unless_null</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"REMOTE_HOST"</expr></argument>,
<argument><expr><call><name>ap_get_useragent_host</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>REMOTE_HOST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"REMOTE_ADDR"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>useragent_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"DOCUMENT_ROOT"</expr></argument>, <argument><expr><call><name>ap_document_root</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"REQUEST_SCHEME"</expr></argument>, <argument><expr><call><name>ap_http_scheme</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"CONTEXT_PREFIX"</expr></argument>, <argument><expr><call><name>ap_context_prefix</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"CONTEXT_DOCUMENT_ROOT"</expr></argument>, <argument><expr><call><name>ap_context_document_root</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"SERVER_ADMIN"</expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>server_admin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy-noquery"</expr></argument>)</argument_list></call> &amp;&amp; (<name>q</name> = <call><name>ap_strchr</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>'?'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>q</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"SCRIPT_FILENAME"</expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>q</name> = '?'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"SCRIPT_FILENAME"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>rport</name> = <name><name>c</name>-&gt;<name>client_addr</name>-&gt;<name>port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"REMOTE_PORT"</expr></argument>, <argument><expr><call><name>apr_itoa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>rport</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>user</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"REMOTE_USER"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>r</name>-&gt;<name>prev</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>back</name> <init>= <expr><name><name>r</name>-&gt;<name>prev</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>back</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>back</name>-&gt;<name>user</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"REDIRECT_REMOTE_USER"</expr></argument>, <argument><expr><name><name>back</name>-&gt;<name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>back</name> = <name><name>back</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
}</block></while>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>add_unless_null</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"AUTH_TYPE"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>ap_auth_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>env_temp</name> = <call><name>ap_get_remote_logname</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>env_temp</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"REMOTE_IDENT"</expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>env_temp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>prev</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>qualify_redirect_url</name></name> != <name>AP_CORE_CONFIG_ON</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>add_unless_null</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"REDIRECT_URL"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>prev</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_uri_t</name> *</type><name>uri</name> <init>= <expr>&amp;<name><name>r</name>-&gt;<name>prev</name>-&gt;<name>parsed_uri</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>uri</name>-&gt;<name>scheme</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>uri</name>-&gt;<name>scheme</name></name> = (<name>char</name>*)<call><name>ap_http_scheme</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>uri</name>-&gt;<name>port</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>uri</name>-&gt;<name>port</name></name> = <call><name>ap_get_server_port</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uri</name>-&gt;<name>port_str</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%u"</expr></argument>, <argument><expr><name><name>uri</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>uri</name>-&gt;<name>hostname</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>uri</name>-&gt;<name>hostname</name></name> = (<name>char</name>*)<call><name>ap_get_server_name_for_url</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>add_unless_null</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"REDIRECT_URL"</expr></argument>,
<argument><expr><call><name>apr_uri_unparse</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>add_unless_null</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"REDIRECT_QUERY_STRING"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>prev</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>e</name> != <name><name>r</name>-&gt;<name>subprocess_env</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_overlap</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>APR_OVERLAP_TABLES_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_find_path_info</name><argument_list>(<argument>const char *uri</argument>, <argument>const char *path_info</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>lu</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lp</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>path_info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>lu</name>-- &amp;&amp; <name>lp</name>-- &amp;&amp; <name><name>uri</name><index>[<expr><name>lu</name></expr>]</index></name> == <name><name>path_info</name><index>[<expr><name>lp</name></expr>]</index></name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>path_info</name><index>[<expr><name>lp</name></expr>]</index></name> == '/'</expr>)</condition><then> <block>{
<while>while <condition>(<expr><name>lu</name> &amp;&amp; <name><name>uri</name><index>[<expr><name>lu</name>-1</expr>]</index></name> == '/'</expr>)</condition> <expr_stmt><expr><name>lu</name>--</expr>;</expr_stmt></while>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr><name>lu</name> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>lu</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<while>while <condition>(<expr><name><name>uri</name><index>[<expr><name>lu</name></expr>]</index></name> != '\0' &amp;&amp; <name><name>uri</name><index>[<expr><name>lu</name></expr>]</index></name> != '/'</expr>)</condition> <block>{
<expr_stmt><expr><name>lu</name>++</expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>lu</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>original_uri</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>first</name></decl>, *<decl><type ref="prev"/><name>last</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>the_request</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>(<name>char</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>first</name> = <name><name>r</name>-&gt;<name>the_request</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>first</name> &amp;&amp; !<call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>first</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr>++<name>first</name></expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>first</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr>++<name>first</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>last</name> = <name>first</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>last</name> &amp;&amp; !<call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>last</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr>++<name>last</name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name> - <name>first</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_add_cgi_vars</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>e</name> <init>= <expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name> <init>=
<expr>(<name>core_dir_config</name> *)<call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>request_uri_from_original</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>request_uri_rule</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"GATEWAY_INTERFACE"</expr></argument>, <argument><expr>"CGI/1.1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"SERVER_PROTOCOL"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"REQUEST_METHOD"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"QUERY_STRING"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>args</name></name> ? <name><name>r</name>-&gt;<name>args</name></name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>cgi_var_rules</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>request_uri_rule</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>cgi_var_rules</name></name></expr></argument>, <argument><expr>"REQUEST_URI"</expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>request_uri_rule</name> &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name>request_uri_rule</name></expr></argument>, <argument><expr>"current-uri"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>request_uri_from_original</name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"REQUEST_URI"</expr></argument>,
<argument><expr><name>request_uri_from_original</name> ? <call><name>original_uri</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> : <name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>protocol</name></name></expr></argument>, <argument><expr>"INCLUDED"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"SCRIPT_NAME"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>path_info</name></name> &amp;&amp; *<name><name>r</name>-&gt;<name>path_info</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"PATH_INFO"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>path_info</name></name> || !*<name><name>r</name>-&gt;<name>path_info</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"SCRIPT_NAME"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>path_info_start</name> <init>= <expr><call><name>ap_find_path_info</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"SCRIPT_NAME"</expr></argument>,
<argument><expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>path_info_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"PATH_INFO"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>path_info</name></name> &amp;&amp; <name><name>r</name>-&gt;<name>path_info</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>pa_req</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pa_req</name> = <call><name>ap_sub_req_lookup_uri</name><argument_list>(<argument><expr><call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>pa_req</name>-&gt;<name>filename</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>pt</name> <init>= <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>pa_req</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>pa_req</name>-&gt;<name>path_info</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>apr_filepath_merge</name><argument_list>(<argument><expr>&amp;<name>pt</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>APR_FILEPATH_NATIVE</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"PATH_TRANSLATED"</expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>pa_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>set_cookie_doo_doo</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>v</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_UNSET</name></cpp:macro> <cpp:value>(-HTTP_OK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_LOG_MARK</name></cpp:macro> <cpp:value>__FILE__,__LINE__,module_index</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_scan_script_header_err_core_ex</name><argument_list>(<argument>request_rec *r</argument>, <argument>char *buffer</argument>,
<argument>int (*getsfunc) (char *, int, void *)</argument>,
<argument>void *getsfunc_data</argument>,
<argument>int module_index</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>x</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>w</name></decl>, *<decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cgi_status</name> <init>= <expr><name>HTTP_UNSET</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>merge</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>cookie_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>trace_log</name> <init>= <expr><call><name>APLOG_R_MODULE_IS_LEVEL</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>module_index</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_header</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>buffer</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>buffer</name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>w</name> = <name>buffer</name> ? <name>buffer</name> : <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>merge</name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cookie_table</name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>set_cookie_doo_doo</name></expr></argument>, <argument><expr><name>cookie_table</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Set-Cookie"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call>(*<name>getsfunc</name>) <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>MAX_STRING_LEN</name> - 1</expr></argument>, <argument><expr><name>getsfunc_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rv</name> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name> <init>= <expr>"Premature end of script headers"</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>first_header</name></expr>)</condition><then>
<expr_stmt><expr><name>msg</name> = "End of script output before headers"</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>SCRIPT_LOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name>|<name>APLOG_TOCLIENT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"%s: %s"</expr></argument>, <argument><expr><name>msg</name></expr></argument>,
<argument><expr><call><name>apr_filepath_name_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>rv</name> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>SCRIPT_LOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name>|<name>APLOG_TOCLIENT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Script timed out before returning headers: %s"</expr></argument>,
<argument><expr><call><name>apr_filepath_name_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_GATEWAY_TIME_OUT</name></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><name>p</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> &gt; 0 &amp;&amp; <name><name>w</name><index>[<expr><name>p</name> - 1</expr>]</index></name> == '\n'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>p</name> &gt; 1 &amp;&amp; <name><name>w</name><index>[<expr><name>p</name> - 2</expr>]</index></name> == <name>CR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>w</name><index>[<expr><name>p</name> - 2</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>w</name><index>[<expr><name>p</name> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>w</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>cond_status</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>cgi_status</name> == <name>HTTP_UNSET</name>) &amp;&amp; (<name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_GET</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>cond_status</name> = <call><name>ap_meets_conditions</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_overlap</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr><name>merge</name></expr></argument>,
<argument><expr><name>APR_OVERLAP_TABLES_MERGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>apr_is_empty_table</name><argument_list>(<argument><expr><name>cookie_table</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Set-Cookie"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name> = <call><name>apr_table_overlay</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr><name>cookie_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>cond_status</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>trace_log</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>first_header</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>SCRIPT_LOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Headers from script '%s':"</expr></argument>,
<argument><expr><call><name>apr_filepath_name_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>SCRIPT_LOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>" %s"</expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<if>if <condition>(<expr>!(<name>l</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>maybeASCII</name> <init>= <expr>0</expr></init>, <name>maybeEBCDIC</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>cp</name></decl>, <decl><type ref="prev"/><name>native</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>inbytes_left</name></decl>, <decl><type ref="prev"/><name>outbytes_left</name></decl>;</decl_stmt>
<for>for (<init><expr><name>cp</name> = <name>w</name></expr>;</init> <condition><expr>*<name>cp</name> != '\0'</expr>;</condition> <incr><expr>++<name>cp</name></expr></incr>) <block>{
<expr_stmt><expr><name>native</name> = <call><name>apr_xlate_conv_byte</name><argument_list>(<argument><expr><name>ap_hdrs_from_ascii</name></expr></argument>, <argument><expr>*<name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_isprint</name><argument_list>(<argument><expr>*<name>cp</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>apr_isprint</name><argument_list>(<argument><expr><name>native</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>++<name>maybeEBCDIC</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<call><name>apr_isprint</name><argument_list>(<argument><expr>*<name>cp</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>apr_isprint</name><argument_list>(<argument><expr><name>native</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>++<name>maybeASCII</name></expr>;</expr_stmt></then></if>
}</block></for>
<if>if <condition>(<expr><name>maybeASCII</name> &gt; <name>maybeEBCDIC</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>SCRIPT_LOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02660</expr></argument>)</argument_list></call> "CGI Interface Error: "
"Script headers apparently ASCII: (CGI = %s)"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inbytes_left</name> = <name>outbytes_left</name> = <name>cp</name> - <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_xlate_conv_buffer</name><argument_list>(<argument><expr><name>ap_hdrs_from_ascii</name></expr></argument>,
<argument><expr><name>w</name></expr></argument>, <argument><expr>&amp;<name>inbytes_left</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr>&amp;<name>outbytes_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!(<name>l</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>buffer</name></expr>)</condition><then> <block>{
<while>while <condition>(<expr><call>(*<name>getsfunc</name>)<argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>MAX_STRING_LEN</name> - 1</expr></argument>, <argument><expr><name>getsfunc_data</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition> <block>{
<continue>continue;</continue>
}</block></while>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>SCRIPT_LOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name>|<name>APLOG_TOCLIENT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"malformed header from script '%s': Bad header: %.30s"</expr></argument>,
<argument><expr><call><name>apr_filepath_name_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>l</name>++ = '\0'</expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>l</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr>++<name>l</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"Content-type"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>endp</name> <init>= <expr><name>l</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>endp</name> &gt; <name>l</name> &amp;&amp; <call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>endp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr>*<name>endp</name>-- = '\0'</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>tmp</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_content_type_tolower</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"Status"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>cgi_status</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>ap_is_HTTP_VALID_RESPONSE</name><argument_list>(<argument><expr><name>cgi_status</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>SCRIPT_LOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name>|<name>APLOG_TOCLIENT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Invalid status line from script '%s': %.30s"</expr></argument>,
<argument><expr><call><name>apr_filepath_name_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>APLOGrtrace1</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>SCRIPT_LOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Status line from script '%s': %.30s"</expr></argument>,
<argument><expr><call><name>apr_filepath_name_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"Location"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"Content-Range"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"Transfer-Encoding"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"ETag"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"Last-Modified"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_update_mtime</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>apr_date_parse_http</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_last_modified</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"Set-Cookie"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_add</name><argument_list>(<argument><expr><name>cookie_table</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_table_add</name><argument_list>(<argument><expr><name>merge</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<expr_stmt><expr><name>first_header</name> = 0</expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_scan_script_header_err_core</name><argument_list>(<argument>request_rec *r</argument>, <argument>char *buffer</argument>,
<argument>int (*getsfunc) (char *, int, void *)</argument>,
<argument>void *getsfunc_data</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>ap_scan_script_header_err_core_ex</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>getsfunc</name></expr></argument>,
<argument><expr><name>getsfunc_data</name></expr></argument>,
<argument><expr><name>APLOG_MODULE_INDEX</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>getsfunc_FILE</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>, <param><decl><type><name>void</name> *</type><name>f</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>apr_file_gets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr>(<name>apr_file_t</name> *) <name>f</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_scan_script_header_err</name><argument_list>(<argument>request_rec *r</argument>, <argument>apr_file_t *f</argument>,
<argument>char *buffer</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>ap_scan_script_header_err_core_ex</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>getsfunc_FILE</name></expr></argument>, <argument><expr><name>f</name></expr></argument>,
<argument><expr><name>APLOG_MODULE_INDEX</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_scan_script_header_err_ex</name><argument_list>(<argument>request_rec *r</argument>, <argument>apr_file_t *f</argument>,
<argument>char *buffer</argument>, <argument>int module_index</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>ap_scan_script_header_err_core_ex</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>getsfunc_FILE</name></expr></argument>, <argument><expr><name>f</name></expr></argument>,
<argument><expr><name>module_index</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>getsfunc_BRIGADE</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name> <init>= <expr>(<name>apr_bucket_brigade</name> *)<name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_end</name> <init>= <expr><name>buf</name> + <name>len</name> - 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>dst</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name> <init>= <expr><call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>(<name>dst</name> &lt; <name>dst_end</name>) &amp;&amp; !<name>done</name> &amp;&amp; <name>e</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call>
&amp;&amp; !<call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bucket_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bucket_data_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type> <name>next</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>&amp;<name>bucket_data</name></expr></argument>, <argument><expr>&amp;<name>bucket_data_len</name></expr></argument>,
<argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> || (<name>bucket_data_len</name> == 0)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>dst</name> = '\0'</expr>;</expr_stmt>
<return>return <expr><call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> ? -1 : 0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>src</name> = <name>bucket_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_end</name> = <name>bucket_data</name> + <name>bucket_data_len</name></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>src</name> &lt; <name>src_end</name>) &amp;&amp; (<name>dst</name> &lt; <name>dst_end</name>) &amp;&amp; !<name>done</name></expr>)</condition> <block>{
<if>if <condition>(<expr>*<name>src</name> == '\n'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>done</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>*<name>src</name> != '\r'</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>dst</name>++ = *<name>src</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><name>src</name>++</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>src</name> &lt; <name>src_end</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_split</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>src</name> - <name>bucket_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>next</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <name>next</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>*<name>dst</name> = 0</expr>;</expr_stmt>
<return>return <expr><name>done</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_scan_script_header_err_brigade</name><argument_list>(<argument>request_rec *r</argument>,
<argument>apr_bucket_brigade *bb</argument>,
<argument>char *buffer</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>ap_scan_script_header_err_core_ex</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>getsfunc_BRIGADE</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>,
<argument><expr><name>APLOG_MODULE_INDEX</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_scan_script_header_err_brigade_ex</name><argument_list>(<argument>request_rec *r</argument>,
<argument>apr_bucket_brigade *bb</argument>,
<argument>char *buffer</argument>,
<argument>int module_index</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>ap_scan_script_header_err_core_ex</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>getsfunc_BRIGADE</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>,
<argument><expr><name>module_index</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<struct>struct <name>vastrs</name> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>curpos</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>int</name></type> <name>getsfunc_STRING</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>w</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>, <param><decl><type><name>void</name> *</type><name>pvastrs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>vastrs</name> *</type><name>strs</name> <init>= <expr>(struct <name>vastrs</name>*) <name>pvastrs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>strs</name>-&gt;<name>curpos</name></name> || !*<name><name>strs</name>-&gt;<name>curpos</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>w</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>p</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name><name>strs</name>-&gt;<name>curpos</name></name></expr></argument>, <argument><expr>'\n'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name></expr>)</condition><then>
<expr_stmt><expr>++<name>p</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>p</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name><name>strs</name>-&gt;<name>curpos</name></name></expr></argument>, <argument><expr>'\0'</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>t</name> = <name>p</name> - <name><name>strs</name>-&gt;<name>curpos</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>t</name> &gt; <name>len</name></expr>)</condition><then>
<expr_stmt><expr><name>t</name> = <name>len</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>strs</name>-&gt;<name>curpos</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><index>[<expr><name>t</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>strs</name>-&gt;<name>curpos</name><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name><name>strs</name>-&gt;<name>arg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strs</name>-&gt;<name>curpos</name></name> = <call><name>va_arg</name><argument_list>(<argument><expr><name><name>strs</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>strs</name>-&gt;<name>curpos</name></name> += <name>t</name></expr>;</expr_stmt></else></if>
<return>return <expr><name>t</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_scan_script_header_err_strs_ex</name><argument_list>(<argument>request_rec *r</argument>,
<argument>char *buffer</argument>,
<argument>int module_index</argument>,
<argument>const char **termch</argument>,
<argument>int *termarg</argument>, <argument>...</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type>struct <name>vastrs</name></type> <name>strs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name><name>strs</name>.<name>args</name></name></expr></argument>, <argument><expr><name>termarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strs</name>.<name>arg</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>strs</name>.<name>curpos</name></name> = <call><name>va_arg</name><argument_list>(<argument><expr><name><name>strs</name>.<name>args</name></name></expr></argument>, <argument><expr><name>char</name>*</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <call><name>ap_scan_script_header_err_core_ex</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>getsfunc_STRING</name></expr></argument>,
<argument><expr>(<name>void</name> *) &amp;<name>strs</name></expr></argument>, <argument><expr><name>module_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>termch</name></expr>)</condition><then>
<expr_stmt><expr>*<name>termch</name> = <name><name>strs</name>.<name>curpos</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>termarg</name></expr>)</condition><then>
<expr_stmt><expr>*<name>termarg</name> = <name><name>strs</name>.<name>arg</name></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name><name>strs</name>.<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_scan_script_header_err_strs</name><argument_list>(<argument>request_rec *r</argument>,
<argument>char *buffer</argument>,
<argument>const char **termch</argument>,
<argument>int *termarg</argument>, <argument>...</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type>struct <name>vastrs</name></type> <name>strs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name><name>strs</name>.<name>args</name></name></expr></argument>, <argument><expr><name>termarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strs</name>.<name>arg</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>strs</name>.<name>curpos</name></name> = <call><name>va_arg</name><argument_list>(<argument><expr><name><name>strs</name>.<name>args</name></name></expr></argument>, <argument><expr><name>char</name>*</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <call><name>ap_scan_script_header_err_core_ex</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>getsfunc_STRING</name></expr></argument>,
<argument><expr>(<name>void</name> *) &amp;<name>strs</name></expr></argument>, <argument><expr><name>APLOG_MODULE_INDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>termch</name></expr>)</condition><then>
<expr_stmt><expr>*<name>termch</name> = <name><name>strs</name>.<name>curpos</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>termarg</name></expr>)</condition><then>
<expr_stmt><expr>*<name>termarg</name> = <name><name>strs</name>.<name>arg</name></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name><name>strs</name>.<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>argstr_to_table</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>str</name></decl></param>, <param><decl><type><name>apr_table_t</name> *</type><name>parms</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>strtok_state</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>str</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>key</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>"&amp;"</expr></argument>, <argument><expr>&amp;<name>strtok_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>key</name></expr>)</condition> <block>{
<expr_stmt><expr><name>value</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>value</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>value</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>value</name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>value</name> = "1"</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_unescape_url</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_unescape_url</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name>parms</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>"&amp;"</expr></argument>, <argument><expr>&amp;<name>strtok_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_args_to_table</name><argument_list>(<argument>request_rec *r</argument>, <argument>apr_table_t **table</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>t</name> <init>= <expr><call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>argstr_to_table</name><argument_list>(<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>table</name> = <name>t</name></expr>;</expr_stmt>
}</block></block>
</unit>
