<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="server/core.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_fnmatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_random.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_IOVEC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_MEMFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_vhost.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_ebcdic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_listen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_so.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_CPU</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>RLIMIT_DATA</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>RLIMIT_VMEM</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_AS</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>RLIMIT_NPROC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unixd.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LIMIT_REQ_BODY_UNSET</name></cpp:macro> <cpp:value>((apr_off_t) -1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_DEFAULT_LIMIT_REQ_BODY</name></cpp:macro> <cpp:value>((apr_off_t) 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LIMIT_UNSET</name></cpp:macro> <cpp:value>((long) -1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_DEFAULT_LIMIT_XML_BODY</name></cpp:macro> <cpp:value>((apr_size_t)1000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MIN_SENDFILE_BYTES</name></cpp:macro> <cpp:value>(256)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_MAX_INCLUDE_DEPTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MAX_INCLUDE_DEPTH</name></cpp:macro> <cpp:value>(128)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_ACCEPT_PATHINFO_UNSET</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CONTENT_MD5_OFF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CONTENT_MD5_ON</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CONTENT_MD5_UNSET</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<macro><name>APR_HOOK_STRUCT</name><argument_list>(
<argument>APR_HOOK_LINK(get_mgmt_items)
APR_HOOK_LINK(insert_network_bucket)</argument>
)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_ALL</name><argument_list>(<argument>int</argument>, <argument>get_mgmt_items</argument>,
<argument>(apr_pool_t *p, const char *val, apr_hash_t *ht)</argument>,
<argument>(p, val, ht)</argument>, <argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_FIRST</name><argument_list>(<argument>apr_status_t</argument>, <argument>insert_network_bucket</argument>,
<argument>(conn_rec *c, apr_bucket_brigade *bb,
apr_socket_t *socket)</argument>,
<argument>(c, bb, socket)</argument>, <argument>AP_DECLINED</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APLOG_MODULE_INDEX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_MODULE_INDEX</name></cpp:macro> <cpp:value>AP_CORE_MODULE_INDEX</cpp:value></cpp:define>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>ap_filter_rec_t</name> *</type><name>ap_subreq_core_filter_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>ap_filter_rec_t</name> *</type><name>ap_core_output_filter_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>ap_filter_rec_t</name> *</type><name>ap_content_length_filter_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>ap_filter_rec_t</name> *</type><name>ap_core_input_filter_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>int</name></type> <name>ap_document_root_check</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>errordocument_default</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_array_header_t</name> *</type><name>saved_server_config_defines</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_table_t</name> *</type><name>server_config_defined_vars</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>int</name></type> <name>ap_main_state</name> <init>= <expr><name>AP_SQ_MS_INITIAL_STARTUP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>int</name></type> <name>ap_run_mode</name> <init>= <expr><name>AP_SQ_RM_UNKNOWN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>int</name></type> <name>ap_config_generation</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_core_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>a</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dir</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = (<name>core_dir_config</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>core_dir_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>opts</name></name> = <name>dir</name> ? <name>OPT_UNSET</name> : <name>OPT_UNSET</name>|<name>OPT_SYM_LINKS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>opts_add</name></name> = <name><name>conf</name>-&gt;<name>opts_remove</name></name> = <name>OPT_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>override</name></name> = <name>OR_UNSET</name>|<name>OR_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>override_opts</name></name> = <name>OPT_UNSET</name> | <name>OPT_ALL</name> | <name>OPT_SYM_OWNER</name> | <name>OPT_MULTI</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>content_md5</name></name> = <name>AP_CONTENT_MD5_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>accept_path_info</name></name> = <name>AP_ACCEPT_PATHINFO_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>use_canonical_name</name></name> = <name>USE_CANONICAL_NAME_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>use_canonical_phys_port</name></name> = <name>USE_CANONICAL_PHYS_PORT_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>hostname_lookups</name></name> = <name>HOSTNAME_LOOKUP_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>limit_req_body</name></name> = <name>AP_LIMIT_REQ_BODY_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>limit_xml_body</name></name> = <name>AP_LIMIT_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>server_signature</name></name> = <name>srv_sig_unset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>add_default_charset</name></name> = <name>ADD_DEFAULT_CHARSET_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>add_default_charset_name</name></name> = <name>DEFAULT_ADD_DEFAULT_CHARSET_NAME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>etag_bits</name></name> = <name>ETAG_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>etag_add</name></name> = <name>ETAG_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>etag_remove</name></name> = <name>ETAG_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>enable_mmap</name></name> = <name>ENABLE_MMAP_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>enable_sendfile</name></name> = <name>ENABLE_SENDFILE_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>allow_encoded_slashes</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>decode_encoded_slashes</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>max_ranges</name></name> = <name>AP_MAXRANGES_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>max_overlaps</name></name> = <name>AP_MAXRANGES_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>max_reversals</name></name> = <name>AP_MAXRANGES_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>cgi_pass_auth</name></name> = <name>AP_CGI_PASS_AUTH_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>qualify_redirect_url</name></name> = <name>AP_CORE_CONFIG_UNSET</name></expr>;</expr_stmt>
<return>return <expr>(<name>void</name> *)<name>conf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_core_dir_configs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>a</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>newv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>base</name> <init>= <expr>(<name>core_dir_config</name> *)<name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>new</name> <init>= <expr>(<name>core_dir_config</name> *)<name>newv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = (<name>core_dir_config</name> *)<call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>core_dir_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>d</name></name> = <name><name>new</name>-&gt;<name>d</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>d_is_fnmatch</name></name> = <name><name>new</name>-&gt;<name>d_is_fnmatch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>d_components</name></name> = <name><name>new</name>-&gt;<name>d_components</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>r</name></name> = <name><name>new</name>-&gt;<name>r</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>refs</name></name> = <name><name>new</name>-&gt;<name>refs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>condition</name></name> = <name><name>new</name>-&gt;<name>condition</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>opts</name></name> &amp; <name>OPT_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>opts_add</name></name> = (<name><name>conf</name>-&gt;<name>opts_add</name></name> &amp; ~<name><name>new</name>-&gt;<name>opts_remove</name></name>) | <name><name>new</name>-&gt;<name>opts_add</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>opts_remove</name></name> = (<name><name>conf</name>-&gt;<name>opts_remove</name></name> &amp; ~<name><name>new</name>-&gt;<name>opts_add</name></name>)
| <name><name>new</name>-&gt;<name>opts_remove</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>opts</name></name> = (<name><name>conf</name>-&gt;<name>opts</name></name> &amp; ~<name><name>conf</name>-&gt;<name>opts_remove</name></name>) | <name><name>conf</name>-&gt;<name>opts_add</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>((<name><name>base</name>-&gt;<name>opts</name></name> &amp; (<name>OPT_INCLUDES</name>|<name>OPT_INC_WITH_EXEC</name>))
== (<name>OPT_INCLUDES</name>|<name>OPT_INC_WITH_EXEC</name>))
&amp;&amp; ((<name><name>new</name>-&gt;<name>opts</name></name> &amp; (<name>OPT_INCLUDES</name>|<name>OPT_INC_WITH_EXEC</name>))
== <name>OPT_INCLUDES</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>opts</name></name> &amp;= ~<name>OPT_INC_WITH_EXEC</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>opts</name></name> = <name><name>new</name>-&gt;<name>opts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>opts_add</name></name> = <name><name>new</name>-&gt;<name>opts_add</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>opts_remove</name></name> = <name><name>new</name>-&gt;<name>opts_remove</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>!(<name><name>new</name>-&gt;<name>override</name></name> &amp; <name>OR_UNSET</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>override</name></name> = <name><name>new</name>-&gt;<name>override</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!(<name><name>new</name>-&gt;<name>override_opts</name></name> &amp; <name>OPT_UNSET</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>override_opts</name></name> = <name><name>new</name>-&gt;<name>override_opts</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>override_list</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>override_list</name></name> = <name><name>new</name>-&gt;<name>override_list</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>response_code_exprs</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>response_code_exprs</name></name> = <name><name>new</name>-&gt;<name>response_code_exprs</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>new</name>-&gt;<name>response_code_exprs</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>response_code_exprs</name></name> = <call><name>apr_hash_overlay</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name><name>new</name>-&gt;<name>response_code_exprs</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>response_code_exprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>hostname_lookups</name></name> != <name>HOSTNAME_LOOKUP_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>hostname_lookups</name></name> = <name><name>new</name>-&gt;<name>hostname_lookups</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>content_md5</name></name> != <name>AP_CONTENT_MD5_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>content_md5</name></name> = <name><name>new</name>-&gt;<name>content_md5</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>accept_path_info</name></name> != <name>AP_ACCEPT_PATHINFO_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>accept_path_info</name></name> = <name><name>new</name>-&gt;<name>accept_path_info</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>use_canonical_name</name></name> != <name>USE_CANONICAL_NAME_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>use_canonical_name</name></name> = <name><name>new</name>-&gt;<name>use_canonical_name</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>use_canonical_phys_port</name></name> != <name>USE_CANONICAL_PHYS_PORT_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>use_canonical_phys_port</name></name> = <name><name>new</name>-&gt;<name>use_canonical_phys_port</name></name></expr>;</expr_stmt>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_CPU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>limit_cpu</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>limit_cpu</name></name> = <name><name>new</name>-&gt;<name>limit_cpu</name></name></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_DATA</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_VMEM</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_AS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>limit_mem</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>limit_mem</name></name> = <name><name>new</name>-&gt;<name>limit_mem</name></name></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_NPROC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>limit_nproc</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>limit_nproc</name></name> = <name><name>new</name>-&gt;<name>limit_nproc</name></name></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>limit_req_body</name></name> != <name>AP_LIMIT_REQ_BODY_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>limit_req_body</name></name> = <name><name>new</name>-&gt;<name>limit_req_body</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>limit_xml_body</name></name> != <name>AP_LIMIT_UNSET</name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>limit_xml_body</name></name> = <name><name>new</name>-&gt;<name>limit_xml_body</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>sec_file</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>sec_file</name></name> = <name><name>new</name>-&gt;<name>sec_file</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>new</name>-&gt;<name>sec_file</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>sec_file</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>sec_file</name></name></expr></argument>, <argument><expr><name><name>new</name>-&gt;<name>sec_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>sec_if</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>sec_if</name></name> = <name><name>new</name>-&gt;<name>sec_if</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>new</name>-&gt;<name>sec_if</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>sec_if</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>sec_if</name></name></expr></argument>, <argument><expr><name><name>new</name>-&gt;<name>sec_if</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>server_signature</name></name> != <name>srv_sig_unset</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>server_signature</name></name> = <name><name>new</name>-&gt;<name>server_signature</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>add_default_charset</name></name> != <name>ADD_DEFAULT_CHARSET_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>add_default_charset</name></name> = <name><name>new</name>-&gt;<name>add_default_charset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>add_default_charset_name</name></name> = <name><name>new</name>-&gt;<name>add_default_charset_name</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>mime_type</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>mime_type</name></name> = <name><name>new</name>-&gt;<name>mime_type</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>handler</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>handler</name></name> = <name><name>new</name>-&gt;<name>handler</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>expr_handler</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>expr_handler</name></name> = <name><name>new</name>-&gt;<name>expr_handler</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>output_filters</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>output_filters</name></name> = <name><name>new</name>-&gt;<name>output_filters</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>input_filters</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>input_filters</name></name> = <name><name>new</name>-&gt;<name>input_filters</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>etag_bits</name></name> == <name>ETAG_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>etag_add</name></name> =
(<name><name>conf</name>-&gt;<name>etag_add</name></name> &amp; (~ <name><name>new</name>-&gt;<name>etag_remove</name></name>)) | <name><name>new</name>-&gt;<name>etag_add</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>etag_remove</name></name> =
(<name><name>conf</name>-&gt;<name>etag_remove</name></name> &amp; (~ <name><name>new</name>-&gt;<name>etag_add</name></name>)) | <name><name>new</name>-&gt;<name>etag_remove</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>etag_bits</name></name> =
(<name><name>conf</name>-&gt;<name>etag_bits</name></name> &amp; (~ <name><name>conf</name>-&gt;<name>etag_remove</name></name>)) | <name><name>conf</name>-&gt;<name>etag_add</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>etag_bits</name></name> = <name><name>new</name>-&gt;<name>etag_bits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>etag_add</name></name> = <name><name>new</name>-&gt;<name>etag_add</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>etag_remove</name></name> = <name><name>new</name>-&gt;<name>etag_remove</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>etag_bits</name></name> != <name>ETAG_NONE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>etag_bits</name></name> &amp;= (~ <name>ETAG_NONE</name>)</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>enable_mmap</name></name> != <name>ENABLE_MMAP_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>enable_mmap</name></name> = <name><name>new</name>-&gt;<name>enable_mmap</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>enable_sendfile</name></name> != <name>ENABLE_SENDFILE_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>enable_sendfile</name></name> = <name><name>new</name>-&gt;<name>enable_sendfile</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>allow_encoded_slashes</name></name> = <name><name>new</name>-&gt;<name>allow_encoded_slashes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>decode_encoded_slashes</name></name> = <name><name>new</name>-&gt;<name>decode_encoded_slashes</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>log</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>log</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>log</name></name> = <name><name>new</name>-&gt;<name>log</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>log</name></name> = <call><name>ap_new_log_config</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>new</name>-&gt;<name>log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_merge_log_config</name><argument_list>(<argument><expr><name><name>base</name>-&gt;<name>log</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>max_ranges</name></name> = <name><name>new</name>-&gt;<name>max_ranges</name></name> != <name>AP_MAXRANGES_UNSET</name> ? <name><name>new</name>-&gt;<name>max_ranges</name></name> : <name><name>base</name>-&gt;<name>max_ranges</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>max_overlaps</name></name> = <name><name>new</name>-&gt;<name>max_overlaps</name></name> != <name>AP_MAXRANGES_UNSET</name> ? <name><name>new</name>-&gt;<name>max_overlaps</name></name> : <name><name>base</name>-&gt;<name>max_overlaps</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>max_reversals</name></name> = <name><name>new</name>-&gt;<name>max_reversals</name></name> != <name>AP_MAXRANGES_UNSET</name> ? <name><name>new</name>-&gt;<name>max_reversals</name></name> : <name><name>base</name>-&gt;<name>max_reversals</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>cgi_pass_auth</name></name> = <name><name>new</name>-&gt;<name>cgi_pass_auth</name></name> != <name>AP_CGI_PASS_AUTH_UNSET</name> ? <name><name>new</name>-&gt;<name>cgi_pass_auth</name></name> : <name><name>base</name>-&gt;<name>cgi_pass_auth</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>cgi_var_rules</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>cgi_var_rules</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>cgi_var_rules</name></name> = <name><name>new</name>-&gt;<name>cgi_var_rules</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>cgi_var_rules</name></name> = <call><name>apr_hash_overlay</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>new</name>-&gt;<name>cgi_var_rules</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>cgi_var_rules</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>AP_CORE_MERGE_FLAG</name><argument_list>(<argument><expr><name>qualify_redirect_url</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>void</name>*)<name>conf</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SO_ACCEPTFILTER</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ACCEPT_FILTER_NAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCEPT_FILTER_NAME</name></cpp:macro> <cpp:value>"httpready"</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD_version</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__FreeBSD_version</name> &lt; 411000</expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ACCEPT_FILTER_NAME</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCEPT_FILTER_NAME</name></cpp:macro> <cpp:value>"dataready"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_core_server_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>a</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_virtual</name> <init>= <expr><name><name>s</name>-&gt;<name>is_virtual</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = (<name>core_server_config</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>core_server_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>is_virtual</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ap_document_root</name></name> = <name>DOCUMENT_LOCATION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>access_name</name></name> = <name>DEFAULT_ACCESS_FNAME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>accf_map</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SO_ACCEPTFILTER</name></expr></cpp:if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>accf_map</name></name></expr></argument>, <argument><expr>"http"</expr></argument>, <argument><expr><name>ACCEPT_FILTER_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>accf_map</name></name></expr></argument>, <argument><expr>"https"</expr></argument>, <argument><expr>"dataready"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>accf_map</name></name></expr></argument>, <argument><expr>"http"</expr></argument>, <argument><expr>"connect"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>accf_map</name></name></expr></argument>, <argument><expr>"https"</expr></argument>, <argument><expr>"connect"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>accf_map</name></name></expr></argument>, <argument><expr>"http"</expr></argument>, <argument><expr>"data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>accf_map</name></name></expr></argument>, <argument><expr>"https"</expr></argument>, <argument><expr>"data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>sec_dir</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>40</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_conf_vector_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>sec_url</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>40</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_conf_vector_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>trace_enable</name></name> = <name>AP_TRACE_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>protocols</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>protocols_honor_order</name></name> = -1</expr>;</expr_stmt>
<return>return <expr>(<name>void</name> *)<name>conf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_core_server_configs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>virtv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>base</name> <init>= <expr>(<name>core_server_config</name> *)<name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>virt</name> <init>= <expr>(<name>core_server_config</name> *)<name>virtv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name> <init>= <expr>(<name>core_server_config</name> *)
<call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>core_server_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>virt</name>-&gt;<name>ap_document_root</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ap_document_root</name></name> = <name><name>virt</name>-&gt;<name>ap_document_root</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>virt</name>-&gt;<name>access_name</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>access_name</name></name> = <name><name>virt</name>-&gt;<name>access_name</name></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>sec_dir</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>sec_dir</name></name></expr></argument>, <argument><expr><name><name>virt</name>-&gt;<name>sec_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>sec_url</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>sec_url</name></name></expr></argument>, <argument><expr><name><name>virt</name>-&gt;<name>sec_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>virt</name>-&gt;<name>redirect_limit</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>redirect_limit</name></name> = <name><name>virt</name>-&gt;<name>redirect_limit</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>virt</name>-&gt;<name>subreq_limit</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>subreq_limit</name></name> = <name><name>virt</name>-&gt;<name>subreq_limit</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>virt</name>-&gt;<name>trace_enable</name></name> != <name>AP_TRACE_UNSET</name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>trace_enable</name></name> = <name><name>virt</name>-&gt;<name>trace_enable</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>virt</name>-&gt;<name>http09_enable</name></name> != <name>AP_HTTP09_UNSET</name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>http09_enable</name></name> = <name><name>virt</name>-&gt;<name>http09_enable</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>virt</name>-&gt;<name>http_conformance</name></name> != <name>AP_HTTP_CONFORMANCE_UNSET</name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>http_conformance</name></name> = <name><name>virt</name>-&gt;<name>http_conformance</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>virt</name>-&gt;<name>http_methods</name></name> != <name>AP_HTTP_METHODS_UNSET</name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>http_methods</name></name> = <name><name>virt</name>-&gt;<name>http_methods</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>virt</name>-&gt;<name>protocol</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>protocol</name></name> = <name><name>virt</name>-&gt;<name>protocol</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>virt</name>-&gt;<name>gprof_dir</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>gprof_dir</name></name> = <name><name>virt</name>-&gt;<name>gprof_dir</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>virt</name>-&gt;<name>error_log_format</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>error_log_format</name></name> = <name><name>virt</name>-&gt;<name>error_log_format</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>virt</name>-&gt;<name>error_log_conn</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>error_log_conn</name></name> = <name><name>virt</name>-&gt;<name>error_log_conn</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>virt</name>-&gt;<name>error_log_req</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>error_log_req</name></name> = <name><name>virt</name>-&gt;<name>error_log_req</name></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>merge_trailers</name></name> = (<name><name>virt</name>-&gt;<name>merge_trailers</name></name> != <name>AP_MERGE_TRAILERS_UNSET</name>)
? <name><name>virt</name>-&gt;<name>merge_trailers</name></name>
: <name><name>base</name>-&gt;<name>merge_trailers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>protocols</name></name> = ((<name><name>virt</name>-&gt;<name>protocols</name>-&gt;<name>nelts</name></name> &gt; 0)?
<name><name>virt</name>-&gt;<name>protocols</name></name> : <name><name>base</name>-&gt;<name>protocols</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>protocols_honor_order</name></name> = ((<name><name>virt</name>-&gt;<name>protocols_honor_order</name></name> &lt; 0)?
<name><name>base</name>-&gt;<name>protocols_honor_order</name></name> :
<name><name>virt</name>-&gt;<name>protocols_honor_order</name></name>)</expr>;</expr_stmt>
<return>return <expr><name>conf</name></expr>;</return>
}</block></function>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_add_per_dir_conf</name><argument_list>(<argument>server_rec *s</argument>, <argument>void *dir_config</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>sconf</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>new_space</name> <init>= <expr>(<name>void</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>sconf</name>-&gt;<name>sec_dir</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>new_space</name> = <name>dir_config</name></expr>;</expr_stmt>
}</block>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_add_per_url_conf</name><argument_list>(<argument>server_rec *s</argument>, <argument>void *url_config</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>sconf</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>new_space</name> <init>= <expr>(<name>void</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>sconf</name>-&gt;<name>sec_url</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>new_space</name> = <name>url_config</name></expr>;</expr_stmt>
}</block>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_add_file_conf</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>core_dir_config *conf</argument>,
<argument>void *url_config</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>void</name> **</type><name>new_space</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>sec_file</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>sec_file</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_conf_vector_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>new_space</name> = (<name>void</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>sec_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>new_space</name> = <name>url_config</name></expr>;</expr_stmt>
}</block>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_add_if_conf</name><argument_list>(<argument>apr_pool_t *p</argument>,
<argument>core_dir_config *conf</argument>,
<argument>void *if_config</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>void</name> **</type><name>new_space</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>new</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name>if_config</name></expr></argument>, <argument><expr>&amp;<name>core_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>sec_if</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>sec_if</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_conf_vector_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>condition_ifelse</name></name> &amp; <name>AP_CONDITION_ELSE</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>have_if</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>sec_if</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>lastelt</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>sec_if</name></name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>sec_if</name>-&gt;<name>nelts</name></name> - 1</expr></argument>,
<argument><expr><name>ap_conf_vector_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>last</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name>lastelt</name></expr></argument>, <argument><expr>&amp;<name>core_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>last</name>-&gt;<name>condition_ifelse</name></name> &amp; <name>AP_CONDITION_IF</name></expr>)</condition><then>
<expr_stmt><expr><name>have_if</name> = 1</expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<name>have_if</name></expr>)</condition><then>
<return>return <expr>"&lt;Else&gt; or &lt;ElseIf&gt; section without previous &lt;If&gt; or "
"&lt;ElseIf&gt; section in same scope"</expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>new_space</name> = (<name>void</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>sec_if</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>new_space</name> = <name>if_config</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<struct>struct <name>reorder_sort_rec</name> <block>{
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>elt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>orig_index</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>int</name></type> <name>reorder_sorter</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>va</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>vb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> struct <name>reorder_sort_rec</name> *</type><name>a</name> <init>= <expr><name>va</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> struct <name>reorder_sort_rec</name> *</type><name>b</name> <init>= <expr><name>vb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>core_a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>core_b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>core_a</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>elt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>core_b</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>elt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>core_a</name>-&gt;<name>r</name></name> &amp;&amp; <name><name>core_b</name>-&gt;<name>r</name></name></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>core_a</name>-&gt;<name>r</name></name> &amp;&amp; !<name><name>core_b</name>-&gt;<name>r</name></name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if></else></if>
<if>if <condition>(<expr><name><name>core_a</name>-&gt;<name>d_components</name></name> &lt; <name><name>core_b</name>-&gt;<name>d_components</name></name></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>core_a</name>-&gt;<name>d_components</name></name> &gt; <name><name>core_b</name>-&gt;<name>d_components</name></name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if></else></if>
<return>return <expr><name><name>a</name>-&gt;<name>orig_index</name></name> - <name><name>b</name>-&gt;<name>orig_index</name></name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>ap_core_reorder_directories</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>sconf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>sec_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>reorder_sort_rec</name> *</type><name>sortbin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nelts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> **</type><name>elts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sconf</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sec_dir</name> = <name><name>sconf</name>-&gt;<name>sec_dir</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nelts</name> = <name><name>sec_dir</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>elts</name> = (<name>ap_conf_vector_t</name> **)<name><name>sec_dir</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>nelts</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>tmp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sortbin</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>sec_dir</name>-&gt;<name>nelts</name></name> * <sizeof>sizeof<argument_list>(<argument><expr>*<name>sortbin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nelts</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name><name>sortbin</name><index>[<expr><name>i</name></expr>]</index></name>.<name>orig_index</name> = <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sortbin</name><index>[<expr><name>i</name></expr>]</index></name>.<name>elt</name> = <name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>sortbin</name></expr></argument>, <argument><expr><name>nelts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>sortbin</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>reorder_sorter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nelts</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>sortbin</name><index>[<expr><name>i</name></expr>]</index></name>.<name>elt</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_allow_options</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name> <init>=
<expr>(<name>core_dir_config</name> *)<call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>conf</name>-&gt;<name>opts</name></name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_allow_overrides</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = (<name>core_dir_config</name> *)<call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>conf</name>-&gt;<name>override</name></name></expr>;</return>
}</block>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>authn_ap_auth_type</name></expr></argument>)</argument_list></call> *<name>authn_ap_auth_type</name></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_auth_type</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>authn_ap_auth_type</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>authn_ap_auth_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>authn_ap_auth_name</name></expr></argument>)</argument_list></call> *<name>authn_ap_auth_name</name></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_auth_name</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>authn_ap_auth_name</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>authn_ap_auth_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>access_compat_ap_satisfies</name></expr></argument>)</argument_list></call> *<name>access_compat_ap_satisfies</name></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_satisfies</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>access_compat_ap_satisfies</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>access_compat_ap_satisfies</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>SATISFY_NOSPEC</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_document_root</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>sconf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_request_config</name> *</type><name>rconf</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>rconf</name>-&gt;<name>document_root</name></name></expr>)</condition><then>
<return>return <expr><name><name>rconf</name>-&gt;<name>document_root</name></name></expr>;</return></then></if>
<expr_stmt><expr><name>sconf</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>sconf</name>-&gt;<name>ap_document_root</name></name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_context_prefix</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>core_request_config</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>context_prefix</name></name></expr>)</condition><then>
<return>return <expr><name><name>conf</name>-&gt;<name>context_prefix</name></name></expr>;</return></then>
<else>else
<return>return <expr>""</expr>;</return></else></if>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_context_document_root</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>core_request_config</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>context_document_root</name></name></expr>)</condition><then>
<return>return <expr><name><name>conf</name>-&gt;<name>context_document_root</name></name></expr>;</return></then>
<else>else
<return>return <expr><call><name>ap_document_root</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_set_document_root</name><argument_list>(<argument>request_rec *r</argument>, <argument>const char *document_root</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>core_request_config</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>document_root</name></name> = <name>document_root</name></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_set_context_info</name><argument_list>(<argument>request_rec *r</argument>, <argument>const char *context_prefix</argument>,
<argument>const char *context_document_root</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>core_request_config</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>context_prefix</name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>context_prefix</name></name> = <name>context_prefix</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>context_document_root</name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>context_document_root</name></name> = <name>context_document_root</name></expr>;</expr_stmt></then></if>
}</block>
<function><type><name>char</name> *</type><name>ap_response_code_string</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>error_index</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>dirconf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_request_config</name> *</type><name>reqconf</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>response</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>expr</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>reqconf</name>-&gt;<name>response_code_strings</name></name> != <name>NULL</name>
&amp;&amp; <name><name>reqconf</name>-&gt;<name>response_code_strings</name><index>[<expr><name>error_index</name></expr>]</index></name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name><name>reqconf</name>-&gt;<name>response_code_strings</name><index>[<expr><name>error_index</name></expr>]</index></name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>dirconf</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>dirconf</name>-&gt;<name>response_code_exprs</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>expr</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>dirconf</name>-&gt;<name>response_code_exprs</name></name></expr></argument>, <argument><expr>&amp;<name>error_index</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>expr</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>char</name> *) <name>expr</name> == &amp;<name>errordocument_default</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>response</name> = <call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(
<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02841</expr></argument>)</argument_list></call> "core: ErrorDocument: can't "
"evaluate require expression: %s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>int</name></type> <name>do_double_reverse</name> <parameter_list>(<param><decl><type><name>int</name></type> <name>double_reverse</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>remote_host</name></decl></param>,
<param><decl><type><name>apr_sockaddr_t</name> *</type><name>client_addr</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>double_reverse</name></expr>)</condition><then> <block>{
<return>return <expr><name>double_reverse</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>remote_host</name> == <name>NULL</name> || <name><name>remote_host</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>sa</name></expr></argument>, <argument><expr><name>remote_host</name></expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<while>while <condition>(<expr><name>sa</name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>apr_sockaddr_equal</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><name>client_addr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>sa</name> = <name><name>sa</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
}</block></then></if>
<return>return <expr>-1</expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_get_remote_host</name><argument_list>(<argument>conn_rec *conn</argument>, <argument>void *dir_config</argument>,
<argument>int type</argument>, <argument>int *str_is_ip</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>hostname_lookups</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ignored_str_is_ip</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>str_is_ip</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>str_is_ip</name> = &amp;<name>ignored_str_is_ip</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>str_is_ip</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>dir_config</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hostname_lookups</name> = ((<name>core_dir_config</name> *)<call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name>dir_config</name></expr></argument>)</argument_list></call>)
-&gt;<name>hostname_lookups</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hostname_lookups</name> == <name>HOSTNAME_LOOKUP_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hostname_lookups</name> = <name>HOSTNAME_LOOKUP_OFF</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>hostname_lookups</name> = <name>HOSTNAME_LOOKUP_OFF</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>type</name> != <name>REMOTE_NOLOOKUP</name>
&amp;&amp; <name><name>conn</name>-&gt;<name>remote_host</name></name> == <name>NULL</name>
&amp;&amp; (<name>type</name> == <name>REMOTE_DOUBLE_REV</name>
|| <name>hostname_lookups</name> != <name>HOSTNAME_LOOKUP_OFF</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_getnameinfo</name><argument_list>(<argument><expr>&amp;<name><name>conn</name>-&gt;<name>remote_host</name></name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>client_addr</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
== <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>remote_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hostname_lookups</name> == <name>HOSTNAME_LOOKUP_DOUBLE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conn</name>-&gt;<name>double_reverse</name></name> = <call><name>do_double_reverse</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>double_reverse</name></name></expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>remote_host</name></name></expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>client_addr</name></name></expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>double_reverse</name></name> != 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conn</name>-&gt;<name>remote_host</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>remote_host</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conn</name>-&gt;<name>remote_host</name></name> = ""</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>type</name> == <name>REMOTE_DOUBLE_REV</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conn</name>-&gt;<name>double_reverse</name></name> = <call><name>do_double_reverse</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>double_reverse</name></name></expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>remote_host</name></name></expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>client_addr</name></name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>double_reverse</name></name> == -1</expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>remote_host</name></name> != <name>NULL</name> &amp;&amp; <name><name>conn</name>-&gt;<name>remote_host</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<return>return <expr><name><name>conn</name>-&gt;<name>remote_host</name></name></expr>;</return>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>type</name> == <name>REMOTE_HOST</name> || <name>type</name> == <name>REMOTE_DOUBLE_REV</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>str_is_ip</name> = 1</expr>;</expr_stmt>
<return>return <expr><name><name>conn</name>-&gt;<name>client_ip</name></name></expr>;</return>
}</block></else></if>
}</block></else></if>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_get_useragent_host</name><argument_list>(<argument>request_rec *r</argument>,
<argument>int type</argument>, <argument>int *str_is_ip</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>conn</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hostname_lookups</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ignored_str_is_ip</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>useragent_addr</name></name> || (<name><name>r</name>-&gt;<name>useragent_addr</name></name> == <name><name>conn</name>-&gt;<name>client_addr</name></name>)</expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_get_remote_host</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>str_is_ip</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>str_is_ip</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>str_is_ip</name> = &amp;<name>ignored_str_is_ip</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>str_is_ip</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>hostname_lookups</name> = ((<name>core_dir_config</name> *)
<call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call>)
-&gt;<name>hostname_lookups</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hostname_lookups</name> == <name>HOSTNAME_LOOKUP_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hostname_lookups</name> = <name>HOSTNAME_LOOKUP_OFF</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>type</name> != <name>REMOTE_NOLOOKUP</name>
&amp;&amp; <name><name>r</name>-&gt;<name>useragent_host</name></name> == <name>NULL</name>
&amp;&amp; (<name>type</name> == <name>REMOTE_DOUBLE_REV</name>
|| <name>hostname_lookups</name> != <name>HOSTNAME_LOOKUP_OFF</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_getnameinfo</name><argument_list>(<argument><expr>&amp;<name><name>r</name>-&gt;<name>useragent_host</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>useragent_addr</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
== <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>useragent_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hostname_lookups</name> == <name>HOSTNAME_LOOKUP_DOUBLE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>double_reverse</name></name> = <call><name>do_double_reverse</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>double_reverse</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>useragent_host</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>useragent_addr</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>double_reverse</name></name> != 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>useragent_host</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>useragent_host</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>useragent_host</name></name> = ""</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>type</name> == <name>REMOTE_DOUBLE_REV</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>double_reverse</name></name> = <call><name>do_double_reverse</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>double_reverse</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>useragent_host</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>useragent_addr</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>double_reverse</name></name> == -1</expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>useragent_host</name></name> != <name>NULL</name> &amp;&amp; <name><name>r</name>-&gt;<name>useragent_host</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<return>return <expr><name><name>r</name>-&gt;<name>useragent_host</name></name></expr>;</return>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>type</name> == <name>REMOTE_HOST</name> || <name>type</name> == <name>REMOTE_DOUBLE_REV</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>str_is_ip</name> = 1</expr>;</expr_stmt>
<return>return <expr><name><name>r</name>-&gt;<name>useragent_ip</name></name></expr>;</return>
}</block></else></if>
}</block></else></if>
}</block>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ap_ident_lookup</name></expr></argument>)</argument_list></call> *<name>ident_lookup</name></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_get_remote_logname</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>remote_logname</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>remote_logname</name></name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>ident_lookup</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ident_lookup</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_get_server_name</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>conn</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>d</name> = (<name>core_dir_config</name> *)<call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>d</name>-&gt;<name>use_canonical_name</name></name></expr>)</condition> <block>{
<case>case <expr><name>USE_CANONICAL_NAME_ON</name></expr>:
<expr_stmt><expr><name>retval</name> = <name><name>r</name>-&gt;<name>server</name>-&gt;<name>server_hostname</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>USE_CANONICAL_NAME_DNS</name></expr>:
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>local_host</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_getnameinfo</name><argument_list>(<argument><expr>&amp;<name><name>conn</name>-&gt;<name>local_host</name></name></expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>local_addr</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>local_host</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>server_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>local_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>retval</name> = <name><name>conn</name>-&gt;<name>local_host</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>USE_CANONICAL_NAME_OFF</name></expr>:
</case><case>case <expr><name>USE_CANONICAL_NAME_UNSET</name></expr>:
<expr_stmt><expr><name>retval</name> = <name><name>r</name>-&gt;<name>hostname</name></name> ? <name><name>r</name>-&gt;<name>hostname</name></name> : <name><name>r</name>-&gt;<name>server</name>-&gt;<name>server_hostname</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00109</expr></argument>)</argument_list></call>
"ap_get_server_name: Invalid UCN Option somehow"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> = "localhost"</expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<return>return <expr><name>retval</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_get_server_name_for_url</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>plain_server_name</name> <init>= <expr><call><name>ap_get_server_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_IPV6</name></expr></cpp:if>
<if>if <condition>(<expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>plain_server_name</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"["</expr></argument>, <argument><expr><name>plain_server_name</name></expr></argument>, <argument><expr>"]"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>plain_server_name</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_port_t</argument>)</argument_list></macro> <macro><name>ap_get_server_port</name><argument_list>(<argument>const request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name> <init>=
<expr>(<name>core_dir_config</name> *)<call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>d</name>-&gt;<name>use_canonical_name</name></name></expr>)</condition> <block>{
<case>case <expr><name>USE_CANONICAL_NAME_OFF</name></expr>:
</case><case>case <expr><name>USE_CANONICAL_NAME_DNS</name></expr>:
</case><case>case <expr><name>USE_CANONICAL_NAME_UNSET</name></expr>:
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>use_canonical_phys_port</name></name> == <name>USE_CANONICAL_PHYS_PORT_ON</name></expr>)</condition><then>
<expr_stmt><expr><name>port</name> = <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>port_str</name></name> ? <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>port</name></name> :
<name><name>r</name>-&gt;<name>connection</name>-&gt;<name>local_addr</name>-&gt;<name>port</name></name> ? <name><name>r</name>-&gt;<name>connection</name>-&gt;<name>local_addr</name>-&gt;<name>port</name></name> :
<name><name>r</name>-&gt;<name>server</name>-&gt;<name>port</name></name> ? <name><name>r</name>-&gt;<name>server</name>-&gt;<name>port</name></name> :
<call><name>ap_default_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>port</name> = <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>port_str</name></name> ? <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>port</name></name> :
<name><name>r</name>-&gt;<name>server</name>-&gt;<name>port</name></name> ? <name><name>r</name>-&gt;<name>server</name>-&gt;<name>port</name></name> :
<call><name>ap_default_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>USE_CANONICAL_NAME_ON</name></expr>:
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>use_canonical_phys_port</name></name> == <name>USE_CANONICAL_PHYS_PORT_ON</name></expr>)</condition><then>
<expr_stmt><expr><name>port</name> = <name><name>r</name>-&gt;<name>server</name>-&gt;<name>port</name></name> ? <name><name>r</name>-&gt;<name>server</name>-&gt;<name>port</name></name> :
<name><name>r</name>-&gt;<name>connection</name>-&gt;<name>local_addr</name>-&gt;<name>port</name></name> ? <name><name>r</name>-&gt;<name>connection</name>-&gt;<name>local_addr</name>-&gt;<name>port</name></name> :
<call><name>ap_default_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>port</name> = <name><name>r</name>-&gt;<name>server</name>-&gt;<name>port</name></name> ? <name><name>r</name>-&gt;<name>server</name>-&gt;<name>port</name></name> :
<call><name>ap_default_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00110</expr></argument>)</argument_list></call>
"ap_get_server_port: Invalid UCN Option somehow"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> = <call><name>ap_default_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<return>return <expr><name>port</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_construct_url</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const char *uri</argument>,
<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>port</name> <init>= <expr><call><name>ap_get_server_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>host</name> <init>= <expr><call><name>ap_get_server_name_for_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_is_default_port</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>ap_http_scheme</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"://"</expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%s://%s:%u%s"</expr></argument>, <argument><expr><call><name>ap_http_scheme</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_off_t</argument>)</argument_list></macro> <macro><name>ap_get_limit_req_body</name><argument_list>(<argument>const request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name> <init>=
<expr>(<name>core_dir_config</name> *)<call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>limit_req_body</name></name> == <name>AP_LIMIT_REQ_BODY_UNSET</name></expr>)</condition><then> <block>{
<return>return <expr><name>AP_DEFAULT_LIMIT_REQ_BODY</name></expr>;</return>
}</block></then></if>
<return>return <expr><name><name>d</name>-&gt;<name>limit_req_body</name></name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ap_directive_t</name> *</type> <name>find_parent</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_directive_t</name> *</type><name>dirp</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>what</name></decl></param>)</parameter_list> <block>{
<while>while <condition>(<expr><name><name>dirp</name>-&gt;<name>parent</name></name> != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><name>dirp</name> = <name><name>dirp</name>-&gt;<name>parent</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>dirp</name>-&gt;<name>directive</name></name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>dirp</name></expr>;</return></then></if>
}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_check_cmd_context</name><argument_list>(<argument>cmd_parms *cmd</argument>,
<argument>unsigned forbidden</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>gt</name> <init>= <expr>(<name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name><index>[<expr>0</expr>]</index></name> == '&lt;'
&amp;&amp; <name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call>-1</expr>]</index></name> != '&gt;')
? "&gt;" : ""</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ap_directive_t</name> *</type><name>found</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>forbidden</name> &amp; <name>NOT_IN_VIRTUALHOST</name>) &amp;&amp; <name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>is_virtual</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>gt</name></expr></argument>,
<argument><expr>" cannot occur within &lt;VirtualHost&gt; section"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>forbidden</name> &amp; (<name>NOT_IN_LIMIT</name> | <name>NOT_IN_DIR_LOC_FILE</name>))
&amp;&amp; <name><name>cmd</name>-&gt;<name>limited</name></name> != -1</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>gt</name></expr></argument>,
<argument><expr>" cannot occur within &lt;Limit&gt; or &lt;LimitExcept&gt; "
"section"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>forbidden</name> &amp; <name>NOT_IN_HTACCESS</name>) &amp;&amp; (<name><name>cmd</name>-&gt;<name>pool</name></name> == <name><name>cmd</name>-&gt;<name>temp_pool</name></name>)</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>gt</name></expr></argument>,
<argument><expr>" cannot occur within htaccess files"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>forbidden</name> &amp; <name>NOT_IN_DIR_LOC_FILE</name>) == <name>NOT_IN_DIR_LOC_FILE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>path</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>gt</name></expr></argument>,
<argument><expr>" cannot occur within &lt;Directory/Location/Files&gt; "
"section"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>req_override</name></name> &amp; <name>EXEC_ON_READ</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>((<name>forbidden</name> &amp; <name>NOT_IN_DIRECTORY</name>)
&amp;&amp; ((<name>found</name> = <call><name>find_parent</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>directive</name></name></expr></argument>, <argument><expr>"&lt;Directory"</expr></argument>)</argument_list></call>)
|| (<name>found</name> = <call><name>find_parent</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>directive</name></name></expr></argument>, <argument><expr>"&lt;DirectoryMatch"</expr></argument>)</argument_list></call>)))
|| ((<name>forbidden</name> &amp; <name>NOT_IN_LOCATION</name>)
&amp;&amp; ((<name>found</name> = <call><name>find_parent</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>directive</name></name></expr></argument>, <argument><expr>"&lt;Location"</expr></argument>)</argument_list></call>)
|| (<name>found</name> = <call><name>find_parent</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>directive</name></name></expr></argument>, <argument><expr>"&lt;LocationMatch"</expr></argument>)</argument_list></call>)))
|| ((<name>forbidden</name> &amp; <name>NOT_IN_FILES</name>)
&amp;&amp; ((<name>found</name> = <call><name>find_parent</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>directive</name></name></expr></argument>, <argument><expr>"&lt;Files"</expr></argument>)</argument_list></call>)
|| (<name>found</name> = <call><name>find_parent</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>directive</name></name></expr></argument>, <argument><expr>"&lt;FilesMatch"</expr></argument>)</argument_list></call>)
|| (<name>found</name> = <call><name>find_parent</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>directive</name></name></expr></argument>, <argument><expr>"&lt;If"</expr></argument>)</argument_list></call>)
|| (<name>found</name> = <call><name>find_parent</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>directive</name></name></expr></argument>, <argument><expr>"&lt;ElseIf"</expr></argument>)</argument_list></call>)
|| (<name>found</name> = <call><name>find_parent</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>directive</name></name></expr></argument>, <argument><expr>"&lt;Else"</expr></argument>)</argument_list></call>)))</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>gt</name></expr></argument>,
<argument><expr>" cannot occur within "</expr></argument>, <argument><expr><name><name>found</name>-&gt;<name>directive</name></name></expr></argument>,
<argument><expr>"&gt; section"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_access_name</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>sconf</name> <init>= <expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name>sconf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIR_LOC_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>access_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_resolve_env</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const char * word</argument>)</argument_list></macro> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMALL_EXPANSION</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<struct>struct <name>sll</name> <block>{
<decl_stmt><decl><type>struct <name>sll</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block> <decl>*<name>result</name></decl>, *<decl><type ref="prev"/><name>current</name></decl>, <decl><type ref="prev"/><name><name>sresult</name><index>[<expr><name>SMALL_EXPANSION</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>char</name> *</type><name>res_buf</name></decl>, *<decl><type ref="prev"/><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl>, *<decl><type ref="prev"/><name>e</name></decl>, *<decl><type ref="prev"/><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>spc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>outlen</name></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>'$'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>s</name></expr>)</condition><then> <block>{
<return>return <expr><name>word</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ep</name> = <name>word</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>spc</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <name>current</name> = &amp;(<name><name>sresult</name><index>[<expr><name>spc</name>++</expr>]</index></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>current</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current</name>-&gt;<name>string</name></name> = <name>word</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current</name>-&gt;<name>len</name></name> = <name>s</name> - <name>word</name></expr>;</expr_stmt>
<expr_stmt><expr><name>outlen</name> = <name><name>current</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<do>do <block>{
<if>if <condition>(<expr><name><name>current</name>-&gt;<name>len</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>current</name>-&gt;<name>next</name></name> = (<name>spc</name> &lt; <name>SMALL_EXPANSION</name>)
? &amp;(<name><name>sresult</name><index>[<expr><name>spc</name>++</expr>]</index></name>)
: (struct <name>sll</name> *)<call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>current</name>-&gt;<name>next</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current</name> = <name><name>current</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current</name>-&gt;<name>len</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>*<name>s</name> == '$'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>s</name><index>[<expr>1</expr>]</index></name> == '{' &amp;&amp; (<name>e</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>s</name>+2</expr></argument>, <argument><expr>'}'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr><call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name>+2</expr></argument>, <argument><expr><name>e</name>-<name>s</name>-2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>word</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>server_config_defined_vars</name></expr>)</condition><then>
<expr_stmt><expr><name>word</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>server_config_defined_vars</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<name>word</name></expr>)</condition><then>
<expr_stmt><expr><name>word</name> = <call><name>getenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>word</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>current</name>-&gt;<name>string</name></name> = <name>word</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current</name>-&gt;<name>len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outlen</name> += <name><name>current</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>ap_strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00111</expr></argument>)</argument_list></call>
"Config variable ${%s} is not defined"</expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>current</name>-&gt;<name>string</name></name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current</name>-&gt;<name>len</name></name> = <name>e</name> - <name>s</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>outlen</name> += <name><name>current</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>s</name> = <name>e</name> + 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>current</name>-&gt;<name>string</name></name> = <name>s</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>current</name>-&gt;<name>len</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr>++<name>outlen</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>word</name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>'$'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current</name>-&gt;<name>string</name></name> = <name>word</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current</name>-&gt;<name>len</name></name> = <name>s</name> ? <name>s</name> - <name>word</name> : <name>ep</name> - <name>word</name></expr>;</expr_stmt>
<expr_stmt><expr><name>outlen</name> += <name><name>current</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
}</block></else></if>
}</block> while <condition>(<expr><name>s</name> &amp;&amp; *<name>s</name></expr>)</condition>;</do>
<expr_stmt><expr><name>res_buf</name> = <name>cp</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>outlen</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<if>if <condition>(<expr><name><name>result</name>-&gt;<name>len</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name><name>result</name>-&gt;<name>string</name></name></expr></argument>, <argument><expr><name><name>result</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> += <name><name>result</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <name><name>result</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>result</name></expr>)</condition>;</do>
<expr_stmt><expr><name><name>res_buf</name><index>[<expr><name>outlen</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<return>return <expr><name>res_buf</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>reset_config_defines</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>ap_server_config_defines</name> = <name>saved_server_config_defines</name></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_server_config_defines</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>server_config_defined_vars</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>init_config_defines</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>saved_server_config_defines</name> = <name>ap_server_config_defines</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_server_config_defines</name> = <call><name>apr_array_copy</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>ap_server_config_defines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_define</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_HTACCESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>"Variable name must not contain ':'"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>saved_server_config_defines</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>init_config_defines</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>ap_exists_config_define</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>ap_server_config_defines</name></expr></argument>)</argument_list></call> = <name>name</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>value</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>server_config_defined_vars</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>server_config_defined_vars</name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>server_config_defined_vars</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>unset_define</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>defines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_HTACCESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>"Variable name must not contain ':'"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>saved_server_config_defines</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>init_config_defines</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>defines</name> = (const <name>char</name> **)<name><name>ap_server_config_defines</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>ap_server_config_defines</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>defines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>defines</name><index>[<expr><name>i</name></expr>]</index></name> = *(const <name>char</name> **)<call><name>apr_array_pop</name><argument_list>(<argument><expr><name>ap_server_config_defines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>server_config_defined_vars</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name>server_config_defined_vars</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>generate_error</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name>arg</name> || !*<name>arg</name></expr>)</condition><then> <block>{
<return>return <expr>"The Error directive was used with no message."</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>*<name>arg</name> == '"' || *<name>arg</name> == '\''</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>last</name> <init>= <expr>*(<name>arg</name> + <name>len</name> - 1)</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>arg</name> == <name>last</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name> + 1</expr></argument>, <argument><expr><name>len</name> - 2</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>arg</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GPROF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_gprof_dir</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>sconf</name> <init>= <expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name>sconf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIR_LOC_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>gprof_dir</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_add_default_charset</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>d_</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name> <init>= <expr><name>d_</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"Off"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>add_default_charset</name></name> = <name>ADD_DEFAULT_CHARSET_OFF</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"On"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>add_default_charset</name></name> = <name>ADD_DEFAULT_CHARSET_ON</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>add_default_charset_name</name></name> = <name>DEFAULT_ADD_DEFAULT_CHARSET_NAME</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>add_default_charset</name></name> = <name>ADD_DEFAULT_CHARSET_ON</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>add_default_charset_name</name></name> = <name>arg</name></expr>;</expr_stmt>
}</block></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_document_root</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>sconf</name> <init>= <expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name>sconf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIR_LOC_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>ap_document_root_check</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ap_document_root</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>arg</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>arg</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>"DocumentRoot must be a directory"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_filepath_merge</name><argument_list>(<argument><expr>(<name>char</name>**)&amp;<name><name>conf</name>-&gt;<name>ap_document_root</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>,
<argument><expr><name>APR_FILEPATH_TRUENAME</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name>
|| !<call><name>ap_is_directory</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>is_virtual</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00112</expr></argument>)</argument_list></call>
"Warning: DocumentRoot [%s] does not exist"</expr></argument>,
<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ap_document_root</name></name> = <name>arg</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"DocumentRoot '%s' is not a directory, or is not readable"</expr></argument>,
<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_custom_response</name><argument_list>(<argument>request_rec *r</argument>, <argument>int status</argument>,
<argument>const char *string</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>core_request_config</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>response_code_strings</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>response_code_strings</name></name> =
<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>conf</name>-&gt;<name>response_code_strings</name></name></expr></argument>)</argument_list></sizeof> * <name>RESPONSE_CODES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>idx</name> = <call><name>ap_index_of_response</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>response_code_strings</name><index>[<expr><name>idx</name></expr>]</index></name> =
((<call><name>ap_is_url</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call> || (*<name>string</name> == '/')) &amp;&amp; (*<name>string</name> != '"')) ?
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call> : <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"\""</expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_error_document</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>conf_</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errno_str</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name> <init>= <expr><name>conf_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error_number</name></decl>, <decl><type ref="prev"/><name>index_number</name></decl>, <decl><type ref="prev"/><name>idx500</name></decl>;</decl_stmt>
<enum>enum <block>{ <decl><name>MSG</name></decl>, <decl><name>LOCAL_PATH</name></decl>, <decl><name>REMOTE_PATH</name></decl> }</block> <decl><name>what</name> <init>= <expr><name>MSG</name></expr></init></decl>;</enum>
<expr_stmt><expr><name>error_number</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>errno_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>idx500</name> = <call><name>ap_index_of_response</name><argument_list>(<argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error_number</name> == <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>index_number</name> = <name>idx500</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>index_number</name> = <call><name>ap_index_of_response</name><argument_list>(<argument><expr><name>error_number</name></expr></argument>)</argument_list></call>) == <name>idx500</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Unsupported HTTP response code "</expr></argument>,
<argument><expr><name>errno_str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<if>if <condition>(<expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>msg</name></expr></argument>,<argument><expr>' '</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>what</name> = <name>MSG</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>msg</name><index>[<expr>0</expr>]</index></name> == '/'</expr>)</condition><then>
<expr_stmt><expr><name>what</name> = <name>LOCAL_PATH</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>ap_is_url</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>what</name> = <name>REMOTE_PATH</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>what</name> = <name>MSG</name></expr>;</expr_stmt></else></if></else></if></else></if>
<if>if <condition>(<expr><name>error_number</name> == 401 &amp;&amp; <name>what</name> == <name>REMOTE_PATH</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00113</expr></argument>)</argument_list></call>
"%s:%d cannot use a full URL in a 401 ErrorDocument "
"directive --- ignoring!"</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>line_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>response_code_exprs</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>response_code_exprs</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>"default"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>response_code_exprs</name></name></expr></argument>,
<argument><expr><call><name>apr_pmemdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>index_number</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>index_number</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>index_number</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>&amp;<name>errordocument_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expr_err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>response</name> <init>=
<expr>(<name>what</name> == <name>MSG</name>) ? <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"\""</expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> :
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>expr</name> = <call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><name>AP_EXPR_FLAG_STRING_RESULT</name></expr></argument>,
<argument><expr>&amp;<name>expr_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>expr_err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>,
<argument><expr>"Cannot parse expression in ErrorDocument: "</expr></argument>,
<argument><expr><name>expr_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>response_code_exprs</name></name></expr></argument>,
<argument><expr><call><name>apr_pmemdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>index_number</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>index_number</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>index_number</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_allow_opts</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>allow_options_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>l</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>allow_options_t</name></type> <name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>w</name></decl>, *<decl><type ref="prev"/><name>p</name> <init>= <expr>(<name>char</name> *) <name>l</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tok_state</name></decl>;</decl_stmt>
<while>while <condition>(<expr>(<name>w</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>","</expr></argument>, <argument><expr>&amp;<name>tok_state</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name>first</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>p</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>opts</name> = <name>OPT_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"Indexes"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>OPT_INDEXES</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"Includes"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = (<name>OPT_INCLUDES</name> | <name>OPT_INC_WITH_EXEC</name>)</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"IncludesNOEXEC"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>OPT_INCLUDES</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"FollowSymLinks"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>OPT_SYM_LINKS</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"SymLinksIfOwnerMatch"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>OPT_SYM_OWNER</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"ExecCGI"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>OPT_EXECCGI</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"MultiViews"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>OPT_MULTI</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"RunScripts"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>OPT_MULTI</name>|<name>OPT_EXECCGI</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"None"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>OPT_NONE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"All"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>OPT_ALL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Illegal option "</expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<expr_stmt><expr>*<name>opts</name> |= <name>opt</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>(*<name>opts</name>) &amp;= (~<name>OPT_UNSET</name>)</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_override</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d_</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>l</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name> <init>= <expr><name>d_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>k</name></decl>, *<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_LOCATION</name> | <name>NOT_IN_FILES</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00114</expr></argument>)</argument_list></call>
"Useless use of AllowOverride in line %d of %s."</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>line_num</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_HTACCESS</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>d</name>-&gt;<name>override</name></name> = <name>OR_NONE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>l</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<expr_stmt><expr><name>w</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> = <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>v</name>++ = '\0'</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"Limit"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>override</name></name> |= <name>OR_LIMIT</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr>"Options"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>override</name></name> |= <name>OR_OPTIONS</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name></expr>)</condition><then>
<expr_stmt><expr><call><name>set_allow_opts</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;(<name><name>d</name>-&gt;<name>override_opts</name></name>)</expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>d</name>-&gt;<name>override_opts</name></name> = <name>OPT_ALL</name></expr>;</expr_stmt></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"FileInfo"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>override</name></name> |= <name>OR_FILEINFO</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"AuthConfig"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>override</name></name> |= <name>OR_AUTHCFG</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"Indexes"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>override</name></name> |= <name>OR_INDEXES</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"Nonfatal"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"Override"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>override</name></name> |= <name>NONFATAL_OVERRIDE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"Unknown"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>override</name></name> |= <name>NONFATAL_UNKNOWN</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"All"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>override</name></name> |= <name>NONFATAL_ALL</name></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"None"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>override</name></name> = <name>OR_NONE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"All"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>override</name></name> = <name>OR_ALL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Illegal override option "</expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<expr_stmt><expr><name><name>d</name>-&gt;<name>override</name></name> &amp;= ~<name>OR_UNSET</name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cgi_pass_auth</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d_</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name> <init>= <expr><name>d_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>cgi_pass_auth</name></name> = <name>flag</name> ? <name>AP_CGI_PASS_AUTH_ON</name> : <name>AP_CGI_PASS_AUTH_OFF</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cgi_var</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d_</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>var</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rule_</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name> <init>= <expr><name>d_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>rule</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>rule_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>rule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"REQUEST_URI"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>rule</name></expr></argument>, <argument><expr>"current-uri"</expr></argument>)</argument_list></call> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>rule</name></expr></argument>, <argument><expr>"original-uri"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>"Valid rules for REQUEST_URI are 'current-uri' and 'original-uri'"</expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Unrecognized CGI variable: \""</expr></argument>,
<argument><expr><name>var</name></expr></argument>, <argument><expr>"\""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
<if>if <condition>(<expr>!<name><name>d</name>-&gt;<name>cgi_var_rules</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>cgi_var_rules</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>d</name>-&gt;<name>cgi_var_rules</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>rule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_qualify_redirect_url</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d_</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name> <init>= <expr><name>d_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>qualify_redirect_url</name></name> = <name>flag</name> ? <name>AP_CORE_CONFIG_ON</name> : <name>AP_CORE_CONFIG_OFF</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_override_list</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d_</name></decl></param>, <param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> *<specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name> <init>= <expr><name>d_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_LOCATION</name> | <name>NOT_IN_FILES</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00115</expr></argument>)</argument_list></call>
"Useless use of AllowOverrideList at %s:%d"</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>line_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_HTACCESS</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>d</name>-&gt;<name>override_list</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>"None"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>argc</name> != 1</expr>)</condition><then> <block>{
<return>return <expr>"'None' not allowed with other directives in "
"AllowOverrideList"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>command_rec</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> *</type><name>mod</name> <init>= <expr><name>ap_top_module</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> = <call><name>ap_find_command_in_modules</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00116</expr></argument>)</argument_list></call> "Discarding unrecognized "
"directive `%s' in AllowOverrideList at %s:%d"</expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>filename</name></name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>line_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr>(<name><name>result</name>-&gt;<name>req_override</name></name> &amp; (<name>OR_ALL</name>|<name>ACCESS_CONF</name>)) == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02304</expr></argument>)</argument_list></call> "Discarding directive `%s' not "
"allowed in AllowOverrideList at %s:%d"</expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>filename</name></name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>line_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>d</name>-&gt;<name>override_list</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></else></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_options</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d_</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>l</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name> <init>= <expr><name>d_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>allow_options_t</name></type> <name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>merge</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>all_none</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>action</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>l</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>w</name> <init>= <expr><call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>action</name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>w</name> == '+' || *<name>w</name> == '-'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>action</name> = *(<name>w</name>++)</expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>merge</name> &amp;&amp; !<name>first</name> &amp;&amp; !<name>all_none</name></expr>)</condition><then> <block>{
<return>return <expr>"Either all Options must start with + or -, or no Option may."</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>merge</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>first</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>opts</name></name> = <name>OPT_NONE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>merge</name></expr>)</condition><then> <block>{
<return>return <expr>"Either all Options must start with + or -, or no Option may."</expr>;</return>
}</block></then></if></else></if></else></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"Indexes"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>OPT_INDEXES</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"Includes"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = (<name>OPT_INCLUDES</name> | <name>OPT_INC_WITH_EXEC</name>)</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"IncludesNOEXEC"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>OPT_INCLUDES</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"FollowSymLinks"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>OPT_SYM_LINKS</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"SymLinksIfOwnerMatch"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>OPT_SYM_OWNER</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"ExecCGI"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>OPT_EXECCGI</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"MultiViews"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>OPT_MULTI</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"RunScripts"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>OPT_MULTI</name>|<name>OPT_EXECCGI</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"None"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>first</name></expr>)</condition><then> <block>{
<return>return <expr>"'Options None' must be the first Option given."</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>merge</name></expr>)</condition><then> <block>{
<return>return <expr>"You may not use 'Options +None' or 'Options -None'."</expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><name>opt</name> = <name>OPT_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>all_none</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"All"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>first</name></expr>)</condition><then> <block>{
<return>return <expr>"'Options All' must be the first option given."</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>merge</name></expr>)</condition><then> <block>{
<return>return <expr>"You may not use 'Options +All' or 'Options -All'."</expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><name>opt</name> = <name>OPT_ALL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>all_none</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Illegal option "</expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<if>if <condition>( <expr>(<name><name>cmd</name>-&gt;<name>override_opts</name></name> &amp; <name>opt</name>) != <name>opt</name></expr> )</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Option "</expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr>" not allowed here"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>action</name> == '-'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>opts_remove</name></name> |= <name>opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>opts_add</name></name> &amp;= ~<name>opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>opts</name></name> &amp;= ~<name>opt</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>action</name> == '+'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>opts_add</name></name> |= <name>opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>opts_remove</name></name> &amp;= ~<name>opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>opts</name></name> |= <name>opt</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>opts</name></name> |= <name>opt</name></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><name>first</name> = 0</expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_default_type</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d_</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>(<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call> != 0) &amp;&amp; (<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call> != 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00117</expr></argument>)</argument_list></call>
"Ignoring deprecated use of DefaultType in line %d of %s."</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>line_num</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_sethandler</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>d_</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg_</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>dirconf</name> <init>= <expr><name>d_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dirconf</name>-&gt;<name>expr_handler</name></name> = <call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>arg_</name></expr></argument>,
<argument><expr><name>AP_EXPR_FLAG_STRING_RESULT</name></expr></argument>,
<argument><expr>&amp;<name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Can't parse expression : "</expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_etag_bits</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args_p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>etag_components_t</name></type> <name>bit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>valid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>explicit</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cfg</name> = (<name>core_dir_config</name> *)<name>mconfig</name></expr>;</expr_stmt>
<expr_stmt><expr><name>args</name> = <name>args_p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>explicit</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>args</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition> <block>{
<expr_stmt><expr><name>action</name> = '*'</expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name> = <name>ETAG_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name>valid</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(*<name>token</name> == '+') || (*<name>token</name> == '-')</expr>)</condition><then> <block>{
<expr_stmt><expr><name>action</name> = *<name>token</name></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>first</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>etag_bits</name></name> = <name>ETAG_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>etag_add</name></name> = <name>ETAG_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>etag_remove</name></name> = <name>ETAG_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"None"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>action</name> != '*'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>valid</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>etag_bits</name></name> = <name>bit</name> = <name>ETAG_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>explicit</name> = 1</expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"All"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>action</name> != '*'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>valid</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>explicit</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>etag_bits</name></name> = <name>bit</name> = <name>ETAG_ALL</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"Size"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>bit</name> = <name>ETAG_SIZE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<call><name>strcasecmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"LMTime"</expr></argument>)</argument_list></call> == 0)
|| (<call><name>strcasecmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"MTime"</expr></argument>)</argument_list></call> == 0)
|| (<call><name>strcasecmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"LastModified"</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>bit</name> = <name>ETAG_MTIME</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"INode"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>bit</name> = <name>ETAG_INODE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Unknown keyword '"</expr></argument>,
<argument><expr><name>token</name></expr></argument>, <argument><expr>"' for "</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>" directive"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr>! <name>valid</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>" keyword '"</expr></argument>,
<argument><expr><name>token</name></expr></argument>, <argument><expr>"' cannot be used with '+' or '-'"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>action</name> == '+'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>etag_add</name></name> |= <name>bit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>etag_remove</name></name> &amp;= (~ <name>bit</name>)</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>action</name> == '-'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>etag_remove</name></name> |= <name>bit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>etag_add</name></name> &amp;= (~ <name>bit</name>)</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>etag_bits</name></name> |= <name>bit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>etag_add</name></name> = <name>ETAG_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>etag_remove</name></name> = <name>ETAG_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name>explicit</name> = 1</expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></while>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>etag_add</name></name> != <name>ETAG_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>etag_add</name></name> &amp;= (~ <name>ETAG_UNSET</name>)</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>etag_remove</name></name> != <name>ETAG_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>etag_remove</name></name> &amp;= (~ <name>ETAG_UNSET</name>)</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>explicit</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>etag_bits</name></name> &amp;= (~ <name>ETAG_UNSET</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>cfg</name>-&gt;<name>etag_bits</name></name> &amp; <name>ETAG_NONE</name>) != <name>ETAG_NONE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>etag_bits</name></name> &amp;= (~ <name>ETAG_NONE</name>)</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_enable_mmap</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d_</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name> <init>= <expr><name>d_</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>enable_mmap</name></name> = <name>ENABLE_MMAP_ON</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>enable_mmap</name></name> = <name>ENABLE_MMAP_OFF</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"parameter must be 'on' or 'off'"</expr>;</return>
}</block></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_enable_sendfile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d_</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name> <init>= <expr><name>d_</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>enable_sendfile</name></name> = <name>ENABLE_SENDFILE_ON</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>enable_sendfile</name></name> = <name>ENABLE_SENDFILE_OFF</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"parameter must be 'on' or 'off'"</expr>;</return>
}</block></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>unclosed_directive</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; directive missing closing '&gt;'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>missing_container_arg</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; directive requires additional arguments"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<macro><name>AP_CORE_DECLARE_NONSTD</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_limit_section</name><argument_list>(<argument>cmd_parms *cmd</argument>,
<argument>void *dummy</argument>,
<argument>const char *arg</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endp</name> <init>= <expr><call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>limited_methods</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>tog</name> <init>= <expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>cmd_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>limited</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>old_limited</name> <init>= <expr><name><name>cmd</name>-&gt;<name>limited</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>endp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>unclosed_directive</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>limited_methods</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>endp</name> - <name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>limited_methods</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>missing_container_arg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><name><name>limited_methods</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>method</name> <init>= <expr><call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>limited_methods</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>methnum</name></decl>;</decl_stmt>
<expr_stmt><expr><name>methnum</name> = <call><name>ap_method_number_of</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>methnum</name> == <name>M_TRACE</name> &amp;&amp; !<name>tog</name></expr>)</condition><then> <block>{
<return>return <expr>"TRACE cannot be controlled by &lt;Limit&gt;, see TraceEnable"</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>methnum</name> == <name>M_INVALID</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>pool</name></name> == <name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Could not register method '%s' "
"for %s from .htaccess configuration"</expr></argument>,
<argument><expr><name>method</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>methnum</name> = <call><name>ap_method_register</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><name>limited</name> |= (<name>AP_METHOD_BIT</name> &lt;&lt; <name>methnum</name>)</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>limited</name> = <name>tog</name> ? ~<name>limited</name> : <name>limited</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name>old_limited</name> &amp; <name>limited</name>)</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; directive excludes all methods"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>(<name>old_limited</name> &amp; <name>limited</name>) == <name>old_limited</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; directive specifies methods already excluded"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>limited</name></name> &amp;= <name>limited</name></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> = <call><name>ap_walk_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>first_child</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>limited</name></name> = <name>old_limited</name></expr>;</expr_stmt>
<return>return <expr><name>errmsg</name></expr>;</return>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_ICASE</name></cpp:macro> <cpp:value>AP_REG_ICASE</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_ICASE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>dirsection</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endp</name> <init>= <expr><call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_overrides</name> <init>= <expr><name><name>cmd</name>-&gt;<name>override</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>old_path</name> <init>= <expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>new_dir_conf</name> <init>= <expr><call><name>ap_create_per_dir_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>command_rec</name> *</type><name>thiscmd</name> <init>= <expr><name><name>cmd</name>-&gt;<name>cmd</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIR_LOC_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>endp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>unclosed_directive</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>arg</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>endp</name> - <name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>arg</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>missing_container_arg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>path</name></name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>override</name></name> = <name>OR_ALL</name>|<name>ACCESS_CONF</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>"~"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>path</name></name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>cmd</name>-&gt;<name>path</name></name></expr>)</condition><then>
<return>return <expr>"&lt;Directory ~ &gt; block must specify a path"</expr>;</return></then></if>
<expr_stmt><expr><name>r</name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>AP_REG_EXTENDED</name>|<name>USE_ICASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>r</name></expr>)</condition><then> <block>{
<return>return <expr>"Regex could not be compiled"</expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>thiscmd</name>-&gt;<name>cmd_data</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>r</name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>AP_REG_EXTENDED</name>|<name>USE_ICASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>r</name></expr>)</condition><then> <block>{
<return>return <expr>"Regex could not be compiled"</expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>"/"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>newpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><call><name>apr_filepath_merge</name><argument_list>(<argument><expr>&amp;<name>newpath</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>APR_FILEPATH_TRUENAME</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> &amp;&amp; <name>rv</name> != <name>APR_EPATHWILD</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"&lt;Directory \""</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr>"\"&gt; path is invalid."</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>path</name></name> = <name>newpath</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>path</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> != '/'</expr>)</condition><then>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>path</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if></else></if></else></if>
<expr_stmt><expr><name>conf</name> = <call><name>ap_set_config_vectors</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>new_dir_conf</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr>&amp;<name>core_module</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> = <call><name>ap_walk_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>first_child</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>new_dir_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>errmsg</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>d</name></name> = <name><name>cmd</name>-&gt;<name>path</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>d_is_fnmatch</name></name> = (<call><name>apr_fnmatch_test</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>d</name></name></expr></argument>)</argument_list></call> != 0)</expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>refs</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_regname</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>refs</name></name></expr></argument>, <argument><expr><name>AP_REG_MATCH</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>d</name></name></expr></argument>, <argument><expr>"/"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>d_components</name></name> = 0</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>conf</name>-&gt;<name>d_components</name></name> = <call><name>ap_count_dirs</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>ap_add_per_dir_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>new_dir_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>arg</name> != '\0'</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Multiple "</expr></argument>, <argument><expr><name><name>thiscmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; arguments not (yet) supported."</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>path</name></name> = <name>old_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>override</name></name> = <name>old_overrides</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>urlsection</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endp</name> <init>= <expr><call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_overrides</name> <init>= <expr><name><name>cmd</name>-&gt;<name>override</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>old_path</name> <init>= <expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>command_rec</name> *</type><name>thiscmd</name> <init>= <expr><name><name>cmd</name>-&gt;<name>cmd</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>new_url_conf</name> <init>= <expr><call><name>ap_create_per_dir_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIR_LOC_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>endp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>unclosed_directive</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>arg</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>endp</name> - <name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>arg</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>missing_container_arg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>path</name></name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>override</name></name> = <name>OR_ALL</name>|<name>ACCESS_CONF</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>thiscmd</name>-&gt;<name>cmd_data</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>r</name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>AP_REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>r</name></expr>)</condition><then> <block>{
<return>return <expr>"Regex could not be compiled"</expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>"~"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>path</name></name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>AP_REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>r</name></expr>)</condition><then> <block>{
<return>return <expr>"Regex could not be compiled"</expr>;</return>
}</block></then></if>
}</block></then></if></else></if>
<expr_stmt><expr><name>conf</name> = <call><name>ap_set_config_vectors</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>new_url_conf</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr>&amp;<name>core_module</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> = <call><name>ap_walk_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>first_child</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>new_url_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>errmsg</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>d</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>d_is_fnmatch</name></name> = <call><name>apr_fnmatch_test</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>d</name></name></expr></argument>)</argument_list></call> != 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>refs</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_regname</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>refs</name></name></expr></argument>, <argument><expr><name>AP_REG_MATCH</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_add_per_url_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>new_url_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>arg</name> != '\0'</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Multiple "</expr></argument>, <argument><expr><name><name>thiscmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; arguments not (yet) supported."</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>path</name></name> = <name>old_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>override</name></name> = <name>old_overrides</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>filesection</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endp</name> <init>= <expr><call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_overrides</name> <init>= <expr><name><name>cmd</name>-&gt;<name>override</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>old_path</name> <init>= <expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>command_rec</name> *</type><name>thiscmd</name> <init>= <expr><name><name>cmd</name>-&gt;<name>cmd</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>new_file_conf</name> <init>= <expr><call><name>ap_create_per_dir_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,
<argument><expr><name>NOT_IN_LOCATION</name> | <name>NOT_IN_LIMIT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>endp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>unclosed_directive</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>arg</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>endp</name> - <name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>arg</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>missing_container_arg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>path</name></name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>old_path</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>override</name></name> = <name>OR_ALL</name>|<name>ACCESS_CONF</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>thiscmd</name>-&gt;<name>cmd_data</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>r</name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>AP_REG_EXTENDED</name>|<name>USE_ICASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>r</name></expr>)</condition><then> <block>{
<return>return <expr>"Regex could not be compiled"</expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>"~"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>path</name></name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>AP_REG_EXTENDED</name>|<name>USE_ICASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>r</name></expr>)</condition><then> <block>{
<return>return <expr>"Regex could not be compiled"</expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>newpath</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_filepath_merge</name><argument_list>(<argument><expr>&amp;<name>newpath</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"&lt;Files \""</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr>"\"&gt; is invalid."</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>path</name></name> = <name>newpath</name></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><name>conf</name> = <call><name>ap_set_config_vectors</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>new_file_conf</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr>&amp;<name>core_module</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> = <call><name>ap_walk_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>first_child</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>new_file_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>errmsg</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>d</name></name> = <name><name>cmd</name>-&gt;<name>path</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>d_is_fnmatch</name></name> = <call><name>apr_fnmatch_test</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>d</name></name></expr></argument>)</argument_list></call> != 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>refs</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_regname</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>refs</name></name></expr></argument>, <argument><expr><name>AP_REG_MATCH</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_add_file_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(<name>core_dir_config</name> *)<name>mconfig</name></expr></argument>, <argument><expr><name>new_file_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>arg</name> != '\0'</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Multiple "</expr></argument>, <argument><expr><name><name>thiscmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; arguments not (yet) supported."</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>path</name></name> = <name>old_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>override</name></name> = <name>old_overrides</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COND_IF</name></cpp:macro> <cpp:value>((void *)1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COND_ELSE</name></cpp:macro> <cpp:value>((void *)2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COND_ELSEIF</name></cpp:macro> <cpp:value>((void *)3)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ifsection</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endp</name> <init>= <expr><call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_overrides</name> <init>= <expr><name><name>cmd</name>-&gt;<name>override</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>old_path</name> <init>= <expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>command_rec</name> *</type><name>thiscmd</name> <init>= <expr><name><name>cmd</name>-&gt;<name>cmd</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>new_if_conf</name> <init>= <expr><call><name>ap_create_per_dir_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_LIMIT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>condition</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expr_err</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>endp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>unclosed_directive</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>arg</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>endp</name> - <name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>path</name></name> = "*If"</expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>old_path</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>override</name></name> = <name>OR_ALL</name>|<name>ACCESS_CONF</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>conf</name> = <call><name>ap_set_config_vectors</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>new_if_conf</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr>&amp;<name>core_module</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>cmd_data</name></name> == <name>COND_IF</name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>condition_ifelse</name></name> = <name>AP_CONDITION_IF</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>cmd_data</name></name> == <name>COND_ELSEIF</name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>condition_ifelse</name></name> = <name>AP_CONDITION_ELSEIF</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>cmd_data</name></name> == <name>COND_ELSE</name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>condition_ifelse</name></name> = <name>AP_CONDITION_ELSE</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>condition_ifelse</name></name> == <name>AP_CONDITION_ELSE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>arg</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then>
<return>return <expr>"&lt;Else&gt; does not take an argument"</expr>;</return></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!<name><name>arg</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then>
<return>return <expr><call><name>missing_container_arg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>condition</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>condition</name></name> = <call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>condition</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>expr_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>expr_err</name></expr>)</condition><then>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Cannot parse condition clause: %s"</expr></argument>,
<argument><expr><name>expr_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></else></if>
<expr_stmt><expr><name>errmsg</name> = <call><name>ap_walk_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>first_child</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>new_if_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>errmsg</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>d</name></name> = <name><name>cmd</name>-&gt;<name>path</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>d_is_fnmatch</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>r</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> = <call><name>ap_add_if_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(<name>core_dir_config</name> *)<name>mconfig</name></expr></argument>, <argument><expr><name>new_if_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>errmsg</name></expr>;</return></then></if>
<if>if <condition>(<expr>*<name>arg</name> != '\0'</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Multiple "</expr></argument>, <argument><expr><name><name>thiscmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; arguments not supported."</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>path</name></name> = <name>old_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>override</name></name> = <name>old_overrides</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>module</name> *</type><name>find_module</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>module</name> *</type><name>found</name> <init>= <expr><call><name>ap_find_linked_module</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>found</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ap_module_symbol_t</name> *</type><name>current</name> <init>= <expr><name>ap_prelinked_module_symbols</name></expr></init></decl>;</decl_stmt>
<for>for (<init>;</init> <condition><expr><name><name>current</name>-&gt;<name>name</name></name></expr>;</condition> <incr><expr>++<name>current</name></expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>current</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = <name><name>current</name>-&gt;<name>modp</name></name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr>!<name>found</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ap_find_loaded_module_symbol</name></expr></argument>)</argument_list></call> *<name>check_symbol</name> =
<call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_find_loaded_module_symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>check_symbol</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = <call><name>check_symbol</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>is_virtual</name></name> ? <name>ap_server_conf</name> : <name>s</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>found</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>start_ifmod</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endp</name> <init>= <expr><call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>not</name> <init>= <expr>(<name><name>arg</name><index>[<expr>0</expr>]</index></name> == '!')</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> *</type><name>found</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>endp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>unclosed_directive</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>arg</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>endp</name> - <name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>not</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>arg</name>++</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>arg</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>missing_container_arg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>found</name> = <call><name>find_module</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(!<name>not</name> &amp;&amp; <name>found</name>) || (<name>not</name> &amp;&amp; !<name>found</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ap_directive_t</name> *</type><name>parent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_directive_t</name> *</type><name>current</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>ap_build_cont_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>,
<argument><expr>&amp;<name>current</name></expr></argument>, <argument><expr>&amp;<name>parent</name></expr></argument>, <argument><expr>"&lt;IfModule"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>ap_directive_t</name> **)<name>mconfig</name> = <name>current</name></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr>*(<name>ap_directive_t</name> **)<name>mconfig</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><call><name>ap_soak_end_container</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"&lt;IfModule"</expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_exists_config_define</name><argument_list>(<argument>const char *name</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>ap_array_str_contains</name><argument_list>(<argument><expr><name>ap_server_config_defines</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>start_ifdefine</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>defined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>not</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>endp</name> = <call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>endp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>unclosed_directive</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>arg</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>endp</name> - <name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>arg</name><index>[<expr>0</expr>]</index></name> == '!'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>not</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name>++</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>arg</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>missing_container_arg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>defined</name> = <call><name>ap_exists_config_define</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(!<name>not</name> &amp;&amp; <name>defined</name>) || (<name>not</name> &amp;&amp; !<name>defined</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ap_directive_t</name> *</type><name>parent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_directive_t</name> *</type><name>current</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>ap_build_cont_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>,
<argument><expr>&amp;<name>current</name></expr></argument>, <argument><expr>&amp;<name>parent</name></expr></argument>, <argument><expr>"&lt;IfDefine"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>ap_directive_t</name> **)<name>dummy</name> = <name>current</name></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr>*(<name>ap_directive_t</name> **)<name>dummy</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><call><name>ap_soak_end_container</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"&lt;IfDefine"</expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>virtualhost_section</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>main_server</name> <init>= <expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></init>, *<name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endp</name> <init>= <expr><call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>endp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>unclosed_directive</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>arg</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>endp</name> - <name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>arg</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>missing_container_arg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>main_server</name>-&gt;<name>is_virtual</name></name></expr>)</condition><then> <block>{
<return>return <expr>"&lt;VirtualHost&gt; doesn't nest!"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>errmsg</name> = <call><name>ap_init_virtual_host</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>main_server</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name></expr>)</condition><then> <block>{
<return>return <expr><name>errmsg</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>s</name>-&gt;<name>next</name></name> = <name><name>main_server</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_server</name>-&gt;<name>next</name></name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>defn_name</name></name> = <name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>filename</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>defn_line_number</name></name> = <name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>line_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>server</name></name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> = <call><name>ap_walk_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>first_child</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>,
<argument><expr><name><name>s</name>-&gt;<name>lookup_defaults</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>server</name></name> = <name>main_server</name></expr>;</expr_stmt>
<return>return <expr><name>errmsg</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_server_alias</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>names</name></name></expr>)</condition><then> <block>{
<return>return <expr>"ServerAlias only used in &lt;VirtualHost&gt;"</expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>*<name>arg</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>item</name></decl>, *<decl><type ref="prev"/><name>name</name> <init>= <expr><call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_is_matchexp</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>item</name> = (<name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>wild_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>item</name> = (<name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr>*<name>item</name> = <name>name</name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_accf_map</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>iproto</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>iaccf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name> <init>=
<expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>proto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>accf</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>proto</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>iproto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>accf</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>iaccf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>accf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>accf_map</name></name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>accf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char*</argument>)</argument_list></macro> <macro><name>ap_get_server_protocol</name><argument_list>(<argument>server_rec* s</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>conf</name>-&gt;<name>protocol</name></name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_set_server_protocol</name><argument_list>(<argument>server_rec* s</argument>, <argument>const char* proto</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>protocol</name></name> = <name>proto</name></expr>;</expr_stmt>
}</block>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_protocol</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIR_LOC_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name> <init>=
<expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>proto</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>proto</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>protocol</name></name> = <name>proto</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_server_string_slot</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr>(<name>int</name>)(<name>long</name>)<name><name>cmd</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>struct_ptr</name> <init>= <expr>(<name>char</name> *)<name><name>cmd</name>-&gt;<name>server</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,
<argument><expr><name>NOT_IN_DIR_LOC_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*(const <name>char</name> **)(<name>struct_ptr</name> + <name>offset</name>) = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>server_hostname_port</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIR_LOC_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>portstr</name></decl>, *<decl><type ref="prev"/><name>part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>scheme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_fnmatch_test</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"Invalid ServerName \""</expr></argument>, <argument><expr><name>arg</name></expr></argument>,
<argument><expr>"\" use ServerAlias to set multiple server names."</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>part</name> = <call><name>ap_strstr_c</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"://"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>part</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>scheme</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>part</name> - <name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>server_scheme</name></name> = (const <name>char</name> *)<name>scheme</name></expr>;</expr_stmt>
<expr_stmt><expr><name>part</name> += 3</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>part</name> = <name>arg</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>portstr</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>portstr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>server_hostname</name></name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>part</name></expr></argument>,
<argument><expr><name>portstr</name> - <name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>portstr</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>portstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>port</name> &lt;= 0 || <name>port</name> &gt;= 65536</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"The port number \""</expr></argument>, <argument><expr><name>arg</name></expr></argument>,
<argument><expr>"\" is outside the appropriate range "
"(i.e., 1..65535)."</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>server_hostname</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> = 0</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>port</name></name> = <name>port</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_signature_flag</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d_</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name> <init>= <expr><name>d_</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"On"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>server_signature</name></name> = <name>srv_sig_on</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"Off"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>server_signature</name></name> = <name>srv_sig_off</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"EMail"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>server_signature</name></name> = <name>srv_sig_withmail</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"ServerSignature: use one of: off | on | email"</expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_server_root</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<call><name>apr_filepath_merge</name><argument_list>(<argument><expr>(<name>char</name>**)&amp;<name>ap_server_root</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>,
<argument><expr><name>APR_FILEPATH_TRUENAME</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name>)
|| !<call><name>ap_is_directory</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>ap_server_root</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>"ServerRoot must be a valid directory"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_runtime_dir</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<call><name>apr_filepath_merge</name><argument_list>(<argument><expr>(<name>char</name>**)&amp;<name>ap_runtime_dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>APR_FILEPATH_TRUENAME</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name>)
|| !<call><name>ap_is_directory</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>ap_runtime_dir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>"DefaultRuntimeDir must be a valid directory, absolute or relative to ServerRoot"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_timeout</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIR_LOC_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>timeout</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_allow2f</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d_</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name> <init>= <expr><name>d_</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>allow_encoded_slashes</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>decode_encoded_slashes</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>allow_encoded_slashes</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>decode_encoded_slashes</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"nodecode"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>allow_encoded_slashes</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>decode_encoded_slashes</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>" must be On, Off, or NoDecode"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_hostname_lookups</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d_</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name> <init>= <expr><name>d_</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>hostname_lookups</name></name> = <name>HOSTNAME_LOOKUP_ON</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>hostname_lookups</name></name> = <name>HOSTNAME_LOOKUP_OFF</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"double"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>hostname_lookups</name></name> = <name>HOSTNAME_LOOKUP_DOUBLE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"parameter must be 'on', 'off', or 'double'"</expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_serverpath</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIR_LOC_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>path</name></name> = <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>pathlen</name></name> = (<name>int</name>)<call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_content_md5</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d_</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name> <init>= <expr><name>d_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>content_md5</name></name> = <name>arg</name> ? <name>AP_CONTENT_MD5_ON</name> : <name>AP_CONTENT_MD5_OFF</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_accept_path_info</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d_</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name> <init>= <expr><name>d_</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>accept_path_info</name></name> = <name>AP_REQ_ACCEPT_PATH_INFO</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>accept_path_info</name></name> = <name>AP_REQ_REJECT_PATH_INFO</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"default"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>accept_path_info</name></name> = <name>AP_REQ_DEFAULT_PATH_INFO</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"AcceptPathInfo must be set to on, off or default"</expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_use_canonical_name</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d_</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name> <init>= <expr><name>d_</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>use_canonical_name</name></name> = <name>USE_CANONICAL_NAME_ON</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>use_canonical_name</name></name> = <name>USE_CANONICAL_NAME_OFF</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"dns"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>use_canonical_name</name></name> = <name>USE_CANONICAL_NAME_DNS</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"parameter must be 'on', 'off', or 'dns'"</expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_use_canonical_phys_port</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d_</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name> <init>= <expr><name>d_</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>use_canonical_phys_port</name></name> = <name>USE_CANONICAL_PHYS_PORT_ON</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>use_canonical_phys_port</name></name> = <name>USE_CANONICAL_PHYS_PORT_OFF</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"parameter must be 'on' or 'off'"</expr>;</return>
}</block></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>include_config</name> <parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_directive_t</name> *</type><name>conftree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conffile</name></decl>, *<decl><type ref="prev"/><name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> *</type><name>recursion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optional</name> <init>= <expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>cmd_data</name></name> ? 1 : 0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>data</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>"ap_include_sentinel"</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>data</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>recursion</name> = <name>data</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>data</name> = <name>recursion</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>recursion</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>recursion</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_userdata_setn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>"ap_include_sentinel"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>++*<name>recursion</name> &gt; <name>AP_MAX_INCLUDE_DEPTH</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>recursion</name> = 0</expr>;</expr_stmt>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Exceeded maximum include depth of %u, "
"There appears to be a recursion."</expr></argument>,
<argument><expr><name>AP_MAX_INCLUDE_DEPTH</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>conffile</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>conffile</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>recursion</name> = 0</expr>;</expr_stmt>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid Include path "</expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_exists_config_define</name><argument_list>(<argument><expr>"DUMP_INCLUDES"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name> *</type><name>line_number</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>"ap_include_lineno"</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>data</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>line_number</name> = <name>data</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>data</name> = <name>line_number</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>line_number</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_userdata_setn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>"ap_include_lineno"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr>*<name>line_number</name> = <name><name>cmd</name>-&gt;<name>config_file</name>-&gt;<name>line_number</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>error</name> = <call><name>ap_process_fnmatch_configs</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>conffile</name></expr></argument>, <argument><expr>&amp;<name>conftree</name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>,
<argument><expr><name>optional</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>recursion</name> = 0</expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*(<name>ap_directive_t</name> **)<name>dummy</name> = <name>conftree</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>recursion</name></expr>)</condition><then> <block>{
<expr_stmt><expr>--*<name>recursion</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_loglevel</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config_</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg_</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>level_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> *</type><name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>arg</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>arg_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_logconf</name> *</type><name>log</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>path</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>dconf</name> <init>= <expr><name>config_</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>dconf</name>-&gt;<name>log</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>log</name></name> = <call><name>ap_new_log_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>log</name> = <name><name>dconf</name>-&gt;<name>log</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>log</name> = &amp;<name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>log</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>arg</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>"LogLevel requires level keyword or module loglevel specifier"</expr>;</return></then></if>
<expr_stmt><expr><name>level_str</name> = <call><name>ap_strrchr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>level_str</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>ap_parse_log_level</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>&amp;<name><name>log</name>-&gt;<name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ap_reset_module_loglevels</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><name>APLOG_NO_MODULE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>,
<argument><expr>"Setting LogLevel for all modules to %s"</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>level_str</name>++ = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>level_str</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"Module specifier '%s' must be "
"followed by a log level keyword"</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>ap_parse_log_level</name><argument_list>(<argument><expr><name>level_str</name></expr></argument>, <argument><expr>&amp;<name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"%s:%s: %s"</expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>level_str</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>module</name> = <call><name>find_module</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"%s_module"</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE6</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>,
<argument><expr>"Cannot find module '%s', trying '%s'"</expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>module</name> = <call><name>find_module</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>module</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"Cannot find module %s"</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_set_module_loglevel</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>log</name></expr></argument>, <argument><expr><name><name>module</name>-&gt;<name>module_index</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>,
<argument><expr>"Setting LogLevel for module %s to %s"</expr></argument>, <argument><expr><name><name>module</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr><name>level_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_psignature</name><argument_list>(<argument>const char *prefix</argument>, <argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>sport</name><index>[<expr>20</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = (<name>core_dir_config</name> *)<call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>conf</name>-&gt;<name>server_signature</name></name> == <name>srv_sig_off</name>)
|| (<name><name>conf</name>-&gt;<name>server_signature</name></name> == <name>srv_sig_unset</name>)</expr>)</condition><then> <block>{
<return>return <expr>""</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>sport</name></expr></argument>, <argument><expr>sizeof <name>sport</name></expr></argument>, <argument><expr>"%u"</expr></argument>, <argument><expr>(<name>unsigned</name>) <call><name>ap_get_server_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>server_signature</name></name> == <name>srv_sig_withmail</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr>"&lt;address&gt;"</expr></argument>,
<argument><expr><call><name>ap_get_server_banner</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr>" Server at &lt;a href=\""</expr></argument>,
<argument><expr><call><name>ap_is_url</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>server_admin</name></name></expr></argument>)</argument_list></call> ? "" : "mailto:"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>server_admin</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"\"&gt;"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>ap_get_server_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"&lt;/a&gt; Port "</expr></argument>, <argument><expr><name>sport</name></expr></argument>,
<argument><expr>"&lt;/address&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr>"&lt;address&gt;"</expr></argument>, <argument><expr><call><name>ap_get_server_banner</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr>" Server at "</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>ap_get_server_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>" Port "</expr></argument>, <argument><expr><name>sport</name></expr></argument>,
<argument><expr>"&lt;/address&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>server_banner</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>banner_locked</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>server_description</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<enum>enum <name>server_token_type</name> <block>{
<decl><name>SrvTk_MAJOR</name></decl>,
<decl><name>SrvTk_MINOR</name></decl>,
<decl><name>SrvTk_MINIMAL</name></decl>,
<decl><name>SrvTk_OS</name></decl>,
<decl><name>SrvTk_FULL</name></decl>,
<decl><name>SrvTk_PRODUCT_ONLY</name></decl>
}</block>;</enum>
<enum><specifier>static</specifier> enum <name>server_token_type</name> <name>ap_server_tokens</name> <expr_stmt><expr>= <name>SrvTk_FULL</name></expr>;</expr_stmt></enum>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>reset_banner</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>banner_locked</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>ap_server_tokens</name> = <name>SrvTk_FULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>server_banner</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>server_description</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_get_server_revision</name><argument_list>(<argument>ap_version_t *version</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><name><name>version</name>-&gt;<name>major</name></name> = <name>AP_SERVER_MAJORVERSION_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>version</name>-&gt;<name>minor</name></name> = <name>AP_SERVER_MINORVERSION_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>version</name>-&gt;<name>patch</name></name> = <name>AP_SERVER_PATCHLEVEL_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>version</name>-&gt;<name>add_string</name></name> = <name>AP_SERVER_ADD_STRING</name></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_get_server_description</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{
<return>return <expr><name>server_description</name> ? <name>server_description</name> :
<name>AP_SERVER_BASEVERSION</name> " (" <name>PLATFORM</name> ")"</expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_get_server_banner</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{
<return>return <expr><name>server_banner</name> ? <name>server_banner</name> : <name>AP_SERVER_BASEVERSION</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_add_version_component</name><argument_list>(<argument>apr_pool_t *pconf</argument>, <argument>const char *component</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr>! <name>banner_locked</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>server_banner</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>reset_banner</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>server_banner</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>component</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>server_banner</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>server_banner</name></expr></argument>, <argument><expr>" "</expr></argument>,
<argument><expr><name>component</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>server_description</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>server_description</name></expr></argument>, <argument><expr>" "</expr></argument>,
<argument><expr><name>component</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_banner</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>ap_server_tokens</name> == <name>SrvTk_PRODUCT_ONLY</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_add_version_component</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>AP_SERVER_BASEPRODUCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>ap_server_tokens</name> == <name>SrvTk_MINIMAL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_add_version_component</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>AP_SERVER_BASEVERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>ap_server_tokens</name> == <name>SrvTk_MINOR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_add_version_component</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>AP_SERVER_BASEPRODUCT</name> "/" <name>AP_SERVER_MINORREVISION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>ap_server_tokens</name> == <name>SrvTk_MAJOR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_add_version_component</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>AP_SERVER_BASEPRODUCT</name> "/" <name>AP_SERVER_MAJORVERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_add_version_component</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>AP_SERVER_BASEVERSION</name> " (" <name>PLATFORM</name> ")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name>ap_server_tokens</name> != <name>SrvTk_FULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>banner_locked</name>++</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>server_description</name> = <name>AP_SERVER_BASEVERSION</name> " (" <name>PLATFORM</name> ")"</expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_serv_tokens</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"OS"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ap_server_tokens</name> = <name>SrvTk_OS</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"Min"</expr></argument>)</argument_list></call> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"Minimal"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ap_server_tokens</name> = <name>SrvTk_MINIMAL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"Major"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ap_server_tokens</name> = <name>SrvTk_MAJOR</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"Minor"</expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
<expr_stmt><expr><name>ap_server_tokens</name> = <name>SrvTk_MINOR</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"Prod"</expr></argument>)</argument_list></call> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"ProductOnly"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ap_server_tokens</name> = <name>SrvTk_PRODUCT_ONLY</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"Full"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ap_server_tokens</name> = <name>SrvTk_FULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"ServerTokens takes 1 argument: 'Prod(uctOnly)', 'Major', 'Minor', 'Min(imal)', 'OS', or 'Full'"</expr>;</return>
}</block></else></if></else></if></else></if></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_limit_req_line</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIR_LOC_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lim</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>lim</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lim</name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"LimitRequestLine \""</expr></argument>, <argument><expr><name>arg</name></expr></argument>,
<argument><expr>"\" must be a non-negative integer"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>limit_req_line</name></name> = <name>lim</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_limit_req_fieldsize</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIR_LOC_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lim</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>lim</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lim</name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"LimitRequestFieldsize \""</expr></argument>, <argument><expr><name>arg</name></expr></argument>,
<argument><expr>"\" must be a non-negative integer"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>limit_req_fieldsize</name></name> = <name>lim</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_limit_req_fields</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIR_LOC_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lim</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>lim</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lim</name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"LimitRequestFields \""</expr></argument>, <argument><expr><name>arg</name></expr></argument>,
<argument><expr>"\" must be a non-negative integer (0 = no limit)"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>limit_req_fields</name></name> = <name>lim</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_limit_req_body</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>conf_</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name> <init>= <expr><name>conf_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>errp</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name><name>conf</name>-&gt;<name>limit_req_body</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>&amp;<name>errp</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>"LimitRequestBody argument is not parsable."</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>*<name>errp</name> || <name><name>conf</name>-&gt;<name>limit_req_body</name></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"LimitRequestBody requires a non-negative integer."</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_limit_xml_req_body</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>conf_</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name> <init>= <expr><name>conf_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>limit_xml_body</name></name> = <call><name>atol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>limit_xml_body</name></name> &lt; 0</expr>)</condition><then>
<return>return <expr>"LimitXMLRequestBody requires a non-negative integer."</expr>;</return></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_max_ranges</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>conf_</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name> <init>= <expr><name>conf_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>val</name> = <name>AP_MAXRANGES_NORANGES</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"default"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>val</name> = <name>AP_MAXRANGES_DEFAULT</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"unlimited"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>val</name> = <name>AP_MAXRANGES_UNLIMITED</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>val</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>val</name> &lt;= 0</expr>)</condition><then>
<return>return <expr>"MaxRanges requires 'none', 'default', 'unlimited' or "
"a positive integer"</expr>;</return></then></if>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>max_ranges</name></name> = <name>val</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_max_overlaps</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>conf_</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name> <init>= <expr><name>conf_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>val</name> = <name>AP_MAXRANGES_NORANGES</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"default"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>val</name> = <name>AP_MAXRANGES_DEFAULT</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"unlimited"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>val</name> = <name>AP_MAXRANGES_UNLIMITED</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>val</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>val</name> &lt;= 0</expr>)</condition><then>
<return>return <expr>"MaxRangeOverlaps requires 'none', 'default', 'unlimited' or "
"a positive integer"</expr>;</return></then></if>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>max_overlaps</name></name> = <name>val</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_max_reversals</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>conf_</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name> <init>= <expr><name>conf_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>val</name> = <name>AP_MAXRANGES_NORANGES</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"default"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>val</name> = <name>AP_MAXRANGES_DEFAULT</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"unlimited"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>val</name> = <name>AP_MAXRANGES_UNLIMITED</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>val</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>val</name> &lt;= 0</expr>)</condition><then>
<return>return <expr>"MaxRangeReversals requires 'none', 'default', 'unlimited' or "
"a positive integer"</expr>;</return></then></if>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>max_reversals</name></name> = <name>val</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_size_t</argument>)</argument_list></macro> <macro><name>ap_get_limit_xml_body</name><argument_list>(<argument>const request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>limit_xml_body</name></name> == <name>AP_LIMIT_UNSET</name></expr>)</condition><then>
<return>return <expr><name>AP_DEFAULT_LIMIT_XML_BODY</name></expr>;</return></then></if>
<return>return <expr>(<name>apr_size_t</name>)<name><name>conf</name>-&gt;<name>limit_xml_body</name></name></expr>;</return>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name> <argument_list>(<argument><expr><name>RLIMIT_CPU</name></expr></argument>)</argument_list></call> || !(<call><name>defined</name> <argument_list>(<argument><expr><name>RLIMIT_DATA</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>RLIMIT_VMEM</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_AS</name></expr></argument>)</argument_list></call>) || !<call><name>defined</name> <argument_list>(<argument><expr><name>RLIMIT_NPROC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>no_set_limit</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>conf_</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg2</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00118</expr></argument>)</argument_list></call>
"%s not supported on this platform"</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_CPU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_limit_cpu</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>conf_</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg2</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name> <init>= <expr><name>conf_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_unixd_set_rlimit</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name><name>conf</name>-&gt;<name>limit_cpu</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>RLIMIT_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>RLIMIT_DATA</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>RLIMIT_VMEM</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_AS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_limit_mem</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>conf_</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>arg2</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name> <init>= <expr><name>conf_</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_AS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_unixd_set_rlimit</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name><name>conf</name>-&gt;<name>limit_mem</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument> ,<argument><expr><name>RLIMIT_AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_DATA</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>ap_unixd_set_rlimit</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name><name>conf</name>-&gt;<name>limit_mem</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>RLIMIT_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_VMEM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>ap_unixd_set_rlimit</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name><name>conf</name>-&gt;<name>limit_mem</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>RLIMIT_VMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_NPROC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_limit_nproc</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>conf_</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>arg2</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name> <init>= <expr><name>conf_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_unixd_set_rlimit</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name><name>conf</name>-&gt;<name>limit_nproc</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>RLIMIT_NPROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_recursion_limit</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg2</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name> <init>=
<expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>limit</name> &lt;= 0</expr>)</condition><then> <block>{
<return>return <expr>"The recursion limit must be greater than zero."</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>limit</name> &lt; 4</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00119</expr></argument>)</argument_list></call>
"Limiting internal redirects to very low numbers may "
"cause normal requests to fail."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>redirect_limit</name></name> = <name>limit</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>arg2</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>limit</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>limit</name> &lt;= 0</expr>)</condition><then> <block>{
<return>return <expr>"The recursion limit must be greater than zero."</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>limit</name> &lt; 4</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00120</expr></argument>)</argument_list></call>
"Limiting the subrequest depth to a very low level may"
" cause normal requests to fail."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>subreq_limit</name></name> = <name>limit</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>log_backtrace</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>top</name> <init>= <expr><name>r</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00121</expr></argument>)</argument_list></call>
"r-&gt;uri = %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name> ? <name><name>r</name>-&gt;<name>uri</name></name> : "(unexpectedly NULL)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>top</name> &amp;&amp; (<name><name>top</name>-&gt;<name>prev</name></name> || <name><name>top</name>-&gt;<name/></name>main)</expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>top</name>-&gt;<name>prev</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>top</name> = <name><name>top</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00122</expr></argument>)</argument_list></call>
"redirected from r-&gt;uri = %s"</expr></argument>,
<argument><expr><name><name>top</name>-&gt;<name>uri</name></name> ? <name><name>top</name>-&gt;<name>uri</name></name> : "(unexpectedly NULL)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>top</name>-&gt;<name>prev</name></name> &amp;&amp; <name><name>top</name>-&gt;<name/></name>main</expr>)</condition><then> <block>{
<expr_stmt><expr><name>top</name> = <name><name>top</name>-&gt;<name/></name>main</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00123</expr></argument>)</argument_list></call>
"subrequested from r-&gt;uri = %s"</expr></argument>,
<argument><expr><name><name>top</name>-&gt;<name>uri</name></name> ? <name><name>top</name>-&gt;<name>uri</name></name> : "(unexpectedly NULL)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></while>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_is_recursion_limit_exceeded</name><argument_list>(<argument>const request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name> <init>=
<expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>top</name> <init>= <expr><name>r</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>redirects</name> <init>= <expr>0</expr></init>, <name>subreqs</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rlimit</name> <init>= <expr><name><name>conf</name>-&gt;<name>redirect_limit</name></name>
? <name><name>conf</name>-&gt;<name>redirect_limit</name></name>
: <name>AP_DEFAULT_MAX_INTERNAL_REDIRECTS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slimit</name> <init>= <expr><name><name>conf</name>-&gt;<name>subreq_limit</name></name>
? <name><name>conf</name>-&gt;<name>subreq_limit</name></name>
: <name>AP_DEFAULT_MAX_SUBREQ_DEPTH</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>top</name>-&gt;<name>prev</name></name> || <name><name>top</name>-&gt;<name/></name>main</expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>top</name>-&gt;<name>prev</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>++<name>redirects</name> &gt;= <name>rlimit</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00124</expr></argument>)</argument_list></call>
"Request exceeded the limit of %d internal "
"redirects due to probable configuration error. "
"Use 'LimitInternalRecursion' to increase the "
"limit if necessary. Use 'LogLevel debug' to get "
"a backtrace."</expr></argument>, <argument><expr><name>rlimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_backtrace</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>top</name> = <name><name>top</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>top</name>-&gt;<name>prev</name></name> &amp;&amp; <name><name>top</name>-&gt;<name/></name>main</expr>)</condition><then> <block>{
<if>if <condition>(<expr>++<name>subreqs</name> &gt;= <name>slimit</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00125</expr></argument>)</argument_list></call>
"Request exceeded the limit of %d subrequest "
"nesting levels due to probable configuration "
"error. Use 'LimitInternalRecursion' to increase "
"the limit if necessary. Use 'LogLevel debug' to "
"get a backtrace."</expr></argument>, <argument><expr><name>slimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_backtrace</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>top</name> = <name><name>top</name>-&gt;<name/></name>main</expr>;</expr_stmt>
}</block></then></if>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_trace_enable</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name> <init>=
<expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>trace_enable</name></name> = <name>AP_TRACE_ENABLE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>trace_enable</name></name> = <name>AP_TRACE_DISABLE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr>"extended"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>trace_enable</name></name> = <name>AP_TRACE_EXTENDED</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"TraceEnable must be one of 'on', 'off', or 'extended'"</expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_protocols</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name> <init>=
<expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIR_LOC_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>np</name> = (const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>protocols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>np</name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_protocols_honor_order</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name> <init>=
<expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIR_LOC_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>protocols_honor_order</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>protocols_honor_order</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"ProtocolsHonorOrder must be 'on' or 'off'"</expr>;</return>
}</block></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_http_protocol_options</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name> <init>=
<expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"allow0.9"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>http09_enable</name></name> |= <name>AP_HTTP09_ENABLE</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"require1.0"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>http09_enable</name></name> |= <name>AP_HTTP09_DISABLE</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"strict"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>http_conformance</name></name> |= <name>AP_HTTP_CONFORMANCE_STRICT</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"unsafe"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>http_conformance</name></name> |= <name>AP_HTTP_CONFORMANCE_UNSAFE</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"registeredmethods"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>http_methods</name></name> |= <name>AP_HTTP_METHODS_REGISTERED</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"lenientmethods"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>http_methods</name></name> |= <name>AP_HTTP_METHODS_LENIENT</name></expr>;</expr_stmt></then>
<else>else
<return>return <expr>"HttpProtocolOptions accepts "
"'Unsafe' or 'Strict' (default), "
"'RegisteredMethods' or 'LenientMethods' (default), and "
"'Require1.0' or 'Allow0.9' (default)"</expr>;</return></else></if></else></if></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr>(<name><name>conf</name>-&gt;<name>http09_enable</name></name> &amp; <name>AP_HTTP09_ENABLE</name>)
&amp;&amp; (<name><name>conf</name>-&gt;<name>http09_enable</name></name> &amp; <name>AP_HTTP09_DISABLE</name>)</expr>)</condition><then>
<return>return <expr>"HttpProtocolOptions 'Allow0.9' and 'Require1.0'"
" are mutually exclusive"</expr>;</return></then></if>
<if>if <condition>(<expr>(<name><name>conf</name>-&gt;<name>http_conformance</name></name> &amp; <name>AP_HTTP_CONFORMANCE_STRICT</name>)
&amp;&amp; (<name><name>conf</name>-&gt;<name>http_conformance</name></name> &amp; <name>AP_HTTP_CONFORMANCE_UNSAFE</name>)</expr>)</condition><then>
<return>return <expr>"HttpProtocolOptions 'Strict' and 'Unsafe'"
" are mutually exclusive"</expr>;</return></then></if>
<if>if <condition>(<expr>(<name><name>conf</name>-&gt;<name>http_methods</name></name> &amp; <name>AP_HTTP_METHODS_REGISTERED</name>)
&amp;&amp; (<name><name>conf</name>-&gt;<name>http_methods</name></name> &amp; <name>AP_HTTP_METHODS_LENIENT</name>)</expr>)</condition><then>
<return>return <expr>"HttpProtocolOptions 'RegisteredMethods' and 'LenientMethods'"
" are mutually exclusive"</expr>;</return></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_http_method</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>conf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ap_method_register</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_hash_t</name> *</type><name>errorlog_hash</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_constant_item</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_errorlog_info</name> *</type><name>info</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>end</name> <init>= <expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>end</name> - <name>buf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>parse_errorlog_misc_string</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>ap_errorlog_format_item</name> *</type><name>it</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>sa</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>scratch</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>d</name> <init>= <expr><name>scratch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>at_start</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>it</name>-&gt;<name>func</name></name> = <name>log_constant_item</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> = *<name>sa</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>s</name> &amp;&amp; *<name>s</name> != '%' &amp;&amp; (*<name>s</name> != ' ' || <name>at_start</name>) &amp;&amp; <name>d</name> &lt; <name>scratch</name> + <name>MAX_STRING_LEN</name></expr>)</condition> <block>{
<if>if <condition>(<expr>*<name>s</name> != '\\'</expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>s</name> != ' '</expr>)</condition><then> <block>{
<expr_stmt><expr><name>at_start</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>d</name>++ = *<name>s</name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>s</name>++</expr>;</expr_stmt>
<switch>switch <condition>(<expr>*<name>s</name></expr>)</condition> <block>{
<case>case <expr>'r'</expr>:
<expr_stmt><expr>*<name>d</name>++ = '\r'</expr>;</expr_stmt>
<expr_stmt><expr><name>s</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'n'</expr>:
<expr_stmt><expr>*<name>d</name>++ = '\n'</expr>;</expr_stmt>
<expr_stmt><expr><name>s</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'t'</expr>:
<expr_stmt><expr>*<name>d</name>++ = '\t'</expr>;</expr_stmt>
<expr_stmt><expr><name>s</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'\0'</expr>:
<expr_stmt><expr>*<name>d</name>++ = '\\'</expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr>*<name>d</name>++ = *<name>s</name>++</expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></else></if>
}</block></while>
<expr_stmt><expr>*<name>d</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name>-&gt;<name>arg</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>scratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>sa</name> = <name>s</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>parse_errorlog_item</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>ap_errorlog_format_item</name> *</type><name>it</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>sa</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name> <init>= <expr>*<name>sa</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_errorlog_handler</name> *</type><name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>s</name> != '%'</expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>s</name> == ' '</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>it</name>-&gt;<name>flags</name></name> |= <name>AP_ERRORLOG_FLAG_FIELD_SEP</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>parse_errorlog_misc_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>++<name>s</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>s</name> == ' '</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>it</name>-&gt;<name>flags</name></name> |= <name>AP_ERRORLOG_FLAG_FIELD_SEP</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>sa</name> = ++<name>s</name></expr>;</expr_stmt>
<return>return <expr><call><name>parse_errorlog_item</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>*<name>s</name> == '%'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>it</name>-&gt;<name>arg</name></name> = "%"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name>-&gt;<name>func</name></name> = <name>log_constant_item</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>sa</name> = ++<name>s</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if></else></if>
<while>while <condition>(<expr>*<name>s</name></expr>)</condition> <block>{
<switch>switch <condition>(<expr>*<name>s</name></expr>)</condition> <block>{
<case>case <expr>'{'</expr>:
<expr_stmt><expr>++<name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name>-&gt;<name>arg</name></name> = <call><name>ap_getword</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr>'}'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'+'</expr>:
<expr_stmt><expr>++<name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name>-&gt;<name>flags</name></name> |= <name>AP_ERRORLOG_FLAG_REQUIRED</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'-'</expr>:
<expr_stmt><expr>++<name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name>-&gt;<name>flags</name></name> |= <name>AP_ERRORLOG_FLAG_NULL_AS_HYPHEN</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'0'</expr>:
</case><case>case <expr>'1'</expr>:
</case><case>case <expr>'2'</expr>:
</case><case>case <expr>'3'</expr>:
</case><case>case <expr>'4'</expr>:
</case><case>case <expr>'5'</expr>:
</case><case>case <expr>'6'</expr>:
</case><case>case <expr>'7'</expr>:
</case><case>case <expr>'8'</expr>:
</case><case>case <expr>'9'</expr>:
<expr_stmt><expr><name>i</name> = *<name>s</name> - '0'</expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isdigit</name><argument_list>(<argument><expr>*++<name>s</name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr><name>i</name> = <name>i</name> * 10 + (*<name>s</name>) - '0'</expr>;</expr_stmt></while>
<expr_stmt><expr><name><name>it</name>-&gt;<name>min_loglevel</name></name> = <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'M'</expr>:
<expr_stmt><expr><name><name>it</name>-&gt;<name>func</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name>-&gt;<name>flags</name></name> |= <name>AP_ERRORLOG_FLAG_MESSAGE</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>sa</name> = ++<name>s</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</case><default>default:
<expr_stmt><expr><name>handler</name> = (<name>ap_errorlog_handler</name> *)<call><name>apr_hash_get</name><argument_list>(<argument><expr><name>errorlog_hash</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>handler</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>dummy</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dummy</name><index>[<expr>0</expr>]</index></name> = *<name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dummy</name><index>[<expr>1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Unrecognized error log format directive %"</expr></argument>,
<argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>it</name>-&gt;<name>func</name></name> = <name><name>handler</name>-&gt;<name>func</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>sa</name> = ++<name>s</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
}</block></while>
<return>return <expr>"Ran off end of error log format parsing args to some directive"</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_array_header_t</name> *</type><name>parse_errorlog_string</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>err</name></decl></param>,
<param><decl><type><name>int</name></type> <name>is_main_fmt</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>a</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>30</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_errorlog_format_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seen_msg_fmt</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>s</name> &amp;&amp; *<name>s</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>ap_errorlog_format_item</name> *</type><name>item</name> <init>=
<expr>(<name>ap_errorlog_format_item</name> *)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <call><name>parse_errorlog_item</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>err</name> = <name>res</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>item</name>-&gt;<name>flags</name></name> &amp; <name>AP_ERRORLOG_FLAG_MESSAGE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>is_main_fmt</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>err</name> = "%M cannot be used in once-per-request or "
"once-per-connection formats"</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>seen_msg_fmt</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>is_main_fmt</name> &amp;&amp; <name><name>item</name>-&gt;<name>flags</name></name> &amp; <name>AP_ERRORLOG_FLAG_REQUIRED</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>err</name> = "The '+' flag cannot be used in the main error log format"</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>is_main_fmt</name> &amp;&amp; <name><name>item</name>-&gt;<name>min_loglevel</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>err</name> = "The loglevel cannot be used as a condition in "
"once-per-request or once-per-connection formats"</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>item</name>-&gt;<name>min_loglevel</name></name> &gt; <name>APLOG_TRACE8</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>err</name> = "The specified loglevel modifier is out of range"</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr><name>is_main_fmt</name> &amp;&amp; !<name>seen_msg_fmt</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>err</name> = "main ErrorLogFormat must contain message format string '%M'"</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>a</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_errorlog_format</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg2</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err_string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name> <init>=
<expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>arg2</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>error_log_format</name></name> = <call><name>parse_errorlog_string</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>,
<argument><expr>&amp;<name>err_string</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr>"connection"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>error_log_conn</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>error_log_conn</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>5</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_array_header_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>*<name>arg2</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> **</type><name>e</name></decl>;</decl_stmt>
<expr_stmt><expr><name>e</name> = (<name>apr_array_header_t</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>error_log_conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>e</name> = <call><name>parse_errorlog_string</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr>&amp;<name>err_string</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr>"request"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>error_log_req</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>error_log_req</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>5</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_array_header_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>*<name>arg2</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> **</type><name>e</name></decl>;</decl_stmt>
<expr_stmt><expr><name>e</name> = (<name>apr_array_header_t</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>error_log_req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>e</name> = <call><name>parse_errorlog_string</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr>&amp;<name>err_string</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>err_string</name> = "ErrorLogFormat type must be one of request, connection"</expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<return>return <expr><name>err_string</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_register_errorlog_handler</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>char *tag</argument>,
<argument>ap_errorlog_handler_fn_t *handler</argument>,
<argument>int flags</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>ap_errorlog_handler</name> *</type><name>log_struct</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>log_struct</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>log_struct</name>-&gt;<name>func</name></name> = <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log_struct</name>-&gt;<name>flags</name></name> = <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>errorlog_hash</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>(const <name>void</name> *)<name>log_struct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_merge_trailers</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>core_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>merge_trailers</name></name> = (<name>arg</name> ? <name>AP_MERGE_TRAILERS_ENABLE</name> :
<name>AP_MERGE_TRAILERS_DISABLE</name>)</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>core_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;Directory"</expr></argument>, <argument><expr><name>dirsection</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Container for directives affecting resources located in the specified "
"directories"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;Location"</expr></argument>, <argument><expr><name>urlsection</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Container for directives affecting resources accessed through the "
"specified URL paths"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;VirtualHost"</expr></argument>, <argument><expr><name>virtualhost_section</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Container to map directives to a particular virtual host, takes one or "
"more host addresses"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;Files"</expr></argument>, <argument><expr><name>filesection</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Container for directives affecting files matching specified patterns"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;Limit"</expr></argument>, <argument><expr><name>ap_limit_section</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_LIMIT</name> | <name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"Container for authentication directives when accessed using specified HTTP "
"methods"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;LimitExcept"</expr></argument>, <argument><expr><name>ap_limit_section</name></expr></argument>, <argument><expr>(<name>void</name>*)1</expr></argument>,
<argument><expr><name>OR_LIMIT</name> | <name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"Container for authentication directives to be applied when any HTTP "
"method other than those specified is used to access the resource"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"&lt;IfModule"</expr></argument>, <argument><expr><name>start_ifmod</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EXEC_ON_READ</name> | <name>OR_ALL</name></expr></argument>,
<argument><expr>"Container for directives based on existence of specified modules"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"&lt;IfDefine"</expr></argument>, <argument><expr><name>start_ifdefine</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EXEC_ON_READ</name> | <name>OR_ALL</name></expr></argument>,
<argument><expr>"Container for directives based on existence of command line defines"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;DirectoryMatch"</expr></argument>, <argument><expr><name>dirsection</name></expr></argument>, <argument><expr>(<name>void</name>*)1</expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Container for directives affecting resources located in the "
"specified directories"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;LocationMatch"</expr></argument>, <argument><expr><name>urlsection</name></expr></argument>, <argument><expr>(<name>void</name>*)1</expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Container for directives affecting resources accessed through the "
"specified URL paths"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;FilesMatch"</expr></argument>, <argument><expr><name>filesection</name></expr></argument>, <argument><expr>(<name>void</name>*)1</expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Container for directives affecting files matching specified patterns"</expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GPROF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"GprofDir"</expr></argument>, <argument><expr><name>set_gprof_dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Directory to plop gmon.out files"</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AddDefaultCharset"</expr></argument>, <argument><expr><name>set_add_default_charset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"The name of the default charset to add to any Content-Type without one or 'Off' to disable"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AcceptPathInfo"</expr></argument>, <argument><expr><name>set_accept_path_info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"Set to on or off for PATH_INFO to be accepted by handlers, or default for the per-handler preference"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE12</name><argument_list>(<argument><expr>"Define"</expr></argument>, <argument><expr><name>set_define</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EXEC_ON_READ</name>|<name>ACCESS_CONF</name>|<name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Define a variable, optionally to a value. Same as passing -D to the command line."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"UnDefine"</expr></argument>, <argument><expr><name>unset_define</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EXEC_ON_READ</name>|<name>ACCESS_CONF</name>|<name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Undefine the existence of a variable. Undo a Define."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"Error"</expr></argument>, <argument><expr><name>generate_error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Generate error message from within configuration"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;If"</expr></argument>, <argument><expr><name>ifsection</name></expr></argument>, <argument><expr><name>COND_IF</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Container for directives to be conditionally applied"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;ElseIf"</expr></argument>, <argument><expr><name>ifsection</name></expr></argument>, <argument><expr><name>COND_ELSEIF</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Container for directives to be conditionally applied"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;Else"</expr></argument>, <argument><expr><name>ifsection</name></expr></argument>, <argument><expr><name>COND_ELSE</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Container for directives to be conditionally applied"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"AccessFileName"</expr></argument>, <argument><expr><name>set_access_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Name(s) of per-directory config files (default: .htaccess)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DocumentRoot"</expr></argument>, <argument><expr><name>set_document_root</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Root directory of the document tree"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"ErrorDocument"</expr></argument>, <argument><expr><name>set_error_document</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"Change responses for HTTP errors"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"AllowOverride"</expr></argument>, <argument><expr><name>set_override</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Controls what groups of directives can be configured by per-directory "
"config files"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE_ARGV</name><argument_list>(<argument><expr>"AllowOverrideList"</expr></argument>, <argument><expr><name>set_override_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Controls what individual directives can be configured by per-directory "
"config files"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"Options"</expr></argument>, <argument><expr><name>set_options</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_OPTIONS</name></expr></argument>,
<argument><expr>"Set a number of attributes for a given directory"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DefaultType"</expr></argument>, <argument><expr><name>set_default_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"the default media type for otherwise untyped files (DEPRECATED)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"FileETag"</expr></argument>, <argument><expr><name>set_etag_bits</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"Specify components used to construct a file's ETag"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"EnableMMAP"</expr></argument>, <argument><expr><name>set_enable_mmap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"Controls whether memory-mapping may be used to read files"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"EnableSendfile"</expr></argument>, <argument><expr><name>set_enable_sendfile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"Controls whether sendfile may be used to transmit files"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"Protocol"</expr></argument>, <argument><expr><name>set_protocol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Set the Protocol for httpd to use."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"AcceptFilter"</expr></argument>, <argument><expr><name>set_accf_map</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Set the Accept Filter to use for a protocol"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"Port"</expr></argument>, <argument><expr><name>ap_set_deprecated</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Port was replaced with Listen in Apache 2.0"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"HostnameLookups"</expr></argument>, <argument><expr><name>set_hostname_lookups</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ACCESS_CONF</name>|<name>RSRC_CONF</name></expr></argument>,
<argument><expr>"\"on\" to enable, \"off\" to disable reverse DNS lookups, or \"double\" to "
"enable double-reverse DNS lookups"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ServerAdmin"</expr></argument>, <argument><expr><name>set_server_string_slot</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>server_rec</name></expr></argument>, <argument><expr><name>server_admin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"The email address of the server administrator"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ServerName"</expr></argument>, <argument><expr><name>server_hostname_port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"The hostname and port of the server"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ServerSignature"</expr></argument>, <argument><expr><name>set_signature_flag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"En-/disable server signature (on|off|email)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ServerRoot"</expr></argument>, <argument><expr><name>set_server_root</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name> | <name>EXEC_ON_READ</name></expr></argument>,
<argument><expr>"Common directory of server-related files (logs, confs, etc.)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DefaultRuntimeDir"</expr></argument>, <argument><expr><name>set_runtime_dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name> | <name>EXEC_ON_READ</name></expr></argument>,
<argument><expr>"Common directory for run-time files (shared memory, locks, etc.)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ErrorLog"</expr></argument>, <argument><expr><name>set_server_string_slot</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>server_rec</name></expr></argument>, <argument><expr><name>error_fname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"The filename of the error log"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE12</name><argument_list>(<argument><expr>"ErrorLogFormat"</expr></argument>, <argument><expr><name>set_errorlog_format</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Format string for the ErrorLog"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"ServerAlias"</expr></argument>, <argument><expr><name>set_server_alias</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"A name or names alternately used to access the server"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ServerPath"</expr></argument>, <argument><expr><name>set_serverpath</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"The pathname the server can be reached at"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"Timeout"</expr></argument>, <argument><expr><name>set_timeout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Timeout duration (sec)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ContentDigest"</expr></argument>, <argument><expr><name>set_content_md5</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_OPTIONS</name></expr></argument>,
<argument><expr>"whether or not to send a Content-MD5 header with each request"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"UseCanonicalName"</expr></argument>, <argument><expr><name>set_use_canonical_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"How to work out the ServerName : Port when constructing URLs"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"UseCanonicalPhysicalPort"</expr></argument>, <argument><expr><name>set_use_canonical_phys_port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Whether to use the physical Port when constructing URLs"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"Include"</expr></argument>, <argument><expr><name>include_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>(<name>RSRC_CONF</name> | <name>ACCESS_CONF</name> | <name>EXEC_ON_READ</name>)</expr></argument>,
<argument><expr>"Name(s) of the config file(s) to be included; fails if the wildcard does "
"not match at least one file"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"IncludeOptional"</expr></argument>, <argument><expr><name>include_config</name></expr></argument>, <argument><expr>(<name>void</name>*)1</expr></argument>,
<argument><expr>(<name>RSRC_CONF</name> | <name>ACCESS_CONF</name> | <name>EXEC_ON_READ</name>)</expr></argument>,
<argument><expr>"Name or pattern of the config file(s) to be included; ignored if the file "
"does not exist or the pattern does not match any files"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"LogLevel"</expr></argument>, <argument><expr><name>set_loglevel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Level of verbosity in error logging"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"NameVirtualHost"</expr></argument>, <argument><expr><name>ap_set_name_virtual_host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"A numeric IP address:port, or the name of a host"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ServerTokens"</expr></argument>, <argument><expr><name>set_serv_tokens</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Determine tokens displayed in the Server: header - Min(imal), "
"Major, Minor, Prod(uctOnly), OS, or Full"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LimitRequestLine"</expr></argument>, <argument><expr><name>set_limit_req_line</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Limit on maximum size of an HTTP request line"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LimitRequestFieldsize"</expr></argument>, <argument><expr><name>set_limit_req_fieldsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Limit on maximum size of an HTTP request header field"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LimitRequestFields"</expr></argument>, <argument><expr><name>set_limit_req_fields</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Limit (0 = unlimited) on max number of header fields in a request message"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LimitRequestBody"</expr></argument>, <argument><expr><name>set_limit_req_body</name></expr></argument>,
<argument><expr>(<name>void</name>*)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>core_dir_config</name></expr></argument>, <argument><expr><name>limit_req_body</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Limit (in bytes) on maximum size of request message body"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LimitXMLRequestBody"</expr></argument>, <argument><expr><name>set_limit_xml_req_body</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Limit (in bytes) on maximum size of an XML-based request "
"body"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"Mutex"</expr></argument>, <argument><expr><name>ap_set_mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"mutex (or \"default\") and mechanism"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"MaxRanges"</expr></argument>, <argument><expr><name>set_max_ranges</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Maximum number of Ranges in a request before returning the entire "
"resource, or 0 for unlimited"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"MaxRangeOverlaps"</expr></argument>, <argument><expr><name>set_max_overlaps</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Maximum number of overlaps in Ranges in a request before returning the entire "
"resource, or 0 for unlimited"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"MaxRangeReversals"</expr></argument>, <argument><expr><name>set_max_reversals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Maximum number of reversals in Ranges in a request before returning the entire "
"resource, or 0 for unlimited"</expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_CPU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>AP_INIT_TAKE12</name><argument_list>(<argument><expr>"RLimitCPU"</expr></argument>, <argument><expr><name>set_limit_cpu</name></expr></argument>,
<argument><expr>(<name>void</name>*)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>core_dir_config</name></expr></argument>, <argument><expr><name>limit_cpu</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>OR_ALL</name></expr></argument>, <argument><expr>"Soft/hard limits for max CPU usage in seconds"</expr></argument>)</argument_list></call></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><call><name>AP_INIT_TAKE12</name><argument_list>(<argument><expr>"RLimitCPU"</expr></argument>, <argument><expr><name>no_set_limit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OR_ALL</name></expr></argument>, <argument><expr>"Soft/hard limits for max CPU usage in seconds"</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>RLIMIT_DATA</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>RLIMIT_VMEM</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>RLIMIT_AS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>AP_INIT_TAKE12</name><argument_list>(<argument><expr>"RLimitMEM"</expr></argument>, <argument><expr><name>set_limit_mem</name></expr></argument>,
<argument><expr>(<name>void</name>*)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>core_dir_config</name></expr></argument>, <argument><expr><name>limit_mem</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>OR_ALL</name></expr></argument>, <argument><expr>"Soft/hard limits for max memory usage per process"</expr></argument>)</argument_list></call></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><call><name>AP_INIT_TAKE12</name><argument_list>(<argument><expr>"RLimitMEM"</expr></argument>, <argument><expr><name>no_set_limit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OR_ALL</name></expr></argument>, <argument><expr>"Soft/hard limits for max memory usage per process"</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_NPROC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>AP_INIT_TAKE12</name><argument_list>(<argument><expr>"RLimitNPROC"</expr></argument>, <argument><expr><name>set_limit_nproc</name></expr></argument>,
<argument><expr>(<name>void</name>*)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>core_dir_config</name></expr></argument>, <argument><expr><name>limit_nproc</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>OR_ALL</name></expr></argument>, <argument><expr>"soft/hard limits for max number of processes per uid"</expr></argument>)</argument_list></call></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><call><name>AP_INIT_TAKE12</name><argument_list>(<argument><expr>"RLimitNPROC"</expr></argument>, <argument><expr><name>no_set_limit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OR_ALL</name></expr></argument>, <argument><expr>"soft/hard limits for max number of processes per uid"</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>AP_INIT_TAKE12</name><argument_list>(<argument><expr>"LimitInternalRecursion"</expr></argument>, <argument><expr><name>set_recursion_limit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"maximum recursion depth of internal redirects and subrequests"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"CGIPassAuth"</expr></argument>, <argument><expr><name>set_cgi_pass_auth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"Controls whether HTTP authorization headers, normally hidden, will "
"be passed to scripts"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"CGIVar"</expr></argument>, <argument><expr><name>set_cgi_var</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"Controls how some CGI variables are set"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"QualifyRedirectURL"</expr></argument>, <argument><expr><name>set_qualify_redirect_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"Controls whether HTTP authorization headers, normally hidden, will "
"be passed to scripts"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ForceType"</expr></argument>, <argument><expr><name>ap_set_string_slot_lower</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>core_dir_config</name></expr></argument>, <argument><expr><name>mime_type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"a mime type that overrides other configured type"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"SetHandler"</expr></argument>, <argument><expr><name>set_sethandler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"a handler name that overrides any other configured handler"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"SetOutputFilter"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>core_dir_config</name></expr></argument>, <argument><expr><name>output_filters</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"filter (or ; delimited list of filters) to be run on the request content"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"SetInputFilter"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>core_dir_config</name></expr></argument>, <argument><expr><name>input_filters</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"filter (or ; delimited list of filters) to be run on the request body"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AllowEncodedSlashes"</expr></argument>, <argument><expr><name>set_allow2f</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Allow URLs containing '/' encoded as '%2F'"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ScoreBoardFile"</expr></argument>, <argument><expr><name>ap_set_scoreboard</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"A file for Apache to maintain runtime process management information"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ExtendedStatus"</expr></argument>, <argument><expr><name>ap_set_extended_status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"\"On\" to track extended status information, \"Off\" to disable"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"SeeRequestTail"</expr></argument>, <argument><expr><name>ap_set_reqtail</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"For extended status, \"On\" to see the last 63 chars of "
"the request line, \"Off\" (default) to see the first 63"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"PidFile"</expr></argument>, <argument><expr><name>ap_mpm_set_pidfile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"A file for logging the server process ID"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"MaxRequestsPerChild"</expr></argument>, <argument><expr><name>ap_mpm_set_max_requests</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Maximum number of connections a particular child serves before "
"dying. (DEPRECATED, use MaxConnectionsPerChild)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"MaxConnectionsPerChild"</expr></argument>, <argument><expr><name>ap_mpm_set_max_requests</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Maximum number of connections a particular child serves before dying."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CoreDumpDirectory"</expr></argument>, <argument><expr><name>ap_mpm_set_coredumpdir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"The location of the directory Apache changes to before dumping core"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"MaxMemFree"</expr></argument>, <argument><expr><name>ap_mpm_set_max_mem_free</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Maximum number of 1k blocks a particular child's allocator may hold."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ThreadStackSize"</expr></argument>, <argument><expr><name>ap_mpm_set_thread_stacksize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Size in bytes of stack used by threads handling client connections"</expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AP_ENABLE_EXCEPTION_HOOK</name></expr></cpp:if>
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"EnableExceptionHook"</expr></argument>, <argument><expr><name>ap_mpm_set_exception_hook</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Controls whether exception hook may be called after a crash"</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"TraceEnable"</expr></argument>, <argument><expr><name>set_trace_enable</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"'on' (default), 'off' or 'extended' to trace request body content"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"MergeTrailers"</expr></argument>, <argument><expr><name>set_merge_trailers</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"merge request trailers into request headers or not"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"Protocols"</expr></argument>, <argument><expr><name>set_protocols</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Controls which protocols are allowed"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ProtocolsHonorOrder"</expr></argument>, <argument><expr><name>set_protocols_honor_order</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"'off' (default) or 'on' to respect given order of protocols, "
"by default the client specified order determines selection"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"HttpProtocolOptions"</expr></argument>, <argument><expr><name>set_http_protocol_options</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"'Allow0.9' or 'Require1.0' (default); "
"'RegisteredMethods' or 'LenientMethods' (default); "
"'Unsafe' or 'Strict' (default). Sets HTTP acceptance rules"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"RegisterHttpMethod"</expr></argument>, <argument><expr><name>set_http_method</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Registers non-standard HTTP methods"</expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_core_translate</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>proxyreq</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>uri</name></name> || ((<name><name>r</name>-&gt;<name>uri</name><index>[<expr>0</expr>]</index></name> != '/') &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00126</expr></argument>)</argument_list></call>
"Invalid URI in request %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>the_request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>path</name></name>
&amp;&amp; !<call><name>strncmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>pathlen</name></name></expr></argument>)</argument_list></call>
&amp;&amp; (<name><name>r</name>-&gt;<name>server</name>-&gt;<name>path</name><index>[<expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>pathlen</name></name> - 1</expr>]</index></name> == '/'
|| <name><name>r</name>-&gt;<name>uri</name><index>[<expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>pathlen</name></name></expr>]</index></name> == '/'
|| <name><name>r</name>-&gt;<name>uri</name><index>[<expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>pathlen</name></name></expr>]</index></name> == '\0')</expr>)</condition><then> <block>{
<expr_stmt><expr><name>path</name> = <name><name>r</name>-&gt;<name>uri</name></name> + <name><name>r</name>-&gt;<name>server</name>-&gt;<name>pathlen</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>path</name> = <name><name>r</name>-&gt;<name>uri</name></name></expr>;</expr_stmt>
}</block></else></if>
<while>while <condition>(<expr>*<name>path</name> == '/'</expr>)</condition> <block>{
<expr_stmt><expr>++<name>path</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_filepath_merge</name><argument_list>(<argument><expr>&amp;<name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><call><name>ap_document_root</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>APR_FILEPATH_TRUENAME</name>
| <name>APR_FILEPATH_SECUREROOT</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00127</expr></argument>)</argument_list></call>
"Cannot map %s to file"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>the_request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>canonical_filename</name></name> = <name><name>r</name>-&gt;<name>filename</name></name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>core_map_to_storage</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>access_status</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>ap_directory_walk</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>access_status</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>ap_file_walk</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>access_status</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>do_nothing</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>core_override_type</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name> <init>=
<expr>(<name>core_dir_config</name> *)<call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>mime_type</name></name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>mime_type</name></name></expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>(<name>char</name>*) <name><name>conf</name>-&gt;<name>mime_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>expr_handler</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name>val</name> = <call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>expr_handler</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03154</expr></argument>)</argument_list></call>
"Can't evaluate handler expression: %s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>val</name> != <call><name>ap_strstr_c</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"proxy:unix"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>tmp</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> = <name>tmp</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>handler</name></name> = <name>val</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>handler</name></name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>handler</name></name> = <name><name>conf</name>-&gt;<name>handler</name></name></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>used_path_info</name></name> == <name>AP_REQ_DEFAULT_PATH_INFO</name>)
&amp;&amp; (<name><name>conf</name>-&gt;<name>accept_path_info</name></name> != <name>AP_ACCEPT_PATHINFO_UNSET</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>used_path_info</name></name> = <name><name>conf</name>-&gt;<name>accept_path_info</name></name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>default_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errstatus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bld_content_md5</name></decl>;</decl_stmt>
<expr_stmt><expr><name>d</name> = (<name>core_dir_config</name> *)<call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bld_content_md5</name> = (<name><name>d</name>-&gt;<name>content_md5</name></name> == <name>AP_CONTENT_MD5_ON</name>)
&amp;&amp; <name><name>r</name>-&gt;<name>output_filters</name>-&gt;<name>frec</name>-&gt;<name>ftype</name></name> != <name>AP_FTYPE_RESOURCE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_allow_standard_methods</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>MERGE_ALLOW</name></expr></argument>, <argument><expr><name>M_GET</name></expr></argument>, <argument><expr><name>M_OPTIONS</name></expr></argument>, <argument><expr><name>M_POST</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>errstatus</name> = <call><name>ap_discard_request_body</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>errstatus</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_GET</name> || <name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_POST</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_NOFILE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00128</expr></argument>)</argument_list></call>
"File does not exist: %s"</expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_DIR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00129</expr></argument>)</argument_list></call>
"Attempt to serve directory: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>used_path_info</name></name> != <name>AP_REQ_ACCEPT_PATH_INFO</name>) &amp;&amp;
<name><name>r</name>-&gt;<name>path_info</name></name> &amp;&amp; *<name><name>r</name>-&gt;<name>path_info</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00130</expr></argument>)</argument_list></call>
"File does not exist: %s"</expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_GET</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>core_request_config</name> *</type><name>req_cfg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>req_cfg</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>req_cfg</name>-&gt;<name>deliver_script</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00131</expr></argument>)</argument_list></call>
"This resource does not accept the %s method."</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_METHOD_NOT_ALLOWED</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>status</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>fd</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>APR_READ</name> | <name>APR_BINARY</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SENDFILE</name></expr></cpp:if>
| <call><name>AP_SENDFILE_ENABLED</name><argument_list>(<argument><expr><name><name>d</name>-&gt;<name>enable_sendfile</name></name></expr></argument>)</argument_list></call></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00132</expr></argument>)</argument_list></call>
"file permissions deny server access: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_update_mtime</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>finfo</name>.<name>mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_last_modified</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_etag</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_accept_ranges</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_content_length</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>finfo</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bld_content_md5</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-MD5"</expr></argument>,
<argument><expr><call><name>ap_md5digest</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>errstatus</name> = <call><name>ap_meets_conditions</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>errstatus</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>e</name> = <call><name>apr_brigade_insert_file</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>finfo</name>.<name>size</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_MMAP</name></expr></cpp:if>
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>enable_mmap</name></name> == <name>ENABLE_MMAP_OFF</name></expr>)</condition><then> <block>{
<expr_stmt><expr>(<name>void</name>)<call><name>apr_bucket_file_enable_mmap</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></else></if>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name>
|| <name><name>r</name>-&gt;<name>status</name></name> != <name>HTTP_OK</name>
|| <name><name>c</name>-&gt;<name>aborted</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00133</expr></argument>)</argument_list></call>
"default_handler: ap_pass_brigade returned %i"</expr></argument>,
<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AP_FILTER_ERROR</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_INVALID</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>the_request</name></name>
&amp;&amp; <name><name>r</name>-&gt;<name>the_request</name><index>[<expr>0</expr>]</index></name> == 0x16
&amp;&amp; (<name><name>r</name>-&gt;<name>the_request</name><index>[<expr>1</expr>]</index></name> == 0x2 || <name><name>r</name>-&gt;<name>the_request</name><index>[<expr>1</expr>]</index></name> == 0x3)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00134</expr></argument>)</argument_list></call>
"Invalid method in request %s - possible attempt to establish SSL connection on non-SSL port"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>the_request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00135</expr></argument>)</argument_list></call>
"Invalid method in request %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>the_request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>HTTP_NOT_IMPLEMENTED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_OPTIONS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_send_http_options</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>HTTP_METHOD_NOT_ALLOWED</name></expr>;</return>
}</block></else></if>
}</block></function>
<expr_stmt><expr><call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ap_logio_add_bytes_out</name></expr></argument>)</argument_list></call> *<name>ap__logio_add_bytes_out</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>authz_some_auth_required</name></expr></argument>)</argument_list></call> *<name>ap__authz_ap_some_auth_required</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sys_privileges</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_sys_privileges_handlers</name><argument_list>(<argument>int inc</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><name>sys_privileges</name> += <name>inc</name></expr>;</expr_stmt>
<return>return <expr><name>sys_privileges</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_errorlog_dir</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>s</name>-&gt;<name>error_fname</name></name> || <name><name>s</name>-&gt;<name>error_fname</name><index>[<expr>0</expr>]</index></name> == '|'
|| <call><name>strcmp</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>error_fname</name></name></expr></argument>, <argument><expr>"syslog"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>abs</name> <init>= <expr><call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>error_fname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>dir</name> <init>= <expr><call><name>ap_make_dirstr_parent</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>finfo</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>APR_FINFO_TYPE</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name> &amp;&amp; <name><name>finfo</name>.<name>filetype</name></name> != <name>APR_DIR</name></expr>)</condition><then>
<expr_stmt><expr><name>rv</name> = <name>APR_ENOTDIR</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>desc</name> <init>= <expr>"main error log"</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>s</name>-&gt;<name>defn_name</name></name></expr>)</condition><then>
<expr_stmt><expr><name>desc</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"error log of vhost defined at %s:%d"</expr></argument>,
<argument><expr><name><name>s</name>-&gt;<name>defn_name</name></name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>defn_line_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name>|<name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>,
<argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02291</expr></argument>)</argument_list></call>
"Cannot access directory '%s' for %s"</expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
}</block></else></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>core_check_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>s</name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>check_errorlog_dir</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then>
<expr_stmt><expr><name>rv</name> = !<name>OK</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>s</name> = <name><name>s</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>core_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_mutex_init</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>saved_server_config_defines</name></expr>)</condition><then>
<expr_stmt><expr><call><name>init_config_defines</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>reset_config_defines</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpm_common_pre_config</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>core_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>ap__logio_add_bytes_out</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_logio_add_bytes_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ident_lookup</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_ident_lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap__authz_ap_some_auth_required</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>authz_some_auth_required</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>authn_ap_auth_type</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>authn_ap_auth_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>authn_ap_auth_name</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>authn_ap_auth_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>access_compat_ap_satisfies</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>access_compat_ap_satisfies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_banner</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_setup_make_content_type</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_setup_auth_internal</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>sys_privileges</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00136</expr></argument>)</argument_list></call>
"Server MUST relinquish startup privileges before "
"accepting connections. Please ensure mod_unixd "
"or other system security module is loaded."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ap_mpm_end_gen_helper</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>core_insert_filter</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>conf</name> <init>= <expr>(<name>core_dir_config</name> *)
<call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filter</name></decl>, *<decl><type ref="prev"/><name>filters</name> <init>= <expr><name><name>conf</name>-&gt;<name>output_filters</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>filters</name></expr>)</condition><then> <block>{
<while>while <condition>(<expr>*<name>filters</name> &amp;&amp; (<name>filter</name> = <call><name>ap_getword</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>filters</name></expr></argument>, <argument><expr>';'</expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
<expr_stmt><expr><call><name>ap_add_output_filter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></then></if>
<expr_stmt><expr><name>filters</name> = <name><name>conf</name>-&gt;<name>input_filters</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>filters</name></expr>)</condition><then> <block>{
<while>while <condition>(<expr>*<name>filters</name> &amp;&amp; (<name>filter</name> = <call><name>ap_getword</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>filters</name></expr></argument>, <argument><expr>';'</expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
<expr_stmt><expr><call><name>ap_add_input_filter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></then></if>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_size_t</name></type> <name>num_request_notes</name> <init>= <expr><name>AP_NUM_STD_NOTES</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>reset_request_notes</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>num_request_notes</name> = <name>AP_NUM_STD_NOTES</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_size_t</argument>)</argument_list></macro> <macro><name>ap_register_request_note</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>apr_hook_global_pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>reset_request_notes</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>num_request_notes</name>++</expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void **</argument>)</argument_list></macro> <macro><name>ap_get_request_note</name><argument_list>(<argument>request_rec *r</argument>, <argument>apr_size_t note_num</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>core_request_config</name> *</type><name>req_cfg</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>note_num</name> &gt;= <name>num_request_notes</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>req_cfg</name> = (<name>core_request_config</name> *)
<call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>req_cfg</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr>&amp;(<name><name>req_cfg</name>-&gt;<name>notes</name><index>[<expr><name>note_num</name></expr>]</index></name>)</expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_socket_t *</argument>)</argument_list></macro> <macro><name>ap_get_conn_socket</name><argument_list>(<argument>conn_rec *c</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>conn_config</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>core_create_req</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_request_config</name> *</type><name>req_cfg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>req_cfg</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>core_request_config</name></expr></argument>)</argument_list></sizeof> +
<sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof> * <name>num_request_notes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req_cfg</name>-&gt;<name>notes</name></name> = <call>(<name>void</name> **)<argument_list>(<argument><expr>(<name>char</name> *)<name>req_cfg</name> + <sizeof>sizeof<argument_list>(<argument><expr><name>core_request_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req_cfg</name>-&gt;<name>deliver_script</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>core_request_config</name> *</type><name>main_req_cfg</name> <init>= <expr>(<name>core_request_config</name> *)
<call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name/></name>main-&gt;<name>request_config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>req_cfg</name>-&gt;<name>bb</name></name> = <name><name>main_req_cfg</name>-&gt;<name>bb</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>req_cfg</name>-&gt;<name>bb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_set_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr><name>req_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>core_create_proxy_req</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>pr</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>core_create_req</name><argument_list>(<argument><expr><name>pr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>conn_rec</name> *</type><name>core_create_conn</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>ptrans</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>server</name></decl></param>,
<param><decl><type><name>apr_socket_t</name> *</type><name>csd</name></decl></param>, <param><decl><type><name>long</name></type> <name>id</name></decl></param>, <param><decl><type><name>void</name> *</type><name>sbh</name></decl></param>,
<param><decl><type><name>apr_bucket_alloc_t</name> *</type><name>alloc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr>(<name>conn_rec</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>ptrans</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>conn_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>sbh</name></name> = <name>sbh</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_update_child_status</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>SERVER_BUSY_READ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>conn_config</name></name> = <call><name>ap_create_conn_config</name><argument_list>(<argument><expr><name>ptrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>notes</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>ptrans</name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>pool</name></name> = <name>ptrans</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_socket_addr_get</name><argument_list>(<argument><expr>&amp;<name><name>c</name>-&gt;<name>local_addr</name></name></expr></argument>, <argument><expr><name>APR_LOCAL</name></expr></argument>, <argument><expr><name>csd</name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00137</expr></argument>)</argument_list></call>
"apr_socket_addr_get(APR_LOCAL)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name>csd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_sockaddr_ip_get</name><argument_list>(<argument><expr>&amp;<name><name>c</name>-&gt;<name>local_ip</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>local_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_socket_addr_get</name><argument_list>(<argument><expr>&amp;<name><name>c</name>-&gt;<name>client_addr</name></name></expr></argument>, <argument><expr><name>APR_REMOTE</name></expr></argument>, <argument><expr><name>csd</name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00138</expr></argument>)</argument_list></call>
"apr_socket_addr_get(APR_REMOTE)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name>csd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_sockaddr_ip_get</name><argument_list>(<argument><expr>&amp;<name><name>c</name>-&gt;<name>client_ip</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>client_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>base_server</name></name> = <name>server</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>id</name></name> = <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name> = <name>alloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>clogging_input_filters</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>core_pre_connection</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>void</name> *</type><name>csd</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_net_rec</name> *</type><name>net</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>net</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_opt_set</name><argument_list>(<argument><expr><name>csd</name></expr></argument>, <argument><expr><name>APR_TCP_NODELAY</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> &amp;&amp; <name>rv</name> != <name>APR_ENOTIMPL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00139</expr></argument>)</argument_list></call>
"apr_socket_opt_set(APR_TCP_NODELAY)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name>csd</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>base_server</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00140</expr></argument>)</argument_list></call>
"apr_socket_timeout_set"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>net</name>-&gt;<name>c</name></name> = <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>net</name>-&gt;<name>in_ctx</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>net</name>-&gt;<name>out_ctx</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>net</name>-&gt;<name>client_socket</name></name> = <name>csd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_core_module_config</name><argument_list>(<argument><expr><name><name>net</name>-&gt;<name>c</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr><name>csd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_add_input_filter_handle</name><argument_list>(<argument><expr><name>ap_core_input_filter_handle</name></expr></argument>, <argument><expr><name>net</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>net</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_add_output_filter_handle</name><argument_list>(<argument><expr><name>ap_core_output_filter_handle</name></expr></argument>, <argument><expr><name>net</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>net</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DONE</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_state_query</name><argument_list>(<argument>int query</argument>)</argument_list></macro> <block>{
<switch>switch <condition>(<expr><name>query</name></expr>)</condition> <block>{
<case>case <expr><name>AP_SQ_MAIN_STATE</name></expr>:
<return>return <expr><name>ap_main_state</name></expr>;</return>
</case><case>case <expr><name>AP_SQ_RUN_MODE</name></expr>:
<return>return <expr><name>ap_run_mode</name></expr>;</return>
</case><case>case <expr><name>AP_SQ_CONFIG_GEN</name></expr>:
<return>return <expr><name>ap_config_generation</name></expr>;</return>
</case><default>default:
<return>return <expr><name>AP_SQ_NOT_SUPPORTED</name></expr>;</return>
</default>}</block></switch>
}</block>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_random_t</name> *</type><name>rng</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_thread_mutex_t</name> *</type><name>rng_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type> <name>core_child_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pchild</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_proc_t</name></type> <name>proc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>threaded_mpm</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_IS_THREADED</name></expr></argument>, <argument><expr>&amp;<name>threaded_mpm</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name>
&amp;&amp; <name>threaded_mpm</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_thread_mutex_create</name><argument_list>(<argument><expr>&amp;<name>rng_mutex</name></expr></argument>, <argument><expr><name>APR_THREAD_MUTEX_DEFAULT</name></expr></argument>, <argument><expr><name>pchild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>proc</name>.<name>pid</name></name> = <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_random_after_fork</name><argument_list>(<argument><expr>&amp;<name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>core_optional_fn_retrieve</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_init_scoreboard</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_random_parent_after_fork</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_uint16_t</name></type> <name>data</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_random_insecure_bytes</name><argument_list>(<argument><expr><name>rng</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_init_rng</name><argument_list>(<argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>seed</name><index>[<expr>8</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rng</name> = <call><name>apr_random_standard_new</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_generate_random_bytes</name><argument_list>(<argument><expr><name>seed</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
<expr_stmt><expr><call><name>apr_random_add_entropy</name><argument_list>(<argument><expr><name>rng</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_random_insecure_ready</name><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>rv</name> == <name>APR_ENOTENOUGHENTROPY</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return;</return></then></if>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00141</expr></argument>)</argument_list></call>
"Could not initialize random number generator"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_random_insecure_bytes</name><argument_list>(<argument>void *buf</argument>, <argument>apr_size_t size</argument>)</argument_list></macro> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<if>if <condition>(<expr><name>rng_mutex</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name>rng_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>apr_random_insecure_bytes</name><argument_list>(<argument><expr><name>rng</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<if>if <condition>(<expr><name>rng_mutex</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name>rng_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAND_RANGE</name><parameter_list>(<param><type><name>__n</name></type></param>, <param><type><name>__min</name></type></param>, <param><type><name>__max</name></type></param>, <param><type><name>__tmax</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(__n) = (__min) + (long) ((double) ((__max) - (__min) + 1.0) * ((__n) / ((__tmax) + 1.0)))</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_uint32_t</argument>)</argument_list></macro> <macro><name>ap_random_pick</name><argument_list>(<argument>apr_uint32_t min</argument>, <argument>apr_uint32_t max</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>number</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(!<name>__GNUC__</name> || <name>__GNUC__</name> &gt;= 5 || (<name>__GNUC__</name> == 4 &amp;&amp; <name>__GNUC_MINOR__</name> &gt;= 8) || !<name>__sparc__</name> || <name>APR_SIZEOF_VOIDP</name> != 8)</expr></cpp:if>
<if>if <condition>(<expr><name>max</name> &lt; 16384</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_uint16_t</name></type> <name>num16</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_random_insecure_bytes</name><argument_list>(<argument><expr>&amp;<name>num16</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>num16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RAND_RANGE</name><argument_list>(<argument><expr><name>num16</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>APR_UINT16_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>number</name> = <name>num16</name></expr>;</expr_stmt>
}</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr_stmt><expr><call><name>ap_random_insecure_bytes</name><argument_list>(<argument><expr>&amp;<name>number</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RAND_RANGE</name><argument_list>(<argument><expr><name>number</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>APR_UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>number</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>core_insert_network_bucket</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
<param><decl><type><name>apr_socket_t</name> *</type><name>socket</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name> <init>= <expr><call><name>apr_bucket_socket_create</name><argument_list>(<argument><expr><name>socket</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>core_dirwalk_stat</name><parameter_list>(<param><decl><type><name>apr_finfo_t</name> *</type><name>finfo</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>apr_int32_t</name></type> <name>wanted</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>apr_stat</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>wanted</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>core_dump_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>sconf</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>defines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>ap_exists_config_define</name><argument_list>(<argument><expr>"DUMP_RUN_CFG"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>apr_file_open_stdout</name><argument_list>(<argument><expr>&amp;<name>out</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"ServerRoot: \"%s\"\n"</expr></argument>, <argument><expr><name>ap_server_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>sconf</name>-&gt;<name>ap_document_root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"Main DocumentRoot: \"%s\"\n"</expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>s</name>-&gt;<name>error_fname</name><index>[<expr>0</expr>]</index></name> != '|' &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>error_fname</name></name></expr></argument>, <argument><expr>"syslog"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<expr_stmt><expr><name>tmp</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>error_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>tmp</name> = <name><name>s</name>-&gt;<name>error_fname</name></name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"Main ErrorLog: \"%s\"\n"</expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ap_scoreboard_fname</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>tmp</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ap_scoreboard_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"ScoreBoardFile: \"%s\"\n"</expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_dump_mutexes</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_mpm_dump_pidfile</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>defines</name> = (const <name>char</name> **)<name><name>ap_server_config_defines</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>ap_server_config_defines</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><name><name>defines</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>server_config_defined_vars</name></expr>)</condition><then>
<expr_stmt><expr><name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>server_config_defined_vars</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>val</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"Define: %s=%s\n"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"Define: %s\n"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>core_upgrade_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>upgrade</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>master</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>upgrade</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Upgrade"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>upgrade</name> &amp;&amp; *<name>upgrade</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conn</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Connection"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_find_token</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr>"upgrade"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>offers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>ap_parse_token_list_strict</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>upgrade</name></expr></argument>, <argument><expr>&amp;<name>offers</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02910</expr></argument>)</argument_list></call>
"parsing Upgrade header: %s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>offers</name> &amp;&amp; <name><name>offers</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>protocol</name> <init>= <expr><call><name>ap_select_protocol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>offers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>protocol</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>protocol</name></expr></argument>, <argument><expr><call><name>ap_get_protocol</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02909</expr></argument>)</argument_list></call>
"Upgrade selects '%s'"</expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_clear</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Upgrade"</expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Connection"</expr></argument>, <argument><expr>"Upgrade"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_SWITCHING_PROTOCOLS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <call><name>ap_get_status_line</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_send_interim_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_switch_protocol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_CLOSE</name></expr>;</expr_stmt>
<return>return <expr><name>DONE</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>!<name><name>c</name>-&gt;<name>keepalives</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>upgrades</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_get_protocol_upgrades</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>upgrades</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>upgrades</name> &amp;&amp; <name><name>upgrades</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>protocols</name> <init>= <expr><call><name>apr_array_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>upgrades</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Upgrade"</expr></argument>, <argument><expr><name>protocols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Connection"</expr></argument>, <argument><expr>"Upgrade"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if></else></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>core_upgrade_storage</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_OPTIONS</name>) &amp;&amp; <name><name>r</name>-&gt;<name>uri</name></name> &amp;&amp; (<name><name>r</name>-&gt;<name>uri</name><index>[<expr>0</expr>]</index></name> == '*') &amp;&amp;
(<name><name>r</name>-&gt;<name>uri</name><index>[<expr>1</expr>]</index></name> == '\0')</expr>)</condition><then> <block>{
<return>return <expr><call><name>core_upgrade_handler</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>errorlog_hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_log_hooks</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_config_hooks</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_expr_init</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_create_connection</name><argument_list>(<argument><expr><name>core_create_conn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_REALLY_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_connection</name><argument_list>(<argument><expr><name>core_pre_connection</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_REALLY_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>core_pre_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_REALLY_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>core_post_config</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_REALLY_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_check_config</name><argument_list>(<argument><expr><name>core_check_config</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_test_config</name><argument_list>(<argument><expr><name>core_dump_config</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_translate_name</name><argument_list>(<argument><expr><name>ap_core_translate</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_REALLY_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_map_to_storage</name><argument_list>(<argument><expr><name>core_upgrade_storage</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_REALLY_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_map_to_storage</name><argument_list>(<argument><expr><name>core_map_to_storage</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_REALLY_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_open_logs</name><argument_list>(<argument><expr><name>ap_open_logs</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_REALLY_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_child_init</name><argument_list>(<argument><expr><name>core_child_init</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_REALLY_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_child_init</name><argument_list>(<argument><expr><name>ap_logs_child_init</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>core_upgrade_handler</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_REALLY_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>default_handler</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_REALLY_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_type_checker</name><argument_list>(<argument><expr><name>do_nothing</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_REALLY_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_fixups</name><argument_list>(<argument><expr><name>core_override_type</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_REALLY_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_create_request</name><argument_list>(<argument><expr><name>core_create_req</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_OPTIONAL_HOOK</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>, <argument><expr><name>create_req</name></expr></argument>, <argument><expr><name>core_create_proxy_req</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_mpm</name><argument_list>(<argument><expr><name>ap_create_scoreboard</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_child_status</name><argument_list>(<argument><expr><name>ap_core_child_status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_insert_network_bucket</name><argument_list>(<argument><expr><name>core_insert_network_bucket</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_REALLY_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_dirwalk_stat</name><argument_list>(<argument><expr><name>core_dirwalk_stat</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_REALLY_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_open_htaccess</name><argument_list>(<argument><expr><name>ap_open_htaccess</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_REALLY_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_optional_fn_retrieve</name><argument_list>(<argument><expr><name>core_optional_fn_retrieve</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_insert_filter</name><argument_list>(<argument><expr><name>core_insert_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_core_input_filter_handle</name> =
<call><name>ap_register_input_filter</name><argument_list>(<argument><expr>"CORE_IN"</expr></argument>, <argument><expr><name>ap_core_input_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_NETWORK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_content_length_filter_handle</name> =
<call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"CONTENT_LENGTH"</expr></argument>, <argument><expr><name>ap_content_length_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_PROTOCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_core_output_filter_handle</name> =
<call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"CORE"</expr></argument>, <argument><expr><name>ap_core_output_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_NETWORK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_subreq_core_filter_handle</name> =
<call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"SUBREQ_CORE"</expr></argument>, <argument><expr><name>ap_sub_req_output_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_CONTENT_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_old_write_func</name> =
<call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"OLD_WRITE"</expr></argument>, <argument><expr><name>ap_old_write_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_RESOURCE</name> - 10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>MPM20_MODULE_STUFF</name></expr>,
<expr><name>AP_PLATFORM_REWRITE_ARGS_HOOK</name></expr>,
<expr><name>create_core_dir_config</name></expr>,
<expr><name>merge_core_dir_configs</name></expr>,
<expr><name>create_core_server_config</name></expr>,
<expr><name>merge_core_server_configs</name></expr>,
<expr><name>core_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
