<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="include/ap_mpm.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_MPM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPM_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>, <argument>mpm</argument>, <argument>(apr_pool_t *pconf, apr_pool_t *plog, server_rec *server_conf)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_os_create_privileged_process</name><argument_list>(
<argument><expr>const <name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>apr_proc_t</name> *<name>newproc</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>progname</name></expr></argument>,
<argument><expr>const <name>char</name> * const *<name>args</name></expr></argument>,
<argument><expr>const <name>char</name> * const *<name>env</name></expr></argument>,
<argument><expr><name>apr_procattr_t</name> *<name>attr</name></expr></argument>,
<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_NOT_SUPPORTED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_STATIC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_DYNAMIC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_STARTING</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_RUNNING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_STOPPING</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_MAX_DAEMON_USED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_IS_THREADED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_IS_FORKED</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_HARD_LIMIT_DAEMONS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_HARD_LIMIT_THREADS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_MAX_THREADS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_MIN_SPARE_DAEMONS</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_MIN_SPARE_THREADS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_MAX_SPARE_DAEMONS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_MAX_SPARE_THREADS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_MAX_REQUESTS_DAEMON</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_MAX_DAEMONS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_MPM_STATE</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_IS_ASYNC</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_GENERATION</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPMQ_HAS_SERF</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_mpm_query</name><argument_list>(<argument>int query_code</argument>, <argument>int *result</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>ap_mpm_callback_fn_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>;</function_decl></typedef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_mpm_register_timed_callback</name><argument_list>(<argument>apr_time_t t</argument>,
<argument>ap_mpm_callback_fn_t *cbfn</argument>,
<argument>void *baton</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<typedef>typedef <type><enum>enum <name>mpm_child_status</name> <block>{
<decl><name>MPM_CHILD_STARTED</name></decl>,
<decl><name>MPM_CHILD_EXITED</name></decl>,
<decl><name>MPM_CHILD_LOST_SLOT</name></decl>
}</block></enum></type> <name>mpm_child_status</name>;</typedef>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>void</argument>,<argument>child_status</argument>,<argument>(server_rec *s, pid_t pid, ap_generation_t gen,
int slot, mpm_child_status state)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>void</argument>,<argument>end_generation</argument>,<argument>(server_rec *s, ap_generation_t gen)</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GPROF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>moncontrol</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MONCONTROL</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>moncontrol(x)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MONCONTROL</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_ENABLE_EXCEPTION_HOOK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>ap_exception_info_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>sig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_exception_info_t</name>;</typedef>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>,<argument>fatal_exception</argument>,<argument>(ap_exception_info_t *ei)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
