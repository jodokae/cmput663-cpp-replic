<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="include/ap_regkey.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_REGKEY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REGKEY_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type>struct <name>ap_regkey_t</name></type> <name>ap_regkey_t</name>;</typedef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const ap_regkey_t *</argument>)</argument_list></macro> <macro><name>ap_regkey_const</name><argument_list>(<argument>int i</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REGKEY_CLASSES_ROOT</name></cpp:macro> <cpp:value>ap_regkey_const(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REGKEY_CURRENT_CONFIG</name></cpp:macro> <cpp:value>ap_regkey_const(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REGKEY_CURRENT_USER</name></cpp:macro> <cpp:value>ap_regkey_const(2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REGKEY_LOCAL_MACHINE</name></cpp:macro> <cpp:value>ap_regkey_const(3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REGKEY_USERS</name></cpp:macro> <cpp:value>ap_regkey_const(4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REGKEY_PERFORMANCE_DATA</name></cpp:macro> <cpp:value>ap_regkey_const(5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REGKEY_DYN_DATA</name></cpp:macro> <cpp:value>ap_regkey_const(6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REGKEY_EXPAND</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_regkey_open</name><argument_list>(<argument>ap_regkey_t **newkey</argument>,
<argument>const ap_regkey_t *parentkey</argument>,
<argument>const char *keyname</argument>,
<argument>apr_int32_t flags</argument>,
<argument>apr_pool_t *pool</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_regkey_close</name><argument_list>(<argument><expr><name>ap_regkey_t</name> *<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_regkey_remove</name><argument_list>(<argument><expr>const <name>ap_regkey_t</name> *<name>parent</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>keyname</name></expr></argument>,
<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_regkey_value_get</name><argument_list>(<argument><expr><name>char</name> **<name>result</name></expr></argument>,
<argument><expr><name>ap_regkey_t</name> *<name>key</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>valuename</name></expr></argument>,
<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_regkey_value_set</name><argument_list>(<argument>ap_regkey_t *key</argument>,
<argument>const char *valuename</argument>,
<argument>const char *value</argument>,
<argument>apr_int32_t flags</argument>,
<argument>apr_pool_t *pool</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_regkey_value_raw_get</name><argument_list>(<argument><expr><name>void</name> **<name>result</name></expr></argument>,
<argument><expr><name>apr_size_t</name> *<name>resultsize</name></expr></argument>,
<argument><expr><name>apr_int32_t</name> *<name>resulttype</name></expr></argument>,
<argument><expr><name>ap_regkey_t</name> *<name>key</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>valuename</name></expr></argument>,
<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_regkey_value_raw_set</name><argument_list>(<argument>ap_regkey_t *key</argument>,
<argument>const char *valuename</argument>,
<argument>const void *value</argument>,
<argument>apr_size_t valuesize</argument>,
<argument>apr_int32_t valuetype</argument>,
<argument>apr_pool_t *pool</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_regkey_value_array_get</name><argument_list>(<argument><expr><name>apr_array_header_t</name> **<name>result</name></expr></argument>,
<argument><expr><name>ap_regkey_t</name> *<name>key</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>valuename</name></expr></argument>,
<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_regkey_value_array_set</name><argument_list>(<argument>ap_regkey_t *key</argument>,
<argument>const char *valuename</argument>,
<argument>int nelts</argument>,
<argument>const char * const * elts</argument>,
<argument>apr_pool_t *pool</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_regkey_value_remove</name><argument_list>(<argument><expr>const <name>ap_regkey_t</name> *<name>key</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>valuename</name></expr></argument>,
<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
