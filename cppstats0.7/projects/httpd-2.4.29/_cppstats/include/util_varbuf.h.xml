<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="include/util_varbuf.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_VARBUF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_VARBUF_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_VARBUF_UNKNOWN</name></cpp:macro> <cpp:value>APR_SIZE_MAX</cpp:value></cpp:define>
<struct_decl>struct <name>ap_varbuf_info</name>;</struct_decl>
<struct>struct <name>ap_varbuf</name> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>strlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_varbuf_info</name> *</type><name>info</name></decl>;</decl_stmt>
}</block>;</struct>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_varbuf_init</name><argument_list>(<argument>apr_pool_t *pool</argument>, <argument>struct ap_varbuf *vb</argument>,
<argument>apr_size_t init_size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_varbuf_grow</name><argument_list>(<argument>struct ap_varbuf *vb</argument>, <argument>apr_size_t new_size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_varbuf_free</name><argument_list>(<argument>struct <expr><name>ap_varbuf</name> *<name>vb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_varbuf_strmemcat</name><argument_list>(<argument>struct ap_varbuf *vb</argument>, <argument>const char *str</argument>,
<argument>int len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_varbuf_pdup</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>struct ap_varbuf *vb</argument>,
<argument>const char *prepend</argument>, <argument>apr_size_t prepend_len</argument>,
<argument>const char *append</argument>, <argument>apr_size_t append_len</argument>,
<argument>apr_size_t *new_len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_varbuf_strcat</name><parameter_list>(<param><type><name>vb</name></type></param>, <param><type><name>str</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ap_varbuf_strmemcat(vb, str, strlen(str))</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_varbuf_regsub</name><argument_list>(<argument>struct ap_varbuf *vb</argument>,
<argument>const char *input</argument>,
<argument>const char *source</argument>,
<argument>apr_size_t nmatch</argument>,
<argument>ap_regmatch_t pmatch[]</argument>,
<argument>apr_size_t maxlen</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_varbuf_cfg_getline</name><argument_list>(<argument>struct ap_varbuf *vb</argument>,
<argument>ap_configfile_t *cfp</argument>,
<argument>apr_size_t max_len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
