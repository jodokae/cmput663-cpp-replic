<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="include/ap_regex.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_REGEX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REGEX_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REG_ICASE</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REG_NEWLINE</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REG_NOTBOL</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REG_NOTEOL</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REG_EXTENDED</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REG_NOSUB</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REG_MULTI</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REG_NOMEM</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REG_DOTALL</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REG_MATCH</name></cpp:macro> <cpp:value>"MATCH_"</cpp:value></cpp:define>
<enum>enum <block>{
<decl><name>AP_REG_ASSERT</name> <init>= <expr>1</expr></init></decl>,
<decl><name>AP_REG_ESPACE</name></decl>,
<decl><name>AP_REG_INVARG</name></decl>,
<decl><name>AP_REG_NOMATCH</name></decl>
}</block>;</enum>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>re_pcre</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>re_nsub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>re_erroffset</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_regex_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rm_so</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rm_eo</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_regmatch_t</name>;</typedef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_regcomp</name><argument_list>(<argument>ap_regex_t *preg</argument>, <argument>const char *regex</argument>, <argument>int cflags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_regexec</name><argument_list>(<argument>const ap_regex_t *preg</argument>, <argument>const char *string</argument>,
<argument>apr_size_t nmatch</argument>, <argument>ap_regmatch_t *pmatch</argument>, <argument>int eflags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_regexec_len</name><argument_list>(<argument>const ap_regex_t *preg</argument>, <argument>const char *buff</argument>,
<argument>apr_size_t len</argument>, <argument>apr_size_t nmatch</argument>,
<argument>ap_regmatch_t *pmatch</argument>, <argument>int eflags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_size_t</argument>)</argument_list></macro> <macro><name>ap_regerror</name><argument_list>(<argument>int errcode</argument>, <argument>const ap_regex_t *preg</argument>,
<argument>char *errbuf</argument>, <argument>apr_size_t errbuf_size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_regname</name><argument_list>(<argument>const ap_regex_t *preg</argument>,
<argument>apr_array_header_t *names</argument>, <argument>const char *prefix</argument>,
<argument>int upper</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_regfree</name><argument_list>(<argument><expr><name>ap_regex_t</name> *<name>preg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ap_regex_t</name></type> <name>rx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>subs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>nmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regmatch_t</name> *</type><name>pmatch</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_rxplus_t</name>;</typedef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_rxplus_t*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_rxplus_compile</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>, <argument><expr>const <name>char</name> *<name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_rxplus_exec</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>, <argument><expr><name>ap_rxplus_t</name> *<name>rx</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>pattern</name></expr></argument>, <argument><expr><name>char</name> **<name>newpattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_rxplus_nmatch</name><argument_list>(<argument><expr><name>ap_rxplus_t</name> *<name>rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_rxplus_nmatch</name><parameter_list>(<param><type><name>rx</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((rx)-&gt;match != NULL) ? (rx)-&gt;nmatch : 0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_rxplus_match</name><argument_list>(<argument>ap_rxplus_t *rx</argument>, <argument>int n</argument>, <argument>int *len</argument>,
<argument>const char **match</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char*</argument>)</argument_list></macro> <macro><name>ap_rxplus_pmatch</name><argument_list>(<argument>apr_pool_t *pool</argument>, <argument>ap_rxplus_t *rx</argument>, <argument>int n</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
