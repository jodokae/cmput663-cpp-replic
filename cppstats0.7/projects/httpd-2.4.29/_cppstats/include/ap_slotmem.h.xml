<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="include/ap_slotmem.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SLOTMEM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLOTMEM_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_shm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_global_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_md5.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SLOTMEM_PROVIDER_GROUP</name></cpp:macro> <cpp:value>"slotmem"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SLOTMEM_PROVIDER_VERSION</name></cpp:macro> <cpp:value>"0"</cpp:value></cpp:define>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>ap_slotmem_type_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SLOTMEM_TYPE_PERSIST</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SLOTMEM_TYPE_NOTMPSAFE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SLOTMEM_TYPE_PREGRAB</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SLOTMEM_TYPE_CLEARINUSE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>
<typedef>typedef <type>struct <name>ap_slotmem_instance_t</name></type> <name>ap_slotmem_instance_t</name>;</typedef>
<typedef>typedef <function_decl><type><name>apr_status_t</name></type> <name>ap_slotmem_callback_fn_t</name><parameter_list>(<param><decl><type><name>void</name>*</type> <name>mem</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<struct>struct <name>ap_slotmem_provider_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<function_decl><type><name>apr_status_t</name></type> (* <name>doall</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>s</name></decl></param>, <param><decl><type><name>ap_slotmem_callback_fn_t</name> *</type><name>func</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> (* <name>create</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> **</type><name>inst</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>item_size</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>item_num</name></decl></param>, <param><decl><type><name>ap_slotmem_type_t</name></type> <name>type</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> (* <name>attach</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> **</type><name>inst</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>item_size</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name> *</type><name>item_num</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> (* <name>dptr</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>s</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>item_id</name></decl></param>, <param><decl><type><name>void</name>**</type><name>mem</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> (* <name>get</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>s</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>item_id</name></decl></param>, <param><decl><type><name>unsigned</name> <name>char</name> *</type><name>dest</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>dest_len</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> (* <name>put</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>slot</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>item_id</name></decl></param>, <param><decl><type><name>unsigned</name> <name>char</name> *</type><name>src</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>src_len</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> (* <name>num_slots</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> (* <name>num_free_slots</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_size_t</name></type> (* <name>slot_size</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> (* <name>grab</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>s</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name> *</type><name>item_id</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> (* <name>release</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>s</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>item_id</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> (* <name>fgrab</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>s</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>item_id</name></decl></param>)</parameter_list>;</function_decl>
}</block>;</struct>
<typedef>typedef <type>struct <name>ap_slotmem_provider_t</name></type> <name>ap_slotmem_provider_t</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
