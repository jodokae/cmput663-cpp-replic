<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="include/ap_provider.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_PROVIDER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_PROVIDER_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>provider_name</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_list_provider_names_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>provider_group</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>provider_version</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_list_provider_groups_t</name>;</typedef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_register_provider</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>provider_group</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>provider_name</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>provider_version</name></expr></argument>,
<argument><expr>const <name>void</name> *<name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_lookup_provider</name><argument_list>(<argument><expr>const <name>char</name> *<name>provider_group</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>provider_name</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>provider_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_array_header_t *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_list_provider_names</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>provider_group</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>provider_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_array_header_t *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_list_provider_groups</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
